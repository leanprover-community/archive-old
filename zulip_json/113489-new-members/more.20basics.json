[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 186021159,
        "sender_full_name": "Iocta",
        "timestamp": 1579400087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  continuing</p>",
        "id": 186021212,
        "sender_full_name": "Iocta",
        "timestamp": 1579400179
    },
    {
        "content": "<p>(<a href=\"#narrow/stream/113489-new-members/topic/basics/near/186020919\" title=\"#narrow/stream/113489-new-members/topic/basics/near/186020919\">link to my past reply in the other thread</a>)</p>\n<p>Since <code>α</code> lives in <code>Type</code>, you have to use something like <code>exists.classical_rec_on</code> from mathlib's <code>logic.basic</code>. Also, the example becomes <code>noncomputable</code> because it uses the <code>choice</code> axiom.</p>",
        "id": 186021223,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1579400231
    },
    {
        "content": "<p>Hmm, maybe this isn't what I need then. I'm doing this one from the exercises</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span>\n\n<span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"n\">h&#39;</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">ex</span><span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 186021243,
        "sender_full_name": "Iocta",
        "timestamp": 1579400282
    },
    {
        "content": "<p>Is  the hole I need to fill here equivalent to the one in the smaller snippet?</p>",
        "id": 186021325,
        "sender_full_name": "Iocta",
        "timestamp": 1579400519
    },
    {
        "content": "<p>or maybe I'm just going about this the wrong way..</p>",
        "id": 186021479,
        "sender_full_name": "Iocta",
        "timestamp": 1579400880
    },
    {
        "content": "<p>This one can be done without <code>classical</code>. This should hopefully get you on the right track:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"n\">h&#39;</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 186021578,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1579401070
    },
    {
        "content": "<p>Got it, thanks.</p>",
        "id": 186021800,
        "sender_full_name": "Iocta",
        "timestamp": 1579401519
    },
    {
        "content": "<p>I'm trying to figure out how to use <code>exists.elim</code>, so I wanted to put an underscore in that <code>(\\lambda z, _)</code> and have it tell me what type <code>z</code> has. How can I make it tell me?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n<span class=\"bp\">_</span>\n</pre></div>",
        "id": 186653006,
        "sender_full_name": "Iocta",
        "timestamp": 1580100440
    },
    {
        "content": "<p>well what is the type of <code>p</code>?</p>",
        "id": 186654064,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1580102377
    },
    {
        "content": "<p>also you should be able to see the type of <code>z</code> in the underscore after it?</p>",
        "id": 186654070,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1580102401
    },
    {
        "content": "<blockquote>\n<p>also you should be able to see the type of z in the underscore after it?</p>\n</blockquote>\n<p>That's what I expected, but it doesn't appear</p>",
        "id": 186656010,
        "sender_full_name": "Iocta",
        "timestamp": 1580105780
    },
    {
        "content": "<p>When I put that in lean, there is an error over \"exists\" saying it can't synthesize <code>|- Prop</code>, but I can still hover over <code>z</code> to see <code>z : α</code></p>",
        "id": 186656164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580106084
    },
    {
        "content": "<p>You can't use <code>exists.elim</code> unless lean knows what you are trying to prove (the <code>_</code> in <code>foo: _</code>)</p>",
        "id": 186656224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580106143
    },
    {
        "content": "<p>If I remove the <code>have</code> and just use</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n<span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>then the underscores are highlighted as you would expect</p>",
        "id": 186656241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580106216
    },
    {
        "content": "<p>ah putting the cursor over <code>z</code> does display its type</p>",
        "id": 186656476,
        "sender_full_name": "Iocta",
        "timestamp": 1580106661
    },
    {
        "content": "<p>I didn't see it originally because there's a fair amount of latency before it appears</p>",
        "id": 186656569,
        "sender_full_name": "Iocta",
        "timestamp": 1580106815
    },
    {
        "content": "<p>dunno if that's an intentional delay in  <code>lean-mode</code> to make it less distracting or it's just slow</p>",
        "id": 186656634,
        "sender_full_name": "Iocta",
        "timestamp": 1580106929
    },
    {
        "content": "<p>I would guess it's a mix of intentional latency by vscode and lean latency. Hovers that are too aggressive can really get in your way</p>",
        "id": 186656745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580107086
    },
    {
        "content": "<p>there is a setting for hover delay in preferences</p>",
        "id": 186656754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580107128
    },
    {
        "content": "<p>i'm using emacs,  it just appears in the bottom bar rather than hovering</p>",
        "id": 186656820,
        "sender_full_name": "Iocta",
        "timestamp": 1580107217
    },
    {
        "content": "<p>How can I fill the holes? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h1</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a&#39;</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hpq</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">pa</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a&#39;</span> <span class=\"n\">pa</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">pq</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a&#39;</span> <span class=\"n\">pq</span><span class=\"o\">))))</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h2</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 186659494,
        "sender_full_name": "Iocta",
        "timestamp": 1580111028
    },
    {
        "content": "<p>Neither of them look true to me so you can't fill them in.</p>",
        "id": 186661314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580113402
    },
    {
        "content": "<p>the bad move was <code>exists.intro a</code>. The variable <code>a</code> is not necessary and has nothing to do with the <code>x</code> that satisfies the assumption</p>",
        "id": 186662657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115092
    },
    {
        "content": "<p>Ok got it.</p>",
        "id": 186724126,
        "sender_full_name": "Iocta",
        "timestamp": 1580158177
    },
    {
        "content": "<p>Might be nice if it would warn me I was spending time trying to fill something that wasn't fillable, if it could tell</p>",
        "id": 186724287,
        "sender_full_name": "Iocta",
        "timestamp": 1580158240
    },
    {
        "content": "<p>I am pretty sure that such a thing is undecidable!</p>",
        "id": 186729050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580161258
    },
    {
        "content": "<p>Am I on the right track?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">p_all_x</span> <span class=\"n\">exists_npx</span><span class=\"o\">,</span>\n  <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"n\">exists_npx</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">hnpa</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hpa</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>  <span class=\"n\">p_all_x</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">absurd</span> <span class=\"n\">hpa</span> <span class=\"n\">hnpa</span> <span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">exists_npx</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span>  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"n\">id</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnpa</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 186861142,
        "sender_full_name": "Iocta",
        "timestamp": 1580281698
    },
    {
        "content": "<p>Well you're not using tactic mode so you're already at a big disadvantage</p>",
        "id": 186861463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580282066
    },
    {
        "content": "<p>I'm not at lean right now but if you post the local context at the underscore (the assumptions and goal) it should be easy to see whether or not the hole is fillable</p>",
        "id": 186861496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580282157
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">04</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">lean</span>    <span class=\"mi\">60</span>  <span class=\"mi\">12</span> <span class=\"n\">error</span>           <span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n <span class=\"kn\">context</span><span class=\"o\">:</span>\n <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n <span class=\"n\">exists_npx</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n <span class=\"n\">hnpa</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">a</span>\n <span class=\"err\">⊢</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 186861593,
        "sender_full_name": "Iocta",
        "timestamp": 1580282281
    },
    {
        "content": "<p>How would you prove it in maths?</p>",
        "id": 186861647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580282342
    },
    {
        "content": "<p>Yeah -- the hole is fillable but as Johan says you need to know where you're going.</p>",
        "id": 186862052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580282852
    },
    {
        "content": "<p>and it would be a little easier to fill it in tactic mode. Are you using Lean in a funny way? I'd be tempted to just type \"begin end\" in place of that underscore. Are you not using Lean \"live\"?</p>",
        "id": 186862129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580282959
    },
    {
        "content": "<p>I have emacs running lean-mode with flycheck, not sure if that's normal</p>",
        "id": 186862307,
        "sender_full_name": "Iocta",
        "timestamp": 1580283208
    },
    {
        "content": "<p>I haven't seen begin or end yet. been going through the tutorial. currently at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html</a></p>",
        "id": 186862400,
        "sender_full_name": "Iocta",
        "timestamp": 1580283342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> Honest question: are you a computer scientist or a mathematician? This seems to matter a lot for which style is best when learning Lean.</p>",
        "id": 186862567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580283524
    },
    {
        "content": "<p>You are currently learning in CS mode. But there are also tutorials that approach Lean in math mode.</p>",
        "id": 186862579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580283548
    },
    {
        "content": "<p>E.g. <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>",
        "id": 186862648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580283616
    },
    {
        "content": "<p>Oh interesting, I hadn't seen that, will take a look.</p>",
        "id": 186862901,
        "sender_full_name": "Iocta",
        "timestamp": 1580283970
    },
    {
        "content": "<blockquote>\n<p>I haven't seen begin or end yet. been going through the tutorial. currently at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html</a></p>\n</blockquote>\n<p>You are just one chapter away from Nirvana :-)</p>",
        "id": 186864477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580285973
    },
    {
        "content": "<p>I'm returning to this problem. I got one step forward(?) but not seeing how to proceed. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">contrapositive</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hnq</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hnq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">p_all_x</span> <span class=\"n\">exists_npx</span><span class=\"o\">,</span>\n  <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"n\">exists_npx</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">hnpa</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hpa</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>  <span class=\"n\">p_all_x</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">absurd</span> <span class=\"n\">hpa</span> <span class=\"n\">hnpa</span> <span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">cont</span><span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n  <span class=\"n\">contrapositive</span> <span class=\"n\">cont</span>\n<span class=\"o\">)</span>\n</pre></div>",
        "id": 187612487,
        "sender_full_name": "Iocta",
        "timestamp": 1581049355
    },
    {
        "content": "<p>In math I'm not sure I've dug beneath the level of \"when negating, just flip the quantifiers\" so maybe some strategy there is what I'm missing</p>",
        "id": 187612596,
        "sender_full_name": "Iocta",
        "timestamp": 1581049543
    },
    {
        "content": "<p>You can't prove <code>¬ (∃ x, ¬ p x) → (∀ x, p x)</code> without using classical reasoning. Your term proves <code>¬ (∃ x, ¬ p x) → ¬¬(∀ x, p x)</code>.</p>",
        "id": 187612915,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581050067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> Here is a lengthy solution to that problem. I also had some issues with one of the directions, but ended up with two solutions after I was helped. The <code>L_2</code> one using tactic mode is the one that I thought of in the first place but didn't know how to implement. The<code>L_1</code>can be found within the topics in this chat room. You'll need to <code>open classical</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">T05R</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hall</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hexi</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hexi</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hw</span> <span class=\"o\">(</span><span class=\"n\">hall</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">T05L_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnExnpx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnpx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hnExnpx</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hnpx</span> <span class=\"n\">hpx</span><span class=\"o\">))))))</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">T05L_2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">T05</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">T05R</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T05L_2</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187741047,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581215642
    },
    {
        "content": "<p>Newbie question: is there a built-in way to change a goal of the form <code>a ≠ b</code> to <code>a = b -&gt; false</code>? I tried doing <code>by_contradiction</code> on it, but it changes instead to <code>¬a ≠ b</code>. I can get what I want by something like:</p>\n<div class=\"codehilite\"><pre><span></span>theorem zNEo1 : (0 ≠ 1) = ¬ (0 = 1) := rfl\ntheorem zNEo2 : ¬ (0 = 1) → (0 ≠ 1) :=\nbegin\n    intro h,\n    rw zNEo1,\n    exact h,\nend\n</pre></div>\n\n\n<p>but I feel there should be a better way.</p>",
        "id": 188380848,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1581948885
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zNEo2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is this what you want?</p>",
        "id": 188380987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581948989
    },
    {
        "content": "<p>Yes, apparently this takes care of it. Didn't encounter <code>change</code> before. Thank you!</p>",
        "id": 188382765,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1581950289
    },
    {
        "content": "<p>It might also be useful to just <code>intro h</code>, and it automatically unfolds <code>\\ne</code></p>",
        "id": 188382836,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581950357
    },
    {
        "content": "<p>It changes the goal to anything which is the same by definition (in a very precise sense).</p>",
        "id": 188382839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581950364
    },
    {
        "content": "<p>I thought I tried <code>intro</code>, but apparently not. So <code>0 ≠ 1</code> is indeed defined as <code>0 = 1 → false</code> then?</p>",
        "id": 188383343,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1581950713
    },
    {
        "content": "<p>Yes.</p>",
        "id": 188383353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581950722
    },
    {
        "content": "<p>Are you using VScode?</p>",
        "id": 188383445,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581950763
    },
    {
        "content": "<p>Yes.</p>",
        "id": 188383468,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1581950787
    },
    {
        "content": "<p>You can right-click on the <code>≠</code> symbol, choose \"Go to definition\" to get to <a href=\"https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L97-L98\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L97-L98\">https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L97-L98</a> then do the same on the negation symbol to go to <a href=\"https://github.com/leanprover/lean/blob/master/library/init/core.lean#L142-L143\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/core.lean#L142-L143\">https://github.com/leanprover/lean/blob/master/library/init/core.lean#L142-L143</a></p>",
        "id": 188383578,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581950881
    },
    {
        "content": "<p>This may look like a hard way of learning (sounds like: code is the documentation). But this is actually part of why proof assistants are so cool compared to traditional textbooks: you can always ask and get the answer.</p>",
        "id": 188383686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581950944
    },
    {
        "content": "<p>That is great advice. I didn't know about right-click, I only knew to hover the mouse over symbols to get how to type them.</p>",
        "id": 188385352,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1581952132
    },
    {
        "content": "<p>Actually one more question along the same lines. The manual talks about double negation elimination after the excluded middle <code>em</code>, but is there a way to have Lean replace <code>¬ ¬ P</code> by <code>P</code> without writing our own tool?</p>",
        "id": 188385719,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1581952401
    },
    {
        "content": "<p>Just realized I can probably  <code>change</code> it again. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 188386870,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1581953232
    },
    {
        "content": "<p>You can't just <code>change</code> it because they're not equal by definition. There is a lemma <code>classical.not_not</code> you could use to rewrite it.</p>",
        "id": 188386903,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581953267
    },
    {
        "content": "<p>Great! Thanks again!</p>",
        "id": 188386996,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1581953330
    },
    {
        "content": "<p><code>push_neg</code> should do that for you as well.</p>",
        "id": 188387327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581953595
    },
    {
        "content": "<p>Can someone explain why I can evaluate the truth value of the 'divide' but not the 'belongs' proposition below? Is there a way to evaluate <code>tt</code> or <code>ff</code> for the latter?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"n\">def</span> <span class=\"n\">A1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">A1</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">A1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- #reduce to_bool (1 ∈ A1) fails</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 189044184,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1582653827
    },
    {
        "content": "<p>Or is this a bug?</p>",
        "id": 189048531,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1582656522
    },
    {
        "content": "<p>Hmm, I can't reproduce this. With no imports, with both Lean 3.4.2 and Lean 3.5.1, it's the last line which fails with </p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\n⊢ decidable (2 ∣ 0)\n</pre></div>\n\n\n<p>With a recent mathlib imported (e.g. with <code>import data.int.basic</code> at the start of the file), I get no errors at all.</p>\n<p>Can you say more about what version of Lean you're using / if you're importing some version of mathlib?</p>",
        "id": 189048534,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582656526
    },
    {
        "content": "<p>Oh, sorry, I misunderstood. You commented out the line that fails. Let me try again.</p>",
        "id": 189048573,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582656562
    },
    {
        "content": "<p>I only <code>import set</code>, the <code>divides</code> works with just that. I edited to include the import.</p>",
        "id": 189048677,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1582656629
    },
    {
        "content": "<p>Well, it's not a bug. The error is</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\n⊢ decidable (1 ∈ A1)\n</pre></div>\n\n\n<p>which makes sense, since general set membership is not decidable.</p>",
        "id": 189048737,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582656717
    },
    {
        "content": "<p>Is there something I can do about actually evaluating it? The <code>#reduce</code> does show a <code>Prop</code> which should evaluate to <code>tt</code>.</p>",
        "id": 189048935,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1582656849
    },
    {
        "content": "<p>For explicit finite sets like this, you might want to use <code>finset</code>s instead:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">F1</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">F1</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n</pre></div>",
        "id": 189048939,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582656851
    },
    {
        "content": "<p>OK, thanks! That works!</p>",
        "id": 189049048,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1582656939
    },
    {
        "content": "<p>There's a difference between \"I know how to prove this in this one case\" and \"Lean has an algorithm which will solve all questions of this type\", that's what's going on</p>",
        "id": 189049148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582656992
    },
    {
        "content": "<p>There is a question here that I don't know how to answer. How would you tell Lean to reduce the argument <code>(1 ∈ A1)</code> before attempting to apply <code>to_bool</code> to it? Somehow, Lean can reduce <code>(1 ∈ A1)</code> to <code>(1 = 3 ∨ 1 = 2 ∨ 1 = 1 ∨ false)</code> and <code>#reduce to_bool (1 = 3 ∨ 1 = 2 ∨ 1 = 1 ∨ false)</code> returns <code>tt</code>, as expected.</p>",
        "id": 189049360,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582657121
    },
    {
        "content": "<p>What is interesting is that the <code>#reduce</code> alone seems to show the same output for both <code>finset</code> and <code>set</code>. Like <code>1 = 3 ∨ 1 = 2 ∨ 1 = 1 ∨ false</code> for both.</p>",
        "id": 189049368,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1582657127
    },
    {
        "content": "<p>Obviously I was typing at the same time as Bryan Gin-ge Chen.</p>",
        "id": 189049501,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1582657206
    },
    {
        "content": "<p>You might find it interesting to include <code>set_option pp.all true</code> at the start of the file and then look at <code>#print A1</code> and <code>#print F1</code> to see how their internals differ.</p>",
        "id": 189049745,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582657361
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">A3</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"err\">^</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"mi\">42</span> <span class=\"err\">∈</span> <span class=\"n\">A3</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Here's an illustration of the original set problem. Until a few months ago, it was not known whether 42 was in this set or not.</p>",
        "id": 189049950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582657489
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">A3</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"err\">^</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">42</span> <span class=\"err\">∈</span> <span class=\"n\">A3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">80538738812075974</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">80435758145817515</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">12602123297335631</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189050103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582657600
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">A1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">A1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">A1</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">A1</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n</pre></div>",
        "id": 189050544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582657884
    },
    {
        "content": "<p>This result is very recent indeed, Kevin. </p>\n<p>I saw the difference in <code>finset</code> versus <code>set</code>. Although I can't read through all of it, <code>finset</code> has several places with <code>decidable</code>. I guess that makes for the different result.</p>",
        "id": 189050565,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1582657897
    },
    {
        "content": "<p>Thank you both!</p>",
        "id": 189050647,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1582657937
    },
    {
        "content": "<p>It may be more enlightening to look at how <code>finset</code>s are implemented as compared to <code>set</code>s. In short, <code>finset</code>s are backed by explicit <code>list</code>s modulo ordering and a proof that each element occurs once, whereas <code>set</code>s are simply abstract functions to <code>Prop</code>.</p>",
        "id": 189050825,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582658055
    },
    {
        "content": "<p>Yes, indeed - this makes it clear.</p>",
        "id": 189050908,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1582658120
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>finset.decidable_mem : Π {α : Type u_1} [h : decidable_eq α] (a : α) (s : finset α), decidable (a ∈ s)\n</pre></div>\n\n\n<p>Note that you still need decidable equality on your type, it's not just finiteness. The naturals have decidable equality.</p>",
        "id": 189050970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582658162
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">A1</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">A1</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>The reals don't.</p>",
        "id": 189051073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582658241
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 189422894,
        "sender_full_name": "Iocta",
        "timestamp": 1583046370
    },
    {
        "content": "<p>When applying <code>simp</code>, is there a way to find out what it did?</p>",
        "id": 189422903,
        "sender_full_name": "Iocta",
        "timestamp": 1583046400
    },
    {
        "content": "<p>Yes, to a certain extent. See the options described <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/simp.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/simp.md\">here</a>.</p>",
        "id": 189423078,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583046803
    },
    {
        "content": "<p>There's also <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#squeeze_simp--squeeze_simpa\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#squeeze_simp--squeeze_simpa\"><code>squeeze_simp</code></a> if you import mathlib's tactics.</p>",
        "id": 189423126,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583046867
    },
    {
        "content": "<p>aha</p>",
        "id": 189423309,
        "sender_full_name": "Iocta",
        "timestamp": 1583047300
    },
    {
        "content": "<p>I usually use <code>set_option trace.simplify.rewrite true</code> instead, that shows you only what <code>simp</code> actually did (at least approximately, I remember there being some weird caveats). The <code>trace.simplify</code> output is everything <code>simp</code> tried (which is to say, everything) even if it didn't work.</p>",
        "id": 189436592,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583075766
    },
    {
        "content": "<p>Oh I see that's also documented a bit further down.</p>",
        "id": 189436601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583075788
    },
    {
        "content": "<p>For a general <code>a :ℝ</code>, do we have anything that can be used to produce <code>0 ≤ a ^ 2</code>?  I've been trying with <code>norm_num</code>, but it doesn't work for all <code>a</code>.</p>",
        "id": 189446290,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1583094218
    },
    {
        "content": "<p><code>pow_two_nonneg</code>  in <code>algebra/group_power.lean</code></p>",
        "id": 189446466,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1583094535
    },
    {
        "content": "<p>Thanks! That is what I was after, but didn't know where to find it.</p>",
        "id": 189446476,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1583094581
    },
    {
        "content": "<p>Yeah I had to guess the name and then search for it in the vscode menu, which requires a little experience, but in this case it is a mathlib convention that squaring is always called <code>pow_two</code> and that <code>0 ≤ </code>is called <code>nonneg</code>.</p>",
        "id": 189446584,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1583094736
    },
    {
        "content": "<p>You could probably find this with <code>library_search</code></p>",
        "id": 189447008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583095543
    },
    {
        "content": "<p>Didn't use <code>library_search</code> yet. Not sure how to use it. Don't you need to know something to start with, like <code>pow_two</code> for example?</p>",
        "id": 189447265,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1583095934
    },
    {
        "content": "<p>Kevin is right you don't need to know anything for this really:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>",
        "id": 189447414,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1583096199
    },
    {
        "content": "<p>and library_search tells you exactly the same lemma name</p>",
        "id": 189447416,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1583096215
    },
    {
        "content": "<p>I see! Great, thanks!</p>",
        "id": 189447459,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1583096284
    },
    {
        "content": "<p>This will help a lot, it was very frustrating sometimes as I was searching through lots of files for almost everything.</p>",
        "id": 189447480,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1583096386
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- With simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"bp\">*</span>\n<span class=\"kn\">end</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"bp\">*</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">05</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">lean</span>    <span class=\"mi\">87</span>   <span class=\"mi\">1</span> <span class=\"n\">info</span>            <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]:</span> <span class=\"n\">p</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]:</span> <span class=\"n\">q</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]:</span> <span class=\"n\">r</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n <span class=\"mi\">05</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">lean</span>    <span class=\"mi\">91</span>   <span class=\"mi\">1</span> <span class=\"n\">info</span>            <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]:</span> <span class=\"n\">p</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]:</span> <span class=\"n\">q</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]:</span> <span class=\"n\">r</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">and_self</span><span class=\"o\">]:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>How do I translate what <code>trace</code> is saying into code?</p>",
        "id": 189939956,
        "sender_full_name": "Iocta",
        "timestamp": 1583532892
    },
    {
        "content": "<p>Use <code>squeeze_simp</code>?</p>",
        "id": 189940104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583533016
    },
    {
        "content": "<p>It will turn it into code for you.</p>",
        "id": 189940115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583533023
    },
    {
        "content": "<p><code>squeeze_simp</code> doesn't seem to reduce the options much here. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">squeeze_simp</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- Try this: simp only [*, and_self]</span>\n<span class=\"kn\">end</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"bp\">*</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>How do I turn the output of <code>set_option trace.simplify.rewrite true</code> (in the example above) manually? I'm not sure what it's trying to tell me. How do I rewrite <code>[h] : q ==&gt; true</code>?</p>",
        "id": 189993194,
        "sender_full_name": "Iocta",
        "timestamp": 1583628766
    },
    {
        "content": "<p>This example is kind of too simple and relies more on internal behavior of simp than on lemmas.</p>",
        "id": 189993472,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583629432
    },
    {
        "content": "<p>But you could start with <code>rw h.1.2</code></p>",
        "id": 189993515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583629462
    },
    {
        "content": "<p>Wait no</p>",
        "id": 189993517,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583629472
    },
    {
        "content": "<p>cases h</p>",
        "id": 189993518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583629479
    },
    {
        "content": "<p>You need whatever lemma it is that says if <code>h : p</code>, then <code>p = true</code></p>",
        "id": 189993525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583629530
    },
    {
        "content": "<p>just use cases and split</p>",
        "id": 189993531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583629546
    },
    {
        "content": "<p>This rewriting strategy is not a natural way to prove this particular example</p>",
        "id": 189993532,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583629557
    },
    {
        "content": "<p>high-powered tactics like <code>simp</code> and <code>rw</code> are not really needed for basic logic questions like this, just use the basic tactics.</p>",
        "id": 189993572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583629615
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hpq</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hqr</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hqr</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>works. What would I do with <code>split</code> here?</p>",
        "id": 189994883,
        "sender_full_name": "Iocta",
        "timestamp": 1583632485
    },
    {
        "content": "<p><code>split</code> stops you having to do <code>repeat</code></p>",
        "id": 189994895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583632517
    },
    {
        "content": "<p>it splits an and goal into two goals</p>",
        "id": 189994898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583632552
    },
    {
        "content": "<p>Not quite seeing how to use it here. What's the function I want to apply to both branches?</p>",
        "id": 189995439,
        "sender_full_name": "Iocta",
        "timestamp": 1583633862
    },
    {
        "content": "<p>There must be a shorter way to write this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hnp</span> <span class=\"n\">hnq</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hpq</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">hnp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hpq</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">hnq</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190003083,
        "sender_full_name": "Iocta",
        "timestamp": 1583650923
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tauto</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_and_of_not_or_not</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span>\n</pre></div>",
        "id": 190003198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1583651222
    },
    {
        "content": "<p>neat</p>",
        "id": 190003247,
        "sender_full_name": "Iocta",
        "timestamp": 1583651286
    },
    {
        "content": "<p>Am I down the wrong path?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hq</span> <span class=\"n\">hnq</span><span class=\"o\">,</span>\n<span class=\"n\">constructor</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hq&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hp&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"n\">constructor</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hnq</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hq</span> <span class=\"n\">hnq</span><span class=\"o\">,</span>\n<span class=\"n\">constructor</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190033214,
        "sender_full_name": "Iocta",
        "timestamp": 1583711843
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> <span class=\"kn\">example</span><span class=\"err\">…</span>   <span class=\"mi\">335</span>   <span class=\"mi\">1</span> <span class=\"n\">error</span>           <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n <span class=\"n\">state</span><span class=\"o\">:</span>\n <span class=\"mi\">2</span> <span class=\"n\">goals</span>\n <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span>\n <span class=\"err\">⊢</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>\n\n <span class=\"n\">case</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span>\n <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span>\n <span class=\"err\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190033268,
        "sender_full_name": "Iocta",
        "timestamp": 1583711908
    },
    {
        "content": "<p>You know <code>not X</code> is by definition <code>X -&gt; false</code>? So in the first goal you can <code>intro hq2</code> and then <code>revert h</code>! When your hypotheses can be used to get a contradiction as yours can, in both cases) then <code>exfalso</code> is sometimes a useful tactic; it replaces the goal by <code>false</code>.</p>",
        "id": 190033523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583712417
    },
    {
        "content": "<p>thanks</p>",
        "id": 190034193,
        "sender_full_name": "Iocta",
        "timestamp": 1583713722
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">05</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"err\">…</span>    <span class=\"mi\">15</span>   <span class=\"mi\">3</span> <span class=\"n\">error</span>           <span class=\"n\">solve1</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">focused</span> <span class=\"n\">goal</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">solved</span>\n <span class=\"n\">state</span><span class=\"o\">:</span>\n <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n <span class=\"err\">⊢</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>In tactic mode: What's the equivalent of <code>intro h</code> here? I want to get inside of the <code>\\forall</code>.</p>",
        "id": 190035643,
        "sender_full_name": "Iocta",
        "timestamp": 1583716872
    },
    {
        "content": "<p>(or is that not idiomatic?)</p>",
        "id": 190035696,
        "sender_full_name": "Iocta",
        "timestamp": 1583716970
    },
    {
        "content": "<p>It is generally easier to work forward at this point; <code>have h2 := h x</code> will give you a proof of <code>p x ∧ q x</code></p>",
        "id": 190036029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583717704
    },
    {
        "content": "<p>ok</p>",
        "id": 190036970,
        "sender_full_name": "Iocta",
        "timestamp": 1583719541
    },
    {
        "content": "<p>(what would you expect the tactic state to look like after intro h?)</p>",
        "id": 190040960,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583728356
    },
    {
        "content": "<p>I guess <code>intro</code> isn't really the right word. What Mario said does what I wanted.</p>",
        "id": 190103016,
        "sender_full_name": "Iocta",
        "timestamp": 1583779245
    },
    {
        "content": "<p>How can I avoid repeating <code>assumption</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"o\">{</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 190105752,
        "sender_full_name": "Iocta",
        "timestamp": 1583780741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span>  I'm not sure if there is much you can do.</p>",
        "id": 190107074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583781581
    },
    {
        "content": "<p>But if you want to golf this, then certainly <code>by tauto</code> is a lot shorter...</p>",
        "id": 190107115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583781602
    },
    {
        "content": "<p>Alright</p>",
        "id": 190107527,
        "sender_full_name": "Iocta",
        "timestamp": 1583781831
    },
    {
        "content": "<p>I mean... I don't know if you wanted such a logic hammer...</p>",
        "id": 190107845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583781990
    },
    {
        "content": "<p>It's actually not a bad example of an introductory level tactic</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">leftright</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">itactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">t</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">leftright</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">leftright</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">leftright</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 190135419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583804022
    },
    {
        "content": "<p>There is a completely different style of proof represented by</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Here the idea is that you use rewrite rules <code>p ==&gt; true</code>, plus <code>true \\/ a ==&gt; true</code>, <code>a \\/ true ==&gt; true</code> and <code>true /\\ true ==&gt; true</code> to simplify the entire goal to <code>true</code></p>",
        "id": 190135490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583804146
    },
    {
        "content": "<p>Ah cool</p>",
        "id": 190141947,
        "sender_full_name": "Iocta",
        "timestamp": 1583815220
    },
    {
        "content": "<p>How to fix this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">squeeze</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">natural</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">natural</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"bp\">→</span> <span class=\"n\">natural</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">natural</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"o\">:=</span>\n<span class=\"n\">natural</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">add_m_n</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">add_m_n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"o\">:=</span>\n<span class=\"n\">natural</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">mul_m_n</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"n\">mul_m_n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"o\">:=</span>\n<span class=\"n\">natural</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">pred_n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"o\">:=</span>\n<span class=\"n\">natural</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">sub_m_n</span><span class=\"o\">,</span> <span class=\"n\">pred</span> <span class=\"n\">sub_m_n</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_dist_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;*&gt;</span>  <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"n\">natural</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">k</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span>  <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span>  <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n    <span class=\"k\">from</span> <span class=\"k\">calc</span>\n      <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">mul_dist_add</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span>\n\n  <span class=\"o\">))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">06</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">lean</span>    <span class=\"mi\">40</span>  <span class=\"mi\">50</span> <span class=\"n\">error</span>           <span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n   <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n <span class=\"k\">with</span>\n   <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span>\n <span class=\"n\">state</span><span class=\"o\">:</span>\n <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">,</span>\n <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span>\n <span class=\"err\">⊢</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190240817,
        "sender_full_name": "Iocta",
        "timestamp": 1583887127
    },
    {
        "content": "<p>The easy way is <code>by rw ih</code></p>",
        "id": 190240956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583887283
    },
    {
        "content": "<p>there's also a harder way</p>",
        "id": 190240957,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583887289
    },
    {
        "content": "<p>How do I do the harder way? I tried using <code>trace</code> to see what <code>simp *</code> was doing but it wasn't all that helpful</p>",
        "id": 190241285,
        "sender_full_name": "Iocta",
        "timestamp": 1583887630
    },
    {
        "content": "<p>Using <code>congr_arg</code> somehow</p>",
        "id": 190241299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583887667
    },
    {
        "content": "<p>maybe <code>congr_arg (\\lam x, add x (m &lt;*&gt; n)) ih</code></p>",
        "id": 190241347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583887712
    },
    {
        "content": "<p>anyways, this is where <code>rw</code> starts to become indispensable</p>",
        "id": 190241351,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583887719
    },
    {
        "content": "<p>ok that works</p>",
        "id": 190241574,
        "sender_full_name": "Iocta",
        "timestamp": 1583888026
    },
    {
        "content": "<p>You can probably use <code>\\t</code> for this</p>",
        "id": 190241638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583888089
    },
    {
        "content": "<p><code>ih ▸ rfl</code> works</p>",
        "id": 190241675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583888137
    },
    {
        "content": "<p>The unnecessarily compressed proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"n\">natural</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">k</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">mul_dist_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">ih</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190242008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583888521
    },
    {
        "content": "<p>What's the difference between <code>exact</code> and <code>apply</code>? Example: <code>exact (eq.subst ih rfl)</code> but <code>apply (eq.subst ih rfl)</code> doesn't.</p>",
        "id": 190242128,
        "sender_full_name": "Iocta",
        "timestamp": 1583888646
    },
    {
        "content": "<p><code>apply f</code> means <code>refine f</code> or <code>refine f _</code> or <code>refine f _ _</code> or ... depending on the type of <code>f</code>. Sometimes it can't guess right, and more importantly for your example, it can't communicate the expected type of <code>f</code> when elaborating it because it doesn't know yet</p>",
        "id": 190242173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583888720
    },
    {
        "content": "<p>On the other hand <code>eq.subst</code> requires that the expected type be known</p>",
        "id": 190242184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583888746
    },
    {
        "content": "<p>ah ok</p>",
        "id": 190242349,
        "sender_full_name": "Iocta",
        "timestamp": 1583888939
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">natural</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">n</span>\n<span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"k\">calc</span>\n    <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">06</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">lean</span>    <span class=\"mi\">31</span>   <span class=\"mi\">1</span> <span class=\"n\">error</span>           <span class=\"s2\">&quot;eliminator&quot;</span> <span class=\"n\">elaborator</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n   <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n     <span class=\"k\">show</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n       <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">zero</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n            <span class=\"o\">(</span><span class=\"n\">id</span>\n               <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n                  <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n                     <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"n\">a_3</span><span class=\"o\">),</span>\n                         <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">eq</span> <span class=\"n\">e_1</span><span class=\"o\">)</span> <span class=\"n\">e_2</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span><span class=\"o\">))</span>\n                        <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n                        <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">),</span> <span class=\"n\">congr_arg</span> <span class=\"n\">succ</span> <span class=\"n\">e_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)))</span>\n                     <span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">inj_eq</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">eq_self_iff_true</span> <span class=\"n\">m</span><span class=\"o\">))))</span>\n            <span class=\"n\">trivial</span><span class=\"o\">)</span>\n <span class=\"n\">has</span> <span class=\"n\">type</span>\n   <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">),</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">m</span>\n <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n   <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">),</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 190321189,
        "sender_full_name": "Iocta",
        "timestamp": 1583954684
    },
    {
        "content": "<p>How to fix this?</p>",
        "id": 190321207,
        "sender_full_name": "Iocta",
        "timestamp": 1583954704
    },
    {
        "content": "<p>I think it's saying \"you're trying to depend on <code>ih</code> but I'm not providing it\"</p>",
        "id": 190321338,
        "sender_full_name": "Iocta",
        "timestamp": 1583954782
    },
    {
        "content": "<p>use <code>rec_on</code> not <code>cases_on</code></p>",
        "id": 190321352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583954796
    },
    {
        "content": "<p>oh. that was easy :-)</p>",
        "id": 190321383,
        "sender_full_name": "Iocta",
        "timestamp": 1583954819
    },
    {
        "content": "<p>is it a good idea to introduce that <code>m</code> to avoid confusing that variable with the enclosing <code>n</code>, or should I just use <code>n</code> again?</p>",
        "id": 190321594,
        "sender_full_name": "Iocta",
        "timestamp": 1583954959
    },
    {
        "content": "<p>(really just asking what the convention is)</p>",
        "id": 190321706,
        "sender_full_name": "Iocta",
        "timestamp": 1583955010
    },
    {
        "content": "<p>aha, the code I can find looks to pretty uniformly reuse <code>n</code></p>",
        "id": 190322670,
        "sender_full_name": "Iocta",
        "timestamp": 1583955602
    },
    {
        "content": "<p>Yes, this seems to be the normal convention</p>",
        "id": 190325021,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583956954
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span>  <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">append</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nil_append</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nil</span> <span class=\"bp\">++</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cons_append</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">append_nil</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">t</span>\n<span class=\"n\">rfl</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">))</span>\n\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">06</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">lean</span>    <span class=\"mi\">29</span>  <span class=\"mi\">17</span> <span class=\"n\">error</span>           <span class=\"n\">none</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">overloads</span> <span class=\"n\">are</span> <span class=\"n\">applicable</span>\n <span class=\"n\">error</span> <span class=\"n\">for</span> <span class=\"n\">hidden</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">append</span>\n <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n   <span class=\"n\">append</span> <span class=\"n\">t</span>\n <span class=\"n\">term</span>\n   <span class=\"n\">t</span>\n <span class=\"n\">has</span> <span class=\"n\">type</span>\n   <span class=\"n\">α</span>\n <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n   <span class=\"n\">list</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n\n <span class=\"n\">error</span> <span class=\"n\">for</span> <span class=\"n\">has_append</span><span class=\"bp\">.</span><span class=\"n\">append</span>\n <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n <span class=\"err\">⊢</span> <span class=\"n\">has_append</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 190348279,
        "sender_full_name": "Iocta",
        "timestamp": 1583974668
    },
    {
        "content": "<p>I'm guessing I'm doing the namespacing wrong?</p>",
        "id": 190348331,
        "sender_full_name": "Iocta",
        "timestamp": 1583974710
    },
    {
        "content": "<p>I think your code is just wrong</p>",
        "id": 190349362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583976232
    },
    {
        "content": "<p>in the inductive case, what happened to the element that is the first argument to <code>cons</code>? You aren't taking enough arguments</p>",
        "id": 190349422,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583976322
    },
    {
        "content": "<p>I think the issue is that the <code>++</code> notation is conflicting with the one from core (which uses the <code>has_append</code> typeclass)</p>",
        "id": 190350616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583978128
    },
    {
        "content": "<p>oh, reid is right, there is another argument to <code>list.rec_on</code>. The setup should look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">append_nil</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">t</span>\n<span class=\"n\">rfl</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">))</span>\n</pre></div>",
        "id": 190350706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583978258
    },
    {
        "content": "<p>Oh, I see</p>",
        "id": 190357205,
        "sender_full_name": "Iocta",
        "timestamp": 1583989657
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">len</span><span class=\"o\">,</span> <span class=\"n\">len</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>How do I state a theorem \"length nil = 0\"?</p>",
        "id": 190438775,
        "sender_full_name": "Iocta",
        "timestamp": 1584043917
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">length</span>  <span class=\"n\">nil</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">06</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">lean</span>    <span class=\"mi\">55</span>  <span class=\"mi\">19</span> <span class=\"n\">error</span>           <span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n <span class=\"kn\">context</span><span class=\"o\">:</span>\n <span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190438968,
        "sender_full_name": "Iocta",
        "timestamp": 1584044006
    },
    {
        "content": "<p>Lean complains it doesn't know the type of nil.</p>",
        "id": 190439437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584044166
    },
    {
        "content": "<p>Because there is no way it can reconstruct  α from your statement.</p>",
        "id": 190439471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584044187
    },
    {
        "content": "<p>Good news is: one the statement will type-check, the proof will be pretty short.</p>",
        "id": 190439570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584044241
    },
    {
        "content": "<p>There's no implicit generalization like in Haskell and some other languages. You have to write something like <code>example (a : Type) : length (nil : list a) = 0</code></p>",
        "id": 190439617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584044276
    },
    {
        "content": "<p>aha, that works</p>",
        "id": 190439770,
        "sender_full_name": "Iocta",
        "timestamp": 1584044361
    },
    {
        "content": "<p>Because Reid gave away the statement, you are allowed only three characters to write the proof.</p>",
        "id": 190439897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584044428
    },
    {
        "content": "<p>yeah, got it</p>",
        "id": 190440286,
        "sender_full_name": "Iocta",
        "timestamp": 1584044551
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span>\n    <span class=\"n\">nil</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reversed</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n      <span class=\"n\">append</span> <span class=\"n\">reversed</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">nil</span><span class=\"o\">)</span>  <span class=\"o\">)))</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">06</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">lean</span>    <span class=\"mi\">90</span>   <span class=\"mi\">7</span> <span class=\"n\">error</span>           <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n   <span class=\"n\">append</span> <span class=\"n\">reversed</span>\n <span class=\"n\">term</span>\n   <span class=\"n\">reversed</span>\n <span class=\"n\">has</span> <span class=\"n\">type</span>\n   <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n   <span class=\"n\">list</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">...</span>\n   <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n     <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">++</span> <span class=\"err\">?</span><span class=\"n\">m_3</span>\n   <span class=\"n\">has</span> <span class=\"n\">type</span>\n     <span class=\"n\">list</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n   <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n     <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190445612,
        "sender_full_name": "Iocta",
        "timestamp": 1584047385
    },
    {
        "content": "<p>I can just delete the <code>u</code> and it works, but what is the difference between <code>u</code> and no <code>u</code>?</p>",
        "id": 190445761,
        "sender_full_name": "Iocta",
        "timestamp": 1584047493
    },
    {
        "content": "<p>because the <code>def length : Π {α : Type u}, list α → nat :=</code> one does have a <code>u</code></p>",
        "id": 190445855,
        "sender_full_name": "Iocta",
        "timestamp": 1584047546
    },
    {
        "content": "<p>Somewhere you must have <code>Type</code> with no <code>u</code></p>",
        "id": 190446275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584047790
    },
    {
        "content": "<p>yeah I do</p>",
        "id": 190446466,
        "sender_full_name": "Iocta",
        "timestamp": 1584047907
    },
    {
        "content": "<p>I'm not getting the picture here. \"Define an inductive data type consisting of terms built up from the following constructors...\" <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">inductive</span> <span class=\"n\">expr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">expr</span>\n<span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">case</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">case</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">case</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"kn\">eval</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">t</span><span class=\"o\">))},</span>\n<span class=\"n\">case</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">t</span>  <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"kn\">eval</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">t</span><span class=\"o\">))},</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">expr</span>\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">06</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"err\">…</span>    <span class=\"mi\">19</span>  <span class=\"mi\">26</span> <span class=\"n\">error</span>           <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"err\">&#39;</span><span class=\"kn\">eval</span><span class=\"err\">&#39;</span>\n <span class=\"n\">state</span><span class=\"o\">:</span>\n <span class=\"n\">case</span> <span class=\"n\">hidden</span><span class=\"bp\">.</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">plus</span>\n <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">α</span>\n <span class=\"err\">⊢</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190561710,
        "sender_full_name": "Iocta",
        "timestamp": 1584138403
    },
    {
        "content": "<p>You can't use <code>eval</code> in the definition of <code>eval</code></p>",
        "id": 190561865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584138524
    },
    {
        "content": "<p>Then how do I recurse?</p>",
        "id": 190561904,
        "sender_full_name": "Iocta",
        "timestamp": 1584138552
    },
    {
        "content": "<p>This is all a bit CS for me, so don't take what I have to say too seriously.</p>",
        "id": 190562098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584138662
    },
    {
        "content": "<p>but when you made the inductive type, Lean made a recursor for you</p>",
        "id": 190562122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584138686
    },
    {
        "content": "<p>After the definition of <code>expr</code>, try <code>#print prefix expr</code></p>",
        "id": 190562133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584138698
    },
    {
        "content": "<p>wait, better is <code>#print prefix hidden.expr</code></p>",
        "id": 190562193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584138732
    },
    {
        "content": "<p>All that crazy stuff got made when you defined <code>expr</code>. In particular <code>hidden.expr.rec</code> got made, and if that doesn't do the job then nothing will</p>",
        "id": 190562241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584138788
    },
    {
        "content": "<p>or you can use <code>match</code> but maybe that's not covered until chapter 8</p>",
        "id": 190562364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584138901
    },
    {
        "content": "<p>hmm maybe you can't use match, I should stop talking. Does the recursor do it for you?</p>",
        "id": 190562404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584138947
    },
    {
        "content": "<p>I think you're supposed to be eating <code>f : nat -&gt; nat</code> as well, and <code>var n</code> is supposed to evaluate to <code>f n</code></p>",
        "id": 190562509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584139029
    },
    {
        "content": "<p>If you mean like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">case</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n<span class=\"n\">case</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n<span class=\"n\">case</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">)},</span>\n<span class=\"n\">case</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">t</span>  <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">)},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>then </p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">06</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"err\">…</span>    <span class=\"mi\">21</span>  <span class=\"mi\">18</span> <span class=\"n\">error</span>           <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">s</span>\n <span class=\"n\">term</span>\n   <span class=\"n\">s</span>\n <span class=\"n\">has</span> <span class=\"n\">type</span>\n   <span class=\"n\">expr</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"mi\">1</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190562517,
        "sender_full_name": "Iocta",
        "timestamp": 1584139036
    },
    {
        "content": "<p>This is how you recurse</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kn\">eval</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"kn\">eval</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kn\">eval</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"kn\">eval</span> <span class=\"n\">t</span>\n</pre></div>",
        "id": 190562557,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584139079
    },
    {
        "content": "<p>You're not really supposed to be making data using tactic mode, but that is not the issue right now. How about <code>induction x</code> instead of cases x?</p>",
        "id": 190562593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584139083
    },
    {
        "content": "<p>You can use<code> induction</code> instead of <code>cases</code> as well, but <code>eval</code> won't be called <code>eval </code>it will be called something like <code>x_ih</code></p>",
        "id": 190562636,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584139129
    },
    {
        "content": "<p>Aha, that helps</p>",
        "id": 190562670,
        "sender_full_name": "Iocta",
        "timestamp": 1584139175
    },
    {
        "content": "<p>That usage of the equation compiler isn't covered until chapter 8</p>",
        "id": 190562788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584139292
    },
    {
        "content": "<p>The chapter 7 approved way</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span> <span class=\"n\">id</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">ns</span> <span class=\"n\">nt</span><span class=\"o\">,</span> <span class=\"n\">ns</span> <span class=\"bp\">+</span> <span class=\"n\">nt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">ns</span> <span class=\"n\">nt</span><span class=\"o\">,</span> <span class=\"n\">ns</span> <span class=\"bp\">*</span> <span class=\"n\">nt</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190563004,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584139495
    },
    {
        "content": "<p>I think the idea is that the second <code>id</code> should be an <code>f</code></p>",
        "id": 190563138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584139590
    },
    {
        "content": "<p>which is an input function</p>",
        "id": 190563155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584139600
    },
    {
        "content": "<p>Oh that's pretty close to something I had earlier</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span>\n<span class=\"n\">id</span>\n<span class=\"n\">id</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190563349,
        "sender_full_name": "Iocta",
        "timestamp": 1584139776
    },
    {
        "content": "<p>which doesn't work because the latter functions are supposed to take ( outside outside inside inside) not just (inside inside)</p>",
        "id": 190563461,
        "sender_full_name": "Iocta",
        "timestamp": 1584139866
    },
    {
        "content": "<p>You know you can use <code>_</code> to figure out what is going on?</p>",
        "id": 190563493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584139894
    },
    {
        "content": "<p>yeah I just didn't grok what it was telling me</p>",
        "id": 190563511,
        "sender_full_name": "Iocta",
        "timestamp": 1584139909
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span>\n<span class=\"n\">id</span>\n<span class=\"n\">id</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>-&gt;</p>\n<div class=\"codehilite\"><pre><span></span>scratch2.lean:18:8: error\ndon&#39;t know how to synthesize placeholder\ncontext:\nα : Type u,\nx s t : expr α\n⊢ ℕ → ℕ → ℕ\n▹\nscratch2.lean:19:1: error\ndon&#39;t know how to synthesize placeholder\ncontext:\nα : Type u,\nx : expr α\n⊢ expr α → expr α → ℕ → ℕ → ℕ\n</pre></div>\n\n\n<p>so the first hole is expecting two more inputs and the second is expecting four</p>",
        "id": 190563661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140031
    },
    {
        "content": "<p>and you can see that s and t have type <code>expr alpha</code> not <code>nat</code></p>",
        "id": 190563719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140053
    },
    {
        "content": "<p>I do see it <em>now</em> :-)</p>",
        "id": 190563725,
        "sender_full_name": "Iocta",
        "timestamp": 1584140060
    },
    {
        "content": "<p>:-)</p>",
        "id": 190563730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140066
    },
    {
        "content": "<p>My ability to debug soared once I realised I could understand the error messages</p>",
        "id": 190563752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140085
    },
    {
        "content": "<p>when I was a beginner I was just all \"oh crap it still doesn't work\" but now I learnt how to read the error messages I can go \"oh look, type class inference failed\" or \"oh look, I put the wrong number of variables\" etc. It is liberating :-)</p>",
        "id": 190563802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140145
    },
    {
        "content": "<p>That's consistent with my limited experience so far as well</p>",
        "id": 190563876,
        "sender_full_name": "Iocta",
        "timestamp": 1584140200
    },
    {
        "content": "<p>now should I be able to use <code>eval</code>?  <code>#reduce expr.eval (const 0)</code> </p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"mi\">06</span><span class=\"bp\">.</span><span class=\"mi\">03</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"err\">…</span>    <span class=\"mi\">18</span>  <span class=\"mi\">26</span> <span class=\"n\">error</span>           <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n <span class=\"err\">⊢</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">checker</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190564438,
        "sender_full_name": "Iocta",
        "timestamp": 1584140704
    },
    {
        "content": "<p>What is the type of <code>const</code>?</p>",
        "id": 190564469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140740
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 190564553,
        "sender_full_name": "Iocta",
        "timestamp": 1584140813
    },
    {
        "content": "<p>The error says \"you wrote 0, so I'll try and figure out a term of the type I was expecting called 0, oh wait, I was expecting a term of type <code>Type u_1</code></p>",
        "id": 190564570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140831
    },
    {
        "content": "<p>aha, so <code>#reduce expr.eval (const nat 0)</code></p>",
        "id": 190564582,
        "sender_full_name": "Iocta",
        "timestamp": 1584140842
    },
    {
        "content": "<p><code>const alpha 0</code></p>",
        "id": 190564596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140856
    },
    {
        "content": "<p>what is this alpha doing in expr? That's the problem</p>",
        "id": 190564624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140883
    },
    {
        "content": "<p>Why not just remove the alpha?</p>",
        "id": 190564670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584140894
    },
    {
        "content": "<p>yeah that works</p>",
        "id": 190564717,
        "sender_full_name": "Iocta",
        "timestamp": 1584140941
    },
    {
        "content": "<p>I haven't got the hang of the alphas and <code>u</code>s yet</p>",
        "id": 190564750,
        "sender_full_name": "Iocta",
        "timestamp": 1584140973
    },
    {
        "content": "<p>I had to read TPIL three times before I got the hang of it (but then again I suspect I had less of a CS background than you). What helped with me was just coming up with projects and working on them.</p>",
        "id": 190564839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141024
    },
    {
        "content": "<p>You have to write <code>const α  0</code></p>",
        "id": 190565388,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584141504
    },
    {
        "content": "<p>You can change the definition of <code>expr</code> to fix this. Use brackets like this <code>| const {} (n: nat) : expr</code></p>",
        "id": 190565433,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584141554
    },
    {
        "content": "<p>But is alpha playing any role at all? How about we remove all occurences of alpha?</p>",
        "id": 190565453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584141579
    },
    {
        "content": "<p>I need some help with \"Use pattern matching to prove that the composition of surjective functions is surjective\"</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">surjective</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">surjective_comp</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 190666931,
        "sender_full_name": "Iocta",
        "timestamp": 1584306299
    },
    {
        "content": "<p>if I <code>intro gam: \\gamma</code> can I destruct it into an element of beta that it came from?</p>",
        "id": 190667053,
        "sender_full_name": "Iocta",
        "timestamp": 1584306469
    },
    {
        "content": "<p>Do you want to use mathlib or are you doing TPIL exercises?</p>",
        "id": 190669019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584309540
    },
    {
        "content": "<p>It seems to be a TPIL exercise. I have no idea what Jeremy had in mind. The closest to a term-mode proof I could do is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">surjective_comp</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">y</span> <span class=\"k\">in</span>\n<span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"err\">←</span> <span class=\"n\">hx</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 190669321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584310027
    },
    {
        "content": "<p>You could replace <code>let</code> with match, adjusting the syntax as needed.</p>",
        "id": 190669337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584310058
    },
    {
        "content": "<p>But I would rather import mathlib tactics and write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hg</span> <span class=\"n\">z</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hf</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190669385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584310134
    },
    {
        "content": "<p>that's pretty slick</p>",
        "id": 190676678,
        "sender_full_name": "Iocta",
        "timestamp": 1584321772
    },
    {
        "content": "<p>What's the <code>match</code> version look like? I'm not getting the syntax right.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"k\">with</span>\n<span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">hg</span> <span class=\"n\">g</span> <span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">f</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 190682615,
        "sender_full_name": "Iocta",
        "timestamp": 1584331719
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">sum_inhabited</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span>  <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"n\">default</span> <span class=\"bp\">_</span> <span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>works but how do I find out what's going in the <code>_</code>?</p>",
        "id": 190942244,
        "sender_full_name": "Iocta",
        "timestamp": 1584512593
    },
    {
        "content": "<p>or, (independent of how to find out), what <em>is</em> going in the <code>_</code>?</p>",
        "id": 190942864,
        "sender_full_name": "Iocta",
        "timestamp": 1584513402
    },
    {
        "content": "<p><code>#print sum_inhabited</code> helps here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">sum_inhabited</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊕</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"o\">{</span><span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊕</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inhabited_right</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>(Sometimes you have to turn off pretty printing and notation with <code>#print</code> with <code>set_option pp.all true</code> to get the info you want, but this seems like enough.)</p>",
        "id": 190943016,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584513585
    },
    {
        "content": "<p>Compare the output with <code>set_option pp.notation false</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">sum_inhabited</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"o\">{</span><span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inhabited_right</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 190943087,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584513664
    },
    {
        "content": "<p>I see</p>",
        "id": 190943242,
        "sender_full_name": "Iocta",
        "timestamp": 1584513876
    },
    {
        "content": "<p>By the way, the only way a proof of an inhabited instance like <code>⟨ default _ ⟩</code> can work is if there is already an inhabited instance for that type</p>",
        "id": 190943482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584514262
    },
    {
        "content": "<p>in other words, the instance is useless because it's already there, and <code>by apply_instance</code> should also work</p>",
        "id": 190943495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584514292
    },
    {
        "content": "<p>mhmm</p>",
        "id": 190943556,
        "sender_full_name": "Iocta",
        "timestamp": 1584514372
    },
    {
        "content": "<p>can I import a module <code>import foo.bar</code> and access <code>foo.bar.baz</code> without <code>open</code>ing <code>bar</code>?</p>",
        "id": 191180824,
        "sender_full_name": "Iocta",
        "timestamp": 1584655215
    },
    {
        "content": "<p><code>import logic.basic</code> seems to open it automatically?</p>",
        "id": 191181295,
        "sender_full_name": "Iocta",
        "timestamp": 1584655552
    },
    {
        "content": "<p>The definitions in logic.basic are probably not in any namespace called logic or logic.basic</p>",
        "id": 191181386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584655604
    },
    {
        "content": "<p>Definition X in file Y is just called X after you import Y</p>",
        "id": 191181414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584655629
    },
    {
        "content": "<p><code>#check not_or_distrib</code> doesn't work unless I <code>import logic.basic</code></p>",
        "id": 191181450,
        "sender_full_name": "Iocta",
        "timestamp": 1584655661
    },
    {
        "content": "<p>that's because this function is defined in logic.basic</p>",
        "id": 191181490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584655683
    },
    {
        "content": "<p>but the only namespace used in logic.basic is <code>classical</code>, so after you import <code>logic.basic</code> you have stuff like <code>not_or_distrib</code> (in the root namespace) and <code>classical.not_forall</code> (in the classical namespace)</p>",
        "id": 191181617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584655799
    },
    {
        "content": "<p>there is no logic.basic namespace, even after importing it</p>",
        "id": 191181675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584655818
    },
    {
        "content": "<p>I see</p>",
        "id": 191181855,
        "sender_full_name": "Iocta",
        "timestamp": 1584655948
    },
    {
        "content": "<p>Doing <a href=\"https://github.com/leanprover-community/mathlib/issues/3\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/3\">#3</a> from <a href=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html\">https://leanprover.github.io/logic_and_proof/sets_in_lean.html</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Inter</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_simple</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">Inter</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Union</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Union</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">T</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">teq</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">fa</span> <span class=\"n\">fb</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"n\">teq</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">fa</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">fb</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I have a proof using the regular logic functions, but I'm not sure how to write the proof using <code>Inter.elim</code> etc.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">S</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191200916,
        "sender_full_name": "Iocta",
        "timestamp": 1584676461
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">I</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n</pre></div>",
        "id": 191200933,
        "sender_full_name": "Iocta",
        "timestamp": 1584676529
    },
    {
        "content": "<p>thanks for creating a copy-paste-able example.</p>",
        "id": 191201582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584677722
    },
    {
        "content": "<p>you might want to start from here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">I</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"n\">i</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">⋂</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"n\">i</span>\n</pre></div>",
        "id": 191201647,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584677830
    },
    {
        "content": "<p>Note that you can also do this directly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191208085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584688678
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">h</span> <span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">Inter</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_inter_eq</span><span class=\"o\">],</span>\n<span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">Inter</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h_left</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">Inter</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h_right</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>works but I'm guessing there's a better solution, this isn't easy to follow.</p>",
        "id": 191378019,
        "sender_full_name": "Iocta",
        "timestamp": 1584848121
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">parameter</span> <span class=\"o\">(</span><span class=\"n\">irreflR</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">parameter</span> <span class=\"o\">(</span><span class=\"n\">transR</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">&lt;</span> <span class=\"o\">:=</span> <span class=\"n\">R</span>\n\n<span class=\"n\">def</span> <span class=\"n\">R&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">≤</span> <span class=\"o\">:=</span> <span class=\"n\">R&#39;</span>\n\n\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">reflR&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">transR&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h1</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">rab</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h2</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">rbc</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">transR</span> <span class=\"n\">rab</span> <span class=\"n\">rbc</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">eqbc</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"n\">eqbc</span> <span class=\"n\">rab</span><span class=\"o\">)</span> <span class=\"o\">))</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">eqab</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h2</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">rbc</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">substr</span> <span class=\"n\">eqab</span> <span class=\"n\">rbc</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">eqbc</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">substr</span> <span class=\"n\">eqab</span> <span class=\"n\">eqbc</span><span class=\"o\">))))</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">transR&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">transR</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span> lap14.4.…    35   1 error           unknown identifier &#39;transR&#39;\n</pre></div>\n\n\n<p>I did a term proof, now trying the tactic proof. In the last line, how come it doesn't know about <code>transR</code>?</p>",
        "id": 191385161,
        "sender_full_name": "Iocta",
        "timestamp": 1584863089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> </p>\n<p>Add <code>include transR</code> below the <code>parameter (transR : transitive R)</code></p>\n<p>So the beginning looks like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">parameter</span> <span class=\"o\">(</span><span class=\"n\">irreflR</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">parameter</span> <span class=\"o\">(</span><span class=\"n\">transR</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">transR</span>\n</pre></div>\n\n\n<p>(I found it in this GitHub issue <a href=\"https://github.com/leanprover/lean/issues/1527\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1527\">here</a>, and the page number referred to doesn't seem to be correct... Maybe there was a prior edition to TPIL?)</p>",
        "id": 191386463,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584865769
    },
    {
        "content": "<p>Don't use parameters, use variables</p>",
        "id": 191387998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584869077
    },
    {
        "content": "<p>that was from <a href=\"https://leanprover.github.io/logic_and_proof/relations_in_lean.html\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/relations_in_lean.html\">https://leanprover.github.io/logic_and_proof/relations_in_lean.html</a></p>",
        "id": 191418938,
        "sender_full_name": "Iocta",
        "timestamp": 1584915141
    },
    {
        "content": "<p>I want to say \"<code>a &lt; b</code> and <code>b &lt; a</code> so <code>a &lt; a</code> but that's not allowed so by contradiction <code>a = b</code>\" but I'm not sure how to write that in Lean at the <code>sorry</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">irreflR</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">transR</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">&lt;</span> <span class=\"o\">:=</span> <span class=\"n\">R</span>\n\n<span class=\"n\">def</span> <span class=\"n\">R&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">≤</span> <span class=\"o\">:=</span> <span class=\"n\">R&#39;</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">reflR&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span>\n\n\n<span class=\"n\">include</span> <span class=\"n\">transR</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">transR&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">transR</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">substr</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">antisymmR&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192598309,
        "sender_full_name": "Iocta",
        "timestamp": 1585778486
    },
    {
        "content": "<p>Specifically, why doesn't this work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">include</span> <span class=\"n\">irreflR</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">antisymmR&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">irreflR</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192599030,
        "sender_full_name": "Iocta",
        "timestamp": 1585778978
    },
    {
        "content": "<p>Try to apply transitivity first</p>",
        "id": 192599977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585779683
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">antisymmR&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">transR</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>\"invalid apply tactic\"</p>",
        "id": 192600140,
        "sender_full_name": "Iocta",
        "timestamp": 1585779834
    },
    {
        "content": "<p>After <code>cases h2</code> you have three goals. The tactic state for your first goal is</p>\n<div class=\"codehilite\"><pre><span></span>case or.inl\nA : Type,\nR : A → A → Prop,\ntransR : transitive R,\na b : A,\nh1 : R a b,\nh2 : R b a\n⊢ a = b\n</pre></div>",
        "id": 192601473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585780861
    },
    {
        "content": "<p><code>apply irreflR</code> doesn't work because <code>irreflR</code> says <code>R x x -&gt; false</code> and your goal is not <code>false</code>.</p>",
        "id": 192601516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585780910
    },
    {
        "content": "<p><code>apply transR h1 h2</code> does not work because <code>transR h1 h2</code> has type <code>R a a</code> which is not a function (so you can't apply it) and is not equal to <code>a = b</code> anyway.</p>",
        "id": 192601585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585780954
    },
    {
        "content": "<p>The way to make progress with this first goal is <code>exfalso</code>. Although I am slightly concerned here because I don't see <code>irreflR</code> in your local context. Did you mean to <code>include</code> it?</p>",
        "id": 192601664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585781035
    },
    {
        "content": "<p>You're playing a bit fast and loose with multiple goals as well. Sometimes this can come back to bite you -- e.g. some tactics randomly apply to all goals or whatever, and things change when you don't mean them to. It's maybe better to write something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">antisymmR&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192601856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585781191
    },
    {
        "content": "<p>Ah <code>exfalso</code> is what I needed</p>",
        "id": 192607876,
        "sender_full_name": "Iocta",
        "timestamp": 1585786171
    },
    {
        "content": "<p>Is there a shorter way to write <code>apply eq.subst foo</code>?</p>",
        "id": 192607884,
        "sender_full_name": "Iocta",
        "timestamp": 1585786183
    },
    {
        "content": "<p><code>rw foo</code>?</p>",
        "id": 192608001,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585786304
    },
    {
        "content": "<p>What do I do here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">parameter</span> <span class=\"o\">(</span><span class=\"n\">reflR</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">parameter</span> <span class=\"o\">(</span><span class=\"n\">transR</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n\n<span class=\"n\">include</span> <span class=\"n\">reflR</span>\n<span class=\"n\">include</span> <span class=\"n\">transR</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192708454,
        "sender_full_name": "Iocta",
        "timestamp": 1585852824
    },
    {
        "content": "<p>Do you understand the goal you are trying to prove? <code>unfold S</code> if you don't?</p>",
        "id": 192711506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585854491
    },
    {
        "content": "<p>hmm <code>rw [S]</code> seems to work better</p>",
        "id": 192711538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585854514
    },
    {
        "content": "<p><code>rw [S] at *,</code> maybe even better. But you probably don't need to do this as far as Lean is concerned -- if you can finish the proof from here then try deleting this line and see if the proof still works.</p>",
        "id": 192711638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585854560
    },
    {
        "content": "<p>Ah ok</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">rab</span> <span class=\"n\">rba</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">rbc</span> <span class=\"n\">rcb</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">transR</span> <span class=\"n\">rab</span> <span class=\"n\">rbc</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">transR</span> <span class=\"n\">rcb</span> <span class=\"n\">rba</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192716053,
        "sender_full_name": "Iocta",
        "timestamp": 1585856646
    },
    {
        "content": "<p>am I supposed to put <code>{ }</code> somewhere in there for the reasons you mentioned yesterday?</p>",
        "id": 192716102,
        "sender_full_name": "Iocta",
        "timestamp": 1585856676
    },
    {
        "content": "<p>Looks like around each of the last two lines.</p>",
        "id": 192716235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585856757
    },
    {
        "content": "<p>After <code>apply and.intro</code> you have two goals, so I usually add</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"o\">{</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>to my tactic block immediately</p>",
        "id": 192716338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585856797
    },
    {
        "content": "<p>(Actually, I add</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"o\">{</span>\n<span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>then fix up the <code>}</code> when I finish the subgoals.)</p>",
        "id": 192716397,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585856838
    },
    {
        "content": "<p>alright</p>",
        "id": 192716550,
        "sender_full_name": "Iocta",
        "timestamp": 1585856916
    },
    {
        "content": "<p>there's no autoformatter for lean is there?</p>",
        "id": 192716990,
        "sender_full_name": "Iocta",
        "timestamp": 1585857145
    },
    {
        "content": "<p>Actually VS Code does do some general formatting. For example, if you type <code>{</code> it inserts <code>{}</code>; if you then put your cursor in between the braces and press Enter, the closing brace is indented to the same level as its opening counterpart. With a little practice you can adjust your style to it (or the other way around).</p>",
        "id": 192749006,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1585877183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> If you mean, take a file with \"bad\" formatting style, and automatically turn it into something that stylistically will make mathlib maintainers happy.... no, I'm not aware of such a tool. And I would be very happy to know about it if you find one!</p>",
        "id": 192758728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585890363
    },
    {
        "content": "<p>What's this <code>''</code> notation mean?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">surj_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">B</span> <span class=\"err\">⊆</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">A</span>\n</pre></div>",
        "id": 192856357,
        "sender_full_name": "Iocta",
        "timestamp": 1585943867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20basics/near/192856357\" title=\"#narrow/stream/113489-new-members/topic/more.20basics/near/192856357\">said</a>:</p>\n<blockquote>\n<p>What's this <code>''</code> notation mean?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">surj_on</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">B</span> <span class=\"err\">⊆</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">A</span>\n</pre></div>\n\n\n</blockquote>\n<p>It means take the image of f over A</p>",
        "id": 192856425,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585943886
    },
    {
        "content": "<p><code>f '' A := f(A)</code> if you prefer</p>",
        "id": 192856445,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585943898
    },
    {
        "content": "<p>You have the same for preimage using a <code>''⁻¹</code> if I'm not wrong.</p>",
        "id": 192856487,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585943921
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 192856806,
        "sender_full_name": "Iocta",
        "timestamp": 1585944063
    },
    {
        "content": "<p>You can always put <code>#print notation ''</code> etc to see definition of notation in lean. You can also hover over it, and even jump to the definition of the underlying term</p>",
        "id": 192857357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585944361
    },
    {
        "content": "<p>nice! the online books don't have that hover-info feature but copying into my editor isn't hard</p>",
        "id": 192857607,
        "sender_full_name": "Iocta",
        "timestamp": 1585944488
    },
    {
        "content": "<p>This feels too manual. Is there a <code>simp_harder</code> or something?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">m</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span>  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"k\">calc</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_mul</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_mul</span><span class=\"o\">]</span> <span class=\"o\">)))</span>\n</pre></div>",
        "id": 192895403,
        "sender_full_name": "Iocta",
        "timestamp": 1585986370
    },
    {
        "content": "<p>Replace all the <code>nat.succ bla</code> with <code>bla + 1</code></p>",
        "id": 192895480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585986523
    },
    {
        "content": "<p>After that <code>by ring</code> should do it.</p>",
        "id": 192895484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585986531
    },
    {
        "content": "<p>But I don't know if you have access to <code>ring</code>...</p>",
        "id": 192895514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585986576
    },
    {
        "content": "<p>Also... <code>ring</code> will just use <code>mul_add</code> which is the statement that you are trying to prove.</p>",
        "id": 192895565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585986630
    },
    {
        "content": "<p>So it would be cheating</p>",
        "id": 192895568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585986635
    },
    {
        "content": "<p>induct on <code>k</code></p>",
        "id": 192898009,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585990777
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">k</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 192898088,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585990876
    },
    {
        "content": "<p>here is the official proof in core:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">sort_add</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_left_comm</span><span class=\"o\">]]</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">lemma</span> <span class=\"n\">left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>        <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_mul</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">left_distrib</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">],</span> <span class=\"n\">sort_add</span> <span class=\"kn\">end</span>\n</pre></div>",
        "id": 192898142,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585990950
    },
    {
        "content": "<p>This is a level in the natural number game and it might be interesting to compare with the tactic mode proof I wrote</p>",
        "id": 192901122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585996102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> said to me recently that he thought I should exploit more automation in the natural number game but when I wrote the lean code I didn't understand anything about automation</p>",
        "id": 192901141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585996151
    },
    {
        "content": "<p>Since this works,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">m</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span>  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"k\">calc</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_mul</span><span class=\"o\">]</span> <span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>how come I can't delete between the first two <code>=</code> in the <code>calc</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">m</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span>  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"k\">calc</span>\n  <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_mul</span><span class=\"o\">]</span> <span class=\"o\">)))</span>\n</pre></div>",
        "id": 192920639,
        "sender_full_name": "Iocta",
        "timestamp": 1586024503
    },
    {
        "content": "<p>The answer to \"why didn't simp work\" is almost always visible from the final goal state in the error message, which is where <code>simp</code> got stuck</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 192920764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024669
    },
    {
        "content": "<p>It needs to reassociate some things to finish, so add <code>add_left_comm</code></p>",
        "id": 192920772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024687
    },
    {
        "content": "<p>How come it didn't find the path I used?</p>",
        "id": 192920821,
        "sender_full_name": "Iocta",
        "timestamp": 1586024763
    },
    {
        "content": "<p>because it found another path first</p>",
        "id": 192920912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024898
    },
    {
        "content": "<p><code>simp</code> doesn't explore all paths, it just rewrites with random things from its set</p>",
        "id": 192920942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024929
    },
    {
        "content": "<p>once it makes <em>any</em> progress on one path, it won't try others?</p>",
        "id": 192920944,
        "sender_full_name": "Iocta",
        "timestamp": 1586024936
    },
    {
        "content": "<p>right</p>",
        "id": 192920945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024941
    },
    {
        "content": "<p>so is there a <code>simp_harder</code>?</p>",
        "id": 192920954,
        "sender_full_name": "Iocta",
        "timestamp": 1586024966
    },
    {
        "content": "<p>so it is important that you give <code>simp</code> a confluent system of rewrites</p>",
        "id": 192920955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586024969
    },
    {
        "content": "<p>the point is that it's not supposed to be a tree search, it's more like a net where all paths lead to the desired result</p>",
        "id": 192921013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025013
    },
    {
        "content": "<p>You can use <code>simp_rw</code> to control the order of rewrites</p>",
        "id": 192921034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025068
    },
    {
        "content": "<p>or <code>simp [foo, bar]; simp [baz]</code></p>",
        "id": 192921045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025090
    },
    {
        "content": "<p>but if you put all the rewrites in one bag don't expect to get any particular order</p>",
        "id": 192921092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025125
    },
    {
        "content": "<p>is <code>tactic.interactive.solve_by_elim</code>the tree-search one?</p>",
        "id": 192921164,
        "sender_full_name": "Iocta",
        "timestamp": 1586025313
    },
    {
        "content": "<p>That does implicational theorems, not rewrites</p>",
        "id": 192921175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025351
    },
    {
        "content": "<p><code>cc</code> is maybe closer to this</p>",
        "id": 192921218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025374
    },
    {
        "content": "<p>But I don't think there is any mechanism that explores all paths in the simp set. The number of paths grows very rapidly</p>",
        "id": 192921230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025419
    },
    {
        "content": "<p>Here's the nng proof fwiw:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mul_add</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"o\">[</span><span class=\"n\">nat_num_game</span><span class=\"o\">]</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"c1\">-- ;-)</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>You don't need the last refl if you remove <code>[nat_num_game]</code></p>",
        "id": 192921288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586025484
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">cc</span>\n</pre></div>\n\n\n<p>doesn't work</p>",
        "id": 192921323,
        "sender_full_name": "Iocta",
        "timestamp": 1586025557
    },
    {
        "content": "<p>Given <code>h : f 0 = f 1</code>, there are 2^n points in the space of all rewrites of <code>[f 0, ..., f 0]</code></p>",
        "id": 192921330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025591
    },
    {
        "content": "<p>sure. and I guess with practice i'll remember what all the relevant theorems are called so I won't have to think about it</p>",
        "id": 192921395,
        "sender_full_name": "Iocta",
        "timestamp": 1586025678
    },
    {
        "content": "<p>Or just be more controlled in your rewrites so it does what you want</p>",
        "id": 192921406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025715
    },
    {
        "content": "<p>I don't actually use <code>cc</code>, there is some trick to making it useful</p>",
        "id": 192921451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025756
    },
    {
        "content": "<p>you probably have to put all the relevant lemmas in the context</p>",
        "id": 192921457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025767
    },
    {
        "content": "<p>with <code>include</code> or something?</p>",
        "id": 192921526,
        "sender_full_name": "Iocta",
        "timestamp": 1586025854
    },
    {
        "content": "<p>with <code>have</code></p>",
        "id": 192921531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586025864
    },
    {
        "content": "<p>as in <code>have succ_mul, from succ_mul,</code>?</p>",
        "id": 192922235,
        "sender_full_name": "Iocta",
        "timestamp": 1586026918
    },
    {
        "content": "<p>it's <code>have H, from &lt;proof of H&gt;</code></p>",
        "id": 192922280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586026948
    },
    {
        "content": "<p>or just <code>have := succ_mul</code></p>",
        "id": 192922285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586026964
    },
    {
        "content": "<p>I don't think <code>cc</code> will instantiate lemmas, does it?</p>",
        "id": 192922433,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586027201
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">m</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span>  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span>\n  <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_left_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">cc</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>doesn't work</p>",
        "id": 192922600,
        "sender_full_name": "Iocta",
        "timestamp": 1586027488
    },
    {
        "content": "<p>ie</p>\n<div class=\"codehilite\"><pre><span></span>m n k m : ℕ,\nih : m * (n + k) = m * n + m * k,\nthis : ∀ (n m : ℕ), succ n * m = n * m + m,\nthis : ∀ (n m k : ℕ), n + (m + k) = m + (n + k)\n⊢ succ m * (n + k) = succ m * n + succ m * k\n</pre></div>\n\n\n<p><code>cc</code> failing</p>",
        "id": 192922649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586027540
    },
    {
        "content": "<p>^</p>",
        "id": 192922661,
        "sender_full_name": "Iocta",
        "timestamp": 1586027589
    },
    {
        "content": "<p>(I don't know anything about <code>cc</code>, I was just posting so people could diagnose)</p>",
        "id": 192922668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586027608
    },
    {
        "content": "<p>for comparison, </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">m</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span>  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span>\n  <span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>does work</p>",
        "id": 192922785,
        "sender_full_name": "Iocta",
        "timestamp": 1586027817
    },
    {
        "content": "<p>need another theorem in order to use <code>simp only</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">m</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span>  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span>\n  <span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 192922934,
        "sender_full_name": "Iocta",
        "timestamp": 1586028043
    },
    {
        "content": "<p>but the <code>cc</code> version of that doesn't work either</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">m</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span>  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span>\n  <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_mul</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_left_comm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">cc</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n</pre></div>",
        "id": 192923001,
        "sender_full_name": "Iocta",
        "timestamp": 1586028133
    },
    {
        "content": "<p>reid says you need to instantiate the lemmas, i.e. <code>have := nat.succ_mul m (n+k)</code> and so on</p>",
        "id": 192923028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586028205
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">m</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span>  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span>\n  <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">cc</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>works, deleting <code>cc,</code> makes it fail with </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"err\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 192923434,
        "sender_full_name": "Iocta",
        "timestamp": 1586028865
    },
    {
        "content": "<p>if I'm interpreting that right it did instantiate the lemmas</p>",
        "id": 192923600,
        "sender_full_name": "Iocta",
        "timestamp": 1586029168
    },
    {
        "content": "<p>I have no idea what to make of this</p>",
        "id": 192923688,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586029313
    },
    {
        "content": "<p>from the proof term, it looks like maybe <code>cc</code> has built-in knowledge that <code>+</code> is commutative and associative</p>",
        "id": 192923735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586029366
    },
    {
        "content": "<p>using <code>rw [add_left_comm, add_assoc]</code> instead of <code>cc</code> works there, so it does seem that way</p>",
        "id": 192923901,
        "sender_full_name": "Iocta",
        "timestamp": 1586029626
    },
    {
        "content": "<p>I wondered if the lemmas in the <code>rw</code> list above were being pulled into <code>cc</code>'s scope so I tried deleting the last <code>succ_mul</code> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">m</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ih</span><span class=\"o\">:</span>  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span>\n  <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">succ_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">cc</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>but no</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"err\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n</pre></div>",
        "id": 192923974,
        "sender_full_name": "Iocta",
        "timestamp": 1586029728
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span>\n</pre></div>\n\n\n<p>when I put the cursor over <code>*</code> why does it tell me about <code>has_mul.mul</code> instead of <code>nat.mul</code>?</p>",
        "id": 192926895,
        "sender_full_name": "Iocta",
        "timestamp": 1586034113
    },
    {
        "content": "<p>because <code>*</code> is notation for <code>has_mul.mul</code></p>",
        "id": 192926943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586034135
    },
    {
        "content": "<p>I dunno what answer I was looking for :-P</p>",
        "id": 192926973,
        "sender_full_name": "Iocta",
        "timestamp": 1586034214
    },
    {
        "content": "<p>:-)</p>",
        "id": 192926978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586034224
    },
    {
        "content": "<p>looks like <a href=\"https://leanprover.github.io/logic_and_proof/the_real_numbers.html\" title=\"https://leanprover.github.io/logic_and_proof/the_real_numbers.html\">Logic and Proof</a> doesn't have \"... in Lean\" versions for the last few chapters. is that because nobody's gotten around to writing them or because those chapters are too hard to port to Lean or some other reason?</p>",
        "id": 192927274,
        "sender_full_name": "Iocta",
        "timestamp": 1586034707
    },
    {
        "content": "<p>My guess is the former</p>",
        "id": 192927314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586034727
    },
    {
        "content": "<p>Actually, they do look hard</p>",
        "id": 192927323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586034745
    },
    {
        "content": "<p>Chapter 19 alone would be quite an effort for a beginner.</p>",
        "id": 192927336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586034799
    },
    {
        "content": "<p>They could certainly be done in Lean but it would be far more effort than the earlier chapters.</p>",
        "id": 192927380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586034866
    },
    {
        "content": "<p><code>import data.real.basic</code> seems to cause compilation and I'm running out of ram. That's not supposed to happen, right?</p>",
        "id": 192929752,
        "sender_full_name": "Iocta",
        "timestamp": 1586038759
    },
    {
        "content": "<p>Are you using <code>leanproject</code> to download mathlib olean files? What version of Lean are you using?</p>",
        "id": 192929811,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586038824
    },
    {
        "content": "<p>I was using 3.7.0 with leanproject. I'll try upgrading to 3.7.2.</p>",
        "id": 192929999,
        "sender_full_name": "Iocta",
        "timestamp": 1586039155
    },
    {
        "content": "<p>Try restarting Lean. There is no 3.7.0. don't upgrade to 3.7.2</p>",
        "id": 192930037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586039172
    },
    {
        "content": "<p>Sorry, I take that back. Just use <code>leanproject up</code></p>",
        "id": 192930044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586039206
    },
    {
        "content": "<p>deleted everything and rebuilt, working now</p>",
        "id": 192930525,
        "sender_full_name": "Iocta",
        "timestamp": 1586040013
    },
    {
        "content": "<p>Lean 3.7.0c and 3.7.1c have some issues that prevent olean files from being loaded properly in Windows. They should all be fixed in 3.7.2c.</p>",
        "id": 192930608,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586040147
    },
    {
        "content": "<p>er not quite working</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 192930690,
        "sender_full_name": "Iocta",
        "timestamp": 1586040336
    },
    {
        "content": "<p><code>_target/deps/mathlib/src/data/real/basic.lean:240:13: error: unexpected token (lean-checker)</code></p>",
        "id": 192930692,
        "sender_full_name": "Iocta",
        "timestamp": 1586040338
    },
    {
        "content": "<p>Restart Lean? Did you use <code>leanproject up</code>?</p>",
        "id": 192930736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040381
    },
    {
        "content": "<p>i switched to 3.7.2 and ran <code>leanproject up</code> and restarted lean</p>",
        "id": 192930742,
        "sender_full_name": "Iocta",
        "timestamp": 1586040402
    },
    {
        "content": "<p>leanproject up would have switched for you</p>",
        "id": 192930749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040418
    },
    {
        "content": "<p>Exit VS Code and restart. What errors do you get?</p>",
        "id": 192930757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040449
    },
    {
        "content": "<p>am i not supposed to have lean installed outside leanproject?</p>",
        "id": 192930758,
        "sender_full_name": "Iocta",
        "timestamp": 1586040450
    },
    {
        "content": "<p>no</p>",
        "id": 192930762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040468
    },
    {
        "content": "<p>You are supposed to let <code>elan</code> do the work of deciding which Lean binary you will be using</p>",
        "id": 192930802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040489
    },
    {
        "content": "<p>I don't know why people insist on using non-default set-ups. I don't have any source code for any Lean installed on my computer and I never compile it.</p>",
        "id": 192930811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040534
    },
    {
        "content": "<p>ok but i mean leanproject doesn't provide the lean, right?</p>",
        "id": 192930819,
        "sender_full_name": "Iocta",
        "timestamp": 1586040552
    },
    {
        "content": "<p>elan provides the lean binary</p>",
        "id": 192930821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040563
    },
    {
        "content": "<p>elan and leanproject are designed to work together</p>",
        "id": 192930827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040586
    },
    {
        "content": "<p>anyone who starts telling VS Code where their Lean installation is, or changing their LEAN_PATH or anything like that is asking for trouble</p>",
        "id": 192930875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040618
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian_details.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian_details.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian_details.md</a></p>",
        "id": 192930883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040651
    },
    {
        "content": "<p>No download of Lean source code required</p>",
        "id": 192930889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586040668
    },
    {
        "content": "<p>using elan with leanproject works for me</p>",
        "id": 192931010,
        "sender_full_name": "Iocta",
        "timestamp": 1586040871
    },
    {
        "content": "<p>So the error is gone?</p>",
        "id": 192931306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586041442
    },
    {
        "content": "<p>When mathlib upgrades to 3.8.0 or whatever, leanproject up will edit your toml and then when you run your project elan will download it automatically</p>",
        "id": 192931333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586041516
    },
    {
        "content": "<p>yeah the error is gone</p>",
        "id": 192932407,
        "sender_full_name": "Iocta",
        "timestamp": 1586043668
    },
    {
        "content": "<p>I see my editor is running <code>~/.elan/toolchains/leanprover-community-lean-3.7.2/bin/lean --server -M1024 -T100000 /path/to/project/leanpkg.path</code> I don't see that last argument documented in <code>lean --help</code>, is it doing what it looks like? namely, providing path to a file containing the list of directories where the project source and deps are</p>",
        "id": 192935215,
        "sender_full_name": "Iocta",
        "timestamp": 1586049222
    },
    {
        "content": "<p>looks like yes</p>",
        "id": 192935602,
        "sender_full_name": "Iocta",
        "timestamp": 1586050073
    },
    {
        "content": "<p>how do I do this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">X</span>\n\n<span class=\"n\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"n\">two</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">reflexive</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">reflR</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192938520,
        "sender_full_name": "Iocta",
        "timestamp": 1586055733
    },
    {
        "content": "<p>You can use <code>reflR</code> to get a term of type <code>R two two</code>, which is false.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">reflexive</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">reflR</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">reflR</span> <span class=\"n\">two</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Also see below, if all you have is <code>intro</code> and <code>exact</code>, you don't need tactic mode.</p>",
        "id": 192938713,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586056191
    },
    {
        "content": "<p>Or even shorter</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">reflexive</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">two</span>\n</pre></div>",
        "id": 192938808,
        "sender_full_name": "Uranus Testing",
        "timestamp": 1586056356
    },
    {
        "content": "<p>Thanks</p>",
        "id": 192938862,
        "sender_full_name": "Iocta",
        "timestamp": 1586056478
    },
    {
        "content": "<p>What's the command for taking the derivative?</p>",
        "id": 193082962,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1586198035
    },
    {
        "content": "<p>Lean is not an imperative programming language, and you can find derivatives <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/analysis/calculus/deriv.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/analysis/calculus/deriv.lean\">here</a></p>",
        "id": 193083211,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586198162
    },
    {
        "content": "<p><code>import analysis.calculus.deriv</code></p>",
        "id": 193083264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586198173
    },
    {
        "content": "<p>Is derivative in the kind of state where users can use it? For example, can I prove that the derivative of sin(cos(x)) is what the undergraduates think it is?</p>",
        "id": 193083330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586198214
    },
    {
        "content": "<p>Kenny, you should try to get into the habit of posting links to the docs rather than source code.</p>",
        "id": 193083418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586198270
    },
    {
        "content": "<p>as in <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/deriv.html\" title=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/deriv.html\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/deriv.html</a></p>",
        "id": 193083555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586198341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, <code>by simp</code></p>",
        "id": 193083582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586198359
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/complex/exponential.html#real.deriv_cos\" title=\"https://leanprover-community.github.io/mathlib_docs/analysis/complex/exponential.html#real.deriv_cos\">https://leanprover-community.github.io/mathlib_docs/analysis/complex/exponential.html#real.deriv_cos</a></p>",
        "id": 193083739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586198427
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/deriv.html#deriv.comp\" title=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/deriv.html#deriv.comp\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/deriv.html#deriv.comp</a></p>",
        "id": 193083832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586198497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ah, I didn't know that they exist</p>",
        "id": 193083849,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586198509
    },
    {
        "content": "<p>Hmm, maybe <code>by simp</code> won't work... because of the composition</p>",
        "id": 193083856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586198514
    },
    {
        "content": "<p>are they automatically generated?</p>",
        "id": 193083866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586198519
    },
    {
        "content": "<p>wow this is very nice</p>",
        "id": 193083920,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586198535
    },
    {
        "content": "<p>Welcome back!</p>",
        "id": 193083930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586198541
    },
    {
        "content": "<p>Quick question, what is the state with integration/integrals?</p>",
        "id": 193083976,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586198561
    },
    {
        "content": "<p>WIP</p>",
        "id": 193084004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586198577
    },
    {
        "content": "<p>We have a PR on FTC</p>",
        "id": 193084013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586198584
    },
    {
        "content": "<p>There is a very general definition, and a bunch of general API, but it's not complete</p>",
        "id": 193084045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586198609
    },
    {
        "content": "<p>Is it going to be a general integral and we would have Lebesgue, Riemann, Kurzweil-Henstock?</p>",
        "id": 193084054,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586198613
    },
    {
        "content": "<p>Bochner</p>",
        "id": 193084075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586198624
    },
    {
        "content": "<p>Every day is a learning experience here</p>",
        "id": 193084118,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586198642
    },
    {
        "content": "<p>More-or-less it's Lebesgue.</p>",
        "id": 193084434,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586198792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20basics/near/193084434\" title=\"#narrow/stream/113489-new-members/topic/more.20basics/near/193084434\">said</a>:</p>\n<blockquote>\n<p>More-or-less it's Lebesgue.</p>\n</blockquote>\n<p>Yes, I pulled Wikipedia and makes sense to adopt this one.</p>",
        "id": 193084499,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586198826
    },
    {
        "content": "<p>(but I think that a Riemann integral tutorial would be nice… :-°)</p>",
        "id": 193084546,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586198854
    },
    {
        "content": "<p>It's already formalized for general measure spaces in <code>measure_theory/</code>.</p>",
        "id": 193084551,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586198858
    },
    {
        "content": "<p>There is a PR that glues it to integrals over intervals but its author <span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> disappeared. I'm going to wait for an update for about a month. If there will be no updates, I'll probably take over this PR.</p>",
        "id": 193084964,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586199042
    },
    {
        "content": "<p>is there a way to know which moves preserve provability?</p>",
        "id": 193546855,
        "sender_full_name": "Iocta",
        "timestamp": 1586505930
    },
    {
        "content": "<p>That's surely undecidable</p>",
        "id": 193546924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586505972
    },
    {
        "content": "<p>we seem to have decided for some of them though</p>",
        "id": 193546973,
        "sender_full_name": "Iocta",
        "timestamp": 1586506055
    },
    {
        "content": "<p>what is a move?</p>",
        "id": 193546976,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586506058
    },
    {
        "content": "<p>adding anything to a proof</p>",
        "id": 193547037,
        "sender_full_name": "Iocta",
        "timestamp": 1586506089
    },
    {
        "content": "<p>I think that for the most part you can determine for each \"move\" whether it necessarily preserves provability or not</p>",
        "id": 193547102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586506159
    },
    {
        "content": "<p>Anything reversible preserves provability. <code>intro</code>, <code>revert</code>, <code>have</code>, <code>split</code>, <code>rw</code>, <code>simp</code></p>",
        "id": 193547191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586506228
    },
    {
        "content": "<p><code>apply</code> is the main source of potentially lossy moves, but it depends on the theorem. <code>clear</code> is also not reversible</p>",
        "id": 193547229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586506288
    },
    {
        "content": "<p><code>cases</code> preserves provability, but only if you case on a variable. If you case on an expression you might lose information about what term it was unless you use the form <code>cases h : e</code></p>",
        "id": 193547350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586506406
    },
    {
        "content": "<p><code>induction</code> is also not reversible, since if you do the induction wrong you can get unprovable goals</p>",
        "id": 193547411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586506452
    },
    {
        "content": "<p>I see</p>",
        "id": 193547871,
        "sender_full_name": "Iocta",
        "timestamp": 1586506916
    },
    {
        "content": "<p>are \"target\" and \"goal\" synonymous?</p>",
        "id": 193549371,
        "sender_full_name": "Iocta",
        "timestamp": 1586508338
    },
    {
        "content": "<p>Depends on who you ask. Lean usually uses the term to mean a target expression together with its list of hypotheses</p>",
        "id": 193550556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586509360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20basics/near/192927274\" title=\"#narrow/stream/113489-new-members/topic/more.20basics/near/192927274\">said</a>:</p>\n<blockquote>\n<p>looks like <a href=\"https://leanprover.github.io/logic_and_proof/the_real_numbers.html\" title=\"https://leanprover.github.io/logic_and_proof/the_real_numbers.html\">Logic and Proof</a> doesn't have \"... in Lean\" versions for the last few chapters. is that because nobody's gotten around to writing them or because those chapters are too hard to port to Lean or some other reason?</p>\n</blockquote>\n<p>For whatever it's worth, I think almost all of the combinatorics section has proofs in mathlib, and I've done the ones which don't</p>",
        "id": 194781795,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587463279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20basics/near/192927274\" title=\"#narrow/stream/113489-new-members/topic/more.20basics/near/192927274\">said</a>:</p>\n<blockquote>\n<p>looks like <a href=\"https://leanprover.github.io/logic_and_proof/the_real_numbers.html\" title=\"https://leanprover.github.io/logic_and_proof/the_real_numbers.html\">Logic and Proof</a> doesn't have \"... in Lean\" versions for the last few chapters. is that because nobody's gotten around to writing them or because those chapters are too hard to port to Lean or some other reason?</p>\n</blockquote>\n<p>If you look at the <a href=\"https://github.com/leanprover/logic_and_proof/tree/master/exclude\" title=\"https://github.com/leanprover/logic_and_proof/tree/master/exclude\">Git of the book</a>, it certainly appears that those chapters were planned for, but the files were last edited 3 years ago so I wouldn't hold my breath.</p>",
        "id": 194782695,
        "sender_full_name": "Pit Sinning",
        "timestamp": 1587464022
    },
    {
        "content": "<p>Chapter 21 is clearly in mathlib</p>",
        "id": 194782746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587464052
    },
    {
        "content": "<p>and 22 also</p>",
        "id": 194782759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587464067
    },
    {
        "content": "<p>Rob, Floris, and I perpetually have back-burner plans to expand <em>Logic and Proof</em>, but other projects always seem to take precedence. I'll be using it again in the fall, and I am hoping to add more then.</p>",
        "id": 194809318,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1587479209
    },
    {
        "content": "<p>What's next after the books?</p>",
        "id": 196947694,
        "sender_full_name": "Iocta",
        "timestamp": 1588970259
    },
    {
        "content": "<p>Did you do the new tutorials and the beginning of the new book?</p>",
        "id": 196947882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588970380
    },
    {
        "content": "<p>Link?</p>",
        "id": 196948669,
        "sender_full_name": "Iocta",
        "timestamp": 1588970806
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Tutorials.20update/near/196123657\" title=\"#narrow/stream/113489-new-members/topic/Tutorials.20update/near/196123657\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Tutorials.20update/near/196123657</a> and <a href=\"#narrow/stream/113488-general/topic/new.20Lean.20.2F.20mathlib.20tutorial\" title=\"#narrow/stream/113488-general/topic/new.20Lean.20.2F.20mathlib.20tutorial\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/new.20Lean.20.2F.20mathlib.20tutorial</a></p>",
        "id": 196949021,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588970999
    },
    {
        "content": "<p>Hadn't seen those, thanks</p>",
        "id": 196951321,
        "sender_full_name": "Iocta",
        "timestamp": 1588972331
    },
    {
        "content": "<p>those filenames haha :-)</p>",
        "id": 196951391,
        "sender_full_name": "Iocta",
        "timestamp": 1588972388
    },
    {
        "content": "<p>I'm curious, Do you find it works to learn a subject by formalizing it, or do you have to understand it really well already before formalizing it?</p>",
        "id": 197016849,
        "sender_full_name": "Iocta",
        "timestamp": 1589062887
    },
    {
        "content": "<p>Those aren't mutually exclusive.</p>",
        "id": 197016920,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589062926
    },
    {
        "content": "<p>Do you find it works to learn a subject <em>for the first time</em> by formalizing it, or do you have to understand it really well already before formalizing it?</p>",
        "id": 197017061,
        "sender_full_name": "Iocta",
        "timestamp": 1589063038
    },
    {
        "content": "<p>I have understood everything I've formalised really quite well, although I will be the first to admit that formalising perfectoid spaces taught me that the theory of complete topological rings was more subtle than I had realised.</p>\n<p>Conversely <span class=\"user-mention\" data-user-id=\"134231\">@Athina</span> told me when she was watching me teach mathematics undergraduates that she could see evidence that learning new mathematics at the same time as learning Lean was hard</p>",
        "id": 197018176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589064128
    },
    {
        "content": "<p>I realise that this is not quite what you asked</p>",
        "id": 197018179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589064142
    },
    {
        "content": "<p>I think you should be somewhat familiar, at the level where you just had a midterm on the topic. You don't need to be an expert, but you should have the general feel for the terrain. Reading the wikipedia page is usually sufficient, if you are the type that can absorb what is written there</p>",
        "id": 197027344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589077414
    },
    {
        "content": "<p>How do I tell Lean I've derived a contradiction? Here is a snippet from Lean's tactic state... <a href=\"/user_uploads/3121/d1KYjYOd5iZ9gP21bnc5iyd2/Screenshot-2020-05-10-22.54.59.png\" title=\"Screenshot-2020-05-10-22.54.59.png\">Tactic State Snippet</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/d1KYjYOd5iZ9gP21bnc5iyd2/Screenshot-2020-05-10-22.54.59.png\" title=\"Tactic State Snippet\"><img src=\"/user_uploads/3121/d1KYjYOd5iZ9gP21bnc5iyd2/Screenshot-2020-05-10-22.54.59.png\"></a></div>",
        "id": 197081142,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589147797
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cc</span>\n</code></pre></div>",
        "id": 197081155,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589147843
    },
    {
        "content": "<p><code>by contradiction</code> is the correct answer</p>",
        "id": 197081157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589147869
    },
    {
        "content": "<p>or <code>by exact notr r</code></p>",
        "id": 197081204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589147907
    },
    {
        "content": "<p>oh I didn't notice that r and notr were there lol</p>",
        "id": 197081215,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589147934
    },
    {
        "content": "<p>I suspect carlo put them together to make it more obvious for lean</p>",
        "id": 197081239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589147986
    },
    {
        "content": "<p>Excellent, thanks, Kenny and Mario. I did try to put them together to see if that got me somewhere, but it seems it did not by itself.</p>",
        "id": 197081281,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589148012
    },
    {
        "content": "<p>also, <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197081283,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589148019
    },
    {
        "content": "<p>but the right way to put them together is to apply the <code>\\not R</code> proof to the <code>R</code> proof, because <code>\\not R</code> is short for <code>R -&gt; false</code></p>",
        "id": 197081284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589148025
    },
    {
        "content": "<p>so <code>notr r : false</code></p>",
        "id": 197081293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589148046
    },
    {
        "content": "<p>using apply you can <code>apply notr</code> and the goal will change to <code>R</code></p>",
        "id": 197081324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589148086
    },
    {
        "content": "<p>To be fair I noticed that \"cc\" actually proved what I needed to without additional work, but I was trying to get a feel for using tactics by doing it the long way</p>",
        "id": 197081370,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589148150
    },
    {
        "content": "<p>I notice that <code>notr</code> is basically <code>h2 notq</code></p>",
        "id": 197081383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589148195
    },
    {
        "content": "<p>so how about <code>by exact h2 notq r</code></p>",
        "id": 197081387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589148203
    },
    {
        "content": "<p>kenny wants a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> so he can golf your theorem to oblivion</p>",
        "id": 197081432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589148261
    },
    {
        "content": "<p>He probably already has, this is from Imperial's exercise sheets. I guess you can't make it shorter than \"cc\"</p>",
        "id": 197081454,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589148323
    },
    {
        "content": "<p>yeah no I'm not going through 1000 exercise sheets to find your theorem</p>",
        "id": 197081680,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589148705
    },
    {
        "content": "<p>I guess I'm not understanding how <code>by contradiction</code> works yet. Here's one case where I expect it to work, but doesn't:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">pnotp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>In a simpler example, I can show that <code>(P → ¬P) → ¬P</code>, but for some reason the approach doesn't work in the example I gave above. (i.e. one where instead of two hypotheses, there is a single one that says <code>(P → ¬P)</code>)</p>",
        "id": 197086512,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589154866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300537\">Carlo Cabrera</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20basics/near/197086512\" title=\"#narrow/stream/113489-new-members/topic/more.20basics/near/197086512\">said</a>:</p>\n<blockquote>\n<p>I guess I'm not understanding how <code>by contradiction</code> works yet. Here's one case where I expect it to work, but doesn't:</p>\n</blockquote>\n<p>You mean something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197086945,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1589155484
    },
    {
        "content": "<p>why are you using <code>by</code> if you're already in tactic mode?</p>",
        "id": 197086946,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589155486
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"300537\">@Carlo Cabrera</span>  is talking about the <code>contradiction</code> tactic, which looks for <code>P</code> and <code>¬ P</code> in the hypotheses</p>",
        "id": 197087024,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589155565
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"259857\">@Dan Stanescu</span>  is talking about the <code>by_contradiction</code> tactic which puts the negation of the goal into the hypotheses and makes <code>false</code> the new goal</p>",
        "id": 197087055,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589155635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>  I was wondering. <code>contradiction</code> needs something very obvious, like both <code>P</code> and <code>not P</code>, but <span class=\"user-mention\" data-user-id=\"300537\">@Carlo Cabrera</span> didn't have both in his context.</p>",
        "id": 197087170,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1589155809
    },
    {
        "content": "<p>Not sure he had any.</p>",
        "id": 197087180,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1589155844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300537\">@Carlo Cabrera</span> is this the proof you want?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"err\">∘</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197087288,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589155949
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mul_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>is <code>from</code> doing anything?</p>",
        "id": 197103157,
        "sender_full_name": "Iocta",
        "timestamp": 1589176649
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/interactive.lean#L297\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/interactive.lean#L297\">https://github.com/leanprover-community/lean/blob/master/library/init/meta/interactive.lean#L297</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">A synonym for `exact` that allows writing `have/suffices/show ..., from ...` in tactic mode.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"err\">«</span><span class=\"k\">from</span><span class=\"err\">»</span> <span class=\"o\">:=</span> <span class=\"n\">exact</span>\n</code></pre></div>",
        "id": 197105035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589179013
    },
    {
        "content": "<p>it's to make it look more like the term mode version <code>have h : _, from _</code></p>",
        "id": 197105075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589179055
    },
    {
        "content": "<p>but in this case it is simply unnecessary</p>",
        "id": 197105113,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589179081
    },
    {
        "content": "<p>ok</p>",
        "id": 197108432,
        "sender_full_name": "Iocta",
        "timestamp": 1589181721
    },
    {
        "content": "<p>Either <code>from</code> or <code>by</code> is unnecessary</p>",
        "id": 197108823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589181954
    },
    {
        "content": "<p>that's right, because <code>from</code> is unnecessary</p>",
        "id": 197108926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589182022
    },
    {
        "content": "<p>Removing <code>from</code> and keeping <code>by</code> also works</p>",
        "id": 197109258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589182278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20basics/near/197087288\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300537\">Carlo Cabrera</span> is this the proof you want?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"err\">∘</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>  Yes! That was what I had in mind. I don't know why I was using <code>by</code>, thanks for pointing that out. Would you say that this is the simplest approach to the example?</p>\n<p>Thanks for your comments too, <span class=\"user-mention\" data-user-id=\"259857\">@Dan Stanescu</span>. I learned something from you both here.</p>",
        "id": 197112719,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589184432
    },
    {
        "content": "<p><del> <code>by { exfalso, exact (h₂ ∘ h₁) id }</code>? </del></p>",
        "id": 197113065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589184685
    },
    {
        "content": "<p>Meh, me confused</p>",
        "id": 197113147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589184733
    },
    {
        "content": "<p>The simplest approach is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"n\">hp</span>\n</code></pre></div>\n\n\n<p>or </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>\n\n\n<p>depending on taste</p>",
        "id": 197113236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589184819
    },
    {
        "content": "<p>Excellent, thank you.</p>",
        "id": 197113923,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589185262
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₁</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₂</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnp</span> <span class=\"n\">hp</span>\n</code></pre></div>",
        "id": 197113926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589185265
    },
    {
        "content": "<p>Aargh</p>",
        "id": 197113941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589185275
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">Aargh</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₁</span> <span class=\"n\">Aargh</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₂</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnp</span> <span class=\"n\">Aargh</span>\n</code></pre></div>",
        "id": 197113974,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589185306
    },
    {
        "content": "<p>The horribleist approach to complement the two simple ones</p>",
        "id": 197113979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589185310
    },
    {
        "content": "<p>I can't actually see what the question is because I'm on mobile and one of the hypotheses is <code>h-box : P box Q</code>. From the code it looks like the box should be an implies sign, but I can see an implies sign in h2 so I'm confused</p>",
        "id": 197114426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589185644
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"n\">implies</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">and_self</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">implies</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 197114771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589185890
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">zero_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_left_neg</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_left_neg</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_left_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>How can I fill <code>sorry</code>, or is there a better way to solve this problem?</p>",
        "id": 197192487,
        "sender_full_name": "Iocta",
        "timestamp": 1589225153
    },
    {
        "content": "<p>please give a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a><br>\nIs <code>R</code> a commutative ring?</p>",
        "id": 197192691,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589225234
    },
    {
        "content": "<p>are you avoiding use of the <code>ring</code> tactic?</p>",
        "id": 197192717,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589225246
    },
    {
        "content": "<p>Are you avoiding use the of the <code>zero_mul</code> lemma? ;-)</p>",
        "id": 197192784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589225279
    },
    {
        "content": "<p>If you want to learn the proof of zero_mul for natural numbers, play the natural number game</p>",
        "id": 197192944,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589225340
    },
    {
        "content": "<p>If you want to learn it for general commutative rings then you should be thinking about what the axioms are and what order you want to develop the theory in</p>",
        "id": 197193001,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589225373
    },
    {
        "content": "<p>but currently your question is unanswerable because you didn't supply the typeclass of R in a mwe</p>",
        "id": 197193052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589225394
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_left_neg</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_left_neg</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_left_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197193160,
        "sender_full_name": "Iocta",
        "timestamp": 1589225435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20basics/near/197114426\">said</a>:</p>\n<blockquote>\n<p>I can't actually see what the question is because I'm on mobile and one of the hypotheses is <code>h-box : P box Q</code>. From the code it looks like the box should be an implies sign, but I can see an implies sign in h2 so I'm confused</p>\n</blockquote>\n<p>Oh -- back to this -- on mobile the implication for h1 didn't render but the one for h2 did?</p>",
        "id": 197193242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589225475
    },
    {
        "content": "<p>how about one topic for one question</p>",
        "id": 197193273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589225490
    },
    {
        "content": "<p>if you're talking about Kenny's most recent message, I can assure you they are the same character</p>",
        "id": 197193361,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589225522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> can you start a new topic instead of just posting on some other one?</p>",
        "id": 197193439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589225545
    }
]