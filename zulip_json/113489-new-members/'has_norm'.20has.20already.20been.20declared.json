[
    {
        "content": "<p>Note that this instance is bad, since there is no way Lean can guess which function <code>f</code> it should use to define the norm: if there are two functions around, it would give two different norms...</p>",
        "id": 298916020,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1663226911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> has marked this topic as unresolved.</p>",
        "id": 298916034,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663226924
    },
    {
        "content": "<p>Continuing on Sebastien's remark: if this instance is not the consequence of minimizing, then also the linter is very unhappy with it.</p>",
        "id": 298916339,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663227068
    },
    {
        "content": "<p>From the linter message, it seems that Lean would not infer any instance, rather than produce one for each function <code>K → ℝ</code>.  It also does not like that you did not use <code>field K</code> and thinks that the instance priorities are wrong!</p>\n<p>Lean is very unhappy with this instance!  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 298916595,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663227198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/'has_norm'.20has.20already.20been.20declared/near/298916020\">said</a>:</p>\n<blockquote>\n<p>Note that this instance is bad, since there is no way Lean can guess which function <code>f</code> it should use to define the norm: if there are two functions around, it would give two different norms...</p>\n</blockquote>\n<p>Yes, that is my next problem. What should I do in this case? Consider the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed.field.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mwe</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_division_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">place</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">place</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>As you said, that is not the right way to proceed since <code>φ</code> is implicit. So what is the right solution? I want to study embeddings of number field and I want to be able to say, for example, that an complex embedding defines a norm on <code>K</code>. I tried to do everything using <code>def</code> instead of <code>instance</code> but got into trouble (maybe I am supposed to try harder).</p>",
        "id": 298916748,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663227270
    },
    {
        "content": "<p>Do you want to study multiple embeddings at the same time? Or do you first want to fix an embedding, and study that on its own?</p>",
        "id": 298917023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663227406
    },
    {
        "content": "<p>In my experience, most of the time we are happy to work with one embedding. And occasionally we have formulas that quantify over all embeddings.</p>",
        "id": 298917095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663227452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/'has_norm'.20has.20already.20been.20declared/near/298917023\">said</a>:</p>\n<blockquote>\n<p>Do you want to study multiple embeddings at the same time? Or do you first want to fix an embedding, and study that on its own?</p>\n</blockquote>\n<p>I'll probably need to consider several at same time at some point. For example, to see if they defined the same distance,</p>",
        "id": 298917243,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663227503
    },
    {
        "content": "<p>Right, but maybe you first want to build an API of x00 lines that focuses on 1 embedding.</p>",
        "id": 298917306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663227542
    },
    {
        "content": "<p>In that case, I would assume that <code>K</code> is a normed field, and <code>A</code> is a normed <code>K</code>-algebra.</p>",
        "id": 298917369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663227567
    },
    {
        "content": "<p>Then, once you start varying the embedding, you have to explain once and for all how you can get the norm on <code>K</code> and the normed <code>K</code>-algebra structure on <code>A</code> from the embedding and the norm on <code>A</code>.</p>",
        "id": 298917510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663227618
    },
    {
        "content": "<p>Maybe you could make the instance on the function itself?</p>",
        "id": 298917575,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663227653
    },
    {
        "content": "<p>After all, a field embedding is... the embedding!</p>",
        "id": 298917611,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663227668
    },
    {
        "content": "<p>But that diverges from our mental model and the way it is written on paper.</p>",
        "id": 298917670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663227704
    },
    {
        "content": "<p>I claim we switch back and forth between two points of view. And so we should have both points of view in Lean as well.</p>",
        "id": 298917773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663227743
    },
    {
        "content": "<p>One where you have algebras and instances. And one where you have multiple explicit embeddings, and so you don't use instances.</p>",
        "id": 298917804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663227765
    },
    {
        "content": "<p>Ok, I was going to argue that the paper version is way too sloppy, but I agree that both points of view should exist!</p>",
        "id": 298917829,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663227780
    },
    {
        "content": "<p>Ok. Can you give me some pointers on how to do it for one embedding without using “bad” instances? Maybe some part of ‘’’mathlib’’’ where a similar construction is used.</p>",
        "id": 298919068,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663228346
    },
    {
        "content": "<p>My point is that in the \"single embedding case\" you should just assume everything you want.</p>",
        "id": 298919136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663228384
    },
    {
        "content": "<p>So do not start with <code>f : K \\to+* A</code> but with <code>algebra K A</code>. And assume that everything is compatible with the norms.</p>",
        "id": 298919172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663228410
    },
    {
        "content": "<p>In particular, assume that the norm on <code>K</code> already exists.</p>",
        "id": 298919201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663228422
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_division_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 298919456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663228543
    },
    {
        "content": "<p>Something like that, I guess.</p>",
        "id": 298919470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663228549
    },
    {
        "content": "<p>Another is to define a type synonym for each <code>φ : K →+* A</code>. Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">xavier_synonym</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">place</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"o\">(</span><span class=\"n\">xavier_synonym</span> <span class=\"n\">φ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">place</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>But indeed Johan's approach is most likely the better one.</p>",
        "id": 298919823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663228687
    },
    {
        "content": "<p>Those type synonyms are probably needed for the other point of view.</p>",
        "id": 298920036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663228791
    },
    {
        "content": "<p>Ok. So I’ll do as Johann suggested and I guess then I add a theorem stating that an embedding gives the right properties on K and A.</p>",
        "id": 298920715,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663229073
    },
    {
        "content": "<p>Well, I am sorry but I really do not see how to connect the dots. As Johann suggested I can do an API to work with <code>normed_algebra</code> indeed. But I still need to prove at some point that given an embedding <code>φ : K →+* A</code>, I get <code>normed_field K</code> and <code>normed_algebra K A</code>. Showing that we have <code>normed_field K</code> is straightforward, but then to show <code>normed_algebra K A</code>, I need to know that I already have <code>normed_field K</code> (that I can find a way to do although I am not sure it is correct) but more importantly I need to know what is the definition of the norm on <code>K</code> and I do not know how to pass that info without using <code>instance</code></p>",
        "id": 298940191,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663237410
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normed_field_at</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">normed_field</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_metric_space</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">norm_zero</span><span class=\"o\">,</span> <span class=\"n\">forall_const</span><span class=\"o\">],</span>\n    <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"n\">norm_sub_rev</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span>\n      <span class=\"n\">forall_const</span><span class=\"o\">],</span>\n    <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n        <span class=\"n\">using</span> <span class=\"n\">norm_add_le</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">φ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">φ</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span>\n      <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.injective</span> <span class=\"n\">φ</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_mul</span><span class=\"o\">,</span> <span class=\"n\">norm_mul</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normed_algebra_at</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">@</span><span class=\"n\">normed_algebra</span> <span class=\"n\">K</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">normed_field_at</span> <span class=\"n\">K</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_algebra</span> <span class=\"o\">:=</span> <span class=\"n\">φ.to_algebra</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_smul_le</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 298940235,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663237438
    },
    {
        "content": "<p>Actually what Johan suggested is that the \"one hom API\" already exists: It is the <code>normed_algebra</code> API.</p>",
        "id": 298940627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663237573
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_algebra_map'\">docs#norm_algebra_map'</a> is the statement that the norm respects the embedding</p>",
        "id": 298969652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663248994
    },
    {
        "content": "<p>Well, I am still not quite sure I see how I am going to make thinks work. I'll have to think about it some more. Thanks for the help.</p>",
        "id": 298971253,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1663249448
    }
]