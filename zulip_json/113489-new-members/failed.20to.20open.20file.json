[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">read_file</span> <span class=\"s2\">&quot;{any file}&quot;</span>\n</code></pre></div>",
        "id": 197781598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589613132
    },
    {
        "content": "<p>I can't get it to read any file</p>",
        "id": 197781600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589613138
    },
    {
        "content": "<p>it says <code>failed to open file {file name}</code></p>",
        "id": 197781604,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589613145
    },
    {
        "content": "<p>do I need to give the full address? is it in <code>/c/</code> convention or <code>C:\\</code> convention?</p>",
        "id": 197781617,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589613188
    },
    {
        "content": "<p>I got the error to go away by providing the full path, with the <code>C:\\</code> convention</p>",
        "id": 197782646,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589615273
    },
    {
        "content": "<p>But there's no output with the <code>#eval</code></p>",
        "id": 197782689,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589615304
    },
    {
        "content": "<p>you actually used the <code>C:\\\\</code> convention didn't you</p>",
        "id": 197782714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589615359
    },
    {
        "content": "<p>Yeah</p>",
        "id": 197782721,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589615380
    },
    {
        "content": "<p>You need to escape every backslash</p>",
        "id": 197782726,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589615387
    },
    {
        "content": "<p>ok that's the first step</p>",
        "id": 197782769,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589615416
    },
    {
        "content": "<p>so it outputs <code>io char_buffer</code></p>",
        "id": 197782770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589615422
    },
    {
        "content": "<p>which I don't know how to use</p>",
        "id": 197782771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589615425
    },
    {
        "content": "<p>This works (outputs a list of characters), but that's easy to convert to other data types if necessary.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">file_name</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">read_file</span> <span class=\"n\">file_name</span><span class=\"o\">,</span>\n  <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"kn\">print</span> <span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test</span> <span class=\"s2\">&quot;C:</span><span class=\"se\">\\\\</span><span class=\"s2\">Users</span><span class=\"se\">\\\\</span><span class=\"s2\">Shing</span><span class=\"se\">\\\\</span><span class=\"s2\">Desktop</span><span class=\"se\">\\\\</span><span class=\"s2\">Test</span><span class=\"se\">\\\\</span><span class=\"s2\">leanpkg.toml&quot;</span>\n</code></pre></div>",
        "id": 197783025,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589615893
    },
    {
        "content": "<p>wow thanks!</p>",
        "id": 197783032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589615919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> do you think you can do the <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/a.20mutable.20tactic\">next step</a> then?</p>",
        "id": 197783104,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589616003
    },
    {
        "content": "<p>I don't know. I tried <code>get_line</code> but that just reads the first line of the file every time... Is there a function that keeps track of where it's read so far?</p>",
        "id": 197783446,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589616483
    },
    {
        "content": "<p>and <code>io.fs.read</code> seems to start at the beginning every time.</p>",
        "id": 197783462,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589616538
    },
    {
        "content": "<p>maybe you can use read/write then?</p>",
        "id": 197783486,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589616580
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">file_name</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"n\">h</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">mk_file_handle</span> <span class=\"n\">file_name</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">mode</span><span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"o\">,</span>\n  <span class=\"n\">s</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">get_line</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">char</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"n\">s</span><span class=\"o\">)),</span>\n  <span class=\"n\">h&#39;</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">mk_file_handle</span> <span class=\"n\">file_name</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">mode</span><span class=\"bp\">.</span><span class=\"n\">write</span><span class=\"o\">,</span>\n  <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">h&#39;</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">to_buffer</span> <span class=\"o\">[(</span><span class=\"n\">char</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"err\">&#39;\\</span><span class=\"n\">n&#39;</span><span class=\"o\">]),</span>\n  <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"kn\">print</span> <span class=\"n\">k</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test</span> <span class=\"s2\">&quot;C:</span><span class=\"se\">\\\\</span><span class=\"s2\">Users</span><span class=\"se\">\\\\</span><span class=\"s2\">Shing</span><span class=\"se\">\\\\</span><span class=\"s2\">Desktop</span><span class=\"se\">\\\\</span><span class=\"s2\">Test</span><span class=\"se\">\\\\</span><span class=\"s2\">test.txt&quot;</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test</span> <span class=\"s2\">&quot;C:</span><span class=\"se\">\\\\</span><span class=\"s2\">Users</span><span class=\"se\">\\\\</span><span class=\"s2\">Shing</span><span class=\"se\">\\\\</span><span class=\"s2\">Desktop</span><span class=\"se\">\\\\</span><span class=\"s2\">Test</span><span class=\"se\">\\\\</span><span class=\"s2\">test.txt&quot;</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test</span> <span class=\"s2\">&quot;C:</span><span class=\"se\">\\\\</span><span class=\"s2\">Users</span><span class=\"se\">\\\\</span><span class=\"s2\">Shing</span><span class=\"se\">\\\\</span><span class=\"s2\">Desktop</span><span class=\"se\">\\\\</span><span class=\"s2\">Test</span><span class=\"se\">\\\\</span><span class=\"s2\">test.txt&quot;</span>\n</code></pre></div>\n\n\n<p>This prints out consecutive numbers (but it doesn't start at 0...)</p>",
        "id": 197783695,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589616942
    },
    {
        "content": "<p>I think you can just use <code>k - something</code> though</p>",
        "id": 197783735,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589616974
    },
    {
        "content": "<p>that's ok</p>",
        "id": 197783746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589617057
    },
    {
        "content": "<p>Also this isn't storing the number in the file, it's just storing the ASCII (or Unicode idk) of that value, so I don't think the new lines are necessary.</p>",
        "id": 197783803,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589617152
    },
    {
        "content": "<p>I just need 35 numbers / different values</p>",
        "id": 197783822,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589617178
    },
    {
        "content": "<p>one way is to store stuff in the environment</p>",
        "id": 197783871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589617216
    },
    {
        "content": "<p>how do you do that?</p>",
        "id": 197783959,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589617370
    },
    {
        "content": "<p>ideally I would want</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">first_time</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">increment</span>\n<span class=\"n\">def</span> <span class=\"n\">second_time</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">increment</span>\n<span class=\"n\">def</span> <span class=\"n\">third_time</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">increment</span>\n</code></pre></div>\n\n\n<p>to give different results</p>",
        "id": 197784157,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589617707
    },
    {
        "content": "<p>up to 35 times</p>",
        "id": 197784160,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589617712
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_attribute</span><span class=\"o\">]</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">incr_attr</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"n\">unit</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span>   <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">incrementer</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span>  <span class=\"o\">:=</span> <span class=\"s2\">&quot;incrementer&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">parser</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">increment</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">incr_attr</span><span class=\"bp\">.</span><span class=\"n\">get_param</span> <span class=\"bp\">`</span><span class=\"n\">increment</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">incr_attr</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">`</span><span class=\"n\">increment</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">tt</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">increment</span> <span class=\"c1\">-- 0</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">increment</span> <span class=\"c1\">-- 1</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">increment</span> <span class=\"c1\">-- 2</span>\n<span class=\"kn\">example</span>   <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">increment</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> 3 -/</span> <span class=\"n\">increment</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> 4 -/</span> <span class=\"n\">triv</span><span class=\"o\">}</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">increment</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> 3 -/</span> <span class=\"n\">increment</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> 4 -/</span> <span class=\"n\">triv</span><span class=\"o\">}</span>\n<span class=\"n\">def</span>     <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">increment</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> 3 -/</span> <span class=\"n\">increment</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> 4 -/</span> <span class=\"n\">triv</span><span class=\"o\">}</span>\n<span class=\"n\">def</span>     <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">increment</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> 5 -/</span> <span class=\"n\">increment</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> 6 -/</span> <span class=\"n\">triv</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197784261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589617907
    },
    {
        "content": "<p>wow, thanks!</p>",
        "id": 197784312,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589617979
    },
    {
        "content": "<p>If you <code>#print increment</code> you will see the magic: <code>increment</code> sets an attribute on itself when called</p>",
        "id": 197784322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589618027
    },
    {
        "content": "<p>I guess I don't know attributes</p>",
        "id": 197784365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589618050
    },
    {
        "content": "<p>You don't have to use attributes - you could equally well use new definitions</p>",
        "id": 197784371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589618070
    },
    {
        "content": "<p>as in, you create <code>increment_1</code> and <code>increment_2</code> and so on</p>",
        "id": 197784374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589618089
    },
    {
        "content": "<p>then I would need to parse names?</p>",
        "id": 197784383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589618112
    },
    {
        "content": "<p>and each call to the tactic creates a new definition, and then you count how many definitions have been made so far</p>",
        "id": 197784386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589618115
    },
    {
        "content": "<p>neat</p>",
        "id": 197784389,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589618129
    },
    {
        "content": "<p>Here you have to run exprs, which is at least as expensive as parsing names</p>",
        "id": 197784391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589618140
    },
    {
        "content": "<p>is there any way to make it an actual definition though? like not just calling <code>tactic.trace</code></p>",
        "id": 197784439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589618178
    },
    {
        "content": "<p>Note that the changes don't stick when the call is inside an <code>example</code> or <code>theorem</code>, because the environment is rolled back after elaboration</p>",
        "id": 197784443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589618189
    }
]