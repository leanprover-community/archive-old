[
    {
        "content": "<p>I'm getting errors when I try to pattern match on whether a nat is even or odd, but keep getting errors. I thought this was fair game for pattern matching. Is that not the case?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 195106129,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587669011
    },
    {
        "content": "<p>That's definitely not fair game</p>",
        "id": 195106159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587669034
    },
    {
        "content": "<p>You can't expect the equation compiler to prove that every natural number is of the form 2n or 2n+1 -- this proof has a small amount of content.</p>",
        "id": 195106218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587669074
    },
    {
        "content": "<p>But <code>test (n : nat) := n % 2</code> is the function you're defining -- it's already there.</p>",
        "id": 195106237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587669092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195106237\" title=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195106237\">said</a>:</p>\n<blockquote>\n<p>But <code>test (n : nat) := n % 2</code> is the function you're defining -- it's already there.</p>\n</blockquote>\n<p>Gotcha. It seems like it didn't like the pattern match on the multiplication, rather than the lack of exhaustive cases. Is there a way to add an \"otherwise\" case like in Haskell? That feels a little silly though.</p>\n<p>For context, I wanted to prove this lemma, but Lean didn't like that (-1) wasn't a nat, so I thought I'd do a case split on whether m is even or odd. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">luc</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l3</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">luc</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">luc</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 195107093,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587669553
    },
    {
        "content": "<p>Your definition of <code>luc</code> should probably use <code>luc</code> rather than <code>fib</code>, right? For your lemma, I'd just cast everything to <code>int</code> and try to prove it there. Tactics like <code>norm_cast</code> and <code>push_cast</code> should hopefully make the casts easy to deal with.</p>",
        "id": 195107394,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587669678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195107394\" title=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195107394\">said</a>:</p>\n<blockquote>\n<p>Your definition of <code>luc</code> should probably use <code>luc</code> rather than <code>fib</code>, right? For your lemma, I'd just cast everything to <code>int</code> and try to prove it there. Tactics like <code>norm_cast</code> and <code>push_cast</code> should hopefully make the casts easy to deal with.</p>\n</blockquote>\n<p>Yes! Thanks for catching that. Here is the updated code. I realized I also didn't need to include <code>fib</code> for this example.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">luc</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">luc</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">luc</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l3</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">luc</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">luc</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 195107676,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587669813
    },
    {
        "content": "<p>Why don't you just make <code>luc</code> integer-valued? What you have there doesn't make any sense, because -1 isn't a natural.</p>",
        "id": 195108026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587669968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195107093\" title=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195107093\">said</a>:</p>\n<blockquote>\n<p>Gotcha. It seems like it didn't like the pattern match on the multiplication, rather than the lack of exhaustive cases. Is there a way to add an \"otherwise\" case like in Haskell? That feels a little silly though.</p>\n</blockquote>\n<p>Sure -- you can just put <code>_</code>. But that won't change the fact that you cannot pattern match on <code>2 * n</code> at all, it's not a valid pattern and that's the end of it.</p>",
        "id": 195108211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587670060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195108026\" title=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195108026\">said</a>:</p>\n<blockquote>\n<p>Why don't you just make <code>luc</code> integer-valued? What you have there doesn't make any sense, because -1 isn't a natural.</p>\n</blockquote>\n<p>I was thinking about that. Since they're all positive it seemed like I should be able to use <code>nat</code>, and this expression could be rewritten using nat subtraction instead of -1, but maybe that's not really practical.</p>",
        "id": 195109306,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587670552
    },
    {
        "content": "<p>Feel free to rewrite it using nat subtraction, but you can't use -1 because it's not a natural -- you'll have to do the rewriting yourself.</p>",
        "id": 195109405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587670597
    },
    {
        "content": "<p>The assertion that \"they're all positive\" might be obvious to you, but it's not obvious to Lean -- it needs a proof.</p>",
        "id": 195109464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587670629
    },
    {
        "content": "<p>It's much easier just to make everything integer-valued if you want to do subtraction. Natural number subtraction is really badly behaved, it is not a function you should use at all if you're doing mathematics.</p>",
        "id": 195109556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587670682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195108211\" title=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195108211\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195107093\" title=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195107093\">said</a>:</p>\n<blockquote>\n<p>Gotcha. It seems like it didn't like the pattern match on the multiplication, rather than the lack of exhaustive cases. Is there a way to add an \"otherwise\" case like in Haskell? That feels a little silly though.</p>\n</blockquote>\n<p>Sure -- you can just put <code>_</code>. But that won't change the fact that you cannot pattern match on <code>2 * n</code> at all, it's not a valid pattern and that's the end of it.</p>\n</blockquote>\n<p>Right, forgot you could just put a general wildcard with no structure on it. From your earlier post it sounded like the problem was that <code>2*n</code> and  <code>2*n+1</code> didn't register as exhaustive cases for a nat  to the compiler, but it sounds like that's not the extent of why this isn't allowed? Should I just take it as an axiom that you can't pattern match on multiplication then, or is there a deeper reason this doesn't work?</p>",
        "id": 195109983,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587670902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195109556\" title=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195109556\">said</a>:</p>\n<blockquote>\n<p>It's much easier just to make everything integer-valued if you want to do subtraction. Natural number subtraction is really badly behaved, it is not a function you should use at all if you're doing mathematics.</p>\n</blockquote>\n<p>Ok, I'll try doing everything with integers.</p>",
        "id": 195110127,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587670990
    },
    {
        "content": "<p>If you are pattern matching on a natural, you can only pattern match on the constructors for that natural, which are zero and succ, or combinations of these constructors (at least as far as I know -- I am no expert in the equation compiler). Note that in the lucas definition, <code>n+2</code> is by definition <code>succ (succ n)</code> so that's OK. But <code>2*n</code> and <code>n*2</code> are definitely not OK.</p>",
        "id": 195110137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587670994
    },
    {
        "content": "<p>I was just typing out something like what Kevin said. See also <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching\">8.1 and 8.2 of TPiL</a>.</p>",
        "id": 195110260,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587671065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195110137\" title=\"#narrow/stream/113489-new-members/topic/Multiplication.20in.20Pattern.20Matching/near/195110137\">said</a>:</p>\n<blockquote>\n<p>If you are pattern matching on a natural, you can only pattern match on the constructors for that natural, which are zero and succ, or combinations of these constructors (at least as far as I know -- I am no expert in the equation compiler). Note that in the lucas definition, <code>n+2</code> is by definition <code>succ (succ n)</code> so that's OK. But <code>2*n</code> and <code>n*2</code> are definitely not OK.</p>\n</blockquote>\n<p>Right, that makes sense. For some reason I thought we could pattern match on patterns other than the type constructors.</p>",
        "id": 195111248,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587671540
    },
    {
        "content": "<p><code>nat.binary_rec_on</code></p>",
        "id": 195139019,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587692567
    }
]