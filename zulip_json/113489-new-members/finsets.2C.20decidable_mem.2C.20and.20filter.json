[
    {
        "content": "<p>I have a filter on a finset (of finsets) that I want to construct and for some reason I'm stubbornly trying to do it constructively. Here's a stripped down version of what I have (which is part of some stuff on matroids):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- copied from init.logic</span>\n<span class=\"kn\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">dec_not</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">is_true</span> <span class=\"n\">hp</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_in</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"err\">∈</span> <span class=\"n\">G</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_out</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">S</span> <span class=\"err\">∈</span> <span class=\"n\">G</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_out_iff_not_in</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">is_out</span> <span class=\"n\">S</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span>  <span class=\"n\">is_in</span> <span class=\"n\">S</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">is_in</span> <span class=\"n\">is_out</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">decidable_in</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_in</span> <span class=\"n\">S</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">decidable_mem</span> <span class=\"n\">S</span> <span class=\"n\">G</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> failed to generate bytecode for &#39;decidable_out&#39;</span>\n<span class=\"cm\">code generation failed, VM does not have code for &#39;dec_not&#39;</span>\n<span class=\"cm\">... ??? -/</span>\n<span class=\"kn\">instance</span> <span class=\"n\">decidable_out</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_out</span> <span class=\"n\">S</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">is_out_iff_not_in</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">dec_not</span> <span class=\"o\">(</span><span class=\"n\">is_in</span> <span class=\"n\">S</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_min_out</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">:=</span> <span class=\"n\">is_out</span> <span class=\"n\">x</span> <span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"err\">⊂</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">is_in</span> <span class=\"n\">y</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">min_out</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">powerset</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_min_out</span> <span class=\"n\">x</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>First, you can see how in proving <code>decidable_out</code>, I used <code>dec_not</code>, a lemma which is copied from an instance from lean's <code>init.logic</code>. Is there a way of just convincing the elaborator to figure this out for me?</p>\n<p>Second, what does the weird warning message by <code>decidable_out</code> mean?</p>\n<p>Third and finally, is it even possible to construct an instance of <code>decidable_pred</code> for <code>is_min_out</code> so that I can define <code>min_out</code> constructively? What if I assume a little bit more about α? Do I need to figure out how to use <code>data.equiv.encodable</code>or something?</p>\n<p>Thanks again!</p>",
        "id": 133708032,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536638698
    },
    {
        "content": "<blockquote>\n<p>First, you can see how in proving decidable_out, I used dec_not, a lemma which is copied from an instance from lean's init.logic. Is there a way of just convincing the elaborator to figure this out for me?</p>\n</blockquote>\n<p>As you say, this is already in core lean, under the (autogenerated) name <code>not.decidable</code>. The elaborator will infer it automatically in most places, but if you need to trigger typeclass inference manually use the tactic <code>apply_instance</code>.</p>\n<blockquote>\n<p>Second, what does the weird warning message by decidable_out mean?</p>\n</blockquote>\n<p><code>lemma</code>s and <code>theorem</code>s don't generate code in the VM. This means that you should basically always mark any inhabitant of a Type as a <code>def</code> not a <code>lemma</code>, or else you will get these strange error messages when you use the <code>def</code>-that-isn't.</p>",
        "id": 133708513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536639595
    },
    {
        "content": "<p>I'm not sure why you are redefining all these symbols. You are just making typeclass inference harder for no reason</p>",
        "id": 133708566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536639639
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_min_out</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"err\">⊂</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_min_out</span> <span class=\"n\">x</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">powerset</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_min_out</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">⊂</span><span class=\"o\">),</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ssubset_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">and_congr</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"n\">forall_congr</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">H</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"bp\">_</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"n\">h₂</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133708937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536640263
    },
    {
        "content": "<p>Thanks so much Mario!</p>\n<blockquote>\n<p>I'm not sure why you are redefining all these symbols. You are just making typeclass inference harder for no reason</p>\n</blockquote>\n<p>The honest reason is that I don't know any better. What precisely should I be avoiding?</p>",
        "id": 133709166,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536640626
    },
    {
        "content": "<p>Oh, you mean just the names <code>is_in</code> and <code>is_out</code>. Those are artifacts of my making a MWE; in reality, there's a structure that I have to pull the finset from.</p>",
        "id": 133709251,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536640707
    }
]