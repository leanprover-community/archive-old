[
    {
        "content": "<p>I am trying to define the notion of a context-free expression as an extension to regular-expressions to generate context-free languages. I am just toying around with it in LEAN but I am running into a few problems when trying to define the language generated by the expression (<code>matches</code> in the MWE). The issue here is that I need to show that a specific function is monotone but I need to make use of part of the definition of <code>matches</code> before it is actually fully defined. In the minimum working example code below, if you uncomment the first three lines in the proof you should be able to see what I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">computability.language</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.fixed_points</span>\n\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Defined exactly like a regular_expression with the addition of</span>\n<span class=\"c1\">-- a var rule which takes a variable of type σ and a general recursion rule</span>\n<span class=\"c1\">-- which takes in a variable and a context_free_expression r to give μ x. r</span>\n<span class=\"c1\">-- The star operation is not needed since it can be expressed using the other rules.</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">context_free_expression</span>  <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">context_free_expression</span>\n<span class=\"bp\">|</span> <span class=\"n\">epsilon</span> <span class=\"o\">:</span> <span class=\"n\">context_free_expression</span>\n<span class=\"bp\">|</span> <span class=\"n\">char</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">context_free_expression</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>  <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">context_free_expression</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">context_free_expression</span> <span class=\"bp\">→</span> <span class=\"n\">context_free_expression</span> <span class=\"bp\">→</span> <span class=\"n\">context_free_expression</span>\n<span class=\"bp\">|</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">context_free_expression</span> <span class=\"bp\">→</span> <span class=\"n\">context_free_expression</span> <span class=\"bp\">→</span> <span class=\"n\">context_free_expression</span>\n<span class=\"bp\">|</span> <span class=\"n\">mu</span>   <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">context_free_expression</span> <span class=\"bp\">→</span> <span class=\"n\">context_free_expression</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">context_free_expression</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">context_free_expression</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">context_free_expression</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">plus</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">context_free_expression</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">comp</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">context_free_expression</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">epsilon</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">context_free_expression</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">context_free_expression</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">one_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">epsilon</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">context_free_expression</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">plus_def</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">context_free_expression</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">plus</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">comp_def</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">context_free_expression</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">comp</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"bp\">*</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- This function takes in a context-free expression and an environment</span>\n<span class=\"c1\">-- η : σ → language α which maps variables to languages over α and returns</span>\n<span class=\"c1\">-- the corresponding context-free language.</span>\n<span class=\"kd\">def</span> <span class=\"n\">matches</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">context_free_expression</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">language</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">language</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">char</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">{[</span><span class=\"n\">a</span><span class=\"o\">]}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">η</span> <span class=\"o\">:=</span> <span class=\"n\">η</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">η</span> <span class=\"o\">:=</span> <span class=\"n\">P.matches</span> <span class=\"n\">η</span> <span class=\"bp\">+</span> <span class=\"n\">Q.matches</span> <span class=\"n\">η</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">*</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">η</span> <span class=\"o\">:=</span> <span class=\"n\">P.matches</span> <span class=\"n\">η</span> <span class=\"bp\">*</span> <span class=\"n\">Q.matches</span> <span class=\"n\">η</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mu</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">η</span> <span class=\"o\">:=</span> <span class=\"n\">order_hom.lfp</span>\n                    <span class=\"o\">{</span>\n                      <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">matches</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">L</span> <span class=\"k\">else</span> <span class=\"n\">η</span> <span class=\"n\">y</span><span class=\"o\">)),</span>\n                      <span class=\"n\">monotone'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">--intros a b hab x₁ hx₁,</span>\n                        <span class=\"c1\">--dsimp at *,</span>\n                        <span class=\"c1\">--induction r,</span>\n                        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n                        <span class=\"c1\">-- The problem I have here is that I cannot \"rw matches\" even though</span>\n                        <span class=\"c1\">-- I have defined that matches zero _ := 0. There is a matches in the</span>\n                        <span class=\"c1\">-- list of hypotheses, but I do not know why it is there.</span>\n                      <span class=\"o\">}</span>\n                    <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">context_free_expression</span>\n</code></pre></div>\n<p>If anyone could shed some light on why this is the case, or give me a possible workaround that would be great.</p>",
        "id": 269614095,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1643307009
    },
    {
        "content": "<p>Try to change the return type of <code>matches</code>. Instead of returning <code>language α</code>, make it return a subtype that asserts that the corresponding function involving <code>language α</code> is monotone.</p>",
        "id": 269618393,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643308883
    }
]