[
    {
        "content": "<p>Is there any difference between these two different function definition styles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I intuitively understand that for <code>add1</code> the sorry needs to be filled with a term of type Nat, whereas for <code>add2</code> the sorry needs to be filled with a term of type <code>Nat → Nat → Nat</code> using a lambda term.  But I don't know why I would prefer one over the other or why exactly the actual term definitions are different since both functions have the same type signature with <code>#check</code></p>",
        "id": 236409896,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1619557810
    },
    {
        "content": "<p>There's no difference once the definitions are complete, but sometimes one might be more convenient than the other when writing the term, e.g. if you want to use the equation compiler, you'll probably want to start with the latter.</p>",
        "id": 236410854,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619558032
    },
    {
        "content": "<p>but if you're doing a tactic proof (which would not be advisable here because it's a definition, but if these were predicates Nat -&gt; Nat -&gt; (some proposition)) then the advantage of the first one is that you don't have to start your proof with <code>intros a b</code> as you would have to with the second one</p>",
        "id": 236415979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619560103
    },
    {
        "content": "<p>On the other hand, sometimes you want it in the latter form for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#induction\">tactic#induction</a>.</p>",
        "id": 236416812,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619560574
    },
    {
        "content": "<p>I see, thanks you both</p>",
        "id": 236418282,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1619561456
    }
]