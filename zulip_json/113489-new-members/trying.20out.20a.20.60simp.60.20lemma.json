[
    {
        "content": "<p>Dear All,</p>\n<p>what constitutes a good test for trying out a <code>simp</code> lemma?  I list below what comes to mind: is there any other \"standard\" test that you would do?</p>\n<ul>\n<li>Check that <code>#lint</code> is happy.</li>\n<li>Make sure that CI is successful with the <code>simp</code> tag.</li>\n<li>Check that the statement of the new <code>simp</code> lemma can be proven by <code>simp</code> only after you tag the lemma with <code>simp</code>.</li>\n<li>Modify the statement a bit, in such a way that <code>simp</code> \"should prove it\" and check that it does.</li>\n<li>Ask on Zulip?</li>\n</ul>\n<p>I have ticked all of the above, except that I am still waiting on CI to finish.</p>\n<p>Anything else?</p>\n<p>Thanks!</p>",
        "id": 234096195,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618195940
    },
    {
        "content": "<p>The reason for asking is I would like to tag the lemmas below with <code>simp</code> and Scott suggested to \"try it out\"!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat.smul_one_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nsmul_eq_smul</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">int.smul_one_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">gsmul_eq_smul</span><span class=\"o\">,</span> <span class=\"n\">gsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">rat.smul_one_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">algebra.smul_def</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.eq_rat_cast</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 234096197,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618195943
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7166\">#7166</a></p>\n<p>CI was successful with the <code>simp</code> tag for the three lemmas!</p>",
        "id": 234104433,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618204501
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"></p>",
        "id": 234105666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618205789
    },
    {
        "content": "<p>(Also, this would be better in <code>general</code> than in <code>new members</code>)</p>",
        "id": 234105737,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618205883
    }
]