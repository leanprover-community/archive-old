[
    {
        "content": "<p>Hello, I have the following issue with <code>equiv_rw</code> (excuse me for the verbose MWE, but I was not able to find a smaller one):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.equiv_rw</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">\"postfix `ᵀ`:1500 := matrix.transpose\"</span> <span class=\"k\">in</span> <span class=\"n\">matrix</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"infixl ` ⬝ `:75 := matrix.mul\"</span> <span class=\"k\">in</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix.append_cols</span>\n   <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n   <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n₂</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">sum.elim</span> <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">lemma</span> <span class=\"n\">unit_equiv_fin1'</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">+</span> <span class=\"n\">p₂</span><span class=\"o\">))</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n  <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">matrix.append_cols</span> <span class=\"n\">β₁</span><span class=\"bp\">ᵀ</span> <span class=\"n\">β₂</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span>\n                   <span class=\"bp\">.</span><span class=\"n\">submatrix</span> <span class=\"n\">id</span> <span class=\"n\">fin_sum_fin_equiv.symm</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">concat_prop</span>\n   <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n   <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">+</span> <span class=\"n\">p₂</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n   <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n   <span class=\"o\">{</span><span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n   <span class=\"o\">(</span><span class=\"n\">hβ</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">β₁</span><span class=\"bp\">ᵀ.</span><span class=\"n\">append_cols</span> <span class=\"n\">β₂</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">submatrix</span> <span class=\"n\">id</span> <span class=\"n\">fin_sum_fin_equiv.symm</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">hβ</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">my_theorem</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">equiv_rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">unit_equiv_fin1'</span> <span class=\"n\">ℝ</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">β₁</span><span class=\"o\">,</span>\n  <span class=\"n\">equiv_rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">unit_equiv_fin1'</span> <span class=\"n\">ℝ</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">β₂</span><span class=\"o\">,</span>\n  <span class=\"n\">equiv_rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">unit_equiv_fin1'</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">+</span> <span class=\"n\">p₂</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">concat_prop</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">β</span> <span class=\"n\">β₁</span> <span class=\"n\">β₂</span> <span class=\"n\">hβ</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>To keep it minimal, I replaced all non-important parts with <code>sorry</code>.</p>\n<p>I have some <code>concat_prop</code> lemma that works on matrices with indices using <code>fin</code>. Given in the <code>variables</code> are matrices that have <code>unit</code> as their second index. Now I have a <code>unit_equiv_fin1'</code> lemma that shows that matrices with index <code>unit</code> are equivalent to matrices with index <code>fin 1</code>. I also have a function to append two generic matrices column-wise called <code>matrix.append_cols</code>. This function is not important per se, but I was only able to reproduce this issue with that function. The <code>submatrix</code> business that appears is necessary to turn the <code>⊕</code> into <code>+</code> so it works with <code>fin</code>.</p>\n<p>In <code>my_theorem</code> I call <code>equiv_rw</code> for all my beta matrices (to rewrite them to have a <code>fin 1</code> index instead of <code>unit</code>). Now they are compatible with <code>concat_prop</code>, however the hypothesis <code>hβ,</code> that I assume in <code>variables</code>, is also rewritten. On the line <code>have foo := ...</code> I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">49</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">concat_prop</span> <span class=\"n\">hβ</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">hβ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">unit_equiv_fin1'.symm</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(((</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">unit_equiv_fin1'.symm</span><span class=\"o\">)</span> <span class=\"n\">β₁</span><span class=\"o\">)</span><span class=\"bp\">ᵀ.</span><span class=\"n\">append_cols</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">unit_equiv_fin1'.symm</span><span class=\"o\">)</span> <span class=\"n\">β₂</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">submatrix</span> <span class=\"n\">id</span>\n         <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">fin_sum_fin_equiv.symm</span><span class=\"o\">))</span><span class=\"bp\">ᵀ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">β₁</span><span class=\"bp\">ᵀ.</span><span class=\"n\">append_cols</span> <span class=\"n\">β₂</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">submatrix</span> <span class=\"n\">id</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">fin_sum_fin_equiv.symm</span><span class=\"o\">))</span><span class=\"bp\">ᵀ</span>\n</code></pre></div>\n<p><code>equiv_rw</code> also rewrites the hypothesis <code>hβ</code> and adds these  <code>⇑(unit_equiv_fin1'.symm)</code> to all matrices I've applied the rewrite to.</p>\n<p>There is, however, no type mismatch if, instead of my hypothesis <code>hβ</code> using <code>=</code>, I replace it with some random other proposition, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_prop</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n₂</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"bp\">...</span>\n\n  <span class=\"o\">(</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"n\">my_prop</span> <span class=\"n\">β</span> <span class=\"o\">((</span><span class=\"n\">matrix.append_cols</span> <span class=\"n\">β₁</span><span class=\"bp\">ᵀ</span> <span class=\"n\">β₂</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span>\n                   <span class=\"bp\">.</span><span class=\"n\">submatrix</span> <span class=\"n\">id</span> <span class=\"n\">fin_sum_fin_equiv.symm</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">concat_prop</span>\n   <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n   <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">+</span> <span class=\"n\">p₂</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n   <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n   <span class=\"o\">{</span><span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n   <span class=\"o\">(</span><span class=\"n\">hβ</span><span class=\"o\">:</span> <span class=\"n\">my_prop</span> <span class=\"n\">β</span> <span class=\"o\">((</span><span class=\"n\">β₁</span><span class=\"bp\">ᵀ.</span><span class=\"n\">append_cols</span> <span class=\"n\">β₂</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">submatrix</span> <span class=\"n\">id</span> <span class=\"n\">fin_sum_fin_equiv.symm</span><span class=\"o\">)</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This way, the error is gone, but I have no idea why and how I could fix it in my original case using <code>=</code>. </p>\n<p>Any help is very much appreciated, as I have been kind of stuck on this for a few days... Thanks a bunch!</p>\n<p>(I am aware this looks like an XY problem, as I could replace all <code>unit</code> with <code>fin 1</code> and not deal with <code>equiv_rw</code>, but in my context, <code>unit</code> makes a lot of other things a lot easier to deal with.)</p>",
        "id": 322519397,
        "sender_full_name": "Aron Erben",
        "timestamp": 1674223124
    },
    {
        "content": "<p>(I needed to add <code>import logic.equiv.fin</code>). At the very least, <code>unit_equiv_fin1'</code> should be a <code>def</code> not a <code>lemma</code>, because it carries data. Does this help? Marking something as a lemma deletes all the data in it, and so definitional equality won't work any more.</p>",
        "id": 322544054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674229297
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 322653882,
        "sender_full_name": "Kind Bubble",
        "timestamp": 1674269139
    }
]