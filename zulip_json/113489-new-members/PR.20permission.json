[
    {
        "content": "<p>Hello. So I've been playing around with lean for a bit now, but have yet to make a PR so I was thinking I should try to figure out  how to do this now. <br>\nI wanted to try this out by adding some lean code for general linear groups as invertible matrices. Specifically, I defined them as matrices with unit determinant (in contrast to what is in lean at the moment which only has them as invertible linear maps) and have proven some simple things about them (for example they form a group). I've also defined the subgroup of matrices invertible matrices with positive determinant.</p>\n<p>I'm not sure if this needs to be pre-checked, if so I've put the code here: <a href=\"https://gist.github.com/CBirkbeck/f6d0272020b065f787d3fdc7a2aaa476\">https://gist.github.com/CBirkbeck/f6d0272020b065f787d3fdc7a2aaa476</a> <br>\n(any tips/comments on the lean code are also very welcome as I'm quite new to this).</p>\n<p>If not, I'm assuming I can just do a PR (once I get permission) and then go from there? btw my github username is cbirkbeck.  </p>\n<p>Thank  you</p>",
        "id": 247218843,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627313463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span>  <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 247219085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627313562
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 247219230,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627313627
    },
    {
        "content": "<p>Chris, have you considered working with \"units (matrix n n R)\"?</p>",
        "id": 247220982,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627314355
    },
    {
        "content": "<p>Then you can show that there's a group iso between the two.</p>",
        "id": 247221257,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627314477
    },
    {
        "content": "<p>Ah interesting. No, I was basing this on the special_linear_group file and went in that direction. Would it be better to define it that way?</p>",
        "id": 247221336,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627314500
    },
    {
        "content": "<p>Well, you get that it is a group \"for free\". And units has all the nice coe lemmas too.</p>",
        "id": 247221437,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627314551
    },
    {
        "content": "<p>Mathematically, they're all the same (provably), it's just a matter of which lends itself to the easiest API</p>",
        "id": 247221485,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627314591
    },
    {
        "content": "<p>Plus, there's a lemma that says that is_unit A.det iff is_unit A</p>",
        "id": 247221560,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627314616
    },
    {
        "content": "<p>Yes I see what you mean. I don't really know what makes a good API so I'm happy to follow tips from others</p>",
        "id": 247221603,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627314639
    },
    {
        "content": "<p>Is there something you want to prove specifically about GLn matrices, or just define them?</p>",
        "id": 247221800,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627314734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/PR.20permission/near/247220982\">said</a>:</p>\n<blockquote>\n<p>Chris, have you considered working with \"units (matrix n n R)\"?</p>\n</blockquote>\n<p>Indeed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.general_linear_group/src\">src#linear_map.general_linear_group</a> is defined as <code>units (M →ₗ[R] M)</code>, so reusing the same approach would be sensible.</p>",
        "id": 247221878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627314780
    },
    {
        "content": "<p>Having a theorem in mind helps develop the API. Definitions are conceptually expensive, they require a lot of \"cruft\", a lot of those basic coe and application lemmas. Those can be avoided with neat definitions. But regardless of the definitions, the main target should be proving something interesting about them.</p>",
        "id": 247221951,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627314830
    },
    {
        "content": "<p>No, what I really wanted to define was the subgroup of invertible matrices with positive determinant, since this when you take this with real entries, you get a group that acts nicely on the upper half plane, which is related to the modular form stuff I'm thinking about. So, I just wanted the quickest way to define this and it felt wrong doing this and not GLn first.</p>",
        "id": 247222026,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627314845
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The definition of GLₙ(ℝ) is group-equivalent to the mathlib definition</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">GLₙ</span> <span class=\"n\">n</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">linear_map.general_linear_group</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">units.map_equiv</span> <span class=\"n\">to_lin_alg_equiv'.to_mul_equiv</span>\n</code></pre></div>",
        "id": 247222144,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627314895
    },
    {
        "content": "<p>Chris, you can take a look at how I did something similar to you at <a href=\"https://github.com/pechersky/e222/blob/master/src/lecture01.lean\">https://github.com/pechersky/e222/blob/master/src/lecture01.lean</a></p>",
        "id": 247222240,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627314947
    },
    {
        "content": "<blockquote>\n<p>subgroup of invertible matrices with positive determinant</p>\n</blockquote>\n<p>Arguably the mathlib way to do this would be to take the subgroup of invertible linear maps with positive <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.det\">docs#linear_map.det</a></p>",
        "id": 247222274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627314959
    },
    {
        "content": "<p>Aha, is it then easy to go from linear maps to matrices? Since I'd want to define the action on the upper half space using the entries of the matrix. I guess I'm asking how easy it is pick a bases.</p>",
        "id": 247222617,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627315122
    },
    {
        "content": "<p>Chris, Eric's statement suggests that whatever you might prove about GLnR, you can prove about linear maps, and it will be \"the same\". You can provide a basis. The example I gave above gives precisely the group isomorphism between the two that allows you move between the two.</p>",
        "id": 247222755,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627315191
    },
    {
        "content": "<p>(this action is specific to the 2x2 case I should add)</p>",
        "id": 247222764,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627315195
    },
    {
        "content": "<p>Are you sure you want to use matrices at all here? It sounds like you're using <code>matrix (fin 2) (fin 2) ℝ</code> as an alternate representation of <code>ℂ →ₗ[ℝ] ℂ</code>. Is that correct?</p>",
        "id": 247223015,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627315279
    },
    {
        "content": "<p>Is there a reason that the former representation is more convenient for you?</p>",
        "id": 247223076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627315307
    },
    {
        "content": "<p>Well I want to define the moebius transformation on the upper half plane. For this I wanted to work with 2x2 invertible matrices with positive determinant as this is what acts the upper half plane. The usual definition is to take a matrix (a b ; c d) and act on z by sending it to (az+b/cz+d).</p>",
        "id": 247223368,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627315436
    },
    {
        "content": "<p>I think this is about <a href=\"https://en.wikipedia.org/wiki/Linear_fractional_transformation\">https://en.wikipedia.org/wiki/Linear_fractional_transformation</a></p>",
        "id": 247223504,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627315506
    },
    {
        "content": "<p>I guess I'm not sure how I would define this using the linear map description (or if it would be worth even trying to as it seems it would look messy)</p>",
        "id": 247223522,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627315513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/PR.20permission/near/247223504\">said</a>:</p>\n<blockquote>\n<p>I think this is about <a href=\"https://en.wikipedia.org/wiki/Linear_fractional_transformation\">https://en.wikipedia.org/wiki/Linear_fractional_transformation</a></p>\n</blockquote>\n<p>Yes exactly</p>",
        "id": 247223603,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627315550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/PR.20permission/near/247222240\">said</a>:</p>\n<blockquote>\n<p>Chris, you can take a look at how I did something similar to you at <a href=\"https://github.com/pechersky/e222/blob/master/src/lecture01.lean\">https://github.com/pechersky/e222/blob/master/src/lecture01.lean</a></p>\n</blockquote>\n<p>Yes this looks like exactly what I was looking for when I started this. Do you plan on adding this to mathlib? (tbh I only considered trying to add this to mathlib as I thought it would be a good trial of how the PR system goes)</p>",
        "id": 247224451,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627315819
    },
    {
        "content": "<p>This repo is just a parallel formalization of a course, it's not meant to be as general as mathlib is. I've been formalizing it to see if formalizing an undergrad course is \"easy\" or clunky with current mathlib. I've PRed the parts that make it less clunky.</p>",
        "id": 247224571,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627315897
    },
    {
        "content": "<p>So for your modular forms stuff, try defining a group action using the subgroup of the units of the matrices, like Eric suggested.</p>",
        "id": 247224692,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627315936
    },
    {
        "content": "<p>In fact, you can define it on 2x2 matrices in general, and how that it is a group hom when acting on the subgroup?</p>",
        "id": 247224936,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627316071
    },
    {
        "content": "<p>Well you need the determinant to be positive otherwise it will send the upper half plane to the lower one and that's not something I want to do. But I see your point about using units of the matrices and going from there.</p>",
        "id": 247225204,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627316217
    },
    {
        "content": "<p>You can extract <code>a, b, c, d,</code> from <code>f : ℂ →ₗ[ℝ] ℂ</code> as something like <code>(f 1).re, (f 1).im, (f I).re, (f I).im</code> (or possibly the transpose of that), right?</p>",
        "id": 247226184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627316657
    },
    {
        "content": "<p>Perhaps we're missing a lemma that expands <code>linear_map.det</code> on <code>ℂ →ₗ[ℝ] ℂ</code> componentwise?</p>",
        "id": 247226239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627316687
    },
    {
        "content": "<p>What in saying is that the function is definable regardless of what a b c d are. The properties of the function you care about are relevant only given your hypothesis.</p>",
        "id": 247226270,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627316704
    },
    {
        "content": "<p>Similar to how division is defined without having to check for a nonzero denominator</p>",
        "id": 247226324,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627316727
    },
    {
        "content": "<p>Ah sorry, I see what you mean.</p>",
        "id": 247226369,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627316752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> Concerning PRs, be sure to check out <a href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A\">#howtoPR</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bnc8w9lxe8A\" href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A\"><img src=\"https://uploads.zulipusercontent.net/ae6a5158c3c3f73f7cadb724ecaee86e98129753/68747470733a2f2f692e7974696d672e636f6d2f76692f426e633877396c786538412f64656661756c742e6a7067\"></a></div>",
        "id": 247226509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627316828
    },
    {
        "content": "<p>Eric, you're asking for a lemma that expands the det, given an explicit basis?</p>",
        "id": 247226535,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627316842
    },
    {
        "content": "<p>I'm not an expert on modular forms, but given all the congruence subgroups that pop up, I think it is hard to avoid matrices.</p>",
        "id": 247226654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627316899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/PR.20permission/near/247226509\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> Concerning PRs, be sure to check out <a href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A\">#howtoPR</a></p>\n</blockquote>\n<p>AH thank you thats really helpful.</p>",
        "id": 247226701,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627316926
    },
    {
        "content": "<p>So I'm inclined to just define <code>GL_plus n R</code> for any <code>[ordered_semiring R]</code>.</p>",
        "id": 247226752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627316957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/PR.20permission/near/247223015\">said</a>:</p>\n<blockquote>\n<p>It sounds like you're using <code>matrix (fin 2) (fin 2) ℝ</code> as an alternate representation of <code>ℂ →ₗ[ℝ] ℂ</code>. Is that correct?</p>\n</blockquote>\n<p>With the extra context I think my suggestion was not correct - you're parametrizing an arbitrary function with a 2x2 matrix, not the function I'm thinking of.</p>",
        "id": 247226762,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627316962
    },
    {
        "content": "<p>For the record: <a href=\"https://en.wikipedia.org/wiki/Congruence_subgroup\">https://en.wikipedia.org/wiki/Congruence_subgroup</a><br>\n<span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> is probably where Chris would like to move towards</p>",
        "id": 247226828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627317003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/PR.20permission/near/247226654\">said</a>:</p>\n<blockquote>\n<p>I'm not an expert on modular forms, but given all the congruence subgroups that pop up, I think it is hard to avoid matrices.</p>\n</blockquote>\n<p>Yes, this is why I was thinking about this as matrices and not linear maps. But I dont know if that leads to a good API, but at least  its consistent with modular form literature</p>",
        "id": 247226947,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627317044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/PR.20permission/near/247226828\">said</a>:</p>\n<blockquote>\n<p>For the record: <a href=\"https://en.wikipedia.org/wiki/Congruence_subgroup\">https://en.wikipedia.org/wiki/Congruence_subgroup</a><br>\n<span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> is probably where Chris would like to move towards</p>\n</blockquote>\n<p>Yes exactly</p>",
        "id": 247226981,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627317058
    },
    {
        "content": "<p>Then it's a hop skip and a jump to STW correct? ;-)</p>",
        "id": 247227229,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627317180
    },
    {
        "content": "<p>STW?</p>",
        "id": 247227399,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627317269
    },
    {
        "content": "<p>Chris, you can look at the other lecture notes and problem sets (in that repo) , to see how I deal with subgroups of GLn in mathlib style using the definition I shared.</p>",
        "id": 247227461,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627317308
    },
    {
        "content": "<p>Yes I'll do that. Those notes look great, so thank you for sharing them!</p>",
        "id": 247227557,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627317359
    },
    {
        "content": "<p>Shimura Taniyama Weil</p>",
        "id": 247227627,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627317379
    },
    {
        "content": "<p>Explicit computation with matrices is still slower/clunkier than I would like. But it is possible!</p>",
        "id": 247227690,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627317415
    },
    {
        "content": "<p>AH  haha I see yes :)<br>\n<span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/PR.20permission/near/247227627\">said</a>:</p>\n<blockquote>\n<p>Shimura Taniyama Weil</p>\n</blockquote>",
        "id": 247227716,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627317428
    },
    {
        "content": "<p>(there are also pdfs of what the lecture was actually saying)</p>",
        "id": 247227736,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627317442
    },
    {
        "content": "<p>Feel free to DM me with questions</p>",
        "id": 247227770,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627317460
    },
    {
        "content": "<p>I will do, thank you!</p>",
        "id": 247227808,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627317478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/PR.20permission/near/247227229\">said</a>:</p>\n<blockquote>\n<p>Then it's a hop skip and a jump to STW correct? ;-)</p>\n</blockquote>\n<p>The world record is something like 18 meters, right? I think you could fit all the necessary literature on an 18m bookshelf (-;</p>",
        "id": 247228550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627317821
    },
    {
        "content": "<p>Kevin probably has that shelf in his office</p>",
        "id": 247228852,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1627317940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> See also <a href=\"https://github.com/leanprover-community/mathlib/issues/8377\">#8377</a></p>",
        "id": 247342841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627397159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/PR.20permission/near/247342841\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> See also <a href=\"https://github.com/leanprover-community/mathlib/issues/8377\">#8377</a></p>\n</blockquote>\n<p>Yes I've talked to Heather about this. Generalizing this action from SL(2,RR) to GL_2(RR)+ was part of my motivation.</p>",
        "id": 247431452,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627459091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> So I've been trying to update my definition of GLn to the one which you suggested. What is still not clear to me is which definition leads to a better API. It seems if I define them as <code>units(matrices n n R)</code> then to write one down I need to give 4 pieces of information the matrix, its inverse, and two proofs. But if one defines them to be matrices with invertible determinant one only needs to provide two pieces of information, the matrix and proof the determinant is a unit. Is it clear that giving 4 pieces of information leads to a better API?</p>",
        "id": 247463763,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627481399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> You can write a custom constructor, that only takes the two pieces of info.</p>",
        "id": 247463891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627481446
    },
    {
        "content": "<p>Recording the inverse explicitly will probably be helpful.</p>",
        "id": 247463927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627481463
    },
    {
        "content": "<p>It allows Lean to know that 1^-1 = 1 (defeq), instead of merely knowing the existence.</p>",
        "id": 247463976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627481490
    },
    {
        "content": "<p>Aha, ok I'm not sure what a constructor is, but I'll have a look.</p>",
        "id": 247463995,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627481501
    },
    {
        "content": "<p>constructor = function building some object</p>",
        "id": 247464022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627481515
    },
    {
        "content": "<p>But it will like just be A^-1. It's just the proof of that is_unit A.det that allows you to prove that that is actually the left and right inverse.</p>",
        "id": 247464051,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627481524
    },
    {
        "content": "<p>Oh I see so I should make a constructor that takes in the matrix and the proof that the det is a unit and gives an element of <code>\nunits(matrices  n n R)</code></p>",
        "id": 247464251,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627481606
    },
    {
        "content": "<p>Right, and you call it <code>GL.mk'</code> or so. See for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.mk'\">docs#add_monoid_hom.mk'</a> (which constructs a monoid hom between groups, and therefore doesn't need the <code>map_zero</code> data, because it is automatic)</p>",
        "id": 247464320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627481636
    },
    {
        "content": "<p>OK great. Ill try that. Thank you!</p>",
        "id": 247464457,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627481687
    },
    {
        "content": "<p>Ok I've made the PR now. Thanks for all your help. I expect more things will need modifying, but I'll wait and see.</p>",
        "id": 247600538,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1627572979
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib/issues/8466\">#8466</a>)</p>",
        "id": 247604028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627574624
    }
]