[
    {
        "content": "<p>I have two goals and I really want to solve the other one first. How can I focus the second goal?</p>",
        "id": 258093115,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1634588283
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#swap\">tactic#swap</a></p>",
        "id": 258093226,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634588326
    },
    {
        "content": "<p>Can I accomplish this without <code>mathlib</code>?</p>",
        "id": 258093337,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1634588383
    },
    {
        "content": "<p>Ah, never mind. I was expecting some magic syntax but I suppose there is not one.</p>",
        "id": 258093488,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1634588446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448347\">Ignat Insarov</span> has marked this topic as resolved.</p>",
        "id": 258093559,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634588491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448347\">@Ignat Insarov</span> This tactic is in mathlib but it's definition uses nothing outside of core lib, so you can simply copy it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.swap</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"k\">match</span> <span class=\"n\">gs.nth</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">::</span> <span class=\"n\">gs.remove_nth</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n   <span class=\"bp\">|</span> <span class=\"n\">_</span>        <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n   <span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258096597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634589700
    },
    {
        "content": "<p>Also if for example your multiple goals happen to have come from the <code>cases</code> tactic, you can use e.g. <code>case nat.succ { .. }</code> (with the name of the case you want to deal with, here <code>nat.succ</code>), even in core Lean</p>",
        "id": 258108984,
        "sender_full_name": "Julian Berman",
        "timestamp": 1634595165
    },
    {
        "content": "<p>And relatedly you have <code>rotate</code> which does what it says on the box.</p>",
        "id": 258110250,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634595850
    }
]