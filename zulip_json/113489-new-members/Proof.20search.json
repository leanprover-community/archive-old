[
    {
        "content": "<p>I am working on a little proof and need to rewrite <code>sqr (a - b)</code> into <code>sqr a - 2 * a * b + sqr b</code>. Now of course I could define a postulate for this like I did in the Agda proof I am rewriting, but I am guessing that this is proven in the <code>mathlib</code> and Lean has some kind of proof search. In Coq I could write something like <code>Search (forall a b, sqr (a - b) = sqr a - 2 * a * b + sqr b).</code> What functionality for this sort of thing does Lean have?</p>",
        "id": 178035658,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1570968395
    },
    {
        "content": "<p>The <code>ring</code> tactic should solve this. You'll need to use <code>^2</code> instead of <code>sqr</code> though.</p>",
        "id": 178037525,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570972006
    },
    {
        "content": "<p>For searching, <code>library_search</code> is convenient:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">library_search</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- exact add_mul_self_eq a b</span>\n</pre></div>",
        "id": 178038080,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570973087
    },
    {
        "content": "<p>Oh wait, the minus sign got lost in translation. I don't think that particular lemma is in the library yet.</p>",
        "id": 178038139,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570973205
    },
    {
        "content": "<p>Let me bring this subject up again as I am having some trouble. </p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nc x : ℚ,\nl : list ℚ,\nE.const_none : ∀ (l : list ℚ), monoid.pow c (list.length l) * rat.inv ↑(list.length l) = c ∨ l = list.nil\n⊢ monoid.pow c (1 + list.length l) * rat.inv (1 + ↑(list.length l)) = c\n</pre></div>\n\n\n<p>Right now I have something like this in my tactic state and I want to search all the proofs involving <code>monoid.pow</code>. What would be the best way to go about this. <code>library_search</code> is not quite equivalent to Coq's <code>Search</code> as it is a tactic that fails or succeeds. Coq's <code>Search</code> can print out every function in which a term appears.</p>",
        "id": 178111436,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571065809
    },
    {
        "content": "<p>You can also use <code>set_option trace.library_search true</code> to have library_search list of all possible results matching a given type. Alternatively you can make an educated guess at names with a bit of grepping / text searching in vscode or whatever to find things, this is surprisingly effective because the mathlib naming scheme is quite rigid.</p>",
        "id": 178113220,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1571067085
    },
    {
        "content": "<p>In tactic mode you can try <code>exact monoid.pow</code> and then ctrl-space and then maybe esc and ctrl-space again for good measure. This might give you a list of helpful things.</p>",
        "id": 178113672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571067380
    },
    {
        "content": "<blockquote>\n<p>Coq's Search can print out every function in which a term appears.</p>\n</blockquote>\n<p>Actually, what I meant to write here is that it can print out every function <strong>in whose type</strong> a term appears which is very useful for searching through theorems of equalities. It is a powerful thing. I am not sure if it is on the requested features list, but if it is not, it definitely should be.</p>\n<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> </p>\n<blockquote>\n<p>You can also use set_option trace.library_search true to have library_search list of all possible results matching a given type.</p>\n</blockquote>\n<p>I am not sure how to control <code>library_search</code> to just search it for equalities involving <code>monoid.pow</code>. Right now I just tried it and it gave me what seems to be an unordered list of 4k lemmas. It is not really quite the thing I am looking for.</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<blockquote>\n<p>In tactic mode you can try exact monoid.pow and then ctrl-space and then maybe esc and ctrl-space again for good measure. This might give you a list of helpful things.</p>\n</blockquote>\n<p>In VS Code that is the trigger for autosuggestion, I am not sure if you are using Emacs what is it there. One thing I do know is that Ctrl + click dives me into the implementation of a function which is useful, but not quite enough for me.</p>",
        "id": 178114600,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571068108
    },
    {
        "content": "<p>For examples how Coq's <code>Search</code> works, check this out: <a href=\"https://softwarefoundations.cis.upenn.edu/vfa-current/Perm.html\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu/vfa-current/Perm.html\">https://softwarefoundations.cis.upenn.edu/vfa-current/Perm.html</a></p>\n<p>It is the first chapter of vol 3 of Software Foundations.</p>",
        "id": 178116538,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571069581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244262\">@Marko Grdinic</span> You are trying to prove that <code>c ^ something = c</code>. You want to do this be claiming that <code>something = 1</code>. You can guess the name of the lemma that says <code>c ^ 1 = c</code>: it will/should/must/shall/ought be called <code>pow_one</code>. So you proceed by saying <code>convert pow_one c</code>. Now you are left with proving <code>something = 1</code>.</p>",
        "id": 178117413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571070278
    },
    {
        "content": "<p>Yes. Many of us are aware of how <code>library_search</code> is different from Coq <code>search</code>. Actually there was some brief talk awhile back about ambitious projects like coding up a Hoogle-alike, but it never went anywhere because most people are OK with what we have (some mixture of grep, library_search, and VSCode autocomplete + naming conventions). That is not to say that if you wanted to have a Search tactic in mathlib, that pull request would not be accepted. Although I'm not a maintainer, but generally they are pretty receptive to these things.</p>",
        "id": 178118194,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1571070919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209436\">@Lucas Allen</span> is almost ready with a <code>refine_list</code> tactic, which is like <code>library_search</code> but allows leaving holes. Hopefully it will be helpful!</p>",
        "id": 178148392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571096639
    },
    {
        "content": "<p>oh, and there it is: <a href=\"https://github.com/leanprover-community/mathlib/pull/1552\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1552\">https://github.com/leanprover-community/mathlib/pull/1552</a></p>",
        "id": 178152115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571101498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209436\">@Lucas Allen</span> Hooray! Nice work!</p>",
        "id": 178154177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571104794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> </p>\n<blockquote>\n<p>You are trying to prove that c ^ something = c. You want to do this be claiming that something = 1. You can guess the name of the lemma that says c ^ 1 = c: it will/should/must/shall/ought be called pow_one. So you proceed by saying convert pow_one c. Now you are left with proving something = 1.</p>\n</blockquote>\n<p>Actually,  <code>monoid.pow</code> is misleading here, it really is multiplication under the hood. What I am trying to prove is more like <code>c * (1 + n) / (1 + n) = c</code>. What makes this situation confusing is that the simplifier got it into this strange form using I do not know which rewrites, and I am not sure what the steps for dealing with this should be. It cannot be solved by <code>ring</code> here. Maybe I will try simplifying it step by step in addition to going through the lemmas for <code>rat</code>.</p>",
        "id": 178172645,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571129247
    },
    {
        "content": "<p>There is <code>squeeze_simp</code> that will report what the simplifier did.</p>",
        "id": 178172710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571129299
    },
    {
        "content": "<p>And I agree that this seems a very crazy end result be the simplifier.</p>",
        "id": 178172737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571129322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nI think I am looking at some bug here. I thought that <code>monoid.pow</code> was multiplication, but it turns out it really is a power function.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">rat</span><span class=\"o\">),</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"c1\">-- list.sum (list.map (λ (_x : ℚ), c) (x :: l)) = c * ↑(list.length (x :: l))</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- add_monoid.smul (1 + list.length l) c = c * (1 + ↑(list.length l))</span>\n        <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- add_monoid.smul (list.length l + 1) c = (↑(list.length l) + 1) * c</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- monoid.pow c (list.length l + 1) = (↑(list.length l) + 1) * c</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"o\">,</span> <span class=\"c1\">-- c * monoid.pow c (list.length l) = (↑(list.length l) + 1) * c</span>\n        <span class=\"n\">rw</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">repeat</span><span class=\"o\">,</span> <span class=\"c1\">-- c * (↑(list.length l) * c) = (↑(list.length l) + 1) * c</span>\n        <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">-- c * (c * ↑(list.length l)) = c * ↑(list.length l) + c</span>\n    <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Something is not right here.</p>",
        "id": 178174991,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571131487
    },
    {
        "content": "<p>What is the output if you replace the first <code>simp</code> with <code>squeeze_simp</code>?</p>",
        "id": 178175189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571131678
    },
    {
        "content": "<p>You want to <code>rw</code> by <code>add_monoid.smul_add</code>, so probably you can add that to <code>simp</code></p>",
        "id": 178175230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571131685
    },
    {
        "content": "<p>The place where everything goes bonkers is <code>unfold add_monoid.smul</code>, because it switches you from additive to multiplicative notation. Reason: <code>add_monoid.smul</code> is defined to be <code>monoid.pow</code> on <code>multiplicative M</code>, where <code>M</code> is your additive monoid.</p>",
        "id": 178175322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571131796
    },
    {
        "content": "<blockquote>\n<p>What is the output if you replace the first simp with squeeze_simp?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>variance.lean:72:8: information trace output\nsimp only [list.repeat,\n list.length,\n add_comm,\n list.sum_repeat,\n list.map_const,\n nat.cast_add,\n nat.cast_one,\n list.map] at *\n</pre></div>",
        "id": 178175518,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571131989
    },
    {
        "content": "<blockquote>\n<p>You want to rw by add_monoid.smul_add, so probably you can add that to simp</p>\n</blockquote>\n<p>The effect of that is the same as unfolding it like I am doing now.</p>\n<blockquote>\n<p>The place where everything goes bonkers is unfold add_monoid.smul, because it switches you from additive to multiplicative notation. </p>\n</blockquote>\n<p>So what you are saying is that the <code>*</code>s are actually <code>+</code>s on the left side of the equality?</p>",
        "id": 178175779,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571132182
    },
    {
        "content": "<p>Are you rewriting by <code>smul</code> or <code>smul_add</code>?</p>",
        "id": 178175798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571132215
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/494132e1ebdba300a43d66e19ddc5b724fd20129/src/algebra/group_power.lean#L143\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/494132e1ebdba300a43d66e19ddc5b724fd20129/src/algebra/group_power.lean#L143\">https://github.com/leanprover-community/mathlib/blob/494132e1ebdba300a43d66e19ddc5b724fd20129/src/algebra/group_power.lean#L143</a></p>",
        "id": 178175847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571132277
    },
    {
        "content": "<p>That seems like a useful lemma for you</p>",
        "id": 178175886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571132284
    },
    {
        "content": "<p>It's not tagged as a <code>simp</code>-lemma. So you could add it to the simp-set manually.</p>",
        "id": 178175911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571132327
    },
    {
        "content": "<p>If you then also add <code>list.eq.repeat</code> (your induction hypothesis) to the simp set, it might be able to close the goal completely</p>",
        "id": 178175960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571132392
    },
    {
        "content": "<p>Also, your lemma doesn't really use that <code>c</code> is a <code>rat</code>. So you could state it for any <code>semiring</code> I guess</p>",
        "id": 178176052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571132460
    },
    {
        "content": "<p>Thanks.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">rat</span><span class=\"o\">),</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">ring</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_add</span><span class=\"o\">],</span>\n        <span class=\"n\">refl</span>\n    <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>This goes through. I still find this confusing though. I have no idea why the notation suddenly changed mid way. How does that work? Is there a way print out the goal without the operators?</p>",
        "id": 178176793,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571133150
    },
    {
        "content": "<p>Is this what you want  <code>set_option pp.notation false</code>. Example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- has_mem.mem 1 set.univ : Prop</span>\n</pre></div>",
        "id": 178177683,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1571134010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244262\">@Marko Grdinic</span> Don't do <code>simp [add_monoid.smul]</code> but put the <code>smul_add</code> there instead. I would hope that it would avoid all the ugly notation.</p>",
        "id": 178178914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571135058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nPutting it there right away does nothing. I need to unfold <code>monoid.pow</code> first.</p>",
        "id": 178193302,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571146487
    },
    {
        "content": "<p>Weird</p>",
        "id": 178193354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571146525
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- list.sum (list.map (λ (_x : ℚ), c) (x :: l)) = c * ↑(list.length (x :: l))</span>\n<span class=\"n\">rw</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map_const</span><span class=\"o\">,</span> <span class=\"c1\">-- list.sum (list.repeat c (list.length (x :: l))) = c * ↑(list.length (x :: l))</span>\n<span class=\"n\">rw</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum_repeat</span> <span class=\"c1\">-- add_monoid.smul (list.length (x :: l)) c = c * ↑(list.length (x :: l))</span>\n</pre></div>\n\n\n<p><code>@[simp] theorem list.sum_repeat : ∀ (a : β) (n : ℕ), (list.repeat a n).sum = n • a</code> is the function that leads into it. It is in <code>algebra.group_power</code>, while map_const is in <code>list.basic</code>. I am not sure why that rewriting is happening considering I had not imported any of the <code>algebra</code> files myself. The only import I have is <code>data.rat</code>. I guess this means that every file in the project can extend the namespace in such a manner.</p>\n<p>Hmmm...definitely not what I expected. I expected that imports would be the main mechanism of information exchange between modules, but these extension definitions seem to be entirely separate from that. I am not sure if the manual said anything about this.</p>",
        "id": 178195032,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571147481
    },
    {
        "content": "<p>It's really powerful!</p>",
        "id": 178195264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571147635
    },
    {
        "content": "<p>maybe some file you imported also imports the algebra files.</p>",
        "id": 178195475,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1571147763
    },
    {
        "content": "<p>at least according to TPIL, simp only uses tagged lemmas from files that have been imported (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#using-the-simplifier\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#using-the-simplifier\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html#using-the-simplifier</a>, \"Once the attribute is applied, however, there is no way to remove it; it persists in any file that imports the one where the attribute is assigned.\")</p>",
        "id": 178195602,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1571147843
    },
    {
        "content": "<p>I guess <code>data.rat</code> must be importing them then at some point.</p>",
        "id": 178196572,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571148406
    },
    {
        "content": "<p>Here is an easier way of implementing the above function. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span> <span class=\"bp\">_</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>All my difficulty here was not really understanding the difference between monoidal and regular multiplication. One can use <code>add_monoid.smul_eq_mul</code> to go between the two.</p>",
        "id": 178200943,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571151226
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"209436\">Lucas Allen</span> Hooray! Nice work!</p>\n</blockquote>\n<p>Thanks <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 178239883,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1571177558
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p><code>library_search</code> should really be adjusted so that both sides of equalities get tested. It has been useful so far though. In cases like looking for <code>add_monoid.smul_eq_mul</code> I was lucky that I got the sides right otherwise I would not even have realized that something was amiss.</p>",
        "id": 178288634,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571232785
    },
    {
        "content": "<p>I think there is currently a PR that tries <code>symmetry</code> in library search</p>",
        "id": 178289238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571233146
    },
    {
        "content": "<blockquote>\n<p>I think there is currently a PR that tries <code>symmetry</code> in library search</p>\n</blockquote>\n<p>I see an issue, but not a PR. Am I overlooking something? I'll review soon if I am.</p>",
        "id": 178298408,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571238511
    },
    {
        "content": "<p>I thought that <code>refine_list</code> made this patch</p>",
        "id": 178298954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571238891
    },
    {
        "content": "<p>I don't see anything in the PR or added documentation that says that. If it does, it should be clarified! (Also it should probably be a separate PR.)</p>",
        "id": 178299217,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571239081
    },
    {
        "content": "<p>I saw <code>&lt;|&gt; symmetry</code> somewhere, and I guessed that was doing this patch. But I don't know meta code. So don't trust me.</p>",
        "id": 178299293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571239120
    },
    {
        "content": "<p>You could be right. This is a dangerous thing to do. When that's merged, the behavior of <code>library_search</code> will change (and become slower), and it will be very hard to trace the cause, since it isn't mentioned in the commit name or the PR body.</p>",
        "id": 178299528,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571239283
    },
    {
        "content": "<p>Then I hereby warn the reviewers (-;</p>",
        "id": 178299728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571239426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244262\">@Marko Grdinic</span> the rule of thumb is that the RHS should be \"simpler\" then the LHS.</p>",
        "id": 178321267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571254456
    },
    {
        "content": "<blockquote>\n<p>I think there is currently a PR that tries <code>symmetry</code> in library search</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> added <code>symmetry</code> to the <code>apply_and_solve</code> function in <code>library_search</code> while he was putting some final touches on <code>refine_list</code>.</p>",
        "id": 178332175,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1571263774
    },
    {
        "content": "<p>Okay, let's yoink that <code>symmetry</code> back out of this PR, and add it separately later.</p>",
        "id": 178332297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571263872
    },
    {
        "content": "<p>It really should have a performance optimisation put (run <code>symmetry</code> only once, not once for each lemma we try to apply...) anyway.</p>",
        "id": 178332311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571263894
    },
    {
        "content": "<blockquote>\n<p>Okay, let's yoink that <code>symmetry</code> back out of this PR, and add it separately later.</p>\n</blockquote>\n<p>I've removed <code>symmetry</code> from <code>library_search</code> in the <code>refine_list</code> PR.</p>",
        "id": 178332713,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1571264242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209436\">@Lucas Allen</span>, you should still explain in the top post that all the apparent changes to library_search are actually just refactoring so <code>library_search</code> and <code>refine_list</code> can share code, and (assuming this is correct), this PR doesn't change the behaviour of library_search.</p>",
        "id": 178332940,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571264457
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"209436\">Lucas Allen</span>, you should still explain in the top post that all the apparent changes to library_search are actually just refactoring so <code>library_search</code> and <code>refine_list</code> can share code, and (assuming this is correct), this PR doesn't change the behaviour of library_search.</p>\n</blockquote>\n<p>OK. I've modified the top post of the <code>refine_list</code> PR, and I made sure to mention what it's doing to <code>library_search</code>.</p>",
        "id": 178334106,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1571265717
    }
]