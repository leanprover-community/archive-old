[
    {
        "content": "<p>I just gave another shot to implementing <code>mono</code> and <code>ac_mono</code> (for reasoning with monotonicity with and without considerations for associativity / commutativity). For those who would like to use those, I'd love to hear if it's useful as it is. I have written a lot of examples, I hope it will be informative.</p>\n<p><a href=\"https://github.com/cipher1024/mathlib/blob/monotonicity/tests/monotonicity.lean\" target=\"_blank\" title=\"https://github.com/cipher1024/mathlib/blob/monotonicity/tests/monotonicity.lean\">https://github.com/cipher1024/mathlib/blob/monotonicity/tests/monotonicity.lean</a><br>\n<a href=\"https://github.com/cipher1024/mathlib/tree/monotonicity/docs\" target=\"_blank\" title=\"https://github.com/cipher1024/mathlib/tree/monotonicity/docs\">https://github.com/cipher1024/mathlib/tree/monotonicity/docs</a></p>",
        "id": 130874956,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533354967
    },
    {
        "content": "<p>This seems quite useful! I wonder if it would help with proving some of my stuff on simplicial sets: <a href=\"https://github.com/jcommelin/mathlib/blob/ece70f307edc5fdebe7aed154ab8aaa3a12bb5a3/algebraic_topology/simplex_category.lean#L33\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/ece70f307edc5fdebe7aed154ab8aaa3a12bb5a3/algebraic_topology/simplex_category.lean#L33\">https://github.com/jcommelin/mathlib/blob/ece70f307edc5fdebe7aed154ab8aaa3a12bb5a3/algebraic_topology/simplex_category.lean#L33</a> or <a href=\"https://github.com/jcommelin/mathlib/blob/ece70f307edc5fdebe7aed154ab8aaa3a12bb5a3/algebraic_topology/simplex_category.lean#L67\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/ece70f307edc5fdebe7aed154ab8aaa3a12bb5a3/algebraic_topology/simplex_category.lean#L67\">https://github.com/jcommelin/mathlib/blob/ece70f307edc5fdebe7aed154ab8aaa3a12bb5a3/algebraic_topology/simplex_category.lean#L67</a></p>",
        "id": 130876196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533357154
    },
    {
        "content": "<p>(Also, wrong stream? Or do you propose <code>mono</code> and <code>ac_mono</code> as \"new members\" of the community?)</p>",
        "id": 130876208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533357185
    },
    {
        "content": "<p><em>cough cough</em> of course they would be! They're just such awesome tactics :D</p>",
        "id": 130876506,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533357821
    },
    {
        "content": "<p>I'm not sure how they would help for those proofs though. I'm really targeting goals of the shape <code>x + y ≤ w + z</code> for some relation <code>≤</code>.</p>",
        "id": 130876631,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533358043
    },
    {
        "content": "<p>Ok, I see. Well, maybe at some point <code>cooper</code> will turn my proofs into a 1-liner.</p>",
        "id": 130877226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533359395
    },
    {
        "content": "<p>Isn't <code>cooper</code> mostly about integer arithmetic?</p>",
        "id": 130877412,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533359873
    },
    {
        "content": "<p>It is, but I think so are my proofs.</p>",
        "id": 130877614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533360315
    },
    {
        "content": "<p>Ok, I squinted at them and started to see integers. I wonder if <code>fin</code> will make it harder. Does Presburger arithmetic include modulo?</p>",
        "id": 130877706,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533360522
    },
    {
        "content": "<p>modulo by constants yes</p>",
        "id": 130877768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533360707
    },
    {
        "content": "<p>There is no modular arithmetic in my code. <code>fin</code> should just unpack to some inequalities, and <code>cooper</code> should be able to deal with those...</p>",
        "id": 130887896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533382221
    }
]