[
    {
        "content": "<p>How can I resolve this goal?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal_ordinal</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">expectation</span> <span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"o\">:=</span>\n<span class=\"err\">∑&#39;</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">pr</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n\n\n<span class=\"n\">def</span> <span class=\"n\">real_of_bool</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">bernoulli_expectation</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expectation</span> <span class=\"o\">(</span><span class=\"n\">pmf</span><span class=\"bp\">.</span><span class=\"n\">bernoulli</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">real_of_bool</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">expectation</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">pmf</span><span class=\"bp\">.</span><span class=\"n\">bernoulli</span><span class=\"o\">,</span>\n<span class=\"c1\">-- p: nnreal</span>\n<span class=\"c1\">-- h: p ≤ 1</span>\n<span class=\"c1\">-- ⊢ (∑&#39; (a : bool), ↑(⇑(pmf.of_fintype (λ (b : bool), cond b p (1 - p)) _) a) * real_of_bool a) = ↑p</span>\n<span class=\"n\">unfold</span> <span class=\"n\">tsum</span><span class=\"o\">,</span>\n<span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n<span class=\"c1\">-- 2 goals</span>\n<span class=\"c1\">-- p: nnreal</span>\n<span class=\"c1\">-- h: p ≤ 1</span>\n<span class=\"c1\">-- h_1: summable (λ (a : bool), ↑(⇑(pmf.of_fintype (λ (b : bool), cond b p (1 - p)) _) a) * real_of_bool a)</span>\n<span class=\"c1\">-- ⊢ classical.some h_1 = ↑p</span>\n<span class=\"c1\">-- p: nnreal</span>\n<span class=\"c1\">-- h: p ≤ 1</span>\n<span class=\"c1\">-- h_1: ¬summable (λ (a : bool), ↑(⇑(pmf.of_fintype (λ (b : bool), cond b p (1 - p)) _) a) * real_of_bool a)</span>\n<span class=\"c1\">-- ⊢ 0 = ↑p</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207714153,
        "sender_full_name": "Iocta",
        "timestamp": 1598084643
    },
    {
        "content": "<p>you would benefit from my advice \"stop unfolding!\"</p>",
        "id": 207715217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598086864
    },
    {
        "content": "<p>(it does not apply to <code>expectation</code> or <code>pmf.bernoulli</code> because there are no theorems for them)</p>",
        "id": 207715408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598087241
    },
    {
        "content": "<p>I used <code>unfold tsum</code> because I couldn't see what else to do :-)</p>",
        "id": 207715556,
        "sender_full_name": "Iocta",
        "timestamp": 1598087478
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal_ordinal</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- we prefer unicode</span>\n<span class=\"n\">def</span> <span class=\"n\">expectation</span> <span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"err\">∑&#39;</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">pr</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- use `cond`</span>\n<span class=\"n\">def</span> <span class=\"n\">real_of_bool</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bernoulli_expectation</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">expectation</span> <span class=\"o\">(</span><span class=\"n\">pmf</span><span class=\"bp\">.</span><span class=\"n\">bernoulli</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">real_of_bool</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">expectation</span> <span class=\"n\">pmf</span><span class=\"bp\">.</span><span class=\"n\">bernoulli</span> <span class=\"n\">real_of_bool</span> <span class=\"n\">pmf</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span><span class=\"o\">,</span> <span class=\"c1\">-- unfold things without API</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsum_fintype</span><span class=\"o\">,</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">sum_bool</span><span class=\"o\">],</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207715562,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598087517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> ask yourself: how can I remove the noise to reveal the essence of the next step? Then you would know that taking the tsum of a fintype should be the same as the sum over the fintype</p>",
        "id": 207715608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598087556
    },
    {
        "content": "<p>What made you think to go straight to the <code>fintype</code> api?</p>",
        "id": 207715881,
        "sender_full_name": "Iocta",
        "timestamp": 1598088095
    },
    {
        "content": "<p>(instead of sum-related stuff, or bool stuff, or pmf stuff or measure stuff)</p>",
        "id": 207716004,
        "sender_full_name": "Iocta",
        "timestamp": 1598088320
    },
    {
        "content": "<p>I don't really know how to answer that question</p>",
        "id": 207716137,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088602
    },
    {
        "content": "<p>perhaps <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> could help</p>",
        "id": 207716160,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088606
    },
    {
        "content": "<p>Let me read the question (-;</p>",
        "id": 207716166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598088630
    },
    {
        "content": "<p>I mean, \"my intuition told me so\" is neither helpful nor valid: intuition just means something you can't explain</p>",
        "id": 207716167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> what's the first thing that comes to mind when you see the goal <code>(∑' (a : bool), ↑(⇑⟨λ (b : bool), cond b p (1 - p), _⟩ a) * cond a 1 0) = ↑p</code>?</p>",
        "id": 207716175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088665
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"err\">∑&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"bp\">⟨λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"bp\">_⟩</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">cond</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">p</span>\n</code></pre></div>",
        "id": 207716180,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088677
    },
    {
        "content": "<p>That <code>tsum</code> is aweful</p>",
        "id": 207716182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598088689
    },
    {
        "content": "<p>see we have the same intuition</p>",
        "id": 207716187,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088698
    },
    {
        "content": "<p>But yes, turning that into a <code>finset.sum</code> is a great start</p>",
        "id": 207716189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598088701
    },
    {
        "content": "<p>but how can you explain it?</p>",
        "id": 207716190,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088703
    },
    {
        "content": "<p>it's like Magnus Carlsen explaining his move because it \"felt intuitive\"</p>",
        "id": 207716191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088719
    },
    {
        "content": "<p>sure, it works for him, but it doesn't explain anything</p>",
        "id": 207716230,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088726
    },
    {
        "content": "<p>Well, it's an infinite sum, which means you have to care about convergence etc...</p>",
        "id": 207716231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598088731
    },
    {
        "content": "<p>So if you sum over a finite type, then certainly you don't want to care about that</p>",
        "id": 207716234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598088750
    },
    {
        "content": "<p>the way it works for me, I see the infinite sum, I think to myself, oh that's \"just\" a finite sum</p>",
        "id": 207716237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088765
    },
    {
        "content": "<p>so why not rewrite it as a finite sum</p>",
        "id": 207716241,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088770
    },
    {
        "content": "<p>my intuition tells me that tsum is something I know nothing about and sum is something I know more about</p>",
        "id": 207716251,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088821
    },
    {
        "content": "<p>so it's I guess the same mentality as \"unfolding definitions\"</p>",
        "id": 207716284,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088842
    },
    {
        "content": "<p>but not using <code>unfold</code></p>",
        "id": 207716296,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088846
    },
    {
        "content": "<p>because mathematical definition is not the same as Lean definition</p>",
        "id": 207716299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088864
    },
    {
        "content": "<p>in Lean one object has one definition (Kevin would call this implementation)</p>",
        "id": 207716302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088874
    },
    {
        "content": "<p>in math one object can have 37 definitions</p>",
        "id": 207716306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088884
    },
    {
        "content": "<p>using the appropriate API to me feels like choosing the right definition to unfold</p>",
        "id": 207716312,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> I hope this is more helpful than \"well my intuition told me so\"</p>",
        "id": 207716316,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598088919
    },
    {
        "content": "<p>Yes, it is. Similar to replacing <code>ite</code> with <code>cond</code></p>",
        "id": 207716391,
        "sender_full_name": "Iocta",
        "timestamp": 1598089035
    },
    {
        "content": "<p>oh that one</p>",
        "id": 207716408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598089076
    },
    {
        "content": "<p><code>if</code> is for Prop</p>",
        "id": 207716451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598089087
    },
    {
        "content": "<p>no need to convert it to Prop if there is a version for bool</p>",
        "id": 207716454,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598089106
    },
    {
        "content": "<p>switching to a less powerful tool without losing info</p>",
        "id": 207716467,
        "sender_full_name": "Iocta",
        "timestamp": 1598089145
    },
    {
        "content": "<p>it isn't less powerful</p>",
        "id": 207716470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598089159
    },
    {
        "content": "<p>well, possibly-infinite -&gt; finite, arbitrary prop -&gt; bool</p>",
        "id": 207716475,
        "sender_full_name": "Iocta",
        "timestamp": 1598089188
    },
    {
        "content": "<p>fair enough</p>",
        "id": 207716517,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598089214
    },
    {
        "content": "<p>What is this error about?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal_ordinal</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">expectation</span> <span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"err\">∑&#39;</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">pr</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">binomial_pmf</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"bp\">⟩</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_choose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">binomial_expectation</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">expectation</span> <span class=\"o\">(</span><span class=\"n\">binomial_pmf</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">coe</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">expectation</span> <span class=\"n\">binomial_pmf</span> <span class=\"n\">pmf</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span><span class=\"o\">,</span>\n<span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">∑&#39;</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"c1\">--p: nnreal</span>\n<span class=\"c1\">--h: p ≤ 1</span>\n<span class=\"c1\">--n: ℕ</span>\n<span class=\"c1\">--this: (∑&#39; (k : ℕ), ↑(n.choose k) * p ^ k * (1 - p) ^ (n - k) * ↑k) = ↑n * p</span>\n<span class=\"c1\">--⊢ (∑&#39; (a : ℕ), ↑(⇑⟨λ (k : ℕ), ↑(n.choose k) * p ^ k * (1 - p) ^ (n - k), _⟩ a) * ↑a) = ↑n * ↑p</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"err\">∑&#39;</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">∑&#39;</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∑&#39;</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∑&#39;</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∑&#39;</span> <span class=\"n\">j</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   ∑&#39; (H : j ∈ finset.range (n - 1)), ↑((n - 1).choose j) * p ^ j * (1 - p) ^ (n - 1 - j)</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   λ (H : j ∈ finset.range (n - 1)), ↑((n - 1).choose j) * p ^ j * (1 - p) ^ (n - 1 - j)</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   j ∈ finset.range (n - 1) → nnreal : Type</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ?m_1 → nnreal : Type ?</span>\n<span class=\"c1\">-- state:</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207742076,
        "sender_full_name": "Iocta",
        "timestamp": 1598130203
    },
    {
        "content": "<p>Also, how do I fill that first <code>sorry</code> (the <code>suffices</code> one)?</p>",
        "id": 207742129,
        "sender_full_name": "Iocta",
        "timestamp": 1598130252
    },
    {
        "content": "<p>... of course maybe my <code>suffices</code> statement is wrong :-)</p>",
        "id": 207742673,
        "sender_full_name": "Iocta",
        "timestamp": 1598131197
    },
    {
        "content": "<p>I don't know much about probability, but your <code>mul_choose</code> is definitely wrong -- if ever you use natural subtraction you can be pretty sure that something is wrong, because natural subtraction is a pathological function.</p>",
        "id": 207742833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598131485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Do you think I should try to reformulate <code>binomial_pmf</code> to not mention <code>n - k</code>?</p>",
        "id": 207743473,
        "sender_full_name": "Iocta",
        "timestamp": 1598132880
    },
    {
        "content": "<p>n-k is fine if you know k&lt;=n. But you don't know this in mul_choose</p>",
        "id": 207743514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598132902
    },
    {
        "content": "<p>I mean, you don't know k&gt;=1 so you'll be in trouble with k-1 if k=0</p>",
        "id": 207743518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598132949
    },
    {
        "content": "<p>So do I want to just add an <code>(h: k &gt;= 1)</code> or try to build the &gt;=1 into the terms some other way?</p>",
        "id": 207743735,
        "sender_full_name": "Iocta",
        "timestamp": 1598133426
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mul_choose</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>getting rid of <code>n</code> doesn't seem to help</p>",
        "id": 207743737,
        "sender_full_name": "Iocta",
        "timestamp": 1598133458
    },
    {
        "content": "<p>(still need the hypothesis)</p>",
        "id": 207743776,
        "sender_full_name": "Iocta",
        "timestamp": 1598133496
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mul_choose</span> <span class=\"o\">(</span><span class=\"n\">w_minus_1</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">w_minus_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">w_minus_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">w_minus_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">w_minus_1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">w_minus_1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">w_minus_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>¯\\_(ツ)_/¯</p>",
        "id": 207743914,
        "sender_full_name": "Iocta",
        "timestamp": 1598133789
    },
    {
        "content": "<p>All I'm saying was that your lemma as it stood was false because k=0 gave counterexamples. What you should do instead is entirely up to you but for sure you can't use a false lemma.</p>",
        "id": 207743966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598133863
    },
    {
        "content": "<p>And the reason I took one look at it and suspected it might be false was that it used unsafe natural subtraction, subtracting one from things which hadn't been assumed to be &gt;= 1.</p>",
        "id": 207743984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598133915
    },
    {
        "content": "<p>Sure that makes sense</p>",
        "id": 207744033,
        "sender_full_name": "Iocta",
        "timestamp": 1598133975
    },
    {
        "content": "<p>I think your error is because you're just not using the <code>∑'</code> syntax correctly. I've never used <code>∑'</code> before but you seem to have <code>∑' (k : nat)</code> and <code>∑' k \\in (some finset)</code> which doesn't bode well. What is the syntax of <code>∑'</code>?</p>",
        "id": 207744337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598134614
    },
    {
        "content": "<p>I've used it above in the expectation definition <code>∑' a : α, pr a * f a</code> and I agree that's different from here with the <code>\\in</code>.</p>",
        "id": 207744883,
        "sender_full_name": "Iocta",
        "timestamp": 1598135489
    },
    {
        "content": "<p>So what I mean is <code>(∑ j in (finset.range (n - 1)), _</code></p>",
        "id": 207744946,
        "sender_full_name": "Iocta",
        "timestamp": 1598135633
    },
    {
        "content": "<p>or so I thought from <a href=\"https://github.com/leanprover-community/mathlib/blob/abe4459/src/algebra/big_operators/basic.lean#L24\">here</a> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"kn\">notation</span> <span class=\"n\">for</span> <span class=\"bp\">`</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">assuming</span> <span class=\"bp\">`</span><span class=\"n\">β</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"bp\">`</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">`</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>but </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"o\">((</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}),</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>doesn't even parse</p>",
        "id": 207745198,
        "sender_full_name": "Iocta",
        "timestamp": 1598136099
    },
    {
        "content": "<p>This works for me and the result is <code>10</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"o\">((</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}),</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"c1\">-- 10</span>\n</code></pre></div>",
        "id": 207745956,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598137604
    },
    {
        "content": "<p>Do you have the correct imports?</p>",
        "id": 207745961,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598137635
    },
    {
        "content": "<p>Which imports do you have?</p>",
        "id": 207745964,
        "sender_full_name": "Iocta",
        "timestamp": 1598137665
    },
    {
        "content": "<p>Make sure you have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n</code></pre></div>\n\n\n<p>to include the notation.</p>",
        "id": 207746002,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598137692
    },
    {
        "content": "<p>I have all of these in a file for a different purpose, but you probably don't need the first two:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n</code></pre></div>",
        "id": 207746010,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1598137736
    },
    {
        "content": "<p>Ah, that's the trick</p>",
        "id": 207746016,
        "sender_full_name": "Iocta",
        "timestamp": 1598137755
    },
    {
        "content": "<p>What's the notation for <code>(α × β)</code> but with countable elements? Is that <code>def myprod (t : ℕ → Type u) : Π (n: nat), t n := _</code>?</p>",
        "id": 207788663,
        "sender_full_name": "Iocta",
        "timestamp": 1598212635
    }
]