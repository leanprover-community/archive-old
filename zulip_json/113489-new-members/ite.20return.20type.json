[
    {
        "content": "<p>I accidentally discovered that the type of a function can be an <code>if ... then ... else ...</code> expression. Is there some reason why we don't use this all the time? To me it looks like this <code>ite</code> return type (as seen in <code>f₁</code>) is more expressive than a function of type <code>ℕ → ℕ ⊕ ℤ</code> (as show in <code>f₂</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">⊕</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sum.inl</span> <span class=\"mi\">4</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sum.inr</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 213581458,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1602865059
    },
    {
        "content": "<p>It is more expressive, but quickly it becomes more annoying to work with because you have to carry around proofs everywhere. For example, you can try defining <code>f₂ : ℕ -&gt; ℤ</code> as <code>f₂ n = f₁ (n + 1)</code>.</p>",
        "id": 213584324,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1602866498
    },
    {
        "content": "<p>I still have hope that one day there will be a smart enough system that <code>ite (n = 0) ℕ ℤ</code> is a useful type, but Lean isn't it yet.</p>",
        "id": 213584612,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1602866660
    },
    {
        "content": "<p>This is basically a dependent type, like <code>vector A n</code></p>",
        "id": 213587014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602867870
    },
    {
        "content": "<p>they have the danger that you can't rewrite in the dependent argument</p>",
        "id": 213587045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602867889
    },
    {
        "content": "<p>It's not really \"more expressive\" as long as the function body itself is \"white boxed\" (as definitions are in lean unless they are <code>[irreducible]</code>). Note that you can define <code>f_1</code> using <code>f_2</code> by cases</p>",
        "id": 213587269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602867996
    },
    {
        "content": "<p>i.e. you can prove that <code>f_2</code> has the same behavior as <code>f_1</code></p>",
        "id": 213587304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602868022
    },
    {
        "content": "<p>Thanks to both of you. Your answers have given me more to thing about <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 213718503,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1603045305
    }
]