[
    {
        "content": "<p>Say I have some function <code>def foo (x : nat) : nat := 2 * x</code> and later have some goal <code>foo x &gt;= x</code>. Is there a oneliner that rewrites this to <code>2 * x &gt;= x</code>? This is a very noob question, but I appear to have doc blindness tonight because I can't find it!</p>\n<p>I know how to do it by introducing it as a hypothesis with <code>have</code> and then proving it by <code>refl</code>, but I need a version that doesn't require me to write out the function definition inline in the hypothesis because that's incredibly messy.</p>\n<p>It's probably some version of <code>rw</code> that I'm just being blind to!</p>",
        "id": 254955474,
        "sender_full_name": "Sam",
        "timestamp": 1632684560
    },
    {
        "content": "<p>If you actually used <code>def</code>, then <code>foo</code> comes with a so-called equational lemma also called <code>foo</code> that will let you rewrite <code>foo x</code> to <code>2 * x</code>. If you rather used <code>let</code>, you're doomed and I would recommend switching to using <code>set</code>.</p>",
        "id": 254955642,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1632684718
    },
    {
        "content": "<p>Oh no. The equational lemma works. I swear that was the first thing I tried before spending 20 minutes searching for something else... I must have done something stupid and convinced myself that the obvious thing doesn't work when it actually does. Sorry for the stupid question! All solved now.  I'm an idiot. Thanks.</p>\n<p>Time for bed I think!</p>",
        "id": 254955952,
        "sender_full_name": "Sam",
        "timestamp": 1632684982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"428422\">Sam</span> has marked this topic as resolved.</p>",
        "id": 254956111,
        "sender_full_name": "Notification Bot",
        "timestamp": 1632685147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"428422\">@Sam</span> if you make a definition then it's your job to make the API for the definition too. So directly afterwards you could prove <code>lemma foo_def {x} : foo x = 2 * x := rfl</code> and then you can rewrite that. Every definition has a cost because it adds one more layer of complexity.</p>",
        "id": 254963604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632691832
    },
    {
        "content": "<p>I was told not to make <code>foo_def</code> in one of my PRs since, as Yael said, you can simply use <code>rw [foo]</code></p>",
        "id": 254964655,
        "sender_full_name": "Jason KY.",
        "timestamp": 1632692877
    },
    {
        "content": "<p>Often we only need need a <code>foo_def</code> if <code>foo</code> was defined by a complicated induction (e.g. a with a <code>using_well_founded</code> or <code>mutual</code>).</p>",
        "id": 254967439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632695313
    },
    {
        "content": "<p>Another exception to the rule is when an instance is involved, with lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.add_def\">docs#pi.add_def</a></p>",
        "id": 255000667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632724981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Rewriting.20function.20calls.20with.20their.20definition/near/254964655\">said</a>:</p>\n<blockquote>\n<p>I was told not to make <code>foo_def</code> in one of my PRs since, as Yael said, you can simply use <code>rw [foo]</code></p>\n</blockquote>\n<p>That lemma costs nothing to make and is easier for beginners to find.</p>\n<p>Independent of that, another time I've seen a <code>foo_def</code> which is not covered by \"an instance is involved\" or \"a complicated induction\" is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_def\">docs#continuous_def</a> . Here we just want a rewritable statement for something which has been bundled.</p>",
        "id": 255019570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632735489
    },
    {
        "content": "<p>As an aside, <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#mk_iff\">attr#mk_iff</a> can actually generate lemmas like <code>continuous_def</code> which just unbundle / rebundle a structure</p>",
        "id": 255019906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632735693
    }
]