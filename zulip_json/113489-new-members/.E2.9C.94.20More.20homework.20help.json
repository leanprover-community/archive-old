[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462625\">Jeremy Teitelbaum</span> has marked this topic as resolved.</p>",
        "id": 264570561,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639239536
    },
    {
        "content": "<p>FYI, I updated the <code>itauto</code> tactic in <a href=\"https://github.com/leanprover-community/mathlib/pull/10744\">#10744</a> so that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">itauto</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">itauto</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 264647525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639348384
    },
    {
        "content": "<p>is <code>itauto!</code> just a strictly better <code>tauto!</code> now?</p>",
        "id": 264648430,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639349808
    },
    {
        "content": "<p>I believe so. <code>tauto</code> works on some heuristic instantiation stuff so it might be able to do some problems that aren't technically propositional logic, like <code>A -&gt; (A -&gt; B) -&gt; B</code> where <code>A</code> and <code>B</code> are types</p>",
        "id": 264648755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639350165
    }
]