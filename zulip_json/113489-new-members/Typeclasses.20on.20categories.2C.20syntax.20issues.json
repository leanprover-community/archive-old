[
    {
        "content": "<p>Hi,</p>\n<p>I'm trying to build up the definition of a model category via some weaker structures, but trying to compose typeclasses here I'm hitting a syntax error I don't understand, and I suspect I've made an elementary mistake. My file is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.fully_faithful</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory.model</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">subcategory</span> <span class=\"o\">(</span><span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inc_faithful</span><span class=\"o\">:</span> <span class=\"n\">faithful</span> <span class=\"n\">inc</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">relative_category</span> <span class=\"o\">(</span><span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"o\">(</span><span class=\"n\">subcategory</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inc_wide</span><span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">inc.obj</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory.model</span>\n</code></pre></div>\n\n<p>But lean doesn't seem to like <code>extends (subcategory D)</code> - I get the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">subcategory</span> <span class=\"n\">D</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">],</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>What do I have wrong here? I should probably ask this too: what's the \"Π\" that I often see appearing in type expressions?</p>",
        "id": 214429732,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1603548367
    },
    {
        "content": "<p>If you hover over <code>subcategory</code> you'll see it has type <code>Π (C : Type u) [_inst_1 : category C] (D : Type u) [_inst_2 : category D], Type (max u v)</code>.  Pi is just \"for all\", if you like. <code>subcategory</code> is expecting four inputs here, namely C, the structure of a category on C, and then D and the structure of a category on D. Two are in square brackets, meaning that those inputs will be supplied by Lean's type class system. But the other two are in round brackets which means that the user is expected to supply them. In particular <code>subcategory D</code> is still a function -- it's expecting another input. You probably want <code>subcategory C D</code>, although looking at other subthings like <code>subring</code> it seems that you might want to take a different approach and make D a field of the class rather than an input (I am not very good with classes, all I know is that there are lots of pitfalls).</p>",
        "id": 214429988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603548730
    },
    {
        "content": "<p>What's going on with the Pi is that Lean has something called \"dependent functions\", which are functions from a type X to...well, the type of the output depends on the term being input! Here's an example very familiar to mathematicians. If we have infinitely many true-false statements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">P(2)\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span> and we want to construct proofs of them all, then we need a function which takes as input a natural <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and spits out a proof of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>. If you think about it, this is slightly weirder than a function, because in Lean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> is a type, and a proof of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> is a term of that type, so the proof function takes as input <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and spits out a term whose type depends on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, so it's difficult to imagine it as a traditional function from the naturals to some fixed type -- there is no \"type of all proofs of all propositions\" for the same sort of reason that there's no set of all sets. The function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> itself (the statements of the theorems) is just a regular function from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> to <code>Prop</code>, but the proof function is not a function in a traditional sense, it's a term of the Pi type <code> Π (n : nat), P n</code>, or, as a mathematician would usually write, a proof of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mo separator=\"true\">,</mo><mi>P</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\forall n\\in\\mathbb{N}, P(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 214430170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603549010
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#dependent-types\">Theorem Proving In Lean</a> provides a more computer-science-focussed explanation of Pi types in section 2.8.</p>",
        "id": 214430256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603549149
    },
    {
        "content": "<p>Everything Kevin said is of course important, but another way to look at this in this particular case is that, a priori, <code>D</code> has nothing to do with <code>C</code>, so you need to tell lean explicitly that <code>D</code> is a subcategory of <code>C</code>, i.e. you would have to write <code>subcategory C D</code>. The actual reason, coming from lean syntax, is that you wrote <code>variables (C: Type u) [category.{v} C]</code>, and <code>C</code> appears in the definition of <code>subcategory</code>, so lean automatically makes <code>C</code> an explicit variable in the declaration of <code>subcategory</code>.</p>",
        "id": 214430501,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603549556
    },
    {
        "content": "<p>I also realise that I probably can make a type of all proofs of all propositions -- it's <code>Π (P : Prop), P</code> :-)</p>",
        "id": 214430562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603549617
    },
    {
        "content": "<p>That's a good empty type :)</p>",
        "id": 214430570,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603549640
    },
    {
        "content": "<p>oh yeah, it seems to say that every proposition is true :-)</p>",
        "id": 214430625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603549685
    },
    {
        "content": "<p>BTW, I think this is one instance where it makes sense to define a subcategory as a category with a faithful functor, as opposed to, say, something analogous to bundled subrings (which are defined as a subset of the ring with some conditions), essentially due to the equivalence principle in category theory ( <a href=\"https://ncatlab.org/nlab/show/principle+of+equivalence\">https://ncatlab.org/nlab/show/principle+of+equivalence</a> )</p>",
        "id": 214430667,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603549773
    },
    {
        "content": "<p>and Lean doesn't buy <code>Σ (P : Prop), P</code></p>",
        "id": 214430670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603549777
    },
    {
        "content": "<p>Oh, and one more comment, since <code>faithful</code> is a class, it makes sense to define subcategory using the following syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">subcategory</span> <span class=\"o\">(</span><span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">faithful</span> <span class=\"n\">inc</span><span class=\"o\">]</span>\n</code></pre></div>\n\n<p>This way lean would go and try to find a <code>faithful</code> instance for <code>inc</code> using typeclass search, instead of requiring the user to manually tell lean what the instance is.</p>",
        "id": 214430763,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603549872
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">plift</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214430825,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603549979
    },
    {
        "content": "<p>This doesn't: <code>example : Σ (P : Prop), plift P := ⟨true, trivial⟩</code></p>",
        "id": 214430893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603550058
    },
    {
        "content": "<p>got it -- <code>example : Σ (P : Prop), plift P := ⟨true, plift.up trivial⟩</code></p>",
        "id": 214430916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603550110
    },
    {
        "content": "<p>Yeah. it's the plift thing</p>",
        "id": 214430932,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603550144
    },
    {
        "content": "<p>Saul is a homotopy theorist, so you can just tell him that a dependent function is a section of a fibration :)</p>",
        "id": 214431338,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603550710
    },
    {
        "content": "<p>Since weak equivalences form a <em>wide</em> subcategory, and the basic operation is asking whether a morphism of the ambient category is a weak equivalence, I think it's better not to use this equivalence-invariant approach and just use some variation on <code>\\Pi {X Y : C} (f : X --&gt; Y), Prop</code>.</p>",
        "id": 214433790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603553907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348873\">@Saul Glasman</span> You should take a look at <a href=\"https://github.com/rwbarton/lean-homotopy-theory\">https://github.com/rwbarton/lean-homotopy-theory</a> and <a href=\"https://github.com/rwbarton/lean-model-categories/tree/top-dev\">https://github.com/rwbarton/lean-model-categories/tree/top-dev</a> (note: this one is a non-master branch).</p>",
        "id": 214433822,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603553970
    },
    {
        "content": "<p>Oh right, this is for defining a model structure. There is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.arrow\">docs#category_theory.arrow</a> which you can use instead of the Pi type that Reid mentioned</p>",
        "id": 214433986,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603554171
    },
    {
        "content": "<p>I.e. you can use <code>set (arrow C)</code></p>",
        "id": 214434053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603554267
    },
    {
        "content": "<p>I think I also started with a similar approach using <code>extends</code> but a problem is that as soon as you add a second class of morphisms (like cofibrations) you need a way to distinguish whether you're talking about the weak equivalences subcategory or the cofibrations subcategory.</p>",
        "id": 214434074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603554296
    },
    {
        "content": "<p>I think using <code>arrow</code> will get awkward pretty quickly because Lean is bad at unification problems like \"what's <code>a : arrow C</code> with <code>a.hom = f</code>\".</p>",
        "id": 214434181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603554463
    },
    {
        "content": "<p>It's more practical to just make all the objects involved into implicit arguments--I edited my original message to reflect this.</p>",
        "id": 214434239,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603554514
    },
    {
        "content": "<p>Sometimes (like in this case) I wish categories were defined as categories internal to types, where the type of all arrows is a first class citizen like the type of objects.</p>",
        "id": 214434629,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603555050
    },
    {
        "content": "<p>The downside is that it's not as convenient to take the intersection of two wide subcategories, but (a) that's not something that happens very often, (b) even if you get to reuse the intersection of <code>set</code>s, you still need to prove it is closed under composition, say, so there's more work that needs to happen anyways</p>",
        "id": 214434695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603555108
    },
    {
        "content": "<p>Thanks everyone!</p>",
        "id": 214437103,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1603558127
    },
    {
        "content": "<p>Reid, I didn't know that you had worked on model categories - I'll take a look at your approach</p>",
        "id": 214437112,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1603558139
    },
    {
        "content": "<p>I think I still don't know how to read <code>Π (D : Type u) [_inst_2 : category D], Type (max u v)</code>, which is supposed to be the type of <code>subcategory D</code>. Does it mean \"for each type <code>D</code> and (implicit) category structure on <code>D</code>, a type\"? Shouldn't <code>D</code> be fixed here?</p>",
        "id": 214437390,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1603558432
    },
    {
        "content": "<p>I can translate your Lean code back into math:<br>\nLet <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> be a category.<br>\nDefinition. A <em><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>-subcategory structure</em> on a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> consists of a faithful functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>:</mo><mi>D</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">i : D \\to C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>.<br>\nDefinition. A <em>relative category</em> is a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> equipped with a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>-subcategory structure such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is surjective on objects.</p>",
        "id": 214438501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603559623
    },
    {
        "content": "<p>You'll note that something is missing in the second definition: a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>-subcategory structure on what?</p>",
        "id": 214438557,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603559662
    },
    {
        "content": "<p>The error is saying that <code>subcategory D</code> expected more arguments, this missing other category (which, as a result of the chosen variable names, Lean is also calling <code>D</code>).</p>",
        "id": 214438572,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603559698
    },
    {
        "content": "<p>So there are actually two different <code>D</code>s?</p>",
        "id": 214440752,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1603562513
    },
    {
        "content": "<p>Reid is just saying that in the definition of relative category which you posted, no C is mentioned, so there must be something wrong.</p>",
        "id": 214440830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603562585
    },
    {
        "content": "<p>If you want to go with the faithful functor route without having to specify both <code>C</code>and <code>D</code> you could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subcategory</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">faithful</span> <span class=\"n\">inc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 214441231,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603563060
    },
    {
        "content": "<p>I realize now my English translation is ambiguous in the phrase \"a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> equipped with a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>-subcategory structure\" which could be interpreted as \"a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> equipped with a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>-subcategory structure <em>on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span></em>\".</p>",
        "id": 214441308,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563130
    },
    {
        "content": "<p>But, that's not the right notion anyways. There needs to be a second category at some point, which is going to play the role of the subcategory of weak equivalences.</p>",
        "id": 214441514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> , I did one of the \"todo\"s in your model categories repo as an exercise (retracts of weak equivalences in a model category are weak equivalences) - wonder if you would be willing to accept a PR/give feedback?</p>",
        "id": 216013017,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1604851798
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"348873\">@Saul Glasman</span>, very cool! As you probably noticed, the model categories repository has been dormant for a long time, but please do submit a PR!</p>",
        "id": 216076425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604924391
    },
    {
        "content": "<p>At this point the model category repository is so old that, moving forward, it would probably be better to start from scratch.</p>",
        "id": 216076741,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604924590
    },
    {
        "content": "<p>Done! <a href=\"https://github.com/rwbarton/lean-model-categories/pull/1/files\">https://github.com/rwbarton/lean-model-categories/pull/1/files</a></p>",
        "id": 216296196,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1605056689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Typeclasses.20on.20categories.2C.20syntax.20issues/near/216076741\">said</a>:</p>\n<blockquote>\n<p>At this point the model category repository is so old that, moving forward, it would probably be better to start from scratch.</p>\n</blockquote>\n<p>Yeah, I noticed that if I updated the mathlib dependency to current in the model categories repo, things failed fairly dramatically...</p>",
        "id": 216296323,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1605056786
    }
]