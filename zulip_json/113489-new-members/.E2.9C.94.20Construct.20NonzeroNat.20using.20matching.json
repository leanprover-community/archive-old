[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NonZeroNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">raw</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">raw</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fromRaw</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Option</span> <span class=\"n\">NonZeroNat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">raw</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">{</span>\n    <span class=\"n\">raw</span><span class=\"o\">,</span>\n    <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"o\">:</span> <span class=\"n\">NonZeroNat</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>Hi, everyone. I would like to prove raw != 0 in the place of sorry. But I'm confused about how to do it conveniently. Thanks a lot!</p>",
        "id": 299062982,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1663281656
    },
    {
        "content": "<p>the easiest way is to match <code>| raw+1 =&gt;</code> instead</p>",
        "id": 299063942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663282202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Construct.20NonzeroNat.20using.20matching/near/299063942\">said</a>:</p>\n<blockquote>\n<p>the easiest way is to match <code>| raw+1 =&gt;</code> instead</p>\n</blockquote>\n<p>Thanks a lot!<br>\nBut I'm curious about what to do for chars. The below is what motivates this. I am trying to prove the lexing is correct.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ValidChar</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">!=</span> <span class=\"sc\">' '</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SimpleToken</span> <span class=\"n\">where</span>\n  <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ValidChar</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">SimpleToken</span>\n<span class=\"kd\">def</span> <span class=\"n\">toChars</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">SimpleToken</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n  <span class=\"n\">t.value.map</span> <span class=\"k\">fun</span> <span class=\"n\">vc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">vc.c</span>\n<span class=\"kd\">end</span> <span class=\"n\">SimpleToken</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">writeCode</span> <span class=\"o\">(</span><span class=\"n\">tokens</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">SimpleToken</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[</span><span class=\"sc\">' '</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"o\">(</span><span class=\"n\">tokens.map</span> <span class=\"k\">fun</span> <span class=\"n\">token</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">token.toChars</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseCodeAux</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">ValidChar</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">SimpleToken</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">pref</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[{</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">pref</span> <span class=\"o\">:</span> <span class=\"n\">SimpleToken</span> <span class=\"o\">}]</span>\n  <span class=\"bp\">|</span> <span class=\"sc\">' '</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">pref</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[{</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">pref</span> <span class=\"o\">:</span> <span class=\"n\">SimpleToken</span> <span class=\"o\">}]</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">parseCodeAux</span> <span class=\"n\">as</span> <span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">,</span> <span class=\"n\">pref</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">parseCodeAux</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">pref.concat</span> <span class=\"o\">{</span>\n    <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"o\">:</span><span class=\"n\">ValidChar</span>\n  <span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parseCode</span> <span class=\"o\">(</span><span class=\"n\">chars</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">SimpleToken</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">parsing_is_correct</span> <span class=\"o\">(</span><span class=\"n\">tokens</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">SimpleToken</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parseCode</span> <span class=\"o\">(</span><span class=\"n\">writeCode</span> <span class=\"n\">tokens</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">tokens</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 299064887,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1663282707
    },
    {
        "content": "<p>you can do <code>if h : c = ' ' then ... else ...</code> instead of a pattern match</p>",
        "id": 299064939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663282739
    },
    {
        "content": "<p>thanks a lot!!!</p>",
        "id": 299064969,
        "sender_full_name": "Xiyu Zhai",
        "timestamp": 1663282756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466120\">Xiyu Zhai</span> has marked this topic as resolved.</p>",
        "id": 299064977,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663282761
    }
]