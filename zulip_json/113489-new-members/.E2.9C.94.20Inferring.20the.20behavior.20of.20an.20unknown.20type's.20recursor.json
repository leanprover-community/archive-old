[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Inferring.20the.20behavior.20of.20an.20unknown.20type's.20recursor/near/290529504\">said</a>:</p>\n<blockquote>\n<p>However, since <code>N.rec</code> is polymorphic, you should be able to prove a metatheorem (in the vein of Wadler's \"theorems for free\") showing that it has to behave like recursion on natural numbers, conditional on the assumption that the definition of <code>N</code> consists only of Lean terms.</p>\n</blockquote>\n<p>I've heard of \"theorems for free\" but haven't read it yet. Maybe a metatheorem holds if <code>N.rec</code> is computable.</p>",
        "id": 290610384,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1658577883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> interesting, thanks for the counterexample</p>",
        "id": 290610397,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1658577923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> has marked this topic as resolved.</p>",
        "id": 290610401,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658577929
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">N.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"n\">N.rec</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This <code>lem</code> doesn't include the assumptions <code>hz</code> and <code>hs</code> so it's too strong an assumption, but it doesn't matter since <code>hz</code> and <code>hs</code> are satisfied by <code>ℕ</code>, <code>0</code>, and <code>nat.succ</code>.</p>",
        "id": 290619803,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658591024
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Corrected proof</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">N.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)}</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">hz</span> <span class=\"n\">hs</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"n\">N.rec</span> <span class=\"n\">base</span> <span class=\"n\">step</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">base</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lem</span> <span class=\"n\">ℕ</span> <span class=\"mi\">0</span> <span class=\"n\">nat.succ</span> <span class=\"n\">nat.succ_ne_zero</span> <span class=\"bp\">@</span><span class=\"n\">nat.succ.inj</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">eq.mpr</span> <span class=\"n\">h</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n.rec_on</span> <span class=\"n\">z</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 290627081,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658601118
    }
]