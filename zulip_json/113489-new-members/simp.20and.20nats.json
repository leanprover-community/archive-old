[
    {
        "content": "<p>So it used to be that you could use simp and unfold to simplify expresions like \"succ n + (succ m * 2) ^ 2\" then type classes made it so you had to use unfold to get it to work, and now it just seems immposible and you have to use exposed lemmas, which seems really ..tedious? low level? Am I missing something like \"omega\" in coq?</p>",
        "id": 161479645,
        "sender_full_name": "Christopher Upshaw",
        "timestamp": 1553285474
    },
    {
        "content": "<p>Nah. You could get lucky and see if <code>linarith</code> will close your goal. Otherwise, port of Presburger arithmetic solver welcome.</p>",
        "id": 161480489,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1553286136
    },
    {
        "content": "<p>I don't think <code>omega</code> would handle this, because it involves multiplication. </p>\n<p>When you say \"simplify\", what would you like the simplified expression to look like?</p>",
        "id": 161480733,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553286361
    },
    {
        "content": "<p><code>ring</code> may well help</p>",
        "id": 161480816,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553286410
    },
    {
        "content": "<p>Is this the <code>omega</code> that <span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span> has been working on?</p>",
        "id": 161480830,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1553286422
    },
    {
        "content": "<p><code>omega</code> will unfold small multiplications up to some small number, like <code>10 * n = n + n + n + n + n + ...</code></p>",
        "id": 161480845,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1553286429
    },
    {
        "content": "<p>Whatever the OP wants to do, surely <code>ring</code> will do it.</p>",
        "id": 161480877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553286474
    },
    {
        "content": "<p>oh, right. you could add <a href=\"https://github.com/skbaek/omega\" target=\"_blank\" title=\"https://github.com/skbaek/omega\">https://github.com/skbaek/omega</a> to your leanpkg and see if it works</p>",
        "id": 161480933,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1553286485
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n</pre></div>\n\n\n<p><code>ring</code> apparently won't deal with <code>succ m</code> so we have to change it to <code>m + 1</code> first</p>",
        "id": 161481892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553287290
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 161492714,
        "sender_full_name": "Christopher Upshaw",
        "timestamp": 1553296450
    },
    {
        "content": "<p>How does one use ring? It doesn't seem to ever work.</p>",
        "id": 161492915,
        "sender_full_name": "Christopher Upshaw",
        "timestamp": 1553296697
    },
    {
        "content": "<p>If you are proving an equality involving <code>*</code> and <code>+</code> and <code>-</code> and powers then <code>ring</code> works</p>",
        "id": 161493335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553297067
    },
    {
        "content": "<p>if there is stuff like <code>nat.succ</code> or other domain specific things then you have to get rid of them first</p>",
        "id": 161493395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553297105
    },
    {
        "content": "<p>I think we could afford to add support specifically for <code>nat.succ</code> because it comes up so often.</p>",
        "id": 161505750,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553313860
    },
    {
        "content": "<p>Ring proves equalities. <a href=\"https://xenaproject.wordpress.com/2018/06/13/ab3/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/06/13/ab3/\">https://xenaproject.wordpress.com/2018/06/13/ab3/</a></p>",
        "id": 161517004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553332909
    }
]