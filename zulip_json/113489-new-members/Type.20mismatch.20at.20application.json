[
    {
        "content": "<p>Here is my MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lucas_primality</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">p.prime</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">prime</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">d</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I've counted my parentheses a few times now. I don't understand how it is possible for the error mismatch to parse out the expression <code>prime d ∧ d</code> when the parentheses tell it not to read it that way. Why am I getting this error?</p>",
        "id": 250012407,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629391370
    },
    {
        "content": "<p>I expect you need to replace <code>|</code> by <code>\\|</code></p>",
        "id": 250012697,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629391502
    },
    {
        "content": "<p>Thank you</p>",
        "id": 250012792,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629391552
    },
    {
        "content": "<p>Also, I would like to respectfully register my disagreement with the design decision that <code>|</code> should be interpreted differently by lean from <code>\\|</code>.</p>",
        "id": 250013038,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629391680
    },
    {
        "content": "<p>this is a necessary evil because <code>|</code> is used as a keyword in a few positions, e.g. to separate the arms of a pattern matching definition or inductive type</p>",
        "id": 250013651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629391963
    },
    {
        "content": "<p>personally I would have gone for a visually more distinct symbol for divides like <code>∥</code></p>",
        "id": 250013751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629392013
    },
    {
        "content": "<p>That is a fair criticism. Unfortunately <code>|</code> has a few important built-in meanings in Lean, and it's hard (read: impossible without modifying the source code) to overload that notation to also mean divisibility.<br>\nThe same could be said about LaTeX, and at least the LaTeX input <code>\\mid</code> also gives this symbol in Lean.</p>",
        "id": 250013872,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629392049
    },
    {
        "content": "<p>although people routinely get it wrong in latex</p>",
        "id": 250013923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629392074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20mismatch.20at.20application/near/250012407\">said</a>:</p>\n<blockquote>\n<p>Here is my MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lucas_primality</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">p.prime</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">prime</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">d</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I've counted my parentheses a few times now. I don't understand how it is possible for the error mismatch to parse out the expression <code>prime d ∧ d</code> when the parentheses tell it not to read it that way. Why am I getting this error?</p>\n</blockquote>\n<p>I think lucas lehmer is done somewhere in mathlib as a verified algo, fwiw</p>",
        "id": 250041847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629403424
    },
    {
        "content": "<p>Not doing Lucas-Lehmer, which I understand is for Mersenne primes. I want to do the test linked <a href=\"https://en.wikipedia.org/wiki/Lucas_primality_test\">here</a></p>",
        "id": 250091309,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629448523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> Lucas Lehmer is already in mathlib. But I guess you already knew that.</p>",
        "id": 250113022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629463831
    }
]