[
    {
        "content": "<p>I am working through §2 of the mathematics in lean tutorial. I have tried this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">max_le</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_max_right</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_max_left</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but this does not work (the last apply h does not work). I see how to fix it by replacing the proof by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">max_le</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_max_right</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_max_left</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However, I don't understand why the first does not work, while the second does.<br>\nCan someone explain that?<br>\nAlso, is there a way to say \"have h ...\", prove it, and use this established fact twice?</p>",
        "id": 224375203,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611860295
    },
    {
        "content": "<p>The <code>have</code> only exists in the first goal when you write it after <code>le_antisymm</code></p>",
        "id": 224375509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611860405
    },
    {
        "content": "<p>the solution is to do the <code>have</code> before both of your goals, as in the second version. That also answers your second question: yes there is a way, you just did it</p>",
        "id": 224375693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611860470
    },
    {
        "content": "<p>What is the overarching rationale / logic behind this dependence of ordering? (Me old-fashioned guy thinking: in a paper proof it would not matter...)</p>",
        "id": 224376705,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611860887
    },
    {
        "content": "<p>It \"obviously\" doesn't matter where you prove <code>h</code> here because the hypotheses are the same for both goals, but if you did something like a case analysis, and you prove a claim in one case, you can't automatically apply it in the other case as well</p>",
        "id": 224377052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611861012
    },
    {
        "content": "<p>Also, syntactically there is a scoping consideration; in the first version, after the have you have basically generated a term like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">le_antisymm</span> <span class=\"o\">((</span><span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">proof</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>where the two underscores are the two subgoals, and <code>h</code> is only in scope in the first one (the first subgoal), whereas the second proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">proof</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>and now <code>h</code> is in scope for both goals.</p>",
        "id": 224391005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611867138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> another example: suppose you do induction, and you get two goals: the <code>0</code> case and the <code>n+1</code> case. The you might be able to prove <code>have h : bla</code> in the <code>0</code> case, but the same proof might not work (or even make sense) in the other case.</p>",
        "id": 224394014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611868701
    },
    {
        "content": "<p>After <code>apply le_antisymm,</code> you have two goals, and are now operating in two completely independent universes which have no way of communicating with each other.</p>",
        "id": 224395058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611869254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247154\">Jakob Scholbach</span> <a href=\"#narrow/stream/113489-new-members/topic/applying.20a.20hypothesis.20several.20times/near/224376705\">said</a>:</p>\n<blockquote>\n<p>What is the overarching rationale / logic behind this dependence of ordering? (Me old-fashioned guy thinking: in a paper proof it would not matter...)</p>\n</blockquote>\n<p>A tactic proof is a sequence of instructions to manipulate the tactic state.  It's all fairly low-level -- and for a practitioner it's good if basic tactics don't have too many smarts because then you have a better chance at predicting what they will do.</p>\n<p>In principle, someone could probably write a <code>remember h</code> tactic to extract a hypothesis to other parallel goals, but in practice it's easy enough to just reorder things.</p>\n<p>Regarding your example, you can apply a tactic proof to all goals simultaneously:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">max_le</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_max_right</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_max_left</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224406390,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611874581
    }
]