[
    {
        "content": "<p>I'm in the process of proving a theorem, and have reached the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">firstlast</span><span class=\"o\">:</span> <span class=\"n\">reactor.ports</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">list.nth</span> <span class=\"n\">last</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">none</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">list.nth</span> <span class=\"n\">first</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">list.nth</span> <span class=\"n\">first</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>What is this <code>&lt;*&gt;</code> operator, and how can I eliminate it to prove the goal?</p>",
        "id": 222479524,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610478573
    },
    {
        "content": "<p>You can find out what a given notation means with <code>#print notation</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">&lt;*&gt;</span>\n<span class=\"c1\">-- _ `&lt;*&gt;`:60 _:60 := has_seq.seq #1 #0</span>\n</code></pre></div>",
        "id": 222480058,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610478747
    },
    {
        "content": "<p>You should be able to simplify your goal with <code>dsimp [(&lt;*&gt;)]</code> or maybe <code>simp [(&lt;*&gt;)]</code>.</p>",
        "id": 222480615,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610478975
    },
    {
        "content": "<p>that's quite an imposing sequence of characters</p>",
        "id": 222481714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610479523
    },
    {
        "content": "<p>Sadly, the various brackets don't seem to be optional.</p>",
        "id": 222482029,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610479665
    },
    {
        "content": "<p>Ok now I'm really confused. The theorem I'm trying to prove is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Merge the `last` list *onto* the `first`.</span>\n<span class=\"c1\">-- I.e. for each list position, use the values in `last` unless it's `none`, then fall back to `first`.</span>\n<span class=\"kd\">def</span> <span class=\"n\">merge</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">last.zip_with</span> <span class=\"o\">(</span><span class=\"bp\">&lt;|&gt;</span><span class=\"o\">)</span> <span class=\"n\">first</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">merge_skips_empty</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">last.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">merge</span> <span class=\"n\">first</span> <span class=\"n\">last</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">first.nth</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">merge</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">last.nth_zip_with</span> <span class=\"o\">(</span><span class=\"bp\">&lt;|&gt;</span><span class=\"o\">)</span> <span class=\"n\">first</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">&lt;*&gt;</span><span class=\"o\">)],</span>\n    <span class=\"c1\">-- ⊢ none = list.nth first i</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>I feel like <code>merge_skips_empty</code> is actually false, but I don't get why.<br>\nI'm not familiar with the <code>&lt;|&gt;</code> syntax, so perhaps <code>merge</code> isn't actually doin what I thought it does.</p>",
        "id": 222482238,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610479758
    },
    {
        "content": "<p>If <code>last.nth i = none</code>, then <code>i</code> is in fact out of range, so <code>(merge first last).nth i</code> is also none, and <code>first.nth i</code> may or may not be</p>",
        "id": 222482600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610479904
    },
    {
        "content": "<p>I think you want <code>last.nth i = some none</code></p>",
        "id": 222482622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610479919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20is.20.3C*.3E.3F/near/222482622\">said</a>:</p>\n<blockquote>\n<p>I think you want <code>last.nth i = some none</code></p>\n</blockquote>\n<p>Ahhh, that seems to be the source of my confusion. I'm guessing therefore <code>merge</code> also only uses <code>first</code>'s values whenever <code>first</code> is longer than <code>last</code>, and the indices start exceeding the length of <code>last</code>- is that right?</p>",
        "id": 222483204,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610480176
    },
    {
        "content": "<p>No, <code>merge</code> will by this definition just truncate to the shorter of the two lists</p>",
        "id": 222483334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610480241
    },
    {
        "content": "<p>which probably isn't what you want, but it's the easy thing to do as long as you only care about equal length lists</p>",
        "id": 222483394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610480270
    },
    {
        "content": "<p>Sorry for asking so much, but I'm just stuck on this. I've now gotten to the point that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">merge_skips_empty</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">last.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">none</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">first.merge</span> <span class=\"n\">last</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">first.nth</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">merge</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">last.nth_zip_with</span> <span class=\"o\">(</span><span class=\"bp\">&lt;|&gt;</span><span class=\"o\">)</span> <span class=\"n\">first</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">option.map_some</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">has_orelse.orelse</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">&lt;*&gt;</span><span class=\"o\">)],</span>\n      <span class=\"c1\">-- ⊢ option.map none.orelse (list.nth first i) = list.nth first i</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>\n<p>From what I gather <code>none.orelse</code> should always return the \"else thing\", which in this case by virtue of <code>option.map</code>would be <code>(list.nth first i)</code>. But I just can't manage to convey this to Lean.</p>",
        "id": 222486880,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610481889
    },
    {
        "content": "<p><code>cases first.nth i; simp,</code> works.</p>",
        "id": 222487859,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610482370
    },
    {
        "content": "<p>there should also be a lemma about that</p>",
        "id": 222487878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610482385
    },
    {
        "content": "<p><code>map_id</code> should help but it's written in a really awkward way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">option.map_id''</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">funext</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"n\">option.map_id</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">merge_skips_empty</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">last.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">none</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">first.merge</span> <span class=\"n\">last</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">first.nth</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">merge</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">last.nth_zip_with</span> <span class=\"o\">(</span><span class=\"bp\">&lt;|&gt;</span><span class=\"o\">)</span> <span class=\"n\">first</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">option.map_some</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_orelse.orelse</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">&lt;*&gt;</span><span class=\"o\">),</span> <span class=\"n\">option.none_orelse'</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">option.map_id''</span> <span class=\"n\">option.none_orelse'</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222488892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610482915
    }
]