[
    {
        "content": "<p>Hi everyone, <br>\nhere is a definition for integral over simple functions,<br>\na definition for simple functions as a subtype of integrable functions,<br>\nand a definition for its integral.</p>\n<p>Do these look okay?</p>\n<div class=\"codehilite\"><pre><span></span>variables  {γ : Type*}  [normed_space ℝ γ] [second_countable_topology γ] [topological_add_group γ]\n\ndef integral&#39; (f : measure_theory.simple_func α γ) : γ :=\n  f.range.sum (λ (x : γ), (ennreal.to_real (volume (f ⁻¹&#39; {x}))) • x)\n\nsection\nvariables (α γ)\ndef simple_func : Type* :=\n  { f : α →ᵢ γ // ∃ (s : measure_theory.simple_func α γ), (ae_eq_fun.mk s s.measurable) = f.val}\nend\n\nlocal infixr ` →ₛ `:25 := simple_func\n\ndef integral_over_simple_func (f : α →ₛ γ) : γ := integral&#39; (classical.some f.2)\n</pre></div>",
        "id": 165531366,
        "sender_full_name": "Joe",
        "timestamp": 1557756343
    },
    {
        "content": "<p>Typically, writing definitions is not enough...</p>",
        "id": 165539739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557761826
    },
    {
        "content": "<p>You have to prove some basic lemmas to connect your definition with the real world</p>",
        "id": 165539764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557761861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> do you have some goal in mind?</p>",
        "id": 165539906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557761937
    },
    {
        "content": "<p>Yeah, I think then I will prove simple functions are dense in integrable functions. And then define the integral on integrable functions.</p>\n<div class=\"codehilite\"><pre><span></span>lemma simple_func_dense_embedding : dense_embedding (subtype.val : (α →ₛ γ) → (α →ᵢ γ)) := sorry\ndef integral (f : α →ᵢ γ) : γ := dense_embedding.extend simple_func_dense_embedding integral_over_simple_func f\n</pre></div>",
        "id": 165545143,
        "sender_full_name": "Joe",
        "timestamp": 1557765379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127148\">@Joe</span>  did you have a look at <a href=\"https://github.com/leanprover-community/mathlib/blob/ffa6d6992c4de076154fdefad79c2488bcb48bbd/src/measure_theory/integration.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/ffa6d6992c4de076154fdefad79c2488bcb48bbd/src/measure_theory/integration.lean\">https://github.com/leanprover-community/mathlib/blob/ffa6d6992c4de076154fdefad79c2488bcb48bbd/src/measure_theory/integration.lean</a>?</p>",
        "id": 165545392,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557765587
    },
    {
        "content": "<p>I know. We already have an integral on <code>α → ennreal</code>, but it seems that we want to define the Bochner integral and  integrate on Banach space.</p>",
        "id": 165545572,
        "sender_full_name": "Joe",
        "timestamp": 1557765721
    },
    {
        "content": "<p>Probably I'll use a similar approach.</p>",
        "id": 165545799,
        "sender_full_name": "Joe",
        "timestamp": 1557765885
    },
    {
        "content": "<p>I feel definitions are more important than proofs. So I want to be more careful with them.</p>",
        "id": 165546371,
        "sender_full_name": "Joe",
        "timestamp": 1557766325
    },
    {
        "content": "<p>I know how you feel. If you give a bad proof, who cares? Someone can come along and give a better proof and nothing really changes. But with a bad definition you have type class issues or something that's impossible to work with or something</p>",
        "id": 165548025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557767562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> Certainly. But the way to demonstrate that your definitions are really good is by proving theorems that use them</p>",
        "id": 165549249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557768359
    },
    {
        "content": "<p>Can you prove that the integral of a constant function over a compact set has the expected value? That is a first baby-step to validating that your definition is usable.</p>",
        "id": 165549393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557768446
    },
    {
        "content": "<p>You will want to prove how integration interacts with addition, subtraction, etc...</p>",
        "id": 165549477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557768487
    },
    {
        "content": "<p>You also need to show how it interacts with existing notions of integration that are in the library</p>",
        "id": 165549505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557768512
    },
    {
        "content": "<p>All of this is of course a lot of work. And you don't have to do this alone. But you will have to put in some effort.</p>",
        "id": 165549538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557768534
    },
    {
        "content": "<p>Yes, this is exactly how I feel. If I give a bad definition then in the future all proofs depending on the definition may need to be reworked.</p>",
        "id": 165550615,
        "sender_full_name": "Joe",
        "timestamp": 1557769211
    },
    {
        "content": "<p>I’ll try to work out the basic lemmas.</p>",
        "id": 165550644,
        "sender_full_name": "Joe",
        "timestamp": 1557769255
    },
    {
        "content": "<p>I do have doubts about the definitions. I don’t like the ‘ennneal.to_real’ there. And I use ‘classical.some’. I don’t like that either.</p>",
        "id": 165550928,
        "sender_full_name": "Joe",
        "timestamp": 1557769438
    },
    {
        "content": "<p>The <code>ennreal.to_real</code> can be done using a coercion. And in fact that is the better way to do it.</p>",
        "id": 165551003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557769482
    },
    {
        "content": "<p>I think it is <code>ennreal.of_real</code> that can be done using a coercion?</p>",
        "id": 165551604,
        "sender_full_name": "Joe",
        "timestamp": 1557769957
    },
    {
        "content": "<p>Or you mean I first define a coercion from <code>ennreal</code> to <code>real</code>?</p>",
        "id": 165551665,
        "sender_full_name": "Joe",
        "timestamp": 1557770015
    },
    {
        "content": "<p>The coercion already exists.</p>",
        "id": 165551808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557770108
    },
    {
        "content": "<p>Maybe you can just remove it from your code</p>",
        "id": 165551823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557770120
    },
    {
        "content": "<p>If that doesn't work, wrap its argument in <code>(_ : \\real)</code></p>",
        "id": 165551856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557770147
    },
    {
        "content": "<p>You mean like this <code>(volume (f ⁻¹' {x})) : ℝ)</code></p>",
        "id": 165551965,
        "sender_full_name": "Joe",
        "timestamp": 1557770203
    },
    {
        "content": "<p>But it is an error it seems : </p>\n<p>invalid type ascription, term has type<br>\n  ennreal<br>\nbut is expected to have type<br>\n  ℝ</p>",
        "id": 165552025,
        "sender_full_name": "Joe",
        "timestamp": 1557770246
    },
    {
        "content": "<p>Aah.... sorry</p>",
        "id": 165552037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557770259
    },
    {
        "content": "<p>In order to deal with the <code>classical.some</code> you'll want to prove a lemma that says that you can evaluate the integral of a <code>simple_func</code> using any choice of <code>measure_theory.simple_func</code>, which amounts to proving that two <code>measure_theory.simple_func</code>s with the same underlying function have the same integral</p>",
        "id": 165552048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557770265
    },
    {
        "content": "<p>That of course only works if it's <code>nnreal</code></p>",
        "id": 165552057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557770273
    },
    {
        "content": "<p>You can't coerce infinity to a real</p>",
        "id": 165552113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557770285
    },
    {
        "content": "<p>Yes. Cannot coerce infinity to a real. It is possible for a set to have infinite measure, but since here we are dealing with a simple function,  set with infinite measure will be mapped to zero, so it doesn't matter.</p>",
        "id": 165552385,
        "sender_full_name": "Joe",
        "timestamp": 1557770467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  Yeah, so that is how I can eliminate the <code>exists</code>.</p>",
        "id": 165552470,
        "sender_full_name": "Joe",
        "timestamp": 1557770523
    },
    {
        "content": "<p>Probably a good reference is <a href=\"http://isabelle.in.tum.de/dist/library/HOL/HOL-Analysis/Bochner_Integration.html\" target=\"_blank\" title=\"http://isabelle.in.tum.de/dist/library/HOL/HOL-Analysis/Bochner_Integration.html\">http://isabelle.in.tum.de/dist/library/HOL/HOL-Analysis/Bochner_Integration.html</a></p>",
        "id": 165556228,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557772767
    }
]