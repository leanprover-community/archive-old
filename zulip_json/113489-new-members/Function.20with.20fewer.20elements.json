[
    {
        "content": "<p>I have a function f between two fintypes, the first of which has cardinality at least 2 smaller the the second. I want to extract 2 (distinct) elements from the 2nd type which are not in the image of f. I could prove it, but I was wondering if there was anything like this in mathlib already, given that it seems like a pretty basic thing. Thanks!</p>",
        "id": 306777988,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1667010413
    },
    {
        "content": "<p>I have no idea what to even search to find something like this in the library</p>",
        "id": 306778002,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1667010440
    },
    {
        "content": "<p>are there any criteria for these elements other than \"not in the image of <code>f</code>\"? what should the behavior be if there are more than 2 elements not in the image?</p>",
        "id": 306779255,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667011586
    },
    {
        "content": "<p>I really have no restrictions, I would then by using those 2 elements to find a contradiction (in some sort of pigeonhole-type argument). I just want to show there exists 2 such distinct elements, if there are more I just need 2 of them (and I don't mind if its not computable or such).</p>",
        "id": 306779523,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1667011841
    },
    {
        "content": "<p>oh I see what you're getting at... you just want the proof that a function from a fintype of lesser cardinality leaves a number of elements out of the image</p>",
        "id": 306779659,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667012022
    },
    {
        "content": "<p>I don't have an answer off the top of my head, but are you aware of <a href=\"https://leanprover-community.github.io/mathlib_docs/combinatorics/pigeonhole.html\">https://leanprover-community.github.io/mathlib_docs/combinatorics/pigeonhole.html</a>?</p>",
        "id": 306780142,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667012481
    },
    {
        "content": "<p>Yeah, I guess one could for instance apply finset.exists_card_fiber_lt_of_card_lt_mul twice, but seems a bit convoluted for this simple application. My guess is that someone must have a more directly application result.</p>",
        "id": 306780485,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1667012745
    },
    {
        "content": "<p>You just want to show the complement of the range has cardinality at least 2 (using  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_univ_diff\">docs#finset.card_univ_diff</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_image_le\">docs#finset.card_image_le</a>), then you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.one_lt_card\">docs#finset.one_lt_card</a>.</p>",
        "id": 306785625,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667018500
    },
    {
        "content": "<p>You can get the set as <code>fintype.univ.filter (λ a, ∀ b, a ≠ f b)</code></p>",
        "id": 306805802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667033801
    },
    {
        "content": "<p>You won't actually be able to extract the two elements separately computably, but you can probably turn them into a <code>sym2</code> with a bit of effort.</p>",
        "id": 306805927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667033863
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.univ\">docs#finset.univ</a> rather</p>",
        "id": 306811441,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667036737
    },
    {
        "content": "<p>Defining a function and proving that it does what you want are distinct things. Since you don't worry about computability, the function can be defined using classical epsilon:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">fn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.epsilon</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n<span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">b₁</span> <span class=\"bp\">≠</span> <span class=\"n\">b₂</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b₁</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span>\n</code></pre></div>\n<p>To make some use of it, you would need to prove that in the case of <code>[fintype α] [fintype β] (h : fintype.card α + 2 ≤ fintype.card β)</code> it satisfies the condition.</p>",
        "id": 306862995,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1667061286
    },
    {
        "content": "<p>Is this what you want roughly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">finset.univ.image</span> <span class=\"n\">f</span>  <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∉</span> <span class=\"n\">finset.univ.image</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">finset.mem_compl</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finset.one_lt_card_iff</span><span class=\"o\">,</span> <span class=\"n\">finset.card_compl</span><span class=\"o\">],</span>\n  <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">finset.card_le_univ</span><span class=\"o\">],</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.image</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">finset.card_image_le</span><span class=\"o\">)],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306911330,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1667102254
    },
    {
        "content": "<p>Thanks everyone for your comments! I ended up slightly reformulating my lemma but did something quite close to Junyan Xu's suggestion</p>",
        "id": 306916136,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1667108119
    }
]