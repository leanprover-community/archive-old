[
    {
        "content": "<p>How are <code>∈</code> and <code>:</code> related?</p>\n<p>I'm able to conclude <code>0 ∈ unit_interval</code> and <code>1 ∈ unit_interval</code> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:=</span>\n <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Icc</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"n\">zero_le_one</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:=</span>\n <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Icc</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">zero_le_one</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>but I'm not sure how to conclude <code>0 : unit_interval</code> and <code>1 : unit_interval</code>.</p>",
        "id": 198011933,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589849067
    },
    {
        "content": "<p>I don't know what you mean by <code>0 ∈ ℝ</code></p>",
        "id": 198011991,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849139
    },
    {
        "content": "<p><code>t : T</code> means that <code>t</code> is a term of type <code>T</code></p>",
        "id": 198011999,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849160
    },
    {
        "content": "<p>Typo! Fixed, sorry</p>",
        "id": 198012042,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589849171
    },
    {
        "content": "<p><code>unit_interval : set ℝ</code></p>",
        "id": 198012053,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849193
    },
    {
        "content": "<p>You don't conclude <code>0 : \\R</code> nor <code>1 : \\R</code>, <code>:</code> represents a typing relation. (Leaving it here despite correction.)</p>",
        "id": 198012056,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589849194
    },
    {
        "content": "<p>and <code>set T</code> really just means <code>T → Prop</code></p>",
        "id": 198012079,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849226
    },
    {
        "content": "<p><code>x ∈ s</code> with <code>s : set T</code> is just an alias for <code>s x</code></p>",
        "id": 198012154,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849286
    },
    {
        "content": "<p>and <code>s x : Prop</code></p>",
        "id": 198012159,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849293
    },
    {
        "content": "<p>I don't think that <code>x : s</code> with <code>s : set T</code> is meaningful<br>\nI think it's about as meaningful as <code>x : (0 : ℝ)</code></p>",
        "id": 198012214,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849367
    },
    {
        "content": "<p>do you know why you wanted to say that?</p>",
        "id": 198012215,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849374
    },
    {
        "content": "<p>the tactic state here is junk, and I think that's a feature of type theory, not a bug</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198012401,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849548
    },
    {
        "content": "<p>I'm trying to define homotopy, and this is what i have so far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">universe</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:=</span>\n <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Icc</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"n\">zero_le_one</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:=</span>\n <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Icc</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">zero_le_one</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> γ is suppoed to be the unit interval, but idk how to get that yet -/</span>\n<span class=\"n\">def</span> <span class=\"n\">are_homotopic</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">unit_interval</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198012412,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589849565
    },
    {
        "content": "<p>^ that doesn't actually compile because the terms <code>prod.mk 0 x</code> and <code>prod.mk 1 x</code> are ill-typed</p>",
        "id": 198012423,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589849588
    },
    {
        "content": "<p>I'm guessing that comment is outdated</p>",
        "id": 198012444,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849624
    },
    {
        "content": "<p>Yep, sorry</p>",
        "id": 198012490,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589849646
    },
    {
        "content": "<p>here's what I would write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">constructions</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">real_instances</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">homotopy</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">val_continuous</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">val_start</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">val_end</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">are_homotopic</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">homotopy</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198012793,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589849994
    },
    {
        "content": "<p>instead having functions from the unit interval, i'd have a function from the reals and not care about its values outside the unit interval</p>",
        "id": 198012892,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850073
    },
    {
        "content": "<p>if you want you could have a partial function from the reals and demand that its domain is equal to the unit interva</p>",
        "id": 198012911,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850099
    },
    {
        "content": "<p>i think that doesn't add much to the story</p>",
        "id": 198012922,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850112
    },
    {
        "content": "<p>of course the real test of definitions like this is to make a nontrivial example, did you have one in mind?</p>",
        "id": 198012979,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850133
    },
    {
        "content": "<p>(it's clear that you can build the identity homotopy and prove reflexivity of <code>are_homotopic</code> but that would be true of whatever \"vaguely correct-seeming\" definition you write down)</p>",
        "id": 198013046,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850206
    },
    {
        "content": "<p>A good first example would be to show that S^1 and R^2-{0} are homotopy equivalent, I'm not sure how easy it is to define those sets in lean currently though</p>",
        "id": 198013140,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589850315
    },
    {
        "content": "<p>we'd need to define what homotopic means for topological spaces which should be easy given the notion of homotopy for maps</p>",
        "id": 198013164,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589850347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294709\">Aniruddh Agarwal</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.88.88.20vs.20.3A/near/198013164\">said</a>:</p>\n<blockquote>\n<p>we'd need to define what homotopic means for topological spaces which should be easy given the notion of homotopy for maps</p>\n</blockquote>\n<p>sorry, I'm not very good at this kind of math, can you give that definition?</p>",
        "id": 198013233,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850391
    },
    {
        "content": "<p>I'm not too familiar with <code>structure</code>'s in lean currently though (I think they are analogous to type classes from haskell?)</p>",
        "id": 198013237,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589850397
    },
    {
        "content": "<p>it's a record type</p>",
        "id": 198013245,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850415
    },
    {
        "content": "<p>X and Y are homotopic if there exist continuous maps f : X -&gt;Y and g : Y -&gt; X such that fg is homotopic to id_Y and gf is homotopic to id_X</p>",
        "id": 198013259,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589850437
    },
    {
        "content": "<p>so if <code>G : homotopy hf hg</code> then <code>G.val : ℝ \\to \\a \\to \\b</code></p>",
        "id": 198013266,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850445
    },
    {
        "content": "<p>I think it's clear how to define the plane minus a point as a topological space (if the subspace topology is the right one, then mathlib might already have it)</p>",
        "id": 198013322,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850492
    },
    {
        "content": "<p>i don't know how you want to define <code>S_1</code>, I know we have quotients but they're often harder to work with than you expect</p>",
        "id": 198013347,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850527
    },
    {
        "content": "<p>The easiest definition would be as a subspace of R^2 I think</p>",
        "id": 198013380,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589850555
    },
    {
        "content": "<p>i believe you I guess</p>",
        "id": 198013459,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850606
    },
    {
        "content": "<p>as a set you can just carve it out with the norm, which should be easy to find</p>",
        "id": 198013466,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850619
    },
    {
        "content": "<p>i don't know how i'd define the topology</p>",
        "id": 198013470,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850625
    },
    {
        "content": "<p>if you posted the definitions of the spaces i'd be happy to fill in the rest, or I'm happy to help you fill in any holes you come across along the way</p>",
        "id": 198013507,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850698
    },
    {
        "content": "<p>looks like this provides both subspace topologies and quotient topologies<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/topology/constructions.html\">https://leanprover-community.github.io/mathlib_docs/topology/constructions.html</a></p>",
        "id": 198013588,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850763
    },
    {
        "content": "<p>the topology should be automatic once I figure out how to define S^1</p>",
        "id": 198013595,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589850778
    },
    {
        "content": "<p>lean automatically found the subspace topology on the unit interval when I was trying to define homotopy</p>",
        "id": 198013641,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589850815
    },
    {
        "content": "<p>are you saying that the subspace topology works once you have S^1 as a set? (again I'm not very adept with this, mathematically)</p>",
        "id": 198013656,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589850840
    },
    {
        "content": "<p>Yep</p>",
        "id": 198013729,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589850904
    },
    {
        "content": "<p><code>def S1 : set (ℝ × ℝ) := λ x, x.1^2 + x.2^2 = 1</code></p>",
        "id": 198013882,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589851083
    },
    {
        "content": "<p>I think there's some kind of set-builder notation that's the same thing but it looks more like math</p>",
        "id": 198013893,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589851113
    },
    {
        "content": "<p><code>def S1 : set (ℝ × ℝ) := { t : ℝ × ℝ | t.1^2 + t.2^2 = 1 }</code></p>",
        "id": 198013981,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589851271
    },
    {
        "content": "<p>this also works (i think it's fine style if it's done inside of a proof)<br>\n<code>def S1 := { t : ℝ × ℝ | t.1^2 + t.2^2 = 1 }</code></p>",
        "id": 198013997,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589851319
    },
    {
        "content": "<p>Ah, the 'set T' notation makes sense now. Is it inspired by the observation that you can define some formal property P on a set X by identifying it with the subset of elements of X for which P is true?</p>",
        "id": 198014086,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589851400
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 198014102,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589851422
    },
    {
        "content": "<p>yes, that identification is a definitional equality in Lean</p>",
        "id": 198014105,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589851427
    },
    {
        "content": "<p>You can look at the definition of <code>set</code> (eg by Ctrl-Click if you're using VSCode), and you'll see <code>set t</code> is defined as <code>t -&gt; Prop</code></p>",
        "id": 198014148,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589851449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294709\">Aniruddh Agarwal</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.88.88.20vs.20.3A/near/198012423\">said</a>:</p>\n<blockquote>\n<p>^ that doesn't actually compile because the terms <code>prod.mk 0 x</code> and <code>prod.mk 1 x</code> are ill-typed</p>\n</blockquote>\n<p>Just use the <code>zero</code> and <code>one</code> that you defined above. (Or turn them into <code>has_zero</code>/<code>has_one</code> instances, so that <code>0 : unit_interval</code> means <code>zero</code>.)</p>",
        "id": 198014724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589852234
    },
    {
        "content": "<p>You also need a <code>topological_space</code> instance for <code>unit_interval</code>.</p>",
        "id": 198014734,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589852263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.88.88.20vs.20.3A/near/198014734\">said</a>:</p>\n<blockquote>\n<p>You also need a <code>topological_space</code> instance for <code>unit_interval</code>.</p>\n</blockquote>\n<p>right, this should have been obvious to us since we were talking explicitly about subspace topologies. This is clearly better than having a function from the reals and not using its values outside the unit interval</p>",
        "id": 198014781,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589852299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.88.88.20vs.20.3A/near/198014724\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"294709\">Aniruddh Agarwal</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.88.88.20vs.20.3A/near/198012423\">said</a>:</p>\n<blockquote>\n<p>^ that doesn't actually compile because the terms <code>prod.mk 0 x</code> and <code>prod.mk 1 x</code> are ill-typed</p>\n</blockquote>\n<p>Just use the <code>zero</code> and <code>one</code> that you defined above. (Or turn them into <code>has_zero</code>/<code>has_one</code> instances, so that <code>0 : unit_interval</code> means <code>zero</code>.)</p>\n</blockquote>\n<p>I'd rather not make <code>has_zero</code>/<code>has_one</code> instances (one reason is that I'd also in the future want to be able to write 0.5 : one_interval).</p>",
        "id": 198015237,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589852918
    },
    {
        "content": "<p>I suggest that you move discussion about homotopy to <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a></p>",
        "id": 198015325,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589853106
    },
    {
        "content": "<p>AFAIR somebody started working on this but I don't remember.</p>",
        "id": 198015370,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589853127
    },
    {
        "content": "<p>Your initial code did not compile for the following reason. The domain of your function was <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0, 1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>. In Lean <code>(s : set α) (x : s)</code> actually means that <code>x</code> is a pair <code>(y : α) (hy : x ∈ s)</code>, so you can't apply it to <code>0</code>, you need to apply it to <code>⟨0, h0 : 0 ∈ Icc 0 1⟩</code></p>",
        "id": 198015479,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589853255
    },
    {
        "content": "<p>is <code>s</code> invisibly coerced to <code>subtype s</code>?</p>",
        "id": 198015499,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589853328
    },
    {
        "content": "<p>yes</p>",
        "id": 198015577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589853462
    },
    {
        "content": "<p>The first chapter of the HoTT book starts with a long discussion of the difference between judgements and definitional equalities, and is worth a read even if you don't intend learning about HoTT. Money quote:</p>\n<blockquote>\n<p>On the other hand, if the type A is being treated more like a set than like a proposition (although as we will see, the distinction can become blurry), then “a : A” may be regarded as analogous to the set-theoretic statement “a ∈ A”. However, there is an essential difference in that “a : A” is a judgment whereas “a ∈ A” is a proposition. In particular, when working internally in type theory, we cannot make statements such as “if a : A then it is not the case that b : B”, nor can we “disprove” the judgment “a : A”.</p>\n</blockquote>",
        "id": 198022595,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589864614
    }
]