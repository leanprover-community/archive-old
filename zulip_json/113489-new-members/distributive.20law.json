[
    {
        "content": "<p>hi someone can help me please to finish a prove of distributive law with natural deduction? only I ahve problem in the final part</p>",
        "id": 238346889,
        "sender_full_name": "bumby bumby",
        "timestamp": 1620752485
    },
    {
        "content": "<p>example (p q r : Prop) : p ∨ (q ∧ r) ↔ (p ∨ q) ∧ (p ∨ r) :=<br>\nbegin<br>\n  apply iff.intro,<br>\n  intro h,<br>\n  apply or.elim h,<br>\n  intro hp,<br>\n  apply and.intro,<br>\n  apply or.inl,<br>\n  exact hp,<br>\n  apply or.inl,<br>\n  exact hp,<br>\n  intro hqr,<br>\n  apply and.intro,<br>\n  apply or.inr,<br>\n  exact and.left hqr,<br>\n  apply or.inr,<br>\n  exact and.right hqr,</p>\n<p>intro h,<br>\n  apply or.elim(and.elim_left h),<br>\n  intro hp,<br>\n  apply or.inl,<br>\n  exact hp,</p>\n<p>intro hq,<br>\n  apply or.inl,<br>\nend</p>",
        "id": 238346933,
        "sender_full_name": "bumby bumby",
        "timestamp": 1620752505
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 238346957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620752517
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/RAvYuI4awkAjzZpoIJn6hqf2/imagen.png\">imagen.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RAvYuI4awkAjzZpoIJn6hqf2/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/3121/RAvYuI4awkAjzZpoIJn6hqf2/imagen.png\"></a></div>",
        "id": 238347460,
        "sender_full_name": "bumby bumby",
        "timestamp": 1620752699
    },
    {
        "content": "<p>Post code as text, not pictures</p>",
        "id": 238347507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620752714
    },
    {
        "content": "<p>Also let me introduce you to block structuring. It is a good way to make the structure of a proof clearer</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iff.intro</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">and.intro</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hqr</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">and.intro</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.inr</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">and.left</span> <span class=\"n\">hqr</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.inr</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">and.right</span> <span class=\"n\">hqr</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">and.elim_left</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238347629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620752742
    },
    {
        "content": "<p>Perhaps <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> should gain a sentence on not posting code as an image unless you're actually reporting a vscode bug</p>",
        "id": 238347761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620752786
    },
    {
        "content": "<p>Regarding the actual question: this proof requires classical logic for the reverse implication, so you will need to use proof by contradiction, and <code>by_contra hp</code> is a good step at the point of the <code>sorry</code></p>",
        "id": 238347959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620752873
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 238348159,
        "sender_full_name": "bumby bumby",
        "timestamp": 1620752930
    },
    {
        "content": "<p>sorry i have problems with backticks</p>",
        "id": 238348231,
        "sender_full_name": "bumby bumby",
        "timestamp": 1620752964
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">```</span>\n<span class=\"n\">your</span> <span class=\"n\">code</span> <span class=\"n\">here</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 238348274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620752986
    },
    {
        "content": "<p>You have to use shift-enter to put newlines if \"press enter to send\" is enabled</p>",
        "id": 238348404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620753028
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"example\"><pre><span></span><code>begin\n  apply iff.intro,\n  intro h,\n  apply or.elim h,\n  intro hp,\n  apply and.intro,\n  apply or.inl,\n  exact hp,\n  apply or.inl,\n  exact hp,\n  intro hqr,\n  apply and.intro,\n  apply or.inr,\n  exact and.left hqr,\n  apply or.inr,\n  exact and.right hqr,\n\n  intro h,\n  apply or.elim(and.elim_left h),\n  intro hp,\n  apply or.inl,\n  exact hp,\n\n  intro hq,\n  apply or.inl,\nend ```\n</code></pre></div>",
        "id": 238348468,
        "sender_full_name": "bumby bumby",
        "timestamp": 1620753052
    },
    {
        "content": "<blockquote>\n<p>Note that if you have already posted code without backticks, you can edit your message to add them.</p>\n</blockquote>\n<p>There is no need to post a new message, you can fix the formatting in your top message</p>",
        "id": 238348839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620753202
    },
    {
        "content": "<p>you need a newline between the <code> ``` </code> and the <code>example...</code> line</p>",
        "id": 238348841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620753204
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iff.intro</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">and.intro</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hqr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">and.intro</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or.inr</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">and.left</span> <span class=\"n\">hqr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or.inr</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">and.right</span> <span class=\"n\">hqr</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or.elim</span><span class=\"o\">(</span><span class=\"n\">and.elim_left</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238348872,
        "sender_full_name": "bumby bumby",
        "timestamp": 1620753219
    },
    {
        "content": "<p>is that, the second part i would have to proof by contradiction?</p>",
        "id": 238349638,
        "sender_full_name": "bumby bumby",
        "timestamp": 1620753561
    },
    {
        "content": "<p>ok and how could i prove it via contradiction?</p>",
        "id": 238350534,
        "sender_full_name": "bumby bumby",
        "timestamp": 1620753928
    },
    {
        "content": "<p>Actually I lied, you need to do cases on <code>p ∨ ¬ p</code>. If <code>p</code> is true then it is the left part of the goal, otherwise you can case on <code>p ∨ q</code> and <code>p ∨ r</code> to obtain <code>q</code> and <code>r</code>, and then prove the right part</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iff.intro</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">and.intro</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hqr</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">and.intro</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.inr</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">and.left</span> <span class=\"n\">hqr</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.inr</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">and.right</span> <span class=\"n\">hqr</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">and.left</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp'</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">false.elim</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"n\">hp'</span> <span class=\"o\">},</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">and.right</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp'</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">false.elim</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp</span> <span class=\"n\">hp'</span> <span class=\"o\">},</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">hq</span> <span class=\"n\">hr</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238351861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620754381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does this use classical logic somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iff.intro</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">and.intro</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">hp</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hqr</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">and.intro</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.inr</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">and.left</span> <span class=\"n\">hqr</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">or.inr</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">and.right</span> <span class=\"n\">hqr</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"n\">h.1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">or.elim</span> <span class=\"n\">h.2</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">or.inr</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">and.intro</span> <span class=\"n\">hq</span> <span class=\"n\">hr</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238354899,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1620755644
    },
    {
        "content": "<p><code>print axioms &lt;example&gt;</code></p>",
        "id": 238354986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620755684
    },
    {
        "content": "<p>a question I've had for a while; is it only <code>classical.choice</code> that counts as classical logic? or do <code>propext, funext, quot.sound</code> also stop computation?</p>",
        "id": 238355227,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620755769
    },
    {
        "content": "<p>Ah, you are right, this one is intuitionistically true</p>",
        "id": 238355236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620755773
    },
    {
        "content": "<p>Those statements are both true and not in opposition</p>",
        "id": 238355278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620755791
    },
    {
        "content": "<p>so <code>quot.sound</code> is noncomputable? that's weird to me</p>",
        "id": 238355432,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620755854
    },
    {
        "content": "<p>It's not <code>noncomputable</code></p>",
        "id": 238355479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620755878
    },
    {
        "content": "<p>Just not <code>#reduce</code>ible, right?</p>",
        "id": 238355548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620755895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> I should have asked my own tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.itauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">itauto</span> <span class=\"c1\">-- ok!</span>\n</code></pre></div>",
        "id": 238355583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620755916
    },
    {
        "content": "<p>It's not <code>#reduce</code>ible and also blocks computations using well founded recursion in <code>rfl</code>/<code>dec_trivial</code></p>",
        "id": 238355651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620755949
    },
    {
        "content": "<p>although with a recent change to lean that is now true of all proofs, not just those using axioms</p>",
        "id": 238355733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620755986
    },
    {
        "content": "<p>is it because those are in some way \"type-theoretically intrinsic\"? or am i just not getting the idea</p>",
        "id": 238355765,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620755997
    },
    {
        "content": "<p>Basically an axiom has no \"computation rule\", meaning that there is no way to know how to <code>#reduce</code> it. In simple applications of <code>propext</code> you can kind of figure it out but a general solution requires essentially cubical type theory</p>",
        "id": 238356034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620756069
    },
    {
        "content": "<p>In the VM, proofs are ignored so it doesn't matter whether they use axioms or not. This is why all the listed axioms are not <code>noncomputable</code>, because this marker determines whether lean will be generating code for it</p>",
        "id": 238356180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620756123
    },
    {
        "content": "<p>Note that <code>classical.choice</code> is <code>noncomputable</code>, but <code>classical.em</code>, which uses <code>classical.choice</code>, is computable trivially, because it has type <code>Prop</code></p>",
        "id": 238356302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620756166
    },
    {
        "content": "<p>theorems are always vacuously computable because lean doesn't do anything with them, it just registers their existence</p>",
        "id": 238356449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620756226
    },
    {
        "content": "<p>thank you Mario</p>",
        "id": 238358168,
        "sender_full_name": "bumby bumby",
        "timestamp": 1620756894
    },
    {
        "content": "<p>What is the distribution command on lean vs?<br>\nFor something like (a+b) * (a-b)</p>",
        "id": 241594667,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1622841641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"418334\">Shadman Sakib</span> <a href=\"#narrow/stream/113488-general/topic/Schemes.20in.20Arend.3F/near/241594667\">said</a>:</p>\n<blockquote>\n<p>What is the distribution command on lean vs?<br>\nFor something like (a+b) * (a-b)</p>\n</blockquote>\n<p>This question should be its own thread, probably in the <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> stream...</p>",
        "id": 241594887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622841795
    },
    {
        "content": "<p><del>A zulip admin should be able to move this comment and the two above it to the correct stream</del> Thanks!</p>",
        "id": 241596242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622842790
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Schemes.20in.20Arend.3F\">#general &gt; Schemes in Arend?</a></p>",
        "id": 241597338,
        "sender_full_name": "Notification Bot",
        "timestamp": 1622843580
    },
    {
        "content": "<p>You want to use <code>mul_add</code> and <code>add_mul</code>. Have you played the natural number game?</p>",
        "id": 241597999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622844101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"418334\">Shadman Sakib</span> <a href=\"#narrow/stream/113489-new-members/topic/distributive.20law/near/241594667\">said</a>:</p>\n<blockquote>\n<p>What is the distribution command on lean vs?<br>\nFor something like (a+b) * (a-b)</p>\n</blockquote>\n<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sq_sub_sq\">docs#sq_sub_sq</a> what you're looking for?</p>",
        "id": 241648596,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1622916194
    }
]