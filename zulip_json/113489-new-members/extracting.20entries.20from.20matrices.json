[
    {
        "content": "<p>Given a matrix <code>A</code>, I want to define a new matrix obtained by adding a row and column to <code>A</code>. <br>\nI tried the following but it fails because of type mismatch. Dunno how to fix it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">def</span> <span class=\"n\">matrix_extension</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">ℕ</span>\n<span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204795128,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595510140
    },
    {
        "content": "<p><code>A x y</code> doesn't work because <code>A</code> is expecting a pair of <code>fintype</code></p>",
        "id": 204795244,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595510183
    },
    {
        "content": "<p>I think <code>A</code> is expecting a pair of <code>fin k</code></p>",
        "id": 204795328,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595510226
    },
    {
        "content": "<p>does something like <code>A ⟨x, _ ⟩ ⟨y, _⟩</code> work?</p>",
        "id": 204795369,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595510256
    },
    {
        "content": "<p>Instead of writing a <code>match</code> statement, you can also try <code>fin.cons : α -&gt; (fin n -&gt; α) -&gt; fin (n+1) -&gt; α</code>.</p>",
        "id": 204795489,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595510301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/extracting.20entries.20from.20matrices/near/204795328\">said</a>:<br>\nIt says don't know how to synthesize placeholder<br>\ncontext:</p>",
        "id": 204795523,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595510325
    },
    {
        "content": "<p>Here is one way to do it using a <code>match</code>, but <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s way is almost certainly better.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">def</span> <span class=\"n\">matrix_extension</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">ℕ</span>\n<span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>       <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">_</span>            <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>            <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_succ_lt_succ</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_succ_lt_succ</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204795712,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595510421
    },
    {
        "content": "<p>Thank you!!!</p>\n<p>This definitely works, with the added bonus that I understand what's going on :P <br>\nI will give it a try using <code>fin.cons</code>as well</p>",
        "id": 204796211,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1595510680
    },
    {
        "content": "<p>Are you always adding on an edge, or inserting?</p>",
        "id": 204798244,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1595511790
    }
]