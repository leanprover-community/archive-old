[
    {
        "content": "<p>Is there a functionality extensionality theorem like the one shown below in one of the libraries:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fun_ext</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"bp\">→</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"bp\">→</span><span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 130240450,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532469221
    },
    {
        "content": "<p>There's <code>funext</code>, but that's not the same as what you stated. The proof of the theorem you stated is <code>assume a b h, by rw  h</code></p>",
        "id": 130240630,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532469418
    },
    {
        "content": "<p>Thanks.  I'm running into another issue.  It seems I cannot rewrite if meta variables are involved.  How is the following theorem completed (ignore the \"admit\"--I'd like to get the \"rw h\" to work.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">dd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">admit</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130242691,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532471773
    },
    {
        "content": "<p>You can't rewrite bound variables. Use <code>simp only [h]</code> instead</p>",
        "id": 130242967,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532472241
    },
    {
        "content": "<blockquote>\n<p>Is there a functionality extensionality theorem like the one shown below in one of the libraries:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fun_ext</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"bp\">→</span><span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"bp\">→</span><span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n</blockquote>\n<p>Isn't that normal rewriting?</p>",
        "id": 130243044,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532472357
    }
]