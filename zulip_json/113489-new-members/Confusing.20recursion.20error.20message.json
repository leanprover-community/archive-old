[
    {
        "content": "<p>I am getting the error <code>equation compiler failed to create auxiliary declaration 'MWE._main._pack' nested exception message: infer type failed, unknown variable hwf</code> in the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.nth_rewrite.default</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ε_NFA</span> <span class=\"o\">(</span><span class=\"n\">alphabet</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">alphabet_fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">alphabet</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">state_fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">state</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">state_dec</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">state</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">alphabet</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">accept_states</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">state</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ε_NFA</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dec</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">M.state_dec</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fin₁</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">M.alphabet_fintype</span>\n<span class=\"kd\">instance</span> <span class=\"n\">fin₂</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">M.state</span> <span class=\"o\">:=</span> <span class=\"n\">M.state_fintype</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step_set'</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">Ss</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">finset.bind</span> <span class=\"n\">Ss</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M.step</span> <span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ε_closure_set</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ss</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M.state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">Ss</span><span class=\"o\">),</span> <span class=\"n\">ε_closure_set</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">ε_closure_set</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">∈</span> <span class=\"n\">M.step</span> <span class=\"n\">S</span> <span class=\"n\">option.none</span> <span class=\"bp\">→</span> <span class=\"n\">ε_closure_set</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ε_NFA_has_well_founded</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">S₁</span> <span class=\"n\">S₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">S₁</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S₂</span><span class=\"bp\">ᶜ</span><span class=\"o\">),</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"n\">inv_image.wf</span> <span class=\"n\">_</span> <span class=\"n\">finset.lt_wf</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sub_of_compl</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">T</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ε_closure</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">=</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">S</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"o\">:</span> <span class=\"n\">S'</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ε_closure</span> <span class=\"n\">S'</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.state</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.ε_closure</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">M.ε_closure_set</span> <span class=\"n\">S</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ε_closure</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">M.ε_closure_set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n        <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">),</span>\n\n      <span class=\"n\">induction</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">t'</span> <span class=\"n\">t</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ε_closure_set.step</span> <span class=\"n\">t'</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n          <span class=\"n\">rwa</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n        <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ε_closure</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">heq</span><span class=\"bp\">;</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">t'</span> <span class=\"n\">t</span> <span class=\"n\">ht'</span> <span class=\"n\">ht</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">all_goals</span>\n    <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">),</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ε_closure_set.step</span> <span class=\"n\">t'</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">),</span>\n      <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ε_NFA</span>\n</code></pre></div>\n\n<p>There is some weird dependence with the <code>←</code> direction, the error is coming from the <code>→</code> direction but if I <code>sorry</code> out all recursive terms in the <code>←</code> proof the error disappears.</p>",
        "id": 213712976,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1603037272
    },
    {
        "content": "<p>Not sure if this is the cause of your issues, but it seems to me like many of your <code>let</code>s should be <code>have</code>s, particularly those whose type is <code>(something) &lt; (something else)</code>.</p>",
        "id": 213713132,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603037510
    },
    {
        "content": "<p>if you change the <code>let hwf</code> to <code>hwf</code> the error goes away, being replaced with a more sensible one about the <code>rwa</code></p>",
        "id": 213713193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603037583
    },
    {
        "content": "<p>If I make them <code>have</code>s then they aren't visible to the <code>dec_tac</code></p>",
        "id": 213713209,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1603037622
    },
    {
        "content": "<p>you have to put them in the same term</p>",
        "id": 213713212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603037636
    },
    {
        "content": "<p>in fact it's probably best to do it only once at the start of the proof</p>",
        "id": 213713254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603037660
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.state</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.ε_closure</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">M.ε_closure_set</span> <span class=\"n\">S</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">IH</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span><span class=\"o\">),</span> <span class=\"n\">MWE</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ε_closure</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">M.ε_closure_set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n        <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">hwf</span><span class=\"o\">,</span>\n      <span class=\"n\">induction</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">t'</span> <span class=\"n\">t</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ε_closure_set.step</span> <span class=\"n\">t'</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n          <span class=\"n\">rwa</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">hwf</span> <span class=\"o\">},</span>\n        <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ε_closure</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">heq</span><span class=\"bp\">;</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">t'</span> <span class=\"n\">t</span> <span class=\"n\">ht'</span> <span class=\"n\">ht</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">all_goals</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ε_closure_set.step</span> <span class=\"n\">t'</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213713349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603037797
    }
]