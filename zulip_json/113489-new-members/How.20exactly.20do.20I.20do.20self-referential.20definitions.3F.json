[
    {
        "content": "<p>I'm trying to define a relation R such that <code>for all x, x R (x + 1)</code> and <code>transitive R</code>. Now I know I could probably do this inductively, but I don't want to (because I want the method to apply even if I had, e.g. <code>symmetric R</code>). My instinct was to use a non-constructive definition, like this (I know this is nonsense,  but it's just a sketch of what I want to do):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">double_cosets</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">):</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">true</span>\n    <span class=\"n\">transitivity</span> <span class=\"n\">double_cosets</span>\n</pre></div>\n\n\n<p>But that doesn't work because </p>\n<p>1. <code>true</code> becomes the value of a relation, when I really want that to be the <em>proposition it maps to</em>.<br>\n 2. Lean doesn't understand the self-reference.</p>\n<p>How do I define it?</p>",
        "id": 135792425,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539549254
    },
    {
        "content": "<p><code>trans_gen</code></p>",
        "id": 135792448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549332
    },
    {
        "content": "<p>Take the transitive closure of your original relation</p>",
        "id": 135792451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549347
    },
    {
        "content": "<p>isn't this just <code>&lt;</code>?</p>",
        "id": 135792454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539549361
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">relation</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">original</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">original</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">trans_gen</span> <span class=\"n\">original</span>\n</pre></div>",
        "id": 135792499,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think he wants to experiment instead of creating new things</p>",
        "id": 135792504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549426
    },
    {
        "content": "<p>alternatively:</p>",
        "id": 135792508,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549454
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">basic</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n</pre></div>",
        "id": 135792509,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549457
    },
    {
        "content": "<p>Now you can prove things about <code>R</code> by induction</p>",
        "id": 135792548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549493
    },
    {
        "content": "<p>It might be interesting to look at the definition of <code>&lt;</code> on the natural numbers at this point</p>",
        "id": 135792549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549514
    },
    {
        "content": "<p>Huh, that makes sense. So induction can be used for <em>anything</em> self-referential?</p>",
        "id": 135792556,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539549551
    },
    {
        "content": "<p>not anything.</p>",
        "id": 135792557,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549578
    },
    {
        "content": "<p>and to tie this up with an earlier conversation, you could even look at the proof that <code>&lt;</code> on <code>nat</code> is decidable, which is an algorithm which, given two nats, spits out which is the smallest.</p>",
        "id": 135792558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549580
    },
    {
        "content": "<p>and I would define a function N -&gt; N -&gt; bool instead</p>",
        "id": 135792600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549610
    },
    {
        "content": "<p>to emphasize that it is decidable</p>",
        "id": 135792603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549621
    },
    {
        "content": "<p>Whenever you want the \"least relation satisfying some properties\" that's an inductive predicate</p>",
        "id": 135792614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539549666
    },
    {
        "content": "<p>and \"smallest type closed under some operations\" is an inductive type</p>",
        "id": 135792618,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549698
    },
    {
        "content": "<p>the relation doesn't have to be decidable, and the proof that it is usually goes by rather different methods than the original</p>",
        "id": 135792619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539549707
    },
    {
        "content": "<p>There are interesting examples of nondecidable predicates like \"in the span of s\" in a group</p>",
        "id": 135792668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539549766
    },
    {
        "content": "<p>So what is the <code>noncomputable</code> kind of definition for? Isn't my definition non-constructive?</p>",
        "id": 135792682,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539549806
    },
    {
        "content": "<p><code>inductive</code> things are always computable, it's <code>definition</code> that is noncomputable</p>",
        "id": 135792728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549848
    },
    {
        "content": "<p>I think it's fine.</p>",
        "id": 135792729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539549848
    },
    {
        "content": "<p><code>Prop</code> is a strange thing</p>",
        "id": 135792733,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549859
    },
    {
        "content": "<p>you can have non-decidable propositions</p>",
        "id": 135792736,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549867
    },
    {
        "content": "<p>that doesn't make it noncomputable</p>",
        "id": 135792738,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549876
    },
    {
        "content": "<p>No, I get that -- my point is that the definition is non-constructive, isn't it?</p>",
        "id": 135792740,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539549884
    },
    {
        "content": "<p>it isn't</p>",
        "id": 135792757,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549922
    },
    {
        "content": "<p>you're just defining a proposition</p>",
        "id": 135792760,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549926
    },
    {
        "content": "<p>it is not nonconstructive because you aren't actually constructing anything</p>",
        "id": 135792762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539549939
    },
    {
        "content": "<p>it's like you can write down what it means for a program to halt</p>",
        "id": 135792764,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549946
    },
    {
        "content": "<p>you just can't evaluate that statement</p>",
        "id": 135792765,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539549954
    },
    {
        "content": "<p>Yeah, you're right, I got confused.</p>",
        "id": 135792837,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539550074
    }
]