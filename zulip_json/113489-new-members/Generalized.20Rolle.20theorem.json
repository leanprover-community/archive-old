[
    {
        "content": "<p>Trying to reproduce in Lean some results in numerical analysis that have been obtained in Coq, article by T. Coquand and B. Spitters <a href=\"https://arxiv.org/pdf/1202.3460.pdf\">here</a>. To do so I need a generalized version of Rolle's theorem: if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-times differentiable and has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(n+1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> zeroes in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a,b]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">f^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> has at least one zero in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a,b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span>. I basically have the proof of one version of this ready, so I'm looking for input on the way I formulated the statement in case this ends up in <code>mathlib</code>.  A slightly stronger version which would be enough for my purpose and roughly correspond to <code>exists_has_deriv_at_eq_zero</code>, would be:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">general_rolle</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">iterated_deriv</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>while relaxing to <code>times_cont_diff_on ℝ n</code> would correspond to <code>exists_deriv_eq_zero</code>. Unless I'm wrong, the latter can be used for example to produce a point <code>c \\in Ioo -1 1</code> where <code>deriv abs</code> is zero, which is not surprising since <code>deriv</code> is set to zero wherever not defined.<br>\n<span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  wrote the standard versions so in particular I'm pinging him here for guidance.</p>",
        "id": 205729557,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596378422
    },
    {
        "content": "<p>A few comments. I'll try to leave more later tonight.</p>\n<ol>\n<li>Why do you need <code>n &gt; 0</code>?</li>\n<li>You should make <code>x</code> an argument and separate <code>∀ i, x i ∈ Icc A B</code>, <code>∀ i, f (x i) = 0</code> and <code>strict_mono x</code> into different assumptions.</li>\n<li>Another way is to assume that there exists <code>s : finset ℝ</code>, <code>s.card = n + 2</code> etc.</li>\n<li>Would it be hard to prove a version with a <code>multiset</code> instead of a <code>finset</code>?</li>\n<li>Your version requires that the <code>(n+1)</code>st derivative is continuous. I think that this is not required.</li>\n</ol>",
        "id": 205741895,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596398589
    },
    {
        "content": "<p>Thank you Yury! My feedback:<br>\n(5) You're right about (5) and I mentioned that in my original post. See also the weaker variant below. I thought we should have both, just like the two standard versions.<br>\n(1) Not sure I understand (1); <code>n=0</code> is allowed and it folds back onto the standard Rolle in <code>mathlib</code>. Again, see below.<br>\n(2) Great idea. I'm slowly getting used to the many tools in <code>mathlib</code>.<br>\n(4) Not sure about <code>multiset</code>, didn't use it before, but I see no advantage in having to worry about duplicates. Also related to (3), it seemed to me that out of all variants, the <code>fin \\to \\R</code> is the best to work with because of easy coercions.</p>\n<p>One more thing that I didn't mention before: when I got started I had <code>(f : ℝ → ℝ)</code> before the colon, but I was having trouble with that when in the induction proof I needed to move the induction hypothesis from <code>f</code> to <code>deriv f</code>. There may be some way to do that, but it was easier to use the universal quantifier after the colon.  </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">weak_general_rolle</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">iterated_deriv</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 205742822,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596400100
    },
    {
        "content": "<p><code>revert</code> is adjoint to <code>intro</code> and is often useful right before calling an induction lemma</p>",
        "id": 205749698,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596413073
    },
    {
        "content": "<p>Thanks Jalex, I tried using <code>revert</code> in this case with no success. It may just be me though!</p>",
        "id": 205750027,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596413721
    },
    {
        "content": "<p>I'm not sure I follow, but the usual pattern is to <code>revert</code> stuff that \"varies\" in the induction (like <code>f</code> here), use <code>induction</code>, then <code>intro</code> the things you reverted again--now you have the same goal as originally but the induction hypothesis is more general</p>",
        "id": 205751163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596416004
    },
    {
        "content": "<p>Here's a MWE to show what I mean, and I'll also post the other scenario:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">local_extr</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">iterated_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">general_rolle</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">iterated_deriv</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- base case, unfolds to plain Rolle `exists_deriv_eq_zero`</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- induction step</span>\n        <span class=\"c1\">-- the derivative is in Cᵈ</span>\n        <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">hxf</span><span class=\"o\">,</span>\n        <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hder</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">d</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hdg</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">g</span> <span class=\"n\">hder</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"c1\">--apply hd to g = deriv f; works here</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">done</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205754401,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596421076
    },
    {
        "content": "<p>Here's the way I started but couldn't make it work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">general_rolle</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">)</span>  <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">iterated_deriv</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- base case, unfolds to plain Rolle `exists_deriv_eq_zero`</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- induction step</span>\n        <span class=\"c1\">-- the derivative is in Cᵈ</span>\n        <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hder</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">d</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hdg</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">g</span><span class=\"o\">,</span>  <span class=\"c1\">--apply hd to g = deriv f; can&#39;t do that here</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">done</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205754799,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596421623
    },
    {
        "content": "<p><code>revert f</code> first, then you should be in the same situation as in the first example</p>",
        "id": 205754849,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596421686
    },
    {
        "content": "<p>I get an error if I do that.</p>",
        "id": 205754862,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596421731
    },
    {
        "content": "<p>Not the same.</p>",
        "id": 205754865,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596421747
    },
    {
        "content": "<p>revert <code>x</code> too</p>",
        "id": 205754945,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596421890
    },
    {
        "content": "<p>I tried that too and couldn't make it work. Can someone do it on the MWE? <br>\nIf I revert <code>f</code> I don't have <code>deriv f</code> any longer. To get it, I have to <code>intro f</code> and that places me in the same spot as before. Of course I may be missing something-:(</p>",
        "id": 205755111,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596422142
    },
    {
        "content": "<p>I thought this, the last <code>sorry</code> in my main proof, was easy. It turns out I can't find an easy way, if there's one. Help appreciated!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">local_extr</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">times_cont_diff</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">iterated_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>In my initial setup I have <code>Icc</code> instead in fact, which perfectly folds the induction base case onto the standard Rolle version in <code>mathlib</code>, but am not sure was a good decision.</p>",
        "id": 205904055,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596546725
    },
    {
        "content": "<p>Here is a proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">local_extr</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">times_cont_diff</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">iterated_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">((</span><span class=\"n\">times_cont_diff_on_succ_iff_fderiv_within</span> <span class=\"o\">(</span><span class=\"n\">unique_diff_on_Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">fderiv</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fderiv_within</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">univ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">fderiv_within</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"err\">∩</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">fderiv_within_inter</span> <span class=\"o\">(</span><span class=\"n\">Ioo_mem_nhds</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">unique_diff_within_at_univ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">fderiv_within</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">times_cont_diff</span><span class=\"bp\">.</span><span class=\"n\">comp_times_cont_diff_on</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">is_bounded_bilinear_map_apply</span><span class=\"bp\">.</span><span class=\"n\">is_bounded_linear_map_left</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">times_cont_diff</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>We have essentially no specific results for smooth functions in one dimension, this is why it is a little bit painful.</p>",
        "id": 205952468,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596570892
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> !</p>",
        "id": 205956781,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596573146
    },
    {
        "content": "<p>So if I understand correctly we need more API in 1D.</p>",
        "id": 205962531,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596576126
    },
    {
        "content": "<p>Can this be extended to <code>Icc a b</code>? Must confess currently I wouldn't know how.</p>",
        "id": 205962584,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596576163
    },
    {
        "content": "<p>This proof is now ready. Submitting to <code>mathlib</code> still hinges on the lemma due to <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  above in this thread and a few other <code>fin</code> lemmas. Maybe I should also say there's some cleaning that needs to be done. Here's a link to the proof for anyone interested:</p>\n<p><a href=\"https://github.com/stanescuUW/numerical-analysis-with-Lean/blob/master/src/Interpolation/rolle_general-fin.lean\">https://github.com/stanescuUW/numerical-analysis-with-Lean/blob/master/src/Interpolation/rolle_general-fin.lean</a></p>\n<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> Will you please provide write access to a branch of <code>mathlib</code> for <span class=\"user-mention\" data-user-id=\"306964\">@A. Stone Olguin</span> ?</p>",
        "id": 206755040,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597267861
    },
    {
        "content": "<p>What's their github username?</p>",
        "id": 206755449,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597268046
    },
    {
        "content": "<p>Hi, my GitHub username is StoneOlguin</p>",
        "id": 206756315,
        "sender_full_name": "A. Stone Olguin",
        "timestamp": 1597268586
    },
    {
        "content": "<p>Invitation sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 206757670,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597269443
    },
    {
        "content": "<p>How does this generalized Rolle compare with the result called higher order Rolle in <a href=\"https://gowers.wordpress.com/2014/02/11/taylors-theorem-with-the-lagrange-form-of-the-remainder/\">https://gowers.wordpress.com/2014/02/11/taylors-theorem-with-the-lagrange-form-of-the-remainder/</a> ?</p>",
        "id": 206757955,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597269620
    },
    {
        "content": "<p>The version that is proved here is the usual generalization on Wikipedia, because that's what's needed to obtain the truncation error for interpolation, see also the link to T. Coquand's paper in the first message in this thred:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Rolle%27s_theorem#Generalization\">https://en.wikipedia.org/wiki/Rolle%27s_theorem#Generalization</a></p>\n<p>Will need to take a closer look at the link you point to <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, at first glance it seems an equivalent formulation that I have never seen used before.</p>",
        "id": 206761260,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597272117
    },
    {
        "content": "<p>Yeah this was just idle curiosity on my part, I'll check out Coquand thanks!</p>",
        "id": 206761419,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597272220
    },
    {
        "content": "<p>No way! Instead, thank you for bringing it to my attention.</p>",
        "id": 206763386,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597273418
    },
    {
        "content": "<p>One-dimensional iterated smoothness result PRed in <a href=\"https://github.com/leanprover-community/mathlib/issues/4017\">#4017</a></p>",
        "id": 208673598,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1598959649
    }
]