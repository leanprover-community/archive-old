[
    {
        "content": "<p>ifinish doesn't succeed with this simple proposition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>This is not a question,  or even a complaint really,  I'm just trying to get familiar enough with ifinish so as to know <br>\nwhether to expect it to succeed or not.   I thought it would do this one.</p>",
        "id": 209868274,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599893812
    },
    {
        "content": "<p>it does for me</p>",
        "id": 209868547,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599894389
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lemma11helper1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">ifinish</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>produces</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">solve1</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">focused</span> <span class=\"n\">goal</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">solved</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span>\n<span class=\"err\">⊢</span> <span class=\"n\">f</span>\n</code></pre></div>\n\n\n<p>So please post your corresponding input and successful output.</p>",
        "id": 209869188,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599895887
    },
    {
        "content": "<p>It works with current Lean and mathlib:</p>\n<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic%0A%0Alemma%20lemma11helper1%3A%20%E2%88%80%20%28A%20B%3AProp%29%2C%20%28A%20%E2%86%92%20B%29%20%E2%86%92%20%28%28A%20%E2%88%A7%20B%29%20%E2%86%94%20A%29%20%3A%3D%0A%20%20assume%20A%20B%2C%0A%20%20begin%0A%20%20%20%20ifinish%2C%0A%20%20end%0A\">https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic%0A%0Alemma%20lemma11helper1%3A%20%E2%88%80%20%28A%20B%3AProp%29%2C%20%28A%20%E2%86%92%20B%29%20%E2%86%92%20%28%28A%20%E2%88%A7%20B%29%20%E2%86%94%20A%29%20%3A%3D%0A%20%20assume%20A%20B%2C%0A%20%20begin%0A%20%20%20%20ifinish%2C%0A%20%20end%0A</a></p>",
        "id": 209869232,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1599895977
    },
    {
        "content": "<p>Oh.  So I should update lean using leanproject,  I guess.   I'm worried that some of my nice proofs might break then.</p>",
        "id": 209869294,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599896117
    }
]