[
    {
        "content": "<p>I am working with a finset, and I want to put all of the elements into a finite sequence. It doesn't really matter how the elements are arranged in the sequence. But every element of the sequence should be in the finset, and every element of the finset should be in the sequence only once. </p>\n<p>I'm thinking about trying to build a vector, like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finset.card</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector.nth</span> <span class=\"n\">v</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is there any easy lemma like <code>finset.to_vector</code> that could help me with this? Is there a better way to accomplish this goal ?</p>",
        "id": 220644002,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1608594188
    },
    {
        "content": "<p>list.to_finset_surjective proves that one exists, I think (edit: it doesn't guarantee that the length is right)</p>",
        "id": 220645673,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608595645
    },
    {
        "content": "<p>the theorem statement is false, <code>S</code> doesn't appear in the consequent</p>",
        "id": 220645769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608595777
    },
    {
        "content": "<p>I think the easiest way to do this kind of thing is to do <code>rcases</code> on the finset to extract the list, at which point <code>h</code> will be defeq to <code>list.length l = n</code> and then you can build a <code>vector A n</code> from that</p>",
        "id": 220645864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608595863
    },
    {
        "content": "<p>there's <code>S.val.to_list</code></p>",
        "id": 220645876,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608595889
    },
    {
        "content": "<p>You will end up with the side condition <code>l.nodup</code> as well, which you probably want to hold on to if you want to know the list has no duplicates</p>",
        "id": 220645937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608595925
    },
    {
        "content": "<p>Whoops haha.  I guess this is what I meant, just to be extra clear: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"n\">example2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finset.card</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector.nth</span> <span class=\"n\">v</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 220645983,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1608596008
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finset.card</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector.nth</span> <span class=\"n\">v</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">S</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">l</span><span class=\"o\">⟩,</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.nodup</span><span class=\"o\">)⟩,</span>\n  <span class=\"n\">change</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">list.nth_le_of_mem</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">e</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220646251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608596246
    },
    {
        "content": "<p>Probably you don't need anything other than the first two lines for whatever you were doing</p>",
        "id": 220646321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608596294
    },
    {
        "content": "<p>Yeah, I think you're right about that, thanks Mario! Just curious:</p>\n<p>What's going on in that first line with <code>rcases S</code>?  I've only ever used <code>rcases</code> to break up elaborate 'and' statements.  Does that just mean <code>S</code> is an elaborate 'and' statement under the hood?</p>",
        "id": 220647202,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1608597231
    },
    {
        "content": "<p>Also, <code>S.val.to_list</code>looks helpful too, thanks Thomas. I will look at that more on mathlib, play around with both of these routes, and see if they work for my purposes.</p>",
        "id": 220647370,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1608597399
    },
    {
        "content": "<p><code>rcases</code> can be used to break up any inductive data type, and <code>S</code>, being a <code>finset</code>, is an inductive datatype composed of a <code>multiset</code> (1st component) and a proof that the elements in the multiset are distinct (<code>hl</code>). Multisets are quotients of lists by permutations, and the inner pair of angle brackets is able to pull out a list representative <code>l</code> in its equivalence class.</p>",
        "id": 220647415,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608597469
    },
    {
        "content": "<p>I think I roughly understand up until the last sentence, Bryan. <br>\nIf I replace <code>⟨l⟩</code> with <code>l</code> in Mario's  first line, I see that <code>l</code> turns out to be a multiset.  But how does that 'second layer' of angle brackets pull out a representative list from there? I've never used the angle brackets around a single term before, and I'm just curious about its general use.</p>",
        "id": 220648722,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1608598753
    },
    {
        "content": "<p>You can use angle brackets also on single-member inductives, like <code>inhabited</code> , in which case you get something like <code>⟨l⟩</code></p>",
        "id": 220649174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608599191
    },
    {
        "content": "<p>Technically a quotient is not an inductive type, but <code>rcases</code> supports pattern matching on it anyway, by invoking <code>quotient.ind</code> as appropriate</p>",
        "id": 220649213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608599247
    },
    {
        "content": "<p>Unlike matching on inductives, when you match on a quotient there is a side condition that the proof term you are constructing does not depend on the witness; but if you are proving a theorem then this side goal is trivial because of proof irrelevance, so it ends up looking exactly like you pattern matched on a single-member inductive</p>",
        "id": 220649320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608599342
    }
]