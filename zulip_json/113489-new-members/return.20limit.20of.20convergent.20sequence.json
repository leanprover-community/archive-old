[
    {
        "content": "<p>Hello,</p>\n<p>How can I write a function that takes as input a convergent sequence and outputs its limit? I've tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">noncomputable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">|</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">seq_has_lim</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span><span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n<span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convergent_seqs</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">seq_has_lim</span> <span class=\"n\">a</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lim_of_seq</span> <span class=\"o\">:</span> <span class=\"n\">convergent_seqs</span> <span class=\"bp\">→</span>  <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">seq_has_lim</span> <span class=\"n\">a</span> <span class=\"n\">L</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This does not work since the cases tactic requires that the goal is of type Prop (if I understood it correctly...). Also, from what I've managed to find here, apparently it is not a good idea to use tactics in a definition. I imagine I need to use the fact that limits are unique somewhere, but I don't see how.</p>",
        "id": 263784935,
        "sender_full_name": "Dudu",
        "timestamp": 1638732792
    },
    {
        "content": "<p>You use <code>classical.some</code></p>",
        "id": 263785348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638733337
    },
    {
        "content": "<p>Oh,  thank you.  But still, when doing something like this informally we normally first show that limits are unique so that our function is well defined. Here we didn't use that fact. Is the way to go here to just define the function </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lim_of_seq</span> <span class=\"o\">:</span> <span class=\"n\">convergent_seqs</span> <span class=\"bp\">→</span>  <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">seq_has_lim</span> <span class=\"n\">a</span> <span class=\"n\">L</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical.some</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and then show that any function in <code>convergent_seqs →  ℝ</code> that assigns a sequence to its limit must be equal to <code>lim_of_seq</code>?</p>",
        "id": 263787271,
        "sender_full_name": "Dudu",
        "timestamp": 1638736057
    },
    {
        "content": "<p>The way to think about <code>classical.some</code> is that Lean chooses once and for all an element of every nonempty type. You have an assertion that some limit exists, so the type of limits is nonempty, so the function returns the term of that type which it chose when you switched Lean on.</p>",
        "id": 263787337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638736135
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">lim_of_seq</span> <span class=\"o\">:</span> <span class=\"n\">convergent_seqs</span> <span class=\"bp\">→</span>  <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">a.2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lim_of_seq.is_limit</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">convergent_seqs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">seq_has_lim</span> <span class=\"n\">s.1</span> <span class=\"o\">(</span><span class=\"n\">lim_of_seq</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some_spec</span> <span class=\"n\">s.2</span>\n</code></pre></div>",
        "id": 263787409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638736250
    },
    {
        "content": "<p>This is just a style issue -- there's no need to use tactic mode to make the definition, and the moment you make the definition you should make the key API for the definition, namely the assertion that the definition returns something which satisfies the definition of the limit.</p>",
        "id": 263787424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638736305
    },
    {
        "content": "<p>The thing with mathematical content is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lim_of_seq.limit_unique</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">convergent_seqs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">seq_has_lim</span> <span class=\"n\">s.1</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">lim_of_seq</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263787488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638736402
    },
    {
        "content": "<p>I see, this cleared things up a lot. Thank you!</p>",
        "id": 263787838,
        "sender_full_name": "Dudu",
        "timestamp": 1638736850
    },
    {
        "content": "<p>In Lean the idiomatic thing to do is, perhaps surprisingly, not even make the subtype of convergent sequences, but define the limit of an arbitrary sequence! If it converges, define the limit to be something it converges to, and if it doesn't converge then just define the limit to be 37. Then you don't have to worry about all this <code>s.1</code> stuff.</p>",
        "id": 263788039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638737136
    },
    {
        "content": "<p>Maybe this is a little more idiomatic: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">noncomputable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">|</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_lim</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"c1\">-- def convergent_seqs :=</span>\n<span class=\"c1\">-- {a : ℕ → ℝ | ∃(L : ℝ), seq_has_lim a L}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">seq_has_lim</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">is_lim</span> <span class=\"n\">a</span> <span class=\"n\">L</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">lim_of_seq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">seq_has_lim</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lim_of_seq.is_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">seq_has_lim</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_lim</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">lim_of_seq</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">lim_of_seq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical.some_spec</span> <span class=\"n\">ha</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lim_of_seq.limit_unique</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">seq_has_lim</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_lim</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">lim_of_seq</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But there's nothing wrong with your way, especially if you're just experimenting.</p>",
        "id": 263788469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638737740
    },
    {
        "content": "<p>For the record, all this is already in mathlib, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lim\">docs#lim</a>. When I started using Lean, I thought that would be a very useful and common definition. It turns out I was completely wrong, and this is barely used.</p>",
        "id": 263788540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638737802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Wow, this approach really is surprising, but after some thought I <em>think</em> I see why it makes sense, I appreciate the suggestion :)</p>",
        "id": 263788963,
        "sender_full_name": "Dudu",
        "timestamp": 1638738274
    },
    {
        "content": "<p>The problem is when you start doing things like \"limit of sum is sum of limits\" -- you want to just add the sequences and talk about the limit of the sum, but if you can't even talk about the limit before you've proved it converges then it makes things much more convoluted. If you want to understand what I'm talking about, keep working the way you're doing!</p>\n<p>Another approach is not to even define this \"limit of a sequence\" function _at all_, and just prove things like <code>seq_has_lim a L -&gt; seq_has_lim b M -&gt; seq_has_lim (a + b) (L + M)</code>. This works fine.</p>",
        "id": 263789085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638738438
    },
    {
        "content": "<p>That was the approach I took in my course earlier this year: <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics/blob/master/src/week_3/Part_A_limits.lean\">https://github.com/ImperialCollegeLondon/formalising-mathematics/blob/master/src/week_3/Part_A_limits.lean</a></p>",
        "id": 263789169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638738515
    },
    {
        "content": "<p>I did try proving one lemma using the my first approach and realized that it would be a bit annoying,   I'll definitely use that last approach from now on.</p>\n<p>Also, this course looks great, I can't believe I didn't find it before!</p>",
        "id": 263790064,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1638739609
    },
    {
        "content": "<p>Did you do the tutorials project first? It's full of limits of sequences.</p>",
        "id": 263790243,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638739867
    },
    {
        "content": "<p>It's here: <a href=\"https://github.com/leanprover-community/tutorials\">https://github.com/leanprover-community/tutorials</a></p>",
        "id": 263790255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638739919
    },
    {
        "content": "<p>I did, but it didn't include this function that takes a sequence and returns its limit and I initially thought that that would be a better way to do things</p>",
        "id": 263790366,
        "sender_full_name": "Eduardo Freire",
        "timestamp": 1638740053
    }
]