[
    {
        "content": "<p>I am trying to prove a simple lemma:<br>\n<code>theorem cancel_denom {a b c : ℝ} (ha : 0 &lt; a) (hb : 0 &lt; b) (hc : 0 &lt; c) (h : (a / (a+b+c) ≥ b / (a+b+c)) ) : a ≥ b :=</code></p>\n<p>I tried using <code>div_le_div_iff_right</code>, however, I am not able to provide correct arguments. Can anyone please help?</p>",
        "id": 299504328,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1663566327
    },
    {
        "content": "<p>Can you please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and be more specific about what you tried/what errors you gave?</p>",
        "id": 299507234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663568196
    },
    {
        "content": "<p>Then we can probably give you more helpful feedback.</p>",
        "id": 299507242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663568204
    },
    {
        "content": "<p>I tried these:<br>\nTrial 1: using <code>div_le_div_iff_right</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cancel_denom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">habc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">div_le_div_iff_right</span> <span class=\"n\">habc</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">      type mismatch at application</span>\n<span class=\"cm\">        div_le_div_iff_right habc</span>\n<span class=\"cm\">      term</span>\n<span class=\"cm\">        habc</span>\n<span class=\"cm\">      has type</span>\n<span class=\"cm\">        0 &lt; a + b + c : Prop</span>\n<span class=\"cm\">      but is expected to have type</span>\n<span class=\"cm\">        ?m_1 : Type ?</span>\n<span class=\"cm\">      state:</span>\n<span class=\"cm\">      a b c : ℝ,</span>\n<span class=\"cm\">      ha : 0 &lt; a,</span>\n<span class=\"cm\">      hb : 0 &lt; b,</span>\n<span class=\"cm\">      hc : 0 &lt; c,</span>\n<span class=\"cm\">      h : a / (a + b + c) ≥ b / (a + b + c),</span>\n<span class=\"cm\">      h1 : b / (a + b + c) ≤ a / (a + b + c),</span>\n<span class=\"cm\">      h2 : b ≤ a ↔ a ≥ b,</span>\n<span class=\"cm\">      habc : 0 &lt; a + b + c</span>\n<span class=\"cm\">      ⊢ b ≤ a</span>\n<span class=\"cm\">      -/</span>\n</code></pre></div>\n<p>Trial 2: Using <code>cancel_denoms</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cancel_denom2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n <span class=\"k\">have</span> <span class=\"n\">habc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span>\n <span class=\"n\">cancel_denoms</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\"> a b c : ℝ,</span>\n<span class=\"cm\"> ha : 0 &lt; a,</span>\n<span class=\"cm\"> hb : 0 &lt; b,</span>\n<span class=\"cm\"> hc : 0 &lt; c,</span>\n<span class=\"cm\"> h : a / (a + b + c) ≥ b / (a + b + c),</span>\n<span class=\"cm\"> habc : 0 &lt; a + b + c</span>\n<span class=\"cm\"> ⊢ b ≤ a</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>\n<p>Trial 3: Using <code>div_le_div_iff_right</code> and few more arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cancel_denom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">habc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_le_div_iff_right</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">habc</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">      failed to synthesize type class instance for</span>\n<span class=\"cm\">      a b c : ℝ,</span>\n<span class=\"cm\">      ha : 0 &lt; a,</span>\n<span class=\"cm\">      hb : 0 &lt; b,</span>\n<span class=\"cm\">      hc : 0 &lt; c,</span>\n<span class=\"cm\">      h : a / (a + b + c) ≥ b / (a + b + c),</span>\n<span class=\"cm\">      h1 : b / (a + b + c) ≤ a / (a + b + c),</span>\n<span class=\"cm\">      h2 : b ≤ a ↔ a ≥ b,</span>\n<span class=\"cm\">      habc : 0 &lt; a + b + c</span>\n<span class=\"cm\">      ⊢ group ℝ</span>\n<span class=\"cm\">      state:</span>\n<span class=\"cm\">      a b c : ℝ,</span>\n<span class=\"cm\">      ha : 0 &lt; a,</span>\n<span class=\"cm\">      hb : 0 &lt; b,</span>\n<span class=\"cm\">      hc : 0 &lt; c,</span>\n<span class=\"cm\">      h : a / (a + b + c) ≥ b / (a + b + c),</span>\n<span class=\"cm\">      h1 : b / (a + b + c) ≤ a / (a + b + c),</span>\n<span class=\"cm\">      h2 : b ≤ a ↔ a ≥ b,</span>\n<span class=\"cm\">      habc : 0 &lt; a + b + c</span>\n<span class=\"cm\">      ⊢ b ≤ a</span>\n<span class=\"cm\">      -/</span>\n</code></pre></div>",
        "id": 299512766,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1663571436
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_le_div_iff_right\">docs#div_le_div_iff_right</a></p>",
        "id": 299516427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663573311
    },
    {
        "content": "<p>That last trial is a good one.</p>",
        "id": 299516492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663573335
    },
    {
        "content": "<p>It claims it can't find <code>group \\R</code>. Which makes sense.</p>",
        "id": 299516507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663573349
    },
    {
        "content": "<p>So it is a hint that this is not the right lemma.</p>",
        "id": 299516526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663573362
    },
    {
        "content": "<p>Instead, you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_le_div\">docs#div_le_div</a>_right₀</p>",
        "id": 299516606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663573419
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nI tried this but faced the similar issue:<br>\nTrial 4: using <code>div_le_div_right₀</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cancel_denom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">habc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_le_div_right₀</span> <span class=\"n\">ℝ</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">habc</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">      failed to synthesize type class instance for</span>\n<span class=\"cm\">      a b c : ℝ,</span>\n<span class=\"cm\">      ha : 0 &lt; a,</span>\n<span class=\"cm\">      hb : 0 &lt; b,</span>\n<span class=\"cm\">      hc : 0 &lt; c,</span>\n<span class=\"cm\">      h : a / (a + b + c) ≥ b / (a + b + c),</span>\n<span class=\"cm\">      h1 : b / (a + b + c) ≤ a / (a + b + c),</span>\n<span class=\"cm\">      h2 : b ≤ a ↔ a ≥ b,</span>\n<span class=\"cm\">      habc : a + b + c ≠ 0</span>\n<span class=\"cm\">      ⊢ linear_ordered_comm_group_with_zero ℝ</span>\n<span class=\"cm\">      state:</span>\n<span class=\"cm\">      a b c : ℝ,</span>\n<span class=\"cm\">      ha : 0 &lt; a,</span>\n<span class=\"cm\">      hb : 0 &lt; b,</span>\n<span class=\"cm\">      hc : 0 &lt; c,</span>\n<span class=\"cm\">      h : a / (a + b + c) ≥ b / (a + b + c),</span>\n<span class=\"cm\">      h1 : b / (a + b + c) ≤ a / (a + b + c),</span>\n<span class=\"cm\">      h2 : b ≤ a ↔ a ≥ b,</span>\n<span class=\"cm\">      habc : a + b + c ≠ 0</span>\n<span class=\"cm\">      ⊢ b ≤ a</span>\n<span class=\"cm\">      -/</span>\n</code></pre></div>",
        "id": 299534080,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1663581261
    },
    {
        "content": "<p>A <code>linear_ordered_comm_group_with_zero</code> is a group with a zero adjoined that's less than everything in the group. For example, the nonnegative reals or the nonnegative rationals. This is not the case of <code>ℝ</code>, however.</p>",
        "id": 299534793,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663581586
    },
    {
        "content": "<p>Oh yeah, (a + b + c) ≠ 0 can't be enough</p>",
        "id": 299535086,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663581692
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_le_div_right\">docs#div_le_div_right</a></p>",
        "id": 299535394,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663581834
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cancel_denom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ge_iff_le</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">habc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">div_le_div_right</span> <span class=\"n\">habc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 299535539,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663581904
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.positivity</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cancel_denom</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">div_le_div_right</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 299535569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663581922
    },
    {
        "content": "<p>Thanks alot <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>.</p>",
        "id": 299536283,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1663582254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439607\">@Ayush Agrawal</span> Whoops, my bad. Sorry for giving wrong advice.</p>",
        "id": 299537996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663582983
    },
    {
        "content": "<p>It's a bit misleading that a <code>linear_ordered_comm_group_with_zero</code> is a <code>linear_ordered_comm_group</code> with zero but not a linear ordered <code>comm_group_with_zero</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 299538281,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663583121
    },
    {
        "content": "<p>I guess I'm to blame for that <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 299538452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663583205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Cancelling.20Denominators.20for.20Real.20Inequalities/near/299537996\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"439607\">Ayush Agrawal</span> Whoops, my bad. Sorry for giving wrong advice.</p>\n</blockquote>\n<p>No problem at all! I got to see this aspect more clearly so thanks.</p>",
        "id": 299538531,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1663583244
    },
    {
        "content": "<p>Apparently, it's Kenny: <a href=\"https://github.com/leanprover-community/mathlib/pull/3072\">#3072</a></p>",
        "id": 299538543,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663583254
    },
    {
        "content": "<p>Sure, but he ported from the perfectoid project.</p>",
        "id": 299538694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663583329
    },
    {
        "content": "<p>I guess you're to blame for that, then <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 299538741,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663583357
    }
]