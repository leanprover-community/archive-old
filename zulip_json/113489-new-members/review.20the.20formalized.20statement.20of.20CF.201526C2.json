[
    {
        "content": "<p>so i'm trying to formalize the game described <a href=\"https://codeforces.com/contest/1526/problem/C2\">here</a><br>\nand this is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.omega</span>\n<span class=\"kd\">structure</span> <span class=\"n\">game_state</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">running_total</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">score</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">remaining</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"n\">game_state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">(</span><span class=\"n\">running_total</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"o\">{</span>\n  <span class=\"n\">running_total</span> <span class=\"o\">:=</span> <span class=\"n\">running_total</span><span class=\"o\">,</span>\n  <span class=\"n\">score</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">remaining</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">ignore</span> <span class=\"o\">(</span><span class=\"n\">previous</span> <span class=\"o\">:</span> <span class=\"n\">game_state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"n\">previous</span> <span class=\"bp\">→</span> <span class=\"n\">game</span> <span class=\"o\">{</span>\n  <span class=\"n\">running_total</span> <span class=\"o\">:=</span> <span class=\"n\">previous.running_total</span><span class=\"o\">,</span>\n  <span class=\"n\">score</span> <span class=\"o\">:=</span> <span class=\"n\">previous.score</span><span class=\"o\">,</span>\n  <span class=\"n\">remaining</span> <span class=\"o\">:=</span> <span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">previous.remaining</span>\n<span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">take</span> <span class=\"o\">(</span><span class=\"n\">previous</span> <span class=\"o\">:</span> <span class=\"n\">game_state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">previous.running_total</span> <span class=\"bp\">-</span> <span class=\"n\">value</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"n\">previous</span> <span class=\"bp\">→</span> <span class=\"n\">game</span> <span class=\"o\">{</span>\n  <span class=\"n\">running_total</span> <span class=\"o\">:=</span> <span class=\"n\">previous.running_total</span> <span class=\"bp\">-</span> <span class=\"n\">value</span><span class=\"o\">,</span>\n  <span class=\"n\">score</span> <span class=\"o\">:=</span> <span class=\"n\">previous.score</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">remaining</span> <span class=\"o\">:=</span> <span class=\"n\">value</span><span class=\"o\">::</span><span class=\"n\">previous.remaining</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">make_goal</span> <span class=\"o\">(</span><span class=\"n\">values</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">score</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">game_state</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">running_total</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">score</span> <span class=\"o\">:=</span> <span class=\"n\">score</span><span class=\"o\">,</span>\n  <span class=\"n\">remaining</span> <span class=\"o\">:=</span> <span class=\"n\">values</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">game</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">possible</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"o\">(</span><span class=\"n\">make_goal</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">make_goal</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">take</span> <span class=\"o\">{</span> <span class=\"n\">running_total</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">score</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">remaining</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"mi\">1</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">omega</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ignore</span> <span class=\"o\">{</span> <span class=\"n\">running_total</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">score</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">remaining</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">take</span> <span class=\"o\">{</span> <span class=\"n\">running_total</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">score</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">remaining</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"mi\">3</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">omega</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">empty</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>i have several questions:</p>\n<ul>\n<li>does the inductive definition accurately describe the game</li>\n<li>is there a better way to encode the game</li>\n</ul>",
        "id": 240702285,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622294865
    },
    {
        "content": "<p>i haven't done something like this before sorry</p>",
        "id": 240702333,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622294910
    },
    {
        "content": "<p>so... <code>game (make_goal [a1, a2, a3, ...] score)</code> means it's possible to drink <code>score</code> potions if the potion values are [a1, a2, a3, ...]</p>",
        "id": 240702604,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622295285
    },
    {
        "content": "<p>If you lint your file by typing <code>#lint</code> at the end, then you will discover that you have undocumented definitions.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>/- The `doc_blame` linter reports: -/\n/- DEFINITIONS ARE MISSING DOCUMENTATION STRINGS: -/\n#print game_state /- constant missing doc string -/\n#print game /- constant missing doc string -/\n#print make_goal /- def missing doc string -/\n</code></pre></div>\n<p>Carefully documenting your definitions makes your code much more readable, and greatly helps any human trying to understand what your API does. For example I have a look at your <code>game_state</code> and I have no idea what the difference is between <code>score</code> and <code>running_total</code>, and you have not explained anywhere what these fields are supposed to represent.</p>",
        "id": 240710500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622306773
    },
    {
        "content": "<p>You should try for a design that doesn't require writing an explicit <code>game_state</code> at each step in the proof. It seems quite plausible that the proof could be <code>apply take, apply ignore, apply take, dec_trivial</code> if designed right.</p>",
        "id": 240730969,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622337083
    },
    {
        "content": "<p>That is, rather than taking <code>game previous</code> as an argument, and returning <code>game XXX</code> where <code>XXX</code> is some modification of <code>previous</code>, do it the other way around.</p>",
        "id": 240731016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622337129
    },
    {
        "content": "<p>It may also be cleaner to not use a structure for <code>game_state</code>, and directly use an inductive type. I haven't tried doing this so I'm not sure if that helps yet.</p>",
        "id": 240731024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622337167
    },
    {
        "content": "<p>I'd consider renaming <code>game</code> to <code>game_state.is_possible</code></p>",
        "id": 240744343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622361496
    },
    {
        "content": "<p>wait, how? names aren't supposed to have dots <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 240748414,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622368937
    },
    {
        "content": "<p>is there a way to put dots inside inductive type names?</p>",
        "id": 240748434,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622369010
    },
    {
        "content": "<p>ah, i can just put dots in them <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> silly me</p>",
        "id": 240748633,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622369368
    },
    {
        "content": "<p>til dots don't have special meaning in lean</p>",
        "id": 240748680,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622369425
    },
    {
        "content": "<p>wait <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I don't quite understand what you're saying at all, what do you mean by \"the other way around\"? take XXX, return previous? then i still need to write an explicit game state at each step of the argument</p>",
        "id": 240749303,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622370470
    },
    {
        "content": "<p>am i missing something</p>",
        "id": 240749345,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622370496
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">game_state</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"n\">game_state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">[]⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">ignore</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">game</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">::</span><span class=\"n\">r</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">take</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">game</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">::</span><span class=\"n\">r</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">game</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">possible</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">take</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ignore</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">take</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">empty</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240750023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622371721
    },
    {
        "content": "<p>(Apologies to Kevin for the lack of doc-strings!)</p>",
        "id": 240750025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622371737
    }
]