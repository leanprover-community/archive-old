[
    {
        "content": "<p>I want to build a set that contains {(0,0), (1, 1), (1, 0), (0,1)} without just summing them, but I can't seem to find how,<br>\nI tried:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">{(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}}</span>\n</pre></div>\n\n\n<p>But in the first instance CoCalc doesn't recognise set.prod, this might be an import problem, but in the Mathlib I can't find what I should import specifically.<br>\nFor the second attempt the compiler just says that it use sorry, even though I don't.<br>\nCould anyone tell what went wrong in these two examples?</p>",
        "id": 195276357,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1587806156
    },
    {
        "content": "<p><code>import data.set.basic</code> will probably make the first one work.</p>",
        "id": 195276702,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587806784
    },
    {
        "content": "<p>For the second, you could use <code>{p : ℤ × ℤ | p.1 ∈ {0,1} ∧ p.2 ∈ {0,1}}</code> instead.</p>",
        "id": 195276707,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587806833
    },
    {
        "content": "<p>The second notation isn't supported by Lean, there has to be a single variable to the left of the vertical bar.</p>",
        "id": 195276713,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587806864
    },
    {
        "content": "<p>why do you want to build {(0,0),(1,1),(1,0),(0,1)}?</p>",
        "id": 195276754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587806915
    },
    {
        "content": "<p>Maybe this notation could be made to work in Lean 4.</p>",
        "id": 195276762,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587806946
    },
    {
        "content": "<p>If I try <code>{p : ℤ × ℤ | p.1 ∈ {0,1} ∧ p.2 ∈ {0,1}}</code> as Bryan suggested then I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</pre></div>",
        "id": 195276906,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1587807229
    },
    {
        "content": "<p>I want to build this set for the exercise on Codewars about symmetric and transitive relations that are not reflexive.</p>",
        "id": 195276961,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1587807287
    },
    {
        "content": "<p>Oh, that's weird. It worked in <code>#check</code>.  </p>\n<p>Making an edit because this no longer matters. This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℤ</span><span class=\"o\">)}</span>\n</pre></div>",
        "id": 195277072,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587807485
    },
    {
        "content": "<p>Remember this notation is <a href=\"#narrow/stream/113488-general/topic/set.20notation\" title=\"#narrow/stream/113488-general/topic/set.20notation\">randomly broken</a></p>",
        "id": 195277103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587807593
    },
    {
        "content": "<p>And here you mix it with another notoriously broken notation <code>{0, 1}</code></p>",
        "id": 195277154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587807630
    },
    {
        "content": "<p>wrong link?</p>",
        "id": 195277155,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587807630
    },
    {
        "content": "<p>Fixed</p>",
        "id": 195277218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587807782
    },
    {
        "content": "<p>Thanks Kenny</p>",
        "id": 195277222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587807785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294534\">Emiel Lanckriet</span> <a href=\"#narrow/stream/113489-new-members/topic/Building.20sets/near/195276961\" title=\"#narrow/stream/113489-new-members/topic/Building.20sets/near/195276961\">said</a>:</p>\n<blockquote>\n<p>I want to build this set for the exercise on Codewars about symmetric and transitive relations that are not reflexive.</p>\n</blockquote>\n<p>if you want to build a relation, you can just build a proposition Z -&gt; Z -&gt; Prop without going through the set-theoretic nonsense</p>",
        "id": 195277266,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587807853
    },
    {
        "content": "<p>But how do I arrive at a Prop?</p>",
        "id": 195277285,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1587807907
    },
    {
        "content": "<p>for example, the above set would be <code>λ p q, (p = 0 ∨ p = 1) ∧ (q = 0 ∨ q = 1)</code></p>",
        "id": 195277351,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587808023
    },
    {
        "content": "<p>a Prop is just a true/false statement</p>",
        "id": 195277358,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587808040
    },
    {
        "content": "<p>Ah, ok, thanks, that should indeed make my live easier.</p>",
        "id": 195277408,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1587808114
    }
]