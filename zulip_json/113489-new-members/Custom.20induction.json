[
    {
        "content": "<p>Good evening,</p>\n<p>As an exercise, I'm trying to formalize a piece of math that I have around Cartesian products. Because I need to know each component involved in the product, I don't think I can rely on the built-in notion of Cartesian products. E.g. <code>Nat * Nat * Nat</code> is not the same as <code>(Nat * Nat) * Nat</code> or <code>Nat * (Nat * Nat)</code> w.r.t. the theorems I want to talk about.</p>\n<p>To formalize that, I tried to do it using a heterogeneous list and attach a count to get pretty much the same behavior as a Cartesian product. Here's my code I'm playing with:</p>\n<div class=\"codehilite\"><pre><span></span>universe u\ninductive h_list : Type (u+1)\n| nil\n| cons {α : Type u} (h:α) (t:h_list) : h_list\n\nnamespace h_list\n\nnotation h :: t := cons h t\n\nnotation `[` l:(foldr `, ` (h t, cons h t) nil `]`) := l\n\ndef length : h_list → ℕ\n| [] := 0\n| (cons _ t) := 1 + t.length\n\ndef append : h_list → h_list → h_list\n| [] ys := ys\n| (x::xs) ys := x :: (append xs ys)\n\ninstance h_list_has_append : has_append h_list := ⟨append⟩\n\n#check 3 :: &quot;hello&quot; :: nil\n#check [&#39;a&#39;, &quot;bee&quot;, 3]\nend h_list\n\ndef tuple (n : ℕ) := { l : h_list // l.length = n }\nnamespace tuple\nopen h_list\n\ndef cons {α n} : α → tuple n → tuple (n + 1)\n| h ⟨t, h_n⟩ := ⟨h :: t, by {unfold length, rw[h_n], simp}⟩\n\ndef singleton {α} : α → tuple 1\n| x := ⟨[x], by unfold length⟩\n\ndef append {n m} : tuple n → tuple m → tuple (n + m)\n| ⟨l, h_n⟩ ⟨r, h_m⟩ := ⟨l ++ r, sorry⟩\n\nnotation `[` l:(foldr ` ⊗ ` (h t, cons h t) nil `]`) := l\n\ninfix ` ⊗ `:30 := append\n#check append\nend tuple\n\n#check tuple.cons\n#check ℕ × nat × ℤ × int\n#check (1, 3, 4)\n#check prod\n</pre></div>\n\n\n<p>In the bit of sorry, I would like to show the property by induction on <code>l</code>. When I try to use the built-in tactic, the IH is wrong; it is only getting smaller w.r.t. <code>l</code> and not also <code>n</code>. Similarly induction on <code>n</code> doesn't work either. </p>\n<p>Do I understand correctly, that I need to prove a different kind of induction principle to do this kind of induction and then call the <code>induction</code> tactic with <code>using</code>?</p>\n<p>Alternatively, is there some much less clunky way to achieve what I want?</p>\n<p>Thanks Dany</p>",
        "id": 173687879,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566329184
    },
    {
        "content": "<p>Your code strikes me as having a lot of dependent types. If you need them to be this dependent, you might find all that you need in <code>data.vector</code>. Your <code>tuple</code> construction can be defined as <code>def tuple (n : nat) := vector (Σ t : Type u, t) n</code>. </p>\n<p>You might find that reasoning in terms of <code>list (Σ t : Type u, t)</code> will be good enough for most of your theorems. Having the length in the type gets very annoying when the length varies</p>",
        "id": 173688491,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1566329724
    },
    {
        "content": "<p>Ok, thanks for the hints</p>",
        "id": 173688904,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1566330015
    }
]