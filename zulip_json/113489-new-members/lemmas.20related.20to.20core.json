[
    {
        "content": "<p>Where would something like the lemma below go? The <code>mod_eq_of_lt</code> is in core.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">one_mod_eq_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">add_lt_add_right</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ_pos</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206821907,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597329196
    },
    {
        "content": "<p><code>data.nat.basic</code> seems reasonable. (<code>zero_mod</code> for int is in <code>data.int.basic</code> for example)</p>",
        "id": 206822515,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597329488
    },
    {
        "content": "<p>I think you can drop the <code>exact</code> and use term mode directly</p>",
        "id": 206909280,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597394717
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">one_mod_eq_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">add_lt_add_right</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ_pos</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206909313,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597394745
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3763\">#3763</a></p>",
        "id": 206919419,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597404151
    }
]