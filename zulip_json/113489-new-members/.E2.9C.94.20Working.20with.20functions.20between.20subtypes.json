[
    {
        "content": "<p>I have some subtypes of <code>ℚ</code> and functions between them, but I think I'm missing something basic when it comes to proving anything about those functions. Here's a cut-down example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">LR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infl_well_defined</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x_pos</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">div_pos</span> <span class=\"n\">x_pos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">infl</span> <span class=\"o\">:</span> <span class=\"n\">LR</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_pos</span><span class=\"o\">,</span> <span class=\"n\">x_lt_one</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">infl_well_defined</span> <span class=\"n\">x_pos</span> <span class=\"n\">x_lt_one</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infl_val</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">LR</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">infl</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x.val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How do I make progress at that <code>sorry</code>? No amount of <code>unfold</code>, <code>simp</code>, <code>dsimp</code> or <code>rw</code> seems to get me further than a goal of <code>↑(infl._match_1 x) = ↑x / (1 - ↑x)</code>, and I don't seem to be able to unfold <code>infl._match_1</code> any further.</p>\n<p>(This is with Lean 3.42.1 and recent mathlib.)</p>",
        "id": 282341119,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1652517318
    },
    {
        "content": "<p><code>refl</code>?</p>",
        "id": 282341320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652517564
    },
    {
        "content": "<p>Oh wait, you pattern-matched in the definition.</p>",
        "id": 282341328,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652517594
    },
    {
        "content": "<p>Yes, I think I knew that was going to get me into trouble.</p>",
        "id": 282341369,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1652517608
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">LR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infl_well_defined</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x_pos</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">div_pos</span> <span class=\"n\">x_pos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">infl</span> <span class=\"o\">:</span> <span class=\"n\">LR</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x.1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x.1</span><span class=\"o\">),</span> <span class=\"n\">infl_well_defined</span> <span class=\"n\">x.2.1</span> <span class=\"n\">x.2.2</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infl_val</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">LR</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">infl</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x.val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 282341379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652517641
    },
    {
        "content": "<p>I can rewrite to avoid that, but I'd still like to know whether there's something that allows me to make progress from where I am.</p>",
        "id": 282341381,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1652517654
    },
    {
        "content": "<p>I've been using Lean extensively for a year and I still don't know how to make progress on such nasty goals <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 282341396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652517695
    },
    {
        "content": "<p>Oh actually this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">LR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infl_well_defined</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x_pos</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">div_pos</span> <span class=\"n\">x_pos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">infl</span> <span class=\"o\">:</span> <span class=\"n\">LR</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_pos</span><span class=\"o\">,</span> <span class=\"n\">x_lt_one</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">infl_well_defined</span> <span class=\"n\">x_pos</span> <span class=\"n\">x_lt_one</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">infl_val</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">infl</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x.val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_pos</span><span class=\"o\">,</span> <span class=\"n\">x_lt_one</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 282341463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652517771
    },
    {
        "content": "<p>Ah, nice!</p>",
        "id": 282341478,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1652517813
    },
    {
        "content": "<p>Or in tactic mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">infl_val</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">LR</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">infl</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">x.val</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x.val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_prop</span><span class=\"o\">,</span> <span class=\"n\">x_val</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282341482,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652517818
    },
    {
        "content": "<p>So general rule is that if I use pattern matching to create something, I should expect to have to use pattern matching to write the proof.</p>",
        "id": 282341489,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1652517837
    },
    {
        "content": "<p>But <code>cases x</code> doesn't, because you pattern-matched on the proof as well <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 282341543,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652517874
    },
    {
        "content": "<p>At least until you set up the api as you are doing here</p>",
        "id": 282341545,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652517883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Perfect - thank you.</p>",
        "id": 282341565,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1652517950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133189\">Mark Dickinson</span> has marked this topic as resolved.</p>",
        "id": 282341630,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652518048
    }
]