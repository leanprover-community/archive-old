[
    {
        "content": "<p>So I am going through some basic exercises in:<br>\n<a href=\"https://leanprover-community.github.io/mathematics_in_lean/basics.html#using-theorems-and-lemmas\">https://leanprover-community.github.io/mathematics_in_lean/basics.html#using-theorems-and-lemmas</a><br>\n(using the in-browser version of Lean)</p>\n<p>And I am at a point where I have the goal:<br>\n⊢ a * b ≤ (a ^ 2 + b ^ 2) / 2</p>\n<p>My approach is to do:<br>\nhave h₁ : 0 &lt; 2,<br>\n(which can be proven by linarith)<br>\nand then use \"mul_le_mul_right\": 0 &lt; c → (a * c ≤ b * c ↔ a ≤ b)<br>\nto get to something like:<br>\n⊢ a * b * 2 ≤ (a ^ 2 + b ^ 2) / 2 * 2</p>\n<p>But I can't seem to find the right incantation with apply or have.<br>\nThe best I could do was:<br>\nhave g := mul_le_mul_right(h₁),</p>\n<p>which produces the messy:<br>\ng : ?m_1 * 2 ≤ ?m_2 * 2 ↔ ?m_1 ≤ ?m_2<br>\n⊢ a * b ≤ (a ^ 2 + b ^ 2) / 2</p>\n<p>Is there a way to pattern-match or directly set<br>\n\"a\" = a * b<br>\n\"b\" = (a ^ 2 + b ^ 2) / 2</p>\n<p>or maybe I should do a different approach anyway?</p>\n<p>Thanks for your help.</p>",
        "id": 226223426,
        "sender_full_name": "Thomas Strohmann",
        "timestamp": 1613186528
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 226223595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613186843
    },
    {
        "content": "<p>also <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 226223599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613186854
    },
    {
        "content": "<p>Here's what I think you want as an MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- use mul_le_mul_right?</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_right</span><span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226223740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613187049
    },
    {
        "content": "<p>We can try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but it complains about a type mismatch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n</code></pre></div>\n<p>because <code>0 &lt; 2</code> is actually proving a theorem about natural numbers and not reals. If we put a type ascription in it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226223819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613187167
    },
    {
        "content": "<p>it's also possible to use <code>rw ← mul_le_mul_right h₁,</code> there, or even <code>rw ← mul_le_mul_right,</code> although the latter leaves a bunch of side goals about the number we want to multiply by. If we follow it up with a theorem about <code>a/b*b</code> the metavariables go away, and <code>norm_num</code> will solve the concrete goals about numbers</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_le_mul_right</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel</span><span class=\"o\">],</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226223929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613187323
    },
    {
        "content": "<p>You don't want to divide by two and then multiply by two really. You should use a more appropriate lemma of the form  a * c  &lt;= b -&gt; a &lt;= b / c (under appropriate assumptions), which is also bound to be in the library.</p>",
        "id": 226236335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613208720
    },
    {
        "content": "<p>Having looked recently, a lot of lemmas of that form seen to exist only for inv, not div</p>",
        "id": 226238567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613212565
    },
    {
        "content": "<p>Would <code>le_div_iff</code> work with these assumptions?</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/ordered_field.html#le_div_iff\">https://leanprover-community.github.io/mathlib_docs/algebra/ordered_field.html#le_div_iff</a></p>",
        "id": 226242821,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613219334
    },
    {
        "content": "<p>Ah, I bet inv is preferred for lemmas about groups while div is preferred for field lemmas, or something</p>",
        "id": 226243842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613221042
    },
    {
        "content": "<p>I am not sure about the conventions, but I do have a hard time whenever I need to deal with divisions</p>",
        "id": 226243898,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613221132
    }
]