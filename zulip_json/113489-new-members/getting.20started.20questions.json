[
    {
        "content": "<p>Is there an existing stream for beginner questions? I am puzzled by line 49 of the beginner exercise file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"n\">is_a_max_of</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">is_max.</span>\n</code></pre></div>\n<p>What does 55 stand for? It may be helpful to add an explanation in the tutorial.</p>",
        "id": 244983317,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1625530267
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/getting.20started.20questions\">#general &gt; getting started questions</a> by <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span></p>",
        "id": 244984137,
        "sender_full_name": "Notification Bot",
        "timestamp": 1625531433
    },
    {
        "content": "<p>The <code>55</code> denotes the \"precedence\" of the notation. It's not something you have to worry about at that point in the tutorial, but if you're interested you can read more about it in TPiL: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#notation\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#notation</a></p>\n<p>(As you can see, I've moved your question to the <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> stream.)</p>",
        "id": 244984178,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1625531518
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>! I added this as a comment in the tutorial.</p>",
        "id": 244984835,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1625532533
    },
    {
        "content": "<p>I tried compiling the tutorial exercise tutorials/src/exercises/00_first_proofs.lean but got a bunch of errors.  I tried both homebrew and the curl installation. Any tip on how compile works?</p>\n<p>yunjiang.jiang@jdadmins-MacBook-Pro dev % lean tutorials/src/exercises/00_first_proofs.lean<br>\n/Users/yunjiang.jiang/dev/tutorials/src/exercises/00_first_proofs.lean:1:0: error: file 'data/real/basic' not found in the search path<br>\nUse 'lean --path' to see where lean is looking, or <a href=\"https://leanprover-community.github.io/file-not-found.html\">https://leanprover-community.github.io/file-not-found.html</a> for more<br>\n/Users/yunjiang.jiang/dev/tutorials/src/exercises/00_first_proofs.lean:1:0: error: file 'tactic/suggest' not found in the search path<br>\nUse 'lean --path' to see where lean is looking, or <a href=\"https://leanprover-community.github.io/file-not-found.html\">https://leanprover-community.github.io/file-not-found.html</a> for more<br>\n/Users/yunjiang.jiang/dev/tutorials/src/exercises/00_first_proofs.lean:11:0: error: invalid import: data.real.basic<br>\ncould not resolve import: data.real.basic<br>\n/Users/yunjiang.jiang/dev/tutorials/src/exercises/00_first_proofs.lean:11:0: error: invalid import: tactic.suggest<br>\ncould not resolve import: tactic.suggest<br>\n/Users/yunjiang.jiang/dev/tutorials/src/exercises/00_first_proofs.lean:15:0: error: command expected<br>\n/Users/yunjiang.jiang/dev/tutorials/src/exercises/00_first_proofs.lean:24:7: error: unknown identifier 'upper_bounds'<br>\n/Users/yunjiang.jiang/dev/tutorials/src/exercises/00_first_proofs.lean:27:23: error: unknown identifier 'ℝ'<br>\n/Users/yunjiang.jiang/dev/tutorials/src/exercises/00_first_proofs.lean:27:35: error: unknown identifier 'ℝ'</p>\n<p>...</p>",
        "id": 245626479,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1626037294
    },
    {
        "content": "<p>Did you install the tutorial using <code>leanproject</code>? You need to be in the <code>tutorial</code> directory to make command line Lean work as Lean needs to know precisely which version of Lean and mathlib it's using  and it will see it from the leanpkg.toml file in the tutorial directory.</p>",
        "id": 245627322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626037663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks! I installed using leanproject and it did work inside tutorial directory now. The latex shortcut with vscode is also really nice.</p>",
        "id": 245627541,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1626037875
    },
    {
        "content": "<p>Also this line does not work for me <code>code tutorials</code>. Is the code command specific to MacOS? I am not familiar with it.</p>",
        "id": 245627608,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1626038012
    },
    {
        "content": "<p>Just open VS Code in any way you like, and then select \"File -&gt; Open Folder\" and select the tutorials directory.</p>",
        "id": 245627656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626038065
    },
    {
        "content": "<p>I have a really hard time understanding this proof in the tutorial. What does the line <code>cases hx with x_in x_up</code> mean exactly? Are x_in and x_up the two cases that hx gets broken into? Is the unique maximum property of \\R used implicitly in linarith?</p>\n<p>/-<br>\nLet's prove something now! A set of real numbers has at most one maximum. Here<br>\neverything left of the final <code>:</code> is introducing the objects and assumption. The equality<br>\n<code>x = y</code> right of the colon is the conclusion.<br>\n-/<br>\nlemma unique_max (A : set ℝ) (x y : ℝ) (hx : x is_a_max_of A) (hy : y is_a_max_of A) : x = y :=<br>\nbegin<br>\n  -- We first break our assumptions in their two constituent pieces.<br>\n  -- We are free to choose the name following <code>with</code><br>\n  cases hx with x_in x_up,<br>\n  cases hy with y_in y_up,<br>\n  -- Assumption <code>x_up</code> means x isn't less than elements of A, let's apply this to y<br>\n  specialize x_up y,<br>\n  -- Assumption <code>x_up</code> now needs the information that <code>y</code> is indeed in <code>A</code>.<br>\n  specialize x_up y_in,<br>\n  -- Let's do this quicker with roles swapped<br>\n  specialize y_up x x_in,<br>\n  -- We explained to Lean the idea of this proof.<br>\n  -- Now we know <code>x ≤ y</code> and <code>y ≤ x</code>, and Lean shouldn't need more help.<br>\n  -- <code>linarith</code> proves equalities and inequalities that follow linearly from<br>\n  -- the assumption we have.<br>\n  linarith,<br>\nend</p>",
        "id": 245632175,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1626045035
    },
    {
        "content": "<p>Are you able to step through the proof to see how the goal state changes after each tactic?</p>\n<p>Assuming you do, then what <code>cases</code> does is take <code>hx</code>, which is a proof that <code>x is_a_max_of A</code>, and then split it up into its two parts and give the parts names.  If I remember correctly, <code>x is_a_max_of A</code> is a conjunction consisting of the fact that <code>x ∈ A</code> and that <code>x</code> is at least as large as every element of <code>A</code>.  So, <code>x_in</code> becomes a proof of the first fact, and <code>x_up</code> a proof of the second.</p>",
        "id": 245632431,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626045480
    },
    {
        "content": "<p><code>linarith</code> looks at inequalities in the current context and tries to prove the goal automatically.  I don't think it knows anything about <code>ℝ</code> per se.</p>",
        "id": 245632493,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626045589
    },
    {
        "content": "<p>Also, if this is the <code>00_first_proofs</code> file, if I remember right it's more of an overview of things that are covered again in the next tutorials, so you might want to skip ahead if.</p>",
        "id": 245632559,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626045677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thanks that helps a lot. How does stepping through work with lean? Also the lemma is false for general posets right? So surely it uses the linear ordering property of A somewhere? I will take a look at the next tutorial as you suggested.</p>",
        "id": 245632856,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1626046152
    },
    {
        "content": "<p>Are you using VS Code? There should be a goal window that you can open up, and as you move your cursor around it will update with relevant information.</p>",
        "id": 245633033,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626046414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"425243\">@Yunjiang Jiang</span> I haven't opened up this file to check, but based on the comments that you have copied, I'm pretty sure <code>linarith</code> is just applying an antisymmetry lemma given the fact that <code>x ≤ y</code> and <code>y ≤ x</code> have been proved.  The lemma might be false in general, but this last step is true for posets.  (<code>linarith</code> doesn't seem to apply the general poset lemma <code>le_antisymm</code> but rather its own <code>linarith.eq_of_not_lt_of_not_gt</code> for linear orders.)</p>\n<p>If you don't have an interactive goal window working, this will be very hard to follow!</p>",
        "id": 245633279,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626046782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I managed to get the goal displayed on the side panel now. Previously I opened a vscode workspace at the parent directory of the tutorial project, which had many compilation errors. It's indeed quite useful! Regarding posets, you are right linarith application is pretty straightforward. The deduction of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\"> x \\le y </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> actually comes from the definition of is_max, which is given above</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The set of upper bounds of a set of real numbers ℝ -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">up_bounds</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Predicate `is_max a A` means `a` is a maximum of `A` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_max</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">up_bounds</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 245633941,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1626047807
    },
    {
        "content": "<p>To aid your readers, enclose a Lean code block with triple ` above and below, see <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The set of upper bounds of a set of real numbers ℝ -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">up_bounds</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Predicate is_max a A means a is a maximum of A -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_max</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">up_bounds</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 245634595,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1626048905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  DONE. Thanks.</p>",
        "id": 245634797,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1626049295
    },
    {
        "content": "<p>I am not following the definition of set:<code>def set (α : Type u) := α → Prop</code> in set.lean. Can someone help me dissect it?</p>",
        "id": 245634860,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1626049376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"425243\">@Yunjiang Jiang</span> <code>Prop</code> is the type of all propositions.  There are only two, <code>true</code> and <code>false</code>.  A function <code>α → Prop</code> is a <em>predicate</em> on <code>α</code> in basically the usual logic sense -- for each term of <code>α</code> the function selects either <code>true</code> or <code>false</code>.  Predicates are the same as sets, in that elements of a set are those terms for which the predicate evaluates to <code>true</code>.  (Conversely, if you have a set <code>s</code>, then the function that for a given <code>a</code> evaluates to whether <code>a ∈ s</code> is a predicate.)</p>\n<p>The definition says \"given a type <code>α</code>, then <code>set α</code> is equal to the type of all functions <code>α → Prop</code>.  Don't worry about the <code>u</code> for now.</p>",
        "id": 245635502,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626050413
    },
    {
        "content": "<p>The set notation <code>{ x : ℝ | ∀ a ∈ A, a ≤ x}</code> is a special way to write a predicate that should be interpreted as a set (and it's designed to look like the usual set builder notation in math).  A <code>set ℝ</code> in this case.  This says \"to decide whether an element <code>x</code> is in this set, evaluate to whether <code>∀ a ∈ A, a ≤ x</code>.\"  So it can be viewed as a predicate <code>ℝ → Prop</code>.</p>",
        "id": 245635587,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626050628
    },
    {
        "content": "<p>The <code>∈</code> notation is merely a way to evaluate a set's underlying predicate.  The statement <code>x ∈ up_bounds A</code> is exactly the same as <code>∀ a ∈ A, a ≤ x</code> due to the definition of <code>up_bounds</code>.</p>",
        "id": 245635650,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626050723
    },
    {
        "content": "<p>You can technically also write <code>x ∈ up_bounds A</code> as <code>(up_bounds A) x</code> since, as we've established, <code>up_bounds A</code> is also a function <code>ℝ → Prop</code>, but that's considered somewhat bad style since the way sets are encoded as predicates is an implementation detail.</p>",
        "id": 245635779,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626050982
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 245635843,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626051066
    },
    {
        "content": "<p>Several questions regarding this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is <code>h</code> a special keyword in lean that always refers to the hypothesis (stuff in bracket) or an antecedent of the compound proof that follows? Also<br>\nsince <code>by</code> is supposed to stand for begin/end pair, I tried the following, but got a bunch of compile errors.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span>\n    <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">linarith</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"n\">linarith</span>\n      <span class=\"kd\">end</span>\n    <span class=\"kd\">end</span>\n  <span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245646012,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1626066708
    },
    {
        "content": "<blockquote>\n<p>Is h a special keyword in lean that always refers to the hypothesis (stuff in bracket) or an antecedent of the compound proof that follows?</p>\n</blockquote>\n<p>No, <code>assume</code> is a keyword (equivalent to <code>\\lam</code> or <code>fun</code>) that should be followed by a name that is bound to the antecedent. It's basically the name of the function parameter and it can be whatever you want</p>",
        "id": 245646465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626067388
    },
    {
        "content": "<blockquote>\n<p>since by is supposed to stand for begin/end pair, I tried the following, but got a bunch of compile errors.</p>\n</blockquote>\n<p>You got the scoping wrong in your example. <code>exact</code> is taking a lambda <code>assume h, ...</code> where the body of the lambda is a triple <code>⟨(y-x)/2, ..., ...⟩</code>, where the two tuple arguments are <code>by linarith</code>. So the begin end equivalent would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">linarith</span> <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">linarith</span> <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245646566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626067556
    },
    {
        "content": "<p>importantly, the difference between <code>by tac</code> and <code>begin tac, tac, ... , end</code> is that <code>by tac</code> only takes one tactic (although you can build composite tactics using <code>;</code> that count as one for this purpose) while <code>begin ... end</code> takes a comma separated list of tactics. Using a comma in <code>by tac, ...</code> will take you back out of tactic mode and that comma should mean something in the surrounding expression context (here it's part of a pairing operator)</p>",
        "id": 245646696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626067691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks for the thorough explanation. I just figured the by translation part also. What's an example where the dummy variable <code>h</code> is actually used by an assume clause?</p>",
        "id": 245646801,
        "sender_full_name": "Yunjiang Jiang",
        "timestamp": 1626067900
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 245646853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626067953
    },
    {
        "content": "<p>By the way, the proof is actually using <code>h</code> in that example, but it's being automatically picked up by <code>linarith</code> so the name itself isn't important. I can do something similar in this example by using the assumption tactic to be vague about which hypothesis is being used:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 245646956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626068131
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ta_l0hc58CNY2pZIARHhK28y/Screen-Shot-2021-12-05-at-10.10.43-PM.png\">Screen-Shot-2021-12-05-at-10.10.43-PM.png</a> <br>\nAnyone know what I should do here?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ta_l0hc58CNY2pZIARHhK28y/Screen-Shot-2021-12-05-at-10.10.43-PM.png\" title=\"Screen-Shot-2021-12-05-at-10.10.43-PM.png\"><img src=\"/user_uploads/3121/ta_l0hc58CNY2pZIARHhK28y/Screen-Shot-2021-12-05-at-10.10.43-PM.png\"></a></div>",
        "id": 263812734,
        "sender_full_name": "Eric Schneider",
        "timestamp": 1638771892
    },
    {
        "content": "<p>My uneducated guess would be that you should first run <code>brew upgrade</code> or maybe <code>sudo brew upgrade</code> and then try again.</p>",
        "id": 263813029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638772312
    },
    {
        "content": "<p>It's saying that you don't have write permissions to <code>/usr/local/man</code>, and it gives you two commands to run.  I've also heard a suggestion to run <code>brew update</code> twice and then <code>brew doctor</code> to check for errors.</p>",
        "id": 263813283,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638772642
    },
    {
        "content": "<p>I ran those two lines of code at the bottom, the ‘sudo...’ and the ‘chmod...’</p>",
        "id": 263813354,
        "sender_full_name": "Eric Schneider",
        "timestamp": 1638772717
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/b5iRTySRqMPbfDywxzFPKJQx/Screen-Shot-2021-12-05-at-10.37.05-PM.png\">Screen-Shot-2021-12-05-at-10.37.05-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/b5iRTySRqMPbfDywxzFPKJQx/Screen-Shot-2021-12-05-at-10.37.05-PM.png\" title=\"Screen-Shot-2021-12-05-at-10.37.05-PM.png\"><img src=\"/user_uploads/3121/b5iRTySRqMPbfDywxzFPKJQx/Screen-Shot-2021-12-05-at-10.37.05-PM.png\"></a></div>",
        "id": 263813363,
        "sender_full_name": "Eric Schneider",
        "timestamp": 1638772728
    },
    {
        "content": "<p>I have this now</p>",
        "id": 263813368,
        "sender_full_name": "Eric Schneider",
        "timestamp": 1638772735
    },
    {
        "content": "<p>Uggh, I don't have a mac. What is the file that you use to configure your environment? Setting PATH etc...</p>",
        "id": 263813459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638772871
    },
    {
        "content": "<p>No idea, I just do what I’m told</p>",
        "id": 263813544,
        "sender_full_name": "Eric Schneider",
        "timestamp": 1638772966
    },
    {
        "content": "<p>Did you do <code>brew update</code>? Mac OS doesn't use <code>.profile</code> anymore since it's switched to the <code>zsh</code> shell from <code>bash</code></p>",
        "id": 263813560,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638773004
    },
    {
        "content": "<p>No, I just copied those two lines</p>",
        "id": 263813632,
        "sender_full_name": "Eric Schneider",
        "timestamp": 1638773112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started.20questions/near/263813560\">said</a>:</p>\n<blockquote>\n<p>Did you do <code>brew update</code>? Mac OS doesn't use <code>.profile</code> anymore since it's switched to the <code>zsh</code> shell from <code>bash</code></p>\n</blockquote>\n<p>Ooh! Did that happen recently? Should we update install scripts/instructions?</p>",
        "id": 263814075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638773810
    },
    {
        "content": "<p>About two years ago, but I update things so infrequently on my own mac I figured I'd mention it just in case.</p>",
        "id": 263814504,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638774273
    },
    {
        "content": "<p>So why does <a href=\"https://leanprover-community.github.io/install/macos.html#intel-macs\">https://leanprover-community.github.io/install/macos.html#intel-macs</a> mention <code>~/.profile</code> ?</p>",
        "id": 263814724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638774522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462419\">@Eric Schneider</span> Good news: that \"no such file or directory\" means the install script worked.</p>",
        "id": 263814829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638774680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I didn't realize the error was from the command line you're supposed to paste in.  <code>source ~/.profile</code> is wrong, but I'm not sure what would be correct.  I'd guess either <code>source ~/.zprofile</code> or <code>source ~/.zshrc</code> (more likely the latter, or maybe a <code>source</code> command isn't needed after all)</p>",
        "id": 263814973,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638774834
    },
    {
        "content": "<p>But <code>zsh</code> also has some cache for the path that you're supposed to reset, I think.</p>",
        "id": 263815040,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638774883
    },
    {
        "content": "<p>Like I said, I don't know a thing about Macs.</p>",
        "id": 263815052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638774903
    },
    {
        "content": "<p>Some Linux knowledge transfers, but I have no clue what breaks.</p>",
        "id": 263815073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638774924
    },
    {
        "content": "<p>That’s weird but good to know. Thank you!</p>",
        "id": 263815331,
        "sender_full_name": "Eric Schneider",
        "timestamp": 1638775226
    },
    {
        "content": "<p>Now I just need to figure out how to use lean…</p>",
        "id": 263815342,
        "sender_full_name": "Eric Schneider",
        "timestamp": 1638775240
    },
    {
        "content": "<p>Very n00b question. Lean uses many Unicode characters as operators and symbols, more than most computer languages. Is there a \"usual\" way to input these easily on VSCode? Or does everyone copy/paste them from other source files whenever needed?</p>",
        "id": 264741960,
        "sender_full_name": "Alice Wyan",
        "timestamp": 1639417063
    },
    {
        "content": "<p>You can write LaTeX code for them.</p>",
        "id": 264742078,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639417100
    },
    {
        "content": "<p><code>\\le</code> becomes <code>≤</code> and <code>\\nat</code> becomes <code>ℕ</code>, <code>\\not</code> becomes <code>¬</code>, etc...</p>",
        "id": 264742138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639417124
    },
    {
        "content": "<p>Also, the most often used symbols have a short alias. For example <code>\\r</code> can be used as <code>\\rightarrow</code>.</p>",
        "id": 264742215,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639417163
    },
    {
        "content": "<p>aka <code>\\to</code></p>",
        "id": 264742235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639417176
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\">#translations</a> for the full list</p>",
        "id": 264742344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639417216
    },
    {
        "content": "<p>Just to be clear -- n00b questions are more than welcome in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a>  -- that's what it's for</p>",
        "id": 264742382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639417232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started.20questions/near/264742344\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\">#translations</a> for the full list</p>\n</blockquote>\n<p>The link doesn't work in my browser.</p>",
        "id": 264742613,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639417280
    },
    {
        "content": "<p>If you hover over a symbol in VSCode you will get a tooltip explaining how to type it.</p>",
        "id": 264743038,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1639417356
    },
    {
        "content": "<p>Weird, it's supposed to link to <a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\">https://github.com/leanprover/vscode-lean/blob/master/translations.json</a></p>",
        "id": 264743203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639417392
    },
    {
        "content": "<p>I think this is the link: <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/abbreviation/abbreviations.json\">https://github.com/leanprover/vscode-lean/blob/master/src/abbreviation/abbreviations.json</a></p>",
        "id": 264743285,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639417425
    },
    {
        "content": "<p>Definitely memorize <code>\\la</code> for lambda. That will save you a lot of time.</p>",
        "id": 264743485,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639417492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20started.20questions/near/264743203\">said</a>:</p>\n<blockquote>\n<p>Weird, it's supposed to link to <a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\">https://github.com/leanprover/vscode-lean/blob/master/translations.json</a></p>\n</blockquote>\n<p>The file was moved a while ago; I've updated the linkifier so this should hopefully work now: <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/abbreviation/abbreviations.json\">#translations</a></p>",
        "id": 264743759,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1639417607
    },
    {
        "content": "<p>Wunderbar!</p>",
        "id": 264744039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639417721
    },
    {
        "content": "<p>Isn't it better to keep consistency with, say, #abbreviations instead? Or is it something we don't care much?</p>",
        "id": 264744163,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639417779
    },
    {
        "content": "<p>Ah, thank you! Hadn't seen the hover text, that's really neat :)</p>",
        "id": 264767050,
        "sender_full_name": "Alice Wyan",
        "timestamp": 1639428101
    }
]