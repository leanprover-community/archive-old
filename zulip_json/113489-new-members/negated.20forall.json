[
    {
        "content": "<p>I can't seem to figure out how to deal with the negated forall to prove the sorry in the following. I feel like I'm missing something obvious, but I don't know what.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">thm1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span>\n<span class=\"o\">)</span>\n<span class=\"o\">(</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">a1</span> <span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">a3</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a2</span> <span class=\"n\">s1</span>\n  <span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 210628460,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600540252
    },
    {
        "content": "<p>it's a classical theorem, that's why you can't prove it using just the usual operations</p>",
        "id": 210628490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600540294
    },
    {
        "content": "<p>you need <code>classical.em</code></p>",
        "id": 210628493,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600540303
    },
    {
        "content": "<p>as a \"source of extra knowledge\"</p>",
        "id": 210628505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600540319
    },
    {
        "content": "<p>Huh.</p>",
        "id": 210628555,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600540338
    },
    {
        "content": "<p>Ok. But the direction I did prove does not?</p>",
        "id": 210628566,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600540366
    },
    {
        "content": "<p>yep, as you demonstrated</p>",
        "id": 210628598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600540430
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 210628650,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600540461
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">thm1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 210628750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600540578
    },
    {
        "content": "<p>And then you can use <code>squeeze_simp</code> to find out what the lemma it used is called</p>",
        "id": 210628772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600540611
    },
    {
        "content": "<p>and then you can #check that lemma and see what assumptions it uses</p>",
        "id": 210628785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600540638
    },
    {
        "content": "<p>and maybe you'd find some decidability nonsense, although after the recent refactor I am now less sure of this</p>",
        "id": 210628804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600540668
    },
    {
        "content": "<p>Indeed I just tried it and the clues that it is classical are now more well-hidden.</p>",
        "id": 210628889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600540751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">not_forall</span>\n</code></pre></div>",
        "id": 210628906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600540785
    },
    {
        "content": "<p>I would be interested in seeing what it looks like without tactics. I should be able to prove it from <code>not P or P</code>?</p>",
        "id": 210629192,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600541073
    },
    {
        "content": "<p>You can prove it from forall P, P or not P, yes.</p>",
        "id": 210629280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600541171
    },
    {
        "content": "<p>Ok. I'll give it a try. Thank you.</p>",
        "id": 210629303,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600541222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/negated.20forall/near/210629192\">said</a>:</p>\n<blockquote>\n<p>I would be interested in seeing what it looks like without tactics.</p>\n</blockquote>\n<p>You can see what the tactics did by writing <code>#print my_lemma_name</code>. I don't promise that it will look nice.</p>",
        "id": 210629317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600541243
    },
    {
        "content": "<p>Yeah, I want it to look nice :)</p>",
        "id": 210629336,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600541281
    },
    {
        "content": "<p>In practice in tactic mode, <code>by_contra</code> is much more useful than EM. So I would first establish not not P implies P and then apply rhat function when things are getting sticky. It banks you a \"not P\" hypothesis which you can apply the next time you play this trick.</p>",
        "id": 210629499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600541426
    },
    {
        "content": "<p>You might still glean some useful theorem names from the output</p>",
        "id": 210629502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600541427
    },
    {
        "content": "<p>I think I got it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_not</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span>  <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">by_contradiction</span> <span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span>\n<span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">exists.elim</span> <span class=\"n\">a1</span> <span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x'</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">a3</span> <span class=\"n\">x'</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a2</span> <span class=\"n\">s1</span>\n<span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"k\">assume</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">by_contradiction</span> <span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">exists.intro</span> <span class=\"n\">x'</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a1</span> <span class=\"n\">s1</span>\n<span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">exists.elim</span> <span class=\"n\">a1</span> <span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x'</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">a3</span> <span class=\"n\">x'</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s1</span> <span class=\"n\">a2</span>\n<span class=\"o\">)</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"k\">assume</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">by_contradiction</span> <span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">not_not</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">exists.intro</span> <span class=\"n\">x'</span> <span class=\"n\">s1</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a1</span> <span class=\"n\">s2</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n\n<p>If I <code>import tactic</code> I seem to get an issue with <code>by_contradiction</code> also being a tactic. Is there a way around that?</p>",
        "id": 211160588,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1600966994
    }
]