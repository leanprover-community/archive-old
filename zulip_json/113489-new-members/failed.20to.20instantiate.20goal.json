[
    {
        "content": "<p>what does this error mean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">instantiate</span> <span class=\"n\">goal</span> <span class=\"k\">with</span> <span class=\"n\">function.embedding.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"n\">_.10</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">dite</span> <span class=\"o\">((</span><span class=\"n\">frozen_name</span> <span class=\"n\">has_mem.mem</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">frozen_name</span> <span class=\"n\">has_mem.mem</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">b.to_fun</span> <span class=\"o\">(</span><span class=\"n\">subtype.mk</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">((</span><span class=\"n\">frozen_name</span> <span class=\"n\">has_mem.mem</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a.max'</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"n\">a</span><span class=\"o\">)),</span> <span class=\"n\">x</span><span class=\"o\">)))))</span>\n</code></pre></div>\n<p>this is the proof that i got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">goal_injective</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">↪</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↪</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">set.restrict</span> <span class=\"n\">h</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.set_of_mem.symm</span><span class=\"o\">,</span> <span class=\"n\">set.set_coe_eq_subtype</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">function.embedding.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">b.to_fun</span> <span class=\"o\">(</span><span class=\"n\">subtype.mk</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">a.max'</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>here is the room numbering scheme that i'm trying to implement: if the set of VIP people is empty then the room number is equal to the person number. otherwise, if the person is VIP then the room number is retrieved from the <code>↥(↑S : set ℕ) ↪ ℕ</code> bundle. if the person is not VIP then the room number is equal to the max room number that is assigned to a VIP person, plus 1, plus that person's number.</p>",
        "id": 244118787,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624871412
    },
    {
        "content": "<p>If you break this up a bit and try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">function.embedding.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">b.to_fun</span> <span class=\"o\">(</span><span class=\"n\">subtype.mk</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">a.max'</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>then you can see your error, this term doesn't quite typecheck.</p>",
        "id": 244118999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624871552
    },
    {
        "content": "<p>I don't know why the error <code>use</code> gives is so obfuscated; somehow the term has been partially translated into some more primitive form before stuff bombs out. If you look at the code which defines <code>use</code> (e.g. by right clicking on it) you might be able to work out what's going on better than I can!</p>",
        "id": 244119403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624871808
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#use\">tactic#use</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#show\">tactic#show</a> are two tactics that I almost never use because their error messages are useless. Instead there is <code>refine \\&lt;something, _\\&gt;</code> or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#change\">tactic#change</a></p>",
        "id": 244119567,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624871911
    },
    {
        "content": "<p><code>use</code> is absolutely great for beginners though, and I use <code>show</code> a lot in my teaching when Lean decides to obfuscate the goal for whatever reason and I use <code>show</code> to tidy it up before the <code>sorry</code> that the students then have to deal with.</p>",
        "id": 244119639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624871978
    },
    {
        "content": "<p>Sure, <code>refine \\&lt;something, _\\&gt;</code> is a bit more complicated, but the basic use of <code>change</code> is exactly the same as <code>show</code> except the error <code>change</code> reports is not just literally <code>show tactic failed</code></p>",
        "id": 244119977,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624872184
    },
    {
        "content": "<p>(I just remembered <code>show</code> has a secondary use where you can choose which goal to work on. Still the basic purpose of <code>show</code> and <code>change</code> is identical.)</p>",
        "id": 244120225,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624872354
    },
    {
        "content": "<p>I am getting an error <code>failed to instantiate goal with polynomial K</code> after <code>use polynomial K</code> when my goal is <code>∃ (X : (Algebra K)ᵒᵖ) (f : coyoneda.obj X ⟶ forget (Algebra K)), is_iso f</code>. Why could this be? The file is below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">affine_scheme</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">scheme</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">corepresentable</span> <span class=\"o\">:</span> <span class=\"n\">scheme.corepresentable</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">affine_group_scheme</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">scheme</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">K</span> <span class=\"bp\">⥤</span> <span class=\"n\">Group</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">corepresentable</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">scheme</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">Group</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">corepresentable</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- DEFINING G_a</span>\n<span class=\"kd\">instance</span> <span class=\"n\">G_a</span> <span class=\"o\">:</span> <span class=\"n\">affine_scheme</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">scheme</span> <span class=\"o\">:=</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n  <span class=\"n\">corepresentable</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">has_corepresentation</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n    <span class=\"n\">use</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"c1\">-- failed to instantiate goal with polynomial K</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 282189150,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652401866
    },
    {
        "content": "<p>I would guess you need to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Algebra.of\">docs#Algebra.of</a></p>",
        "id": 282208508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652423829
    },
    {
        "content": "<p>If you want to see what <code>use</code> exists you can always try <code>refine \\&lt;_, _\\&gt;</code></p>",
        "id": 282209108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652424417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I do not understand what <code>refine \\&lt;_, _\\&gt;</code> does. It splits goal <code>⊢ ∃ (X : (Algebra K)ᵒᵖ), Exists is_iso</code> into <code>⊢ (Algebra K)ᵒᵖ</code> and <code>⊢ Exists is_iso</code>. But I don't understand what it means to prove <code>⊢ (Algebra K)ᵒᵖ</code>.</p>",
        "id": 282341623,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , this is a good suggestion but it did not work for me. I'm getting <code>failed to instantiate goal with Algebra.of K ((frozen_name polynomial) K)</code> error.</p>",
        "id": 282341661,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518083
    },
    {
        "content": "<p>It means you have to give an element of <code>Algebra K^op</code>, which is as per <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/category/Algebra/basic.html#Algebra\">https://leanprover-community.github.io/mathlib_docs/algebra/category/Algebra/basic.html#Algebra</a> a triple of a Type a ring structure and an algebra structure.</p>",
        "id": 282341678,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652518131
    },
    {
        "content": "<p>Alex, I think your parens are missing there</p>",
        "id": 282341686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652518166
    },
    {
        "content": "<p>Sure, its also not unicode</p>",
        "id": 282341690,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652518178
    },
    {
        "content": "<p>But this does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">G_a</span> <span class=\"o\">:</span> <span class=\"n\">affine_scheme</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">scheme</span> <span class=\"o\">:=</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n  <span class=\"n\">corepresentable</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">has_corepresentation</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"n\">ring_hom.to_algebra</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">opposite.op</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">Algebra.of</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"c1\">-- failed to instantiate goal with Algebra.of K ((frozen_name polynomial) K)</span>\n\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 282341742,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518224
    },
    {
        "content": "<p>Can you change that use to a refine?</p>",
        "id": 282341756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652518249
    },
    {
        "content": "<p>You'll get a better error message</p>",
        "id": 282341761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652518258
    },
    {
        "content": "<p>Or <code>existsi </code> instead of <code>use</code></p>",
        "id": 282341767,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652518271
    },
    {
        "content": "<p>It's not even an existential at that point</p>",
        "id": 282341772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652518298
    },
    {
        "content": "<p>Error: <code>failed to synthesize type class instance for K : Type u_1,\n_inst_1 : comm_ring K,\nthis : algebra K K[X]\n⊢ algebra K K[X]</code></p>",
        "id": 282341774,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/failed.20to.20instantiate.20goal/near/282341772\">said</a>:</p>\n<blockquote>\n<p>It's not even an existential at that point</p>\n</blockquote>\n<p>I'm confused why we are using use instead of exact then?</p>",
        "id": 282341824,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652518340
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#use\">tactic#use</a> tries to be clever</p>",
        "id": 282341837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652518363
    },
    {
        "content": "<p>Actually, this also errors: <code>#check Algebra.of K K[X]</code>. Not sure what's going on</p>",
        "id": 282341838,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518369
    },
    {
        "content": "<p>Do you have <code>data.polynomial.algebra_map</code> imported?</p>",
        "id": 282341848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652518395
    },
    {
        "content": "<p>You need to have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.algebra_of_algebra\">docs#polynomial.algebra_of_algebra</a> imported</p>",
        "id": 282341900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652518466
    },
    {
        "content": "<p>I did not. I thought it would be part of polyonmial.basic. Now <code>#check Algebra.of K K[X]</code> works. But the proof still does not</p>",
        "id": 282341909,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518508
    },
    {
        "content": "<p>I am not getting an error any more though</p>",
        "id": 282341914,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518526
    },
    {
        "content": "<p>Surely if the proof doesn't work, then you're still getting an error?</p>",
        "id": 282341958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652518577
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">G_a</span> <span class=\"o\">:</span> <span class=\"n\">affine_scheme</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">scheme</span> <span class=\"o\">:=</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n  <span class=\"n\">corepresentable</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">has_corepresentation</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"n\">ring_hom.to_algebra</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">opposite.op</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ Algebra K</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Algebra.of</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"c1\">-- ⊢ Algebra K</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 282341968,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518598
    },
    {
        "content": "<p>Add a comma</p>",
        "id": 282341975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652518619
    },
    {
        "content": "<p>This is what I have. I give it a K-algebra but it doesn't wanna take it</p>",
        "id": 282341976,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518619
    },
    {
        "content": "<p>You're not done, you have another goal to prove</p>",
        "id": 282341981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652518632
    },
    {
        "content": "<p>Well, that worked</p>",
        "id": 282341983,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518635
    },
    {
        "content": "<p>What does the goal <code>⊢ Exists is_iso</code> mean? Mathematically, I need to prove the isomorphism Hom(K[X], A) = abelian group of A. But I don't understand how this goal expresses that</p>",
        "id": 282342209,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1652518894
    },
    {
        "content": "<p>The goal state after</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- DEFINING G_a</span>\n<span class=\"kd\">instance</span> <span class=\"n\">G_a</span> <span class=\"o\">:</span> <span class=\"n\">affine_scheme</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">scheme</span> <span class=\"o\">:=</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n  <span class=\"n\">corepresentable</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">has_corepresentation</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">opposite.op</span> <span class=\"o\">(</span><span class=\"n\">Algebra.of</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>might be more clear</p>",
        "id": 282342276,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652518980
    }
]