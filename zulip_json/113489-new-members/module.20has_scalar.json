[
    {
        "content": "<p>I have some trouble inferring <code>has_scalar</code> from <code>module</code>.</p>\n<p>As far as I can see, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module\">docs#module</a> extends <a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_mul_action\">docs#distrib_mul_action</a>, which extends <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action\">docs#mul_action</a>, which extends <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_scalar\">docs#has_scalar</a>.  Nevertheless, assuming <code>module</code>, I fail to <code>apply_instance</code> to get a <code>has_scalar</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo₁</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo₂</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">E</span> <span class=\"bp\">𝕜</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails (error message below)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">tactic.mk_instance failed to generate instance for</span>\n<span class=\"cm\">  has_scalar E 𝕜</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">E : Type u_1,</span>\n<span class=\"cm\">_inst_1 : add_comm_group E,</span>\n<span class=\"cm\">𝕜 : Type u_2,</span>\n<span class=\"cm\">_inst_2 : semiring 𝕜,</span>\n<span class=\"cm\">_inst_3 : module 𝕜 E</span>\n<span class=\"cm\">⊢ has_scalar E 𝕜</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>What am I doing wrong? <span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span> Thanks in advance!</p>",
        "id": 248741825,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1628380239
    },
    {
        "content": "<p>Oh no, nevermind... I just got the arguments in the wrong order!</p>\n<p>The following is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo₁</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo₃</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 248741956,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1628380482
    },
    {
        "content": "<p>(For some reason I thought the <code>M</code> argument should be the \"module\", and not the \"monoid\" of scalars... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>)</p>",
        "id": 248742022,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1628380668
    }
]