[
    {
        "content": "<p>Hi, I was wondering if we have the definition for <a href=\"https://en.wikipedia.org/wiki/Rational_function\">rational function</a> in mathlib. </p>\n<p>For my purposes I have been using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P.eval</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">Q.eval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.degree</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 278494086,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1649631293
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ratfunc\">docs#ratfunc</a></p>",
        "id": 278494092,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649631336
    },
    {
        "content": "<p>Since <code>f : R to R</code> then if I try to say <code>∃ (r : ratfunc ℝ), f = r</code> it doesn't work out since <code>r</code> has type <code>ratfunc R</code>. What's a good way of stating that they are in fact equal?</p>",
        "id": 278494490,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1649631885
    },
    {
        "content": "<p>You want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ratfunc.eval\">docs#ratfunc.eval</a></p>",
        "id": 278494589,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649632050
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dumbtest</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ratfunc</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">r.eval</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">28</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But lean says: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">ratfunc.eval</span> <span class=\"n\">r</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">r</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ratfunc</span> <span class=\"n\">ℝ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→+*</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 278494719,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1649632209
    },
    {
        "content": "<p>Yeah, you need <code>λ x, f.eval (ring_hom.refl _) x</code></p>",
        "id": 278494731,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649632245
    },
    {
        "content": "<p>Caveat: when you evaluate a rational function at a pole, it's going to be junk data (<code>0</code> I believe), and this will be saying <code>f</code> has the exact same behavior at these points.</p>",
        "id": 278494875,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649632498
    },
    {
        "content": "<p>I tried modifying <code>dumbtest</code> to use that but It didn't work for me, can you give a MWE version of <code>dumbtest</code>?</p>",
        "id": 278494886,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1649632524
    },
    {
        "content": "<p>can you make a MWE of the question first (ie post code with the right imports etc?)</p>",
        "id": 278495239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649633127
    },
    {
        "content": "<p>Yes: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dumbtest</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ratfunc</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">r.eval</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">28</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 278495355,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1649633285
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dumbtest</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ratfunc</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r.eval</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">28</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 278498493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649637999
    }
]