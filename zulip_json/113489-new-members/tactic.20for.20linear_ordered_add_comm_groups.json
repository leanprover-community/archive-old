[
    {
        "content": "<p>I use  <code>linear_ordered_add_comm_group</code> and wonder if there is a nice tactic like <code>ring</code> that solves basic statements like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span> <span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I have tried all the following, all of which do not work: <code>library_search, ring, group, linarith, simp</code>.</p>",
        "id": 291820296,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659517663
    },
    {
        "content": "<p><code>abel</code>?</p>",
        "id": 291821011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659518061
    },
    {
        "content": "<p>This is pretty good and solves the example. Which tactic could I use to simplify the order-aspects? linarith?</p>",
        "id": 291862186,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659538755
    },
    {
        "content": "<p>For example, the following Lemma is somewhat time-consuming to solve by hand and it feels like a tactic might be able to do it. Is there a way to write less?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">txf</span> <span class=\"n\">tyf</span> <span class=\"n\">fa</span> <span class=\"n\">fb</span> <span class=\"n\">f1a</span> <span class=\"n\">f1b</span> <span class=\"n\">f2a</span> <span class=\"n\">f2b</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span><span class=\"n\">txf</span> <span class=\"bp\">-</span> <span class=\"n\">fa</span> <span class=\"bp\">+</span> <span class=\"n\">f1a</span> <span class=\"bp\">≤</span> <span class=\"n\">f1b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f2a</span> <span class=\"bp\">≤</span> <span class=\"n\">tyf</span> <span class=\"bp\">-</span> <span class=\"n\">fb</span> <span class=\"bp\">+</span> <span class=\"n\">f2b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">f1b</span> <span class=\"bp\">-</span> <span class=\"n\">f1a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f2b</span> <span class=\"bp\">-</span> <span class=\"n\">f2a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fb</span> <span class=\"bp\">-</span><span class=\"n\">fa</span><span class=\"o\">):</span> <span class=\"n\">txf</span> <span class=\"bp\">≤</span> <span class=\"n\">tyf</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">txf</span> <span class=\"bp\">≤</span> <span class=\"n\">f1b</span> <span class=\"bp\">-</span> <span class=\"n\">f1a</span> <span class=\"bp\">+</span> <span class=\"n\">fa</span>  <span class=\"o\">,</span> <span class=\"c1\">-- using h1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4'</span> <span class=\"o\">:</span> <span class=\"n\">txf</span> <span class=\"bp\">-</span> <span class=\"n\">fa</span> <span class=\"bp\">+</span> <span class=\"n\">f1a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"bp\">-</span> <span class=\"n\">f1a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f1b</span>  <span class=\"bp\">+</span> <span class=\"o\">(</span> <span class=\"n\">fa</span> <span class=\"bp\">-</span><span class=\"n\">f1a</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"bp\">-</span> <span class=\"n\">f1a</span><span class=\"o\">),</span>\n  <span class=\"n\">abel</span> <span class=\"n\">at</span> <span class=\"n\">h4'</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h4'</span><span class=\"o\">,</span> <span class=\"c1\">-- proved h4</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">f1b</span> <span class=\"bp\">-</span> <span class=\"n\">f1a</span> <span class=\"bp\">+</span> <span class=\"n\">fa</span> <span class=\"bp\">=</span> <span class=\"n\">f2a</span> <span class=\"bp\">-</span> <span class=\"n\">f2b</span> <span class=\"bp\">+</span> <span class=\"n\">fb</span><span class=\"o\">,</span> <span class=\"c1\">-- using h3</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5'</span> <span class=\"o\">:</span> <span class=\"n\">f1b</span> <span class=\"bp\">-</span> <span class=\"n\">f1a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f2b</span> <span class=\"bp\">-</span> <span class=\"n\">f2a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"bp\">-</span> <span class=\"n\">f2b</span> <span class=\"bp\">+</span> <span class=\"n\">f2a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fb</span> <span class=\"bp\">-</span> <span class=\"n\">fa</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"bp\">-</span> <span class=\"n\">f2b</span> <span class=\"bp\">+</span> <span class=\"n\">f2a</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add.add</span> <span class=\"n\">h3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"bp\">-</span> <span class=\"n\">f2b</span> <span class=\"bp\">+</span> <span class=\"n\">f2a</span><span class=\"o\">),</span>\n  <span class=\"n\">abel</span> <span class=\"n\">at</span> <span class=\"n\">h5'</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h5'</span><span class=\"o\">,</span> <span class=\"c1\">-- proved h5</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">f2a</span> <span class=\"bp\">-</span> <span class=\"n\">f2b</span> <span class=\"bp\">+</span> <span class=\"n\">fb</span> <span class=\"bp\">≤</span> <span class=\"n\">tyf</span><span class=\"o\">,</span> <span class=\"c1\">-- using h2</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6'</span> <span class=\"o\">:</span> <span class=\"n\">f2a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"bp\">-</span> <span class=\"n\">f2b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">tyf</span> <span class=\"bp\">-</span> <span class=\"n\">fb</span> <span class=\"bp\">+</span> <span class=\"n\">f2b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"bp\">-</span> <span class=\"n\">f2b</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"bp\">-</span> <span class=\"n\">f2b</span><span class=\"o\">),</span>\n  <span class=\"n\">abel</span> <span class=\"n\">at</span> <span class=\"n\">h6'</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h6'</span><span class=\"o\">,</span> <span class=\"c1\">-- proved h6</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">h5</span> <span class=\"n\">at</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">h4</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291868642,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659541188
    },
    {
        "content": "<p>This is less:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">txf</span> <span class=\"n\">tyf</span> <span class=\"n\">fa</span> <span class=\"n\">fb</span> <span class=\"n\">f1a</span> <span class=\"n\">f1b</span> <span class=\"n\">f2a</span> <span class=\"n\">f2b</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">txf</span> <span class=\"bp\">-</span> <span class=\"n\">fa</span> <span class=\"bp\">+</span> <span class=\"n\">f1a</span> <span class=\"bp\">≤</span> <span class=\"n\">f1b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f2a</span> <span class=\"bp\">≤</span> <span class=\"n\">tyf</span> <span class=\"bp\">-</span> <span class=\"n\">fb</span> <span class=\"bp\">+</span> <span class=\"n\">f2b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">f1b</span> <span class=\"bp\">-</span> <span class=\"n\">f1a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f2b</span> <span class=\"bp\">-</span> <span class=\"n\">f2a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fb</span> <span class=\"bp\">-</span> <span class=\"n\">fa</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">txf</span> <span class=\"bp\">≤</span> <span class=\"n\">tyf</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">txf</span>\n    <span class=\"bp\">≤</span> <span class=\"n\">f1b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"bp\">-</span> <span class=\"n\">f1a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sub_le_iff_le_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sub_add</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f2a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f2b</span> <span class=\"bp\">-</span> <span class=\"n\">fb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">add_eq_of_eq_sub</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">abel</span> <span class=\"o\">}</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">tyf</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">sub_le_iff_le_add</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_neg_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(I particularly tried to have the one <code>abel</code> call do as much as possible)</p>",
        "id": 291873793,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659543243
    },
    {
        "content": "<p>The last line could also be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">tyf</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_le_iff_le_add</span><span class=\"o\">],</span> <span class=\"n\">convert</span> <span class=\"n\">h2</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">abel</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>which might be more conceptual (is that the right word?)</p>",
        "id": 291875109,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659543824
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 291880744,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1659546222
    }
]