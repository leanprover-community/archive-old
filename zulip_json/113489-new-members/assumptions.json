[
    {
        "content": "<p>is there something similar to <code>meta def assumptions : tactic unit := `[ repeat { assumption } ]</code> somewhere in the library?</p>",
        "id": 156558856,
        "sender_full_name": "Geoffrey Yeung",
        "timestamp": 1548101489
    },
    {
        "content": "<p><code>; assumption</code></p>",
        "id": 156560625,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1548103577
    },
    {
        "content": "<p>What about <code>assumption'</code>?</p>",
        "id": 156561395,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548104567
    },
    {
        "content": "<p>Isn't <code>; assumption</code>, which applies once to every goal different from <code>repeat {assumption}</code>, which applies until it fails? <code>assumption'</code> also seems to do the former</p>",
        "id": 156562900,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1548106463
    },
    {
        "content": "<p>I just learned about <code>;</code>. In mosts cases I can replace <code>assumptions</code> with <code>; assumption</code>, but in a few places I need <code>; try {assumption}</code> instead, because some branches need furthur processing</p>",
        "id": 156563787,
        "sender_full_name": "Geoffrey Yeung",
        "timestamp": 1548107634
    },
    {
        "content": "<p><code>assumption</code> fails when the goal can't be closed by something in the local context. So <code>repeat {assumption}</code> will close the first goals until it finds one that can't be closed. <code>; assumption</code> will succeed if every subgoal produced by the previous tactic can be closed by <code>assumption</code>, and fail otherwise. <code>assumption'</code> will close all open goals that can be closed by <code>assumption</code>, and fail if none of them can be closed.</p>",
        "id": 156563836,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548107657
    },
    {
        "content": "<p>They're all subtly different. But I guess <code>repeat {assumption}</code> is rarely the one you want.</p>",
        "id": 156563928,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548107784
    },
    {
        "content": "<p>yeah <code>assumption'</code> seems to be the solution</p>",
        "id": 156564007,
        "sender_full_name": "Geoffrey Yeung",
        "timestamp": 1548107890
    },
    {
        "content": "<p><code>; assumption'</code> should have the same effect as <code>; try {assumption}</code>.</p>",
        "id": 156564011,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548107894
    },
    {
        "content": "<p>side question: why does<br>\n<code>example {a b c : Prop} : a → b → c → (a ∧ b) ∧ c := by { intros , repeat{ split } ; assumption }</code> work, but<br>\n<code>example {a b c : Prop} : a → b → c → (a ∧ b) ∧ c := by { intros , split , split ; assumption }</code> doesn't?</p>",
        "id": 156564038,
        "sender_full_name": "Geoffrey Yeung",
        "timestamp": 1548107959
    },
    {
        "content": "<p>oh never mind figured it out, the <code>;</code> is only applying to the second split</p>",
        "id": 156564127,
        "sender_full_name": "Geoffrey Yeung",
        "timestamp": 1548108072
    }
]