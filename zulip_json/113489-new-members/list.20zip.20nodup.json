[
    {
        "content": "<p>I'm wondering if anyone can point me in right direction to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.nodup_imp_fst_zip_nodup</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">l1.nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">l1.zip</span> <span class=\"n\">l2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nodup</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 311090030,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668911285
    },
    {
        "content": "<p>I can prove that <code>(list.map prod.fst (l1.zip l2)) ⊆ l1</code>, but I haven't been able to transform that into the final goal.</p>",
        "id": 311090195,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668911441
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup.sublist\">docs#list.nodup.sublist</a></p>",
        "id": 311090307,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668911578
    },
    {
        "content": "<p><del>I think you'll need to prove that if <code>a ⊆ b</code> for <code>b</code> nodup, then actually <code>a ≤ b</code></del></p>",
        "id": 311090325,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668911612
    },
    {
        "content": "<p>oh, that's not true, silly</p>",
        "id": 311090387,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668911663
    },
    {
        "content": "<p>if you strengthen your result to <code>≤</code>, then it's there, though</p>",
        "id": 311090392,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668911687
    },
    {
        "content": "<p>Hmm. Ok.</p>",
        "id": 311090430,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668911761
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 311090475,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668911767
    },
    {
        "content": "<p>Hmm, maybe I don't have that proof, sorry. I thought I had it before.</p>",
        "id": 311091070,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668912471
    },
    {
        "content": "<p>Ok, no, I have it now.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.map</span> <span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">l1.zip</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l1</span> <span class=\"n\">generalizing</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">l1_tl</span> <span class=\"bp\">⊆</span> <span class=\"n\">l1_hd</span> <span class=\"o\">::</span> <span class=\"n\">l1_tl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">l1_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">s1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 311091549,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668913046
    },
    {
        "content": "<p>is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_fst_zip\">docs#list.map_fst_zip</a> relevant here?</p>",
        "id": 311091647,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668913143
    },
    {
        "content": "<p>I can prove it with the extra assumption on the lengths with it, but I wanted to see if I could drop that assumption, since I don't think it should be needed.</p>",
        "id": 311091864,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668913352
    },
    {
        "content": "<p>gotcha</p>",
        "id": 311091915,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668913442
    },
    {
        "content": "<p>With the above result, I just need to prove this, which seems to be more difficult than I had expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">l2.nodup</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">l1</span> <span class=\"bp\">⊆</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l1.nodup</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 311095191,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668917222
    },
    {
        "content": "<p>The lemma stated is not true. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">⊆</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 311095433,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1668917535
    },
    {
        "content": "<p>Oh, huh. Oops.</p>",
        "id": 311095531,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668917672
    },
    {
        "content": "<p>I guess I do need to show it is a sublist, not just a subset.</p>",
        "id": 311095617,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668917768
    },
    {
        "content": "<p>I guess what I actually might want to prove is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.map</span> <span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">l1.zip</span> <span class=\"n\">l2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>That is, that <code>list.map prod.fst (l1.zip l2)</code> is a prefix of <code>l1</code>.</p>",
        "id": 311096424,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668918727
    },
    {
        "content": "<p>Should this hold?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">l1</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">l2.nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l1.nodup</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 311097529,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668920037
    },
    {
        "content": "<p>did you mean <code>&lt;+</code> instead of <code>&lt;+:</code>?</p>",
        "id": 311097663,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668920172
    },
    {
        "content": "<p>and I feel like that should hold</p>",
        "id": 311097676,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668920200
    },
    {
        "content": "<p>I'm not sure. I meant <code>list.is_prefix</code>.</p>",
        "id": 311097696,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668920234
    },
    {
        "content": "<p>ohh, I thought you meant sublist... nvm</p>",
        "id": 311097707,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668920255
    },
    {
        "content": "<p>Ok, I think I have it.</p>",
        "id": 311097852,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668920427
    },
    {
        "content": "<p>you can also prove it with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.is_prefix.sublist\">docs#list.is_prefix.sublist</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup.sublist\">docs#list.nodup.sublist</a></p>",
        "id": 311097900,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668920462
    },
    {
        "content": "<p>Yes, that is what I just realized :)</p>",
        "id": 311097942,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1668920516
    }
]