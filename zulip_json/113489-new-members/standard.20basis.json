[
    {
        "content": "<p>I would like to show that the standard basis is orthonormal, and I get to a reasonable looking statement in terms of function.update:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pi_Lp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bm_on</span> <span class=\"o\">:</span> <span class=\"n\">orthonormal</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">pi.basis_fun</span> <span class=\"n\">F</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">orthonormal</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pi.basis_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">neq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pi.basis_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I am having difficulty getting function.update to interact with inner.  Any help is appreciated!</p>",
        "id": 268491114,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642566374
    },
    {
        "content": "<p>Doesn't <code>variable [inner_product_space F (m ‚Üí F)]</code> mean \"assume there is a completely arbitrary inner product space structure on <code>m ‚Üí F</code> about which we know nothing\"? If so then your lemma will not be true. I'm not 100% sure of this though, I don't know this part of the library.</p>",
        "id": 268491570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642567028
    },
    {
        "content": "<p>This does seem like an issue.  How do I specialize?</p>",
        "id": 268565673,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642609856
    },
    {
        "content": "<p>You should use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space\">docs#euclidean_space</a> !</p>",
        "id": 268566260,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642610089
    },
    {
        "content": "<p>How do I access the standard basis for <code>euclidean_space</code> ?</p>",
        "id": 268573247,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642612678
    },
    {
        "content": "<p>Something like <code>(ite (i = j) (1:ùïú) 0 : euclidean_space ùïú m)</code>, although I'd be curious to know what your use case is ... do you really need a basis for it?</p>",
        "id": 268574188,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642613069
    },
    {
        "content": "<p>The current use case is practicing Lean and navigating mathlib; I think that my original reason for wanting this basis is obsolete, but it still feels like an exercise that I should be able to accomplish.</p>",
        "id": 268574604,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642613256
    },
    {
        "content": "<p>I am still very new to this and appreciate your help!</p>",
        "id": 268574864,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642613351
    },
    {
        "content": "<p>Precisely, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.single\">docs#pi.single</a></p>",
        "id": 268576610,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1642614044
    },
    {
        "content": "<p>I think this is what <code>pi.basis_fun</code> does.  How do I work with this in <code>euclidean space</code>?</p>",
        "id": 268578161,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642614688
    }
]