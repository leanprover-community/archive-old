[
    {
        "content": "<p>Something very stupid; maybe someone can do it immediately:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.divisors_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hny</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n.divisors</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is nearly the definition of nat.divisor, except the <code>finset.Icc</code> goes from <code>1</code> to <code>y</code> instead of <code>1</code> to <code>n</code>. Since <code>n≤ y</code> and <code>nat.divisor_le</code> knows that any divisor is anyway less than <code>n</code>, these sets are the \"same\"...?</p>",
        "id": 270493138,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643856376
    },
    {
        "content": "<p>Not true for <code>n = 0</code> <span aria-label=\"anguished\" class=\"emoji emoji-1f627\" role=\"img\" title=\"anguished\">:anguished:</span></p>",
        "id": 270493263,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643856494
    },
    {
        "content": "<p>Ok, let's add <code>0&lt;n</code></p>",
        "id": 270493295,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643856546
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.divisors_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hny</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n.divisors</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- skip n = 0</span>\n  <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a.succ</span> <span class=\"bp\">∣</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">a.succ</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_le_succ_iff</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat.le_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hny</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270493624,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643856842
    },
    {
        "content": "<p>Cool! What is that first line ext (_|a) doing? (I mean, I can see what it did in this case, but how do those parentheses work?...) Many thanks!</p>",
        "id": 270494148,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1643857286
    },
    {
        "content": "<p>It does <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">tactic#rcases</a> on the introduced variables (a feature I was unaware of). The pipe pattern does cases on constructors of an inductive type.</p>",
        "id": 270494394,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643857508
    }
]