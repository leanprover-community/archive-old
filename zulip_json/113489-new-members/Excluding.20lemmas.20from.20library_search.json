[
    {
        "content": "<p>Hi all! </p>\n<p>I was wondering what is the best way to omit certain lemmas from the library. I would like students to give proofs to relatively simple statements from propositional logic, such as p \\or q \\imp q \\or p. I want them to give all the steps you would do in an ordinary deduction proof, with all the steps being \"justifiable\" by library_search. However, the problem is that library_search can already justify the statement p \\or q \\imp q \\or p itself, which is not preferable in this situation. </p>\n<p>I could imagine that for example removing the particular unwanted lemmas from the library could work, but I can also imagine that this ruins the logical structure of the library and thereby giving an error to mathlib as a whole. </p>\n<p>Hope to hear some ideas on this!</p>",
        "id": 281973465,
        "sender_full_name": "ebp",
        "timestamp": 1652279268
    },
    {
        "content": "<p>Do you want to omit the lemmas from the library completely, or just from the search results?</p>",
        "id": 281973791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652279402
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/or.symm\">docs#or.symm</a> is part of Lean itself, and appears long before <code>library_search</code> even exists</p>",
        "id": 281973892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652279438
    },
    {
        "content": "<p>I want to omit them from the collection that is used by library_search. So that the code </p>\n<p><code>example (p q : Prop) : p ∨ q → q ∨ p :=\nby library_search</code> </p>\n<p>is not recognized as a correct proof.</p>",
        "id": 281974303,
        "sender_full_name": "ebp",
        "timestamp": 1652279588
    },
    {
        "content": "<p>One option might be to build a tiny library yourself</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">propositional_logic_course</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">or</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n<span class=\"bp\">|</span> <span class=\"n\">right</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">or</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n\n<span class=\"c1\">-- some basic lemma that students are allowed to use</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"n\">etc</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">propositional_logic_course</span>\n</code></pre></div>\n<p>But I'm not sure if you can reuse the nice notation <code>∨</code> if you do this.</p>",
        "id": 281974485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652279665
    },
    {
        "content": "<p>The benefit is that you can be sure that students can only use the helper lemmas that you've provided. (Unless the prove by themselves that the new definition is equivalent to the one in mathlib <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> Then they can rw it to the mathlib def, and use the whole library.)</p>",
        "id": 281974614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652279719
    },
    {
        "content": "<p>If you want to do the opposite, you could consider hand-curating lemmas and using <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#solve_by_elim\">tactic#solve_by_elim</a> directly (which is what library_search is essentially a wrapper around), but that doesn't give you a suggestion.</p>",
        "id": 281974646,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652279733
    },
    {
        "content": "<p>It might actually work doing <code>library_search [-offending_lemma]</code>, but I haven't checked.</p>",
        "id": 281974931,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652279829
    },
    {
        "content": "<p>If you don't want <code>library_search</code> to find <code>or.symm</code>, then what type of thing _do_ you want it to find?</p>",
        "id": 281975119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652279910
    },
    {
        "content": "<p>I want library_search to find for example or.inr and things like that; so the most fundamental deduction rules. Building a separate library might be an idea. What is the best way to use library_search to such a hand made library? </p>\n<p>I will try the [-offending_lemma] idea as well!</p>",
        "id": 281975520,
        "sender_full_name": "ebp",
        "timestamp": 1652280081
    },
    {
        "content": "<p><code>library_search</code> should automatically work on your hand made library.</p>",
        "id": 281976569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652280471
    },
    {
        "content": "<p>It looks like <code>library_search</code> will always use the entire library, so <code>[-offending_lemma]</code> likely won't work.</p>\n<p>It looks like <code>library_search</code> has the option to take simp sets, but I'm not sure you can limit it to <em>only</em> using lemmas from a simp set. If that could work, that might be a nice way to say \"do a library search using this particular collection of lemmas\".</p>",
        "id": 281977574,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652280824
    },
    {
        "content": "<p>The solution I use is to hide the existence of <code>library_search</code></p>",
        "id": 281981319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652282288
    },
    {
        "content": "<p>What is the way to include the hand-made library in the existing library in such a way that library_search still works, but only on the specific library?  Library_search itself is defined inside mathlib so removing mathlib and replacing it by the hand-made library will not work either.</p>",
        "id": 281982674,
        "sender_full_name": "ebp",
        "timestamp": 1652282820
    },
    {
        "content": "<p>If you give your own definition of <code>or</code> then mathlibs results don't apply to it. So <code>library_search</code> will not find them.</p>",
        "id": 281983149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652282993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Excluding.20lemmas.20from.20library_search/near/281974485\">said</a>:</p>\n<blockquote>\n<p>But I'm not sure if you can reuse the nice notation <code>∨</code> if you do this.</p>\n</blockquote>\n<p>If you use <code>local notation</code> it'll override the pre-existing one completely.</p>\n<p>It seems like the \"right\" way would be to modify <code>suggest_core</code> so that <code>library_search with simp_set_names...</code> causes it to not use the entire library. It already has this ability to use simp sets I believe, and I'm not sure what the point is if it's going to use the entire library anyway...</p>",
        "id": 281995984,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652288308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477460\">ebp</span> <a href=\"#narrow/stream/113489-new-members/topic/Excluding.20lemmas.20from.20library_search/near/281975520\">said</a>:</p>\n<blockquote>\n<p>I want library_search to find for example or.inr and things like that; so the most fundamental deduction rules.</p>\n</blockquote>\n<p>I think that just amounts to <code>show_term {constructor}</code>?</p>",
        "id": 281996764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652288608
    },
    {
        "content": "<p>If my understanding is correct, the motivation behind the question is that <span class=\"user-mention\" data-user-id=\"477460\">@ebp</span>  only wants to allow students to use certain lemmas, and I suspect the total number of allowable lemmas is very small (e.g. or elimination, or introduction, and elimination, and introduction etc). So why not just explicitly list the lemmas which the students are allowed to use and give them that list, and not tell them about <code>library_search</code> at all? I have done this before: I introduce a new concept to the class (i.e. a definition from mathlib) and then just give them an incomplete but totally explicit API for the concept and say \"using these theorems, whose proofs you can assume, go on to prove the following things\".</p>",
        "id": 281996772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652288611
    },
    {
        "content": "<p>The alternative approach which I've tried (make a new copy of the definition yourself) typically works less well because you get notation clashes (unless you use weird notation), declaration name clashes (unless you call things <code>mygroup</code> or <code>group'</code> -- even using namespaces like <code>xena.group</code> doesn't work too well), and general confusion (none of the tactics work e.g. <code>tauto</code> wouldn't work for home-rolled <code>or</code> etc).</p>",
        "id": 281997258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652288819
    },
    {
        "content": "<p>I assume that working in a <code>prelude</code> probably does more harm than good - it will remove any problems with namespace or notation clashes, but you'll have exactly nothing to start from (which both means your students can't cheat, but also means they get a lot of missing nice things)</p>",
        "id": 281997397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652288875
    },
    {
        "content": "<p>I've also tried this and it's even worse because far more things are broken/unavailable than you might imagine.</p>",
        "id": 281997520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652288903
    },
    {
        "content": "<p>I guess you probably lose widgets?</p>",
        "id": 281997562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652288922
    },
    {
        "content": "<p>Maybe for stuff like <code>or</code> it might be OK, who knows.</p>",
        "id": 281997571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652288928
    },
    {
        "content": "<p>Yes you definitely lose widgets (at least IIRC), and also the tada emoji when you've finished a proof.</p>",
        "id": 281997609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652288946
    },
    {
        "content": "<p>This alone is a good reason not to do it ;-)</p>",
        "id": 281997695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652288986
    },
    {
        "content": "<p>Sorry for the late response; didn't have any time to work on this the past days. </p>\n<p>I don't want to bother the students with the precise formulation of all the definitions and deduction rules from Lean, this is beyond the scope of the level of logic I'll be using this for. Using library_search gives the possibility to write proofs easily, but in its current state it makes things too easy.  As it probably looks like it is not possible to remove certain rules from the library, I have to think about another way.</p>",
        "id": 282602236,
        "sender_full_name": "ebp",
        "timestamp": 1652772899
    },
    {
        "content": "<p>If the goal is \"prove these lemmas in a certain way\" and a student just looks them up in the library and hence proves them the wrong way, then surely they don't get the points?</p>",
        "id": 282607736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652776360
    },
    {
        "content": "<p>You talk about an \"ordinary deduction proof\" but what does that even mean? If the formal definition of this is \"you can use only the following 15 facts\" then you can just tell them the facts and say they can only use those, or just write your own tactic which is \"library search but it only knows these 15 theorems\", which would be quite easy to do.</p>",
        "id": 282608108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652776576
    },
    {
        "content": "<p>In the <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2022/blob/master/src/section01logic/sheet1.lean\">first problem sheet</a> of the course I teach, I even tell the students that every single goal can be solved with the <code>tauto!</code> tactic but that the object of the exercise is not to solve the goals, but to learn the basic tactics which they'll need in all the other sheets.</p>",
        "id": 282608579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652776846
    },
    {
        "content": "<p>\"Writing your own tactic which is library_search but it only knows these 15 theorems\" sounds like the most probable solution to the problem. I will try and look into this. The thing is that I only use Lean as some kind of \"back end\" which is not visible for the user. Maybe I have not explained the situation well enough yet here!</p>",
        "id": 282615561,
        "sender_full_name": "ebp",
        "timestamp": 1652781245
    },
    {
        "content": "<p>When I wrote the natural number game (a website with lean as a back end) I found that the <code>rw</code> tactic was not exactly what I wanted, but I asked for help here and was shown how to modify the tactic slightly so that it behaved the way I wanted it to behave.</p>",
        "id": 282664260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652803547
    }
]