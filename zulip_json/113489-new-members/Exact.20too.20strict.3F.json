[
    {
        "content": "<p>Given the context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sol</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t_cond</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">condd_w</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t_cond</span> <span class=\"n\">t_l</span> <span class=\"n\">t_r</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It seems to me that I should be able to solve this using exact sol. However, lean complains with: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t_cond</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">condd_w</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t_cond</span> <span class=\"n\">t_l</span> <span class=\"n\">t_r</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I tried to use generalize_hyp, however, I am unsure how to specify the wildcards too.</p>\n<p>How can I solve this?</p>\n<p>Thanks</p>",
        "id": 230326693,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615806395
    },
    {
        "content": "<p>Could you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 230467660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615878313
    },
    {
        "content": "<p>The expression <code>?m_1[_]</code> is called a deferred substitution. It arises when you substitute for a metavariable that isn't known yet. Lean won't unify such goals because they are underdetermined; it's basically like asking the question \"solve for <code>f</code> given <code>f 1 = 2</code>\"</p>",
        "id": 230474792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615882616
    },
    {
        "content": "<p>To solve this you have to unify the metavariable in its original context. An <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> will help to point out where this is more specifically</p>",
        "id": 230474871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615882680
    },
    {
        "content": "<p>I tried to minify the example as much as possible. Nevertheless, I apologize for the size of it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ttype</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">ty_bool</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_false</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">inhabited.mk</span> <span class=\"n\">t_true</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_if_true</span> <span class=\"o\">{</span><span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t_true</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_if_false</span> <span class=\"o\">{</span><span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t_false</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t3</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e_if</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span>\n\n\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">ctxtype</span> <span class=\"o\">:=</span> <span class=\"n\">finmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">ttype</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">in_ctx</span> <span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx</span><span class=\"o\">:</span><span class=\"n\">ctxtype</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ctx.lookup</span> <span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">option.some</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">ctxtype</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">ttype</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">typ_true</span> <span class=\"o\">{</span><span class=\"n\">ctx</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">t_true</span> <span class=\"n\">ty_bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">typ_false</span> <span class=\"o\">{</span><span class=\"n\">ctx</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">t_true</span> <span class=\"n\">ty_bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">typ_if</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">cond</span> <span class=\"n\">ty_bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">l</span> <span class=\"n\">T</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"n\">r</span> <span class=\"n\">T</span>  <span class=\"bp\">-&gt;</span> <span class=\"n\">typ</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">closed</span>  <span class=\"o\">:</span> <span class=\"n\">ctxtype</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">closed</span> <span class=\"n\">ctx</span> <span class=\"n\">cond</span> <span class=\"bp\">∧</span> <span class=\"n\">closed</span> <span class=\"n\">ctx</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">closed</span> <span class=\"n\">ctx</span> <span class=\"n\">r</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">is_value</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">progress</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">closed</span> <span class=\"bp\">∅</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">typ</span> <span class=\"bp\">∅</span> <span class=\"n\">t</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">is_value</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">eval</span> <span class=\"n\">t</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">cl</span> <span class=\"n\">ty</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"n\">generalizing</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_value</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n\n    <span class=\"n\">rw</span> <span class=\"n\">closed</span> <span class=\"n\">at</span> <span class=\"n\">cl</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">cl</span> <span class=\"k\">with</span> <span class=\"n\">cl_t</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">cl_right</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"n\">t_ih_cond</span> <span class=\"n\">cl_t</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">t_ih_l</span> <span class=\"n\">cl_right_left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">t_ih_r</span> <span class=\"n\">cl_right_right</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ty</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">condd</span> <span class=\"o\">:=</span> <span class=\"n\">cond</span> <span class=\"n\">ty_a</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ll</span> <span class=\"o\">:=</span> <span class=\"n\">l</span> <span class=\"n\">ty_a_1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">rr</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"n\">ty_a_2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">condd</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">condd</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">sol</span><span class=\"o\">:=</span> <span class=\"n\">eval.e_if</span> <span class=\"n\">condd_h</span><span class=\"o\">,</span>\n\n      <span class=\"n\">exact</span> <span class=\"n\">sol</span><span class=\"o\">,</span> <span class=\"bp\">%</span> <span class=\"n\">here</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The issue arises near the end of the file.</p>\n<p>Thanks</p>",
        "id": 230487308,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615889443
    },
    {
        "content": "<p>I'm getting an error at <code>ty_a</code>, I guess you are using an old version of lean?</p>",
        "id": 230490807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615891298
    },
    {
        "content": "<p>The issue is at the <code>split</code>, which you used to destructure an existential without saying what you want to insert for the witness. You should use <code>use</code> or <code>existsi</code> instead and provide the witness</p>",
        "id": 230490962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615891383
    },
    {
        "content": "<p>Oh, actually the problem is that you did <code>split</code> and <code>cases condd</code> in the wrong order, meaning that the witness was not introduced into the context until after you needed it. This works (replacing the lines after <code>have rr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">rcases</span> <span class=\"n\">condd</span> <span class=\"k\">with</span> <span class=\"n\">hcond</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">vcond</span><span class=\"o\">,</span> <span class=\"n\">hcond</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eval.e_if</span> <span class=\"n\">hcond</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230491540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615891710
    },
    {
        "content": "<p>Thanks! I was stuck on this one for a while!</p>",
        "id": 230493187,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615892645
    },
    {
        "content": "<p>In order to upgrade my lean version, do I just need to change the version on my leanpkg.toml?</p>",
        "id": 230493816,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615892973
    },
    {
        "content": "<p>I guess I had to ask elan to update too, but it seems to work :)</p>",
        "id": 230494332,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615893247
    }
]