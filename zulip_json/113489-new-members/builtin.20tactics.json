[
    {
        "content": "<p>is there an even simpler way to write <code>{ left, assumption} &lt;|&gt; { right, assumption }</code> ?</p>",
        "id": 134011488,
        "sender_full_name": "Olli",
        "timestamp": 1537016447
    },
    {
        "content": "<p><code>simp*</code></p>",
        "id": 134011636,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537016699
    },
    {
        "content": "<p>thanks</p>",
        "id": 134011708,
        "sender_full_name": "Olli",
        "timestamp": 1537016861
    },
    {
        "content": "<p>is there a way to do pattern matching in tactic mode?</p>",
        "id": 134012389,
        "sender_full_name": "Olli",
        "timestamp": 1537018241
    },
    {
        "content": "<p>if there was I would think it'd be with the <code>let</code> tactic, but I can't seem to get it to work</p>",
        "id": 134012448,
        "sender_full_name": "Olli",
        "timestamp": 1537018350
    },
    {
        "content": "<p>rcases</p>",
        "id": 134012572,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537018597
    },
    {
        "content": "<p>how come I can't just repeat <code>constructor</code> here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hpq</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">assumption</span>\n  <span class=\"c1\">-- Doesn&#39;t work because before `assumption` state is:</span>\n  <span class=\"c1\">-- p q : Prop,</span>\n  <span class=\"c1\">-- h : ¬(p ∨ q),</span>\n  <span class=\"c1\">-- hpq : q</span>\n  <span class=\"c1\">-- ⊢ p</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but yet this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"bp\">;</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hpq</span><span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hpq</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134023310,
        "sender_full_name": "Olli",
        "timestamp": 1537039189
    },
    {
        "content": "<p>Lean can't possibly know which constructor to use</p>",
        "id": 134023364,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537039268
    },
    {
        "content": "<p>hmm I see, I was originally trying to write it as <code>repeat { constructor, assumption }</code>, but yeah I think I understand how this is ambigious</p>",
        "id": 134023405,
        "sender_full_name": "Olli",
        "timestamp": 1537039354
    },
    {
        "content": "<p>Some symmetries in maths are lost in computer science. Or and And are different types of things. And only has one constructor (to prove <code>and p q</code> you have to supply both a proof of <code>p</code> and a proof of <code>q</code> all in one go) but Or has two (to prove <code>or p q</code> you have two choices). If you look at the definitions as inductive types by right clicking on <code>and</code> or <code>or</code> in a working Lean session and peeking at the definition you will see this. For inductive types with one constructor like <code>and</code> or <code>subtype</code> or <code>group</code> the <code>constructor</code> tactic does a predictable thing. For types like <code>or</code> with more than one constructor the tactic just, I think, chooses the first one, so for <code>or</code> I think <code>constructor</code> does the same as <code>left</code>.</p>",
        "id": 134025252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537043297
    },
    {
        "content": "<p>yeah it's probably a good idea to avoid using <code>constructor</code> with types having more than one constructor then?</p>\n<p>so far my strategy for solving these exercises has been just staring at the tactic state while trying to make progress and not giving too much thought to what is happening in the bigger picture, and this is working surprisingly well, but there are some traps like this that lead to dead-ends</p>",
        "id": 134025625,
        "sender_full_name": "Olli",
        "timestamp": 1537044210
    },
    {
        "content": "<p>you can use constructor as long as only one of the constructors is applicable</p>",
        "id": 134025763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537044506
    }
]