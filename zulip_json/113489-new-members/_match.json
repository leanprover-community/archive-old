[
    {
        "content": "<p>If I put the cursor before <code>_match</code>, in the context, there is <code>_match: list α → list α → list α</code>. But why does the following code report <code>unknown identifier '_match'</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">list_has_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">l2</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">l2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">l1</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">_match</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">⟩</span>\n<span class=\"kd\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 243600463,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624414478
    },
    {
        "content": "<p>It is only accessible in tactic mode due to some parser quirks</p>",
        "id": 243600573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624414579
    },
    {
        "content": "<p><code>by exact _match</code> works</p>",
        "id": 243600582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624414599
    },
    {
        "content": "<p>The recommended way to write inner recursive functions is to have a separate definition and use the equation compiler</p>",
        "id": 243600685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624414760
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list_has_add_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span> <span class=\"n\">l2</span>\n<span class=\"bp\">|</span> <span class=\"n\">l1</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">l1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">list_has_add_aux</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">list_has_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">list_has_add_aux</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 243600793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624414860
    },
    {
        "content": "<p>If I use <code>nil</code> instead of the notation <code>[]</code> in the definition, why do I get the error: <code>equation compiler error, equation #2 has not been used in the compilation (possible solution: delete equation)</code>? (solved)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span> <span class=\"n\">l2</span>\n<span class=\"bp\">|</span> <span class=\"n\">l1</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">l1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 243601655,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624415927
    },
    {
        "content": "<p>Oh.... I see.. It should be <code>list.nil</code></p>",
        "id": 243601686,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624415996
    },
    {
        "content": "<p>you can also <code>open list</code></p>",
        "id": 243604531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624420111
    }
]