[
    {
        "content": "<p>A relatively minimal example, which has a recursive structure on which we are trying to do lexicographical comparison efficiently, by first comparing with a pre-calculated hash before traversing the recursive structure.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Desc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">params</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Desc</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"c1\">-- Returns the lexicographical comparison of two lists</span>\n<span class=\"kd\">def</span> <span class=\"n\">lexLists</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ordering</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Ordering</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">!=</span> <span class=\"n\">Ordering.eq</span>\n    <span class=\"k\">then</span> <span class=\"n\">r</span>\n    <span class=\"k\">else</span> <span class=\"n\">lexLists</span> <span class=\"n\">c</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ordering.eq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cmp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">Desc</span><span class=\"o\">):</span> <span class=\"n\">Ordering</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">xname</span><span class=\"o\">,</span> <span class=\"n\">xhash</span><span class=\"o\">,</span> <span class=\"n\">xparams</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">yname</span><span class=\"o\">,</span> <span class=\"n\">yhash</span><span class=\"o\">,</span> <span class=\"n\">yparams</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">chash</span> <span class=\"o\">:=</span> <span class=\"n\">compare</span> <span class=\"n\">xhash</span> <span class=\"n\">yhash</span>\n      <span class=\"k\">if</span> <span class=\"n\">chash</span> <span class=\"bp\">!=</span> <span class=\"n\">Ordering.eq</span>\n      <span class=\"k\">then</span> <span class=\"n\">chash</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">cname</span> <span class=\"o\">:=</span> <span class=\"n\">compare</span> <span class=\"n\">xname</span> <span class=\"n\">yname</span>\n        <span class=\"k\">if</span> <span class=\"n\">cname</span> <span class=\"bp\">!=</span> <span class=\"n\">Ordering.eq</span>\n        <span class=\"k\">then</span> <span class=\"n\">cname</span>\n        <span class=\"k\">else</span> <span class=\"n\">lexLists</span> <span class=\"n\">cmp</span> <span class=\"n\">xparams</span> <span class=\"n\">yparams</span>\n</code></pre></div>\n<p>This gives the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">cmp</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<p>I have had a similar problem in Coq, which we solved with a inline fix, see </p>\n<p><a href=\"https://github.com/katydid/proofs/blob/old-coq/src/Symbolic/Ast/CmpSmartFunc.v#L29\">https://github.com/katydid/proofs/blob/old-coq/src/Symbolic/Ast/CmpSmartFunc.v#L29</a></p>\n<p>From what I read Lean4 had a smarter termination checker, but I guess this is still a tough one to crack.<br>\nIs there a way to declare an inline recursive function in Lean4 and would that possibly help the termination checker?</p>",
        "id": 311146433,
        "sender_full_name": "awalterschulze",
        "timestamp": 1668954272
    }
]