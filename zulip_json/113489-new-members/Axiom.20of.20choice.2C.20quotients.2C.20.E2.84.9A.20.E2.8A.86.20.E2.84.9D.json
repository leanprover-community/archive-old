[
    {
        "content": "<p>The following is an example of an \"obvious truth\" that feels impossible to prove in Lean. I feel like this is due to my lack of familiarity with AC on Lean.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">quotient_group</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_add_subgroup</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨-</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">RQ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"n\">Q</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℝ</span><span class=\"bp\">/</span><span class=\"n\">ℚ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">RQ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">RQ</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">/</span><span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">rational</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">RQ</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">rational</span> <span class=\"err\">∈</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201092350,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592356204
    },
    {
        "content": "<p>I guess a proof by contradiction would suffice, but I haven't managed to come up with anything.</p>",
        "id": 201092381,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592356253
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">rational</span> <span class=\"err\">∈</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">left_rel</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">rational</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk_out&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound&#39;</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Here's how I did it - I don't think this was at all easy to find though :( Hopefully others can clear it up for you better</p>",
        "id": 201093465,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592357625
    },
    {
        "content": "<p>It seems I wasn't able to leverage the definition of <code>quotient_add_group.left_rel</code>. Thank you!</p>",
        "id": 201094801,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592359497
    }
]