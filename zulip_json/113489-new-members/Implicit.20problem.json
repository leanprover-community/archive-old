[
    {
        "content": "<p>I don't know why this doesn't work? The <code>check test x</code> is fine, so why does Lean not accept <code>test x</code> in the Theorem?<br>\nI could change it to <code>test a x</code> etc. but I want to avoid dragging around the <code>a</code> all the time.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">test</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">triviality</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">test</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 214125187,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603320922
    },
    {
        "content": "<p><code>#check</code> accepts expressions which still have metavariables--parts of the expression that Lean can't determine (yet), like the variable <code>a</code> here. However, they can't appear in the statements of theorems/lemmas.</p>",
        "id": 214125446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603321104
    },
    {
        "content": "<p>I guess this is a minimized example, since in this example it doesn't make a lot of sense to leave <code>a</code> implicit.</p>",
        "id": 214125473,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603321127
    },
    {
        "content": "<p>Right, it's a Minimal (not) Working Example</p>",
        "id": 214125499,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603321151
    },
    {
        "content": "<p>It's more like, imagine we have <code>test a x</code>, <code>test a y</code>, <code>test a (x+y)</code>, ... and we get tired of writing <code>a</code> all the time</p>",
        "id": 214125626,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603321218
    },
    {
        "content": "<p>When you make an argument implicit you normally expect that Lean will infer the value at the call site, so generally an implicit argument should appear again in the rest of the type somewhere.</p>",
        "id": 214126111,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603321635
    },
    {
        "content": "<p>It sounds like you might be looking for something more like <code>parameters</code>, but it's hard to make a suggestion without more information about what you want to do.</p>",
        "id": 214126231,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603321720
    },
    {
        "content": "<p>OK thanks for the suggestion, here's a more realistic version.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">delta_comm</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span> <span class=\"n\">δ</span> <span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">max_comm</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">min_comm</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">),</span>\n    <span class=\"k\">calc</span> <span class=\"n\">δ</span> <span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span>\n          <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">):</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">B</span><span class=\"bp\">\\</span><span class=\"n\">A</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">A</span><span class=\"bp\">\\</span><span class=\"n\">B</span><span class=\"bp\">|</span><span class=\"o\">):</span> <span class=\"kd\">by</span> <span class=\"kd\">begin</span> <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"kd\">end</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"n\">B</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span>\n</code></pre></div>\n\n<p>I want to prove theorems like <code>delta_comm</code> by just writing <code>theorem delta_comm {m M: ℕ} {A B : finset ℕ}: δ A B = δ B A :=</code><br>\nor <code>theorem delta_comm {A B : finset ℕ}: δ A B = δ B A :=</code><br>\nand have <code>m</code> and <code>M</code> be inferred from context.</p>",
        "id": 214126613,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1603322143
    }
]