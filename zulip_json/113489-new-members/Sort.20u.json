[
    {
        "content": "<p>I was reading through the lean 4 manual and came across <code>Sort u : the universe of types at universe level u</code>. I don't really understand Sort, and the what the <code>universe level</code> is. Also, <code>(x : α) → β : the type of functions taking an element x of α to an element of β, where β is an expression whose type is a Sort</code>. What does it mean to return type <code>Sort</code>. I never had something like this in the languages I've worked with</p>",
        "id": 269194691,
        "sender_full_name": "J. O.",
        "timestamp": 1643072421
    },
    {
        "content": "<p>im honestly confused with lean's type system</p>",
        "id": 269195307,
        "sender_full_name": "J. O.",
        "timestamp": 1643072964
    },
    {
        "content": "<p>this whole monstrosity:</p>\n<p>Prop abbreviates Sort 0, Type abbreviates Sort 1, and Type u abbreviates Sort (u + 1) when u is a universe variable. We say \"α is a type\" to express α : Type u for some u, and we say \"p is a proposition\" to express p : Prop. Using the propositions as types correspondence, given p : Prop, we refer to an expression t : p as a proof of p. In contrast, given α : Type u for some u and t : α, we sometimes refer to t as data.</p>",
        "id": 269195325,
        "sender_full_name": "J. O.",
        "timestamp": 1643072982
    },
    {
        "content": "<p>even these are a bit confusing <a href=\"/user_uploads/3121/NFre-UI6SFvqAu6Caoa6524X/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NFre-UI6SFvqAu6Caoa6524X/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/NFre-UI6SFvqAu6Caoa6524X/image.png\"></a></div>",
        "id": 269195603,
        "sender_full_name": "J. O.",
        "timestamp": 1643073247
    },
    {
        "content": "<p>Like Sort u is also Type u</p>",
        "id": 269195613,
        "sender_full_name": "J. O.",
        "timestamp": 1643073264
    },
    {
        "content": "<p>is understanding lean's type system at the beginning very important?</p>",
        "id": 269195761,
        "sender_full_name": "J. O.",
        "timestamp": 1643073406
    },
    {
        "content": "<p>but mainly, what is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n</code></pre></div>",
        "id": 269195811,
        "sender_full_name": "J. O.",
        "timestamp": 1643073468
    },
    {
        "content": "<p>It's not terribly important I think, but others may recommend knowing just a bit. Essentially some of the complexity here comes from some mathematics -- perhaps to start, have you ever heard of <a href=\"https://en.wikipedia.org/wiki/Russell's_paradox\">Russell's paradox</a>?</p>",
        "id": 269197408,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643074778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/Sort.20u/near/269197408\">said</a>:</p>\n<blockquote>\n<p>It's not terribly important I think, but others may recommend knowing just a bit. Essentially some of the complexity here comes from some mathematics -- perhaps to start, have you ever heard of <a href=\"https://en.wikipedia.org/wiki/Russell's_paradox\">Russell's paradox</a>?</p>\n</blockquote>\n<p>I never heard of Russels Paradox. Im gonna give it a read</p>",
        "id": 269197476,
        "sender_full_name": "J. O.",
        "timestamp": 1643074822
    },
    {
        "content": "<p>How does the paradox relate to the type system?</p>",
        "id": 269197511,
        "sender_full_name": "J. O.",
        "timestamp": 1643074857
    },
    {
        "content": "<p>universes essentially are a way to \"fix\" this paradox (or truthfully a related one, called <a href=\"https://cs.brown.edu/courses/cs1951x/docs/logic/girard.html\">Girard's paradox</a> which mathlib even has a proof of!)</p>",
        "id": 269197720,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643074937
    },
    {
        "content": "<p>I'd say in short you should understand a few things, and then can expand -- first, <code>Prop</code> is the type of propositions (statements which have a proof or do not). Things like <code>2 = 2</code>, <code>2 = 7</code> or more complicated mathematical statements</p>",
        "id": 269197946,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643075001
    },
    {
        "content": "<p><code>Type</code> is more similar to what you're likely familiar with from other programming languages. E.g. <code>Nat</code> is the type of natural numbers.</p>",
        "id": 269198029,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643075024
    },
    {
        "content": "<p>And then why or when you need types that live in \"universes\" higher than 1 is the aforementioned paradox, which is relevant when doing specific kinds of math.</p>",
        "id": 269198144,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643075047
    },
    {
        "content": "<p>But I think you can likely get quite far just knowing the bit about <code>Prop</code> and <code>Type</code> -- (in fact if you haven't already, doing the <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\">natural number game</a> is a nice way to get started, albeit with Lean 3, and it I believe mentions nothing beyond these?).</p>",
        "id": 269198294,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643075179
    },
    {
        "content": "<p>There's a nice graphic in this post: <a href=\"#narrow/stream/113489-new-members/topic/question.20about.20bool.20vs.20Prop/near/264049001\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/question.20about.20bool.20vs.20Prop/near/264049001</a></p>",
        "id": 269198310,
        "sender_full_name": "Chris B",
        "timestamp": 1643075208
    },
    {
        "content": "<p>Oh, cool, that's indeed nice and I hadn't seen it myself!</p>",
        "id": 269198335,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643075247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">J. O.</span> <a href=\"#narrow/stream/113489-new-members/topic/Sort.20u/near/269195613\">said</a>:</p>\n<blockquote>\n<p>Like Sort u is also Type u</p>\n</blockquote>\n<p>The notation <code>a : A</code> means <code>a is an element of type A</code>, not <code>a is also A</code>.</p>",
        "id": 269198491,
        "sender_full_name": "Chris B",
        "timestamp": 1643075418
    },
    {
        "content": "<p>thanks</p>",
        "id": 269199674,
        "sender_full_name": "J. O.",
        "timestamp": 1643076350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@J. O.</span> Have you looked at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> ? It is written for people with a computer science background and answers a lot of basic questions. It has discussions about type universes.</p>",
        "id": 269371007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643181036
    }
]