[
    {
        "content": "<p>Does mathlib already have lemmas for some universal properties? One in particular I'm interested in is for subspaces/subtypes. This is just the statement that if A is a subspace of X, and T any other space, then f : T -&gt; A is continuous iff i o f is continuous where i is the inclusion of A into X, in this case just subtype.val.</p>",
        "id": 157998314,
        "sender_full_name": "Aymon Wuolanne",
        "timestamp": 1549845385
    },
    {
        "content": "<p>I think it's already there</p>",
        "id": 157998321,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549845429
    },
    {
        "content": "<p>something about induced / coinduced topology</p>",
        "id": 157998323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549845442
    },
    {
        "content": "<p>It's also <code>embedding.continuous_iff</code> plus <code>embedding_subtype_val</code></p>",
        "id": 157998370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549845530
    },
    {
        "content": "<p>I don't see that exact theorem, but it's an easy corollary of <code>tendsto_subtype_rng</code></p>",
        "id": 157998371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549845531
    },
    {
        "content": "<p>or <code>embedding_subtype_val</code></p>",
        "id": 157998372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549845541
    },
    {
        "content": "<p><code>continuous_induced_rng</code>?</p>",
        "id": 157998498,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549845758
    },
    {
        "content": "<p>yes, but it needs restatement</p>",
        "id": 157998549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549845865
    },
    {
        "content": "<p>also couldn't that theorem be an iff?</p>",
        "id": 157998550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549845883
    },
    {
        "content": "<p>Ah yep, I think continuous_induced_rng works well enough</p>",
        "id": 157998552,
        "sender_full_name": "Aymon Wuolanne",
        "timestamp": 1549845885
    },
    {
        "content": "<p>I only needed the forward direction, but it probably could be restated as an iff yeah</p>",
        "id": 157998570,
        "sender_full_name": "Aymon Wuolanne",
        "timestamp": 1549845931
    },
    {
        "content": "<p>you <code>simp</code>-minded people /s</p>",
        "id": 157998573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549845950
    },
    {
        "content": "<p>Haven't I mentioned before that over-reliance on defeq is an anti-pattern that leads to non-modularity and code brittleness?</p>",
        "id": 157998628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549846027
    },
    {
        "content": "<p>it's not just about <code>simp</code></p>",
        "id": 157998642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549846070
    },
    {
        "content": "<p>Also, out of curiosity what does rng/dom stand for?</p>",
        "id": 157998769,
        "sender_full_name": "Aymon Wuolanne",
        "timestamp": 1549846277
    },
    {
        "content": "<p>range domain?</p>",
        "id": 157998774,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549846313
    },
    {
        "content": "<p><code>rng</code> is not a standard abbreviation, it should probably be renamed</p>",
        "id": 157998817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549846365
    },
    {
        "content": "<p>also neither of the two <code>rng</code> theorems mentions <code>range</code></p>",
        "id": 157998832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549846404
    },
    {
        "content": "<p>I guess it should be <code>cod</code> instead (for codomain)</p>",
        "id": 157998834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549846435
    }
]