[
    {
        "content": "<p>I'm a little bit struggling with sum manipulation : I want to use the fact that <code>(finset.range n).sum f - (finset.range k).sum f  = (finset.range (n-k)).sum (lambda i, f (k+i))</code> but I can't find anything in the library that would help me to prove it. How would you do this ?</p>",
        "id": 201552196,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592772608
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 201552201,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592772648
    },
    {
        "content": "<p>You should try really hard to avoid anything that involves natural number subtraction. This operation has no good property, it only promises pain.</p>",
        "id": 201552265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592772738
    },
    {
        "content": "<p>this file has lots of stuff<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators.html\">https://leanprover-community.github.io/mathlib_docs/algebra/big_operators.html</a></p>",
        "id": 201552279,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592772798
    },
    {
        "content": "<p>It's probably not true if n&lt;k</p>",
        "id": 201552332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592772876
    },
    {
        "content": "<p>If n&gt;=k you might be better off writing n=k+t and removing all mention of subtraction</p>",
        "id": 201552348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592772925
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"err\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"err\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201552356,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592772951
    },
    {
        "content": "<p><code>finset.sum_range_add_sum_Ico</code> is pretty close (indeed, it's written without subtraction)</p>",
        "id": 201552424,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592773075
    },
    {
        "content": "<p>So I should write <code>(finset.range k+t).sum f - (finset.range k).sum f  = (finset.range t).sum (lambda i, f (k+i))</code> ?</p>",
        "id": 201552463,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592773094
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_add_sum_Ico\">docs#finset.sum_range_add_sum_Ico</a></p>",
        "id": 201552470,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592773122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/sum.20manipulation/near/201552424\">said</a>:</p>\n<blockquote>\n<p><code>finset.sum_range_add_sum_Ico</code> is pretty close (indeed, it's written without subtraction)</p>\n</blockquote>\n<p>Oh yes, thanks !</p>",
        "id": 201552540,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592773205
    },
    {
        "content": "<p>It might even be simpler to use with this formulation in my specific case</p>",
        "id": 201552616,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592773333
    },
    {
        "content": "<p>for completeness,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"err\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"err\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">sum_range_add_sum_Ico</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_sub_cancel&#39;</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_Ico_eq_sum_range</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201552637,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592773395
    },
    {
        "content": "<p>Thank you very much !</p>",
        "id": 201552692,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592773452
    },
    {
        "content": "<p>Thank you very much !</p>",
        "id": 201552693,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592773453
    },
    {
        "content": "<p>this exchange would have been easier if you had started with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, like a statement of a lemma whose proof is sorry</p>",
        "id": 201552772,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592773583
    },
    {
        "content": "<p>Oh yes, I'll keep that in mind</p>",
        "id": 201552788,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592773647
    }
]