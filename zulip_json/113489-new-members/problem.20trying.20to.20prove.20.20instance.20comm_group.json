[
    {
        "content": "<p>I am a total Lean newbie, so maybe I am trying something too advanced, but anyway: I was trying to prove that a normal subgroup of a group is a commutative group. I am running into some problem with coercions (or my understanding of type classes is wrong, I can't quite tell). What I tried is this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">normal_subgroup_is_comm_group</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normal_subgroup</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n        <span class=\"c1\">-- here * is not expanded</span>\n        <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- can&#39;t simplify the definition of *, for some reason?!</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"c1\">-- part of ..subtype.group, but I include it to show the difference to mul_comm</span>\n        <span class=\"c1\">-- here the definition of * from subtype.monoid (via subtype.group) is used</span>\n        <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- simplifies the definition of * just fine</span>\n        <span class=\"n\">exact</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200705964,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1591986019
    },
    {
        "content": "<p>One issue here is the fact that it's not true that an arbitrary normal subgroup of an arbitrary group is always commutative.</p>",
        "id": 200706268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591986186
    },
    {
        "content": "<p>that would be a problem ;-)</p>",
        "id": 200706336,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1591986223
    },
    {
        "content": "<p>but I still don't understand why the first simp doesn't manage to expand *</p>",
        "id": 200706419,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1591986248
    },
    {
        "content": "<p>In fact I think this might be the only issue, you seem to have proved associativity just fine</p>",
        "id": 200706420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591986248
    },
    {
        "content": "<p>I get <code>unknown identifier 'normal_subgroup'</code>. I'm using today's mathlib. -- Aah, I need to add <code>import deprecated.subgroup</code></p>",
        "id": 200706584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591986332
    },
    {
        "content": "<p>So your goal is <code>⊢ ⟨a, ha⟩ * ⟨b, hb⟩ = ⟨b, hb⟩ * ⟨a, ha⟩</code> and <code>simp</code> doesn't do anything -- I don't understand the question. You want to change it to <code>a * b = b * a</code>? This works:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 200706987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591986528
    },
    {
        "content": "<p>I don't understand why the second simp does something, and the first doesn't</p>",
        "id": 200707078,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1591986580
    },
    {
        "content": "<p>But anyway, change helped me already, thanks</p>",
        "id": 200707939,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1591986976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306293\">@Carl Friedrich Bolz-Tereick</span> Are you thinking of \"a subgroup of a commutative group is always normal\"?</p>",
        "id": 200708780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591987405
    },
    {
        "content": "<p>no, I arrived at this mathematically wrong example above while trying to reduce more and more what I actually tried to prove, which is that the center of a division_ring is a comm_ring. with kevin's hint I now managed to do that. I don't completely understand how the change tactic he proposed works, though</p>",
        "id": 200709220,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1591987624
    },
    {
        "content": "<p>The second <code>simp</code> doesn't do anything useful. <code>*</code> is notation for <code>has_mul.mul</code> which <code>simp</code> has changed to the definitionally equal <code>group.mul</code>.</p>",
        "id": 200709643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591987836
    },
    {
        "content": "<p>If the goal is <code>X</code> then <code>change Y</code> will successfully change the goal to Y if and only if X and Y are definitionally equal.</p>",
        "id": 200709738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591987888
    },
    {
        "content": "<p>thanks</p>",
        "id": 200710714,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1591988322
    },
    {
        "content": "<p>Here's the tactic doc: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#change\">tactic#change</a></p>",
        "id": 200710852,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591988379
    },
    {
        "content": "<p>and I managed to show that the center of a division_ring is a field, which is what I originally wanted to try :-). the proof is pretty hairy though, need to simplify it</p>",
        "id": 200752590,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1592030897
    }
]