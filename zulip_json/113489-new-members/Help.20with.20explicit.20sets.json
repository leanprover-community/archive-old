[
    {
        "content": "<p>I've been battling a while now with <code>set</code>s, <code>finset</code>s, <code>fintype</code>s and such forth for a while now.  I have many questions, but as way of a first one I have this.</p>\n<p>Given the following definition of a quiver:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">quiver</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">edges</span> <span class=\"bp\">→</span> <span class=\"n\">vertices</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">edges</span> <span class=\"bp\">→</span> <span class=\"n\">vertices</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I would like to define a small \"toy\" example so I can prove some theorems with it.  Something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test_quiver</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">quiver</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">vertices</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n    <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span>\n    <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>A lot about this screams sub-optimal to me: for example the <code>s</code> and <code>t</code> functions I'd prefer to define by some mapping from <code>a</code> to values (so that defining more complicated quivers is simple).  I presume there is some way to do this with inductive functions, but that is secondary.</p>\n<p>The first problem is that the above doesn't compile.</p>\n<div class=\"codehilite\"><pre><span></span>/home/rob...ry/src/quiver.lean:40:9: error: type mismatch at field &#39;s&#39;\n  λ (e : ↥{a}), A\nhas type\n  ↥{a} → α\nbut is expected to have type\n  ↥{a} → ↥{A, B}\n</pre></div>\n\n\n<p>I understand the error, and I understand the problem (A is of type α and a priori has nothing to do with the set {A, B}).  My question is how to fix this?  Since I can't even find where the <code>{...}</code> notation is defined, I don't know what type <code>{A,B}</code> even is, so don't know what is missing.</p>",
        "id": 162833839,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1554741752
    },
    {
        "content": "<p>You've defined \"a quiver whose vertices are a subset of α and whose edges are a subset of β\". Unless you really meant to do this for some reason, it would probably make things a lot easier to define</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">quiver</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">edges</span> <span class=\"bp\">→</span> <span class=\"n\">vertices</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">edges</span> <span class=\"bp\">→</span> <span class=\"n\">vertices</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 162834048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554741916
    },
    {
        "content": "<p>Ok, sure: I suppose that makes a little more sense (and coercion will convert any subsets of type  α to a type when I need to define a quiver on a subset of  α?)</p>",
        "id": 162834401,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1554742206
    },
    {
        "content": "<p>The question then changes to \"how do I make a Type with exactly three named elements in it\"</p>",
        "id": 162834421,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1554742233
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#enumerated-types\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#enumerated-types\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#enumerated-types</a></p>",
        "id": 162834480,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554742302
    },
    {
        "content": "<p>To answer your original question, <code>↥{A, B}</code> is the type <code>subtype {A, B}</code>. To give a value of this type you need to give a value of the underlying type <code>α</code> together with a proof that the value belongs to the subset <code>{A, B}</code>--I assume <code>by simp</code> will do it for you.</p>",
        "id": 162834591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554742393
    },
    {
        "content": "<p>Ahhhh.   Sigh.  Obvious now.  Thank you for your time!</p>",
        "id": 162834757,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1554742505
    }
]