[
    {
        "content": "<p>Is there something special in the <code>quot</code> construction in Lean kernel? I tried to reproduce my own quotient following the declarations in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients</a> but I don't get the same reduction as the original construction. What is it missing?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"kn\">variable</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span>\n\n<span class=\"c1\">-- same declarations as TPiL changing quot by my_quot</span>\n<span class=\"kn\">constant</span> <span class=\"n\">my_quot</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span>\n<span class=\"kn\">constant</span> <span class=\"n\">my_quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">my_quot</span> <span class=\"n\">r</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">my_quot</span><span class=\"bp\">.</span><span class=\"n\">ind</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">my_quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">my_quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">my_quot</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">q</span>\n<span class=\"kn\">constant</span> <span class=\"n\">my_quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">my_quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">my_quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n    <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">my_quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">my_quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"n\">b</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"c1\">-- f a</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">my_quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">my_quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- itself</span>\n</code></pre></div>",
        "id": 197883818,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589770771
    },
    {
        "content": "<p>Yes, it is special. It gets introduced in core Lean with a special keyword: <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L151\">https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L151</a></p>\n<p>What you're missing is the special reduction rule mentioned there.</p>",
        "id": 197883913,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589770922
    },
    {
        "content": "<p>Yes, reduction rule for <code>lift</code> is implemented in C++.</p>",
        "id": 197883927,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589770922
    },
    {
        "content": "<p>So, is my mental model correct if I think on <code>quot.lift f h (quot.mk r a) ~~&gt; f a</code> as an \"extra\" rule at the same level with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">η</span></span></span></span>, etc. reductions?</p>",
        "id": 197884513,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589771634
    },
    {
        "content": "<p>yes</p>",
        "id": 197885008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589772129
    },
    {
        "content": "<p>This exact rule is mentioned at <a href=\"https://leanprover.github.io/reference/expressions.html#axioms\">https://leanprover.github.io/reference/expressions.html#axioms</a></p>",
        "id": 197885056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589772173
    },
    {
        "content": "<p>That was useful. Thank, folks!</p>",
        "id": 197885228,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1589772322
    }
]