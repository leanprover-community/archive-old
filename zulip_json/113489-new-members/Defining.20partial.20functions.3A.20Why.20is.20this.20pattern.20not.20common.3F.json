[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"c1\">-- Can you define partial functions in Lean? Yes, you can!</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">this_is_a_partial_function</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">this_is_a_partial_function</span> <span class=\"mi\">12837481729847128934718237489178942739</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_pos</span> <span class=\"mi\">12837481729847128934718237489178942738</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In this vein, nat subtraction and division can be partial functions.</p>",
        "id": 226802909,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1613651486
    },
    {
        "content": "<p>Why are they not partial functions? It must have been an intentional design choice.</p>",
        "id": 226802997,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1613651535
    },
    {
        "content": "<p>Yes I totally agree that this can be done. Indeed I even tried to do it myself once. However I just ended up learning the hard way that it's simply much easier in practice to let functions return junk values outside the domain of definition.</p>",
        "id": 226803023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613651557
    },
    {
        "content": "<p>The example which taught me why the current design decision is a good one was square roots. I was formalising 1st year example sheets and some questions mentioned square roots, which we didn't have in mathlib at the time. In fact I was teaching my students the formal definition -- if x&gt;=0 then the square root of x is the sup of {y | y^2 &lt;= x}, and if x &lt; 0 then this set doesn't have a sup but who cares, negative reals don't have square roots.</p>",
        "id": 226803185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613651645
    },
    {
        "content": "<p>So I defined a square root function to take as input a real number r and a proof that it was &gt;= 0, and then returned this sup. And I posted it on the gitter chat (we used gitter before Zulip) and the computer scientists laughed at me because actually nowhere in my definition did I use the assumption that the real number was &gt;= 0, so the function to them looked farcical, it demanded an input and then just ignored it.</p>",
        "id": 226803279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613651731
    },
    {
        "content": "<p>The sup function returned junk values for sets without a sup, so the function ran happily even when presented with a negative number (it probably just returned the value 0). I was offended by this idea because sqrt(-1) might be a lot of things but it's certainly not 0, so I went with my definition when formalising the solutions to my problem sheets. Mario just formalised the current mathlib version and added it to mathlib in the interim. And then I found when doing my example sheets that this stupid extra input was a complete pain because whenever I even <em>mentioned</em> a square root I had to supply this proof, even though I knew it wasn't even necessary for the function to run. For example doing a long calc proof that sqrt(2)+sqrt(3)&lt;sqrt(10) was really painful because on every line there were new square roots popping up and I had to just keep proving that various random numbers were positive.</p>\n<p>I soon came around to the idea of letting functions be total and returning junk values.</p>",
        "id": 226803553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613651919
    }
]