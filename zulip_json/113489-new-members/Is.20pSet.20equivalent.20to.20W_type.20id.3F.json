[
    {
        "content": "<p>I'm wondering if <code>pSet</code> is equivalent to <code>W_type (id : Type → Type)</code>. They seem similar: both are a fixed point of <code>X ↦ Σ a : Type, a → X</code> and represent (or can represent) well-founded trees. However, I've been struggling a bit with how to prove this equivalence, so I'm wondering if the relation isn't as simple as it looks.</p>",
        "id": 290571206,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658526641
    },
    {
        "content": "<p>They are equivalent. Here is a proof. I defined <code>to_pSet</code> in two different ways so you can see how to do it directly from the recursor.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.W.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_pSet</span> <span class=\"o\">:</span> <span class=\"n\">W_type</span> <span class=\"n\">id</span> <span class=\"bp\">→</span> <span class=\"n\">pSet</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">W_type.mk</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pSet.mk</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">to_pSet</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_pSet2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">W_type</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pSet</span> <span class=\"o\">:=</span>\n<span class=\"n\">W_type.rec_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">pSet.mk</span> <span class=\"n\">α</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_W_type</span> <span class=\"o\">:</span> <span class=\"n\">pSet</span> <span class=\"bp\">→</span> <span class=\"n\">W_type</span> <span class=\"n\">id</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pSet.mk</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">W_type.mk</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">to_W_type</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_pSet_to_W_type</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pSet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_pSet</span> <span class=\"o\">(</span><span class=\"n\">to_W_type</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">to_pSet</span><span class=\"o\">,</span> <span class=\"n\">to_W_type</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_W_type_to_pSet</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">W_type</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_W_type</span> <span class=\"o\">(</span><span class=\"n\">to_pSet</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">to_pSet</span><span class=\"o\">,</span> <span class=\"n\">to_W_type</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290576732,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1658530799
    },
    {
        "content": "<p>Oh wow</p>",
        "id": 290577575,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658531475
    },
    {
        "content": "<p>I have two questions</p>\n<ul>\n<li>could we redefine <code>pSet</code> as <code>W_type id</code> and take advantage of existing API on <code>W_type</code>?</li>\n<li>is there a similar equivalence on <code>pgame</code>?</li>\n</ul>",
        "id": 290577609,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658531515
    },
    {
        "content": "<p>I think maybe <code>pgame</code> might be equivalent to <code>W_type (sum.elim id id : Type ⊕ Type → Type)</code></p>",
        "id": 290578132,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658531935
    },
    {
        "content": "<p>Oh wait, are W-types just a formalism of inductive types?</p>",
        "id": 290578738,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658532517
    },
    {
        "content": "<p>There's a PR somewhere that encodes nat and list as W-types. It might be a fun project to write a metaprogram to build that sort of encoding automatically</p>",
        "id": 290582408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658536717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I thought so! Thanks for sharing the proof.</p>",
        "id": 290582794,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658537249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20pSet.20equivalent.20to.20W_type.20id.3F/near/290578738\">said</a>:</p>\n<blockquote>\n<p>Oh wait, are W-types just a formalism of inductive types?</p>\n</blockquote>\n<p>idk if you're already aware of it, but there's a paper on this topic from some familiar people: <a href=\"https://drops.dagstuhl.de/opus/volltexte/2019/11061/pdf/LIPIcs-ITP-2019-6.pdf\">Data Types as Quotients of Polynomial Functors</a></p>\n<p>(well, it's technically about polynomial functors, but it mentions W types as initial algebras)</p>",
        "id": 290582951,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658537456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20pSet.20equivalent.20to.20W_type.20id.3F/near/290582408\">said</a>:</p>\n<blockquote>\n<p>There's a PR somewhere that encodes nat and list as W-types.</p>\n</blockquote>\n<p>It's already in master, if you're referring to this: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/W/constructions.html\">https://leanprover-community.github.io/mathlib_docs/data/W/constructions.html</a></p>",
        "id": 290583270,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658537836
    },
    {
        "content": "<p>I just found it interesting that <code>pSet</code> appears to be the most \"generic\" W-type, almost like the \"free W-type\" in a sense (though I'm sure I'm misusing terminology here)</p>\n<p>from the viewpoint of W-types as specifying a relation between constructors and arities, <code>pSet</code> is the W-type where each constructor <em>just is</em> the arity... which makes perfect sense when you want a general concept of collections of different sizes</p>",
        "id": 290584320,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658539279
    },
    {
        "content": "<p>I wonder if <code>M_type (id : Type → Type)</code> would be like pSets for non-wellfounded set theory</p>",
        "id": 290585433,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658540854
    },
    {
        "content": "<p>In <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> section 5, Mario explains how all inductive types can be reduced to W-types (with the help of 7 more basic inductive types).</p>",
        "id": 290585643,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658541154
    },
    {
        "content": "<p>nice!</p>",
        "id": 290585821,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658541477
    },
    {
        "content": "<p>David Wärn proposed using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfunctor.M\">docs#pfunctor.M</a> to <a href=\"#narrow/stream/116395-maths/topic/Well-founded.20recursion.20for.20pgames/near/281975537\">define non-wellfounded games</a> but I still haven't studied the details ...</p>",
        "id": 290585866,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658541496
    }
]