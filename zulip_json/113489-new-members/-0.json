[
    {
        "content": "<p><code>theorem test : (-0:ℕ) = 0 :=sorry</code>gives me the error message: <code>failed to synthesize type class instance for\n⊢ has_neg ℕ</code>. What does the error message mean? Does <code>has_neg</code> just mean <code>-</code>? (hovering over the error message does not give me any additional info)</p>",
        "id": 240576607,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622191637
    },
    {
        "content": "<p>yes</p>",
        "id": 240576629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622191658
    },
    {
        "content": "<p>the natural numbers don't have a negation</p>",
        "id": 240576640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622191667
    },
    {
        "content": "<p>The error message means that you wrote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">-0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">0</span></span></span></span>, Lean unfolded the notation and decided that you must be using a map <code>neg : nat -&gt; nat</code> and then it looked in its database (the type class inference system) and (unsurprisingly) found no such map.</p>",
        "id": 240576702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622191700
    },
    {
        "content": "<p>I was also confused by something similar: the natural number do not have <code>neg</code>, but they do have <code>sub</code>.</p>",
        "id": 240576886,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622191824
    },
    {
        "content": "<p>We could define such a function, but it would be very useless since <code>-x = 0</code></p>",
        "id": 240576909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622191845
    },
    {
        "content": "<p>So, while what you wrote does not work this does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 0 - 0 : ℕ</span>\n</code></pre></div>",
        "id": 240576948,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622191874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span>  <code>has_neg</code> is a \"notational typeclass\", the simplest kind of typeclass. If you have any random term <code>a</code> of any type <code>X</code>, and you write <code>-a</code>, then Lean tries to find a so-called \"instance\" of <code>has_neg X</code>, which in practice means that it looks through all the stuff which has been imported and sees if anyone has defined a map <code>neg : X -&gt; X</code> and told this map to the system using the <code>instance</code> command. You can read about classes and instances in chapter 10 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a></p>",
        "id": 240576951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622191877
    },
    {
        "content": "<p>The reason for this is the following two lines right at the beginning of core Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_neg</span>      <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">prefix</span> <span class=\"bp\">-</span>       <span class=\"o\">:=</span> <span class=\"n\">has_neg.neg</span>\n</code></pre></div>\n<p>The first line makes the <code>has_neg</code> class, the second line attaches the notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span> to the class.</p>",
        "id": 240577150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622191987
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X.neg</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">X.neg</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 240577291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622192081
    },
    {
        "content": "<p>If you remove the <code>instance</code> line you'll get the same error as the one you were facing with <code>nat</code>.</p>",
        "id": 240577334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622192114
    }
]