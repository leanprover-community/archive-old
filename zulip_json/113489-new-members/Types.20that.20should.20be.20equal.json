[
    {
        "content": "<p>When trying to define the exterior product, I've run into the following issue. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">eqv</span> <span class=\"o\">:</span> <span class=\"n\">free_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">free_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">A bunch of relations go here</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">exterior_product</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add_con_gen</span> <span class=\"o\">(</span><span class=\"n\">exterior_product</span><span class=\"bp\">.</span><span class=\"n\">eqv</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">q</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">quotient</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">{</span><span class=\"n\">q1</span> <span class=\"n\">q2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">exterior_product</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">q1</span> <span class=\"bp\">→</span> <span class=\"n\">exterior_product</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">q2</span> <span class=\"bp\">→</span> <span class=\"n\">exterior_product</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">q1</span> <span class=\"bp\">+</span> <span class=\"n\">q2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">exterior_product</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">q1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exterior_product</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">q2</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">mul</span> <span class=\"n\">K</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">K</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"c1\">--fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">exterior_algebra.lean:111:19</span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  mul K y</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  y</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  exterior_product K V q2</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  exterior_product K V q1</span>\n<span class=\"cm\">exterior_algebra.lean:111:19</span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  mul K ⁇ x</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  x</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  exterior_product K V q1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  exterior_product K V q2</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>Lean doesn't understand that <code>exterior_algebra K V (q1 + q2)</code> and <code>exterior_algebra K V (q2 + q1)</code> are the same type. Always carrying around an isomorphism would make my code complicated and unusable. Is there a better way?</p>",
        "id": 204706975,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1595443839
    },
    {
        "content": "<p>congratulations, you've run into dependent type hell</p>",
        "id": 204708384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595444419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> will gladly give you a 1-hour lecture on how this is all doomed, but maybe you can read <a href=\"https://leanprover-community.github.io/archive/stream/116395-maths/topic/breaking.20equality.20with.20sheaves.html\">this thread</a> instead</p>",
        "id": 204709386,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595444897
    },
    {
        "content": "<p>You could try and work in the full exterior algebra instead I.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨁</mo><mi>q</mi></msub><msup><mo>∧</mo><mi>q</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\bigoplus_q \\wedge^q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.185818em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨁</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mbin\">∧</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span></span></span></span> instead of different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mo>∧</mo><mi>q</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\wedge^q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mbin\">∧</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span></span></span></span> separately</p>",
        "id": 204709444,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595444953
    },
    {
        "content": "<p>I guess a way to solve this is, as I have told you on Discord before, to use arbitrary fintype instead of <code>fin q</code></p>",
        "id": 204709576,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445025
    },
    {
        "content": "<p>then you will get two types that are not (provably) equal, namely <code>A1 (+) A2</code> and <code>A2 (+) A1</code></p>",
        "id": 204709603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445046
    },
    {
        "content": "<p>and that will stop you from comparing the elements therein</p>",
        "id": 204709617,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445060
    },
    {
        "content": "<p>But then how will he state associativity?</p>",
        "id": 204709666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> are we now stuck?</p>",
        "id": 204709745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445134
    },
    {
        "content": "<p>what does nLab have to say about this</p>",
        "id": 204709748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445137
    },
    {
        "content": "<p>But we know the trick</p>",
        "id": 204709757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445146
    },
    {
        "content": "<p>pentagon mode</p>",
        "id": 204709766,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445155
    },
    {
        "content": "<p>Mario did the trick in the DGA thread</p>",
        "id": 204709771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445157
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/pentagon+identity\">https://ncatlab.org/nlab/show/pentagon+identity</a></p>",
        "id": 204709792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445170
    },
    {
        "content": "<p>the pentagon is the associativity</p>",
        "id": 204709795,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445174
    },
    {
        "content": "<p>No, just do the mario trick</p>",
        "id": 204709803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445181
    },
    {
        "content": "<p>what is DGA?</p>",
        "id": 204709809,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445184
    },
    {
        "content": "<p>I mean, what do you do in maths</p>",
        "id": 204709893,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445238
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/CDGAs/near/167999328\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/CDGAs/near/167999328</a></p>",
        "id": 204709940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445244
    },
    {
        "content": "<p>it isn't like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo>×</mo><mi>Y</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>Z</mi><mo>=</mo><mi>X</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>Y</mi><mo>×</mo><mi>Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X \\times Y) \\times Z = X \\times (Y \\times Z)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">)</span></span></span></span> in ZFC either</p>",
        "id": 204709949,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445250
    },
    {
        "content": "<p>See the link</p>",
        "id": 204709963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445259
    },
    {
        "content": "<p>oh I remember that trick now</p>",
        "id": 204709983,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445276
    },
    {
        "content": "<p>so you say we keep using nat?</p>",
        "id": 204710023,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445302
    },
    {
        "content": "<p>Why not?</p>",
        "id": 204710084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445326
    },
    {
        "content": "<p>The trick works well enough to make the definition</p>",
        "id": 204710099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445336
    },
    {
        "content": "<p>I think it is worth trying</p>",
        "id": 204710107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445344
    },
    {
        "content": "<p>Gouezel defined tangent spaces in a weird way but could still work with them</p>",
        "id": 204710178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm sure you remember the sheaf hell</p>",
        "id": 204710212,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445388
    },
    {
        "content": "<p>where you have triple intersections of sets</p>",
        "id": 204710225,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445396
    },
    {
        "content": "<p>what did you do with it?</p>",
        "id": 204710230,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445399
    },
    {
        "content": "<p>No I completely forgot</p>",
        "id": 204710238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445404
    },
    {
        "content": "<p>I want to go back to hell</p>",
        "id": 204710252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595445412
    },
    {
        "content": "<p>so it looks like <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> already gave the answer long before I recognized it</p>",
        "id": 204710424,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445516
    },
    {
        "content": "<p>i.e. just work with the full exterior algebra</p>",
        "id": 204710432,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595445524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> can you write the definition for <span class=\"user-mention\" data-user-id=\"284997\">@Zhangir Azerbayev</span>  so he can start on the API?</p>",
        "id": 204722497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595451677
    },
    {
        "content": "<p>not now</p>",
        "id": 204722565,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595451714
    },
    {
        "content": "<p>After looking at Mario's trick, doing the full algebra does seem like the best way. My current thoughts are that I could make a monoid on <code>fin k → V</code> where the multiplication is concatenation, define a free additive monoid on that structure, and then quotient by all the right relations. Does that sound like it will work?</p>",
        "id": 204723546,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1595452292
    },
    {
        "content": "<p>Is it a general principle that in Lean it's better to work \"top down\" rather than \"bottom up\", because when you try to glue things together you tend to run into these kinds of problems?</p>",
        "id": 204728103,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1595455513
    },
    {
        "content": "<p>It is good to get the definitions right before you get too far in, but oftentimes the only way you know if the definitions work or not is if you try and use them, or by asking some experts first! The other way you can go is even if you aren't sure exactly how the definition will work limiting yourself to some interface of properties that you know must be true. For example with the real numbers lets say you wanted to define them but weren't sure wether to use dedekind cuts or completions of cauchy sequences, you could still start proving stuff about the reals provided you only used the fact they were an ordered field where every (nonempty bounded) set has a supremum.<br>\nFor the example of the exterior algebra, you could just take it as an axiom that you have a type satisfying the universal property <a href=\"https://en.wikipedia.org/wiki/Exterior_algebra#Universal_property\">https://en.wikipedia.org/wiki/Exterior_algebra#Universal_property</a> even if you didn't yet construct it, or just assume you have any unital associative K-algebra A and a K-linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>:</mo><mi>V</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">j : V → A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mi>j</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">j(v)j(v) = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>∈</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">v \\in V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span></span></span></span> and prove things about that to start.</p>",
        "id": 204731481,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595457926
    },
    {
        "content": "<p>That is, define the predicate <code>is_exterior_algebra V Λ</code> asserting that <code>Λ</code> satisfies the universal property. Now go develop the material you want about exterior algebras using that, and come back later to give a (gross, if necessary) construction.</p>",
        "id": 204735725,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595461259
    },
    {
        "content": "<p>Best of all, you end up having developed a library that is immune to slow elaboration due to heavy rfl / weird definitional unification / fragility of theorems wrt definitions, etc.</p>",
        "id": 204735818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595461337
    },
    {
        "content": "<p>You can also define the exterior algebra using the universal property: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lift_fun</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">extalg</span>\n<span class=\"n\">def</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">lift_fun</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">lift_fun</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n\n<span class=\"n\">def</span> <span class=\"n\">setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">rel</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">],</span> <span class=\"n\">assumption&#39;</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span> <span class=\"n\">extalg</span>\n\n<span class=\"n\">def</span> <span class=\"n\">extalg</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">extalg</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"c1\">-- the exterior algebra.</span>\n</code></pre></div>",
        "id": 204736535,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595462068
    },
    {
        "content": "<p>Nicely done! (Except, of course, it's not the exterior algebra until you've shown that it satisfies the universal property. :-)</p>",
        "id": 204738099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595463568
    },
    {
        "content": "<p>Yeah, I'm too lazy to even show it's a ring <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 204738439,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595463827
    },
    {
        "content": "<p>I guess it makes sense to define the tensor algebra first?</p>",
        "id": 204738510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595463866
    },
    {
        "content": "<p>Sure, why not? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span>\n<span class=\"bp\">|</span> <span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">pre</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lift_fun</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">pre</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tensoralg</span>\n<span class=\"n\">def</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">lift_fun</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">lift_fun</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n\n<span class=\"n\">def</span> <span class=\"n\">setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">rel</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>  <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span> <span class=\"n\">tensoralg</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tensoralg</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">tensoralg</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"c1\">-- the tensor algebra.</span>\n</code></pre></div>",
        "id": 204738610,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595463962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Types.20that.20should.20be.20equal/near/204738510\">said</a>:</p>\n<blockquote>\n<p>I guess it makes sense to define the tensor algebra first?</p>\n</blockquote>\n<p>Okay. I proved the universal property for the tensor algebra.<br>\n<a href=\"https://gist.github.com/adamtopaz/84315ae5b11319013707b2d0804fb37e\">https://gist.github.com/adamtopaz/84315ae5b11319013707b2d0804fb37e</a></p>",
        "id": 204756871,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595474059
    },
    {
        "content": "<p>Quick, quick, make a PR! :-)</p>",
        "id": 204758114,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595476277
    },
    {
        "content": "<p>Possible additions:</p>\n<ol>\n<li>define the structure <code>is_tensor_algebra</code> (which will be a Type-valued but still subsingleton \"predicate\") before you even start on the construction, and show at the end that you've built such a structure</li>\n<li>we have the categories of R-algebras and R-modules, and the forgetful functor as well --- so check that we're really talking about the right universal property in the first place by checking this construction is the left adjoint of the forgetful functor.</li>\n</ol>",
        "id": 204758336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595476549
    },
    {
        "content": "<p>Very nicely done!</p>",
        "id": 204758349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595476555
    },
    {
        "content": "<p>I'm a little concerned about universe issues with the way I've defined the relation...</p>",
        "id": 204758415,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595476611
    },
    {
        "content": "<p>ooh... indeed. Time to add universe annotations everywhere and see what happens.</p>",
        "id": 204758433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595476657
    },
    {
        "content": "<p>Yeah. I'll have to play with it tomorrow. It's late here.</p>",
        "id": 204758487,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595476685
    },
    {
        "content": "<p>But universes are not an issue for the left adjoint property, since objects in these categories all have the same universe level anyway</p>",
        "id": 204758522,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595476779
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> who is likely interested in this conversation</p>",
        "id": 204767998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595489899
    },
    {
        "content": "<p>Same <span class=\"user-mention\" data-user-id=\"315523\">@Colter MacDonald</span></p>",
        "id": 204802535,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595513690
    }
]