[
    {
        "content": "<p>Hello, sorry if this is a silly question but how do I get rid of a universal quantifier in a hypothesis?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">question_2a_false</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>leaves me with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>and I don't know how to make any more progress.</p>",
        "id": 248719669,
        "sender_full_name": "Michael",
        "timestamp": 1628347580
    },
    {
        "content": "<p>A forall is an implication, so its really a function that you can plug input into.<br>\nIn this case its a function from propositions to some implications between their proofs so you can apply it to some specific (well-chosen) propositions of interest using <code>have</code> to make a new hypothesis (called <code>this</code> by default, specialising the old one), e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">question_2a_false</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">true</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>this is just a random example, not a spoiler / hint (probably).</p>",
        "id": 248719999,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628348088
    },
    {
        "content": "<p>What's your maths proof?</p>",
        "id": 248720019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628348120
    },
    {
        "content": "<p>Since the question asks whether → is symmetric, I have a counter-example to the idea that → is symmetric: if P is false and Q is true then P → Q is true and Q → P is false and so we have true → false which is false.</p>",
        "id": 248720159,
        "sender_full_name": "Michael",
        "timestamp": 1628348356
    },
    {
        "content": "<p>\"set P to false and Q to true\" is spelt <code>have := h false true</code></p>",
        "id": 248720570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628348952
    }
]