[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">is_sym</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">=</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_sym_apply</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A.is_sym</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.is_sym</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_sym_ext</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A.is_sym</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_sym_iff</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A.is_sym</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">is_sym_apply</span><span class=\"o\">,</span> <span class=\"n\">is_sym_ext</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Are the three lemma names I gave consistent with the name conventions?</p>",
        "id": 248244418,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628007706
    },
    {
        "content": "<p>I wouldn't do <code>protected def</code>. I would call the first lemma <code>is_sym.apply</code>.</p>",
        "id": 248244971,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628007989
    },
    {
        "content": "<p>or perhaps</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_sym_ext</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A.is_sym</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.is_sym</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_sym_of</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A.is_sym</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_sym_iff</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A.is_sym</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">is_sym_ext</span><span class=\"o\">,</span> <span class=\"n\">is_sym_of</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 248245031,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628008027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> I did that because I think <code>matrix.is_sym</code> is parallel with some other <code>.is_sym</code>s existing in mathlib. Some bridges can be then built.</p>",
        "id": 248245188,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628008111
    },
    {
        "content": "<p>I only found <code>sym_sesq_form</code> and <code>sym_bilin_form</code> with <code>is_sym</code>. Neither is protected afaik. The nice part of not protected is that <code>open matrix</code> will let you just say <code>is_sym</code>.</p>",
        "id": 248245466,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628008261
    },
    {
        "content": "<p>I am not sure whether there is any advantage of using the dot notation in this case.</p>",
        "id": 248245937,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628008505
    },
    {
        "content": "<p>Dot notation lets you write <code>h.apply i j</code> to mean <code>Aᵀ i j = A i j</code> when you have <code>(h : A.is_sym) (i j : I)</code></p>",
        "id": 248246148,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628008595
    },
    {
        "content": "<p>oh, that's nice.</p>",
        "id": 248246401,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628008722
    },
    {
        "content": "<p>Which version of the lemma names is better do you think? <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  when changing both to <code>is_sym.</code></p>",
        "id": 248246623,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628008835
    },
    {
        "content": "<p>I could call the last one as <code>is_sym.ext_iff</code>. Where would you use it?</p>",
        "id": 248246888,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628008983
    },
    {
        "content": "<p>You can prove it just by <code>rw [is_sym, matrix.ext_iff]</code></p>",
        "id": 248246928,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628009009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Naming.20Conventions/near/248246888\">said</a>:</p>\n<blockquote>\n<p>I could call the last one as <code>is_sym.ext_iff</code>. Where would you use it?</p>\n</blockquote>\n<p>I think that is useful in many further theorems.</p>",
        "id": 248247169,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628009160
    },
    {
        "content": "<p>Sure, but since you know that <code>A^T = A</code> you could just rewrite that, you don't need to require it to be fully applied.</p>",
        "id": 248247358,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628009241
    },
    {
        "content": "<p>Yes. The three lemmas are very simple APIs anyway. I was just a little bit concerned about which names are better.</p>",
        "id": 248247597,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628009346
    },
    {
        "content": "<p>Modified according to your suggestion!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_sym</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">=</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_sym.ext_iff</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A.is_sym</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_sym</span><span class=\"o\">,</span> <span class=\"n\">matrix.ext_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_sym.apply</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A.is_sym</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">is_sym.ext_iff.1</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_sym.ext</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A.is_sym</span> <span class=\"o\">:=</span> <span class=\"n\">is_sym.ext_iff.2</span>\n</code></pre></div>",
        "id": 248248041,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628009567
    },
    {
        "content": "<p>It will be useful to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cir</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cir_is_sym_ext_iff</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">cir</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_sym</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_sym.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">cir</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>for example.</p>",
        "id": 248248554,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628009811
    },
    {
        "content": "<p>Why would you want to prove that and not <code>(cir v).is_sym ↔ ∀ i, v i = v (-i)</code>?</p>",
        "id": 248248679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628009871
    },
    {
        "content": "<p>I'm not really sure any of these lemmas are worth having</p>",
        "id": 248248804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628009917
    },
    {
        "content": "<p>You can make them, and then when you use them in a more complex lemma, we can see if there are good golfing strategies that retain expressability/comprehensability</p>",
        "id": 248248860,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628009949
    },
    {
        "content": "<p>The only lemma I'd want is <code>is_sym.eq (h : A.is_sym) : Aᵀ = A := h</code> for dot notation.</p>",
        "id": 248248891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628009962
    },
    {
        "content": "<p>I was not careful enough, it should be <code>(cir v).is_sym ↔ ∀ i, v (-i) = v i </code>.</p>",
        "id": 248249184,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628010112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Naming.20Conventions/near/248248891\">said</a>:</p>\n<blockquote>\n<p>The only lemma I'd want is <code>is_sym.eq (h : A.is_sym) : Aᵀ = A := h</code> for dot notation.</p>\n</blockquote>\n<p>Why is this useful? Why don't we just use <code>unfold</code> or <code>simp</code> or etc?</p>",
        "id": 248249301,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628010154
    },
    {
        "content": "<p>Because then you can do <code>rw [h.eq]</code></p>",
        "id": 248249354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628010178
    },
    {
        "content": "<p>see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/commute.eq\">docs#commute.eq</a> which is the same idea</p>",
        "id": 248249364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628010183
    },
    {
        "content": "<p>OK. I see the point.</p>",
        "id": 248249563,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628010263
    }
]