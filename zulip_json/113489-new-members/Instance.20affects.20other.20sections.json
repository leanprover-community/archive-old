[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">a</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_linear_order</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_5</span><span class=\"o\">,</span>\n    <span class=\"n\">decidable_eq</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n    <span class=\"bp\">.._</span><span class=\"n\">inst_4</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">b</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>The error message : \"is maximum class-instance resolution depth has been reached (the limit can be increased by setting option 'class.instance_max_depth') (the class-instance resolution trace can be visualized by setting option 'trace.class_instances')\" at the <code>(≤)</code> in <code>section b</code><br>\nseems like <code>section b</code> is affected by the <code>decidable_linear_order</code> instance in <code>section a</code>, but I don't understand why, and how to fix this...</p>",
        "id": 154128043,
        "sender_full_name": "AHan",
        "timestamp": 1546346090
    },
    {
        "content": "<p>I don't have access to Lean right now but is the issue that the instance gives you a linear order on the finsupp and then in section b you are putting another unrelated order on the finsupp and hence breaking the golden rule of typeclasses -- one instance per type?</p>",
        "id": 154128780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546347744
    },
    {
        "content": "<p>instances are not scoped to sections</p>",
        "id": 154129611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546349593
    },
    {
        "content": "<p>It's just as though you wrote <code>instance &lt;long string of variables&gt; : decidable_linear_order (σ →₀ ℕ)</code> at the top level.</p>",
        "id": 154129654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546349677
    },
    {
        "content": "<p>If you want to make a scoped instance, you can write an ordinary definition and then give it <code>local attribute [instance]</code> inside a <code>section</code></p>",
        "id": 154129664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546349726
    },
    {
        "content": "<p>Leaving aside the <code>section</code> issue, I think this is a bad instance, because there's a cycle, there's a <code>linear_order</code> to <code>decidable_linear_order</code> instance, and a <code>decidable_linear_order</code> to <code>linear_order</code> instance somewhere in the library. This sort of thing can cause type class inference to get stuck.</p>",
        "id": 154129771,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546349989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  actually the order in <code>section a</code> and <code>section b</code> are the same in my case, but some functions in <code>section a</code> are only depend on <code>comm_semiring α</code>, while functions in <code>section b</code> are depend on <code>integral_domain α</code>. I can only think of using seperate sections like this to avoid confilict between <code>comm_semiring α</code> and <code>integral_domain α</code></p>",
        "id": 154129920,
        "sender_full_name": "AHan",
        "timestamp": 1546350270
    },
    {
        "content": "<p>From what you've provided so far it looks like the hypotheses involving <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span></span></span></span> are independent of the hypotheses involving <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">σ</span></span></span></span></p>",
        "id": 154129984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546350430
    },
    {
        "content": "<p>that is, no hypothesis involves both</p>",
        "id": 154129987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546350435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  you mean like ?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n<span class=\"o\">:</span> <span class=\"n\">decidable_linear_order</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span><span class=\"o\">,</span>\n    <span class=\"n\">decidable_eq</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n    <span class=\"bp\">.._</span><span class=\"n\">inst_2</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 154130045,
        "sender_full_name": "AHan",
        "timestamp": 1546350591
    },
    {
        "content": "<p>Yes, or using <code>variables</code> the way you do now is also fine.</p>",
        "id": 154130110,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546350720
    },
    {
        "content": "<p>Then when a lemma needs this decidable_linear_order instance, it won't automatically infer this instance right?</p>",
        "id": 154130249,
        "sender_full_name": "AHan",
        "timestamp": 1546350933
    },
    {
        "content": "<p>That's right, but you can \"install\" the instance locally in a proof using <code>letI</code></p>",
        "id": 154130299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546351029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Yeah..you're right...<br>\nbut I can't just add an instance <code>[decidable_linear_order (σ →₀ ℕ)]</code>,  as it might cause conflict between <code>finsupp.decidable_eq</code> and <code>decidable_linear_order.decidable_eq</code></p>",
        "id": 154130345,
        "sender_full_name": "AHan",
        "timestamp": 1546351121
    },
    {
        "content": "<p><code>decidable_linear_order.decidable_eq</code> isn't an instance, so it's okay.</p>",
        "id": 154130587,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546351523
    },
    {
        "content": "<p>But I do encounter such kind of error... some term looks just the same, and I couldn't use <code>rw</code> tactic</p>",
        "id": 154130992,
        "sender_full_name": "AHan",
        "timestamp": 1546352485
    },
    {
        "content": "<p>This is the minimal example I can figure out so far...<br>\nthere is a type mismatch at <code>rw union_min'</code> which says <code>h₁</code> uses <code>finsupp.decidable_eq</code> but the third parameter of <code>union_min'</code> is expected to use <code>eq.decidable</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">multivariate_polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ne_empty_union</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∧</span> <span class=\"n\">s₂</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">s₁</span> <span class=\"err\">∪</span> <span class=\"n\">s₂</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">a</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">support_ne_empty</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">finish</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">b</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">union_min&#39;</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs₁</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs₂</span> <span class=\"o\">:</span> <span class=\"n\">s₂</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs₃</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"err\">∪</span> <span class=\"n\">s₂</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">):</span>\n<span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"err\">∪</span> <span class=\"n\">s₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">hs₃</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">s₁</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">hs₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₂</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">hs₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">c</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">x</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ne_empty_union</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">not_and_of_not_left</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">support_ne_empty</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hp</span><span class=\"o\">))),</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">union_min&#39;</span> <span class=\"o\">((</span><span class=\"n\">support_ne_empty</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">support_ne_empty</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"n\">h₁</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">c</span>\n</pre></div>",
        "id": 154131487,
        "sender_full_name": "AHan",
        "timestamp": 1546353664
    },
    {
        "content": "<p>I'm not sure I understand your question, but you may like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">x</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">ne_empty_union</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">not_and_of_not_left</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">support_ne_empty</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">union_min&#39;</span> <span class=\"o\">((</span><span class=\"n\">support_ne_empty</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">support_ne_empty</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">h₁</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hpq</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 154135743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546362844
    },
    {
        "content": "<p>and I suspect that filling in the decidable_linear_order instance would help avoiding the problem</p>",
        "id": 154136362,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546364207
    },
    {
        "content": "<p>It's not a nice solution, but adding this line before <code>x</code> works <code>local attribute [instance, priority 0] finsupp.decidable_eq</code>. There's not a good solution for this sort of thing in general at the moment.</p>",
        "id": 154136639,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546364772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Thanks a lot! Both solutions seems to solve my problem.</p>",
        "id": 154137734,
        "sender_full_name": "AHan",
        "timestamp": 1546366968
    }
]