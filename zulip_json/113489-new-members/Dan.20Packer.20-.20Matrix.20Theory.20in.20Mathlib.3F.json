[
    {
        "content": "<p>Hi all!<br>\nI'm Dan Packer, a grad student in Applied Mathematics at Ohio State University. I'm pretty new to the whole formalization effort, but I'm interested in the idea of using proof checkers to verify results in my field. To this end, I'm wondering how much basic matrix theory (e.g. singular values, trace cyclic property, pseudo-inverses...) has been developed in mathlib (and whether that is the right place to be developing it at all!) I ultimately want to show some results in a specific paper, but it seems worthwhile to contribute to mathlib if it's appropriate.</p>",
        "id": 267605295,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1641917915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span> welcome! I don't think singular values are done, but we have eigenvalues and we have <code>Mᴴ M</code>. The trace cyclic property is done. What exactly are pseudo-inverses in this context?</p>",
        "id": 267605907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641918133
    },
    {
        "content": "<p>Hi! At the moment we don't have a lot in that area. I was planning on working towards pseudoinverses a couple of years ago, but never really got there. Would probably be a nice project to get started with, since the various decompositions would also be very helpful!</p>",
        "id": 267606147,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641918227
    },
    {
        "content": "<p>Thanks! The Moore-Penrose pseudo-inverse is what I'm imagining: <a href=\"https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse\">https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse</a><br>\nSome results might involve that the formulas for it hold when you have linearly independent rows/columns, that it minimizes 2-norm</p>",
        "id": 267606403,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1641918312
    },
    {
        "content": "<p>Dan, do you want to focus on proving things, or on computing things? Because it turns out that these are quite different things and typically require different definitions (which you can prove are equal in the end).</p>",
        "id": 267606459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641918340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Awesome! I would be pretty excited to work  in that direction. What library in mathlib should I be building off of?</p>",
        "id": 267606539,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1641918362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I'm mostly interested in proving things (I think)</p>",
        "id": 267606626,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1641918394
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>ls src/data/matrix/*.lean\nsrc/data/matrix/basic.lean  src/data/matrix/block.lean   src/data/matrix/dmatrix.lean   src/data/matrix/kronecker.lean  src/data/matrix/pequiv.lean\nsrc/data/matrix/basis.lean  src/data/matrix/char_p.lean  src/data/matrix/hadamard.lean  src/data/matrix/notation.lean   src/data/matrix/rank.lean\n</code></pre></div>",
        "id": 267606641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641918401
    },
    {
        "content": "<p>Thank you! This is exactly what I'm looking for</p>",
        "id": 267606720,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1641918429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> What is the difference between src/data/matrix and src/linear_algebra/matrix ? I can only find trace in the latter. Is there a relationship between these two folders?</p>",
        "id": 267610795,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1641920041
    },
    {
        "content": "<p>Usually in <code>data</code> we put more basic stuff (like general definitions), but the corresponding theorems go in the appropriate folder.</p>",
        "id": 267611073,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641920141
    },
    {
        "content": "<p>So if I wanted to prove additional things in a new file, I would need to import both (one to have definitions to work with and the other for the theorems that I need)?</p>",
        "id": 267611510,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1641920336
    },
    {
        "content": "<p>Imports are transitive, so if the file <code>A.lean</code> imports <code>B.lean</code>, you only need to import <code>A.lean</code> to get access to everything in both files.</p>",
        "id": 267611874,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641920453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span> Yes, just create a new file and import whatever you need. If you are new to Lean don't try at the beginning to follow to closely the mathlib style, just prove the result you want. You will discover that you need a lot of small missing lemmas (unless you are very lucky!): just prove them as separate results (I mean, not inside the main proof).</p>",
        "id": 267617765,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641922881
    },
    {
        "content": "<p>Thanks all for the advice! I'll be sure to follow up if I have more questions</p>",
        "id": 267621899,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1641924412
    },
    {
        "content": "<p>I'm trying to just mess with some basic statements. So far, I haven't been able to get matrix.trace to work for a specific matrix (even without proving it--it doesn't think the first line type-checks):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span> <span class=\"n\">matrix.trace</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This works in the example file for determinants, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span> <span class=\"n\">matrix.det</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.det_succ_row_zero</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a difference between the implementations for these two that's relevant?</p>",
        "id": 267631480,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1641928713
    },
    {
        "content": "<p>What are your imports?</p>",
        "id": 267631898,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641928918
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span> <span class=\"n\">matrix.trace</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℝ</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267632231,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641929055
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>You can use <code>matrix.trace_fin_two</code></p>\n</div></div>",
        "id": 267632464,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641929185
    },
    {
        "content": "<p>Is the explicitness of those arguments of <code>matrix.trace</code> intentional?</p>",
        "id": 267633680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641929808
    },
    {
        "content": "<p>Wouldn't surprise me if that's a remnant from back when bundled morphisms weren't inferred as nicely. (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.trace/src\">src#matrix.trace</a>, for the lazy like me)</p>",
        "id": 267637871,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641931710
    },
    {
        "content": "<p>Apparently it was commit <a href=\"https://github.com/leanprover-community/mathlib/pull/1883\">#1883</a> by <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, almost exactly 2 years ago.</p>",
        "id": 267638199,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641931872
    },
    {
        "content": "<p>Likewise, most of the <code>finsupp</code> definitions should probably become a lot more implicit.</p>",
        "id": 267638370,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641931938
    },
    {
        "content": "<p>Oh yes that was quite annoying in category theory also.</p>",
        "id": 267638371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641931938
    },
    {
        "content": "<p>You might be interested in <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook\">https://github.com/eric-wieser/lean-matrix-cookbook</a>, which was a brief attempt to formalize a pdf that someone pointed me at</p>",
        "id": 267644979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641935217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467358\">Daniel Packer</span> <a href=\"#narrow/stream/113489-new-members/topic/Dan.20Packer.20-.20Matrix.20Theory.20in.20Mathlib.3F/near/267631480\">said</a>:</p>\n<blockquote>\n<p>I'm trying to just mess with some basic statements. So far, I haven't been able to get matrix.trace to work for a specific matrix (even without proving it--it doesn't think the first line type-checks):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span> <span class=\"n\">matrix.trace</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"n\">_</span>\n</code></pre></div>\n<p>...</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span> <span class=\"n\">matrix.det</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">_</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>These are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.trace_fin_two\">docs#matrix.trace_fin_two</a>  and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_fin_two\">docs#matrix.det_fin_two</a> !</p>",
        "id": 267645173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641935292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Dan.20Packer.20-.20Matrix.20Theory.20in.20Mathlib.3F/near/267644979\">said</a>:</p>\n<blockquote>\n<p>You might be interested in <a href=\"https://github.com/eric-wieser/lean-matrix-cookbook\">https://github.com/eric-wieser/lean-matrix-cookbook</a>, which was a brief attempt to formalize a pdf that someone pointed me at</p>\n</blockquote>\n<p>Oh, I love the matrix cookbook! That's a pretty chunky collection of results, too. I will give it a look!</p>",
        "id": 267646055,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1641935728
    },
    {
        "content": "<p>I got most of the way through the first section, and found that one of the results was wrong, and a bunch of the other ones were missing from mathlib. I'm afraid I picked up most of that low hanging fruit already!</p>\n<p>I then made a start on the derivatives section, but I'm pretty sure than when the cookbook writes something like  <code>∂(XY) = (∂X)Y + X(∂Y)</code> the correct interpretation is <code>∂ : derivation _ _ _</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/derivation\">docs#derivation</a>) not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv\">docs#deriv</a>. Unfortunately the former doesn't work in a noncommutative setting though.</p>",
        "id": 267663987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641945118
    },
    {
        "content": "<p>Following up on the matrix cookbook thing (let me know if this is the sort of thing that should be a new thread): I haven't been able to find any references to eigenvalues in the mathlib for matrices. Is that theory developed somewhere?</p>\n<p>Also, I forked the lean-matrix-cookbook project, and a couple of the lemma references seem to be missing now (e.g. matrix.transpose_list_prod).</p>",
        "id": 267790426,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642023905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span> What sorts of results are you after in particular?  In mathlib at the moment, eigenvalues are defined for endomorphisms, so you would need to convert the matrix to an endomorphism using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.to_lin'\">docs#matrix.to_lin'</a> and then study the eigenvalues of that.</p>",
        "id": 267791123,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642024217
    },
    {
        "content": "<p>But of course, you might find that the result you want is more elegantly expressed without choosing a basis, in which case why ever state a matrix version? :)</p>",
        "id": 267791452,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642024407
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.transpose_list_prod\">docs#matrix.transpose_list_prod</a> is alive and well, it sounds like you are somehow on an older mathlib than the one the repo specifies</p>",
        "id": 267798968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642028302
    },
    {
        "content": "<p>Ah, thanks. I'm looking for results like trace (interpreted as sum of diagonal entries of a matrix) is the sum of the eigenvalues of the matrix. Although, it looks like there is a proof that the sum of diagonal entries of a matrix is the general trace is there (so presumably if I dig enough I can find the proof that the trace is the sum of the eigenvalues).</p>\n<p>I probably am using an older version of mathlib! Thanks!</p>",
        "id": 267875253,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642083847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span> I think this is missing, actually.  Feel free to start a conversation on <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> about it.  In general, I think we have very little on eigenvalue multiplicities, which is a prerequisite to make that statement work.  You can talk about them indirectly as the dimensions of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.eigenspace\">docs#module.End.eigenspace</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.generalized_eigenspace\">docs#module.End.generalized_eigenspace</a>.  But if I'm thinking about this correctly, to get that the dimensions of the generalized eigenspaces sum to the dimension of the vector space, you need the mutual independence, which seems to be missing (we have only the weaker fact <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.End.eigenspaces_independent\">docs#module.End.eigenspaces_independent</a>).  I don't think we have Jordan normal form either.</p>\n<p>By the way, this is certainly one of those facts that is worth talking about for endomorphisms rather than matrices :)</p>",
        "id": 267928143,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642106962
    },
    {
        "content": "<p>Note that Isabelle and Coq have versions of Jordan normal form:<br>\n<a href=\"https://www.isa-afp.org/entries/Jordan_Normal_Form.html\">https://www.isa-afp.org/entries/Jordan_Normal_Form.html</a><br>\n<a href=\"https://cordis.europa.eu/docs/projects/cnect/7/243847/080/deliverables/001-del43.pdf\">https://cordis.europa.eu/docs/projects/cnect/7/243847/080/deliverables/001-del43.pdf</a><br>\nso if you are very impatient you can always try to make it work there!</p>",
        "id": 267928790,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642107275
    },
    {
        "content": "<p>Oh nice! I would be excited to work toward JNF... a lot of this work on my end is also an excuse to get better at working in Lean, so I'm not in any rush. I'm also happy to do the work with endomorphisms.</p>\n<p>That said, one of the goals I have is to show continuous dependence of singular values on the entries of a matrix, which is ultimately a matrix thing (though I suppose it isn't too hard to understand continuous dependence of endomorphisms on the entries of defining matrices as long as the domain has a topology). I'll try to do as much as I can with endomorphisms, though</p>",
        "id": 267943414,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642114537
    },
    {
        "content": "<p>I think that perhaps one reason we've not got JNF is that it's a consequence of the structure theorem for fg modules over a PID which there was some momentum towards recently</p>",
        "id": 267944495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642115122
    },
    {
        "content": "<p>Oh, that's right, I half-remember such a discussion.  Do you know who it was who was working on this?</p>",
        "id": 267944607,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642115179
    },
    {
        "content": "<p>I don't, all I remember is that we have one of fg torsion-free is free and fg torsion = product of cyclic modules, and not the other</p>",
        "id": 267944937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642115374
    },
    {
        "content": "<p>OK, so <span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span>, I think your contributions here would be very welcome, but before you get too deep, please start a discussion on the more widely read channel <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> to co-ordinate! :)</p>",
        "id": 267945200,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642115522
    },
    {
        "content": "<p>Great! That sounds awesome! I'm not sure I know Lean well enough to be fully contributing yet... I still feel like I'm learning a lot of the style, but I will start a thread on #maths tomorrow about this!</p>",
        "id": 267946314,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642116218
    },
    {
        "content": "<p>Jordan normal form for Coq now lives here: <a href=\"https://github.com/coq-community/coqeal/blob/d9b80c96580cfd480a51cecc0d71242d074c09e4/theory/jordan.v#L191\">https://github.com/coq-community/coqeal/blob/d9b80c96580cfd480a51cecc0d71242d074c09e4/theory/jordan.v#L191</a></p>\n<p>As seen here, there are many results on matrices and matrix normal forms in <a href=\"http://github.com/math-comp/math-comp/\">MathComp</a> and CoqEAL:<a href=\"https://github.com/coq-community/coqeal/tree/f837e550fa5bd8cca59d2e55eba422c97553d74c#theory\">https://github.com/coq-community/coqeal/tree/f837e550fa5bd8cca59d2e55eba422c97553d74c#theory</a></p>",
        "id": 267955820,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1642122967
    },
    {
        "content": "<p>Karl, thanks for the references on Coq. How plausible do you think it is to port the results over to Lean?</p>",
        "id": 268054170,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642185376
    },
    {
        "content": "<p>As has already been mentioned, it's not immediately clear that this approach would be the right thing to do. mathlib tends to have an emphasis on the more abstract approach, so using things like structure theorem for modules over a PID to do JNF, and working with endomorphisms rather than matrices wherever possible.</p>",
        "id": 268056988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642186791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span> in general, just porting plain inductive types and theorem statements between Coq and Lean is feasible (I regularly translate between HOL4 and Coq in this way). But the matrix theory in MathComp is constructed using canonical structures and small-scale reflection, which are particular to Coq. So while you can take inspiration from MathComp (e.g., <a href=\"https://github.com/math-comp/math-comp/blob/master/mathcomp/algebra/mxalgebra.v\">here</a>), it's not straightforward to convert to Lean+Mathlib, which uses type classes and doesn't do much computation/refl/small-scale reflection.</p>",
        "id": 268092011,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1642206403
    },
    {
        "content": "<p>I'd recommend taking a look at some papers about the Coq formalizations though (e.g., <a href=\"https://hal.inria.fr/hal-00734505/document\">this</a> or <a href=\"https://hal.inria.fr/hal-01378905/document\">this</a>)</p>",
        "id": 268092141,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1642206530
    },
    {
        "content": "<p>I can't speak for MathComp devs, but my view, and what I believe is the general view about mathematics in MathComp is that it's <em>not</em> less abstract than in Mathlib. The use of computations in proofs in MathComp (small-scale reflection) is mainly for reasons of proof engineering productivity, not because we are all fans of constructive mathematics. Small-scale reflection tends to result in fewer rewrite calls, smaller proof terms, shorter proof scripts.</p>",
        "id": 268092423,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1642206832
    },
    {
        "content": "<p>the emphasis in MathComp on small-scale reflection in proofs affects the formulations of definitions and theorem statements. For example, if one has a decidable concept, e.g., acyclicity in graphs to take a recent example, it's often considered convenient to work with a boolean decision procedure <em>as the definition of that concept</em>. Not because decidability is amazing in itself, but because it's more convenient in rewriting-based proofs.</p>",
        "id": 268092897,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1642207309
    }
]