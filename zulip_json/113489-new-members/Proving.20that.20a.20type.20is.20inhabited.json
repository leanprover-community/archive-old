[
    {
        "content": "<p>Apologies if I'm overlooking something (I am new to theorem-proving).</p>\n<p>I am working through an exercise in Chapter 4 of \"Theorem Proving in Lean\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.swap</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists.intro</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- stuck here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I am stuck at the indicated point, where the state of the system is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">r</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>and the goal is to establish that an object of type α exists. I am not sure how to do this (investigation reveals that the use of inhabited types could be an approach, but α is not an inhabited type).</p>\n<p>I am not even sure whether the proof approach I have taken is the right one.</p>\n<p>Any help would be greatly appreciated. Thanks!</p>\n<p>(Edited to add code formatting)</p>",
        "id": 255003472,
        "sender_full_name": "Rajesh Jayaprakash",
        "timestamp": 1632726716
    },
    {
        "content": "<p>You should read <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 255004441,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1632727189
    },
    {
        "content": "<p>Next, your issue is a bit subtle. You're not trying to solve the problem that was set, for a subtle reason</p>",
        "id": 255004515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1632727214
    },
    {
        "content": "<p>Because you are using tactics that are introduced only in the next chapter</p>",
        "id": 255004551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1632727236
    },
    {
        "content": "<p>A side effect that would be a bit long to explain is that Lean doesn't know you meant to include the <code>a</code> variable</p>",
        "id": 255004626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1632727284
    },
    {
        "content": "<p>You can fix that by writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">-- ...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255004751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1632727353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> We've seen many beginners having this issue. I think you should put <code>a</code> in the example statement (or use <code>include</code> but that may be distracting)</p>",
        "id": 255004832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1632727407
    },
    {
        "content": "<p>Thanks Patrick. The thought of changing the example to include something like (a : α) did cross my mind, but I wanted to see if I was missing something and the proof could be done without that. Re: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> - thanks for the suggestion, that was lazy of me :-)</p>",
        "id": 255009312,
        "sender_full_name": "Rajesh Jayaprakash",
        "timestamp": 1632729993
    },
    {
        "content": "<p>Done! <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-existential-quantifier\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-existential-quantifier</a><br>\n<span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> let me know if I can do anything to help maintain the Lean 4 version.</p>",
        "id": 255897636,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1633207871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> Thanks for offering. The help is very welcome. You should have write access to it too. BTW, we are using <code>mdbook</code> to write all Lean documentation.</p>",
        "id": 255899750,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633210150
    }
]