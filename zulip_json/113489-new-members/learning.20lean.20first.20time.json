[
    {
        "content": "<p>I have never worked with a dependently typed language before, but I do have experience with f#. would it be hard to learn lean?</p>",
        "id": 267868440,
        "sender_full_name": "crab",
        "timestamp": 1642080752
    },
    {
        "content": "<p>Lean will most definitely feel quite different from F# but you will probably have an easier time than say a person who only knows java and python since F# has quite few functional concepts and constructs you won't see in those languages but all the time in lean (e.g. tagged union types, lots of recursion, pattern matching etc).</p>",
        "id": 267868942,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642081002
    },
    {
        "content": "<p>Hm, I think it depends on what you consider \"hard\". I had never worked with a dependently typed language or anything like F# before and I could say it's being \"hard\" for me. But since I enjoy the challenge (and the elegance of Lean), it's actually being \"emotionally easy\", so to speak... in the sense that I feel very motivated</p>",
        "id": 267869134,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642081085
    },
    {
        "content": "<p>And, of course, I have to mention the supportive Lean community here on Zulip <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 267869887,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642081473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113489-new-members/topic/learning.20lean.20first.20time/near/267868942\">said</a>:</p>\n<blockquote>\n<p>Lean will most definitely feel quite different from F# but you will probably have an easier time than say a person who only knows java and python since F# has quite few functional concepts and constructs you won't see in those languages but all the time in lean (e.g. tagged union types, lots of recursion, pattern matching etc).</p>\n</blockquote>\n<p>tbh I use recursion, pattern matching and tagged union types in f# a lot</p>",
        "id": 267870084,
        "sender_full_name": "crab",
        "timestamp": 1642081504
    },
    {
        "content": "<p>im could say im comfortable with them</p>",
        "id": 267870153,
        "sender_full_name": "crab",
        "timestamp": 1642081529
    },
    {
        "content": "<p>Exactly and that's your advantage over people who are not familiar with functional languages and will definitely help you with learning Lean.</p>",
        "id": 267870401,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642081666
    },
    {
        "content": "<p>cool</p>",
        "id": 267870561,
        "sender_full_name": "crab",
        "timestamp": 1642081754
    },
    {
        "content": "<p>For me (a Python programmer) learning Lean has been way more difficult than I expected. I can imagine you indeed have quite a leg up there like Henrik said.</p>",
        "id": 267880486,
        "sender_full_name": "Julian Berman",
        "timestamp": 1642086070
    },
    {
        "content": "<p>My own data point is that learning Lean was quite demanding, although I never got stuck.</p>",
        "id": 267881840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642086587
    },
    {
        "content": "<p>I found most of the language  relatively easy to learn but that is most likely because I already had experience with Isabelle/HOL and Haskell so I had to adjust rather small parts of my mental model to fit with Lean.</p>",
        "id": 267883061,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642087082
    },
    {
        "content": "<p>I find lean 4 much more begginner friendly and f#-like than lean3</p>",
        "id": 267952754,
        "sender_full_name": "crab",
        "timestamp": 1642120470
    },
    {
        "content": "<p>Tho lean4 doesn’t have mathlib and still pretty new</p>",
        "id": 267952792,
        "sender_full_name": "crab",
        "timestamp": 1642120514
    },
    {
        "content": "<p>We do have a (very very) partial port of mathlib already over at <a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a></p>",
        "id": 267952892,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642120588
    },
    {
        "content": "<p>That’s amazing</p>",
        "id": 267952906,
        "sender_full_name": "crab",
        "timestamp": 1642120613
    },
    {
        "content": "<p>if i were to use lean, i would definitely use lean4, but i would like to wait a bit</p>",
        "id": 267952918,
        "sender_full_name": "crab",
        "timestamp": 1642120632
    },
    {
        "content": "<p>I'd say if you have never worked in a dependently typed language before you can already go ahead and start learning with Lean 4, it takes a time to get used to and the final (semi automatic) full port of mathlib to Lean 4 will also happen in the not so distant future, maybe by the time you know all the basics it will already have happened^^</p>",
        "id": 267953769,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642121393
    },
    {
        "content": "<p>Why in lean4 did they decide to make the syntax much more friendly?</p>",
        "id": 268012237,
        "sender_full_name": "crab",
        "timestamp": 1642166499
    },
    {
        "content": "<p>What do you mean? It came after Lean 3 so it's an opportunity to improve</p>",
        "id": 268012380,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642166573
    },
    {
        "content": "<p>Did the community want to introduce less experienced programmers?</p>",
        "id": 268012701,
        "sender_full_name": "crab",
        "timestamp": 1642166746
    },
    {
        "content": "<p>What do you mean by friendly?</p>",
        "id": 268013682,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642167273
    },
    {
        "content": "<p>Syntax wise</p>",
        "id": 268013742,
        "sender_full_name": "crab",
        "timestamp": 1642167308
    },
    {
        "content": "<p>Please elaborate on specific changes you want to know about? Whitespace sensitivity? Lack of commas?</p>",
        "id": 268013900,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642167387
    },
    {
        "content": "<p>No, the whole syntax in general</p>",
        "id": 268013966,
        "sender_full_name": "crab",
        "timestamp": 1642167429
    },
    {
        "content": "<p>I honestly find lean4 syntax much more beginner friendly than lean3</p>",
        "id": 268013993,
        "sender_full_name": "crab",
        "timestamp": 1642167445
    },
    {
        "content": "<p>Then what do you mean by \"why\" :)?</p>",
        "id": 268014203,
        "sender_full_name": "Julian Berman",
        "timestamp": 1642167545
    },
    {
        "content": "<p>Usually that would mean you think it's worse to do so.</p>",
        "id": 268014222,
        "sender_full_name": "Julian Berman",
        "timestamp": 1642167559
    },
    {
        "content": "<p>I honestly think that it was a very good move, but I want to understand the motive</p>",
        "id": 268014420,
        "sender_full_name": "crab",
        "timestamp": 1642167650
    },
    {
        "content": "<p>I suspect making Lean 4 more accessible to a wider set of programmers was an explicit goal -- early on Leo de Moura mentioned one of Lean 4's objectives was to become a good general purpose programming language</p>",
        "id": 268014558,
        "sender_full_name": "Julian Berman",
        "timestamp": 1642167718
    },
    {
        "content": "<p>making the syntax similar to other languages helps there</p>",
        "id": 268014636,
        "sender_full_name": "Julian Berman",
        "timestamp": 1642167742
    },
    {
        "content": "<p>from a programmer's perspective, when legacy code is so ugly and hard to maintain you just want to throw everything away and rewrite from scratch. Lean 3 has a lot of \"legacy cruft\" (performance gotchas, \"excessive memory consumption\", etc) and the devs are fed up, so they make a totally new and better Lean <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 268015247,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1642168012
    },
    {
        "content": "<p><em>Lean Together 2021: An overview of Lean 4</em><br>\n<a href=\"https://www.youtube.com/watch?v=UeGvhfW1v9M\">https://www.youtube.com/watch?v=UeGvhfW1v9M</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"UeGvhfW1v9M\" href=\"https://www.youtube.com/watch?v=UeGvhfW1v9M\"><img src=\"https://uploads.zulipusercontent.net/73e3907a94b165629af5b952079c1032a1fec3c0/68747470733a2f2f692e7974696d672e636f6d2f76692f556547766866573176394d2f64656661756c742e6a7067\"></a></div>",
        "id": 268015287,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642168032
    },
    {
        "content": "<p><a href=\"https://photos.app.goo.gl/4u2CgET92SmNtRb5A\">everyone has been in this situation at least once</a></p>",
        "id": 268016784,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1642168805
    },
    {
        "content": "<p>The errors?</p>",
        "id": 268016951,
        "sender_full_name": "crab",
        "timestamp": 1642168857
    },
    {
        "content": "<p>yes. these random errors are the worst. this is why the devs make Lean 4 instead <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 268017171,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1642168975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> you should really show a lot more respect towards Lean developers.</p>",
        "id": 268017507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642169146
    },
    {
        "content": "<p>I do. in fact, writing a theorem prover or a programming language implementation is a huge undertaking and even experts get things wrong</p>",
        "id": 268017604,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1642169189
    },
    {
        "content": "<p>What have you accomplished to feel so much superior?</p>",
        "id": 268017637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642169206
    },
    {
        "content": "<p>no, I'm just saying that Lean 4 is a much better version of Lean. I really respect the devs <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 268017765,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1642169276
    },
    {
        "content": "<p>From what I've noticed (and I'm a newbie here), there is quite a lot more involved in the creation of Lean 4 than the mere workaround of bugs. The whole infrastructure is much superior, more generic and more powerful. We have a server that implements LSP, we have an FFI, we have a cleaner syntax.</p>\n<p>And I'm certain that it's still just the tip of the iceberg</p>",
        "id": 268018375,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642169560
    },
    {
        "content": "<p>All metaprogramming related stuff has drastically changed (in a good way)</p>",
        "id": 268018971,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642169886
    },
    {
        "content": "<p>yeah. and persistent data structures, mimalloc and functional but in place are just so cool. Lean 4 even beats Haskell <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 268019077,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1642169941
    },
    {
        "content": "<p>You say that Lean 3 didn't beat Haskell?</p>",
        "id": 268019388,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642170097
    },
    {
        "content": "<p>Lean 3 was not capable of beating Haskell performance wise, the Lean 4 devs did invest quite a lot of time and research into novel techniques to outperform it.</p>",
        "id": 268019520,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642170137
    },
    {
        "content": "<p>Some time ago, when I looked at lean 3, I honestly felt discouraged, but lean 4 is so much more welcoming and exciting. The devs really accomplished a great task</p>",
        "id": 268020960,
        "sender_full_name": "crab",
        "timestamp": 1642170755
    },
    {
        "content": "<p>probably tangential but I hope there will be no Lean 5, just like Python 3 is the final version of Python <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> and ES6 is the final version of JavaScript <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I honestly hope that the strategy that the devs use to implement Lean 4 is the best one for Lean :laugh:</p>\n<p>and also to people who think that I disrespect Lean devs: I don't <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> in fact after I replied to Crab's message I was already typing something along the lines of Lean is a complicated system and implementing it is hard and stuff, I didn't want to come across as being rude <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> every complicated piece of software has a rocky start and Lean is no exception lol</p>",
        "id": 268022613,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1642171619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113489-new-members/topic/learning.20lean.20first.20time/near/268019077\">said</a>:</p>\n<blockquote>\n<p>Lean 4 even beats Haskell</p>\n</blockquote>\n<p>I don't think writing such sentences helps at all. You should compare such a meaningless sentence to what is written in Section 8 of <a href=\"https://arxiv.org/abs/1908.05647\">https://arxiv.org/abs/1908.05647</a> for instance. There you'll see very specific benchmark presented in a very careful way, explaining why results should be interpreted with caution.</p>",
        "id": 268023974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642172249
    },
    {
        "content": "<p>I know research can seem less fun that internet trolling, but this is what we do here.</p>",
        "id": 268024125,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642172319
    },
    {
        "content": "<p>By the way, in case you weren't aware <span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> , that screenful of random errors (which everyone has probably seen before) is a symptom of memory exhaustion. When the memory allocator starts to say \"no\" to things, almost every activity lean tries to do will fail, but because it is a resilient program it keeps going and throwing more errors. It is unlikely that lean 4 changes this, memory exhaustion is an extremely difficult situation to recover from</p>",
        "id": 268030167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642174846
    },
    {
        "content": "<p>That's also why restarting lean usually fixes the issue, because it frees everything and starts over. It is unclear whether this is even fixable; if there is a memory leak then this would be the usual way users will encounter it but that implication goes only one way - you can also genuinely run out of memory, and if for example you have (accidentally or otherwise) attempted to compile all of mathlib in RAM that might be a significant possibility.</p>",
        "id": 268030672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642175038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> I was under the impression that a reason Lean 4 has new code isn't because the Lean 3 code base is somehow unmaintainable, but rather one of the goals of the project is self-hosting: Lean 4 is designed to be capable of writing Lean 4 in Lean 4.</p>",
        "id": 268036479,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642177348
    },
    {
        "content": "<p>isn't self hosting a rite of passage for programming languages? a self hosted compiler is a great indicator of a language's maturity right? that is, if the Lean compiler, a big, nontrivial application can be written in Lean itself that it means Lean is mature enough to tackle real life applications?</p>",
        "id": 268036863,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1642177510
    },
    {
        "content": "<p>I don't see that link very clearly, but it definitely displays a certain level of maturity. And I also find it extra helpful because we can learn a lot about Lean 4 just from reading Lean 4 source code</p>",
        "id": 268037340,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642177743
    }
]