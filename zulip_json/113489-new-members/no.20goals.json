[
    {
        "content": "<p>I have completed a proof, and at the end of the proof, I get this error : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">result</span> <span class=\"n\">contains</span> <span class=\"n\">meta</span><span class=\"bp\">-</span><span class=\"kn\">variables</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">no</span> <span class=\"n\">goals</span>\n</code></pre></div>\n\n\n<p>Any help is appreciated, thank you!</p>",
        "id": 203430490,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594323811
    },
    {
        "content": "<p><code>recover</code> maybe?</p>",
        "id": 203430668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594323892
    },
    {
        "content": "<p>Did you put too many commas? I think that happened to me once</p>",
        "id": 203433667,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1594325350
    },
    {
        "content": "<p>I tried recover, apparently there was an unsolved goal (I went through the proof, couldn't trace where). I solved the goal, and now it gives me a very big error on the line of the statement of the lemma. The error is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">val_inv</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"n\">blah</span> <span class=\"n\">blah</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">π_1</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S_1</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">types</span> <span class=\"n\">contain</span> <span class=\"n\">aliased</span> <span class=\"n\">name</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span> <span class=\"n\">S</span> <span class=\"n\">π</span>\n<span class=\"n\">remark</span><span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">tactic</span> <span class=\"bp\">`</span><span class=\"n\">dedup</span><span class=\"bp\">`</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">to</span> <span class=\"n\">rename</span> <span class=\"n\">aliases</span>\n</code></pre></div>\n\n\n<p>This error was not there previously.</p>",
        "id": 203434618,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594325813
    },
    {
        "content": "<p>Having duplicate names in the local context is a very sure road to confusion.</p>",
        "id": 203435063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594326038
    },
    {
        "content": "<p>I have not created any duplicates, π is a variable, and S is chosen by Lean.</p>",
        "id": 203435340,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594326181
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 203435575,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594326303
    },
    {
        "content": "<p><a href=\"https://github.com/laughinggas/DVR/blob/c163ab375a57ec17b53c1a82a2e9a6c0c35d9670/src/Test.lean#L799\">https://github.com/laughinggas/DVR/blob/c163ab375a57ec17b53c1a82a2e9a6c0c35d9670/src/Test.lean#L799</a></p>",
        "id": 203435756,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594326382
    },
    {
        "content": "<p>(Unfortunately this is not minimal, but it is working..)</p>",
        "id": 203435792,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594326406
    },
    {
        "content": "<p>if I copy and paste that file I get an error on line 260 : <code>unknown identifier 'add_nonneg''</code></p>",
        "id": 203436607,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594326808
    },
    {
        "content": "<p>You should probably rather <code>leanproject get  laughinggas/DVR</code></p>",
        "id": 203436866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594326938
    },
    {
        "content": "<p>yeah I get the same horrible error</p>",
        "id": 203436974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594326977
    },
    {
        "content": "<p>It seems like <code>assoc_rw</code> is the cause</p>",
        "id": 203438995,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594327957
    },
    {
        "content": "<p>Chris has just got it compiling :D</p>",
        "id": 203439014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594327970
    },
    {
        "content": "<p>if you change the <code>assoc_rw add_comm</code> and line after that to:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"n\">rw</span> <span class=\"n\">add_left_comm</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">val_inv</span> <span class=\"bp\">_</span> <span class=\"n\">nz</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 203439020,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594327973
    },
    {
        "content": "<p>it works</p>",
        "id": 203439021,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594327974
    },
    {
        "content": "<p>assoc_rw somehow managed to create the <code>nz</code> goal in some metavariably way?</p>",
        "id": 203439272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594328085
    },
    {
        "content": "<p>well <code>val_inv</code> should have created the <code>nz</code> goal</p>",
        "id": 203439298,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594328099
    },
    {
        "content": "<p>but <code>assoc_rw</code> hid it somewhere</p>",
        "id": 203439314,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594328103
    },
    {
        "content": "<p>Too quick <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>. I don't know how Bhavik got there, but the way I debug things like this is by sorrying out big chunks of the proof, (by changing a block <code>{ blah blah }</code> to <code>sorry;{  blah blah}</code> this is easy to do / undo) doing this until you see where the error changes from the weird error message to just <code>is_pir uses sorry</code> you can find the section and then line of the proof where this problem occurs.</p>",
        "id": 203439575,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594328228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Yup essentially the same, except on a call with kevin and chris who did most of the steps :)</p>",
        "id": 203439677,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594328279
    },
    {
        "content": "<p>rofl I hadn't realised you were listening to us Bhavik :D</p>",
        "id": 203439768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594328303
    },
    {
        "content": "<p>I was also replying in the chat :)</p>",
        "id": 203439839,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594328339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I got there by going down the huge proof and every time a new { appeared I would put a line of the form <code>sorry, sorry}, sorry}, sorry end #exit</code></p>",
        "id": 203439907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594328372
    },
    {
        "content": "<p>and I just kept bisecting until I located the line where the weird metavariable goal appeared</p>",
        "id": 203440015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594328410
    },
    {
        "content": "<p>Ah I see, somehow I always work backwards from the end sorrying out more and more for some reason, but yeah essentially the same bisection thing.</p>",
        "id": 203440063,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594328430
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover-community/mathlib/issues/3349\">#3349</a> for this now.</p>",
        "id": 203441648,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594329255
    }
]