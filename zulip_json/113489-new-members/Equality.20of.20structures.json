[
    {
        "content": "<p>I have the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">small_things</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">dec</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">small_things</span> <span class=\"n\">m</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">r</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span> <span class=\"n\">r</span> <span class=\"o\">,</span> <span class=\"n\">pr_r</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span> <span class=\"n\">s</span> <span class=\"o\">,</span> <span class=\"n\">pr_s</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">dec</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>At the <code>sorry</code>, I have <code>eq</code> saying that my two inputs <code>r</code> and <code>s</code> of type <code>small_things</code> are equal. From this, I need to derive that <code>r.x</code> and <code>s.x</code> are equal. How can I do that? Aesthetically I would prefer not to assume anything classical, if that's an option.</p>",
        "id": 198530236,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590231738
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 198530326,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590231955
    },
    {
        "content": "<p>Aargh, is this not a we</p>",
        "id": 198530374,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590232015
    },
    {
        "content": "<p>I assert that it is at least working; it fails to be minimal in that I could have truncated the <code>f x &lt;= m</code> to e.g. True, I suppose</p>",
        "id": 198530433,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590232092
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">small_things</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">dec</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">small_things</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">r</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span> <span class=\"n\">r</span> <span class=\"o\">,</span> <span class=\"n\">pr_r</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span> <span class=\"n\">s</span> <span class=\"o\">,</span> <span class=\"n\">pr_s</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">dec</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198530453,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590232163
    },
    {
        "content": "<p>here's one way to approach things:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">small_things</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">small_things</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">small_things</span> <span class=\"n\">m</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">small_things</span> <span class=\"n\">m</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">congr_arg</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">small_things</span> <span class=\"n\">m</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"n\">ext_iff</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">small_things</span>\n</code></pre></div>",
        "id": 198530507,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590232264
    },
    {
        "content": "<p>but here's a more efficient way:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">small_things</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">small_things</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">small_things</span> <span class=\"n\">m</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">small_things</span>\n</code></pre></div>",
        "id": 198530529,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590232310
    },
    {
        "content": "<p>the point of the first way is to show you how to extract lemmas</p>",
        "id": 198530572,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590232340
    },
    {
        "content": "<p>Thanks - the refinement version solves my actual XY much better too</p>",
        "id": 198530693,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590232610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> do you understand why your example was not a (m)we?</p>",
        "id": 198538908,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590245643
    },
    {
        "content": "<p>I think people could relax a bit about this whole <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> thing. It's literally less effort to notice the error on <code>rcases</code> and add <code>import tactic</code> than it is to have this conversation.</p>",
        "id": 198539254,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590246140
    },
    {
        "content": "<p>Some of the recent conversations with genuinely new users have not seemed very welcoming to me.</p>",
        "id": 198539260,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590246169
    },
    {
        "content": "<p>Sigh - I copy-pasted my example to the top of the file I was working on to check, but it didn't occur to me that tactics were imported</p>",
        "id": 198540038,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590247529
    },
    {
        "content": "<p>Yeah, probably the most efficient path forward in an example like this is exactly what Kenny did, post a working version and then answer the question</p>",
        "id": 198541433,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590249890
    },
    {
        "content": "<p>I agree I've been pretty aggressive towards some newcomers, and I should practice more patience / empathy</p>",
        "id": 198541465,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590249951
    },
    {
        "content": "<p>In fairness, now I know that I literally have to use a completely new file to verify that an example works, I can do that</p>",
        "id": 198541585,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590250119
    },
    {
        "content": "<p>Any ideas on how to make the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> page convey that idea more effectively?</p>",
        "id": 198541593,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590250165
    },
    {
        "content": "<p>The problem wasn't a lack of knowledge, in that sense - it was a broken model of Lean</p>",
        "id": 198541600,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590250201
    },
    {
        "content": "<p>I'm entirely aware of the value of a mwe, I just thought my shortcut was a valid one for producing them</p>",
        "id": 198541644,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590250243
    },
    {
        "content": "<p>The MWE page does already say \"you should test this\", I was simply lazy because I couldn't imagine the imports making a difference - which is obvious nonsense when stated</p>",
        "id": 198541715,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590250335
    },
    {
        "content": "<p>Mm sense. I guess we're at the point where we've laid out a useful reference material, and it serves as only part of the teaching strategy</p>",
        "id": 198541730,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590250384
    },
    {
        "content": "<p>After all, we do much more in an algebra 1 course than tell people to read the first third of dummit and Foote</p>",
        "id": 198541739,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590250433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Equality.20of.20structures/near/198539254\">said</a>:</p>\n<blockquote>\n<p>I think people could relax a bit about this whole <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> thing. It's literally less effort to notice the error on <code>rcases</code> and add <code>import tactic</code> than it is to have this conversation.</p>\n</blockquote>\n<p>I usually try to have both conversations in parallel</p>",
        "id": 198549059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590263091
    }
]