[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.gcd</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">a.gcd</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>instead of doing <code>linarith</code> to close the goal, is there a more explicit way of contradicting <code>h</code> and <code>this</code>?</p>",
        "id": 308048177,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667595602
    },
    {
        "content": "<p><code>exact h this</code></p>",
        "id": 308048361,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667595680
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne\">docs#ne</a> is defined as <code>a = b → false</code>, so you can just apply such an hypothesis with a proof of <code>a = b</code></p>",
        "id": 308048460,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667595722
    },
    {
        "content": "<p>This evil technique is called \"abuse of definitional equality\" and it still makes me feel a bit dirty.</p>",
        "id": 308049395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667596059
    },
    {
        "content": "<p>super cool! thanks!</p>",
        "id": 308049873,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667596246
    },
    {
        "content": "<p><code>contradiction</code> might work. This tactic explicitly looks for two hypotheses of the form <code>P</code> and <code>not P</code>, but I don't know if it's clever enough to look through <code>x \\ne y</code> and see that it's definitionally equal to <code>\\not (x = y)</code></p>",
        "id": 308050259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667596390
    },
    {
        "content": "<p><code>contradiction</code> should indeed work, but I think it would be slightly slower in this case than <code>exact ...</code>.<br>\nIf you have a large local context, <code>contradiction</code> can get fairly slow.</p>",
        "id": 308058952,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667600097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20explicit.20contradiction.20than.20linarith/near/308049395\">said</a>:</p>\n<blockquote>\n<p>This evil technique is called \"abuse of definitional equality\" and it still makes me feel a bit dirty.</p>\n</blockquote>\n<p>If you want to make sure that Kevin is not feeling dirty, you can write <code>h.elim this</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne.elim\">docs#ne.elim</a> &amp; <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not.elim\">docs#not.elim</a>), but <code>h this</code> is very much accepted in mathlib.</p>",
        "id": 308109590,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1667640674
    },
    {
        "content": "<p>There's also <code>exact absurd this h</code></p>",
        "id": 308110726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667641351
    },
    {
        "content": "<p>Kevin could argue that <code>absurd</code> is still abusing definitional equality of <code>ne</code>, just not of <code>not</code></p>",
        "id": 308139588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667654314
    }
]