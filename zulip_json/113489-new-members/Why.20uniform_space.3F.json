[
    {
        "content": "<p>Dear All,</p>\n<p>I am trying to prove the lemma below.  I thought that <code>is_open_ball</code> was all I needed, but I seem to have to use that a <code>metric_space</code> is a <code>uniform_space</code>.</p>\n<p>Does anyone know how I can finish the proof?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">metric</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">yc</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">is_open_ball</span> <span class=\"n\">α</span> <span class=\"n\">_inst_2</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219391312,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607544810
    },
    {
        "content": "<p>Just checking -- is that really the way to set up the example? It might say \"alpha is a topological space and a metric space, but these two structures are entirely unrelated\"</p>",
        "id": 219391447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607544876
    },
    {
        "content": "<p>Ah, let me try!</p>",
        "id": 219391489,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607544899
    },
    {
        "content": "<p>Sorry, you are perfectly right!</p>\n<p>Thanks!</p>",
        "id": 219391519,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607544918
    },
    {
        "content": "<p>yeah, your way is a lot harder :-)</p>",
        "id": 219391549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607544941
    },
    {
        "content": "<p>Indeed, I struggled for a little bit, not realizing what was going on!</p>",
        "id": 219391673,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607544988
    },
    {
        "content": "<p>Given that we are here.  Is there a <code>t1_space</code> instance on <code>metric_space</code>?  (Or indeed, most of the <code>t_i_space</code> instances?)</p>",
        "id": 219391843,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607545083
    },
    {
        "content": "<p>there should be</p>",
        "id": 219391871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607545101
    },
    {
        "content": "<p>(This is where the question came from: I defined a <code>t1_space</code> instance, thinking that it would be easy, and it is if I do not use two different topological space structures!  <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> )</p>",
        "id": 219391938,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607545140
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">metric</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">t1_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>Yes.</p>",
        "id": 219392224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607545280
    },
    {
        "content": "<p>This had to be there, otherwise Patrick's proof the other day wouldn't have worked.</p>",
        "id": 219392267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607545307
    },
    {
        "content": "<p>I'm trying to answer this question the hard way, by reading the sources</p>",
        "id": 219392330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607545324
    },
    {
        "content": "<p><code>example {α : Type*} [metric_space α] : t1_space α := by show_term {apply_instance}</code> is the easy way now</p>",
        "id": 219392359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607545344
    },
    {
        "content": "<p>Ok, I think all my confusion started with the two separate assumption <code>topological_space</code> and <code>metric_space</code>.</p>\n<p>Thanks for clearing this up for me!</p>",
        "id": 219392406,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607545369
    },
    {
        "content": "<p>I didn't really get typeclasses until I actually made something which used them (schemes)</p>",
        "id": 219392458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607545401
    },
    {
        "content": "<p>I see that <code>uniform_space.basic</code> imports <code>topology.separation</code> but it doesn't actually use anything in the file</p>",
        "id": 219392699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607545520
    },
    {
        "content": "<p>write a linter!</p>",
        "id": 219392740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607545542
    },
    {
        "content": "<p>isn't that what you kids do?</p>",
        "id": 219392773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607545561
    },
    {
        "content": "<p>Hm, we don't have that metric spaces are normal though</p>",
        "id": 219393134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607545720
    },
    {
        "content": "<p>Even better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">regular_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 219394100,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607546197
    },
    {
        "content": "<p>What comes after t3?</p>",
        "id": 219394288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607546306
    },
    {
        "content": "<p>regular, then normal</p>",
        "id": 219394334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607546332
    },
    {
        "content": "<p>regular = t3 right?</p>",
        "id": 219394347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607546342
    },
    {
        "content": "<p>yeah</p>",
        "id": 219394359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607546347
    },
    {
        "content": "<p>I think there is another one in between</p>",
        "id": 219394380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607546364
    },
    {
        "content": "<p>Are regular and normal really words for topological spaces? They're also predicates on commutative rings. Regular implies normal for commutative rings</p>",
        "id": 219394395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607546372
    },
    {
        "content": "<p>they are</p>",
        "id": 219394425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607546387
    },
    {
        "content": "<p>maths is so messed up</p>",
        "id": 219394436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607546395
    },
    {
        "content": "<p>normal implies regular for spaces <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 219394437,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607546395
    },
    {
        "content": "<p>that's because spec is contravariant</p>",
        "id": 219394492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607546408
    },
    {
        "content": "<p>Wikipedia says there's TX for X in {0,1,2,2.5,3,3.5,4,5,6}</p>",
        "id": 219394587,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607546456
    },
    {
        "content": "<blockquote>\n<ul>\n<li>X is T0, or Kolmogorov, if any two distinct points in X are topologically distinguishable. (It will be a common theme among the separation axioms to have one version of an axiom that requires T0 and one version that doesn't.)</li>\n<li>X is R0, or symmetric, if any two topologically distinguishable points in X are separated.</li>\n<li>X is T1, or accessible or Fréchet or Tikhonov, if any two distinct points in X are separated. Thus, X is T1 if and only if it is both T0 and R0. (Although you may say such things as \"T1 space\", \"Fréchet topology\", and \"suppose that the topological space X is Fréchet\"; avoid saying \"Fréchet space\" in this context, since there is another entirely different notion of Fréchet space in functional analysis.)</li>\n<li>X is R1, or preregular, if any two topologically distinguishable points in X are separated by neighbourhoods. Every R1 space is also R0.</li>\n<li>X is Hausdorff, or T2 or separated, if any two distinct points in X are separated by neighbourhoods. Thus, X is Hausdorff if and only if it is both T0 and R1. Every Hausdorff space is also T1.</li>\n<li>X is T2½, or Urysohn, if any two distinct points in X are separated by closed neighbourhoods. Every T2½ space is also Hausdorff.</li>\n<li>X is completely Hausdorff, or completely T2, if any two distinct points in X are separated by a continuous function. Every completely Hausdorff space is also T2½.</li>\n<li>X is regular if, given any point x and closed set F in X such that x does not belong to F, they are separated by neighbourhoods. (In fact, in a regular space, any such x and F will also be separated by closed neighbourhoods.) Every regular space is also R1.</li>\n<li>X is regular Hausdorff, or T3, if it is both T0 and regular.[1] Every regular Hausdorff space is also T2½.</li>\n<li>X is completely regular if, given any point x and closed set F in X such that x does not belong to F, they are separated by a continuous function. Every completely regular space is also regular.</li>\n<li>X is Tychonoff, or T3½, completely T3, or completely regular Hausdorff, if it is both T0 and completely regular.[2] Every Tychonoff space is both regular Hausdorff and completely Hausdorff.</li>\n<li>X is normal if any two disjoint closed subsets of X are separated by neighbourhoods. (In fact, a space is normal if and only if any two disjoint closed sets can be separated by a continuous function; this is Urysohn's lemma.)</li>\n<li>X is normal regular if it is both R0 and normal. Every normal regular space is regular.</li>\n<li>X is normal Hausdorff, or T4, if it is both T1 and normal. Every normal Hausdorff space is both Tychonoff and normal regular.</li>\n<li>X is completely normal if any two separated sets are separated by neighbourhoods. Every completely normal space is also normal.</li>\n<li>X is completely normal Hausdorff, or T5 or completely T4, if it is both completely normal and T1. Every completely normal Hausdorff space is also normal Hausdorff.</li>\n<li>X is perfectly normal if any two disjoint closed sets are precisely separated by a continuous function. Every perfectly normal space is also completely normal.</li>\n<li>X is perfectly normal Hausdorff, or T6 or perfectly T4, if it is both perfectly normal and T1. Every perfectly normal Hausdorff space is also completely normal Hausdorff.</li>\n</ul>\n</blockquote>\n<p>I feel like the list gets longer every time I look at it</p>",
        "id": 219394628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607546480
    },
    {
        "content": "<p>Right. Time to switch to condensed sets then.</p>",
        "id": 219394781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607546562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> if you're still around, then here's something you might want to think about. In <a href=\"https://github.com/leanprover-community/mathlib/issues/4301\">#4301</a> there is the following proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">non_root_interval_of_polynomial</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_f_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f.eval</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">f_roots</span> <span class=\"o\">:=</span> <span class=\"n\">f.roots.to_finset.erase</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">distances</span> <span class=\"o\">:=</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_roots.image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">distances.nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_insert_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">distances.min'</span> <span class=\"n\">h_nonempty</span> <span class=\"k\">with</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_allpos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">distances</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_image</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">α₀</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">zero_lt_one</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_erase</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_pos</span><span class=\"o\">,</span> <span class=\"n\">sub_ne_zero</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">h.1.symm</span> <span class=\"o\">}},</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h_allpos</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">distances.min'_mem</span> <span class=\"n\">h_nonempty</span><span class=\"o\">))],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hxα</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hab₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">f.roots.to_finset</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f_roots</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_erase</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hxα</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">distances</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_image</span><span class=\"o\">],</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"n\">finset.min'_le</span> <span class=\"n\">distances</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"bp\">←</span><span class=\"n\">hB</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hx</span> <span class=\"n\">h₃</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">multiset.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">mem_roots</span> <span class=\"n\">h_f_nonzero</span><span class=\"o\">,</span> <span class=\"n\">is_root.def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hab₂</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(to make it run you need to go to a local copy of mathlib, checkout <code>liouville_theoerm/lemmas</code>, type <code>leanproject get-cache</code> and then open <code>analysis/real/polynomial.lean</code>). This PR is making the same mistake you were making earlier. Can you make that proof about 1/4 the length?</p>",
        "id": 219395383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607546861
    },
    {
        "content": "<p>Hm, so I started trying to prove this and got stuck on the very first step:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.separation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span> <span class=\"n\">uniformity</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">separated_normal</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">normal_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">hs</span> <span class=\"n\">ht</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p.2</span> <span class=\"bp\">∉</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓤</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>why should this be true?</p>",
        "id": 219395393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607546867
    },
    {
        "content": "<p>it seems like you might need some kind of compactness property to be able to get all the neighborhoods together</p>",
        "id": 219395619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607546973
    },
    {
        "content": "<p>ah, it's false</p>",
        "id": 219396044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607547179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> it was looking at liouville that I decided to prove the lemma about discreteness of roots of polynomials: I am indeed planning to apply this to make the arguments quicker!  Though, tonight I should rest: assuming two topologies on the same space was my cue!</p>",
        "id": 219396568,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607547449
    }
]