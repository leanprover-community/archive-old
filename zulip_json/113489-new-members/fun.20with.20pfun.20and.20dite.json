[
    {
        "content": "<p>This code block is kinda long but I think is close to minimal. I'm trying to define a notion of the limit of an increasing sequence of partial functions. I define the limiting function in tactic mode using <code>by_cases</code>. Later I unfold it and try to tell Lean which branch it goes down with <code>rw dif_pos</code>, but I get an error </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">dite</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_5</span>\n</code></pre></div>\n\n\n<p>while the goal state looks like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"err\">∈</span>\n    <span class=\"n\">dom</span>\n      <span class=\"o\">(</span><span class=\"n\">id</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n            <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">F</span> <span class=\"n\">k</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"err\">↑</span><span class=\"n\">none</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>which to my human eyes clearly contains <code>dite _ _ _</code> in it.</p>\n<p>Here's the code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">pfun</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span>  <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">dom</span> <span class=\"n\">f</span> <span class=\"err\">⊆</span> <span class=\"n\">dom</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha&#39;</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">limit_of_chain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F_chain</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">none</span><span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">hk</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">k</span><span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">limit_of_chain_extends</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F_chain</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">limit_of_chain</span> <span class=\"n\">F</span> <span class=\"n\">F_chain</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">limit_of_chain</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196720676,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588817910
    },
    {
        "content": "<p>it's under a binder</p>",
        "id": 196720726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817980
    },
    {
        "content": "<p><code>simp</code> can get at this, <code>rw</code> can't</p>",
        "id": 196720729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588817996
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 196720773,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588818007
    },
    {
        "content": "<p>so <code>simp only [dif_pos]</code> will make progress?<br>\nEDIT: I think it doesn't</p>",
        "id": 196720775,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588818014
    },
    {
        "content": "<p>Perhaps we could improve the error message</p>",
        "id": 196720788,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588818046
    },
    {
        "content": "<p>should we rewrite <code>rw</code> so that it can access binders?</p>",
        "id": 196720791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588818054
    },
    {
        "content": "<p>I mean, there is a lot that can go wrong with <code>rw</code>, but in this case the error message is actually just a lie</p>",
        "id": 196720793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588818057
    },
    {
        "content": "<p>there is <code>simp_rw</code> I think, which uses <code>simp</code> with settings to make it act more like <code>rw</code></p>",
        "id": 196720805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588818084
    },
    {
        "content": "<p>but can it succeed without knowing all the inputs of a theorem?</p>",
        "id": 196720858,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588818130
    },
    {
        "content": "<p>because <code>rw</code> can (and generates metavariables) while <code>simp</code> fails</p>",
        "id": 196720865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588818142
    },
    {
        "content": "<p>in my context, <code>simp only [id.def, roption.coe_none],</code> and <code>simp_rw dif_pos,</code> have the same effect</p>",
        "id": 196720867,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588818143
    },
    {
        "content": "<p><code>simp only [dif_pos]</code> will not make progress because it doesn't have the proof of the condition available</p>",
        "id": 196720877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588818179
    },
    {
        "content": "<p>unlike <code>rw</code>, which is happy to apply conditional rewrites and gives you the conditions as subgoals</p>",
        "id": 196720891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588818203
    },
    {
        "content": "<p>Does <code>simp only [dif_pos _]</code> work?</p>",
        "id": 196720912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588818240
    },
    {
        "content": "<p><code>have calc1 : ∃ (n : ℕ), a ∈ dom (F n), use n, exact ha,\nsimp only [dif_pos, calc1],</code><br>\nthis doesn't work</p>",
        "id": 196720975,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588818275
    },
    {
        "content": "<p>neither does <code>simp only [dif_pos _]</code></p>",
        "id": 196720999,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588818306
    },
    {
        "content": "<p>(would these problems not arise if I was avoiding the use of tactics in constructing data?)</p>",
        "id": 196721009,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588818340
    },
    {
        "content": "<p>The binder binds a different <code>a</code>. Actually I can't tell what is happening.</p>",
        "id": 196721056,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588818370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/fun.20with.20pfun.20and.20dite/near/196721056\" title=\"#narrow/stream/113489-new-members/topic/fun.20with.20pfun.20and.20dite/near/196721056\">said</a>:</p>\n<blockquote>\n<p>The binder binds a different <code>a</code>. Actually I can't tell what is happening.</p>\n</blockquote>\n<p>does <code>simp only [id.def, roption.coe_none],</code> make it a little clearer?</p>",
        "id": 196721110,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588818443
    },
    {
        "content": "<p>Oh right, a <code>pfun</code> actually is a function. Maybe it would be more profitable to simplify from the outside first.</p>",
        "id": 196721115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588818450
    },
    {
        "content": "<p>Like presumably <code>a \\in dom f</code> is some assertion about <code>f a</code>, and then the lambda will reduce</p>",
        "id": 196721288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588818656
    },
    {
        "content": "<p>and then you wouldn't be in this situation where you can't provide the proof of which case you are in because you have no way to talk about the variable <code>a</code></p>",
        "id": 196721300,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588818681
    },
    {
        "content": "<p>I think maybe this did some \"simplifying from the outside\" although I'm not really sure what happened (the <code>work_on_goal</code> line came from <code>tidy?</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">pfun</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span>  <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">dom</span> <span class=\"n\">f</span> <span class=\"err\">⊆</span> <span class=\"n\">dom</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha&#39;</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">limit_of_chain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F_chain</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">none</span><span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">hk</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">k</span><span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">limit_of_chain_extends</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F_chain</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">limit_of_chain</span> <span class=\"n\">F</span> <span class=\"n\">F_chain</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">limit_of_chain</span><span class=\"o\">,</span>\n<span class=\"c1\">-- have calc1 : ∃ (n : ℕ), a ∈ dom (F n), use n, exact ha,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">coe_none</span><span class=\"o\">],</span>\n\n<span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">mem_dom</span>\n   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n      <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">))</span>\n   <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">existsi</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span> <span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196721385,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588818829
    },
    {
        "content": "<p>By the way, part of the point of <code>pfun</code> is you don't have to use <code>by_cases</code> at all</p>",
        "id": 196721388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588818835
    },
    {
        "content": "<p>hmm how would you define <code>limit_of_chain</code>?</p>",
        "id": 196721445,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588818880
    },
    {
        "content": "<p>(for my application to categoriticity of DLOs, I only need the case where the limit of the partial functions is total, so I could cut out my use of <code>by_cases</code> by adding the positive case as an assumption)</p>",
        "id": 196721539,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588819021
    },
    {
        "content": "<p>(as a zulip meta question, does this conversation belong in \"new members\" or \"math\"?)</p>",
        "id": 196721554,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588819062
    },
    {
        "content": "<p>for example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">limit_of_chain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">F_chain</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span><span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(by the way you seem to be missing <code>noncomputable theory</code>?)</p>",
        "id": 196721598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588819088
    },
    {
        "content": "<p>in principle you could make the value part computable too, since you only have to search over naturals</p>",
        "id": 196721609,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588819129
    },
    {
        "content": "<p>thanks, I added <code>noncomputable theory</code>. I should probably convince VSCode to autogenerate headers for me</p>",
        "id": 196721620,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588819145
    },
    {
        "content": "<p>oh cool I like this</p>",
        "id": 196721646,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588819201
    },
    {
        "content": "<p>with your definition, <code>tidy</code> can make a lot of progress :)</p>",
        "id": 196721797,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588819435
    },
    {
        "content": "<p>It works!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">pfun</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span>  <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">dom</span> <span class=\"n\">f</span> <span class=\"err\">⊆</span> <span class=\"n\">dom</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">limit_of_chain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">F_chain</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span><span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">chain_pointwise_constant</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">F_chain</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">ha_n</span> <span class=\"n\">ha_k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha_k</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha_n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n<span class=\"k\">have</span> <span class=\"n\">calc1</span> <span class=\"o\">:=</span> <span class=\"n\">F_chain</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">calc1</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n        <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">symmetry</span><span class=\"o\">},},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">limit_of_chain_spec</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">F_chain</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">ha&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">limit_of_chain</span> <span class=\"n\">F</span> <span class=\"n\">F_chain</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha_k</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha_k</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">limit_of_chain</span> <span class=\"n\">F</span> <span class=\"n\">F_chain</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">limit_of_chain</span> <span class=\"n\">at</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">ha&#39;</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">existsi</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">limit_of_chain</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span>\n<span class=\"n\">apply</span> <span class=\"n\">chain_pointwise_constant</span> <span class=\"bp\">_</span> <span class=\"n\">F_chain</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">limit_of_chain_extends</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F_chain</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">limit_of_chain</span> <span class=\"n\">F</span> <span class=\"n\">F_chain</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">pfun</span><span class=\"bp\">.</span><span class=\"kn\">extends</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">limit_of_chain</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">},</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">suffices</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"n\">ha_k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">k</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha_k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">limit_of_chain</span> <span class=\"n\">F</span> <span class=\"n\">F_chain</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">key</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">key</span> <span class=\"k\">with</span> <span class=\"n\">ha_k</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">k</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n<span class=\"n\">apply</span> <span class=\"n\">chain_pointwise_constant</span> <span class=\"bp\">_</span> <span class=\"n\">F_chain</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">limit_of_chain_spec</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196803230,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588872209
    }
]