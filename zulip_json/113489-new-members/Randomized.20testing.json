[
    {
        "content": "<p>Is there a way to (via randomized testing) check if a given lemma doesn't hold? This would be useful, for example, so I don't try to prove something that is unprovable.</p>",
        "id": 231042984,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616168386
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#slimcheck\">tactic#slimcheck</a></p>",
        "id": 231043183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616168451
    },
    {
        "content": "<p>hmm, apparently that's not a thing? There's definitely a tactic which does this.</p>",
        "id": 231043313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616168503
    },
    {
        "content": "<p>I was thinking of something similar to quickcheck yeah, but googling didn't yield much</p>",
        "id": 231043471,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616168555
    },
    {
        "content": "<p>You mean <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#slim_check\">tactic#slim_check</a>. A mistake I make often as well :)</p>",
        "id": 231043771,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616168690
    },
    {
        "content": "<p>Hmm, it has no tactic docs, so please see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.slim_check\">docs#tactic.interactive.slim_check</a> instead.</p>",
        "id": 231043893,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1616168733
    },
    {
        "content": "<p>But using it might be a little involved if you have to write <code>sampleable</code> instances for your types. It's not too difficult though. I'd suggest reading the <code>slim_check</code> and <code>sampleable</code> source.</p>",
        "id": 231044409,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616168914
    },
    {
        "content": "<p>Exactly what I was looking for. Was hoping for automatic sampleable generation, but you can't have your cake and eat it too. Thanks!</p>",
        "id": 231045125,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616169191
    },
    {
        "content": "<p>Do you want to share your work case? In general, the tools to build a <code>sampleable</code> instance are pretty straightforward, and I'd be happy to contribute to making them easier.</p>",
        "id": 231045235,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616169237
    },
    {
        "content": "<p>There are already a ton of instances for your usual assortment of types and \"type combinators\"</p>",
        "id": 231045356,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616169271
    },
    {
        "content": "<p>Sure: I have these inductive datatypes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_func</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">):</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">ty_bool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_var</span> <span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_abs</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">ttype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_app</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_true</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_false</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span><span class=\"n\">t_if</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">):</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>It seems to me that generating sampleable for trees like these could be fairly automated, even if the generated sampler might be somewhat inefficient or biased.</p>",
        "id": 231046118,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1616169570
    },
    {
        "content": "<p>Making a derive handler for sampleable seems like the thing you want right?</p>",
        "id": 231095925,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1616191407
    }
]