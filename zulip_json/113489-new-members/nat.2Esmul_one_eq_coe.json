[
    {
        "content": "<p>When I was dealing with matrices, I found that <code>@[simp]</code> might be a bad tag for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat.smul_one_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">int.smul_one_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>as the simplified result forbids me from using properties of identity matrices and then using the properties of scalar multiplication.<br>\nI temporarily failed to extract a true <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to illustrate this. <br>\n<code>example [decidable_eq I] (n : ℕ) {i j : I} (h : i ≠ j) : (n • (1 : matrix I I ℚ)) = 0 := by {simp,}</code><br>\nAfter <code>simp</code>, the LHS changes to <code>↑n : matrix I I \\Q</code>, which is not very convenient to tackle.<br>\nWhen I was doing a more complicated example, I was facing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_11</span>\n<span class=\"n\">_inst_8</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">F</span>\n<span class=\"n\">_inst_9</span><span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">F</span>\n<span class=\"n\">ij</span><span class=\"o\">:</span> <span class=\"n\">F</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and was not quite sure how to continue.<br>\nI then carefully used <code>simp only</code> to avoid this stage.</p>",
        "id": 246074437,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626343688
    },
    {
        "content": "<p>One way to resolve this would be to add a simp lemma to matrices saying that <code>(coe n) = diagonal (coe n)</code></p>",
        "id": 246084030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626350567
    },
    {
        "content": "<p>And then there are lots of lemmas about diagonals that would apply</p>",
        "id": 246084047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626350583
    },
    {
        "content": "<p>But you are also right in questioning whether those are sensible simp lemmas, it's not obvious whether they are to me.</p>",
        "id": 246084140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626350648
    },
    {
        "content": "<p>In general <code>coe</code> is the preferred way to convert numbers from concrete types like <code>ℕ</code>. (In particular, we also have <code>simp</code> lemmas saying all ring homs from <code>ℕ</code> / <code>ℤ</code> are equal to <code>coe</code>.) So I don't think that these <code>simp</code> lemmas really are the issue, it's more that there are not enough lemmas about the <code>coe</code> into matrices.</p>",
        "id": 246087172,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626352553
    },
    {
        "content": "<p>Good suggestions! If there is going to be any relevant change to mathlib, please let me know.</p>",
        "id": 246088330,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626353270
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat.smul_one_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This applies to other semirings like matrices. So with the simp tag, we may need more lemmas like <code>(coe n) = diagonal (coe n)</code> for other semirings.</p>",
        "id": 246088922,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626353641
    },
    {
        "content": "<p>As such, personally, I think removing the simp tag there may be more convenient for the users.</p>",
        "id": 246090036,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626354168
    },
    {
        "content": "<p>Why not write a matrix.coe_apply?</p>",
        "id": 246096272,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626357108
    },
    {
        "content": "<p>That would be the simp lemma to add.</p>",
        "id": 246096381,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626357139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/nat.2Esmul_one_eq_coe/near/246088922\">said</a>:</p>\n<blockquote>\n<p>This applies to other semirings like matrices. So with the simp tag, we may need more lemmas like <code>(coe n) = diagonal (coe n)</code> for other semirings.</p>\n</blockquote>\n<p>Not many other semiring have a <code>diagonal</code> ;)</p>",
        "id": 246104213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626360170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/nat.2Esmul_one_eq_coe/near/246096381\">said</a>:</p>\n<blockquote>\n<p>That would be the simp lemma to add.</p>\n</blockquote>\n<p>That's certainly a good simp lemma to start with and would resolve the case in question, although I suspect it's more useful to unfold it to <code>diagonal</code> first, otherwise you have to copy every simp lemma about diagonal too</p>",
        "id": 246104281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626360204
    }
]