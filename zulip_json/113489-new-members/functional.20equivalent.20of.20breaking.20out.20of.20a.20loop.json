[
    {
        "content": "<p>I feel like there's some fancy way to do this without defining my own function and I just don't know it. Often I have some function where <code>f(x)</code> returns an option, and I have a list xs, and I want to return the first value of the list where <code>f(x)</code> is <code>some</code>. But I don't want to do a map on the list and spend time on the whole list if the answer is near the beginning. Ie in python</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">find_first</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">mylist</span><span class=\"o\">):</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">mylist</span><span class=\"o\">:</span>\n    <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">None</span><span class=\"o\">:</span>\n      <span class=\"n\">return</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Is there a Lean equivalent to this where I don't have to define a helper recursive function?</p>",
        "id": 219276025,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607469028
    },
    {
        "content": "<p>This is probably a fold by some monadic operator</p>",
        "id": 219276289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607469225
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.mfirst\">docs#list.mfirst</a> ?</p>",
        "id": 219276304,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1607469235
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list.mfirst</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>      <span class=\"o\">:=</span> <span class=\"n\">failure</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">list.mfirst</span> <span class=\"n\">as</span>\n</code></pre></div>\n<p>won't that go down the whole list?</p>",
        "id": 219277328,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607469325
    },
    {
        "content": "<p>oh, I was ignoring the <code>&lt;|&gt;</code> which perhaps does something unusual</p>",
        "id": 219277426,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607469368
    },
    {
        "content": "<p>No, if <code>f a</code> succeeds (e.g. returns <code>some</code> in the <code>option</code> monad) only the left side of the <code>&lt;|&gt;</code> will fire.</p>",
        "id": 219277430,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1607469370
    },
    {
        "content": "<p><code>&lt;|&gt;</code> is monadic \"or else\"</p>",
        "id": 219277452,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1607469390
    },
    {
        "content": "<p>does the monad system know to turn that <code>failure</code> into a <code>none</code> for the option monad</p>",
        "id": 219277482,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607469424
    },
    {
        "content": "<p>Yep</p>",
        "id": 219277498,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1607469442
    },
    {
        "content": "<p>That's the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alternative\">docs#alternative</a> bit</p>",
        "id": 219277528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607469470
    },
    {
        "content": "<p>if i have two monadic things with different monad types that have a \"fail\", can i convert from one to the other? like if I have a <code>tactic foo</code> and I want an <code>option foo</code></p>",
        "id": 219278781,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1607470321
    },
    {
        "content": "<p>In this case you probably want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.try_core\">docs#tactic.try_core</a></p>",
        "id": 219278983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607470423
    },
    {
        "content": "<p>In general <code>option foo</code> is exactly the thing you can convert into monads that have a \"fail\", but converting out of other monads is monad-specific</p>",
        "id": 219279066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607470465
    },
    {
        "content": "<p>Is there a general name for this function? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"n\">failure</span>\n</code></pre></div>",
        "id": 219279577,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607470861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113489-new-members/topic/functional.20equivalent.20of.20breaking.20out.20of.20a.20loop/near/219278781\">said</a>:</p>\n<blockquote>\n<p>if i have two monadic things with different monad types that have a \"fail\", can i convert from one to the other? like if I have a <code>tactic foo</code> and I want an <code>option foo</code></p>\n</blockquote>\n<p>You can turn an <code>option</code> into a <code>tactic</code> (I think there's a coercion?) but not the other way around, which would need you to summon a tactic state out of nowhere.</p>",
        "id": 219279920,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1607471143
    }
]