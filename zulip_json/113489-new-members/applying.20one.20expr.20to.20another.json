[
    {
        "content": "<p>Buenos días, Giving two expressions <code>t s</code> I want to be able to treat <code>s</code> like it's a goal, apply <code>t</code> to it, and get the list of goals that <code>apply t</code> generates. To do this I have </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">],</span>\n   <span class=\"n\">apply</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n   <span class=\"n\">get_goals</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test3_works</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">test3</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">l</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test3_works</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Unfortunately, I get a red squiggle under the <code> ↔</code> in <code>(c ↔ d) </code> with the error \"failed to synthesize type class instance for<br>\nc d : Prop ⊢ reflected (c ↔ d)\". I've seen <code>reflected</code> before, but I have no idea what it is.</p>\n<p>Does <code>test3</code> actually do what I want? And if so, how might I test it? Is it even possible to test?</p>",
        "id": 209166582,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599291872
    },
    {
        "content": "<p>Your problem is not related to <code>test3</code> or <code>iff</code>. I think an expression being <code>reflected</code> refers to it being free of any local context so <code>'(c ↔ d)</code> is not reflected as it refers to <code>c</code> and <code>d</code>. <code>'(∀ {c d : Prop} c ↔ d)</code> would be reflected. In order to fix this you can change <code>c</code> and <code>d</code> to <code>expr</code>and use pre-expresions <code>''(%%c ↔ %%d)</code> like in this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">to_expr</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">set_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">apply</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n   <span class=\"n\">get_goals</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test3_works</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">test3</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">l</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test3_works</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"err\">%%</span><span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Unfortunately this was as far as I got, lean gives the cryptic error <code>cannot evaluate function: 0 arguments given but expected 2\n</code></p>",
        "id": 209230093,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1599406683
    },
    {
        "content": "<p>I see, thanks. I've gotten the error \"cannot evaluate function: 0 arguments given but expected 2\" before as well and I have no idea what it means.</p>",
        "id": 209243596,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599429868
    },
    {
        "content": "<p>It gives the impression that there are some arguments missing, but I don't know what they could be.</p>",
        "id": 209243614,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599429924
    },
    {
        "content": "<p>Apparently that error happens when you try to <code>#eval</code> something involving a variable:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">n</span>   <span class=\"c1\">-- error: cannot evaluate function: 0 arguments given but expected 1</span>\n</code></pre></div>",
        "id": 209243751,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599430164
    },
    {
        "content": "<p>In this case that error makes sense because <code>``(%%c ↔ %%d)</code> means <code>iff</code> applied to the expressions <code>c</code> and <code>d</code>.</p>",
        "id": 209243808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599430218
    },
    {
        "content": "<p>For testing purposes I guess you might prefer <code>constants c d : Prop</code> together with <code>``(c ↔ d)</code>, although then you will encounter a new error.</p>",
        "id": 209243838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599430306
    },
    {
        "content": "<p>I'm not at my Lean machine atm, I'll check it out later. Are <code>%%c </code> and <code>%%d</code> variables?</p>",
        "id": 209243896,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599430378
    },
    {
        "content": "<p>they are splices</p>",
        "id": 209243903,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599430391
    },
    {
        "content": "<p>like if <code>c : expr</code>and <code>d : expr</code> both represent the expression <code>x</code>, then <code>``(%%c ↔ %%d)</code> is the expression <code>x ↔ x</code></p>",
        "id": 209243916,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599430440
    },
    {
        "content": "<p>My understanding was that splices were like <code>_</code>s but you can use the name later.</p>",
        "id": 209243968,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599430498
    },
    {
        "content": "<p>I don't understand what that would mean. It sounds more like metavariables...?</p>",
        "id": 209244043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599430660
    },
    {
        "content": "<p><code>%%c</code> can also be called an antiquotation</p>",
        "id": 209244045,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599430669
    },
    {
        "content": "<p>As an extreme example, <code>``(%%c) = c</code>.</p>",
        "id": 209244227,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599430987
    },
    {
        "content": "<p>Hmmm, maybe my understanding is wrong. Can't you do things like <code>(%%c  ↔ %%d)) ← get_some_expr</code>, and then use <code>c</code> and <code>d</code> later?</p>",
        "id": 209244234,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599430999
    },
    {
        "content": "<p>Is this explained in some docs somewhere?</p>",
        "id": 209244264,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599431043
    },
    {
        "content": "<p>That's the same thing but in a pattern position.</p>",
        "id": 209244319,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599431156
    },
    {
        "content": "<p>Right.</p>",
        "id": 209244377,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599431252
    },
    {
        "content": "<p>I tried </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">constants</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test3_works</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"err\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>And got a red squiggle under <code>#eval</code> with the error \"code generation failed, VM does not have code for 'y'\".</p>\n<p>I feel like I'm trying to do something for which Lean is not intended. I'm going to go away and think about what I've learned and what I want to do.</p>",
        "id": 209264796,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599463347
    },
    {
        "content": "<p>This is still the same underlying issue--you're asking Lean to do something that doesn't make sense. You might like to consider the following exercises.</p>\n<p>Why does this fail? (What do you expect to happen?)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>Why does this fail?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>Why does this fail?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"n\">e</span>\n</code></pre></div>\n\n\n<p>Why does this fail?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Then: Why does this fail?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Why does this <em>not</em> fail?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209284432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599477622
    },
    {
        "content": "<p>The code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>gives the error \"cannot evaluate function: 0 arguments given but expected 1\". I guess this is because <code>#eval</code> does computation, so it wants the variable <code>n</code> to be assigned to something.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>gives \"code generation failed, VM does not have code for 'm'\". I'm guessing this is because <code>#eval</code> doesn't know what to do with constants. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"n\">e</span>\n</code></pre></div>\n\n\n<p>gives \"code generation failed, VM does not have code for 'e'\" which I'd wager is for the exact same reason as the last example.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>gives the same error I think because <code>``(%%e)</code> is just <code>e</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>gives a red squiggle under the <code>n</code> with the error \"unexpected local in quotation expression\". This suggests to me that when a variable is declared a local constant is added to the environment or something. Whereas for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Lean stores <code>n</code> as a constant. So do double backticks work on constants and not local constants or something?</p>",
        "id": 209350288,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599547423
    },
    {
        "content": "<p>So this </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">constants</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test3_works</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"err\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>fails because <code>x</code> and <code>y</code> are not set to anything. Right?</p>",
        "id": 209350457,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599547558
    },
    {
        "content": "<blockquote>\n<p>So do double backticks work on constants and not local constants or something?</p>\n</blockquote>\n<p>This has to do with the difference between double and triple backtick. A double backtick pre-expression is name-resolved in the empty context at the point of the tactic itself, which is to say, you can reference constants and definitions defined previous to the tactic call, but not local constants (which wouldn't make any sense anyway because lean wants an <code>expr</code> not a <code>nat</code> at that point; but this is what <code>%%e</code> is doing).</p>\n<p>When you use triple backtick, all the resolution is put off until it is explicitly elaborated using <code>to_expr</code>. This approach allows you to resolve local constants as long as the <code>to_expr</code> tactic is called inside a <code>begin ... end</code> block that has <code>n</code> in the context.</p>",
        "id": 209352875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599549828
    },
    {
        "content": "<blockquote>\n<p>So this fails because x and y are not set to anything. Right?</p>\n</blockquote>\n<p>It fails for the same reasons as examples 2 and 3. The VM can't evaluate constants (unless they have been specifically defined as intrinsics in the C++ code)</p>",
        "id": 209353045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599549951
    },
    {
        "content": "<p>Ohh...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>works.</p>",
        "id": 209356025,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599552004
    },
    {
        "content": "<p>You should think of that as being morally equivalent to <code>trace \"n\"</code></p>",
        "id": 209356077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599552052
    },
    {
        "content": "<p>it doesn't require <code>n</code> in the context at all</p>",
        "id": 209356088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599552063
    },
    {
        "content": "<p>I'm not sure I completely understand what's happening. But I think I is learning.</p>",
        "id": 209356117,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599552093
    },
    {
        "content": "<p>Yeah, so </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">trace</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>works without <code>variable t : nat</code>.</p>",
        "id": 209356774,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1599552569
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tac</span> <span class=\"o\">:=</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">tac</span> <span class=\"c1\">-- unknown identifier &#39;t&#39;</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">tac</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">}</span> <span class=\"c1\">-- t</span>\n</code></pre></div>",
        "id": 209358783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599554054
    },
    {
        "content": "<p>or to be slightly more interesting:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tac</span> <span class=\"o\">:=</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">tac</span> <span class=\"c1\">-- unknown identifier &#39;t&#39;</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">tac</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">}</span> <span class=\"c1\">-- ℕ</span>\n</code></pre></div>",
        "id": 209358944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599554165
    },
    {
        "content": "<p>which should make it clear that in the latter case <code>tac</code> really has picked up the variable <code>t : nat</code> in the context</p>",
        "id": 209358981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599554199
    }
]