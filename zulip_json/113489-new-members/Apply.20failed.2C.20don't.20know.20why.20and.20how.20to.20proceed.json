[
    {
        "content": "<p>Hello guys, I am a noob and I seem to have a very simple problem I don't quite understand (lean 3): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">proof_x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- error: invalid apply tactic, failed to unify x with ∃ (s : string), f s = tt → x</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In the lemma <code>proof_x</code> I begin by introducing hypothesis h: <code>h : ∃ (s : string), f s = tt → x</code> at this point my goal is <code>x</code>.<br>\nTo me it seems like I should be able to <code>apply h</code> to get a goal of <code>∃ (s : string), f s = tt </code>.  However, it says the apply tactic failed to unify. <br>\nI have two questions:</p>\n<ol>\n<li>Why is this happening? To me it seems that if I can construct a string such that <code>f s = tt</code>, I have proof of <code>x</code> by <code>h</code>.  Why does lean not allow me to do this? Does it have to do with the existential quantifier?</li>\n<li>What is the correct tactic / workflow to proceed here instead?</li>\n</ol>",
        "id": 321644014,
        "sender_full_name": "Kasper",
        "timestamp": 1673876652
    },
    {
        "content": "<p>Is your hypothesis <code>(∃ s : string, f s = tt) -&gt; x</code> or <code>∃ s : string, (f s = tt -&gt; x)</code>?</p>",
        "id": 321645057,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673876945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Apply.20failed.2C.20don't.20know.20why.20and.20how.20to.20proceed/near/321645057\">said</a>:</p>\n<blockquote>\n<p>Is your hypothesis <code>(∃ s : string, f s = tt) -&gt; x</code> or <code>∃ s : string, (f s = tt -&gt; x)</code>?</p>\n</blockquote>\n<p>Actually I think it is <code>(∃ s : string, f s = tt -&gt; x)</code>, does this imply the former? If that is the case, is this lemma still proveable?</p>",
        "id": 321646664,
        "sender_full_name": "Kasper",
        "timestamp": 1673877426
    },
    {
        "content": "<p><code>∃ s : string, f s = tt -&gt; x</code> is true no matter what <code>x</code> is (for example, <code>s = \"\"</code> makes the implication vacuously true), so the lemma can't be true since would imply <code>x</code> no matter what <code>x</code> is.</p>",
        "id": 321648876,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673878028
    }
]