[
    {
        "content": "<p>Is it possible to construct a sort of interpreter that takes a formulation strictly in set theory and first order logic and translates it to a formulation in Lean? That is, the only things given in the formulation to be interpreted are the axioms of set theory and first order logic, and the interpreter checks that those are all that are used, and then translates them into type theory as implemented by Lean in order to check them? I hope to learn type theory, and I am trying to, but I keep running into the issue that all of the books, including the one I am currently using to learn type theory, seem to give definitions and proofs using set theory. I usually try to formalize these to check my understanding and proofs, and perhaps it might be easier to do using something like this.</p>",
        "id": 254807936,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632545005
    },
    {
        "content": "<p>Sure. This is more or less what the metamath -&gt; Lean translator does, mapping proofs in ZFC into proofs about the <code>Set</code> type in lean</p>",
        "id": 254811268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632548482
    },
    {
        "content": "<p>But it probably isn't that helpful if you don't already have <em>formal</em> set theory content to translate from</p>",
        "id": 254811278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632548507
    },
    {
        "content": "<p>Also, it isn't always exactly what you want; translating into <em>idiomatic</em> type theory often means using more types than the unityped set theory version</p>",
        "id": 254811378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632548597
    },
    {
        "content": "<p>If you include this stuff, translating into type theory becomes a much more heuristic affair, and I would recommend just learning how to do it by hand</p>",
        "id": 254811477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632548680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span> If you are just formalizing regular mathematics (i.e. not ZFC set theory), then usually the translation isn't too difficult when you get the hang of it.  I'd recommend looking at the conversation at the end of <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Type.20theory.20of.20Lean\">#general &gt; Type theory of Lean</a>.</p>",
        "id": 254830551,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632567998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241097\">Juho Kupiainen</span> <a href=\"#narrow/stream/113488-general/topic/Type.20theory.20of.20Lean/near/248718783\">said</a>:</p>\n<blockquote>\n<p>I feel it would be useful to have a guide for how to formalize math that was previously defined in set theory.</p>\n</blockquote>",
        "id": 254830589,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632568059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Type.20theory.20of.20Lean/near/248719097\">said</a>:</p>\n<blockquote>\n<p>The one line summary is <code>Type</code> = set, <code>set</code> = subset.</p>\n</blockquote>",
        "id": 254830642,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632568084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Type.20theory.20of.20Lean/near/248726293\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"241097\">Juho Kupiainen</span> <a href=\"#narrow/stream/113488-general/topic/Type.20theory.20of.20Lean/near/248718783\">said</a>:</p>\n<blockquote>\n<p>I feel it would be useful to have a guide for how to formalize math that was previously defined in set theory.</p>\n</blockquote>\n<p>The main trick is to realize you are lying to yourself. The math you are thinking of have not been \"previously defined in set theory\". They have been defined outside of any formal foundation. However they are usually expressed using a vocabulary that is inspired by set theory, but this is a very superficial connection with set theory. When using Lean you can mostly ignore foundational details (unless you want to formalize computer science). You'll get used to it very quickly.</p>\n</blockquote>",
        "id": 254830718,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1632568193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20interpreter.20for.20set.20theory.20.2B.20first.20order.20logic/near/254830551\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> If you are just formalizing regular mathematics (i.e. not ZFC set theory), then usually the translation isn't too difficult when you get the hang of it.  I'd recommend looking at the conversation at the end of <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Type.20theory.20of.20Lean\">#general &gt; Type theory of Lean</a>.</p>\n</blockquote>\n<p>What is the delineation between regular mathematics and ZFC set theory?</p>",
        "id": 254849707,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632585229
    },
    {
        "content": "<p>A lot of the questions that set theorists think about are not mathematics but metamathematics. For example the proof of the independence of the continuous hypothesis is a result about the existence of models of mathematics.</p>",
        "id": 254850035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632585514
    },
    {
        "content": "<p>You can do regular mathematics without knowing the axioms of ZFC</p>",
        "id": 254850370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632585763
    },
    {
        "content": "<p>Proof: Gauss and Euler were doing it before the axioms had even been invented.</p>",
        "id": 254850402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632585792
    },
    {
        "content": "<p>I guess I still feel like I'm stuck in a bit of a bootstrap issue, needing to learn type theory to use type theory to formalize my learning of type theory. This probably isn't unique to type theory, I would likely have the same issue with learning set theory using Metamath or Mizar. Probably what I am really looking for are more textbooks that use definitions, theorems and proofs that are already formalized, like Software Foundations in Coq. Are there more textbooks like that out there? Any hope that people are writing them?</p>",
        "id": 254852404,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632587681
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/logic_and_proof/\">https://leanprover.github.io/logic_and_proof/</a><br>\n<a href=\"https://github.com/blanchette/logical_verification_2020\">https://github.com/blanchette/logical_verification_2020</a><br>\n<a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics\">https://github.com/ImperialCollegeLondon/formalising-mathematics</a></p>",
        "id": 254853403,
        "sender_full_name": "Chris B",
        "timestamp": 1632588670
    },
    {
        "content": "<p>Thank you. Are there any that aim at teaching the foundational theory of type theory and computing?</p>",
        "id": 254855070,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632590142
    },
    {
        "content": "<p>That is, aimed at teaching the theory behind assistants like Lean (lambda calculus, etc.) rather than how to use the assistants.</p>",
        "id": 254856572,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632591449
    },
    {
        "content": "<p>No</p>",
        "id": 254856948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1632591806
    },
    {
        "content": "<p>Is that because it is thought to be not worth doing, can't be done, or just hasn't been done yet?</p>",
        "id": 254857308,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632592122
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">TPIL</a> has an introductory section on type theory, and the Lean team wrote <a href=\"https://leodemoura.github.io/files/elaboration.pdf\">this paper about elaboration</a> which IMO is like the heart of a proof assistant. There are plenty of good educational resources discussing nuts and bolts of the typed lambda calculus, but the \"why\" of the foundational stuff pretty quickly gets into ultra-specialist territory that looks like <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">mario's thesis</a> or <a href=\"https://www.researchgate.net/publication/226035566_Inductive_families\">the Dybjer paper</a> describing the theory behind Lean's inductive types.</p>",
        "id": 254859425,
        "sender_full_name": "Chris B",
        "timestamp": 1632593976
    },
    {
        "content": "<p>A couple of books that might work for you, depending on the way in which you want to learn the theory and which aspects you want to learn about, include \"Type Theory and Formal Proof\" by Nederpelt and Guevers, the first chapter of the Homotopy Type Theory book, \"Programming in Martin-Löf's Type Theory\" by Nordström, Petersson and Smith, the chapter on dependent types in \"Advanced Topics in Types and Programming Languages\" (chapter 2, by Aspinall and Hofmann), or \"The Little Typer\" that I wrote with Dan Friedman. What works for you will depend a lot on your background, goals, and learning style.</p>",
        "id": 254859650,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1632594167
    },
    {
        "content": "<p>The first section of the homotopy type theory book is I think very good! Make sure you stop reading when they start talking about univalence, though. :-)</p>",
        "id": 254877568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632610948
    },
    {
        "content": "<p>It's quite pleasant to read if you're used to reading mathematics, and is describing a foundation that to a mathematician's eyes is \"close enough\" to Lean's.</p>",
        "id": 254877685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632611067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20interpreter.20for.20set.20theory.20.2B.20first.20order.20logic/near/254855070\">said</a>:</p>\n<blockquote>\n<p>Thank you. Are there any that aim at teaching the foundational theory of type theory and computing?</p>\n</blockquote>\n<p>See <a href=\"https://mathoverflow.net/questions/330873/good-introductory-book-to-type-theory\">Good introductory book to type theory?</a> on MathOverFlow.  However, as I said there, I personally think the getting one's hands dirty with a theorem prover is one of the better ways to learn type theory.</p>",
        "id": 254881584,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632615038
    },
    {
        "content": "<p>I was hoping for texts on type theory that had been formalized, but thank you.</p>",
        "id": 254882625,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632616119
    },
    {
        "content": "<p>Trying to learn type theory by formalizing type theory in type theory (or by studying formalizations of type theory in type theory) sounds like pretty much the most difficult possible way to go about it</p>",
        "id": 254884061,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632617673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20interpreter.20for.20set.20theory.20.2B.20first.20order.20logic/near/254852404\">said</a>:</p>\n<blockquote>\n<p>I guess I still feel like I'm stuck in a bit of a bootstrap issue, needing to learn type theory to use type theory to formalize my learning of type theory. This probably isn't unique to type theory, I would likely have the same issue with learning set theory using Metamath or Mizar. Probably what I am really looking for are more textbooks that use definitions, theorems and proofs that are already formalized, like Software Foundations in Coq. Are there more textbooks like that out there? Any hope that people are writing them?</p>\n</blockquote>\n<p>I not sure what \"use type theory to formalize my learning of type theory\" means, but I would caution against it.  Lean's type theory is a list of finite rules (plus axioms for classical mathematics).  They are not the same rules and axioms as first order logic, but is is still in the same spirit of finite symbol manipulation.  While it is not uncommon in metamathematics, to say use a first order theory like Peano arithmetic or ZFC set theory to prove properties about itself, however, I have a few observations about this approach: (1) One first learns Peano arithmetic (or ZFC) and how to use it for proofs, before one proves metamathematical properties about Peano arithmetic (or ZFC).  (2) Metamath of a system is much harder than learning that system.  (3) If one uses that same system to do the metamath (say using ZFC to prove stuff about the axioms of ZFC), then one quickly runs into Godel's incompleteness theorem.  The same would happen in Lean.</p>\n<p>Also dependent type theory is sort of like a program language.  While it is possible to say write a Java compiler in Java, this is not how one usually learns Java.   And while it is common to have a CS course where one writes a Scheme interpreter in Scheme, I would still argue that learning Scheme comes far earlier in that course that using Scheme to construct Scheme, and the point of that course isn't to learn Scheme, but to learn programming language theory.  (Even Turing's paper first developed Turing machines and some examples before using Turing machines to run Turing machines.)</p>\n<p>Specifically for Lean, I can't imagine what formalizing your learning of type theory would mean except to build your own proof checker, or at least parts of it.  This is not easy at all, but is doable and others have done it.  To do this one would have to really understand the foundations of Lean, like the full details of expressions and the Lean export format.  Also, this is usually coded in another language like C++, Rust, Haskell, etc.  Lean4 does have a proof checker written in Lean4, but I don't know if there is one not using <code>unsafe</code> code.  While one could also theoretically do all or most of this in pure safe Lean, it would be a lot of work getting all the data types to work etc.  More than that, what would you be proving about Lean?  While Mario's thesis is devoted to the meta theory of Lean (including its consistency), none of that is needed to know how to use Lean.  And most or none of it is formalized.  Formalizing Mario's thesis would itself be a thesis.</p>",
        "id": 254884094,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632617708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20interpreter.20for.20set.20theory.20.2B.20first.20order.20logic/near/254884061\">said</a>:</p>\n<blockquote>\n<p>Trying to learn type theory by formalizing type theory in type theory (or by studying formalizations of type theory in type theory) sounds like pretty much the most difficult possible way to go about it</p>\n</blockquote>\n<p>I need to learn to be more succinct.</p>",
        "id": 254884125,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632617755
    },
    {
        "content": "<p>I was thinking about the \"learn X by writing a compiler for X in X\" analogy also.</p>",
        "id": 254884534,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632618109
    },
    {
        "content": "<p>I'm also going to hedge my above comments.  If for example, if there is a book doing this for Coq (I don't know what is in <em>Software Foundations</em> for example), this surprises me less than if one existed for Lean.  The reason is that Coq is more often used to prove properties of algorithms than Lean.  Right now Lean is used more to prove mathematical theorems found in pure math.  So if this does exist in Coq (and I'm not saying it does) and you really want to learn it this way, I would recommend leaning Coq first.  Then learning Lean should be far easier.</p>",
        "id": 254884732,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632618277
    },
    {
        "content": "<p>I didn't mean that Software Foundations tries to teach the meta theory of Coq, just that it was an example of a formalized text, in the sense that the examples are actual proofs in Coq.</p>",
        "id": 254885086,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632618645
    },
    {
        "content": "<p>Aren't the examples in TPIL (or any Lean tutorial) also actually proofs in Lean?</p>",
        "id": 254885107,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632618682
    },
    {
        "content": "<p>I didn't mean to ask, is there something like SF for Lean, but instead, is there something like SF that teaches type theory.</p>",
        "id": 254885231,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632618817
    },
    {
        "content": "<p>Ok, so you want a math text about type theory as a mathematical subject where all the theorems are formally proved, but it is also a readable introduction to the subject?  I'm pretty sure your could replace \"type theory\" with almost any subject and you would get a negative answer.  This is asking a lot.  There are research papers formally proving properties of say Coq or HOL Light's foundations in Coq or HOL Light, but they are advanced research papers, not introductory texts.</p>",
        "id": 254885448,
        "sender_full_name": "Jason Rute",
        "timestamp": 1632619043
    },
    {
        "content": "<p>Yes, basically, I think. This is sort of the goal of using Lean for teaching though right? So it is something being developed?</p>",
        "id": 254885645,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632619256
    },
    {
        "content": "<p>What Jason said except the text is even more unlikely to exist because I would expect most potential authors to think this is a pedagogically unsound approach to learning type theory, e.g., it is likely to create confusion between the object level and the meta level in addition to the points Jason made earlier.</p>",
        "id": 254885740,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632619344
    },
    {
        "content": "<p>People who are interested in using Lean for teaching aren't using it to teach the syntax of type theory as an object-level theory. (For one thing, people who are into that sort of thing are mostly using other proof assistants.)</p>",
        "id": 254885865,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632619487
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/tutorials\">Here's an example of Lean for teaching</a> I believe, and it's about basic real analysis, not type theory.  I've heard a few anecdotes about teaching with Lean where type theory itself had been successfully ignored.  I guess this is sort of like how in most math courses (undergraduate and graduate) ZFC is never even mentioned.</p>",
        "id": 254886006,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632619646
    },
    {
        "content": "<p>They're using it to teach: either ordinary object-level mathematics, like real analysis or <code>a + b = b + a</code>; or \"what is a proof\" / \"what does it mean to prove something\"--but in the ordinary sense, not in the sense of how can we regard the syntax of a proof as a mathematical object itself.</p>",
        "id": 254886073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632619698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20interpreter.20for.20set.20theory.20.2B.20first.20order.20logic/near/254884732\">said</a>:</p>\n<blockquote>\n<p>I'm also going to hedge my above comments.  If for example, if there is a book doing this for Coq (I don't know what is in <em>Software Foundations</em> for example), this surprises me less than if one existed for Lean.  The reason is that Coq is more often used to prove properties of algorithms than Lean.</p>\n</blockquote>\n<p>While I think that this is more likely for Coq, it is also more likely to be a formalization of only a fragment of Coq; full Coq is quite a bit more complicated than Lean, and an analogue of my thesis for Coq is, as far as I know, still an open problem (although there are some formalizations that get close, in particular \"Coq Coq Correct!\")</p>",
        "id": 254886085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632619718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20interpreter.20for.20set.20theory.20.2B.20first.20order.20logic/near/254885865\">said</a>:</p>\n<blockquote>\n<p>People who are interested in using Lean for teaching aren't using it to teach the syntax of type theory as an object-level theory. (For one thing, people who are into that sort of thing are mostly using other proof assistants.)</p>\n</blockquote>\n<p>So there are people out there doing this sort of thing, just using other proof assistants?</p>",
        "id": 254886262,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632619902
    },
    {
        "content": "<p>Do you run into the issue that you then have to check the meta theory, and then the meta meta theory...</p>",
        "id": 254886390,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632620041
    },
    {
        "content": "<p>e.g. there is <a href=\"https://www.cs.nott.ac.uk/~psztxa/publ/tt-in-tt.pdf\">https://www.cs.nott.ac.uk/~psztxa/publ/tt-in-tt.pdf</a></p>",
        "id": 254886997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632620588
    },
    {
        "content": "<p>or <a href=\"http://www2.tcs.ifi.lmu.de/~abel/popl18.pdf\">http://www2.tcs.ifi.lmu.de/~abel/popl18.pdf</a></p>",
        "id": 254887751,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632621321
    },
    {
        "content": "<p>Interesting. Do you think there is similar material at an introductory teaching level?</p>",
        "id": 254888528,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632621979
    },
    {
        "content": "<p>Doesn't software foundations cover lambda calculus?</p>",
        "id": 254888636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632622085
    },
    {
        "content": "<p>If you want formalized DTT I don't think you can get much simpler than Altenkirch's article</p>",
        "id": 254888657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632622116
    },
    {
        "content": "<p>and quite frankly there is no way you can read that article unless you have a very strong grasp of type theory already</p>",
        "id": 254888765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632622207
    },
    {
        "content": "<p>Yes, SF covers lambda calculus, but I think stops at the STLC, at least from what I gather from the table of contents.</p>",
        "id": 254888910,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632622367
    },
    {
        "content": "<p>At the moment I've started going through \"Types and Programming Languages\", which I think goes further, but is not formalized.</p>",
        "id": 254889031,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632622472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20interpreter.20for.20set.20theory.20.2B.20first.20order.20logic/near/254853403\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover.github.io/logic_and_proof/\">https://leanprover.github.io/logic_and_proof/</a><br>\n<a href=\"https://github.com/blanchette/logical_verification_2020\">https://github.com/blanchette/logical_verification_2020</a><br>\n<a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics\">https://github.com/ImperialCollegeLondon/formalising-mathematics</a></p>\n</blockquote>\n<p>+1 for <a href=\"https://github.com/blanchette/logical_verification_2020\">https://github.com/blanchette/logical_verification_2020</a> for a great lean specific educational resource (along these lines, which  I interpret as “more CSy but with real math still“)</p>",
        "id": 254931706,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1632663108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20interpreter.20for.20set.20theory.20.2B.20first.20order.20logic/near/254931706\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20interpreter.20for.20set.20theory.20.2B.20first.20order.20logic/near/254853403\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover.github.io/logic_and_proof/\">https://leanprover.github.io/logic_and_proof/</a><br>\n<a href=\"https://github.com/blanchette/logical_verification_2020\">https://github.com/blanchette/logical_verification_2020</a><br>\n<a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics\">https://github.com/ImperialCollegeLondon/formalising-mathematics</a></p>\n</blockquote>\n<p>+1 for <a href=\"https://github.com/blanchette/logical_verification_2020\">https://github.com/blanchette/logical_verification_2020</a> for a great lean specific educational resource (along these lines, which  I interpret as “more CSy but with real math still“)</p>\n</blockquote>\n<p>Be sure to check out the <a href=\"https://lean-forward.github.io/logical-verification/2020/\">website</a> for recorded lectures and some bonus information!</p>",
        "id": 254964141,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1632692361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/An.20interpreter.20for.20set.20theory.20.2B.20first.20order.20logic/near/254830551\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> If you are just formalizing regular mathematics (i.e. not ZFC set theory), then usually the translation isn't too difficult when you get the hang of it.  I'd recommend looking at the conversation at the end of <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Type.20theory.20of.20Lean\">#general &gt; Type theory of Lean</a>.</p>\n</blockquote>\n<p>Supposing I did want to formalize ZFC set theory, does it make sense to do so in Lean?</p>",
        "id": 254975405,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632703077
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set/src\">src#Set</a></p>",
        "id": 254977590,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632705176
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254981587,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632708697
    },
    {
        "content": "<p>Is the full power of the calculus of constructions needed to formalize set theory and first order logic with equality? What is the simplest extension to the simply typed lambda calculus that is necessary to formalize most set theory based math? Lambda P?</p>",
        "id": 254988246,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632714881
    },
    {
        "content": "<p>See previous discussion at <a href=\"#narrow/stream/113489-new-members/topic/inductive.20types.20.3D.20set.20theory.3F\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/inductive.20types.20.3D.20set.20theory.3F</a></p>",
        "id": 254988796,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632715272
    },
    {
        "content": "<p>I'm not sure if I am asking the same thing. I don't think I mean what is the minimum lambda calculus to have the same power as zfc. I'm saying for example, did the author of the formalization of the book linked above need to full power of Coq, or could everything he stated and proved have been done with something simpler, like Lambda P. That is, could a simpler lambda calculus be used to encode first order logic with equality and formalize the axioms of zfc.</p>",
        "id": 254989664,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632715919
    },
    {
        "content": "<p>From which then most of math can be done?</p>",
        "id": 254989735,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632715964
    },
    {
        "content": "<p>Maybe the questions end up equating because in order to formalize the axioms of zfc, you need to same power as zfc?</p>",
        "id": 254989776,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632716030
    },
    {
        "content": "<p>I guess put another way, can you use less type theory and do the same amount of math by using the axioms of zfc instead of inductive types.</p>",
        "id": 254989888,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632716131
    },
    {
        "content": "<p>Of course. You don't need to do everything in type theory, and there are proof assistants based on set theory and the axioms of ZFC (<a href=\"http://us.metamath.org/mpeuni/mmset.html\">metamath</a> being the one I am most familiar with), and in those proof assistants \"types\" are a tacked-on notion at best, and are not at all foundational. Inductive types are constructed, not axiomatized, and you can prove the existence of a large class of inductive types in ZFC, similar to what lean implements \"by fiat\".</p>",
        "id": 254998657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632723568
    },
    {
        "content": "<p>The underlying foundation of a proof assistant is actually one of the less important reasons to pick one proof assistant over another. All foundations in common use are \"good enough\" for \"most\" math. The real differences are in the user interface, support for metaprogramming or tactics, and editor integration. <em>That's</em> where all the person-years of effort goes.</p>",
        "id": 254998885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632723711
    },
    {
        "content": "<p>Is Lambda P powerful enough to encode equality?</p>",
        "id": 255106099,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632770914
    },
    {
        "content": "<p>That is, suppose that I want to code a simple proof checker, and I want to use the Curry Howard isomorphism for the logic and the statements of the axioms of set theory for the math. I believe that I need types that depend on terms to encode forall and exists, which is given by lambda P. Does lambda P give me equality as well, or do I need the full calculus of constructions to get it?</p>",
        "id": 255150637,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632795307
    },
    {
        "content": "<p>I don't think even CoC gives you equality unless you add it explicitly</p>",
        "id": 255151523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796092
    },
    {
        "content": "<p>Can I add it to just lambda P in the same way?</p>",
        "id": 255151600,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632796199
    },
    {
        "content": "<p>as long as you can express types depending on terms, then <code>Eq : A -&gt; A -&gt; Type</code> is expressible</p>",
        "id": 255151719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796268
    },
    {
        "content": "<p>What do I have to do to get the introduction and elimination rules for it?</p>",
        "id": 255151804,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632796333
    },
    {
        "content": "<p>you just axiomatize them</p>",
        "id": 255152084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796585
    },
    {
        "content": "<p>I see. Is that tricky, to axiomatize the substitution?</p>",
        "id": 255152240,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632796715
    },
    {
        "content": "<p>Just take a look at the axioms for <code>Eq</code> in lean</p>",
        "id": 255152397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796856
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">Eq.refl</span>\n<span class=\"c1\">-- constructor Eq.refl.{u} : ∀ {α : Sort u} (a : α), a = a</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Eq.subst</span>\n<span class=\"c1\">-- theorem Eq.subst.{u} : ∀ {α : Sort u} {motive : α → Prop} {a b : α}, a = b → motive a → motive b</span>\n</code></pre></div>",
        "id": 255152516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796952
    },
    {
        "content": "<p>I think I see. I'll give it a try. Thank you.</p>",
        "id": 255152862,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1632797199
    },
    {
        "content": "<p>Well actulaly <code>Eq.subst</code> isn't an axiom, right? It's a consequence of the recursor. Or did that change in Lean 4?</p>",
        "id": 255161866,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632805316
    },
    {
        "content": "<p>You are correct, but <code>Eq.rec</code> has a complicated type and it's not necessary to make the point, especially if you don't have a complicated type system</p>",
        "id": 255162064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632805481
    }
]