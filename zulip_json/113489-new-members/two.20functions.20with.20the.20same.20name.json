[
    {
        "content": "<p>Is there a reason why lean doesn't let me make two functions with the same name? Even if they take different arguments?</p>",
        "id": 131229114,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533896547
    },
    {
        "content": "<p>It's confusing, and could even lead to people thinking they've proved something, when they've actually proved something about a function with the same name. You can always use namespaces.</p>",
        "id": 131229303,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533896825
    },
    {
        "content": "<p>You can have two functions in different namespaces with the same name, where both namespaces are open at once, and lean will use the type to disambiguate</p>",
        "id": 131229312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533896871
    },
    {
        "content": "<p>The basic reason why is because lean needs a name for the function, one that is not ambiguous, and if you overload it what will that name be? How can you refer to it precisely?</p>",
        "id": 131229383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533896966
    },
    {
        "content": "<p>I know I should be using Pi types for this sort of thing, but my two functions take in a different amount of arguments, so I think I might have to use if then else.</p>",
        "id": 131229559,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533897173
    },
    {
        "content": "<p>You can also use default values and optional arguments to make a single definition have varying number of arguments</p>",
        "id": 131229802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533897542
    },
    {
        "content": "<p>Also note that <code>+</code> is kind of like several functions with the same name -- and looking at the types of the inputs is exactly how Lean decides which function to actually use.</p>",
        "id": 131233997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533903739
    }
]