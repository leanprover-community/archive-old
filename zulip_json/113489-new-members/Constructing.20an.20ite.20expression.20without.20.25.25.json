[
    {
        "content": "<p>I entered the following code to construct an ite expression in a meta def:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">xeval</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">b</span><span class=\"bp\">.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">beq_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">beq_nat</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">evaluate_xeval_helper</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">xeval</span> <span class=\"err\">%%</span><span class=\"n\">x</span> <span class=\"err\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ite</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">beq_nat</span><span class=\"o\">)))</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n                     <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n                     <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>The word \"ite\" gets the error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">evaluate_xeval_helper</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">level</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"err\">⊢</span> <span class=\"n\">reflected</span> <span class=\"n\">ite</span>\n</pre></div>\n\n\n<p>How do I fix this error?</p>",
        "id": 130183355,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532394658
    },
    {
        "content": "<p>The error is because the universe parameter of <code>ite</code> could not be inferred. If you use the full quotation</p>\n<div class=\"codehilite\"><pre><span></span>`(if beq_nat %%x 0 then (0 : nat) else %%y)\n</pre></div>\n\n\n<p>it should work</p>",
        "id": 130244278,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1532474400
    }
]