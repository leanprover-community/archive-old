[
    {
        "content": "<p>I have a type <code>T</code> and a fixed predicate <code>P: T -&gt; Prop</code>. Can I make a type X, so that <code>x: X</code> implies <code>x: T and P(x)</code>?</p>\n<p>I guess composition can be used to achieve that, but I would need to use <code>x.t</code> to get the underlying <code>T</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">))</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x.t</span> <span class=\"mi\">10</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>Are there ways so that X is automatically casted to T?<br>\nI don't feel type classes help much, compared to just requiring P as hyptothesis.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">10</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>Can I somehow state <code>{ x: X }</code> and obtain <code>{ x: T } [X t]</code>?</p>",
        "id": 215312671,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1604320851
    },
    {
        "content": "<p>I think you are looking for subtypes: <code>{x : T // P x}</code></p>",
        "id": 215312873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604320978
    },
    {
        "content": "<p>Checkout <code>subtype P</code></p>",
        "id": 215312880,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604320985
    },
    {
        "content": "<p>Or, without notation <code>subtype P</code>.</p>",
        "id": 215312914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604321001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234196\">Henning Dieterichs</span> <a href=\"#narrow/stream/113489-new-members/topic/type.20constraints/near/215312671\">said</a>:</p>\n<blockquote>\n<p>I have a type <code>T</code> and a fixed predicate <code>P: T -&gt; Prop</code>. Can I make a type X, so that <code>x: X</code> implies <code>x: T and P(x)</code>?</p>\n</blockquote>\n<p>You cannot have <code>x : X</code> implies <code>x : _</code>. A term has 1 type (up to definitional equality). Also, you cannot <em>prove</em> that <code>x</code> has type <code>X</code> or type <code>T</code>. It can only be <em>checked</em> by the type checker.</p>",
        "id": 215313130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604321129
    },
    {
        "content": "<p>Thanks, subtype is exactly what I was looking for!</p>",
        "id": 215314260,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1604321722
    }
]