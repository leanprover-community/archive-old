[
    {
        "content": "<p>Welcome! I guess you're talking about the paper <a href=\"http://leodemoura.github.io/files/ematching.pdf\">\"Efficient E-matching for SMT Solvers\"</a>? I'm probably not the right person to try to answer your question but maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> can help.</p>",
        "id": 231224127,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616341937
    },
    {
        "content": "<p>What are e-graphs? Maybe I know them by another name, but that doesn't ring a bell</p>",
        "id": 231224154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616341994
    },
    {
        "content": "<p>Chiming here - would also be interested in knowing about egraph use in Lean. I take it the pattern matcher for tactics got an algorithmkc overhaul from Lean 3</p>",
        "id": 232114940,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1616875669
    },
    {
        "content": "<p>Bump. Does the synbolic rewriter in <code>rfl</code> use a particular algorithm for egraphs?</p>",
        "id": 234073628,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618173181
    },
    {
        "content": "<p>If one wanted to add tactics similar to RUBI, would that be by overloading <code>simp</code>?</p>",
        "id": 234073686,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618173226
    },
    {
        "content": "<p><a href=\"https://rulebasedintegration.org/\">https://rulebasedintegration.org/</a></p>",
        "id": 234073925,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618173438
    },
    {
        "content": "<p>What do you mean by the symbolic rewriter in <code>rfl</code>?</p>",
        "id": 234077371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618176154
    },
    {
        "content": "<p><code>rfl</code> is just a shorthand for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq.refl\">docs#eq.refl</a>, a constructor for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq\">docs#eq</a></p>",
        "id": 234077398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618176192
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 234090168,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618189641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> here's waht I understand:</p>\n<ol>\n<li>Lean4 has a \"symbolic\" rewriter for terms in the goals<br>\nFrom the manual:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- You can prove theorems about your functions.</span>\n<span class=\"c1\">-- The following theorem states that for any natural number `a`,</span>\n<span class=\"c1\">-- adding 2 twice produces a value equal to `a + 4`.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">twiceAdd2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">twice</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- The proof is by reflexivity. Lean \"symbolically\" reduces both sides of the equality</span>\n  <span class=\"c1\">-- until they are identical.</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>the <code>eq.refl</code> you pointed to is in mathlib, aka Lean3.</li>\n<li>In RUBI, the symbolic term rewriter is crucial for performance and solvability of integration problems.</li>\n<li>Leo published a fundamental paper of egraphs for symbolic term rewriting, and <span class=\"user-mention\" data-user-id=\"399443\">@Alessandro</span> and I are wondering if that was implemented as the symbolic term rewriter in Lean4.</li>\n</ol>",
        "id": 234090401,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618189861
    },
    {
        "content": "<p>Lean 4's rfl is the same as lean 3's rfl. It's not a \"symbolic rewriter\", it compares values up to a relation called definitional equality</p>",
        "id": 234090435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618189902
    },
    {
        "content": "<p>Thanks Mario, nice to see you around here too :D</p>",
        "id": 234090480,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618189925
    },
    {
        "content": "<p>which involves weakly normalizing both sides to a constructor</p>",
        "id": 234090497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618189938
    },
    {
        "content": "<p>I am everywhere</p>",
        "id": 234090504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618189950
    },
    {
        "content": "<p>Well I'm bringing this up because I'm \"close\" <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span>  to porting RUBI to Julia, and from there porting RUBI to Lean wouldn't be \"that much\" additional effort. I would want to know which tactic I could dump a <code>lhs = rhs</code> ruleset, if at all feasible.</p>",
        "id": 234090560,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190038
    },
    {
        "content": "<p>As far as I know, nothing about egraphs or symbolic term rewriting is involved in the implementation of rfl and/or defeq in any version of lean. This is much more based on literature on dependent type theory, reduction and strong normalization stuff</p>",
        "id": 234090628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190077
    },
    {
        "content": "<p>Oh neat.</p>",
        "id": 234090639,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190100
    },
    {
        "content": "<p>However, you will find more of leo's creativity in the <code>simp</code> tactic, which does symbolic term rewriting closer to what you are talking about</p>",
        "id": 234090665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190120
    },
    {
        "content": "<p>Ah, that's the one. So I could in theory overload <code>simp</code> with a bunch of these integration rules, right?</p>",
        "id": 234090678,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190141
    },
    {
        "content": "<p>yes</p>",
        "id": 234090694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190163
    },
    {
        "content": "<p>We've done that for derivatives in mathlib</p>",
        "id": 234090733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190177
    },
    {
        "content": "<p>I think integration too but I guess the coverage is lower</p>",
        "id": 234090750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190198
    },
    {
        "content": "<p>its ability to pattern match on lambdas is limited though, so most likely you would do a full integration routine as a dedicated tactic</p>",
        "id": 234090774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190244
    },
    {
        "content": "<p>Ouch.</p>",
        "id": 234090786,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190258
    },
    {
        "content": "<p>I mean, it's pretty hard to recognize that in the function <code>\\lam x, sin x * (2 / cos x)</code> you want to pull out the constant factor 2 (let's say this is a preprocessing step)</p>",
        "id": 234090969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190456
    },
    {
        "content": "<p>you would have a huge number of possible patterns to look for to find the 2</p>",
        "id": 234091006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190477
    },
    {
        "content": "<p>Yup, that's a transformation that egraphs can achieve linear in the number of patterns that match, without running into the phase ordering problem of some transformations will bork others.</p>\n<p>Hence why we're asking :D</p>",
        "id": 234091025,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190520
    },
    {
        "content": "<p>This is a good overview (that I'm still becoming familiar with myself)<br>\n<a href=\"https://egraphs-good.github.io/\">https://egraphs-good.github.io/</a></p>",
        "id": 234091071,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618190538
    },
    {
        "content": "<p>I don't think I have seen anything like this implemented in lean</p>",
        "id": 234091215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190730
    },
    {
        "content": "<p>It is possible to implement it yourself, of course</p>",
        "id": 234091224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190746
    },
    {
        "content": "<p>(in lean 3 or lean 4, although it's probably better suited for lean 4)</p>",
        "id": 234091267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618190765
    },
    {
        "content": "<p>Yeah, condolences to the mathlib crowd, I'm learning Lean4 - the garbage collector's too good to pass up <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
        "id": 234091839,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618191392
    },
    {
        "content": "<p>(And in fact it will probably do amazingly in the benchmarks what with the functional but in place style not generating tons of allocations in all the symbolic computations.)</p>",
        "id": 234091863,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1618191434
    },
    {
        "content": "<p>Bumping this thread to note a new <a href=\"https://arxiv.org/pdf/2108.02290.pdf\">work</a> which (claims to?) achieve exponential (!) speedups on e-matching queries in the egg library.</p>",
        "id": 268439754,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1642532542
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> 2022 <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 268442784,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642533924
    }
]