[
    {
        "content": "<p>There are many lemmas for <code>mul_equiv</code> that don't seem to exist for <code>add_equiv</code>. Is there some way of converting them, or can I use them somehow without duplicating them?</p>",
        "id": 206934225,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597414976
    },
    {
        "content": "<p>Can you give an example?</p>",
        "id": 206939871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597418114
    },
    {
        "content": "<p>There is <code>map_one</code>, saying that <code>mul_equiv</code> respects <code>1</code>, but I can't find the equivalent one in the additive case</p>",
        "id": 206940130,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597418281
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">mul_equiv</span><span class=\"bp\">.</span><span class=\"n\">map_one</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">add_equiv</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span>\n</code></pre></div>\n\n\n<p>Both work fine for me.</p>",
        "id": 206940273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597418348
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">map_one</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"err\">←</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>That <code>to_additive</code> attribute that the lemma is tagged with, means \"automatically generate the additive version and give it an appropriate name\"; you won't see the proof of the additive version explicitly in mathlib because it's auto-generated by the system.</p>",
        "id": 206940398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597418415
    },
    {
        "content": "<p>Ah, I see, thanks! I didn't expect that!</p>",
        "id": 206940538,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597418505
    },
    {
        "content": "<p>Attributes are some of the hardest things to figure out in Lean. They are not particuarly well documented. When you type <code>@[foo] lemma bar ...</code> then all this means that Lean tags <code>bar</code> with the <code>foo</code> attribute. Some of these attributes are little more than labels, e.g. tagging something with <code>simp</code> just says \"simplifier, use me if you need me\", but other tags actually make stuff happen on the spot. We should have a list somewhere. Is there a list somewhere? I've just picked them up from seeing them so many times.</p>",
        "id": 206940768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597418629
    },
    {
        "content": "<p>Are they builtins? Or is there e.g. some fancy metaprogram that generates the additive version if it sees such a tag?</p>",
        "id": 206942242,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597419352
    },
    {
        "content": "<p>There are both kinds, but <code>to_additive</code> is implemented in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_additive.attr/src\">src#to_additive.attr</a></p>",
        "id": 206942882,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597419662
    },
    {
        "content": "<p>More precisely: <code>@[foo] lemma bar</code> means that once <code>lemma bar</code> is parsed and added to the environment, Lean will run the function associated with attribute <code>foo</code>. This function can do whatever it wants. <code>to_additive</code> parses both declaration and definition of its argument and tries to generate the corresponding lemma/def with all <code>*</code> replaced with <code>+</code> etc.</p>",
        "id": 206949280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597423013
    },
    {
        "content": "<p>There is a doc page on <code>to_additive</code> now (suggestions welcome!): <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#to_additive\">https://leanprover-community.github.io/mathlib_docs/attributes.html#to_additive</a></p>",
        "id": 206949550,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597423156
    }
]