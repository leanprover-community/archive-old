[
    {
        "content": "<p>I need a theorem that says that coercions from the integers into an additive monoid is an additive monoid homomorphism. I only found the corresponding theorem from the naturals however, is there any for the integers in mathlib?</p>",
        "id": 160946052,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1552732413
    },
    {
        "content": "<p>you can't coerce the integers into an additive monoid (where does -1 go to?)</p>",
        "id": 160946115,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552732524
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span>\n<span class=\"c1\">-- int.cast_add : ∀ {α : Type u_1} [_inst_1 : add_group α] [_inst_2 : has_one α] (m n : ℤ), ↑(m + n) = ↑m + ↑n</span>\n</pre></div>",
        "id": 160946119,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552732540
    },
    {
        "content": "<p>ah, so I should look for add_group_hom instead?</p>",
        "id": 160946171,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1552732613
    },
    {
        "content": "<p>oh wait I do need is_add_monoid_hom</p>",
        "id": 160946244,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1552732742
    },
    {
        "content": "<p>Basically I have this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span><span class=\"n\">b_1</span> <span class=\"o\">:</span>\n       <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span>\n       <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">b_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">digit</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">b_1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">b_1</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span> <span class=\"err\">∈</span>\n    <span class=\"n\">at_top</span><span class=\"bp\">.</span><span class=\"n\">sets</span>\n</pre></div>\n\n\n<p>and I want to apply sum_hom to move the coercion out of the sum, but this requires that the coercion is an add_monoid_hom</p>",
        "id": 160946313,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1552732836
    },
    {
        "content": "<p>is there some other theorem that accomplishes this?</p>",
        "id": 160946324,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1552732872
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">asdf</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 160946382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552732975
    },
    {
        "content": "<p>wait now Im confused, how does this work?</p>",
        "id": 160946441,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1552733093
    },
    {
        "content": "<p>this tells Lean that int.cast is an add_monoid_hom</p>",
        "id": 160946458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552733125
    },
    {
        "content": "<p>I was just confused for a second since you said integers cant be mapped into an additive monoid, but I missed that you mapped them into a group.</p>",
        "id": 160946579,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1552733303
    },
    {
        "content": "<p>Thank you by the way</p>",
        "id": 160946581,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1552733309
    },
    {
        "content": "<p>That instance should be in mathlib I guess</p>",
        "id": 160948232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552736424
    },
    {
        "content": "<p>Isn't there an instance for group homs already? I would expect it to be there....</p>",
        "id": 160949676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552739211
    }
]