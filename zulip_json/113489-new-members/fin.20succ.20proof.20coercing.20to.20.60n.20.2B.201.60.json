[
    {
        "content": "<p>Is there some <code>fin n</code> coercion lemma that is missing? Or should I be using <code>fin.cast_succ</code>? In the following proof. I don't know how to remove <code>% (n + 1)</code> even if I have a hypothesis of <code>i &lt; n</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">],</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">],</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  case nat.succ, nat.succ</span>\n<span class=\"cm\">  k n : ℕ,</span>\n<span class=\"cm\">  hk : ∀ (h : k &lt; n.succ), ↑⟨k, h⟩ + 1 = ⟨k, h⟩.succ,</span>\n<span class=\"cm\">  h : k.succ &lt; n.succ</span>\n<span class=\"cm\">  ⊢ ↑k + 1 + 1 = ⟨k.succ.succ, _⟩</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205281782,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1595965610
    },
    {
        "content": "<p>Even this is confusing me. I'm unable to use <code>h</code> with <code>hi</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205284990,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1595967351
    },
    {
        "content": "<p>I don't think you need induction to prove this. There's bound to be a lemma in the library saying that if i&lt;j then i%j=i, it will be called mod_lt or something</p>",
        "id": 205288990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595969308
    },
    {
        "content": "<p>the code you posted doesn't say anything about <code>%</code></p>",
        "id": 205289202,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595969433
    },
    {
        "content": "<p>Addition on fin uses % IIRC</p>",
        "id": 205289530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595969617
    },
    {
        "content": "<p>I would avoid the cast from <code>nat</code> to <code>fin (n+1)</code>. It isn't \"nice\" (imho)</p>",
        "id": 205290226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595969994
    },
    {
        "content": "<p>But if you really need to, you can do it. The file <code>zmod.lean</code> will show you how to deal with it.</p>",
        "id": 205290318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595970028
    },
    {
        "content": "<p>I had to guess that the lemma I wanted started with <code>fin.coe_</code>. I spent about a minute trying other things before making this guess.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_coe_of_lt</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205290600,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595970207
    }
]