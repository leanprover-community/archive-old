[
    {
        "content": "<p>Is it just my impression, or the theory around arrays is not much developed yet? Or is there some modern replacement of arrays? I wanted to prove that array.foldl has certain value by exact description of the values during the folding process. I concluded that I would need a lemma like <code>foldl_inits_eq</code> in the following code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">array</span><span class=\"bp\">.</span><span class=\"n\">simple_take</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⟨λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span> <span class=\"n\">h</span><span class=\"bp\">⟩⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">foldl_inits</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">simple_take</span> <span class=\"n\">k</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">foldl_inits_eq</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">f2</span> <span class=\"mi\">0</span> <span class=\"n\">bot_le</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">f2</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span><span class=\"o\">)))</span> <span class=\"bp\">→</span>\n  <span class=\"n\">f2</span> <span class=\"bp\">=</span> <span class=\"n\">foldl_inits</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>(note I use my own <code>array.simple_take</code> instead of <code>array.take</code> just because it is easier to handle in proofs).<br>\nI almost managed to prove it up to a lemma</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fold_step</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a1</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">a2</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">a2</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a2</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">n</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">b</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I guess I need to analyze the cases of <code>d_array.iterate_aux</code>, but I am not sure how to do that. Or would it be easier to prove <code>foldl_inits_eq</code> through lists?</p>",
        "id": 192956135,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088147
    },
    {
        "content": "<p>what are you trying to prove?</p>",
        "id": 192956158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586088230
    },
    {
        "content": "<p>working with arrays is somewhat painful due to all the dependencies and mutable state. If you can recast the theorem in terms of lists it will be easier to prove</p>",
        "id": 192956216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586088294
    },
    {
        "content": "<p>From the higher perspective, still the IMO problem about lamps, C4 in <a href=\"http://imo-official.org/problems/IMO2008SL.pdf\" title=\"http://imo-official.org/problems/IMO2008SL.pdf\">http://imo-official.org/problems/IMO2008SL.pdf</a></p>",
        "id": 192956294,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088371
    },
    {
        "content": "<p>there is no way that IMO said anything about arrays</p>",
        "id": 192956306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586088406
    },
    {
        "content": "<p>Well, it counts sequences of certain lengths that satisfy certain properties.</p>",
        "id": 192956319,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088450
    },
    {
        "content": "<p>So I interpretted them as arrays and counted them with <code>fintype.card</code></p>",
        "id": 192956372,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088503
    },
    {
        "content": "<p>Which is harder with lists where proving finiteness would be more challenging, I guess.</p>",
        "id": 192956405,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088597
    },
    {
        "content": "<p>finiteness of lists is trivial</p>",
        "id": 192956452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586088619
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 192956467,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088650
    },
    {
        "content": "<p>lists are finite. done</p>",
        "id": 192956469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586088656
    },
    {
        "content": "<p>I mean that the number of all lists of certain length is finite (if the original type is also finite)</p>",
        "id": 192956484,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088693
    },
    {
        "content": "<p>There is a theorem about that</p>",
        "id": 192956492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586088712
    },
    {
        "content": "<p>But why would I use lists anyway, when the problem discusses only sequences of fixed length?</p>",
        "id": 192956530,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088726
    },
    {
        "content": "<p>It is much more array-like.</p>",
        "id": 192956535,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088739
    },
    {
        "content": "<p>array is just a wrapper around <code>fin n -&gt; A</code></p>",
        "id": 192956560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586088769
    },
    {
        "content": "<p>I know.</p>",
        "id": 192956563,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088779
    },
    {
        "content": "<p>What representation is best depends on what you need to prove about them</p>",
        "id": 192956583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586088815
    },
    {
        "content": "<p>Well, the sequences describe a certain process.</p>",
        "id": 192956638,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088863
    },
    {
        "content": "<p>Why don't you trust the list API?</p>",
        "id": 192956650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586088907
    },
    {
        "content": "<p>What do you mean by trusting list API?</p>",
        "id": 192956666,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586088949
    },
    {
        "content": "<p>there are theorems about all the things you are talking about</p>",
        "id": 192956708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586088965
    },
    {
        "content": "<p>if you want fixed length, just assert <code>length l = n</code></p>",
        "id": 192956719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586088987
    },
    {
        "content": "<p>Do I understand correctly that you would recommend using lists because they are more developed, even for fixed-size sequences?</p>",
        "id": 192956728,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586089002
    },
    {
        "content": "<p>Or maybe you could make a better array API. Remember though that this is different to programming. It doesn't matter if the implementation is inefficient from the point of view of computer science because you're reasoning about the code, not running it</p>",
        "id": 192956731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586089011
    },
    {
        "content": "<p>you know that <code>vector A n</code> is just a pair of a list and a proof that it has length <code>n</code></p>",
        "id": 192956748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586089033
    },
    {
        "content": "<p><code>array</code> is really geared towards efficient algorithms, so many of the functions are unnaturally limited like <code>map : (A -&gt; A) -&gt; array A n -&gt; array A n</code></p>",
        "id": 192956798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586089102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133339\">Miroslav Olšák</span> <a href=\"#narrow/stream/113489-new-members/topic/arrays/near/192956666\" title=\"#narrow/stream/113489-new-members/topic/arrays/near/192956666\">said</a>:</p>\n<blockquote>\n<p>What do you mean by trusting list API?</p>\n</blockquote>\n<p>I mean that data.list.basic contains 1000 theorems about lists including probably everything you want.</p>",
        "id": 192957732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586090621
    },
    {
        "content": "<p>Uff, the foldl parameters are completely reordered.</p>",
        "id": 192958259,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586091428
    },
    {
        "content": "<p>I've done a ton of mathematics in Lean and I've never once looked at foldl. What are you doing?</p>",
        "id": 192958326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586091504
    },
    {
        "content": "<p>Applying a sequence of steps to a state of lamps.</p>",
        "id": 192958413,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586091688
    },
    {
        "content": "<p>Look at the lamp problem (just the statement).</p>",
        "id": 192958418,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586091709
    },
    {
        "content": "<p>C4 in <a href=\"http://imo-official.org/problems/IMO2008SL.pdf\" title=\"http://imo-official.org/problems/IMO2008SL.pdf\">http://imo-official.org/problems/IMO2008SL.pdf</a></p>",
        "id": 192958470,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586091774
    },
    {
        "content": "<p>Now, I am trying to rewrite arrays to vectors.</p>",
        "id": 192958548,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586091864
    },
    {
        "content": "<p>It seems that vectors does not support <code>has_mem</code>, which is inconvenient.</p>",
        "id": 192958728,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586092159
    },
    {
        "content": "<p>you can write <code>a \\in v.1</code>, but what do you need it for?</p>",
        "id": 192958830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586092300
    },
    {
        "content": "<p>use <code>list.count</code> to find out how many lights are on</p>",
        "id": 192958837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586092313
    },
    {
        "content": "<p>One can formalise this question entirely in terms of lists.</p>",
        "id": 192958898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586092377
    },
    {
        "content": "<p>I used ∈ for a condition on the M-sequences that every switch is below n.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_M_seq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">lamp_switch_seq</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"o\">:=</span> <span class=\"n\">is_N_seq</span> <span class=\"n\">seq</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"err\">∈</span> <span class=\"n\">seq</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 192959201,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586092630
    },
    {
        "content": "<p>I defined it as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">lamp_switch_seq</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">lamp_switch_seq</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">seq</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>but the inconvience is that such cross-type manipulations are usually not so well supported by the library.</p>",
        "id": 192959266,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586092739
    },
    {
        "content": "<p>For example, with arrays, I could define the sequence by a function, and then immediatelly deduce <code>∃ si, seq.read si = l</code> from <code>l ∈ seq</code>. Now I can similarly create a vector from a function using <code>vector.of_fn</code> but the same deduction will take me some time.</p>",
        "id": 192959427,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586092956
    },
    {
        "content": "<p>Why don't you post your full formalisation of the question?</p>",
        "id": 192959439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586092975
    },
    {
        "content": "<p>Now it is complicated, I am in the middle of rewriting arrays to vectors.</p>",
        "id": 192959453,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586093005
    },
    {
        "content": "<p>I guess I will just send you the array version.</p>",
        "id": 192959470,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586093028
    },
    {
        "content": "<p>The partial formalisation using arrays: <a href=\"https://github.com/mirefek/my-lean-experiments/blob/master/lamps_array.lean\" title=\"https://github.com/mirefek/my-lean-experiments/blob/master/lamps_array.lean\">https://github.com/mirefek/my-lean-experiments/blob/master/lamps_array.lean</a><br>\nAttempt to prove something about array.foldl: <a href=\"https://github.com/mirefek/my-lean-experiments/blob/master/array_fold.lean\" title=\"https://github.com/mirefek/my-lean-experiments/blob/master/array_fold.lean\">https://github.com/mirefek/my-lean-experiments/blob/master/array_fold.lean</a></p>",
        "id": 192959666,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586093337
    },
    {
        "content": "<p>Yeah this is going to be hard to do with <code>array</code> I suspect. <code>array</code> is a type written for computer scientists, it seems to me -- it shows up a bunch in <code>meta</code> code. You need a type which is optimised for proving, not computing.</p>",
        "id": 192959757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586093500
    },
    {
        "content": "<p>Well, interpretting a fixed-size sequence as a function is in my opinion mathematical enough.</p>",
        "id": 192959885,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586093663
    },
    {
        "content": "<p>I like it more than some inductive construction of it :-).</p>",
        "id": 192959904,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586093706
    },
    {
        "content": "<p>Right but there is a non-mathematical issue as well, which is whether you should use a type optimised for computing or one optimised for proving, if you are going to write a proof.</p>",
        "id": 192959907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586093710
    },
    {
        "content": "<p>This is an implementation issue which mathematicians do not normally have to deal with.</p>",
        "id": 192959914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586093724
    },
    {
        "content": "<p>If you want to prove stuff by induction you should use <code>nat</code>. But if you want to prove <code>100000+200000=300000</code> then <code>nat</code> is a disaster because internally it's represented as some super-inefficient linked list or something.</p>",
        "id": 192959963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586093765
    },
    {
        "content": "<p>Conversely binary nats, namely <code>pos_num</code> (check out the definition) are super-efficient for doing arithmetic, but the moment you try and prove something by induction on them you find that your induction principle is \"if it's true for n then you need to prove it for 2n and 2n+1\"</p>",
        "id": 192959984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586093843
    },
    {
        "content": "<p>However as a mathematician you can't tell the difference between <code>pos_num</code> and <code>pnat</code> because they're both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{1,2,3,4,\\ldots\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">}</span></span></span></span></p>",
        "id": 192959991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586093872
    },
    {
        "content": "<p>If you are proving theorems then you should not be thinking at all about the definition of the structure, you should be thinking about what API is available, and the API will depend on (a) how much people have worked on it and (b) how easy it is to prove things about the object.</p>",
        "id": 192960048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586093969
    },
    {
        "content": "<p>The fact that you don't like some inductive construction of something should be irrelevant. What matters is not the definition of the thing, what matters is the API for the thing. If you formalise the question in terms of <code>array</code>s for some spurious reason then you are in trouble when you realise that there are no theorems in the API for arrays because they weren't designed to prove theorems.</p>",
        "id": 192960103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586094051
    },
    {
        "content": "<p>I get it, the inside obviously does not matter.</p>",
        "id": 192960121,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586094101
    },
    {
        "content": "<p>but</p>",
        "id": 192960123,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586094108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> how would you formalise these statements? There's this thread and there's <a href=\"#narrow/stream/113489-new-members/topic/grasshopper.20problem\" title=\"#narrow/stream/113489-new-members/topic/grasshopper.20problem\">this one</a>. Miroslav might have an easier time formalising the proofs if a Lean expert formalised the statements.</p>",
        "id": 192960169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586094154
    },
    {
        "content": "<p>but it makes sense to have the size inside the type in my case (so rather <code>vector</code> that <code>list</code>)</p>",
        "id": 192960258,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586094282
    },
    {
        "content": "<p>In one case, I wanted to quantify over all elements of the vector, but vector does not support <code>has_mem</code></p>",
        "id": 192960273,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586094324
    },
    {
        "content": "<p>it is convenient to give a description of the sequence using function (there is <code>vector.of_fn</code>, that is fine)</p>",
        "id": 192960326,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586094397
    },
    {
        "content": "<p>I know you are focussed on the fact that these lists all have the same size, but the size of the list is <code>k</code> which is a variable. So you can formalise a statement about a variable k and then a vector v whose length is k. Or you can just formalise a statement about a list. If the vectors all had length 3 I would understand your point of view.</p>",
        "id": 192960401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586094564
    },
    {
        "content": "<p>It feels to me that each of the structures lacks a bit of the interface for proving.</p>",
        "id": 192960449,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586094644
    },
    {
        "content": "<p>So you would have lamp_state as vectors, and lamp_switch_seq primarily as a list?</p>",
        "id": 192960543,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586094781
    },
    {
        "content": "<p>I would have everything as lists.</p>",
        "id": 192960634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586094878
    },
    {
        "content": "<p>uff</p>",
        "id": 192960648,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586094906
    },
    {
        "content": "<p>because data.list.basic is 5000 lines long</p>",
        "id": 192960655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586094924
    },
    {
        "content": "<p>Yes, it is highly a developed structure, just not the one suitable for the task :-D.</p>",
        "id": 192960717,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586094973
    },
    {
        "content": "<p>I think you don't have a good understanding of what being suitable for the task means in the context of theorem proving. But I might be wrong. That's why I'd be interested in Floris' opinion.</p>",
        "id": 192960739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586095021
    },
    {
        "content": "<p>I accept that vectors might be better. Alright, let's see what an expert thinks about it.</p>",
        "id": 192960800,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586095086
    },
    {
        "content": "<p>This conversation reminds me of when I was at a cryptography talk and the speaker said something like \"so what's another group with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span> elements besides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/p\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\">p</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>?\"</p>",
        "id": 192960815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586095124
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E(k)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 192960827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586095144
    },
    {
        "content": "<p>Here's one way to state the problem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">function</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">[]</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"n\">b</span>\n\n<span class=\"n\">def</span> <span class=\"n\">flip_one</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">update</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">admissible</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">flip_one</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n\n<span class=\"n\">def</span> <span class=\"n\">restricted_admissible</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">flip_one</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">end_state</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lamp_seq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">end_state</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">C4</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">lamp_seq</span> <span class=\"n\">admissible</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">lamp_seq</span> <span class=\"n\">restricted_admissible</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 192961890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586096748
    },
    {
        "content": "<p>How would you prove something about the <code>list.chain''</code>? For example that if <code>n = k</code>, then there exist an <code>admissible</code> sequence (simply switch n-th lamp in n-th step).</p>",
        "id": 192985164,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1586132558
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;_imp₂</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">R&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">R&#39;</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">P&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P&#39;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;</span> <span class=\"n\">R</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;</span> <span class=\"n\">R&#39;</span> <span class=\"n\">P&#39;</span> <span class=\"n\">l</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">P&#39;</span> <span class=\"n\">hP</span> <span class=\"o\">[]</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">hP</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">P&#39;</span> <span class=\"n\">hP</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;_imp₂</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">admissible_of_restricted</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">restricted_admissible</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">admissible</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_admissible_finset</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">∧</span>\n    <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;</span> <span class=\"n\">restricted_admissible</span>\n      <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">)))</span>\n      <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"o\">[],</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">l</span> <span class=\"n\">e</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨_::</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;_imp₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">IH</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_insert_of_not_mem</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">e</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">funext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">flip_one</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">update</span><span class=\"o\">],</span>\n      <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_restricted_admissible</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">lamp_seq</span> <span class=\"n\">restricted_admissible</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_admissible_finset</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨⟨_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;_imp₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">hl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">_</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">end_state</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_admissible</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">lamp_seq</span> <span class=\"n\">admissible</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_restricted_admissible</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain&#39;&#39;_imp₂</span> <span class=\"n\">admissible_of_restricted</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 192987722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586136713
    }
]