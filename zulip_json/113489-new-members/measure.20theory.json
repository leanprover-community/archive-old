[
    {
        "content": "<p>This is more of a mathematics question as the following code type checks. As a self-learner, hoping someone could help verify my definition of a measure space is mathematically correct.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">disjointed</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">countable</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span> <span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">closed_unions</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">measure&#39;</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"err\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonnegative</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">s</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">null_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"err\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">countable_additivity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∑&#39;</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 206892092,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597370940
    },
    {
        "content": "<p>I think for countable additivity you would want to assume that all <code>f i</code> are measurable for that to hold.</p>",
        "id": 206892872,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597372051
    },
    {
        "content": "<p>oh of course, good catch, thanks</p>",
        "id": 206893047,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597372258
    },
    {
        "content": "<p>I also think you would want the measure to be valued in <code>ennreal</code> which includes infinity, as there are measurable sets which have infinite measure.</p>",
        "id": 206893070,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597372312
    },
    {
        "content": "<p>right. hmm when I use <code>ennreal</code> then <code>∑'</code> stops working</p>",
        "id": 206893219,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597372526
    },
    {
        "content": "<p>ah I just need to <code>import topology.instances.ennreal</code></p>",
        "id": 206893548,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597373036
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">disjointed</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">countable</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">ennreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">ennreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span> <span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">closed_unions</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">measurable_space</span> <span class=\"err\">Ω</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">null_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"err\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">countable_additivity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∑&#39;</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">probability_space</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">measure_space</span> <span class=\"err\">Ω</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">unitarity</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206895104,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597375588
    },
    {
        "content": "<p>Another way to formulate the same assumption is <code>∀ S : set (set α), countable S → (∀ s ∈ S, is_measurable s) → is_measurable (⋃₀ S)</code></p>",
        "id": 206899384,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597382694
    },
    {
        "content": "<p>Here <code>⋃₀</code> is <code>set.sUnion</code>.</p>",
        "id": 206899400,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597382715
    },
    {
        "content": "<p>that is certainly more concise than what I have, thanks for the alternative</p>",
        "id": 206925928,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597409650
    },
    {
        "content": "<p>As far as I understand, the definition in <code>mathlib</code> uses families enumerated by natural numbers because it's easier to prove this for a given function <code>is_measurable</code>. The lemma <code>is_measurable.sUnion</code> says what I wrote above.</p>",
        "id": 206949545,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597423153
    },
    {
        "content": "<p>I'm trying to use the <code>ring</code> tactic to re-arrange an equation involving measures on measurable sets, e.g. show that <code>P.μ B = (P.μ A) + (P.μ (B \\ A))</code> is the same as <code>(P.μ A) = (P.μ B) - (P.μ (B \\ A))</code> where <code>P.μ</code> is a measure and <code>A B</code> are measurable sets. The ring tactic isn't working. The measure sends measurable sets to <code>ennreal</code> which is a commutative semiring so shouldn't the ring tactic work? Or is it because <code>P.μ B</code> is not a single term so it can't re-write it?</p>",
        "id": 206997396,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597452752
    },
    {
        "content": "<p>or should I just use <code>ennreal.​to_real</code> ?</p>",
        "id": 207000580,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597457658
    },
    {
        "content": "<p>I guess the answer might depend on what your goals are, do you really need real values, for some arithmetic and stuff? <code>to_real</code> should work fine. Probably its cleanest to define  define <code>def probability_space.prob_μ [probability_space \\Omega] : set \\Omega \\to \\R := sorry</code></p>",
        "id": 207000724,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597457887
    },
    {
        "content": "<p>You could go for the mathlib definition of probability measure:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- A measure `μ` is called a probability measure if `μ univ = 1`. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">probability_measure</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">meas_univ</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207000739,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597457930
    },
    {
        "content": "<p>that's what I have I think</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">measurable_space</span> <span class=\"err\">Ω</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">null_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"err\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">countable_additivity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∑&#39;</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">probability_space</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">measure_space</span> <span class=\"err\">Ω</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">unitarity</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207000778,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597457999
    },
    {
        "content": "<p>It implies that for any set <code>s</code> in the σ-algebra <code>μ s ≤ 1</code>.</p>",
        "id": 207000817,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597458011
    },
    {
        "content": "<p>That would guarantee that <code>to_real</code> is always well behaved.</p>",
        "id": 207000827,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597458055
    },
    {
        "content": "<p>However, note that your definition of <code>measurable_space</code> is not quite a σ-algebra, so it might not work as expected.</p>",
        "id": 207000832,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597458065
    },
    {
        "content": "<p>I'm trying to prove monotonicity and I think I need real values to use ring operations for the proof</p>",
        "id": 207000901,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597458177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span>  oh what am I missing? That property that <code>Ω</code> is the universal set?</p>",
        "id": 207000953,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597458245
    },
    {
        "content": "<p>(I have no formal math background beyond calculus, please forgive my naïveté )</p>",
        "id": 207000977,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597458315
    },
    {
        "content": "<p>The universe set for the type <code>Ω</code> should be in the σ-algebra.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_mem</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_complements</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_unions</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207001028,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597458387
    },
    {
        "content": "<p>I replaced <code>nonempty</code> because <code>set.univ ∈ σ → set.nonempty σ</code>.</p>",
        "id": 207001040,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597458442
    },
    {
        "content": "<p>It feels like its what you wanted to be there in the first place.</p>",
        "id": 207001045,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597458459
    },
    {
        "content": "<p>Also, don't worry, I am a CS guy who just got deep into maths recently, we are all learning. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 207001088,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597458492
    },
    {
        "content": "<p>thanks! I definitely wouldn't have wanted to start to prove things when it wasn't quite a sigma algebra.</p>",
        "id": 207001141,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597458602
    },
    {
        "content": "<p>And cool! glad I'm not the only one. Lean is basically the reason I'm motivated to learn math</p>",
        "id": 207001157,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1597458636
    },
    {
        "content": "<p>The rabbit hole is deep. Proof assistants got me into math a year ago... no end in sight, and that is awesome! Welcome! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 207001298,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597458922
    },
    {
        "content": "<p>I think nonempty is equivalent to the univ being a member right? If the measurable sets are nonempty we have a measurable set and so its complement is measurable also, so the union of these two is also measurable.</p>",
        "id": 207003100,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597462483
    }
]