[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">make_greater</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">min</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">min</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span>\n<span class=\"k\">#eval</span> <span class=\"n\">make_greater</span> <span class=\"mi\">4</span> <span class=\"mi\">6</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- should give 6</span>\n</code></pre></div>\n<p>I am trying to write this function. The idea is that there is a predicate as a pre-condition. Is this possible?<br>\nWhat can I replace sorry with?</p>",
        "id": 229711147,
        "sender_full_name": "Ivan Tsoninski",
        "timestamp": 1615398581
    },
    {
        "content": "<p>In this case, <code>dec_trivial</code></p>",
        "id": 229711286,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615398624
    },
    {
        "content": "<p>Thanks! And do you know if it is possible to make it implicit with curly braces like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">make_greater</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">min</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">min</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>So that you don't have to pass dec_trivial.<br>\nIt complains with \"failed to synthesize type class instance for min n : % |- has_singleton Prop (Sort ?)\"<br>\nbut I don't know how to address that.</p>",
        "id": 229712377,
        "sender_full_name": "Ivan Tsoninski",
        "timestamp": 1615399021
    },
    {
        "content": "<p>How would you want to the proof to be inferred implicitly? What if I said <code>make_greater 0 0</code>?</p>",
        "id": 229713923,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615399606
    },
    {
        "content": "<p>What's your larger goal? <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 229713940,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615399616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20in.20function.20type.20as.20precondition/near/229713923\">said</a>:</p>\n<blockquote>\n<p>How would you want to the proof to be inferred implicitly? What if I said <code>make_greater 0 0</code>?</p>\n</blockquote>\n<p>If you said that then it wouldn't type check.  The same if you said make_greater 0 0 dec_trivial.<br>\nThe larger goal is to learn how a dependently typed language can allow me to encode preconditions. I am starting with a simple precondition.<br>\nI can imagine I would have to manually build proofs for more complex cases but it would be cool if I don't have to pass them around.</p>",
        "id": 229714903,
        "sender_full_name": "Ivan Tsoninski",
        "timestamp": 1615399998
    },
    {
        "content": "<p><code>make_greater 0 0</code> would definitely still typecheck, it would be a function of <code>0 &lt; 0 -&gt; 0</code>.</p>",
        "id": 229715855,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615400354
    },
    {
        "content": "<p>You are still encoding a precondition, and whatever uses <code>make_greater</code> would have to supply the proof. Currently, you have an easy way of generating that proof, which is <code>dec_trivial</code>. For more complicated uses, you'd have to write code that knew how to generate the proper proof. That could be some other tactic.</p>",
        "id": 229716082,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615400447
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">make_greater</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">min</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">make_greater</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 229716235,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615400515
    },
    {
        "content": "<p>Of course, you could say that <code>h : 0 &lt; 0</code> implies false, which implies anything, but I'm just showing here that contradictory hypotheses are possible.</p>",
        "id": 229716367,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615400555
    },
    {
        "content": "<p>There's a syntax you can use for binders <code>(x : A . t)</code> that means \"try to make x : A for me by using tactic t\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">make_greater</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">min</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">min</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">testOK</span> <span class=\"o\">:=</span> <span class=\"n\">make_greater</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">testOK</span>\n<span class=\"kd\">def</span> <span class=\"n\">testNG</span> <span class=\"o\">:=</span> <span class=\"n\">make_greater</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- no good</span>\n</code></pre></div>",
        "id": 229716513,
        "sender_full_name": "Chris B",
        "timestamp": 1615400628
    },
    {
        "content": "<p>For this function, I get <code>unexpected occurrence of field notation expression</code> when trying to define it like your example</p>",
        "id": 229716831,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615400733
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 229716861,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615400752
    },
    {
        "content": "<p>I am also getting <code>unexpected occurrence of field notation expression</code> but it looks cool.</p>",
        "id": 229717795,
        "sender_full_name": "Ivan Tsoninski",
        "timestamp": 1615401092
    },
    {
        "content": "<p>You can view <a href=\"https://github.com/Julian/lean-across-the-board/blob/6802cf5c4a88395c179429df3e7135295f8bb9a3/src/chess/board.lean#L68\">https://github.com/Julian/lean-across-the-board/blob/6802cf5c4a88395c179429df3e7135295f8bb9a3/src/chess/board.lean#L68</a> for an example of how <code>. dec_trivial</code> can deal with preconditions</p>",
        "id": 229718004,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615401181
    },
    {
        "content": "<p>For reasons I forget, you need <code>tactic.exact_dec_trivial</code> I think</p>",
        "id": 229718479,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615401325
    },
    {
        "content": "<p>I forgot this is how logical verification has to introduce it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.dec_trivial</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">make_greater</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">min</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">min</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">testOK</span> <span class=\"o\">:=</span> <span class=\"n\">make_greater</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">testOK</span>\n<span class=\"kd\">def</span> <span class=\"n\">testNG</span> <span class=\"o\">:=</span> <span class=\"n\">make_greater</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 229718520,
        "sender_full_name": "Chris B",
        "timestamp": 1615401342
    },
    {
        "content": "<p>(After which yeah that works for me here too, i.e.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.dec_trivial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">make_greater</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">min</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">min</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">testOK</span> <span class=\"o\">:=</span> <span class=\"n\">make_greater</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">testOK</span>\n<span class=\"kd\">def</span> <span class=\"n\">testNG</span> <span class=\"o\">:=</span> <span class=\"n\">make_greater</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>)</p>",
        "id": 229718537,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615401345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20in.20function.20type.20as.20precondition/near/229718520\">said</a>:</p>\n<blockquote>\n<p>I forgot this is how logical verification has to introduce it.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.dec_trivial</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">make_greater</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">min</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">min</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">testOK</span> <span class=\"o\">:=</span> <span class=\"n\">make_greater</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">testOK</span>\n<span class=\"kd\">def</span> <span class=\"n\">testNG</span> <span class=\"o\">:=</span> <span class=\"n\">make_greater</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This works, Thanks! I don't know enough to understand it but it is very interesting!</p>",
        "id": 229719306,
        "sender_full_name": "Ivan Tsoninski",
        "timestamp": 1615401626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20in.20function.20type.20as.20precondition/near/229718537\">said</a>:</p>\n<blockquote>\n<p>(After which yeah that works for me here too, i.e.:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.dec_trivial</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think I need to download a library for this? It says the file cannot be found in the search path.</p>",
        "id": 229719768,
        "sender_full_name": "Ivan Tsoninski",
        "timestamp": 1615401802
    },
    {
        "content": "<p>Are you working on just a lean file, or do you have a mathlib dependency? How did you set up your lean?</p>",
        "id": 229720285,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615402003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Prop.20in.20function.20type.20as.20precondition/near/229720285\">said</a>:</p>\n<blockquote>\n<p>Are you working on just a lean file, or do you have a mathlib dependency? How did you set up your lean?</p>\n</blockquote>\n<p>File, I will look into setting up a project properly. Thanks!</p>",
        "id": 229720750,
        "sender_full_name": "Ivan Tsoninski",
        "timestamp": 1615402174
    },
    {
        "content": "<p>Try <code>leanproject new</code> to easily set up a mathlib dependency</p>",
        "id": 229721055,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615402289
    }
]