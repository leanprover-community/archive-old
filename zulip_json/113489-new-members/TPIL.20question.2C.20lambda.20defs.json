[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">double</span> <span class=\"mi\">3</span>    <span class=\"c1\">-- 6</span>\n\n<span class=\"n\">def</span> <span class=\"n\">do_twice</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">do_twice</span> <span class=\"n\">double</span> <span class=\"mi\">2</span>    <span class=\"c1\">-- 8</span>\n<span class=\"c1\">-- These definitions are equivalent to the following:</span>\n\n<span class=\"n\">def</span> <span class=\"n\">double</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"n\">def</span> <span class=\"n\">do_twice</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I'm not getting how the second <code>do_twice</code> definition is equvalent to the first since the second is of type <code>(\\nat \\to \\nat) \\to (\\nat \\to \\nat)</code> via right associativity.  In other words it should \"return\" function from nat to nat, however when you do reduce it, it equals a natural number which is not of the same type as nat to nat.   Where is my reasoning stuck?</p>\n<p>P.S. how do I do inline <code>lean</code>?</p>",
        "id": 174113366,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566792488
    },
    {
        "content": "<p>It should evaluate to a function form nat to nat if you only pass it one argument. But you pass it two, further evaluating the function from nat to nat at a fixed nat.</p>",
        "id": 174114254,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1566794198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>  I get it now! Thank you, friend.</p>",
        "id": 174114332,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566794319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>  okay, now I don't get it (again).  Because of the type of <code>do_twice</code> is a map from maps to maps.  So... I'm lost again</p>",
        "id": 174114403,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566794475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>  I edited my post, not sure if you get a ping for that hence this.</p>",
        "id": 174114409,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566794502
    },
    {
        "content": "<p>oh, I think I get it now</p>",
        "id": 174114458,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566794542
    },
    {
        "content": "<p><code>#reduce do_twice double 2</code> is returning <code>nat -&gt; nat</code> when called on double, but evaluated is 8.  Now I get it, finallly!  Thank you!</p>",
        "id": 174114476,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566794620
    },
    {
        "content": "<p><code>#reduce do_twice double</code> would show the <code>nat -&gt; nat</code> result</p>",
        "id": 174114525,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566794675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>  you look like Collin Hanks (an actor, Tom Hanks' son)</p>",
        "id": 174114533,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566794721
    },
    {
        "content": "<p>:) in your avatar, but I didn't click on it</p>",
        "id": 174114538,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566794760
    },
    {
        "content": "<p>You probably know this already, but this is a simple instance of <a href=\"https://en.wikipedia.org/wiki/Currying\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Currying\">https://en.wikipedia.org/wiki/Currying</a></p>",
        "id": 174114578,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1566794777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>  I'll read that article anyway to absorb some more of the formal thought about it</p>",
        "id": 174114582,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566794818
    },
    {
        "content": "<p>Yes, currying seems very valuable in this setting, as functions are first-class data objects in Lean.  Not to mention they're verifiable, they're beyond first-class!</p>",
        "id": 174114632,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566794906
    },
    {
        "content": "<p>This is exciting.  We're doing math and coding at the same time. :)</p>",
        "id": 174114814,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1566795308
    },
    {
        "content": "<p>kevin wrote something about this as well <a href=\"https://xenaproject.wordpress.com/2018/05/19/function-composition/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/05/19/function-composition/\">https://xenaproject.wordpress.com/2018/05/19/function-composition/</a><br>\neta-conversion/-equivalence is a related idea that you might encounter occasionally</p>",
        "id": 174134717,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1566820538
    },
    {
        "content": "<p>as for doing math and coding at the same time; if you've read a bit of TPIL you'll have noticed that proving theorems in term mode is often very similar to programming in a functional language. although less common, you can often also use tactic mode to write code:</p>\n<div class=\"codehilite\"><pre><span></span>def first {α β : Type*} (tuple : α × β) : α :=\nbegin\n  cases tuple,\n  exact tuple_fst\nend\n\n#eval first (1, 2) -- 1\n</pre></div>",
        "id": 174135590,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1566821455
    },
    {
        "content": "<blockquote>\n<p>This is exciting.  We're doing math and coding at the same time. :)</p>\n</blockquote>\n<p>I noticed this two years ago and the excitement has still not worn off.</p>",
        "id": 174216190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1566902589
    }
]