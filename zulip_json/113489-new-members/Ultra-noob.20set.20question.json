[
    {
        "content": "<p>Ultra-noob here, sorry if this is a stupid question: I am stumped trying to make simple definitions of sets. I want to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">N_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> as the set of even natural numbers, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">N_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> as the odds. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mn>0</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo><mo>×</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo>×</mo><msub><mi>N</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">C_0 = \\{0\\} \\times \\{0,1\\} \\times N_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo>×</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo>×</mo><msub><mi>N</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">C_1 = \\{1\\} \\times \\{0,1\\} \\times N_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. And THEN <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><msub><mi>C</mi><mn>0</mn></msub><mo>∪</mo><msub><mi>C</mi><mn>1</mn></msub><mo>∪</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">{</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo>×</mo><mo stretchy=\"false\">{</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo>×</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C = C_0 \\cup C_1 \\cup (\\{-1\\}\\times \\{-1\\} \\times \\{0,1\\})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">({</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">})</span></span></span></span>. </p>\n<p>Here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">N_0</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">N_1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">C_0</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}:</span><span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}:</span><span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">N_0</span>\n<span class=\"kd\">def</span> <span class=\"n\">C_1</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}:</span><span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}:</span><span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">N_1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">C_0</span> <span class=\"bp\">∪</span> <span class=\"n\">C_1</span> <span class=\"bp\">∪</span> <span class=\"o\">({(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)}:</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Most of this works, though I'm not sure I'm doing the best way (are my type annotations appropriate?). But the last line is complaining, I think it doesn't know how to build the unions. But I'm not sure how to tell it. </p>\n<p>Thanks for any help-</p>",
        "id": 249265423,
        "sender_full_name": "Chris Staecker",
        "timestamp": 1628789202
    },
    {
        "content": "<p>Some Zulip formatting tips: <code>$$ $$</code> for latex, <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> for code - could you edit your post to adjust that?</p>",
        "id": 249269196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628790835
    },
    {
        "content": "<p>What exactly do you intent to be the meaning of <code>×</code>? Because as you have it, <code>N_0</code> is a <code>set nat</code> but <code>C_0</code> is a <code>Type</code>. Did you intend <code>C_0</code> to have type<code>set (ℤ × ℕ × ℕ)</code>?</p>",
        "id": 249269474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628790948
    },
    {
        "content": "<p>If so, you need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.prod\">docs#set.prod</a> instead of <code>×</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod\">docs#prod</a>)</p>",
        "id": 249269697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628791025
    },
    {
        "content": "<p>Thanks very much! You are right I want × to be a cartesian product of sets. I'll try <a href=\"http://set.prod\">set.prod</a>. Can I somehow cause the × symbol to give me <a href=\"http://set.prod\">set.prod</a> instead of prod?</p>",
        "id": 249271774,
        "sender_full_name": "Chris Staecker",
        "timestamp": 1628791967
    },
    {
        "content": "<p>Well you're using it as <code>prod</code> in other parts of your expression, so that wouldn't work so well</p>",
        "id": 249294371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628802937
    },
    {
        "content": "<p>Note that you can at least use <code>s.prod t</code> for the Cartesian product of s and t - you don't have to write <code>set.prod s t</code></p>",
        "id": 249294524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628803005
    },
    {
        "content": "<p>I have had good luck changing all of my products to <a href=\"http://set.prod\">set.prod</a>. Was that a bad idea? I intended for all those def's to define specific sets.</p>\n<p>Also- is it possible to make cartesian triples? I made my own infix name for <a href=\"http://set.prod\">set.prod</a>, and using this to build a triple results in a pair-of-pairs like ((x,y),z). Is that the best I can do? Or can I make it give me (x,y,z)? Thanks-</p>",
        "id": 249296710,
        "sender_full_name": "Chris Staecker",
        "timestamp": 1628804369
    },
    {
        "content": "<p>you can write <code>s1.prod $ s2.prod s3</code> to get the right associated product of sets</p>",
        "id": 249296837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628804456
    },
    {
        "content": "<p>(note, <code>(x,y,z)</code> is right associated, i.e. <code>(x,(y,z))</code> in lean)</p>",
        "id": 249296879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628804493
    },
    {
        "content": "<p>awesome- thanks!</p>",
        "id": 249296903,
        "sender_full_name": "Chris Staecker",
        "timestamp": 1628804514
    },
    {
        "content": "<p>same for <code>ℤ × ℕ × ℕ := ℤ × (ℕ × ℕ)</code></p>",
        "id": 249296905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628804519
    }
]