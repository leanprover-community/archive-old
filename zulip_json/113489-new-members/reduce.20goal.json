[
    {
        "content": "<p>When I have a goal, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">bin2nat</span> <span class=\"o\">(</span><span class=\"n\">nat2bin</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>how can I see a reduced version of the goal? (nat2bin (such n)) reduces and then bin2nat reduces.</p>",
        "id": 209179677,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599314928
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 209179678,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599314929
    },
    {
        "content": "<p>In particular I want to apply rewrite to the reduced goal.</p>",
        "id": 209179790,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599315117
    },
    {
        "content": "<p>Probably <code>dsimp [bin2nat, nat2bin]</code>, but it would be easier to answer if you had provided a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 209180131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599315525
    },
    {
        "content": "<p>seems you found it easy enough to answer without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 209180870,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599316500
    },
    {
        "content": "<p>thank you</p>",
        "id": 209180879,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599316505
    },
    {
        "content": "<p>Actually this reduces functions I have defined but now I have used if-then-else which ends up with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">natpos2bin</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">binpos2nat</span> <span class=\"n\">bs&#39;</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">binpos2nat</span> <span class=\"n\">bs&#39;</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">bsuccpos</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"n\">bs&#39;</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>If I reduce its I get some more crap.</p>\n<p>Here is my file.<br>\n<a href=\"/user_uploads/3121/Ggwdg3wH1WDy9VoZnU7t7Y7r/binary.lean\">binary.lean</a></p>",
        "id": 209181532,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599317438
    },
    {
        "content": "<p><code>split_ifs</code> will get rid of the if then else</p>",
        "id": 209181551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599317480
    },
    {
        "content": "<p>Alternatively you can use <code>if_neg</code> because the thing you're iffing is false</p>",
        "id": 209181600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599317523
    },
    {
        "content": "<p>Actually how do I use if_neg.?<br>\nI have a goal</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">nat2bin</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"err\">↥</span><span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">binpos2nat</span> <span class=\"n\">bs&#39;</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">binpos2nat</span> <span class=\"n\">bs&#39;</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">pos</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"n\">bs&#39;</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>but if I say <code>if_neg,</code> it says you are stupid:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">111</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span> <span class=\"mi\">111</span> <span class=\"mi\">2</span> <span class=\"mi\">111</span> <span class=\"mi\">2</span> <span class=\"n\">if_neg</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">if_neg</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬</span><span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"err\">?</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">ite</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tactic</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>",
        "id": 209182237,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599318399
    },
    {
        "content": "<p><code>if_neg</code> is a lemma, not a tactic, so <code>rw if_neg</code> (or something similar)</p>",
        "id": 209182297,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1599318485
    },
    {
        "content": "<p>Well you are being a bit CS using this weird <code>ff</code> stuff -- what's wrong with <code>false</code>? You will need to rewrite it but I need to go and talk to my sister in law and I'm not sure the rewrite will work because of this ff business.</p>",
        "id": 209182343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599318591
    },
    {
        "content": "<p>I never used ff.</p>",
        "id": 209182410,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599318661
    },
    {
        "content": "<p>I was wondering what your sister-in-law has to do with ff but I guess you were just indicating that you are going off-line. :-)</p>",
        "id": 209182481,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599318757
    }
]