[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">lg</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">nat.div_lt_self'</span> <span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">lg</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">lg</span> <span class=\"mi\">2</span> <span class=\"c1\">--(deterministic) timeout</span>\n</code></pre></div>\n<p>What is the reason of the above issue?</p>",
        "id": 281123359,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1651651954
    },
    {
        "content": "<p>What output are you hoping for, does <code>#eval lg 2</code> work for your purposes? Reduce may be unfolding a lot of things</p>",
        "id": 281124773,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651652926
    },
    {
        "content": "<p>Isn't that because <code>#reduce</code> doesn't work on well-founded recursion anymore?</p>",
        "id": 281125938,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651653585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  thanks, this works with <code>#eval</code>. Any reason why  <code>#reduce</code> does not work?</p>",
        "id": 281130879,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1651656628
    },
    {
        "content": "<p>I think that's for precisely the reason I stated. About a year ago, something was changed in core Lean which involved a regression of <code>#reduce</code>. It now gets stuck on applications of <code>acc</code>, which are used in well-founded recursion. Note that your recursion is not \"simple\" precisely because it is well-founded <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 281131076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651656748
    },
    {
        "content": "<p><code>#reduce</code> also uses the (trusted) kernel = slow, while <code>#eval</code> uses the (untrusted) VM = fast</p>",
        "id": 281131328,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651656938
    }
]