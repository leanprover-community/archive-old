[
    {
        "content": "<p>How does one create subtypes? Say I want a function  of two parameters one is an arbitrary natural number, the other is a natural number &lt; 100.</p>",
        "id": 196071923,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588456628
    },
    {
        "content": "<p>In this case I would just use <code>fin</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>In general, <code>{a // P a}</code> where <code>α : Type</code> and <code>P : α → Prop</code> is notation for the subtype of terms of type <code>α</code> that satisfy <code>P</code>. Subtypes are mentioned briefly in TPiL <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductively-defined-propositions\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductively-defined-propositions\">in chapter 7</a>. See also <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/theories/sets.md#datasetbasic\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/theories/sets.md#datasetbasic\">this mathlib doc page</a>.</p>",
        "id": 196072236,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588457225
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 196072433,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588457602
    },
    {
        "content": "<p>Why doesn't this work?</p>",
        "id": 196072434,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588457606
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span> <span class=\"c1\">-- ok</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">100</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span> <span class=\"c1\">--error</span>\n</code></pre></div>",
        "id": 196072437,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588457611
    },
    {
        "content": "<p>Because <code>4</code> is not a term of that subtype. You can construct a term like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">100</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">⟩</span>\n<span class=\"c1\">-- dec_trivial also works and doesn&#39;t require any import</span>\n</code></pre></div>",
        "id": 196072649,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588458004
    },
    {
        "content": "<p>But <code>example : fin 100 := 4</code> works</p>",
        "id": 196072787,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588458262
    },
    {
        "content": "<p>That's because <code>4</code> is a term of type <code>fin 100</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">numerals</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">100</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">bit0 (bit0 has_one.one) : fin (bit0 (bit0 (bit1 (bit0 (bit0 (bit1 has_one.one))))))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>See <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/library/init/data/fin/ops.lean#L56\" title=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/library/init/data/fin/ops.lean#L56\">here</a>. Note how Lean interprets numerals in terms of <code>bit0</code>, <code>bit1</code> and <code>has_one.one</code> and <code>has_zero.zero</code>.</p>",
        "id": 196073091,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588458810
    },
    {
        "content": "<p>Just because the thing you defined, <code>{n : ℕ // n ≤ 100}</code> is \"pretty much exactly the same thing as\" <code>fin 100</code>, doesn't mean that everything that works for <code>fin 100</code> will work for <code>{n : ℕ // n ≤ 100}</code>. There are lots of extra definitions which have been put on top of <code>fin n</code>, e.g. it has a 0, a 1, an add, and so on. If you want the same for your type you'll have to give it a name and put all these structure on it yourself.</p>",
        "id": 196074984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588462201
    },
    {
        "content": "<p>Deleted</p>",
        "id": 196076427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588464940
    },
    {
        "content": "<p>I want to implement a function that adds two lists of the same length element-wise, but I don't know how to make sure the lists are the same size. Should I instead return an <code>option list</code> so that if they're the same size (using <code>if..then..else</code>) then I can do some computation and return <code>some list</code> otherwise <code>none</code> ?</p>",
        "id": 196078391,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588468479
    },
    {
        "content": "<p>If you want lists of fixed length, you could use vectors :P<br>\nIf you're doing it with lists, you probably want something like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length_eq</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 196081150,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588473856
    },
    {
        "content": "<p>If you want to define it for vectors, it'd look something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add_vecs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 196081359,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588474316
    },
    {
        "content": "<p>Yeah I should do this with vectors I don't know why I'm using lists</p>",
        "id": 196081415,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588474393
    },
    {
        "content": "<p>Although if you want to define your function by pattern matching/recursion, it may be a bit more complicated than by just using lists.</p>",
        "id": 196081530,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588474574
    },
    {
        "content": "<p>and when you try to call the function,  <code>vector</code>s is not as nice to use compared to <code>list</code>s.</p>",
        "id": 196081658,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588474908
    },
    {
        "content": "<p>Actually this works pretty well even for non-equal lists. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">list_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span> <span class=\"n\">l2</span>\n<span class=\"bp\">|</span> <span class=\"n\">l1</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">l1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">::</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"bp\">::</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">+</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">list_add</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">list_add</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">-- [10, 3]</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">list_add</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"c1\">-- [3, 6, 3]</span>\n</code></pre></div>",
        "id": 196081698,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588474959
    },
    {
        "content": "<p>I can create a type class instance for it</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">list_has_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">list_add</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"c1\">-- [4,6]</span>\n</code></pre></div>\n\n\n<p>I don't know what the brackets for <code>⟨list_add⟩</code> are doing. I'm familiar with the angle brackets being used to create sigma types and and-conjunction but not sure what it means in this context</p>",
        "id": 196081897,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588475376
    },
    {
        "content": "<p>It's the short version for </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">list_has_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">list_add</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 196081953,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588475512
    },
    {
        "content": "<p>Oh so <code>{add := list_add}</code> is a structure</p>",
        "id": 196082119,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588475834
    },
    {
        "content": "<p><code>has_add</code> is a class, but I think so? </p>\n<p>Better wait for an expert to chime in (I think most/all are asleep right now). In the mean time, I think this is the correct section of TPIL.</p>\n<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances</a></p>\n<blockquote>\n<p>Let us start with the first step of the program above, declaring an appropriate class:</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<blockquote>\n<p>The command <code>class</code> above is shorthand for</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"kn\">structure</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196082209,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588476004
    },
    {
        "content": "<p>Ah I didn't catch that. So a type class _is_ a structure</p>",
        "id": 196082258,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588476141
    },
    {
        "content": "<p>(I think there is a difference? But I'm not sure about this myself, so this is probably when you wait for an expert to come by. I think the Europeans will wake up in a few hours)</p>",
        "id": 196082311,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588476271
    },
    {
        "content": "<p>Fair enough, I'm in Chicago so I'm off to bed soon - hopefully will wake to some more clarification. But thanks for your help!</p>",
        "id": 196082382,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588476384
    },
    {
        "content": "<p>there is no difference</p>",
        "id": 196082550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588476823
    },
    {
        "content": "<p><code>class</code> is sugar for <code>@[class] structure</code></p>",
        "id": 196082653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588476973
    },
    {
        "content": "<p>Thanks for clarifying. Then what is an <code>instance</code> ? Is that also syntactic sugar for something I'm familiar with already?</p>",
        "id": 196082765,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588477308
    },
    {
        "content": "<p><code>instance</code> is sugar for <code>@[instance] def</code></p>",
        "id": 196083005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588477809
    },
    {
        "content": "<p>except that with <code>instance</code> the name is optional (else it makes a name by a simple heuristic), while <code>def</code> requires a name</p>",
        "id": 196083020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588477868
    },
    {
        "content": "<p>However, the <code>@[class]</code> and <code>@[instance]</code> attributes add additional behavior in conjunction with the <code>[foo x]</code> instance binder to trigger type class inference</p>",
        "id": 196083061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588477927
    },
    {
        "content": "<p>but from a foundational standpoint, an <code>instance</code> is just a <code>def</code> and a <code>class</code> is just a <code>structure</code> (and a <code>structure</code> is just an <code>inductive</code>)</p>",
        "id": 196083064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588477969
    },
    {
        "content": "<p>Thanks! That makes things much clearer.</p>",
        "id": 196083193,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588478231
    },
    {
        "content": "<p>Just found this definition of vector in the standard library<br>\n<code>def vector (α : Type u) (n : ℕ) := { l : list α // l.length = n }</code><br>\nThat seems quite elegant compared to the one in TPIL</p>",
        "id": 196084363,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588480993
    },
    {
        "content": "<p>a lot of people think the dependent family version is better, because it makes it easier to define functions by induction on vectors</p>",
        "id": 196084894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588482033
    },
    {
        "content": "<p>however, the example in TPIL is mostly there as an example of a dependent type family</p>",
        "id": 196084905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588482077
    },
    {
        "content": "<p>It's weird that in order to create a vector using the subtype version, you have to provide a list along with a proof that it is the right length; which makes me like the TPIL one better now.<br>\n<code>def myvec : vector ℕ 2 := ⟨[1,2], dec_trivial⟩</code></p>",
        "id": 196085027,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588482339
    },
    {
        "content": "<p>You can still create a vector using a <code>cons</code> function with the same type as the TPIL one so that you don't need a side proof</p>",
        "id": 196085144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588482513
    },
    {
        "content": "<p>it's just a definition now instead of a constructor</p>",
        "id": 196085149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588482530
    },
    {
        "content": "<p>How do you do that?</p>",
        "id": 196085328,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588482937
    },
    {
        "content": "<p>Look up the definition of <code>vector.cons</code> in the core library</p>",
        "id": 196085331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588482951
    },
    {
        "content": "<p>Ah I see, nice. <code>def myvec2 (n : vector ℕ 0): vector ℕ 2 := vector.cons 1 (vector.cons 2 n)</code></p>",
        "id": 196085459,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588483193
    }
]