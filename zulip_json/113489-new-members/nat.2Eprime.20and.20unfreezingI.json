[
    {
        "content": "<p>Dear All,</p>\n<p>in the example below, Lean complains that <code>p.prime</code> is a frozen local instance and gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">revert</span> <span class=\"bp\">'</span><span class=\"n\">hp'</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">frozen</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">possible</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">tactic</span> <span class=\"bp\">`</span><span class=\"n\">unfreezing</span><span class=\"bp\">`</span>\n<span class=\"n\">to</span> <span class=\"n\">temporarily</span> <span class=\"n\">reset</span> <span class=\"n\">the</span> <span class=\"n\">set</span> <span class=\"n\">of</span> <span class=\"kn\">local</span> <span class=\"n\">instances</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">ap</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Using <code>unfreezingI</code>, as Lean suggests, works.  My question though is why this is needed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.prime.dvd_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ap</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ap</span><span class=\"o\">,</span>  <span class=\"c1\">-- frozen local instance hp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 275709974,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647543612
    },
    {
        "content": "<p>In particular, <code>rw ap at hp</code> <em>does</em> work and Lean is happy with doing it without <code>unfreezingI</code>.</p>",
        "id": 275710758,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647543958
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime\">docs#nat.prime</a> tagged with <code>@[class]</code>?</p>",
        "id": 275710929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647544040
    },
    {
        "content": "<p>Ah, the problem is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/irreducible\">docs#irreducible</a> is tagged with <code>@[class]</code>, and they're defeq</p>",
        "id": 275711107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647544139
    },
    {
        "content": "<p>How much actually relies on <code>irreducible</code> being a class? Changing it to a <code>structure</code> would make your problem go away</p>",
        "id": 275711192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647544192
    },
    {
        "content": "<p>I don't know how necessary this is considering the planned refractor to make <code>nat.prime</code> just be <code>prime</code></p>",
        "id": 275711514,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647544337
    },
    {
        "content": "<p>I'm not at a pc but i guess it's worth ctrl-fing <code>\\[[^\\]*irreducible</code>to see how much it would break</p>",
        "id": 275711628,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647544395
    },
    {
        "content": "<p>Eric, thanks!  This explains it!  I stopped at <a href=\"http://nat.prime\">nat.prime</a> not being a class and did not look further.</p>",
        "id": 275711705,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647544443
    },
    {
        "content": "<p>Also, I'm not too bothered by this: it is usable as is.  I was just puzzled.</p>",
        "id": 275711761,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647544468
    },
    {
        "content": "<p>Maybe I still have a question, though.  Why does the rewrite work?</p>",
        "id": 275712161,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647544683
    },
    {
        "content": "<p>(I'm no longer at my computer, but I seem to remember that <code>subst</code> does not work.)</p>",
        "id": 275712270,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647544732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/nat.2Eprime.20and.20unfreezingI/near/275712161\">said</a>:</p>\n<blockquote>\n<p>Maybe I still have a question, though.  Why does the rewrite work?</p>\n</blockquote>\n<p>Just guessing but maybe because the rewrite just creates a new hypothesis <code>hp</code> while using <code>cases</code> reverts it (and then applies the eliminator for <code>eq</code>)</p>",
        "id": 275744255,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647561369
    },
    {
        "content": "<p>It's possible, thanks!  Anyway, I am going to move on!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 275770819,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647591324
    }
]