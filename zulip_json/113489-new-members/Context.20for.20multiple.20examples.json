[
    {
        "content": "<p>(if you are easily annoyed by what people do with your beautiful work, please look the other way for 5 minutes - thanks!)</p>\n<p>I am trying to find a way to build up context  that I can reuse in multiple examples, but I can't figure out how (or if it is possible). Here is what works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">example</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">75</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">75</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>But I would think that there is possibly some way to reuse h1, h2, h3 and have linarith still find them for another example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">a1</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">75</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">a2</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">t</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">a3</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">75</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">70</span>\n<span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n</code></pre></div>\n<p>Thanks for any thoughts!</p>",
        "id": 249424091,
        "sender_full_name": "Gunnar Mein",
        "timestamp": 1628895930
    },
    {
        "content": "<p>It sounds like you want the <code>variables</code> command?</p>",
        "id": 249424209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628896056
    },
    {
        "content": "<p>Along with possibly the <code>include</code> command</p>",
        "id": 249424289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628896123
    },
    {
        "content": "<p>Consider the second example part of the first script, so \"variables\" are declared.</p>",
        "id": 249424398,
        "sender_full_name": "Gunnar Mein",
        "timestamp": 1628896223
    },
    {
        "content": "<p>They mean that you can have the hypotheses be variables, too.</p>",
        "id": 249424405,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628896240
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">75</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">75</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n</code></pre></div>",
        "id": 249424458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628896309
    },
    {
        "content": "<p>@Kyle tried that but it didn't do anything. But just found \"include\" in the docs, thank you!</p>",
        "id": 249424461,
        "sender_full_name": "Gunnar Mein",
        "timestamp": 1628896313
    },
    {
        "content": "<p>If you want to misuse Lean, you can also have each example be a <code>have</code> block inside a tactic proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">75</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">75</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">nlinarith</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">70</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">nlinarith</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249424550,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628896392
    },
    {
        "content": "<p>Oh, that's pretty (or gross, depending on where you stand). I am looking for slight performance gains for verifying multiple steps in a calculation, will try that, thanks!</p>",
        "id": 249424659,
        "sender_full_name": "Gunnar Mein",
        "timestamp": 1628896484
    },
    {
        "content": "<p>None of these techniques will help with performance of <code>nlinarith</code>, it doesn't reuse work between invocations</p>",
        "id": 249425975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628897739
    },
    {
        "content": "<p>If you want to improve performance the simplest thing to do is not use <code>nlinarith</code> or find out what more targeted tactics work</p>",
        "id": 249426040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628897794
    },
    {
        "content": "<p>And I guess the added downside is that LEAN will stop processing a begin/end block when a tactic fails, but it will go on to other examples.</p>",
        "id": 249427169,
        "sender_full_name": "Gunnar Mein",
        "timestamp": 1628899168
    },
    {
        "content": "<p>it processes proofs in parallel too</p>",
        "id": 249427361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628899331
    }
]