[
    {
        "content": "<p>Any suggestions on how to prove this function is injective?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">binary</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">pow</span> <span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 183499723,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576436321
    },
    {
        "content": "<p>My instinct would be to do the proofs with a function taking values in int not nat, because subtraction will be involved, and then deduce the nat version from the int version.</p>",
        "id": 183502459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576440772
    },
    {
        "content": "<p>As for proving it, the 2-adic method would be to find the smallest index i where two different finsets differ and then show that the difference was not a multiple of 2^i and hence can't be zero. The real method would be to find the largest index where they differ and then show that the difference has to be positive and hence non-zero.</p>",
        "id": 183502530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576440866
    },
    {
        "content": "<p>Maybe another idea would be to define binary expansions of a nat (which might be there already) and prove that i is in A iff the i'th digit is 1.</p>",
        "id": 183502582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576440951
    },
    {
        "content": "<p>i.e. write a one-sided inverse</p>",
        "id": 183502627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576440967
    },
    {
        "content": "<p>I don't think this will ever be a short proof. Probably there should be some theory of base-n expansions. You'll probably have to write the left inverse to this function and prove it's a left inverse.</p>",
        "id": 183502629,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576440977
    },
    {
        "content": "<p>Also, I would use <code>finset nat</code> not <code>finset (fin n)</code></p>",
        "id": 183502636,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576441010
    },
    {
        "content": "<p>Where is <code>finset.sum</code> defined?</p>",
        "id": 183502983,
        "sender_full_name": "YH",
        "timestamp": 1576441640
    },
    {
        "content": "<p><code>algebra.big_operators</code></p>",
        "id": 183503060,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576441796
    },
    {
        "content": "<p>Oh found it in <code>data.finsupp</code></p>",
        "id": 183503109,
        "sender_full_name": "YH",
        "timestamp": 1576441811
    },
    {
        "content": "<p>If you use finset nat you can prove an explicit equiv between that and nat</p>",
        "id": 183503248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576442057
    },
    {
        "content": "<p>I guess we can just write an inverse like</p>\n<div class=\"codehilite\"><pre><span></span>import data.finset data.finsupp\nopen finset set\ndef binary (A : finset ℕ) : ℕ := A.sum (λ x, pow 2 x)\n\ndef binary_reverse : ℕ → finset ℕ\n| 0 := ∅\n| (n+1) :=\n  let A := binary_reverse n in\n</pre></div>\n\n\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∪</mo><mi>k</mi><mi mathvariant=\"normal\">\\</mi><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">A ∪ {k} \\backslash \\{0,1,..., k-1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span><span class=\"mord\">\\</span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is the smallest natural number not in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">N</mi></mrow><annotation encoding=\"application/x-tex\">ℕ</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord amsrm\">N</span></span></span></span> (now I need to learn how to write this in Lean...)</p>",
        "id": 183503729,
        "sender_full_name": "YH",
        "timestamp": 1576442778
    },
    {
        "content": "<p>I think I'd be tempted to do this with <code>num</code> not nat</p>",
        "id": 183504130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576443479
    },
    {
        "content": "<p>This work must have been done already in essence, when proving nat and num are the same</p>",
        "id": 183504182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576443507
    },
    {
        "content": "<p>What is <code>num</code>?</p>",
        "id": 183504189,
        "sender_full_name": "YH",
        "timestamp": 1576443522
    },
    {
        "content": "<p>It's in core I think</p>",
        "id": 183504192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576443534
    },
    {
        "content": "<p>It's nats but defined as binary sequences</p>",
        "id": 183504203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576443549
    },
    {
        "content": "<p>I'm on phone right now, but try importing data.num.basic of it exists, and then #check num and right click</p>",
        "id": 183504282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576443606
    },
    {
        "content": "<p>Here's a start. There's a bunch of sorries, and I do have a habit of leaving false sorries.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">parity</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">nat</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">binary</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">pow</span> <span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ith_bit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">i</span> <span class=\"err\">%</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ith_bit_binary</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">binary</span> <span class=\"n\">A</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">A</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">binary</span><span class=\"o\">,</span> <span class=\"n\">ith_bit</span><span class=\"o\">])</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">ih</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">binary</span><span class=\"o\">,</span> <span class=\"n\">ith_bit</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_insert</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">mem_insert</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_div</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">],</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">hia</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hai</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">hia</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">parity_simps</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_self</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_pos</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n        <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_self</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">parity_simps</span><span class=\"o\">,</span>\n      <span class=\"n\">finish</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hai</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">parity_simps</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 183504301,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576443626
    },
    {
        "content": "<blockquote>\n<p>I'm on phone right now, but try importing data.num.basic of it exists, and then #check num and right click</p>\n</blockquote>\n<p>I see. I think this problem is essentially the same as proving <code>nat</code> and <code>num</code> are the same?</p>",
        "id": 183504412,
        "sender_full_name": "YH",
        "timestamp": 1576443804
    },
    {
        "content": "<blockquote>\n<p>Also, I would use <code>finset nat</code> not <code>finset (fin n)</code></p>\n</blockquote>\n<p>I usually would, but this is in the context of a lot of other stuff, where I need <code>finset (fin n)</code>. I'd be happy to prove it for <code>finset nat</code> instead and convert from that to this result</p>",
        "id": 183505570,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576445687
    },
    {
        "content": "<blockquote>\n<p>Here's a start. There's a bunch of sorries, and I do have a habit of leaving false sorries.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ith_bit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">i</span> <span class=\"err\">%</span> <span class=\"mi\">2</span>\n</pre></div>\n\n\n</blockquote>\n<p>There's <code>test_bit</code>, by the way - perhaps that would be nicer</p>",
        "id": 183505625,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576445772
    },
    {
        "content": "<p>Almost certainly better. It shouldn't be too hard to prove given the lemmas in the file.</p>",
        "id": 183506073,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576446696
    },
    {
        "content": "<blockquote>\n<p>Here's a start. There's a bunch of sorries, and I do have a habit of leaving false sorries.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n</pre></div>\n\n\n</blockquote>\n<p>I'm fairly sure this sorry is false - the only assumption on <code>i</code> here is that <code>a &lt; i</code>, so <code>2^a / 2^i</code> is zero</p>",
        "id": 183509247,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576452432
    },
    {
        "content": "<p>I think the easiest way to prove this one is as follows: Suppose <code>binary A = binary B</code>, and <code>A != B</code>. Then there exists a largest <code>k</code> where they differ; suppose that it is in <code>A</code>. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>A</mi></mrow></msub><msup><mn>2</mn><mi>i</mi></msup><mo>≥</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>&gt;</mo><mi>k</mi></mrow></msub><msup><mn>2</mn><mi>i</mi></msup><mo>+</mo><msup><mn>2</mn><mi>k</mi></msup><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>&gt;</mo><mi>k</mi></mrow></msub><msup><mn>2</mn><mi>i</mi></msup><mo>+</mo><msup><mn>2</mn><mi>k</mi></msup><mo>&gt;</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>&gt;</mo><mi>k</mi></mrow></msub><msup><mn>2</mn><mi>i</mi></msup><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msup><mn>2</mn><mi>i</mi></msup><mo>≥</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>&gt;</mo><mi>k</mi></mrow></msub><msup><mn>2</mn><mi>i</mi></msup><mo>+</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>B</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>&lt;</mo><mi>k</mi></mrow></msub><msup><mn>2</mn><mi>i</mi></msup><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>B</mi></mrow></msub><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{i\\in A} 2^i\\ge \\sum_{i\\in A,i&gt;k} 2^i+2^k = \\sum_{i\\in B,i&gt;k} 2^i+2^k &gt;\\sum_{i\\in B,i&gt;k} 2^i+\\sum_{i=0}^{k-1}2^i\\ge \\sum_{i\\in B,i&gt;k} 2^i+\\sum_{i\\in B, i&lt;k}2^i=\\sum_{i\\in B} 2^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1517439999999999em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17862099999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\">A</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.260482em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\">A</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.260482em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.888208em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.260482em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2887179999999998em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9890079999999999em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.260482em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.260482em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1517439999999999em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17862099999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 183509908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576453673
    },
    {
        "content": "<p>This looks great, thanks!</p>",
        "id": 183509955,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576453727
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Here's a start. There's a bunch of sorries, and I do have a habit of leaving false sorries.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n</pre></div>\n\n\n</blockquote>\n<p>I'm fairly sure this sorry is false - the only assumption on <code>i</code> here is that <code>a &lt; i</code>, so <code>2^a / 2^i</code> is zero</p>\n</blockquote>\n<p>Yes it's false, I got <code>mod</code> and <code>div</code> confused. It should be equal to zero, in which case the proof is a little easier.</p>",
        "id": 183515737,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576464694
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">hia</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hai</span><span class=\"o\">,</span>\n</pre></div>\n\n\n</blockquote>\n<p>By the way, I love this <code>rfl</code> trick!</p>",
        "id": 183694855,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576618904
    },
    {
        "content": "<p><code>rcases</code> can lead to some pretty cool code :-) You can do similar things with <code>rfl</code> and <code>rintro</code>.</p>",
        "id": 183695557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576619399
    },
    {
        "content": "<p>Yeah I'm just playing with that stuff... <code>rcases/rintro</code> with <code>rfl</code> is so much nicer than <code>rcases/rintro</code> and then tons of <code>rw</code>s</p>",
        "id": 183695733,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576619518
    }
]