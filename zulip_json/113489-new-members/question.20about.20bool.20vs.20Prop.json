[
    {
        "content": "<p>Doing <code>Theorem Proving in Lean</code> section <code>2.1 Simple Type Theory</code><br>\nFor<br>\n<code>#check b1 || b2</code> result:  <code>b1 || b2 : bool</code></p>\n<p>Then using <a href=\"https://leanprover-community.github.io/contribute/naming.html\">Mathlib naming conventions</a><br>\nsaw that <code>\\or</code> could be used</p>\n<p>However for<br>\n<code>#check b1 ∨ b2</code> result: <code>↥b1 ∨ ↥b2 : Prop</code></p>\n<p>Can someone explain the difference? Thanks.</p>",
        "id": 263992941,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638879807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366057\">@Eric Taucher</span> Do you understand the difference between <code>bool</code> and <code>Prop</code>?</p>",
        "id": 263993588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638880209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/question.20about.20bool.20vs.20Prop/near/263993588\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"366057\">Eric Taucher</span> Do you understand the difference between <code>bool</code> and <code>Prop</code>?</p>\n</blockquote>\n<p>Thanks.<br>\nIf you mean do I understand they are different types then yes.  </p>\n<p>My path to Lean is via years of programming and not as a mathematician,  so my thinking is that I have two bool types and that the only operators for bool types are the standard ones like <code>and</code>, <code>or</code>, etc.  But here the <code>\\or</code> is not like those operators so my guess is, a function, that takes in two bool types and returns a prop type. Also, what does the upward pointing errors before <code>b1</code> and <code>b2</code> mean?</p>",
        "id": 263995217,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638881209
    },
    {
        "content": "<p>A <code>bool</code> is either <code>tt</code> or <code>ff</code>. A <code>Prop</code> can be many things, but classically it is either equivalent to <code>true</code> or equivalent to <code>false</code>.</p>",
        "id": 263995388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638881305
    },
    {
        "content": "<p><code>bool</code> is an inductive datatype. <code>bool.rec</code> is computable. <code>Prop</code> is equivalent to <code>Sort 0</code>. <code>Prop</code> is not an inductive datatype. Classical <code>Prop</code> has exactly two distinct members: <code>true</code> and <code>false</code>. Decidable <code>Prop</code> is equivalent to <code>bool</code> (there is a bijection between <code>bool</code> and <code>Prop</code>). Doing cases on a <code>Prop</code> is noncomputable.</p>\n<p>Logical connectives <code>∧ ∨ ¬</code> are all inductive datatypes.</p>",
        "id": 263995411,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1638881314
    },
    {
        "content": "<p>The names of the <code>bool</code> operations are <code>band</code>, <code>bor</code>, <code>bnot</code>, <code>list.all</code>, <code>list.any</code> as opposed to <code>and</code>, <code>or</code>, <code>not</code>, <code>forall</code>, <code>exists</code>.</p>",
        "id": 263995530,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638881386
    },
    {
        "content": "<p>You can think of <code>bool</code> as a very computable <code>Prop</code>.</p>",
        "id": 263995622,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638881423
    },
    {
        "content": "<p>Thanks for the replies. I don't fully understand them but do have an idea of where they are leading, so will take some time by reading further keeping what has been noted and see if it comes out making sense. Also thanks for the key words to keep in mind.  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 263996071,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638881654
    },
    {
        "content": "<p>The upward pointing arrow is a <em>coercion</em>, and in that case it's a coercion to Sort, where the said Sort is <code>Sort 0</code>, aka <code>Prop</code>.</p>",
        "id": 263996289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638881769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366057\">@Eric Taucher</span> It should all make sense once you've read chapter 3.</p>",
        "id": 264001237,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638884087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366057\">Eric Taucher</span> <a href=\"#narrow/stream/113489-new-members/topic/question.20about.20bool.20vs.20Prop/near/263996071\">said</a>:</p>\n<blockquote>\n<p>Thanks for the replies. I don't fully understand them but do have an idea of where they are leading, so will take some time by reading further keeping what has been noted and see if it comes out making sense. Also thanks for the key words to keep in mind.  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>you need a (vague) understanding of universes. <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/prop.20false.20and.20type.20false\">#new members &gt; prop false and type false</a> is a thread I made a while ago on this topic, I hope you can learn something from the replies there</p>",
        "id": 264002591,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638884655
    },
    {
        "content": "<p>I don't think this is very related. You would better look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable\">docs#decidable</a>, although I must say it's quite opaque to an untrained eye.</p>",
        "id": 264002943,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638884838
    },
    {
        "content": "<p>sure, the question is different but I asked the question precisely because I wanted to know why on earth there is a bool type and a prop type, and the answers to that question led me to understand why</p>",
        "id": 264003230,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638884968
    },
    {
        "content": "<p>Ah sure</p>",
        "id": 264003466,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638885074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366057\">@Eric Taucher</span> Every expression in Lean lives in one of three \"levels\" -- it's either a universe, a type-which-is-not-a-universe, or a term-which-is-not-a-type. For simplicity, let me just call them universes, types and terms. Examples: <code>Type</code> is a universe, <code>bool</code> is a type (in universe <code>Type</code>), <code>tt</code> is a term (of type <code>bool</code>). <code>Prop</code> is a universe, <code>2+2=4</code> is a type (in universe <code>Prop</code>), and a proof of 2+2=4 is a term (of type <code>2+2=4</code>). Both <code>bool</code> and <code>Prop</code> express the \"same kind of idea\", however they are at different levels in this hierarchy. There are types <code>true</code> and <code>false</code>(in universe Prop), but these are types, not terms. <code>||</code> is a function which takes two terms, <code>∨</code> is a function which takes two types. The weird up-arrow you're seeing is a coercion which lifts terms of type <code>bool</code> to types in universe Prop, it sends <code>tt</code> to <code>true</code> and <code>ff</code> to <code>false</code>. The two concepts have to be distinguished in Lean because they are different levels in the universe/type/term hierarchy.</p>",
        "id": 264004314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638885452
    },
    {
        "content": "<p>The reason we have <code>Prop</code> as well as <code>bool</code> is that <code>Prop</code> is crucial to mathematics, or more generally crucial for reasoning. I write more about this point of view <a href=\"https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/\">here</a> but you might not find this helpful because it might be too math-focused. Hopefully I cover the main points above though.</p>",
        "id": 264005243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638885773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Your blog <a href=\"https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/\">Mathematics in type theory</a> Is really useful for a programmer with a Computer Science BS degree and knowledge of functional programming coming to Lean. It connects more dots than I knew needed connecting. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 264018484,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638891688
    },
    {
        "content": "<p>De Bruijn used the word \"degrees\" for the three \"levels\" that Kevin is talking about. I'm not sure anyone still uses that terminology, but I think it's nice because Lean also has a system of universe levels, which is orthogonal to the universe/type/term system.</p>\n<p><a href=\"/user_uploads/3121/rBbBgwYWZk10_r4Tt1zBSIG-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rBbBgwYWZk10_r4Tt1zBSIG-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rBbBgwYWZk10_r4Tt1zBSIG-/image.png\"></a></div><p>A somewhat confusing (but useful) thing that Lean does is to declare that each universe is also a type of the universe the next level up, which is why Kevin had to say the contortions \"type-which-is-not-a-universe\" and \"term-which-is-not-a-type\".</p>",
        "id": 264049001,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638901705
    },
    {
        "content": "<p>Thanks. Now <code>trivial</code> enters the picture so more to think about. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 264051679,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638902594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Can you give a reference paper for <code>degrees</code>.  In searching I am not finding anything right away. Thanks. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 264053182,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638903174
    },
    {
        "content": "<p>I saw it in some of the papers from this book <a href=\"https://www.sciencedirect.com/bookseries/studies-in-logic-and-the-foundations-of-mathematics/vol/133/suppl/C\">https://www.sciencedirect.com/bookseries/studies-in-logic-and-the-foundations-of-mathematics/vol/133/suppl/C</a> (De Bruijn used the word \"degree\" for the Automath system)</p>",
        "id": 264053769,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638903389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  This looks like the paper or at least notes degree in the same manner. could you confirm.  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\n<a href=\"https://www.win.tue.nl/automath/archive/pdf/aut044.pdf\">Some Extensions of Automath : The Aut-4 Family</a><br>\nThe usage of the word <code>degree</code> is right in the first paragraph.</p>",
        "id": 264056484,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638904453
    },
    {
        "content": "<p>Is there anyone here who uses \"Types and Programming Languages\" by Benjamin C. Pierce (<a href=\"http://www.worldcat.org/oclc/1077359413\">WorldCat</a>) as a reference. If so then in the book, Chapter 29 Type Operators and Kinding on page 442 it notes</p>\n<blockquote>\n<p>The expressions of our language are now dividend into three separate classes: terms, types and kinds.<br>\nIs this the same as Lean but just using <code>Kind</code> for <code>Universe</code>?</p>\n</blockquote>",
        "id": 264063280,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638907319
    },
    {
        "content": "<p>Yes, in all the papers I looked at they seemed to use degree in the same way (automath to lean translation: 1=universe, 2=type, 3=term).</p>\n<p>That paper, however, seems to have an exception to this in its description of AUT-4.  To preserve a property called \"type reduction\" when there are universal quantifications, they make <code>Prop</code> be degree 2, individual propositions be degree 3, and proofs be a new degree 4.  They justify this, saying that it's a natural way to incorporate \"irrelevance of proofs\" by having it occur only for things of degree 4.  With this system, <code>Prop</code> and <code>bool</code> would be of the same degree.</p>",
        "id": 264063596,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638907443
    },
    {
        "content": "<p>As far as I understand, universes and kinds are basically the same thing, but experts probably see some sort of distinction (type universes might be more restrictive than the concept of kinds, I'm not sure).</p>",
        "id": 264063955,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638907609
    },
    {
        "content": "<p>I don't know if this is right, but after skimming through that  chapter it may be worth noting that Lean's universes are somewhat more stratified than what you find in Benjamin Pierce's book, in that universes form a hierarchy. So that we don't just have one atomic kind called <code>*</code> from which you can build other \"higher-kinded types\" (if that's the right name) like <code>* -&gt; *</code>, but we have an infinite hierarchy <code>Type 0 : Type 1 : Type 2 : ...</code> and so on. So things like <code>Type 0 -&gt; Type 1</code> or <code>Type 2 -&gt; Type 0</code> are different types, instead of just being <code>* -&gt; *</code>.</p>",
        "id": 264067205,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638909040
    },
    {
        "content": "<p>And in Lean it's not really the case that the expressions are divided into those classes. Rather, everything is one class, everything is a term. It's just that some terms are allowed to appear on the right of the <code>:</code> in a typing judgement, and those terms are said to be types (or at least that's my mental picture of it).</p>",
        "id": 264068251,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638909571
    },
    {
        "content": "<p>Thanks for the replies.<br>\nDoes Lean have formal <a href=\"https://en.wikipedia.org/wiki/Type_rule\">type rules</a>? <br>\nMy curiosity is up and want to compare them to the books.</p>",
        "id": 264070935,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638910862
    },
    {
        "content": "<p>You can find them in Mario's thesis: <a href=\"https://github.com/digama0/lean-type-theory/releases\">https://github.com/digama0/lean-type-theory/releases</a></p>",
        "id": 264071285,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1638910997
    }
]