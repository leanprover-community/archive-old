[
    {
        "content": "<p>I'm playing the natural number game (<a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=5&amp;level=9\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=5&amp;level=9</a>) and hit upon this:</p>\n<blockquote>\n<p>I asked around on Zulip and apparently there is not a tactic for this, perhaps because this level is rather artificial. In world 6 we will see a variant of this example which can be solved by a tactic. It would be an interesting project to make a tactic which could solve this sort of level in Lean.</p>\n</blockquote>\n<p>I'm just getting started with lean and this seems like a fun tactic to write if it hasn't already been written. Should I write it, and if I do would I be able to get it merged into the lean standard tactic library?</p>",
        "id": 263819091,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1638778709
    },
    {
        "content": "<p>It seems like a relatively straightforward graph search problem</p>",
        "id": 263819342,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1638778918
    },
    {
        "content": "<p>not directly related to your question but there's a cool maze game in lean 4 <a href=\"https://github.com/dwrensha/lean4-maze\">https://github.com/dwrensha/lean4-maze</a></p>",
        "id": 263819617,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638779074
    },
    {
        "content": "<p>Have you gotten to Proposition World, level 9? This exists as <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cc%20(congruence%20closure)\">cc</a> for propositions (vs functions).</p>",
        "id": 263819965,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638779336
    },
    {
        "content": "<p>wow that is a cool game</p>",
        "id": 263820425,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1638779663
    },
    {
        "content": "<p>I have not <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, I’m still on function world</p>",
        "id": 263820458,
        "sender_full_name": "Andre Popovitch",
        "timestamp": 1638779699
    },
    {
        "content": "<p>Isn't <code>solve_by_elim</code> essentially a DFS search algorithm for this \"maze\"?</p>",
        "id": 263833082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638787789
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f3</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f4</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f5</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f6</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f7</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f8</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f9</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f10</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f11</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f12</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f13</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f14</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f15</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">{</span> <span class=\"n\">max_depth</span> <span class=\"o\">:=</span> <span class=\"mi\">8</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>You have to increase the max depth because non-artificial examples usually don't require such a long proof</p>",
        "id": 263833339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638787935
    }
]