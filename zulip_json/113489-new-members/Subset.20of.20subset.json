[
    {
        "content": "<p>If B : set C, and A : set B, how do you get (a version of) A in set C?</p>",
        "id": 205426790,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596066393
    },
    {
        "content": "<p>Try something like <code>subtype.val '' A</code></p>",
        "id": 205427073,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596066696
    },
    {
        "content": "<p>We recently decided that the <code>simp</code>-normal form is <code>coe</code>, not <code>subtype.val</code>.</p>",
        "id": 205439042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596080742
    },
    {
        "content": "<p>So, <code>(coe '' A : set C)</code></p>",
        "id": 205439048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596080758
    },
    {
        "content": "<p>By this, you mean that we should never type <code>subtype.val</code> or <code>x.val</code> in a proof or lemma?</p>",
        "id": 206341685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596881587
    },
    {
        "content": "<p>No, this is much too strong. Just don't use it in the statement of a simp lemma, especially on the left-hand side. You might find it useful to avoid using it in other places too.</p>",
        "id": 206344461,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596886892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> do you know about simp normal form? The idea is that if you want to get <code>simp</code> working for you, you should know what the form is which the lemmas are trying to normalise towards. The idea is that when your goal is in the \"right\" form when you can just apply standard theorems, but all the theorems need to be stated in the \"right\" form too. So you need to make some design decision about what all your lemmas will look like, and then try and stick to this notation in the middle of proofs.</p>",
        "id": 206453281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597061377
    }
]