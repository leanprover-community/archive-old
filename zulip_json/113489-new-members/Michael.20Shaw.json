[
    {
        "content": "<p>Hi! I'm a High School Junior preparing to transition into senior year. I acknowledge I'm extremely out of my depth here and I have a lot to do before I can hope to succeed. I was first hazed into Lean from an article a smarter peer sent me (<a href=\"https://apurvanakade.github.io/courses/lean_at_MC2020/index.html\">https://apurvanakade.github.io/courses/lean_at_MC2020/index.html</a>) which I didnt understand at the time before the name resurfaced as a possible internship/guided study over the summer by a local college professor (who has worked in this area in the past). My main goal this summer is to get a basic grasp of the syntax and possibly write a solution to an IMO problem.</p>\n<p>In terms of my understanding, I have completed most of the natural numbers game with only a few major challenges/topics of confusion. I hope I will be able to eventually contribute or at least develop my own understanding.</p>",
        "id": 239376115,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621407850
    },
    {
        "content": "<p>I recommend that you choose an IMO problem and just get going on it, and ask a bunch of questions in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> (even getting started might be difficult, but we all have to start somewhere)</p>",
        "id": 239378383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621409153
    },
    {
        "content": "<p>Also, it's probably best to avoid the geometry problems for now. You need a good grasp of mathlib to be able to even state those. Inequalities / number theory should be easier to get started with.</p>",
        "id": 239382230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621411264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"413516\">@Michael Shaw</span> if you want to start on something easier than IMO problems, Stan Polu, David Renshaw and Kunhao Zheng have collected a bunch of more straightforward mathematical Lean puzzles in their <a href=\"https://github.com/openai/miniF2F\">miniF2F repo</a>. This is not a straight Lean repo, it contains problems in a variety of theorem provers, so it has to be installed slightly differently to a standard Lean repo. Here's how to do it (on the command line, assuming a working <code>leanproject</code> environment):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span><span class=\"n\">openai</span><span class=\"bp\">/</span><span class=\"n\">miniF2F.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">miniF2F</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">mathlib</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n</code></pre></div>\n<p>and now you can fire up VS Code (e.g. by typing <code>code .</code> on the command line or opening VS Code and then using \"open folder\" and opening <code>miniF2F/lean</code>) and then in the src/test directory there are a ton of questions you can try.</p>",
        "id": 239393592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621417156
    },
    {
        "content": "<p>Thank you! I'll start with reviewing the syntax from the Lean introduction pdfs before going with miniF2F repo and then looking at inequality/number theory problems. I appreciate the support!</p>\n<p>I also just registered for codewars and am taking a look at how the system works, if there are any simple ones to work off of I would love a link or name!</p>",
        "id": 239466992,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621446229
    },
    {
        "content": "<p>oh codewars is another good way to get started, except that you shouldn't ask for spoilers here or online in general. I'm sure Stan won't mind you asking for spoilers for his F2F questions, as long as his AI's aren't using google to look for answers :-)</p>",
        "id": 239478024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621450518
    },
    {
        "content": "<p>alright! I wasn't looking for answers, just some of the simpler kata to start off.</p>",
        "id": 239490782,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621456123
    },
    {
        "content": "<p>If you care for another newbie's opinion I tried the codewars stuff and I found it a bit difficult to use to learn Lean</p>",
        "id": 239493443,
        "sender_full_name": "Julian Berman",
        "timestamp": 1621457359
    },
    {
        "content": "<p>It's not necessarily \"on-ramp\"-y, you kind of can refresh or browse the list of questions but some I found personally quite hard without some guidance... I find Kevin's material to be a lot easier of a way for me to actually internalize lean because they're written sequentially, so you might want to try <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics\">https://github.com/ImperialCollegeLondon/formalising-mathematics</a> at some point too</p>",
        "id": 239493592,
        "sender_full_name": "Julian Berman",
        "timestamp": 1621457444
    },
    {
        "content": "<p>oh ok! I think i'll look through that first and the documents. personally I'm just trying to come up with simple axioms that can be proven easily and trying to conceptualize how proofing works. also need some more practice with the syntax. im not sure how close the syntax used in natural number game is to the one in the compiler.</p>",
        "id": 239502163,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621461774
    },
    {
        "content": "<p>How proofing works is what we're all about here.</p>",
        "id": 239502263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621461821
    },
    {
        "content": "<p>thats true.</p>\n<p>I just came up with a simple problem for myself to play around with similar in style to the natural number game. probably too simple but I dont know. basically i was watching a show and the characters wanted to buy a ticket for each of them by pooling their money. however, I noticed that their cash individually was less than the individual ticket price. so basically that gave me the idea to prove the simple idea if A&lt;=T B&lt;=T prove A+B&lt;=2T. obviously this is just a simple problem that has been proved before but i want to try solving it just to have an opportunity to practice writing and using the syntax.</p>",
        "id": 239521539,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621474847
    },
    {
        "content": "<p>do you know how to state it?</p>",
        "id": 239521728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621475026
    },
    {
        "content": "<p>I think it is  - lemma [some name for the theorem] (a b t : mynat) : a ≤ t ∧ b ≤ t → a + b ≤ 2t :=</p>",
        "id": 239525666,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621478553
    },
    {
        "content": "<p>Almost: you can't just write <code>2t</code>.</p>",
        "id": 239525703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621478593
    },
    {
        "content": "<p>that is true, noobie mistake. i think i should write t+t then?</p>",
        "id": 239525713,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621478615
    },
    {
        "content": "<p>Also, generally we write lemmas with multiple hypotheses as <code>a ≤ t → b ≤ t → a + b ≤ 2t</code> rather than using <code>∧</code>. It's the same, but easier to work with.</p>",
        "id": 239525731,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621478639
    },
    {
        "content": "<p>Presumably you have multiplication defined on <code>mynat</code>, so hopefully you can write <code>2 * t</code>.</p>",
        "id": 239525787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621478655
    },
    {
        "content": "<p>ohhh i see that makes sense. i think the first step to solving this would be to break it down into two separate hypotheses. I'm mostly working off the basic lean tactics I remember from natural number game so I still need to do some research. Going to go study for my AP exams though, I appreciate all the support you guys are offering!</p>",
        "id": 239525920,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621478787
    },
    {
        "content": "<p>: o <br>\nOh this is cool. Did you attend MC20? <span class=\"user-mention\" data-user-id=\"245078\">@Apurva Nakade</span> is also around working on surreal numbers I believe.</p>",
        "id": 239527105,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1621479725
    },
    {
        "content": "<p>I didn't. I received the article from a friend under the context that we were both super into math. That being said I'm pretty average at math compared to them. I looked at the article then forgot about it due to a lack of understanding of the syntax and overall ideas only to be drawn back in as a research project and through the natural number game. Now that I finally understand the syntax and purpose of lean I can really get into the page.</p>",
        "id": 239527866,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621480392
    },
    {
        "content": "<p>Ah, my bad.</p>",
        "id": 239528484,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1621480975
    },
    {
        "content": "<p>you're fine!</p>",
        "id": 239528625,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621481109
    },
    {
        "content": "<p>When I started I proved some \"easy\" things about the Fibonacci sequence, which wasn't actually easy and learned a lot from that. You could try doing some too if you think it could be a good starting point</p>",
        "id": 239528659,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1621481142
    },
    {
        "content": "<p>that makes sense! Right now I'm just thinking about math wherever it comes up and then working on it. I think I'll do most of the heavy work over the summer since I have finals soon.</p>",
        "id": 239528754,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621481227
    },
    {
        "content": "<p>And bonus points because if you want to try you also get to experience the PR process for mathlib, which is kind of daunting but isn't that bad once you do it once</p>",
        "id": 239528764,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1621481250
    },
    {
        "content": "<p>Yeah take whatever's comfortable for you! I'm definitely feeling the finals as well</p>",
        "id": 239528862,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1621481335
    },
    {
        "content": "<p>Just took a look and that is a pretty impressive task. Its like they say: starting is the hard part. I feel like it'll be exciting once I take the first step.</p>",
        "id": 239528989,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621481430
    },
    {
        "content": "<p>Right now I think my main obstacle is my weak math base since I'm still working through high school level math so that makes understanding the concepts a bit difficult.</p>",
        "id": 239962084,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621787217
    },
    {
        "content": "<p>I'm just messing around right now, making up simple lemmas to solve through. I already followed all the install steps and have VS Code with my first project. How do I find the list of theorems available? I'm not sure if the natural number game uses the same theorems as the library.</p>",
        "id": 239965222,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621790266
    },
    {
        "content": "<p>Some theorems are in what's called Lean core, which is what ships with Lean itself, and more are in mathlib, which is the meat of Lean's math library, and there are a lot of them :).</p>\n<p>Usually vscode's autocomplete is one way to find them.</p>\n<p>You'll definitely find some old friend theorems from NNG -- e.g. if you put in a file <code>#check nat.add_assoc</code> you'll see that theorem (it's defined in Lean core for natural numbers)</p>",
        "id": 239971350,
        "sender_full_name": "Julian Berman",
        "timestamp": 1621796531
    },
    {
        "content": "<p>(Or if you type <code>nat.mul_</code> and just wait there you should see a bunch of theorems come up that you can browse through about multiplication)</p>",
        "id": 239971435,
        "sender_full_name": "Julian Berman",
        "timestamp": 1621796640
    },
    {
        "content": "<p>Oh I missed this message for some reason. Thank you very much for this information! So just to be clear there is no drop down library similar to the  style implemented with the NNG but rather mostly reliant on autocomplete?</p>",
        "id": 240012818,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621838979
    },
    {
        "content": "<p>A drop down library like NNG for mathlib would be huge, there are tens of thousands of theorems to choose from</p>",
        "id": 240012907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621839051
    },
    {
        "content": "<p>autocomplete narrows it down by name / topic</p>",
        "id": 240012926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621839076
    },
    {
        "content": "<p>You can also use the search bar in the docs (see e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul_assoc\">docs#nat.mul_assoc</a>)</p>",
        "id": 240012947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621839109
    },
    {
        "content": "<p>Using the search tool in mathlib, using regular expressions, is perhaps the most powerful theorem-finding tool, but it does rely on you learning how names are assigned in mathlib, which is a nontrivial undertaking!</p>",
        "id": 240013140,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621839256
    },
    {
        "content": "<p>oh that makes sense! I have seen the page in github on naming conventions (because i have the ambitious goal of making a PR on an IMO problem which personally is pretty daunting at a high school level especial given my average performance in math). regular expressions is another topic of research parallel to lean in terms of my work this summer so given time I might invest some work into that area.</p>\n<p>I appreciate all the dedication and patience you guys are expressing because I am not the easiest student.</p>",
        "id": 240013590,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621839627
    },
    {
        "content": "<p>I'm not sure whether I should start a new topic or if I'm counting my eggs before they are hatched but how do I check if the IMO problem I plan to formalize has already been completed. is the mathlib IMO folder up to date? <a href=\"https://github.com/leanprover-community/mathlib/tree/master/archive/imo\">https://github.com/leanprover-community/mathlib/tree/master/archive/imo</a></p>\n<p>I'll ask for guidance once I make some headway and PR process if I can get anywhere with it.</p>",
        "id": 240013733,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621839757
    },
    {
        "content": "<p>The only reason the master branch would not be up to date is if there are any PRs in the works, so you should double check the PR list to make sure your theorem isn't waiting for review. But I don't think there have been any IMO PRs in a while</p>",
        "id": 240014033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621839967
    },
    {
        "content": "<p>(Also, when I said to use regular expressions, really all I meant is that if you are hoping that both <code>XXX</code> and <code>YYY</code> appear in a theorem name, you can search for <code>XXX.*YYY</code> which just means <code>XXX</code>, then an arbitrary string of characters, then <code>YYY</code>. More complicated regular expressions are only rarely helpful. :-)</p>",
        "id": 240028131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621849314
    },
    {
        "content": "<p>I understand. From what I can tell, the theorem naming conventions are mostly the same as NNG except that the theorems have a prefix corresponding to the type of variable/constant you are working with such as int.add/mult/etc vs nat.add/mult/etc</p>",
        "id": 240063380,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621868700
    },
    {
        "content": "<p>Perhaps you've already seen this, but there's some more detail on mathlib's naming conventions here: <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a></p>",
        "id": 240070254,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1621871511
    },
    {
        "content": "<p>Thank you for letting me know!</p>",
        "id": 240071442,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621872025
    },
    {
        "content": "<p>I'm very happy to see that you've been interested in miniF2F <span class=\"user-mention\" data-user-id=\"413516\">@Michael Shaw</span> ! Now you can directly open the folder <code>miniF2F</code> instead of <code>miniF2F/lean</code> through VS Code.</p>\n<p>We've just added some more statements in AMC  12A/B level. These are very good exercises to step into lean after you've finished the <a href=\"https://github.com/leanprover-community/tutorials\">tutorials</a>. Also, if you are stuck on some of them, looking at the other proofs might help: we've got some proofs found by GPT-f,  like this one <a href=\"https://github.com/openai/miniF2F/blob/90b2164facd93157029e518ad3cfa55641d51513/lean/src/valid/induction_ineq_nsqlefactn.lean\">induction_ineq_nsqlefactn</a>. Hope you can enjoy it! And don't hesitate to open a pr if you solve any of them that doesn't have proof.</p>",
        "id": 241983090,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1623184965
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_ineq_nsqlefactn</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"c1\">-- cursor here</span>\n  <span class=\"o\">{</span>\n\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">nat.zero</span>\n<span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"bp\">!</span>\n\n<span class=\"n\">case</span> <span class=\"n\">nat.succ</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">d.succ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">d.succ</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">d.succ</span><span class=\"o\">)</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>I'm trying this one and I'm confused about the first goal. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 245668498,
        "sender_full_name": "Jiekai",
        "timestamp": 1626085476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277676\">@Jiekai</span> Doe you have something like <code>pow_two</code> that you can <code>rw</code> with?</p>",
        "id": 245670767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626087333
    },
    {
        "content": "<p>Something like <code>simp only [sq]</code> in the original proof?</p>",
        "id": 245670896,
        "sender_full_name": "Jiekai",
        "timestamp": 1626087434
    },
    {
        "content": "<p>I'm confused about the <code>4 ≤ 0</code> part.  If a goal has false condition (Should I call the h₀ part condition?), does that mean the goal is true?</p>",
        "id": 245671067,
        "sender_full_name": "Jiekai",
        "timestamp": 1626087579
    },
    {
        "content": "<p>Ooh, I had not even looked at your assumptions yet. But sure, <code>false.elim</code> can prove anything, given a proof of <code>false</code>.</p>",
        "id": 245671223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626087671
    },
    {
        "content": "<p>I think I'm doing this induction wrong <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 245671868,
        "sender_full_name": "Jiekai",
        "timestamp": 1626088139
    },
    {
        "content": "<p>Yes, this way it will be somewhat painful to deal with the cases <code>n = 2</code> and <code>n = 3</code>.</p>",
        "id": 245672162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626088327
    },
    {
        "content": "<p>Maybe you don't even want to use induction...</p>",
        "id": 245672215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626088369
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>proposition a:\n4^2 &lt;= 4! [proof by computing]\n\nproposition b:\nif n^2 &lt;= n! and n &gt;= 4\nthen (n+1)^2 &lt;= (n+1)!  [proof omitted]\n</code></pre></div>\n<p>Combine proofs of prop a and prop b as the final proof.<br>\nI would like to translate the this to lean. Any hints please</p>",
        "id": 245673049,
        "sender_full_name": "Jiekai",
        "timestamp": 1626089002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Michael.20Shaw/near/245671223\">said</a>:</p>\n<blockquote>\n<p>Ooh, I had not even looked at your assumptions yet. But sure, <code>false.elim</code> can prove anything, given a proof of <code>false</code>.</p>\n</blockquote>\n<p>I vaguely remember something relevant is in NNG.</p>",
        "id": 245673160,
        "sender_full_name": "Jiekai",
        "timestamp": 1626089067
    },
    {
        "content": "<p>I think there is a lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_eq_add_of_le\">docs#nat.exists_eq_add_of_le</a></p>",
        "id": 245673225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626089129
    },
    {
        "content": "<p>You can use that to turn your statement about <code>n</code> into a statement about <code>m+4</code>.</p>",
        "id": 245673315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626089176
    },
    {
        "content": "<p>After that, use induction on <code>m</code>.</p>",
        "id": 245673335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626089196
    },
    {
        "content": "<p>Thanks! Let me try that.</p>",
        "id": 245673412,
        "sender_full_name": "Jiekai",
        "timestamp": 1626089251
    },
    {
        "content": "<p>But you can also prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>≥</mo><mn>2</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>≥</mo><mi>n</mi><mo>+</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">(n+2)(n+3) \\ge 2(n+3) \\ge n+4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>. (Instead of that prop b).</p>",
        "id": 245673432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626089267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277676\">Jiekai</span> <del>try something like the following. There should also be a way with <code>cases'</code> or <code>match</code> instead of the if-statement, but I couldn't get it working anyways</del><br>\n<del><code>\nif h₁:4 ≤ n then\n  begin\n    sorry\n  end\nelse\n  by apply false.elim (h₁ h₀)\n</code></del></p>\n<p>wait never mind this runs into the same problem again with the induction</p>",
        "id": 245674142,
        "sender_full_name": "Kritixi Lithos",
        "timestamp": 1626089794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Michael.20Shaw/near/245673225\">said</a>:</p>\n<blockquote>\n<p>I think there is a lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_eq_add_of_le\">docs#nat.exists_eq_add_of_le</a></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_ineq_nsqlefactn</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"k\">have</span> <span class=\"n\">t0</span><span class=\"o\">:</span> <span class=\"n\">nat.exists_eq_add_of_le</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"kt\">Sort</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>Why the type error?</p>",
        "id": 245674353,
        "sender_full_name": "Jiekai",
        "timestamp": 1626089997
    },
    {
        "content": "<p>The tutorials seem to have few induction exercises.  This puzzle seems nice to include.</p>",
        "id": 245674510,
        "sender_full_name": "Jiekai",
        "timestamp": 1626090110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277676\">@Jiekai</span> Write <code>have t0 :=</code>. You need <code>:=</code> instead of <code>:</code>.</p>",
        "id": 245674748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626090257
    },
    {
        "content": "<p>then how should I handle<code>t0 : ∃ (k : ℕ), n = 4 + k</code> into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 245675274,
        "sender_full_name": "Jiekai",
        "timestamp": 1626090609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277676\">@Jiekai</span> <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cases\">tactic#cases</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#obtain\">tactic#obtain</a>.</p>",
        "id": 245675344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626090660
    }
]