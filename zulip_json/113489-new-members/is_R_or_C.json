[
    {
        "content": "<p>Dear all, I am having some trouble with the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.fourier</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.interval_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.integrals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">interval_integrable</span> <span class=\"n\">f</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">real.pi</span><span class=\"o\">)</span>\n            <span class=\"n\">real.pi</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">-</span><span class=\"n\">real.pi..real.pi</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">x.re</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_R_or_C.re_eq_complex_re</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm not quite sure that <code> is_R_or_C.re_eq_complex_re </code> is the way to go here, because I didn't fully grasp the concept of <code>is_R_or_C</code>. Could someone help me clear this up?</p>",
        "id": 292931802,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1660225196
    },
    {
        "content": "<p>You might want to fix these first:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">interval_integrable</span> <span class=\"n\">f</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">real.pi</span><span class=\"o\">)</span> <span class=\"n\">real.pi</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">tmp.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">34</span>\n<span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">interval_integrable</span> <span class=\"n\">f</span> <span class=\"n\">measure_theory.measure_space.volume</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">real.pi</span><span class=\"o\">)</span> <span class=\"n\">real.pi</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span>\n<span class=\"n\">tmp.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">36</span>\n<span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">re'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">real.re'</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℝ</span>\n<span class=\"n\">tmp.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">43</span>\n<span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"mi\">0</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 292932205,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1660225347
    },
    {
        "content": "<p>Is it the output of <code>extract_goal</code>? Did you mean <code>∫ (x : ℝ) in -real.pi..real.pi, x = 0</code> instead? In that case, <code>simp</code> proves it.</p>",
        "id": 292938534,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1660227490
    },
    {
        "content": "<p>as Patrick said, there is no reason to use <code>is_R_or_C</code></p>",
        "id": 292949975,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660230967
    },
    {
        "content": "<p>Indeed it was the output of extract goal and simp does work, thank you.</p>",
        "id": 293069544,
        "sender_full_name": "Julia Ramos Alves",
        "timestamp": 1660294723
    }
]