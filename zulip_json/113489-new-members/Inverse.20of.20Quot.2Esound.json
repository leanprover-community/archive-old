[
    {
        "content": "<p>Is there any way to go from <code>Quot.mk r a = Quot.mk r b</code>  to <code>r a b</code>?</p>",
        "id": 279308114,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650301595
    },
    {
        "content": "<p>Looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.eq\">docs#quotient.eq</a></p>",
        "id": 279312298,
        "sender_full_name": "Chris B",
        "timestamp": 1650303659
    },
    {
        "content": "<p>Actually <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.exact\">docs#quotient.exact</a> is just the direction you want. eq is iff.</p>",
        "id": 279312456,
        "sender_full_name": "Chris B",
        "timestamp": 1650303733
    },
    {
        "content": "<p>[note that this is Lean 3]</p>",
        "id": 279312498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650303766
    },
    {
        "content": "<p>Oh right, capital letters. <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Quotient.exact\">https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#Quotient.exact</a></p>",
        "id": 279312984,
        "sender_full_name": "Chris B",
        "timestamp": 1650304052
    },
    {
        "content": "<p>We've mapped the mathlib4_docs links to docs4# btw.</p>",
        "id": 279313006,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1650304068
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quot.exact#doc\">docs4#Quot.exact</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quotient.exact#doc\">docs4#Quotient.exact</a></p>",
        "id": 279314633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650304833
    },
    {
        "content": "<p>If <code>Quot</code> is \"quotient by the equivalence relation generated by <code>r</code>\" then it's not possible to go from <code>Quot.mk r a = Quot.mk r b</code> to <code>r a b</code> (because maybe <code>r a c</code> and <code>r c b</code> are true instead) but I'm not entirely sure what <code>Quot</code> is.</p>",
        "id": 279314976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650305002
    },
    {
        "content": "<p>Ah, good eye, I glossed over <code>Quot</code> as <code>Quotient</code>.</p>",
        "id": 279316712,
        "sender_full_name": "Chris B",
        "timestamp": 1650306064
    },
    {
        "content": "<p><code>Quot</code> is defined in Lean core, and is explained in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/axioms_and_computation.html\">https://leanprover.github.io/theorem_proving_in_lean4/axioms_and_computation.html</a>. But Kevin's point stands: If <code>r</code> is not already an equivalence relation, the converse might not be true. If <code>r</code> is an equivalence relation, you should use <code>Quotient</code> instead of <code>Quot</code>, which is also defined in core.</p>",
        "id": 279322144,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1650309078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486803\">@Matei Adriel</span> There's some useful discussion in the above link if you Ctrl-F for \"Given r as above\".</p>",
        "id": 279322530,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1650309321
    },
    {
        "content": "<p>Yep, I was using Quotient, but used simp to try and remove as many layers of function calls as possible. Quotient.exact looks exactly like what I need</p>",
        "id": 279324341,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650310265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"486803\">Matei Adriel</span> <a href=\"#narrow/stream/113489-new-members/topic/Inverse.20of.20Quot.2Esound/near/279324341\">said</a>:</p>\n<blockquote>\n<p>Yep, I was using Quotient, but used simp to try and remove as many layers of function calls as possible.</p>\n</blockquote>\n<p>Don't do this, this is a common newbie mistake. Only unfold definitional layers if you have no other choice; if you unfold more than one layer of definitions then that means you are either missing an API lemma or are ignoring the one that exists</p>",
        "id": 279325301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650310795
    }
]