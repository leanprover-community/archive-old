[
    {
        "content": "<p>While practicing <code>calc</code> proof mode, I got stuck on this simple inequality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sub_nonneg.mp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">sq_nonneg</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So I am interested to know:</p>\n<ul>\n<li>Why can't the first <code>sorry</code> be solved <code>by ring_nf</code>?</li>\n<li>Why does the second <code>sorry</code> ask me to prove <code>covariant_class ℝ ℝ (function.swap has_add.add) has_le.le</code>?</li>\n<li>Can this proof be simplified somehow?</li>\n</ul>",
        "id": 264570591,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639239603
    },
    {
        "content": "<p>Division isn't a thing in rings, and neither is &lt;=, so the first <code>sorry</code> is out of scope for ringlike tactics for two reasons. There's a \"clear denominators\" tactic, and you probably want to change the &lt;= to an =.</p>",
        "id": 264571278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639240490
    },
    {
        "content": "<p>Also if things are equalities rather than inequalities you can state them as such, calc will still produce an inequality from a chain of <code>\\le</code> and <code>=</code>, edit: oops just saw kevin already wrote this</p>",
        "id": 264571410,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639240650
    },
    {
        "content": "<p>P.s. its always easier to help if you include the imports, in this case <code>import data.real.basic</code></p>",
        "id": 264571478,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639240706
    },
    {
        "content": "<p>Why if I use the (correct) <code>ring</code> instead of <code>ring_nf</code> the line above the first sorry, does it close the relevant goal and still tell me to use <code>ring_nf</code>? Is this a bug?</p>",
        "id": 264571495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639240762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/covariant_class.20.E2.84.9D.20and.20ring_nf.20in.20calc/near/264571495\">said</a>:</p>\n<blockquote>\n<p>Why if I use the (correct) <code>ring</code> instead of <code>ring_nf</code> the line above the first sorry, does it close the relevant goal and still tell me to use <code>ring_nf</code>? Is this a bug?</p>\n</blockquote>\n<p>Is your mathlib up to date? Mario made a couple changes to <code>ring</code> this week, one to address a bug exactly like this</p>",
        "id": 264571914,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639241218
    },
    {
        "content": "<blockquote>\n<p>Is your mathlib up to date?</p>\n</blockquote>\n<p>It is!</p>",
        "id": 264572350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639241773
    },
    {
        "content": "<p>Oh, <code>ring_nf</code> is the right tactic there. <code>ring</code> is for equations, this is proving an inequality by normalizing to 0 &lt;= 0</p>",
        "id": 264572464,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639241905
    },
    {
        "content": "<blockquote>\n<p>Why does the second sorry ask me to <code>prove covariant_class ℝ ℝ (function.swap has_add.add) has_le.le</code>?</p>\n</blockquote>\n<p>This goal appeared when you did the unconventional <code>apply sub_nonneg.mp</code>, as you can see if you put your cursor before and after that tactic. <code>apply</code> is not always the cleverest when it comes to type class inference. You would be better off doing <code>rw \\l sub_nonneg</code>. You can solve the second goal with <code>apply_instance</code>, the tactic which says \"solve this goal using type class inference\".</p>",
        "id": 264572521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639241986
    },
    {
        "content": "<p>Oh, except the rewrite fails because you have you have not written your example in Lean's normal form: you should use &lt;= not &gt;=.</p>",
        "id": 264572664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639242044
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.field_simp</span> <span class=\"c1\">-- clear denominator tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_right</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">sq_nonneg</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h₁</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h₂</span><span class=\"o\">)],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264572847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639242270
    }
]