[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> Fin <span class=\"ow\">:</span> ℕ <span class=\"ow\">→</span> <span class=\"kt\">Set</span> <span class=\"kr\">where</span>\n  <span class=\"nf\">zero</span> <span class=\"ow\">:</span> <span class=\"o\">{</span>n <span class=\"ow\">:</span> ℕ<span class=\"o\">}</span> <span class=\"ow\">→</span> Fin <span class=\"o\">(</span>suc n<span class=\"o\">)</span>\n  <span class=\"nf\">suc</span>  <span class=\"ow\">:</span> <span class=\"o\">{</span>n <span class=\"ow\">:</span> ℕ<span class=\"o\">}</span> <span class=\"o\">(</span>i <span class=\"ow\">:</span> Fin n<span class=\"o\">)</span> <span class=\"ow\">→</span> Fin <span class=\"o\">(</span>suc n<span class=\"o\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> Vec <span class=\"o\">(</span>A <span class=\"ow\">:</span> <span class=\"kt\">Set</span> a<span class=\"o\">)</span> <span class=\"ow\">:</span> ℕ <span class=\"ow\">→</span> <span class=\"kt\">Set</span> a <span class=\"kr\">where</span>\n  <span class=\"nf\">[]</span>  <span class=\"ow\">:</span> Vec A zero\n  <span class=\"nf\">_∷_</span> <span class=\"ow\">:</span> <span class=\"ow\">∀</span> <span class=\"o\">{</span>n<span class=\"o\">}</span> <span class=\"o\">(</span>x <span class=\"ow\">:</span> A<span class=\"o\">)</span> <span class=\"o\">(</span>xs <span class=\"ow\">:</span> Vec A n<span class=\"o\">)</span> <span class=\"ow\">→</span> Vec A <span class=\"o\">(</span>suc n<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I know that Lean has similar definitions to these in the core library, but I consider them inferior to the above as you cannot neatly pattern match on Lean's versions the same way in Agda. In Lean rather than being inductive types, they are implemented as subtypes over <code>nat</code> and <code>list</code>.</p>",
        "id": 179509703,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572509345
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I guess it is possible for <code>Vec</code>.</p>",
        "id": 179509872,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572509539
    },
    {
        "content": "<p>Yes, it is possible. I think <code>fin2 n</code> is somewhere in mathlib</p>",
        "id": 179510083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572509798
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Fin</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">suc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>And for <code>Fin</code>.</p>\n<p>Honestly, I somewhat expected this would not be possible. Why weren't they defined like this in the core library from the beginning?</p>",
        "id": 179510111,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572509862
    },
    {
        "content": "<p>because it makes it easier to relate vector theorems to list theorems</p>",
        "id": 179510158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572509888
    },
    {
        "content": "<p>How so?</p>",
        "id": 179510172,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572509928
    },
    {
        "content": "<p>I think it is in keeping with the general sense of \"avoid dependent types when possible\"</p>",
        "id": 179510185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572509947
    },
    {
        "content": "<p>A <code>vector A n</code> is simply a pack of an \"untyped\" <code>list A</code> and a property about it</p>",
        "id": 179510190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572509978
    },
    {
        "content": "<p>with the dependent formulation it is harder to separate the two</p>",
        "id": 179510200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510000
    },
    {
        "content": "<p>That said, there are uses for both styles</p>",
        "id": 179510245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510012
    },
    {
        "content": "<p>and <code>vector</code> doesn't get a lot of use, in part because of that. Feel free to use the dependent version in your own work if you like</p>",
        "id": 179510266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> \"Pattern-matching should be an editor feature\" — Would that be a correct way of paraphrasing a quote of yours?</p>",
        "id": 179510278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572510070
    },
    {
        "content": "<p>indeed it would</p>",
        "id": 179510285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510084
    },
    {
        "content": "<p>Oh, lol.</p>",
        "id": 179510292,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572510120
    },
    {
        "content": "<p>If lean were just a little bit better, you could register a custom <code>vector.rec'</code> theorem and make it just as good as the real thing</p>",
        "id": 179510334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510127
    },
    {
        "content": "<p>except that DTT says defeq matters so I'm a sad panda</p>",
        "id": 179510372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510196
    },
    {
        "content": "<blockquote>\n<p>except that DTT says defeq matters</p>\n</blockquote>\n<p>What do you mean by this?</p>",
        "id": 179510481,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572510315
    },
    {
        "content": "<p>If I defined <code>vector.rec'</code> in the obvious way (that is, it looks like the recursor of <code>Vec</code> but for the <code>vector A n</code> type) then <code>vector.rec' z s (vector.cons a v) = s a (vector.rec' z s v)</code> will be an equality, but not defeq</p>",
        "id": 179510551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510395
    },
    {
        "content": "<p>and that <em>usually</em> won't matter, but it comes up in certain places, in particular in dependent arguments (like the <code>n</code> of <code>vector A n</code>)</p>",
        "id": 179510570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510452
    },
    {
        "content": "<p>What is defeq?</p>",
        "id": 179510577,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572510468
    },
    {
        "content": "<p>definitional equality, aka convertibility</p>",
        "id": 179510581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510479
    },
    {
        "content": "<p>If <code>a</code> is defeq to <code>b</code> then <code>a = b</code> is provable by <code>rfl</code></p>",
        "id": 179510634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510518
    },
    {
        "content": "<p>By that quote, do you mean that Lean should have view patterns like Idris and some other languages?</p>",
        "id": 179510649,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572510545
    },
    {
        "content": "<p>Something like that</p>",
        "id": 179510664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510573
    },
    {
        "content": "<p>By DTT, do you mean Dualized Type Theory? That is what a Google search turned up for me.</p>",
        "id": 179510725,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572510630
    },
    {
        "content": "<p>That would solve one part of the problem, namely using <code>vector.rec'</code> without it looking way more horrible than what you get with the builtin recursor and the equation compiler</p>",
        "id": 179510729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510639
    },
    {
        "content": "<p>DTT is dependent type theory, the general axiomatic framework used by Coq, Lean, and Agda</p>",
        "id": 179510743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510660
    },
    {
        "content": "<p>(more specifically CIC, the calculus of inductive constructions)</p>",
        "id": 179510751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510675
    },
    {
        "content": "<p>google really let me down here</p>",
        "id": 179510755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572510685
    },
    {
        "content": "<p>Sorry, I actually know what those terms are, but I am not familiar with the jargon when it is used so informally. </p>\n<p>I have a question I was wondering about. If pattern matching is compiled to recursors, how would shortcutting work in Lean? Suppose you have some function to find an element of a list by index - how would Lean handle stopping in the middle?</p>",
        "id": 179510902,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572510859
    },
    {
        "content": "<p>You still evaluate the function from the outside in</p>",
        "id": 179511254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572511384
    },
    {
        "content": "<p>In particular, you can even have a tree like inductive <code>inductive T | mk : (nat -&gt; T) -&gt; T</code>, which will take a function in its inductive hypothesis</p>",
        "id": 179511343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572511444
    },
    {
        "content": "<p>In the VM, the recursor thing is ignored and it just evaluates it like it would a match statement in Coq</p>",
        "id": 179511354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572511471
    },
    {
        "content": "<p>But it's all a bit heuristic; I suspect that if you set things up right you can get unnecessary computation where early exit doesn't quite work</p>",
        "id": 179511390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572511545
    },
    {
        "content": "<p>I see. Thanks.</p>",
        "id": 179511526,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572511706
    }
]