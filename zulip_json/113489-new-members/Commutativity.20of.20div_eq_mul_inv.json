[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_inv_eq_div</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">div_inv_monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247095021,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627162615
    },
    {
        "content": "<p>How would I show that a/b = a * b^-1 is commutative?</p>",
        "id": 247095029,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627162634
    },
    {
        "content": "<p>It's false</p>",
        "id": 247096888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627165999
    },
    {
        "content": "<p>It amounts to stating that multiplication is commutative, but you didn't require it to be.</p>",
        "id": 247096939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627166098
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/comm_group\">docs#comm_group</a> satisfies the property you need</p>",
        "id": 247096954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627166137
    },
    {
        "content": "<p>Well, I was using this proof to show that <code>((⇑angle_to_circle (⇑(zmod_to_angle hm) i))⁻¹ * ⇑angle_to_circle (⇑(zmod_to_angle hm) j)) = (⇑angle_to_circle (⇑(zmod_to_angle hm) j) / ⇑angle_to_circle (⇑(zmod_to_angle hm) i))</code></p>",
        "id": 247097531,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627167262
    },
    {
        "content": "<p>I can supply an mwe in one moment</p>",
        "id": 247097532,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627167269
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span> <span class=\"n\">dihedral_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">angle_to_circle_hom</span> <span class=\"o\">:</span> <span class=\"n\">real.angle</span> <span class=\"bp\">≃+</span> <span class=\"n\">additive</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">quotient_add_group.equiv_quotient_of_eq</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">exp_map_circle_eq_one_iff.symm</span><span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"o\">(</span><span class=\"n\">quotient_add_group.quotient_ker_equiv_of_surjective</span> <span class=\"n\">exp_map_circle_hom</span> <span class=\"n\">exp_map_circle_surjective</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">angle_to_circle</span> <span class=\"o\">:</span> <span class=\"n\">real.angle</span> <span class=\"bp\">≃</span> <span class=\"n\">circle</span> <span class=\"o\">:=</span> <span class=\"n\">angle_to_circle_hom.to_equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zmod_to_angle</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">m</span> <span class=\"bp\">→+</span> <span class=\"n\">real.angle</span> <span class=\"o\">:=</span>\n<span class=\"n\">zmod.lift</span> <span class=\"n\">m</span> <span class=\"o\">⟨</span><span class=\"n\">gmultiples_hom</span> <span class=\"n\">real.angle</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span> <span class=\"bp\">/</span><span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">π</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">real.angle</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comm_angle_to_circle_zmod</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"o\">((</span><span class=\"n\">angle_to_circle</span> <span class=\"o\">((</span><span class=\"n\">zmod_to_angle</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">angle_to_circle</span> <span class=\"o\">((</span><span class=\"n\">zmod_to_angle</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"n\">angle_to_circle</span> <span class=\"o\">((</span><span class=\"n\">zmod_to_angle</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">angle_to_circle</span> <span class=\"o\">((</span><span class=\"n\">zmod_to_angle</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247097609,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627167472
    },
    {
        "content": "<p>Is there a way to show this with the structure comm_group?</p>",
        "id": 247097651,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627167499
    },
    {
        "content": "<p>what about <code>(0 : real.angle)</code>?</p>",
        "id": 247097827,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627167788
    },
    {
        "content": "<p>(also your mwe doesn't work, I can't find <code>angle_to_circle_hom</code> and you need the <code>variables {m}</code> higher up</p>",
        "id": 247097837,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627167829
    },
    {
        "content": "<p>Ok, sorry about that. Please try it now</p>",
        "id": 247097900,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627167927
    }
]