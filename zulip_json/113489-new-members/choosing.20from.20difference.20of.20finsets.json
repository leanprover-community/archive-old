[
    {
        "content": "<p>Here's my \"Tactic State\":</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">hcard</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">y</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"err\">∈</span> <span class=\"n\">y</span> <span class=\"err\">\\</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>I've been digging through <code>finset</code> and am not sure what I need to do to kill this goal. Any pointers? It looks like I need to invoke <code>classical.choice</code>, but does that mean I need to turn things into <code>fintype</code>s?</p>",
        "id": 133619465,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536515841
    },
    {
        "content": "<p>You could prove that <code>finset.card (y \\ x) != 0</code></p>",
        "id": 133619814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536516603
    },
    {
        "content": "<p>Oops, I should have showed that <code>S</code> is nonempty before this point. But I'm still not seeing how to easily work with <code>finset.card</code>. Perhaps I should be working with <code>multiset.card</code> instead?</p>",
        "id": 133620757,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536518686
    },
    {
        "content": "<p>The interface should all be there, although it might require reading <code>finset.lean</code>...</p>",
        "id": 133622733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536523100
    },
    {
        "content": "<p>So my algorithm for doing questions like this is to type <code>import finset</code>, see what auto-complete suggests, find that <code>finset.lean</code> is in <code>data/</code>, then open finset.lean and search the file for <code>card</code> to see what's there.</p>",
        "id": 133622824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536523274
    },
    {
        "content": "<p><code>theorem eq_of_subset_of_card_le {s t : finset α} (h : s ⊆ t) (h₂ : card t ≤ card s) : s = t := ...</code>. Can I work classically?</p>",
        "id": 133622922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536523463
    },
    {
        "content": "<p>Yes!</p>",
        "id": 133622924,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536523490
    },
    {
        "content": "<p>(didn't read the code part)</p>",
        "id": 133622930,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536523500
    },
    {
        "content": "<p>You should have decidable whatever in this context</p>",
        "id": 133622931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536523501
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcard</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"err\">∈</span> <span class=\"n\">y</span> <span class=\"err\">\\</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnsub</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊆</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hsub</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">Heq</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">eq_of_subset_of_card_le</span> <span class=\"n\">hsub</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hcard</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">Heq</span> <span class=\"n\">at</span> <span class=\"n\">hcard</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">hcard</span><span class=\"o\">,</span><span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hnotex</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">forall_not_of_not_exists</span> <span class=\"n\">hnotex</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hnsub</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">Hb</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">Hb</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Amateurish approach. I don't know if I need decidability.</p>",
        "id": 133623442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536524562
    },
    {
        "content": "<p>does removing the local instance break the proof?</p>",
        "id": 133623456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536524640
    },
    {
        "content": "<p>I think the <code>by_contra</code> will break.</p>",
        "id": 133623508,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536524719
    },
    {
        "content": "<p><code>by_contra hnotex</code> breaks</p>",
        "id": 133623509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536524720
    },
    {
        "content": "<p>I tried to do the following as a warmup for the above:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">chosen</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">ne</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">SS</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset_coe</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hSS</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">nonempty_iff_univ_ne_empty</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">hSS</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I'm having trouble turning <code>h : S ≠ ∅</code> into <code>⊢ @set.univ ↥↑S ≠ ∅</code>. Probably I'm just scared by the <code>↥↑</code> since I'm not too comfortable with coercions. </p>\n<p>I've also been following something like your algorithm <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> but I wanted to check in and make sure I wasn't missing some obscure lemma elsewhere. Thanks for your solution, I'll study it carefully now!</p>",
        "id": 133623511,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536524733
    },
    {
        "content": "<p>if you make the statement bounded then by_contra will not break</p>",
        "id": 133623556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536524798
    },
    {
        "content": "<p><code>chosen</code> is definitely noncomputable, but you can use <code>finset.exists_mem_of_ne_empty</code> to prove that easily</p>",
        "id": 133623557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536524816
    },
    {
        "content": "<p><code>classical.sone (exists_mem_of_ne_empty h)</code></p>",
        "id": 133623565,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536524846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> you should try and understand Kenny's golfed solution :-)</p>",
        "id": 133623568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536524864
    },
    {
        "content": "<p>Thanks Mario and Chris!</p>",
        "id": 133623615,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536524912
    },
    {
        "content": "<p>I'm having trouble getting your warm-up to compile. What are the imports and variables?</p>",
        "id": 133623627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536524979
    },
    {
        "content": "<p>Sorry about that, see the edit.</p>",
        "id": 133623705,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536525107
    },
    {
        "content": "<p>My Lean has never heard of <code>set.nonempty_iff_univ_ne_empty.mpr</code></p>",
        "id": 133623756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536525150
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (α) [decidable_eq α] (x y : finset α) (hcard : finset.card x &lt; finset.card y) : ∃ (e : α), e ∈ y \\ x :=\nclassical.by_contradiction $ λ h,\nnot_le_of_lt hcard (finset.card_le_of_subset $ by simpa using h)\n</pre></div>",
        "id": 133623769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536525203
    },
    {
        "content": "<p>Oh sorry, I meant Mario's golfed solution.</p>",
        "id": 133623814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536525243
    },
    {
        "content": "<p>there is a way to prove it without classical stuff, but I will let kenny do that</p>",
        "id": 133623821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536525254
    },
    {
        "content": "<p>it's in data.set.basic; I guess it was added quite recently <a href=\"https://github.com/leanprover/mathlib/pull/295\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/295\">https://github.com/leanprover/mathlib/pull/295</a></p>",
        "id": 133623824,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1536525275
    },
    {
        "content": "<p>Oh yes, I have an old project open. Thanks!</p>",
        "id": 133623831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536525299
    },
    {
        "content": "<p>I guess <code>↥↑S</code> means the subtype corresponding to the set corresponding to <code>S</code>.</p>",
        "id": 133624004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536525641
    },
    {
        "content": "<blockquote>\n<p>there is a way to prove it without classical stuff, but I will let kenny do that</p>\n</blockquote>\n<p>roger that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcard</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"err\">∈</span> <span class=\"n\">y</span> <span class=\"err\">\\</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">suffices</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"err\">∈</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"err\">∉</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n<span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">hcard</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133624012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536525687
    },
    {
        "content": "<p>lol, that was easy</p>",
        "id": 133624124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536525861
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">chosen</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">ne</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_pos</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- switching to multisets</span>\n  <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">card_pos_iff_exists_mem</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- there&#39;s now a one-liner that I forgot</span>\n  <span class=\"k\">have</span> <span class=\"n\">hinhabited</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">inhabited_of_exists</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hinhabited</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133624311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536526258
    },
    {
        "content": "<blockquote>\n<p>lol, that was easy</p>\n</blockquote>\n<p>oh come on, he just copied your answer ;-)</p>",
        "id": 133624321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536526298
    },
    {
        "content": "<p>the last three lines can be abbreviated to <code>exact (classical.inhabited_of_exists h).default</code></p>",
        "id": 133624505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536526632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">chosen</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span>\n<span class=\"n\">mt</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_of_forall_not_mem</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 133624762,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536527059
    }
]