[
    {
        "content": "<p>A subgroup of a subgroup is a subgroup, but this proof looks ridiculous. Am I that much ignorant ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">j</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">set_coe.exists</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hb'</span><span class=\"o\">,</span> <span class=\"n\">hb''</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hb'</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hb''</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hs'</span><span class=\"o\">,</span> <span class=\"n\">hs''</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">set_coe.exists</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">hs'</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">and.intro</span> <span class=\"n\">hs''</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">subgroup</span> <span class=\"n\">α</span> <span class=\"n\">hα</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H'</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">G</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">subgroup.subtype</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">H.map</span> <span class=\"o\">(</span><span class=\"n\">G.subtype</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subgroup.mem_map</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hb'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">this'</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">set_like.coe_mem</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"n\">use</span> <span class=\"n\">this'</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">this'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">this'</span><span class=\"o\">⟩,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">subtype.eq</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"n\">this</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this'</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hb'</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">congr</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">subgroup.coe_subtype</span> <span class=\"n\">G</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ha'</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subgroup.mem_map</span><span class=\"o\">,</span> <span class=\"n\">subgroup.coe_subtype</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">and.intro</span> <span class=\"n\">ha'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subtype.coe_mk</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277873721,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649163466
    },
    {
        "content": "<p>The trick is to use map and comap to push sets forwards and backwards along the map from <code>\\u s</code> to <code>alpha</code></p>",
        "id": 277874354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649163701
    },
    {
        "content": "<p>And sometimes it turns out to be better to work with injective group homs.</p>",
        "id": 277874672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649163841
    },
    {
        "content": "<p>The map is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.subtype\">docs#subgroup.subtype</a></p>",
        "id": 277874750,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649163856
    },
    {
        "content": "<p>The whole role of this is to be able teach Lean that <code>fixing_subgroup (fixing_subgroup M s) t = fixing_subgroup M (s \\cup t)</code>, but Lean resists…</p>",
        "id": 277876786,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649164682
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- move s, t before the colon to save `intro`</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"c1\">-- the map is already there and this is the simp normal form</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"c1\">-- this is now just logic nonsense, unpacking and repacking</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>some tips <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span></p>",
        "id": 277876881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649164726
    },
    {
        "content": "<p>I learn about <code>finish</code>!</p>",
        "id": 277878051,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649165247
    },
    {
        "content": "<p>By the way, do you understand why I needed to specify <code>@subgroup hM M</code> (where <code>hM : group M</code>) in the second proof above ? — <code>subgroup M</code> didn't suffice to find an instance of <code>group M</code>.</p>",
        "id": 277878439,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649165410
    },
    {
        "content": "<p>This is weird</p>",
        "id": 277878543,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649165459
    },
    {
        "content": "<p>ah, wait, this is because you named the instance</p>",
        "id": 277878787,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649165571
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">H'</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>should be OK</p>",
        "id": 277878813,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649165587
    },
    {
        "content": "<p>If you give a name to a variable between square brackets, then Lean will not include it unless you mention it. So with <code>variable [hα :  group α]</code> it doesn't know that <code>α </code> is a group</p>",
        "id": 277879015,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649165668
    },
    {
        "content": "<p>In any case, now I can at least state what I wish to prove :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">certainly_easy_to_prove_nightmare_to_state</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fixing_subgroup</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">fixing_subgroup</span> <span class=\"o\">(</span><span class=\"n\">fixing_subgroup</span> <span class=\"n\">M</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">fixing_subgroup</span> <span class=\"n\">M</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 277879184,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649165747
    },
    {
        "content": "<p>If you need to give it a name and use it several time you can write <code>include hα</code>.</p>",
        "id": 277879185,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649165748
    },
    {
        "content": "<p>It seems we are missing a reasonable API for <code>fixing_subgroup</code>. For example the first sorry here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">certainly_easy_to_prove_nightmare_to_state</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fixing_subgroup</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">fixing_subgroup</span> <span class=\"o\">(</span><span class=\"n\">fixing_subgroup</span> <span class=\"n\">M</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">fixing_subgroup</span> <span class=\"n\">M</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">hx</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy₁</span> <span class=\"bp\">|</span> <span class=\"n\">hy₂</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>should follow from some monotonicity of <code>fixing_subgroup</code>, that I don't find.</p>",
        "id": 277881051,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649166543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- We begin by abusing definitional equality and use the `rfl` trick.</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hbs</span><span class=\"o\">⟩,</span> <span class=\"n\">hbt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- The `rfl` trick *defines* `a` to be `b`, substitutes in and then just rerases `a`.</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hbs</span><span class=\"o\">,</span> <span class=\"n\">hbt</span><span class=\"o\">⟩</span> <span class=\"o\">},</span> <span class=\"c1\">-- Can now just make the term</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">hat</span><span class=\"o\">⟩,</span>\n    <span class=\"c1\">-- the proof should now be one line, of the form `exact ⟨⟨t₁, t₂⟩, ⟨t₃, t₄, t₅⟩⟩`.</span>\n    <span class=\"c1\">-- Let's *experiment* now in tactic mode, and then use the `refine` tactic to make the</span>\n    <span class=\"c1\">-- term we need.</span>\n    <span class=\"c1\">-- `use a`, Oh this made progress. I now randomly have two goals but they</span>\n    <span class=\"c1\">-- both look pretty simple. I'll take that.</span>\n    <span class=\"c1\">-- But actually `use` just ran the `refine` tactic on something else.</span>\n    <span class=\"c1\">-- Let's see what `use a` actually did:</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>  <span class=\"c1\">-- The two underscores are the new goals.</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- two goals so make a new bracket</span>\n      <span class=\"c1\">-- `use has` closes this goal! Now let's think about how to write it using `refine`</span>\n      <span class=\"n\">exact</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- the first `_` was just the term `has`.</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- second goal</span>\n      <span class=\"c1\">-- `apply and.intro hat,` looks like a good first move. But `apply` just used `refine`:</span>\n      <span class=\"n\">refine</span> <span class=\"n\">and.intro</span> <span class=\"n\">hat</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span> <span class=\"c1\">-- now solves the goal!</span>\n       <span class=\"c1\">-- but if the proof was refl we can just use `rfl` on the previous line</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"c1\">-- Therefore, the one line proof is `exact ⟨⟨a, has⟩, and.intro hat rfl⟩`,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277881179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649166601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> , Yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fixing_subgroup\">docs#fixing_subgroup</a> `is defined « par la bande » in the files devoted to Galois theory. I believe one needs to transfer them somewhere in the files related to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action\">docs#mul_action</a>, as well as adding much stuff. For example, I found useful to have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_fixing_subgroup_iff</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">fixing_subgroup</span> <span class=\"n\">M</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hg</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 277881729,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1649166809
    },
    {
        "content": "<p>I totally agree that lemma should be immediately after the definition, that should be elsewhere</p>",
        "id": 277881869,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649166857
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.stabilizer\">docs#mul_action.stabilizer</a></p>",
        "id": 277882056,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649166957
    },
    {
        "content": "<p>With an API, but it is for a singleton (I didn't check the whole file).</p>",
        "id": 277882171,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649166992
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hbs</span><span class=\"o\">⟩,</span> <span class=\"n\">hbt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hbs</span><span class=\"o\">,</span> <span class=\"n\">hbt</span><span class=\"o\">⟩},</span>\n  <span class=\"c1\">-- no rfl trick here so can do it all in term mode</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha.some</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">ha.some_spec</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩⟩⟩</span>\n</code></pre></div>",
        "id": 277882624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649167154
    },
    {
        "content": "<p>The <code>rfl</code> trick in <code>rintro</code> involves a \"deep <code>eq.rec</code>\" so you don't want to translate it into term mode, my guess is that the term generated by the <code>rintro rfl</code> tactic is really nasty.</p>",
        "id": 277883044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649167282
    },
    {
        "content": "<p>Oh by the way I used the axiom of choice with <code>exists.some</code> and <code>exists.some_spec</code></p>",
        "id": 277883143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649167318
    },
    {
        "content": "<p>quite unnecessarily though: <code>λ ⟨ha₁, ha₂⟩, ⟨⟨a, ha₁⟩, ⟨ha₂, rfl⟩⟩</code></p>",
        "id": 277892224,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649170977
    },
    {
        "content": "<p>I thought that term mode lambda pointies were discouraged!</p>",
        "id": 277908994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649177301
    },
    {
        "content": "<p>Only for defining data</p>",
        "id": 277909070,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649177334
    },
    {
        "content": "<p>It will produce a term with a <code>whatever.rec</code> in a place that usually isn't the best place for it</p>",
        "id": 277909383,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649177483
    },
    {
        "content": "<p>but for a proof we don't care</p>",
        "id": 277909398,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649177490
    }
]