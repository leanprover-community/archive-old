[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test_split</span> <span class=\"o\">{</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is there a nice way to decompose the hypotheses to prove the above theorem?  What should \"sorry\" be replaced with?</p>",
        "id": 130287397,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532537208
    },
    {
        "content": "<p><code>tauto</code> gets the job done in this case</p>",
        "id": 130287654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1532537484
    },
    {
        "content": "<p>Manually, you could use <code>cases</code>, for example</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">cases</span> <span class=\"n\">pqr</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">qr</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">qr</span> <span class=\"k\">with</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">qs</span> <span class=\"n\">q</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rs</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 130287735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1532537566
    },
    {
        "content": "<p>Where can I find tauto?  It is not in the standard libraries.</p>",
        "id": 130288011,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532537931
    },
    {
        "content": "<p>It's in mathlib</p>",
        "id": 130288034,
        "sender_full_name": "Reid Barton",
        "timestamp": 1532537970
    },
    {
        "content": "<p>Now for a more complex example,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test_split</span> <span class=\"o\">{</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>After the intros, is there a nice way to decompose these hypotheses?</p>",
        "id": 130292466,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532542256
    },
    {
        "content": "<p>I'm not sure what you are looking for, but here is a short proof using <code>tauto</code>:</p>",
        "id": 130292689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532542486
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test_split</span> <span class=\"o\">{</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h&#39;&#39;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h&#39;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h&#39;&#39;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">tauto</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130292693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532542492
    },
    {
        "content": "<p>I'm not sure we currently have any tactic that can guess the <code>specialize</code> steps.</p>",
        "id": 130292772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532542568
    },
    {
        "content": "<p>If you really really want one, then the standard procedure is to hope Simon will pity you.</p>",
        "id": 130292790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532542616
    },
    {
        "content": "<p>Haha! I'm pretty merciful though</p>",
        "id": 130293761,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532543813
    },
    {
        "content": "<p>Have you tried <code>solve_by_elim</code>?</p>",
        "id": 130293765,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532543823
    },
    {
        "content": "<p>It doesn't work</p>",
        "id": 130293837,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532543885
    },
    {
        "content": "<p>Btw Simon, how was your tauto lecture?</p>",
        "id": 130294047,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532544141
    },
    {
        "content": "<p>You can shrink the proof down to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test_split</span> <span class=\"o\">{</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h&#39;&#39;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130294182,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532544330
    },
    {
        "content": "<p>I'm giving it tonight and I decided to talk about <code>pi_instances</code> after all. 5 minutes is so incredibly short :D</p>",
        "id": 130294259,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532544393
    },
    {
        "content": "<p>Did you prepare a heavily commented version of the source?</p>",
        "id": 130294306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532544458
    },
    {
        "content": "<p>What I decided to do is write an instance for <code>group</code> and show how automation shrinks it. And then I mention that <code>refine_struct</code> is written in Lean</p>",
        "id": 130294601,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1532544836
    },
    {
        "content": "<p><code>rintro</code> is a really nice way of doing all that</p>\n<div class=\"codehilite\"><pre><span></span>theorem test_split {P Q R S : Prop} :\n  P ∧ (Q ∨ R) → (Q → S) → (R → S) → P ∧ S :=\nbegin\n  rintro ⟨hp, hq | hr⟩ qs rs,\n  { exact ⟨hp, qs hq⟩ },\n  { exact ⟨hp, rs hr⟩ }\nend\n</pre></div>",
        "id": 130314506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532567971
    }
]