[
    {
        "content": "<p>Where can I find lemmas about coercing to option (e.g. <code>ℕ</code> to <code>option ℕ</code>)? I want basic things like <code>↑(n - m) = ↑n - ↑m</code>.</p>",
        "id": 155204948,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547586879
    },
    {
        "content": "<p>what does subtraction mean?</p>",
        "id": 155204961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547586901
    },
    {
        "content": "<p>I don't think option has a <code>has_sub</code> instance</p>",
        "id": 155204982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547586912
    },
    {
        "content": "<p>But option N does.</p>",
        "id": 155205154,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587056
    },
    {
        "content": "<p>Oh wait, you mean <code>↑n - ↑m</code> won't be defined at all.</p>",
        "id": 155205221,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587085
    },
    {
        "content": "<p>What about something like <code>1 + ↑(n - 1) = ↑n</code>? That's what I actually need to prove.</p>",
        "id": 155205251,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587112
    },
    {
        "content": "<p>option doesn't have an add or 1 either</p>",
        "id": 155205270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547587129
    },
    {
        "content": "<p>what are you doing?</p>",
        "id": 155205286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547587138
    },
    {
        "content": "<p>Degrees of polynomials.</p>",
        "id": 155205303,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587150
    },
    {
        "content": "<p>You can add degrees of polynomials, but they're defined via option.</p>",
        "id": 155205315,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587162
    },
    {
        "content": "<p>Isn't it <code>with_bot N</code> or something?</p>",
        "id": 155205329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547587176
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 155205336,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587190
    },
    {
        "content": "<p>that's a different thing</p>",
        "id": 155205346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547587198
    },
    {
        "content": "<p>Ok, because <code>with_bot</code> has additional structure.</p>",
        "id": 155205412,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587214
    },
    {
        "content": "<p><code>with_bot</code> has an addition, <code>option</code> doesn't</p>",
        "id": 155205415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547587218
    },
    {
        "content": "<p>But how do I coerce to <code>with_bot</code>?</p>",
        "id": 155205416,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587221
    },
    {
        "content": "<p>I mean, are there lemmas about it in mathlib?</p>",
        "id": 155205423,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587232
    },
    {
        "content": "<p>I think you want <code>with_bot.coe_add</code></p>",
        "id": 155205548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547587324
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 155205551,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587334
    },
    {
        "content": "<p>the lemmas are in <code>algebra.ordered_group</code></p>",
        "id": 155205560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547587337
    },
    {
        "content": "<p>but if <code>n : nat</code> then <code>1 + \\u(n - 1) = \\u n</code> is false at 0</p>",
        "id": 155205587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547587379
    },
    {
        "content": "<p>Yeah, I have an <code>n &gt; 1</code> hypothesis, that's alright.</p>",
        "id": 155205616,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547587407
    },
    {
        "content": "<p>if you cases on <code>n</code> then the zero case is impossible and the succ case is by refl</p>",
        "id": 155205634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547587434
    },
    {
        "content": "<p>oh wait, not refl, you have to commute the 1+ first</p>",
        "id": 155205704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547587469
    },
    {
        "content": "<blockquote>\n<p>that's a different thing</p>\n</blockquote>\n<p>It's a definitionally equal thing. Definitional equality is a subtle beast. At times you should just treat definitionally equal things as the same, but at other times you shouldn't, and this is one of those times. This came up today in my M1P1 talk. We tried <code>linarith</code> to finish the proof that any two limits of a sequence were equal, and it failed, because we had hypotheses of the form <code>l &lt; m -&gt; false</code>. When we changed them to the definitionally equal <code>\\not (l &lt; m)</code> linarith suddenly worked! What is going on, I guess, is that linarith is looking at what \"kind\" of an expression it can see, and <code>l &lt; m -&gt; false</code> is \"just some function\" to linarith, whereas <code>\\not (l &lt; m)</code> is \"a linear inequality that I can use\". Similarly type class inference for + is going to trigger on <code>with_bot nat</code> but perhaps not on <code>option nat</code> even though they're definitionally equal. I hope I've got this mostly right. These things might be definitionally equal, but they are different expressions so tactics or other bits of Lean might treat them in different ways. For unification they will be the same but for rewrites they won't. etc etc.</p>",
        "id": 155206605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547588163
    }
]