[
    {
        "content": "<p>I've been working with <code>f : R -&gt; R</code> and using <code>f^[n]</code> to represent <code>f ( f ( f ( ... f ( x ) ) ) )</code>, I want to do this with <code>ratfunc R</code> but it doesn't work since <code>nat.iterate R</code> doesn't seem to work on type <code>R -&gt; R</code>, does anyone have any tips on how to represent this with <code>ratfunc R</code> ?</p>",
        "id": 279339553,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1650319122
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 279339718,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1650319204
    },
    {
        "content": "<p>The first thing to figure out is how to compose two rational functions and get a rational function. Then you can just fold I guess.</p>",
        "id": 279340353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650319595
    },
    {
        "content": "<p>I think I have to use <code>ratfunc.eval</code> #ratfunc.eval but I don't really understand it too well :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Evaluate</span> <span class=\"n\">a</span> <span class=\"n\">rational</span> <span class=\"n\">function</span> <span class=\"n\">p</span> <span class=\"n\">given</span> <span class=\"n\">a</span> <span class=\"n\">ring</span> <span class=\"n\">hom</span> <span class=\"n\">f</span> <span class=\"k\">from</span> <span class=\"n\">the</span> <span class=\"n\">scalar</span> <span class=\"n\">field</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">and</span> <span class=\"n\">a</span> <span class=\"n\">value</span> <span class=\"n\">x</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"kd\">variable</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target.</span>\n</code></pre></div>\n<p>Don't I just need to pass the rational function and the value I want to evaluate at ? What is the ring hom thing?</p>",
        "id": 279341358,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1650320247
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/ratfunc.eval\">docs#ratfunc.eval</a>)</p>",
        "id": 279341610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650320406
    },
    {
        "content": "<p>The implementation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.comp\">docs#polynomial.comp</a> might give some ideas</p>",
        "id": 279341713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650320508
    },
    {
        "content": "<p>I would guess you pick the ring_hom as <code>algebra_map _ _</code></p>",
        "id": 279341822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650320580
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ratfunc\">docs#ratfunc</a></p>",
        "id": 279343122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650321581
    },
    {
        "content": "<p>I don't think you can use evaluation. If the ground field is finite then not even a polynomial is determined by its values. A rational function can take infinity as a value so I don't think ring homomorphisms are relevant either. I guess you need to evaluate on the other rational function itself</p>",
        "id": 279343312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650321715
    },
    {
        "content": "<p>Aah I see, yes this is the point, you don't eval at an element of K, you eval at an element of ratfunc.</p>",
        "id": 279343496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650321864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/ratfunc.20composition/near/279343496\">said</a>:</p>\n<blockquote>\n<p>Aah I see, yes this is the point, you don't eval at an element of K, you eval at an element of ratfunc.</p>\n</blockquote>\n<p>Trying to understand that more, so far I've experimented with this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ratfunc.eval</span> <span class=\"n\">id</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ratfunc.X</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>but it errors with :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">ratfunc.eval</span> <span class=\"n\">id</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">id</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→+*</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279346012,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1650323964
    },
    {
        "content": "<p>yep that error makes perfect sense. Maybe you want <a href=\"http://ring_hom.id\">ring_hom.id</a> or something?</p>",
        "id": 279346434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650324301
    },
    {
        "content": "<p>Ok, I tried that : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ratfunc.eval</span> <span class=\"n\">ring_hom.id</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ratfunc.X</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>but with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">ratfunc.eval</span> <span class=\"n\">ring_hom.id</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">ring_hom.id</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">non_assoc_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→+*</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279346746,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1650324551
    },
    {
        "content": "<p>Can you explain the point of evaluating a <code>ratfunc</code> with another <code>ratfunc</code> ? Why not evaluate it with a value in <code>R</code> ?</p>",
        "id": 279346803,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1650324603
    },
    {
        "content": "<p>I think that <code>ratfunc.eval ratfunc.C q p</code> should give the expected composition <code>p ∘ q</code>. The idea is that the ring homomorphism <code> ratfunc.C</code> let you see the coefficients of <code>p</code>as elements of <code>ratfunc R</code>, and this rational function with coefficients in <code>ratfunc R</code> can then be evaluated at <code>q</code>.</p>",
        "id": 279347651,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1650325292
    },
    {
        "content": "<p>I think something like this is what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ratfunc</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">ratfunc</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.eval</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">ratfunc</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"n\">g</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">ratfunc.X</span> <span class=\"c1\">-- should be f (f (f (X))) n times</span>\n</code></pre></div>\n<p>the point is to define composition of rational functions as a rational function, rather than as a plain function so we remember more information</p>\n<p>Edit: Oops this is basically what <span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> said <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 279347812,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650325443
    },
    {
        "content": "<p>Is <code>comp</code> associative?</p>",
        "id": 279351423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650328682
    },
    {
        "content": "<p>It should be, yes</p>",
        "id": 279351730,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1650329019
    },
    {
        "content": "<p>Actually, one problem is that, mathematically, the composition of rational functions is not quite well-defined everywhere : for example there is no good way to compose <code>1/X</code> with constant rational function <code>0</code>.  In these cases, the definition I gave above should probably evaluate to <code>0 : ratfunc R</code>, just as in lean <code>a/0</code> is defined (somewhat arbitrarily) to be <code>0</code>.</p>",
        "id": 279351958,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1650329258
    },
    {
        "content": "<p>I think there would be some problem with composing (in standard order) the rational functions <code>X + 1</code>, <code>1 / (X - 1)</code>, <code>1</code>.</p>",
        "id": 279352244,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650329507
    },
    {
        "content": "<p>You're right, it might be associative only when it's well-defined</p>",
        "id": 279355620,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1650333547
    },
    {
        "content": "<p>Interesting! Looks to me like this only happens when one of the functions involved is constant, which would imply that this operation is still power associative, and the above iterated function is well defined despite this, do we need a new typeclass for power associative monoids <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>?</p>",
        "id": 279370404,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650351627
    }
]