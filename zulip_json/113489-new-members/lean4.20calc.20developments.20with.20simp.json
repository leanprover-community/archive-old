[
    {
        "content": "<p>Hi ! I started 2 months ago in lean4 (without any prior experience in theorem proving languages, but a good experience in programming), and I encountered a <code>timeout at 'whnf', maximum number of heartbeats (50000) has been reached</code> error using <code>simp</code>.</p>\n<p>I am trying to automate solving equalities like <code>(3 * k + 2)^2 = 3 * (3 * k^2 + 4 * k + 1) + 1</code> using <code>simp</code>. For now, I've added a handful of very basic theorems (listed below), that are sufficient to solve it (works with <code>set_option maxHeartbeats 350000</code>). </p>\n<p>My current method solves <code>(3 * k + 1)^2 = 3 * (3 * k^2 + 2 * k) + 1</code> without problems (with the default <code>maxHeartbeats 50000</code>). For context : I'm trying to prove <code>a % b ≠ 0 → (q^2 % 3 = 1)</code> by development on the different cases, hence the two examples given.</p>\n<p>Reading <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>'s response at <a href=\"#narrow/stream/270676-lean4/topic/New.20simp.20feature\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/New.20simp.20feature</a>, and other topics (following the trace and trying to understand the process), I get the impression that</p>\n<ul>\n<li>the theorems I've added are too basic and thus require a big development</li>\n<li>developments like that would need better theorems / methods to work well</li>\n<li>mathlib4 might solve the problem but it seems like the theorems that I would need are not implemented yet</li>\n</ul>\n<p>Could a more experienced leaner give me a clue on whether this would need (the fully ported) mathlib4 or how to make it work without it (with only the current mathlib4 or only basic lean) ?</p>\n<p>Thanks a lot !<br>\nAugustin</p>\n<p><span aria-label=\"down\" class=\"emoji emoji-2b07\" role=\"img\" title=\"down\">:down:</span>️ the theorems added to simp</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- addition</span>\n      <span class=\"c1\">-- swapping</span>\n      <span class=\"n\">Nat.add_assoc</span>\n      <span class=\"n\">Nat.add_comm</span>\n      <span class=\"n\">Nat.add_left_comm</span>\n      <span class=\"c1\">-- zero &amp; one</span>\n      <span class=\"n\">Nat.add_zero</span>\n      <span class=\"n\">Nat.zero_add</span>\n    <span class=\"c1\">-- multiplication</span>\n      <span class=\"c1\">-- succ</span>\n      <span class=\"n\">Nat.mul_succ</span>\n      <span class=\"n\">Nat.succ_mul</span>\n      <span class=\"c1\">-- swapping</span>\n      <span class=\"n\">Nat.mul_assoc</span>\n      <span class=\"n\">Nat.mul_comm</span>\n      <span class=\"n\">Nat.mul_left_comm</span>\n      <span class=\"c1\">-- zero &amp; one</span>\n      <span class=\"n\">Nat.mul_zero</span>\n      <span class=\"n\">Nat.zero_mul</span>\n      <span class=\"n\">Nat.mul_one</span>\n      <span class=\"n\">Nat.one_mul</span>\n    <span class=\"c1\">-- powers</span>\n      <span class=\"c1\">-- zero &amp; one</span>\n      <span class=\"n\">Nat.pow_zero</span>\n      <span class=\"c1\">-- succ</span>\n      <span class=\"n\">Nat.pow_succ</span>\n    <span class=\"c1\">-- multiplication to addition</span>\n    <span class=\"n\">Nat.left_distrib</span>\n    <span class=\"n\">Nat.right_distrib</span>\n</code></pre></div>",
        "id": 278414816,
        "sender_full_name": "Augustin d'Oultremont",
        "timestamp": 1649517445
    },
    {
        "content": "<p>have you met <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a>?</p>",
        "id": 278414908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649517600
    },
    {
        "content": "<p>also you should show a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 278414987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649517691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/lean4.20calc.20developments.20with.20simp/near/278414987\">said</a>:</p>\n<blockquote>\n<p>also you should show a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</blockquote>\n<p>Sorry about that, here it is : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">Nat.add_left_comm</span> <span class=\"n\">Nat.add_zero</span> <span class=\"n\">Nat.zero_add</span> <span class=\"n\">Nat.mul_succ</span> <span class=\"n\">Nat.succ_mul</span> <span class=\"n\">Nat.mul_assoc</span> <span class=\"n\">Nat.mul_comm</span> <span class=\"n\">Nat.mul_left_comm</span> <span class=\"n\">Nat.mul_zero</span> <span class=\"n\">Nat.zero_mul</span> <span class=\"n\">Nat.mul_one</span> <span class=\"n\">Nat.one_mul</span> <span class=\"n\">Nat.pow_zero</span> <span class=\"n\">Nat.pow_succ</span> <span class=\"n\">Nat.left_distrib</span> <span class=\"n\">Nat.right_distrib</span>\n\n<span class=\"c1\">-- simple example</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"c1\">-- more complex, only works with set_option maxHeartbeats 350000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">350000</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 278415543,
        "sender_full_name": "Augustin d'Oultremont",
        "timestamp": 1649518485
    },
    {
        "content": "<p>to get a sense for why this proof method is so terrible, note that the normal form worked out in the first example is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span>\n          <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span>\n            <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span>\n              <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span>\n                <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span>\n                  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span>\n                    <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))))))))))))))</span>\n</code></pre></div>",
        "id": 278415786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649518840
    },
    {
        "content": "<p><code>ring</code> knows about scalar multiples and performs much better on these goals (and is ultimately what we want to use here)</p>",
        "id": 278415800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649518877
    },
    {
        "content": "<p>mathlib4 already has the <code>ring</code> tactic well enough for these examples</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 278415869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649518970
    }
]