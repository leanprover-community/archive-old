[
    {
        "content": "<p>Hi,</p>\n<p>I can't seem to find for the life of me the definition of the order of a group in mathlib - can anyone point this out to me? Additionally, is there some easy way of finding out stuff like this (without asking here) that I don't know about?</p>\n<p>Many thanks</p>",
        "id": 192062826,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1585334756
    },
    {
        "content": "<p>Groups aren't anything special -- you want to know how to find the order of a type, right?</p>",
        "id": 192062933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585334795
    },
    {
        "content": "<p>What type do you want the answer to be?</p>",
        "id": 192063089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585334834
    },
    {
        "content": "<p>a natural number or infinity</p>",
        "id": 192063338,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1585334932
    },
    {
        "content": "<p>Because you could have said \"a cardinal\" (which is a much more refined answer, where there are all sorts of different kinds of infinities)</p>",
        "id": 192063556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585335021
    },
    {
        "content": "<p>or you could have said \"Oh I am only interested in finite groups, so a natural number\"</p>",
        "id": 192063658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585335036
    },
    {
        "content": "<p>and in Lean these are all different functions because they map to different types</p>",
        "id": 192063763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585335052
    },
    {
        "content": "<p>I see - thanks! I think group.sizeof is something I want</p>\n<p>Another thing - what is the order of an element of a group? (as in, what is it in mathlib, not what is it in maths)</p>",
        "id": 192066312,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1585336199
    },
    {
        "content": "<p>What is the type of the value you want returned?</p>",
        "id": 192066672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585336368
    },
    {
        "content": "<p>here's one place to look: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/order_of_element.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/order_of_element.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/order_of_element.lean</a></p>",
        "id": 192066765,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585336420
    },
    {
        "content": "<p>I think I'll start with elements of finite order haha</p>",
        "id": 192066792,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1585336437
    },
    {
        "content": "<p>Oh thanks!</p>",
        "id": 192066801,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1585336441
    },
    {
        "content": "<p>The answers to your questions depend on which domain you want to apply them in. If you are working with all groups then you need one function, if you're working with finite groups then you need a different function because now the answer can't be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>. Then you might find that some computer scientist has come along and decreed that actually it's OK because if an element does have infinite order then we may as well just say it has order 0 or 37 and then we have an order function which takes values in the natural number and works even if the elements have infinite order, it just gives the wrong answer</p>",
        "id": 192067310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585336668
    },
    {
        "content": "<p>In short, the questions you're asking sound mathematically fine but formally they are sufficiently vague for the answer actually to be \"well there are several functions which do an approximation to what you are asking in different situations\"</p>",
        "id": 192067488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585336733
    },
    {
        "content": "<p>Ah right I see</p>\n<p>I'm not very used to this, hopefully it'll become more obvious when I'm making a huge number of assumptions</p>",
        "id": 192068138,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1585337032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221895\">Luca Seemungal</span> <a href=\"#narrow/stream/113489-new-members/topic/order.20of.20a.20group/near/192066312\" title=\"#narrow/stream/113489-new-members/topic/order.20of.20a.20group/near/192066312\">said</a>:</p>\n<blockquote>\n<p>I see - thanks! I think group.sizeof is something I want</p>\n<p>Another thing - what is the order of an element of a group? (as in, what is it in mathlib, not what is it in maths)</p>\n</blockquote>\n<p><code>group.sizeof</code> is not what you want for example <code>#eval add_group.sizeof (zmod 4) $ add_comm_group.to_add_group (zmod 4)</code>  returns 1.</p>",
        "id": 192089214,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585349149
    },
    {
        "content": "<p>All the <code>.sizeof</code> functions are essentially internal type-theoretic implementation details.</p>",
        "id": 192102483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585365154
    },
    {
        "content": "<p>They probably should have been called <code>._sizeof</code> or something to make it clearer.</p>",
        "id": 192102490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585365169
    }
]