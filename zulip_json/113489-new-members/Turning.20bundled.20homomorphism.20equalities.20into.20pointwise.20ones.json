[
    {
        "content": "<p>I'm playing around with some stuff regarding abelian categories, and I'm getting stuck trying to turn a proof that two homs in <code>CommAddGroup</code> are equal into one that I can apply pointwise. More specifically, I have a proof <code>F.F.map f ‚â´ Œ±.app Y = Œ±.app X ‚â´ G.F.map f</code> in my hands, and I want to be able to turn this into something of the form that <code>(Œ±.app Y) ((F.F.map f) x) = (G.F.map f) ((Œ±.app X) x)</code>. I've tried <code>congr_fun</code>, but it yells about some type mismatch with metavariables.</p>\n<p>The code in question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2020 Reed Mullanix. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Reed Mullanix</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.abelian</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.fin_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.full_subcategory</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.finite_limits</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.preadditive</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.exact</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">AddCommGroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory.abelian</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">First, let us start by defining left exact functors, and some simple properties</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">left_exact_functor</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">preserves_finite_limits</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">ùí•</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">fin_category</span> <span class=\"n\">J</span> <span class=\"bp\">ùí•</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">preserves_limits_of_shape</span> <span class=\"n\">J</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">left_exact_functors</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">):=</span>\n<span class=\"n\">induced_category.category</span> <span class=\"n\">left_exact_functor.F</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">preadditive</span> <span class=\"o\">(</span><span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">hom_group</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n          <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">add_add_add_comm</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n        <span class=\"kd\">end</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- Stuck right here! This is the proof that I want to make into a pointwise one.</span>\n        <span class=\"k\">have</span> <span class=\"n\">Œ±_nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Œ±.naturality</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n        <span class=\"gr\">sorry</span>\n      <span class=\"kd\">end</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">add_comp'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory.abelian</span>\n</code></pre></div>",
        "id": 230293209,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1615781791
    },
    {
        "content": "<p>I don't know if there are helper lemmas for this, but you can brute force your way through this by using <code>change</code></p>",
        "id": 230295107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615783972
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 230295115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615783988
    },
    {
        "content": "<p>and then rewrite with <code>alpha.naturality</code></p>",
        "id": 230295121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615783998
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.congr_fun/src\">src#add_monoid_hom.congr_fun</a></p>",
        "id": 230301807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615791041
    },
    {
        "content": "<p>Managed to prove everything but there is a loooot of <code>change</code> magic involved to get things to compute nicely. Feels like I'm missing some obvious tool:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2020 Reed Mullanix. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Reed Mullanix</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.abelian</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.fin_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.full_subcategory</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.finite_limits</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.preadditive</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.exact</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">AddCommGroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory.abelian</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">First, let us start by defining left exact functors, and some simple properties</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">left_exact_functor</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">preserves_finite_limits</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">ùí•</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">fin_category</span> <span class=\"n\">J</span> <span class=\"bp\">ùí•</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">preserves_limits_of_shape</span> <span class=\"n\">J</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">left_exact_functors</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">):=</span>\n<span class=\"n\">induced_category.category</span> <span class=\"n\">left_exact_functor.F</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">natural_transformation_add</span> <span class=\"o\">[</span><span class=\"n\">preadditive</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_add</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">add_add_add_comm</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n      <span class=\"kd\">end</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- We have to do a bit of a silly dance here to get the naturality proofs to work pointwise.</span>\n      <span class=\"k\">have</span> <span class=\"n\">Œ±_nat</span> <span class=\"o\">:</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">F.F.map</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G.F.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">Œ±.naturality</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">Œ≤_nat</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤.app</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">F.F.map</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G.F.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.naturality</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Œ±_nat</span><span class=\"o\">,</span> <span class=\"n\">Œ≤_nat</span><span class=\"o\">]</span>\n    <span class=\"kd\">end</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_zero</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_neg</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n      <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">g‚ÇÅ</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n      <span class=\"kd\">end</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- We have to do a bit of a silly dance here to get the naturality proofs to work pointwise.</span>\n      <span class=\"k\">have</span> <span class=\"n\">Œ±_nat</span> <span class=\"o\">:</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">F.F.map</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G.F.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">Œ±.naturality</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Œ±_nat</span>\n    <span class=\"kd\">end</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat_add_homo</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nat_add</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">preadditive</span> <span class=\"o\">(</span><span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">hom_group</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">nat_add</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n      <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">nat_zero</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n      <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">nat_zero</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">nat_zero</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">nat_zero</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">nat_zero</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">nat_neg</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n      <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">nat_neg</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">nat_neg</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n      <span class=\"kd\">end</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">add_comp'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- Even more golf to get this to a place where simp can handle it</span>\n      <span class=\"n\">change</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">((</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ≥</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n      <span class=\"n\">refl</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">comp_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ≥</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n      <span class=\"n\">refl</span>\n    <span class=\"kd\">end</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory.abelian</span>\n</code></pre></div>",
        "id": 230444985,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1615856440
    },
    {
        "content": "<p>Likely we can add a lemma (even with <code>@[simp]</code>) for any category where the morphisms have a function coercion, for the \"naturality applied at a point\" statement. This may be less painful.</p>",
        "id": 230445781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615857067
    },
    {
        "content": "<p>Hmm, maybe you can't make it that general.</p>",
        "id": 230446028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615857287
    },
    {
        "content": "<p>Seems reasonable to me, but I'm pretty inexperienced with exactly how/when lean decides to compute things down.</p>",
        "id": 230446029,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1615857287
    },
    {
        "content": "<p>Maybe something about concrete categories could work?</p>",
        "id": 230446111,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1615857348
    },
    {
        "content": "<p>In any case, doing it generally is probably best punted until someone works out how to do enriched categories nicely. :-)</p>",
        "id": 230446121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615857359
    },
    {
        "content": "<p>Fair enough <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I am a bit confused as to why <code>dsimp</code> cant handle this, but I can keep throwing <code>change</code> around blindly so it isn't a blocker</p>",
        "id": 230446257,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1615857482
    },
    {
        "content": "<p>Here is a bit of a simplification up to <code>nat_add</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2020 Reed Mullanix. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Reed Mullanix</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group.abelian</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.fin_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.full_subcategory</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor_category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.finite_limits</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.preadditive</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.exact</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">AddCommGroup</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory.nat_trans</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- TODO generalize this to any concrete category?</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">naturality_apply</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">AddCommGroup</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">‚¶É</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">‚¶Ñ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Œ±.app</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_hom.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">Œ±.naturality</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory.nat_trans</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory.abelian</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">First, let us start by defining left exact functors, and some simple properties</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">left_exact_functor</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">preserves_finite_limits</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">ùí•</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">fin_category</span> <span class=\"n\">J</span> <span class=\"bp\">ùí•</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">preserves_limits_of_shape</span> <span class=\"n\">J</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">left_exact_functors</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">):=</span>\n<span class=\"n\">induced_category.category</span> <span class=\"n\">left_exact_functor.F</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">natural_transformation_add</span> <span class=\"o\">[</span><span class=\"n\">preadditive</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_add</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_add_add_comm</span><span class=\"o\">],</span>\n      <span class=\"kd\">end</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_zero</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_neg</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n      <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">g‚ÇÅ</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n      <span class=\"kd\">end</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- We have to do a bit of a silly dance here to get the naturality proofs to work pointwise.</span>\n      <span class=\"k\">have</span> <span class=\"n\">Œ±_nat</span> <span class=\"o\">:</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">F.F.map</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">G.F.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.congr_fun</span> <span class=\"o\">(</span><span class=\"n\">Œ±.naturality</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Œ±_nat</span>\n    <span class=\"kd\">end</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat_add_homo</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nat_add</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">preadditive</span> <span class=\"o\">(</span><span class=\"n\">left_exact_functor</span> <span class=\"n\">C</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">hom_group</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">nat_add</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n      <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">nat_zero</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n      <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">nat_zero</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">nat_zero</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">nat_zero</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">nat_zero</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">nat_neg</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n      <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">nat_neg</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">nat_neg</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n      <span class=\"kd\">end</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">add_comp'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- Even more golf to get this to a place where simp can handle it</span>\n      <span class=\"n\">change</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">((</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ≥</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n      <span class=\"n\">refl</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">comp_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat_add</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ≥</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Œ≤.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">Œ≥.app</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Œ±.app</span> <span class=\"n\">X</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n      <span class=\"n\">refl</span>\n    <span class=\"kd\">end</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory.abelian</span>\n</code></pre></div>",
        "id": 230447010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615858129
    },
    {
        "content": "<p>I get a timeout on the last instance: you should break it into smaller pieces.</p>",
        "id": 230447102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615858204
    },
    {
        "content": "<p>Ah, so the basic problem is that you are making <code>def</code>s without corresponding simp lemmas.</p>",
        "id": 230447184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615858291
    },
    {
        "content": "<p>Just try sticking <code>@[simps]</code> on <code>nat_add</code> and <code>nat_zero</code>.</p>",
        "id": 230447195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615858303
    },
    {
        "content": "<p>Everything will be infinitely easier. :-)</p>",
        "id": 230447204,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615858312
    },
    {
        "content": "<p>Anytime you find yourself using <code>change</code> or <code>unfold</code>, you should be thinking \"how could I have got <code>dsimp</code> or <code>simp</code> to do this itself\", and the answer is nearly always \"write more <code>@[simp]</code> lemmas.</p>",
        "id": 230447296,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615858382
    },
    {
        "content": "<p>Welp, adding <code>@[simps]</code> seems to be the magic ingredient I was missing! Breaking up the preadditive instance is a good call, bad habit of mine.</p>",
        "id": 230464120,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1615874995
    }
]