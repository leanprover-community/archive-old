[
    {
        "content": "<p>I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.fib</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.composition</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fibs</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">composition</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">c.blocks</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">fib</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and lean is still telling me <code>failed to synthesize type class instance for  n : ℕ  ⊢ decidable_pred (λ (c : composition n), ∀ (i : ℕ), i ∈ c.blocks → i ∈ set.range fib)</code>.</p>\n<p><code>noncomputable theory</code> means something like \"I don't care about decidability\" already right? Is the reason for the complaint there that basically Lean can't prove that set is a finset?</p>",
        "id": 230631520,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615950790
    },
    {
        "content": "<p>OK I guess I see, <code>finset.filter</code> says what you give it has to be decidable regardless of what I did in my file</p>",
        "id": 230632296,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615951577
    },
    {
        "content": "<p>I guess using a set works then instead since I don't really care whether it's finite or not <code>def fibs (n : ℕ) : set (composition n) := {c | ∀ i ∈ c.blocks, i ∈ set.range fib}</code>.</p>",
        "id": 230632410,
        "sender_full_name": "Julian Berman",
        "timestamp": 1615951718
    },
    {
        "content": "<p><code>open_locale classical</code></p>",
        "id": 230633420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615952564
    }
]