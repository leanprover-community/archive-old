[
    {
        "content": "<p>I'm trying to understand the <code>nat.find_xxx</code> API and as far as I understand it, it looks like rather some helpers which prove the induction over natural numbers.</p>\n<p>I have some set of natural numbers which is infinite, nonempty and I'd like to take the smallest element, I could reuse the Inf/is_least machinery but I think there must be more elementary things to do?</p>\n<p>Namely, I'm interested in this (mis-formulated?) lemma:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">smallest_element</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"err\">\\</span><span class=\"n\">notin</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 192928608,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586037014
    },
    {
        "content": "<p>(I cannot use <code>finset.min</code> because of the infinite condition.)</p>",
        "id": 192928615,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586037044
    },
    {
        "content": "<p>And I answer myself…</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">smallest_element</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"err\">∉</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>seems to work just fine.</p>\n<p>But I wonder if there is a more canonical way.</p>",
        "id": 192928733,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586037213
    },
    {
        "content": "<p>Well-ordered principle: every non-empty subset of the natural numbers has a least element.</p>",
        "id": 192931192,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1586041230
    },
    {
        "content": "<p>Mathematical induction is true if and only if ℕ is well-ordered.</p>",
        "id": 192931253,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1586041341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"259186\">Daniel Keys</span> <a href=\"#narrow/stream/113489-new-members/topic/Find.20min.20of.20a.20set.20of.20natural.20numbers/near/192931192\" title=\"#narrow/stream/113489-new-members/topic/Find.20min.20of.20a.20set.20of.20natural.20numbers/near/192931192\">said</a>:</p>\n<blockquote>\n<p>Well-ordered principle: every non-empty subset of the natural numbers has a least element.</p>\n</blockquote>\n<p>Is there a direct theorem using <code>is_least</code>?</p>",
        "id": 192931570,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586041968
    },
    {
        "content": "<p>Not sure what you mean here,  but it seems to me that your <code>smallest_element</code> lemma restates an axiom:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">well_ordered</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 192932457,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1586043755
    },
    {
        "content": "<p>That's not an axiom in Lean</p>",
        "id": 192932481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586043812
    },
    {
        "content": "<p>that's a theorem</p>",
        "id": 192932482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586043819
    },
    {
        "content": "<p>Good point. I didn't mean it was in Lean.</p>",
        "id": 192932530,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1586043882
    },
    {
        "content": "<p>The question is how to do all of this stuff in Lean.</p>",
        "id": 192932536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586043908
    },
    {
        "content": "<p>Isn't this hidden somewhere in Lean - i.e. by the definition of the naturals as an inductive type?</p>",
        "id": 192932588,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1586043983
    },
    {
        "content": "<p>Sure</p>",
        "id": 192932591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586043997
    },
    {
        "content": "<p>The question is where is it hidden and what is the canonical way to get it out.</p>",
        "id": 192932595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586044014
    },
    {
        "content": "<p>&lt; is not some predicate which is canonically associated to nat; &lt; has a definition which probably uses +</p>",
        "id": 192932604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586044050
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192932659,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1586044151
    },
    {
        "content": "<p>I hope it's okay to revive an old thread, but I wanted to write a proof of the well-ordering principle for positive naturals and so was searching through old Zulip threads mentioning WOP, of which there are a few. I ended up figuring out this (not particularly graceful) tactic proof, so I thought I'd stick it here in case anyone else tries looking up \"well-ordering principle\" and finds it useful. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pnat_wf</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">measure_wf</span> <span class=\"n\">coe</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">well_ordering_principle</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A.nonempty</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">well_founded.has_min</span> <span class=\"n\">pnat_wf</span> <span class=\"n\">A</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span><span class=\"n\">H2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,{</span><span class=\"n\">exact</span> <span class=\"n\">H1</span><span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">H3</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span> <span class=\"n\">x</span> <span class=\"n\">H3</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt.mp</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218013784,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606404413
    },
    {
        "content": "<p>FYI, \"well ordering principle\" is another way to spell \"induction\"</p>",
        "id": 218014224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606404665
    }
]