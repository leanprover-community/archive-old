[
    {
        "content": "<p>I'm playing around with naked lean without mathlib. How do I rewrite at a specific spot? I know I can do this using nth_rewrite, but I am not wanting to use \"import tactic\". </p>\n<p>Working example: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divides_N</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">less_N</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">div_less</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">divides_N</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">less_N</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">less_N</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"c1\">--struck since it rewrites everywhere, except just in the first spot I want</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How do I get it to write 1 * a only at the first a, not at subsequent a's? My best guess is something involving lots of _ and type inference but I couldn't get anything working. Many thanks.</p>",
        "id": 246160043,
        "sender_full_name": "Sara Fish",
        "timestamp": 1626385133
    },
    {
        "content": "<p>Here is the tactic state before one_mul</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Here is the tactic state after one_mul</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 246160109,
        "sender_full_name": "Sara Fish",
        "timestamp": 1626385189
    },
    {
        "content": "<p>I don't think there is a way to do this with the built-in <code>rw</code> tactic, because the expression <code>a</code> you want to rewrite appears again elsewhere in the term. I would suggest using <code>suffices</code> to give the exact new goal you want, and working backwards.</p>",
        "id": 246160374,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626385350
    },
    {
        "content": "<p>You might be able to use rewrites in <a href=\"https://leanprover-community.github.io/extras/conv.html\">conv mode</a> to do this.</p>",
        "id": 246160407,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626385390
    },
    {
        "content": "<p>er, I guess I really meant working forwards!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">nat.one_mul</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 246160667,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626385551
    },
    {
        "content": "<p>I don't think <code>a + (k - 1) * a = k * a</code> is true, so it might be hard to prove.  If <code>k = 0</code>, then since <code>0 - 1 = 0</code>, you would need to prove <code>a = 0</code>.</p>",
        "id": 246168581,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626391565
    },
    {
        "content": "<p>Yeah, when <code>b = 0</code>, the lemma <code>div_less</code> is false since every <code>a</code> divides <code>0</code>, but most values of <code>a</code> aren't less than or equal to <code>0</code>.</p>",
        "id": 246168860,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626391839
    },
    {
        "content": "<p>I forget how I'm supposed to use the injectivity of <code>nat.succ</code>, but <code>nat.no_confusion</code> seems to do the trick. (I just wanted to see if I could disprove the lemma without importing anything.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">divides_N</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">less_N</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_div_less</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">divides_N</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">less_N</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">divides_N</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">existsi</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">hk</span><span class=\"o\">,</span>  <span class=\"c1\">-- (was exact nat.no_confusion hk)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246169224,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626392154
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.succ_inj'\">docs#nat.succ_inj'</a></p>",
        "id": 246169316,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626392238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> That needs to be imported though.  I guess I meant whether there was some basic tactic that could deduce <code>hk : k.succ = 0</code> is a contradiction.  That jogged my memory, though, about <code>injection hk</code></p>",
        "id": 246169722,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626392639
    },
    {
        "content": "<p>I guess I also said the wrong thing.  I didn't mean the injectivity of <code>succ</code>, but that the image of <code>succ</code> is disjoint from <code>0</code>.  (It's sort of like injectivity of the constructors in total.)</p>",
        "id": 246169908,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626392785
    },
    {
        "content": "<p>Thanks all. Both for the tactic suggestions and for pointing out that the lemma was actually false. Classic mistake <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 246170703,
        "sender_full_name": "Sara Fish",
        "timestamp": 1626393601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299025\">@Sara Fish</span> Back when I was doing the natural number game, I remember late one night asking how I was supposed to deal with the goal <code>0 = succ b</code>, and Kevin Buzzard kindly informed me that this cannot be proved <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 246172162,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626394924
    },
    {
        "content": "<p>strictly speaking that's an open question</p>",
        "id": 246174047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626396836
    }
]