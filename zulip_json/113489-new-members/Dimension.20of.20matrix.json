[
    {
        "content": "<p>Still trying to get my lean-sea-legs. Currently, I'd like to show that the dimension of a <code>A : M_n(R)</code> is <code>n^2</code>. Mathlib-wise, that seems to mean going from matrix -&gt; linear operator -&gt; basis/rank -&gt; vector space -&gt; dimension. Is that correct? What's the best way of searching the mathlib docs to figure out the right incantations to go down this path?</p>",
        "id": 200165672,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591657005
    },
    {
        "content": "<p>I'm not sure what exactly your chain of arrows means.</p>",
        "id": 200166701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591657884
    },
    {
        "content": "<p>You need a <code>vector_space R (matrix n n r)</code> instance, and a <code>finite_dimensional R (matrix n n r)</code> in order to be able to assert <code>findim R (matrix n n r) = n.card^2</code>.</p>",
        "id": 200166778,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591657929
    },
    {
        "content": "<p>(And certainly you should do this for rectangular matrices, anyway.)</p>",
        "id": 200166792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591657943
    },
    {
        "content": "<p>There are probably already these instances for function types, so in an ideal world it may just be a matter of unfolding the definition of <code>matrix</code> and running <code>apply_instance</code>.</p>",
        "id": 200166823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591657983
    },
    {
        "content": "<p>On my way to trying to understand what you mean, here's a related example of what I think should be possible to prove:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Mn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">MnR</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Mn</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">rank</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">MnR</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 200172806,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591663789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Dimension.20of.20matrix/near/200166778\">said</a>:</p>\n<blockquote>\n<p>You need a <code>vector_space R (matrix n n r)</code> instance, and a <code>finite_dimensional R (matrix n n r)</code> in order to be able to assert <code>findim R (matrix n n r) = n.card^2</code>.</p>\n</blockquote>\n<p><del><code>findim</code> is not found in the mathlib docs by the supplied Google search, but github got my back.</del><br>\nIt \"corrected\" findim to \"findom\". It does find findim.</p>",
        "id": 200178849,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591672886
    },
    {
        "content": "<p>I can't find the lemma that would give us the product of the dimensions from the linear map version of the matrix as <code>((n → R) →ₗ[R] n → R)</code>. I see the simp lemma <code>finite_dimensional.findim_fin_fun</code>, which gives us what we would be multiplying.</p>",
        "id": 200180511,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591675536
    },
    {
        "content": "<p>Yes, I agree this lemma is missing.</p>",
        "id": 200180704,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591675820
    },
    {
        "content": "<p>Presumably one should prove that a finitely generated module tensored with a noetherian module is again noetherian.</p>",
        "id": 200180766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591675942
    },
    {
        "content": "<p>But maybe that's more than you want to bite off for now!</p>",
        "id": 200180772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591675960
    },
    {
        "content": "<p>In any case, that won't immediately calculate the dimension for you, just show that it is finite dimensional.</p>",
        "id": 200180781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676005
    },
    {
        "content": "<p>Yeah, you're right that working with modules is going a little far from me.</p>",
        "id": 200180905,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591676189
    },
    {
        "content": "<p>Just trying to learn how to speak mathlib. How does one work with the fintype.card structure, which I get from the following?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">rank</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">diagonal_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">rank_diagonal</span><span class=\"o\">,</span> <span class=\"c1\">--↑(fintype.card {i // 1 ≠ 0}) = 2</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">--↑(fintype.card {i // true}) = 2</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200180932,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591676270
    },
    {
        "content": "<p>You might have to do a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 200181178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676632
    },
    {
        "content": "<p>But my guess is that you want some theorem that says <code>fintype.card</code> is constant along equivalences, and provide the equivalence <code>{ x : X // true }</code> with <code>X</code>.</p>",
        "id": 200181222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676666
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_congr/src\">src#fintype.card_congr</a></p>",
        "id": 200181244,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676722
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"err\">≃</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 200181323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676817
    },
    {
        "content": "<p>So for your dimension calculation, if you don't want to level up to noetherian modules quite yet, there's probably a way to just explicitly construct and verify a basis.</p>",
        "id": 200181351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Dimension.20of.20matrix/near/200181178\">said</a>:</p>\n<blockquote>\n<p>You might have to do a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"c1\">-- we specialize matrix for n × n matrices</span>\n<span class=\"c1\">-- with a reducible definition because it&#39;s just a shell defn</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Mn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- and a shortcut for Mn(ℝ)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">MnR</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Mn</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">rank</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_lin</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">diagonal_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">rank_diagonal</span><span class=\"o\">,</span> <span class=\"c1\">--↑(fintype.card {i // 1 ≠ 0}) = 2</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">--↑(fintype.card {i // true}) = 2</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200181542,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591677167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> almost certainly what you want to do is show that currying is linear. Then you can use that <code>matrix n m X</code> is linearly equivalent to <code>(n * m) -&gt; X</code>, which you already know the dimension of.</p>",
        "id": 200184541,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591682353
    },
    {
        "content": "<p>That makes sense. Right now I'm down a seemingly dark path of </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">is_basis</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">si</span><span class=\"o\">,</span> <span class=\"n\">sj</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">si</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">sj</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">linear_independent</span><span class=\"bp\">.</span><span class=\"n\">of_subtype_range</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">ia</span><span class=\"o\">,</span> <span class=\"n\">ja</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">ib</span><span class=\"o\">,</span> <span class=\"n\">jb</span><span class=\"bp\">⟩</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">example</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">ia</span> <span class=\"bp\">=</span> <span class=\"n\">ib</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">ja</span> <span class=\"bp\">=</span> <span class=\"n\">jb</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">],</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- f : (λ (i : fin m) (j : fin n), ite (i = ia ∧ j = ja) 1 0)</span>\n      <span class=\"c1\">--      = λ (i : fin m) (j : fin n), ite (i = ib ∧ j = jb) 1 0,</span>\n      <span class=\"o\">},</span>\n     <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200184609,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591682475
    },
    {
        "content": "<p>Which seems like an interpretation of your currying statement. It's probably more complicated to prove that currying statement in the context of the <code>ite</code> and <code>matrix</code> structures.</p>",
        "id": 200184793,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591682710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Yup, I think that a bit more abstraction will actually make your life easier.</p>",
        "id": 200185958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591684217
    },
    {
        "content": "<p>Not that you aren't using anything about <code>fin n</code> apart from it being a fintype.</p>",
        "id": 200185967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591684232
    },
    {
        "content": "<p>So you might as well try to work with arbitrary fintypes</p>",
        "id": 200185985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591684261
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">dimension</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">dim_matrix</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"c1\">-- why doesn&#39;t unfold work?</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dim_fun_eq_lift_mul</span><span class=\"o\">,</span> <span class=\"n\">dim_fun&#39;</span><span class=\"o\">,</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">lift_nat_cast</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 200186265,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591684599
    },
    {
        "content": "<p>Now you only need <code>finite_dimensional</code> and you can use <code>findim</code> so that you avoid the cardinals.</p>",
        "id": 200186302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591684679
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">dim_matrix</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"c1\">-- why doesn&#39;t unfold work?</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dim_fun_eq_lift_mul</span><span class=\"o\">,</span> <span class=\"n\">dim_fun&#39;</span><span class=\"o\">,</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">lift_nat_cast</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">finite_dimensional_matrix</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional_iff_dim_lt_omega</span><span class=\"o\">,</span> <span class=\"n\">dim_matrix</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">],</span>\n<span class=\"n\">exact</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">nat_lt_omega</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">findim_matrix</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">findim</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">nat_cast_inj</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">findim_eq_dim</span><span class=\"o\">,</span> <span class=\"n\">dim_matrix</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 200186662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591685122
    },
    {
        "content": "<p>Specialized to N:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">dim_matrix</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- why doesn&#39;t unfold work?</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dim_fun_eq_lift_mul</span><span class=\"o\">,</span> <span class=\"n\">dim_fin_fun</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 200186918,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591685458
    },
    {
        "content": "<p>So the crucial point was to recognize <code>(η → V)</code> in the docs as a matrix, because the underlying definition of a matrix is a function.</p>",
        "id": 200187721,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591686296
    },
    {
        "content": "<p>Per Scott's suggestion, I'm also trying the exercise of showing that currying is linear. What's the incantation to unravel the <code>prod.rec</code> in the following? I want to supply the proof that addition of matrices is linear.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">linear_prod</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_equiv</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- prod.rec (λ (fst : m) (snd : n), id_rhs k (x fst snd + y fst snd)) =</span>\n    <span class=\"c1\">-- prod.rec (λ (fst : m) (snd : n), id_rhs k (x fst snd))</span>\n    <span class=\"c1\">--  + prod.rec (λ (fst : m) (snd : n), id_rhs k (y fst snd))</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200195422,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591691844
    },
    {
        "content": "<p>Note that there are already definitions <code>function.curry</code> and <code>function.uncurry</code>.</p>",
        "id": 200195582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591691978
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 200195595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591691987
    },
    {
        "content": "<p>You probably want to use those</p>",
        "id": 200195596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591691987
    },
    {
        "content": "<p>Do you know about hole commands?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">linear_prod</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_equiv</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>and then click on the lightbulb and select \"generate a skeleton for the structure under construction\"</p>",
        "id": 200195863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591692158
    },
    {
        "content": "<p>I saw it before in some of the tutorials, but didn't grok it to remember to use it.</p>",
        "id": 200195884,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591692187
    },
    {
        "content": "<p>That should be a <code>def</code> not a <code>lemma</code>, by the way.</p>",
        "id": 200195997,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591692274
    },
    {
        "content": "<p>Thanks for all the patience!</p>",
        "id": 200196033,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591692313
    },
    {
        "content": "<p>I think I got the instance finally:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">def</span> <span class=\"n\">linear_prod</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_equiv</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">curry</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">matrix_fin_dim</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">linear_prod</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200202686,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591696654
    },
    {
        "content": "<p>Now to figure out how it makes the <code>findim</code> call nice and easy.</p>",
        "id": 200202700,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591696670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> One tip: don't make <code>k</code>, <code>m</code>, and <code>n</code> implicit in <code>linear_prod</code>.</p>",
        "id": 200203630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591697239
    },
    {
        "content": "<p>In this special case, lean can figure them out, but usually it won't.</p>",
        "id": 200203659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591697266
    },
    {
        "content": "<p>It wasn't really figuring them out, that's why I had to do the <code>@linear_equiv</code> after a lot of struggling</p>",
        "id": 200203749,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591697327
    },
    {
        "content": "<p>How do I know in general when to make the explicit? The definition of <code>linear_prod</code> seemed to me like the <code>k m n</code> would be arbitrary and inferred.</p>",
        "id": 200203775,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591697361
    },
    {
        "content": "<p>Make parameters implicit when they can be inferred by later <em>hypotheses</em></p>",
        "id": 200203935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591697478
    },
    {
        "content": "<p>OK, I think this is it, finally!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">def</span> <span class=\"n\">linear_prod</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_equiv</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">curry</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">matrix_fin_dim</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">×</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linear_prod</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Mn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">MnR</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Mn</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">findim</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">findim_eq</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">linear_prod</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200204303,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591697730
    },
    {
        "content": "<p>Looking good.</p>",
        "id": 200205689,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591698644
    },
    {
        "content": "<p>Notice your first <code>def linear_prod</code> now has nothing to do with matrices or fintypes at all.</p>",
        "id": 200205706,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591698660
    },
    {
        "content": "<p>You could generalise this just to <code>linear_equiv k (m -&gt; n -&gt; k) ((m × n) -&gt; k)</code>.</p>",
        "id": 200205735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591698692
    },
    {
        "content": "<p>Just did that in my file, and placed <code>_</code> for the unused lambda vars</p>",
        "id": 200205846,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591698761
    },
    {
        "content": "<p>Then the <code>[fintype m]</code> seem to be unnecessary too</p>",
        "id": 200205964,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591698842
    },
    {
        "content": "<p>There's also the existing definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.arrow_arrow_equiv_prod_arrow/src\">src#equiv.arrow_arrow_equiv_prod_arrow</a></p>",
        "id": 200206165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591698969
    },
    {
        "content": "<p>The body of that def is pretty spicy.</p>",
        "id": 200206202,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591698999
    },
    {
        "content": "<p>which you could use to write four of the fields, e.g. as something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n   <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n   <span class=\"bp\">..</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">arrow_arrow_equiv_prod_arrow</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200206235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591699034
    },
    {
        "content": "<p>Another good exercise here would be to golf away the <code>begin ... end</code> block in <code>matrix_fin_dim</code>: you can write that directly in term mode with no trouble.</p>",
        "id": 200206328,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591699097
    },
    {
        "content": "<p>That's pretty awesome. What would have been a good way to find the <code>equiv.arrow.*</code>, just practice and familiarity with the codebase?</p>",
        "id": 200206391,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591699172
    },
    {
        "content": "<p>I found it by opening up the file <code>data/equiv/basic.lean</code>, and searching for the word <code>curry</code>.</p>",
        "id": 200206473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591699210
    },
    {
        "content": "<p>Sadly <code>curry</code> wasn't actually in the name, but it's used in the construction.</p>",
        "id": 200206480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591699221
    },
    {
        "content": "<p>But presumably <code>library_search</code> will find it.</p>",
        "id": 200206492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591699233
    },
    {
        "content": "<p>Often the trick with good <code>library_search</code> use is to write an <code>example</code> that states exactly what you want.</p>",
        "id": 200206507,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591699249
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200206508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591699250
    },
    {
        "content": "<p>Ah. I searched the docs for curry, and found <code>data/equiv/basic.lean</code> too, but didn't look at the source, and didn't realize that the <code>curry_uncurry</code> theorem was exactly what <code>left_inv</code> meant.</p>",
        "id": 200206554,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591699284
    },
    {
        "content": "<p>You can even switch sides and library_search still finds it</p>",
        "id": 200206562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591699294
    },
    {
        "content": "<p>Patrick also hints well that understanding that the ≃ relationship is a subset of the ≃ₗ helps identify where to find pieces to put together.</p>",
        "id": 200206653,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591699360
    },
    {
        "content": "<p>Looks like another PR soon! :-)</p>",
        "id": 200206804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591699458
    },
    {
        "content": "<p>This linear version of <code>equiv.arrow_arrow_equiv_prod_arrow</code> is clearly needed.</p>",
        "id": 200207083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591699682
    },
    {
        "content": "<p>And of course applying it to compute dimension of matrix spaces is also very welcome.</p>",
        "id": 200207109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591699700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Dimension.20of.20matrix/near/200206165\">said</a>:</p>\n<blockquote>\n<p>There's also the existing definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.arrow_arrow_equiv_prod_arrow/src\">src#equiv.arrow_arrow_equiv_prod_arrow</a></p>\n</blockquote>\n<p>We probably want to add \"curry\" or \"uncurry\" to the docstring here (and in any other related places).</p>",
        "id": 200209579,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591701559
    },
    {
        "content": "<p>we could also just call it <code>curry_equiv</code> if people prefer that name</p>",
        "id": 200209606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591701594
    },
    {
        "content": "<p>We should really find a better way to use aliases for this kind of thing</p>",
        "id": 200209696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591701657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Dimension.20of.20matrix/near/200207083\">said</a>:</p>\n<blockquote>\n<p>This linear version of <code>equiv.arrow_arrow_equiv_prod_arrow</code> is clearly needed.</p>\n</blockquote>\n<p>Would a PR of this be preferred in this general curry form, or in the language of  linear maps <code>→ₗ[R]</code>?</p>",
        "id": 200274976,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591729279
    },
    {
        "content": "<p>I currently have a definition going:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">curry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Linear equivalence between an uncurried and curried function. -/</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">curry</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]:</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V₂</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V₂</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">arrow_arrow_equiv_prod_arrow</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">curry</span>\n</code></pre></div>\n\n\n<p>but when trying to use it as a regular linear_equiv, I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">curry</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   linear_equiv.curry.symm</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   linear_equiv.curry</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   (?m_2 → ?m_3 → ?m_1) ≃ₗ[?m_1] ?m_2 × ?m_3 → ?m_1 : Type (max (max ? ? ?) (max ? ?) ?)</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ?m_2 ≃ₗ[?m_1] ?m_3 : Type (max ? ?)</span>\n</code></pre></div>",
        "id": 200292432,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591737708
    },
    {
        "content": "<p>Is the problem that you're missing arguments to curry?</p>",
        "id": 200296959,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591740234
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"c\">/-</span><span class=\"cm\">- Linear equivalence between an uncurried and curried function. -/</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">curry</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]:</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V₂</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V₂</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">z</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">arrow_arrow_equiv_prod_arrow</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>This first one works and the second gives the same error as you.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">curry</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">V₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">curry</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 200297228,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591740400
    },
    {
        "content": "<p>That was super informative -- I was relying on the implicit arguments in the module, and had to make them explicit with a <code>variables (R ...)</code> call. Now I understand what that call does. Before, it was unclear what it was doing without type information.</p>",
        "id": 200308751,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591749883
    },
    {
        "content": "<p>Finally: <a href=\"https://github.com/leanprover-community/mathlib/pull/3013\">https://github.com/leanprover-community/mathlib/pull/3013</a></p>",
        "id": 200308756,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591749889
    },
    {
        "content": "<p>Which allows for:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">findim</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 200308865,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591749995
    },
    {
        "content": "<p>Once everything works, it's very concise. Getting there is quite the journey.</p>",
        "id": 200308879,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591750019
    }
]