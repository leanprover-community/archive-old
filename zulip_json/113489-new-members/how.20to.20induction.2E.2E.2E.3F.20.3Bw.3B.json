[
    {
        "content": "<p><a href=\"https://leanprover.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html#induction-and-recursion-in-lean\">https://leanprover.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html#induction-and-recursion-in-lean</a><br>\nso i was reading through this link above earlier, but... i tried recreating some induction proofs on my own.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but lean got upset at my use of nat.rec_on, and broke there. what <em>does</em> nat.rec_on actually do?</p>",
        "id": 320350118,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673306499
    },
    {
        "content": "<p><code>nat.rec_on</code> is a built-in recursor that can be used for writing recursive definitions and recursive proofs in term mode. Since you're writing a proof in tactic mode, you should probably try to use tactics such as <code>induction n</code>.</p>",
        "id": 320351148,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307084
    },
    {
        "content": "<p>In this case, using <code>induction n</code> should give you two goals:</p>\n<ul>\n<li>prove your statement for <code>n = 0</code></li>\n<li>prove your statement for <code>n + 1</code>, assuming it's true for <code>n</code> (this should be a hypothesis called something like <code>ih</code>, \"inductive hypothesis\")</li>\n</ul>",
        "id": 320351253,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307136
    },
    {
        "content": "<p>thank you!!</p>",
        "id": 320351308,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673307173
    },
    {
        "content": "<p>okay, bit of a silly question this time around but<br>\nafter using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n        <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span>\n        <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>      <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">)</span>\n\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>i'm getting the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">n</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>... any idea what's happening here? (also the induction proof for case n = 0 isn't done yet)</p>",
        "id": 320352196,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673307630
    },
    {
        "content": "<p>The proofs from the link you sent are all term-mode proofs, but you're in tactic mode.</p>",
        "id": 320352296,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307689
    },
    {
        "content": "<p>You can do similar things, but the syntax is a bit different.</p>",
        "id": 320352315,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307699
    },
    {
        "content": "<p>Your example might look like:</p>",
        "id": 320352331,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307714
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">calc</span>\n        <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span>\n        <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>      <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span>\n  <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320352406,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307740
    },
    {
        "content": "<p>But I haven't tested it so it might not work.</p>",
        "id": 320352421,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307748
    },
    {
        "content": "<p>oh hmm... let me try again. what's the difference between term mode and tactic mode?</p>",
        "id": 320352571,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673307842
    },
    {
        "content": "<p>You don't actually need to use <code>calc</code> here, it might be easier to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 320352618,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307848
    },
    {
        "content": "<p>Term mode is what you might be familiar with from other programming languages. You basically write down explicit function applications and things to construct a term of a particular type.</p>",
        "id": 320352669,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307885
    },
    {
        "content": "<p>hmm</p>",
        "id": 320352706,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673307904
    },
    {
        "content": "<p>Tactic mode is started with <code>begin</code> and ended with <code>end</code>. It's an interactive mode, where lean tells you the current \"goal\" (the <code>|-</code> looking thing) and all of your hypotheses, and you tell it some instructions (tactics) to get yourself gradually closer to solving the goal.</p>",
        "id": 320352768,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307937
    },
    {
        "content": "<p>right, makes sense</p>",
        "id": 320352846,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673307965
    },
    {
        "content": "<p><code>induction n</code> is a tactic that tells lean to try to get closer to solving the goal by applying induction on variable <code>n</code>.</p>",
        "id": 320352849,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673307967
    },
    {
        "content": "<p>Once you solve a goal in term mode, lean will convert it into a term that basically contains the result of all your instructions. In the link you sent, the proofs provided were written \"manually\" in term mode, but we often write them in a more readable way using tactics.</p>",
        "id": 320353131,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673308107
    },
    {
        "content": "<p>(Recall under the propositions as types correspondence, terms of types are proofs of propositions)</p>",
        "id": 320353161,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673308128
    },
    {
        "content": "<p>hmm i see</p>",
        "id": 320353424,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1673308258
    }
]