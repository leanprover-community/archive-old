[
    {
        "content": "<p>Dear all,</p>\n<p>I am trying to learn lean and mathlib, and am working through the book mathematics_in_lean.  In Section 2.1, there is an example of a `typical proof state', which I am trying to set up and solve as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span> <span class=\"n\">data.nat.prime</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/\\</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/\\</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h.left</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h23</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h.right</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h23.left</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span><span class=\"o\">(</span><span class=\"n\">h23.right</span><span class=\"o\">),</span>\n<span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"n\">h23</span><span class=\"o\">,</span>\n<span class=\"c1\">-- now I have a proof state as given in the book!</span>\n<span class=\"c1\">-- I now tried</span>\n<span class=\"k\">have</span> <span class=\"n\">x_ge_two</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">prime.two_le</span> <span class=\"n\">h1</span>\n</code></pre></div>\n\n<p>which got me <code>x_ge_two : 2 &lt;= x</code>. After this, I am unable to use the the remaining hypothesis (h2 and h3). Any hint would be appreciated! Thanks.</p>",
        "id": 211187891,
        "sender_full_name": "Manoj Kummini",
        "timestamp": 1600980570
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span> <span class=\"n\">data.nat.prime</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/\\</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/\\</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h.left</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h23</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h.right</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h23.left</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span><span class=\"o\">(</span><span class=\"n\">h23.right</span><span class=\"o\">),</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"n\">h23</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now I have a proof state as given in the book!</span>\n  <span class=\"c1\">-- I now tried</span>\n  <span class=\"k\">have</span> <span class=\"n\">x_ge_two</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">prime.two_le</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- 2 ≤ x ↔ 2 &lt; x or 2 = x</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_iff_lt_or_eq</span> <span class=\"n\">at</span> <span class=\"n\">x_ge_two</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x_ge_two</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- 2 &lt; x case</span>\n    <span class=\"c1\">-- use lemma saying a &lt; b ↔ a+1 ≤ b</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">succ_le_iff</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x_ge_two</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now it's easy</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- 2 = x case</span>\n    <span class=\"c1\">-- proof by contradiction</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">x_ge_two</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211190605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600981943
    },
    {
        "content": "<p>It's a bit annoying that I couldn't finish it off more quickly</p>",
        "id": 211190888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600982121
    },
    {
        "content": "<p>Maybe I'm missing a tactic. Actually does <code>tidy</code> do it?</p>",
        "id": 211190922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600982152
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 211208888,
        "sender_full_name": "Manoj Kummini",
        "timestamp": 1600996798
    }
]