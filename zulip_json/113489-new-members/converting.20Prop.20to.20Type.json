[
    {
        "content": "<p>I'm getting a type mismatch error (in Lean 4, if that's relevant) saying that something has type Prop but is expected to have type Type.  What's the correct way to convert?  (Also, is there a way to discover this?  <code>#search (Prop → Type)</code> just tells me that it expects a term, not <code>search</code>...)</p>",
        "id": 229001360,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614968895
    },
    {
        "content": "<p>In lean3 we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/plift\">docs#plift</a></p>",
        "id": 229001809,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614969063
    },
    {
        "content": "<p>I'm not sure about lean4</p>",
        "id": 229001841,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614969069
    },
    {
        "content": "<p>Thanks, copying that definition works fine for my purposes</p>",
        "id": 229002291,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614969241
    },
    {
        "content": "<p>Lean 4 has <code>PLift</code>: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L199\">https://github.com/leanprover/lean4/blob/master/src/Init/Prelude.lean#L199</a></p>",
        "id": 229004570,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614970150
    },
    {
        "content": "<p>Awesome, thanks!</p>",
        "id": 229004616,
        "sender_full_name": "Jason Gross",
        "timestamp": 1614970173
    },
    {
        "content": "<p>I'm serious -- this is one of my favourite definitions in Lean. Here's the Lean 4 version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span>\n  <span class=\"n\">up</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What I like about it is that it defines <code>up</code> and <code>down</code> at the same time as defining <code>PLift</code> all in some really nice way.</p>",
        "id": 229011439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614972826
    }
]