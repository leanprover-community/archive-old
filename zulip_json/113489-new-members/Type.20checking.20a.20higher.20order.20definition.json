[
    {
        "content": "<p>Can someone fix the following definition so that it can be type checked:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">absAll</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"n\">q</span><span class=\"o\">)))</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 129508130,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531355967
    },
    {
        "content": "<p>What happens if you write this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">absAll</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"n\">q</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 129508344,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531356320
    },
    {
        "content": "<p>It works--maybe I should file a bug report.</p>",
        "id": 129509851,
        "sender_full_name": "Ken Roe",
        "timestamp": 1531358997
    },
    {
        "content": "<p>That's not a bug, you made a mistake</p>",
        "id": 129509899,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531359028
    },
    {
        "content": "<p>The term of the definition has to be a function that takes two parameters (<code>st : t → ℕ → Prop</code> and <code>i : ℕ</code>) and returns a <code>Prop</code> (<code>∀ (q:t), (st q i)</code>)</p>",
        "id": 129509927,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531359116
    },
    {
        "content": "<p>You wrote <code>st q</code> which has type <code>ℕ -&gt; Prop</code>. But the body of a <code>∀</code> must be a <code>Prop</code></p>",
        "id": 129509976,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531359176
    },
    {
        "content": "<p>I encourage you to use typed holes (i.e. <code>_</code>) to explore what are the types expected from you. For instance, look at what Lean tells you when you write the following in your definition:</p>\n<ul>\n<li><code>(λ (st : t → ℕ → Prop), _)</code></li>\n<li><code>(λ (st : t → ℕ → Prop) (i : ℕ), _)</code></li>\n<li><code>(λ (st : t → ℕ → Prop) (i : ℕ), (∀ (q:t), _))</code></li>\n</ul>",
        "id": 129510098,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531359398
    },
    {
        "content": "<p>I'm not sure what you're going for but you may prefer this definition:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">absAll</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"n\">q</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>It is clearer and its equations are nicer too</p>",
        "id": 129510432,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531360067
    },
    {
        "content": "<p>What does \"its equations are nicer\" mean in this context?</p>\n<p>Edit: I think I've answered my own question using <code>#print prefix absAll</code>. I am surprised! I knew that if you defined a fancy inductive type you got a bunch of generated equations, but I don't think I'd internalised that this was happening for just some random definition of a function.</p>\n<p>Simon's version gives</p>\n<div class=\"codehilite\"><pre><span></span>absAll : Π {t : Type}, (t → ℕ → Prop) → ℕ → Prop\nabsAll.equations._eqn_1 : ∀ {t : Type} (st : t → ℕ → Prop) (i : ℕ), absAll st i = ∀ (q : t), st q i\n</pre></div>\n\n\n<p>I guess my revised question is why this equation is there at all! It just seems to be the definition of <code>absAll</code>.</p>",
        "id": 129521382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531380096
    },
    {
        "content": "<blockquote>\n<p>I guess my revised question is why this equation is there at all! It just seems to be the definition of <code>absAll</code>.</p>\n</blockquote>\n<p>If you use <code>simp [absAll]</code>, I believe it uses that equation in the simplifier.</p>",
        "id": 129521823,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531380760
    },
    {
        "content": "<p>Aah that would make sense. I don't use <code>simp</code> like this usually -- I am only just beginning to get the hang of what <code>simp</code> does, and now I tend to only feed it equalities (I used to feed it arbitrary strings of symbols which I hoped made sense :-) )</p>",
        "id": 129521916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531380885
    }
]