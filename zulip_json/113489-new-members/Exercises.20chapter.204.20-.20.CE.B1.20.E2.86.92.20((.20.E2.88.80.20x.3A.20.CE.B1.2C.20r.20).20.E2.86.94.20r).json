[
    {
        "content": "<p>Hello! First time I write here! I'm trying to learn Lean step by step following the online tutorial \"theorem proving in Lean\" doing as many exercises as I can. <br>\nAt the moment I'm having a problem (probably more on the logic part of the thing) on the first one of exercise 2 in chapter 4:<br>\nα → (( ∀ x: α, r ) ↔ r)</p>\n<p>theorem e1: α → (( ∀ x: α, r ) ↔ r) :=<br>\nassume y:α,<br>\niff.intro<br>\n(assume h: (∀ x, r),<br>\nshow r, from h y<br>\n)<br>\n-- wrong from now on<br>\n(assume hr: r,<br>\nassume x : α,<br>\nassume hyr : (∀ x , r),<br>\nshow (∀ x: α , r), from hyr<br>\n)</p>\n<p>First of all, I don't know if assuming y:α solve the \"α →\" part, but I'm struggling in the second part of the iff.intro (I think that the first part is correct) <br>\nthe error is : </p>\n<p>\" type mismatch at application<br>\n{mp := λ (h : α → r), show r, from h y, mpr := λ (hr : r) (x : α) (hyr : α → r), show α → r, from hyr}<br>\nterm<br>\nλ (hr : r) (x : α) (hyr : α → r), show α → r, from hyr<br>\nhas type<br>\nr → α → (α → r) → α → r<br>\nbut is expected to have type<br>\nr → α → r \"</p>\n<p>And I understand why it returns that error, but, how am I supposed to show (∀ x: α , r) from r otherwise? It's probably something stupid I'm missing but as stupid as it is I can't see it. Looking at the others in ex2 I think it's probably something I'm getting wrong in bringing outside a universal quantifier.<br>\nAlso, I've never used Zulip or something like that, so let me know if I did something wrong.</p>",
        "id": 150837580,
        "sender_full_name": "Carlesso Diego",
        "timestamp": 1543920013
    },
    {
        "content": "<p>For Zulip -- if you write your code between triple backticks <code> ``` </code> then it gets formatted nicely. Even better, if you write <code> ```lean </code> for the top triple backtick then you get syntax highlighting as well.</p>",
        "id": 150837685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543920129
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">e1</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">((</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">y</span>\n<span class=\"o\">)</span>\n<span class=\"c1\">-- wrong from now on</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">hyr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">hyr</span>\n<span class=\"o\">)</span>\n</pre></div>",
        "id": 150837694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543920146
    },
    {
        "content": "<p>But your code doesn't run for me -- can you post some fully working example so I can get it to compile without having to think?</p>",
        "id": 150837731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543920209
    },
    {
        "content": "<p>Carlesso, What Kevin means is you should include your <code>variables (α : Type) (r : Prop)</code> line as well, so that anyone can copy-paste your code right away</p>",
        "id": 150837935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543920463
    },
    {
        "content": "<p>About the question itself, you are complicating things needlessly. It's probably because the question is a bit silly</p>",
        "id": 150837993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543920501
    },
    {
        "content": "<p>The proof of the second implication is simply <code>assume hr _, hr</code></p>",
        "id": 150838017,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543920559
    },
    {
        "content": "<p>The whole point is that <code>r</code> does not depend on anything</p>",
        "id": 150838020,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543920581
    },
    {
        "content": "<p>and the first one can be shortened to <code>assume h, h y</code>. If you really want to use term mode, you can go all the way down the obfuscation road until you reach <code>theorem e1 (α : Type) (r : Prop): α → (( ∀ x: α, r ) ↔ r) := λ y, ⟨λ h, h y, λ h _, h⟩</code></p>",
        "id": 150838222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543920787
    },
    {
        "content": "<p>The opposite extreme is to load mathlib and replace the proof by <code>by tauto</code>.</p>",
        "id": 150838259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543920842
    },
    {
        "content": "<blockquote>\n<p>Carlesso, What Kevin means is you should include your <code>variables (α : Type) (r : Prop)</code> line as well, so that anyone can copy-paste your code right away</p>\n</blockquote>\n<p>Ok!, sorry about that, I will keep that in mind.</p>\n<p>About the problem you are right! and what you suggest work well; I was aware of <code>r</code>  but I wasn't able to \"say\" that in Lean.</p>\n<blockquote>\n<p>About the question itself, you are complicating things needlessly. It's probably because the question is a bit silly</p>\n</blockquote>\n<p>I was trying to be consistent with the \"solution scheme\" that the chapter has, for example <code>(∀x, p x ∧ q x ) ↔ (∀ x, p x) ∧ (∀ x, q x) </code> is :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">e2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">:(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp2</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hp</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hq2</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hq</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hp2</span> <span class=\"n\">hq2</span>\n    <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>It's a different exercise; I don't know if it could be solved with your method (right now it works), I have not reached that part on TPIL yet I think, or I'm not very practical to use it right now;  but it's just to show you what an exercise there looks like and what I was trying to get. <br>\nThank you by the way, problem solved!</p>",
        "id": 150842750,
        "sender_full_name": "Carlesso Diego",
        "timestamp": 1543926215
    },
    {
        "content": "<p>here's a compactified proof of that theorem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"bp\">⟩</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">H₁</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H₂</span> <span class=\"n\">x</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 150843010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543926577
    },
    {
        "content": "<p>and a proof of the first theorem in that style:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"o\">(</span> <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span> <span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hr</span> <span class=\"o\">)</span>\n</pre></div>",
        "id": 150843154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543926765
    },
    {
        "content": "<p>Thank you!, that's perfect!</p>",
        "id": 150844606,
        "sender_full_name": "Carlesso Diego",
        "timestamp": 1543928610
    },
    {
        "content": "<blockquote>\n<p>Carlesso, What Kevin means is you should include your <code>variables (α : Type) (r : Prop)</code> line as well, so that anyone can copy-paste your code right away</p>\n</blockquote>\n<p>Yes -- sorry for the brevity! I just had 2 minutes before a lecture and I wanted to help but then the code didn't run so I had to give up :-)</p>",
        "id": 150845046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543929065
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Carlesso, What Kevin means is you should include your <code>variables (α : Type) (r : Prop)</code> line as well, so that anyone can copy-paste your code right away</p>\n</blockquote>\n<p>Yes -- sorry for the brevity! I just had 2 minutes before a lecture and I wanted to help but then the code didn't run so I had to give up :-)</p>\n</blockquote>\n<p>Don't worry!, I didn't think about the variables thing, I'm working with different exercises in the same file and I forgot about them, totally my fault. Thank you for your time anyway! :)</p>",
        "id": 150845940,
        "sender_full_name": "Carlesso Diego",
        "timestamp": 1543929993
    }
]