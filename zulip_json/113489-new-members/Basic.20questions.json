[
    {
        "content": "<p>Nope... we should make <code>apply_fun</code> more flexible, but isn't exactly what you are looking for.</p>",
        "id": 209346319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599541734
    },
    {
        "content": "<p>Note that <code>replace</code> is like <code>have</code> but -- you know -- replaces a hypothesis</p>",
        "id": 209346325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599541755
    },
    {
        "content": "<p>See also the very useful <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#specialize\">tactic#specialize</a></p>",
        "id": 209347045,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599542810
    },
    {
        "content": "<p>Sometimes when playing the natural number game, I encountered weird variables like ?m_1, ?m_2, and so on after using apply. What do these mean?</p>\n<p>I also have a question about substituting some value into a theorem. I have the following: mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0. How can I use this theorem but substituting succ(a) and succ(b) into a and b respectively?</p>",
        "id": 209347290,
        "sender_full_name": "Benjamin",
        "timestamp": 1599543210
    },
    {
        "content": "<p>they are metavariables, they are expressions that are concrete but not known yet. They often go away if you just pretend they already have the expression you want in there</p>",
        "id": 209347367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599543331
    },
    {
        "content": "<p>to substitute that theorem use <code>mul_pos (succ a) (succ b)</code></p>",
        "id": 209347423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599543384
    },
    {
        "content": "<p>usually a and b will be implicit though (written like <code>{a : mynat}</code>), in which case you would have to write <code>@mul_pos (succ a) (succ b)</code>, or let lean figure it out with <code>mul_pos</code></p>",
        "id": 209347457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599543469
    },
    {
        "content": "<p>Thanks. Another issue I ran into is I have the following two hypotheses: k : a * succ d = a * d → succ d = d, i : a * succ d = a * h. I want to do a rewrite do I type \"rw i at k\", which gives me the error \"rewrite tactic failed, lemma lhs is a metavariable\". What does this mean? And how do I fix it?</p>",
        "id": 209349968,
        "sender_full_name": "Benjamin",
        "timestamp": 1599547022
    },
    {
        "content": "<p>The error is surprising -- do you have more than one thing called i? But you look to me like you're in trouble with the maths here, not the lean. How can you use k when its hypothesis is almost always false?</p>",
        "id": 209350360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599547455
    },
    {
        "content": "<p>If you want some help you should post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> or, if you're doing the natural number game, send a link to the level you're on and post the code you wrote so far to solve it</p>",
        "id": 209350541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599547616
    },
    {
        "content": "<p>I'm on the last level of the advanced multiplication part of the natural number game. Here's what I have so far (I renamed i to j2 to insure it wasn't causing any trouble): <code>revert b,\ninduction c with d hd,\nrw mul_zero,\nhave p := mul_eq_zero_iff,\nintro h,\nintro j,\ncases h,\nrefl,\nhave i := mul_eq_zero_iff a (succ h),\ncases i with i1 i2,\nhave i3 := i1(j),\ncc,\nintro h,\nhave j := hd(h),\nhave k := hd(succ d),\nintro j2,\nsymmetry at j2,\nrw j2 at k,</code></p>",
        "id": 209350638,
        "sender_full_name": "Benjamin",
        "timestamp": 1599547717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"338322\">@Benjamin</span> pro tip: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> (-;</p>",
        "id": 209351095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599548255
    },
    {
        "content": "<p><a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">revert</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">mul_eq_zero_iff</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i1</span> <span class=\"n\">i2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">i3</span> <span class=\"o\">:=</span> <span class=\"n\">i1</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">),</span>\n<span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span><span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n<span class=\"n\">intro</span> <span class=\"n\">j2</span><span class=\"o\">,</span>\n<span class=\"n\">symmetry</span> <span class=\"n\">at</span> <span class=\"n\">j2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">j2</span> <span class=\"n\">at</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 209351299,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599548405
    },
    {
        "content": "<p>That's certainly weird</p>",
        "id": 209351313,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599548414
    },
    {
        "content": "<p>I think my math is off anyway, but I don't know why rw didn't work there. FWIW, changing both with mul_suc and then doing rw worked.</p>",
        "id": 209351470,
        "sender_full_name": "Benjamin",
        "timestamp": 1599548586
    },
    {
        "content": "<p>I think I'm somewhat close up to cc. After that, did I go down the right path? I'm not sure whether I'm manipulating the universal statements right.</p>",
        "id": 209352398,
        "sender_full_name": "Benjamin",
        "timestamp": 1599549443
    },
    {
        "content": "<p>Your <code>k : a * succ d = a * d → succ d = d</code> doesn't seem useful; the consequent is false</p>",
        "id": 209352730,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599549719
    },
    {
        "content": "<p>I started with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 209352789,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599549743
    },
    {
        "content": "<p>Does that help?</p>",
        "id": 209353170,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599550030
    },
    {
        "content": "<p>Much obliged, I figured it out</p>",
        "id": 209413402,
        "sender_full_name": "Benjamin",
        "timestamp": 1599583671
    },
    {
        "content": "<p>How can I introduce an existential? For example, if I have a = succ(a) + c, I want to get the existential statement to get succ(a) &lt;= a (this is for a proof by contradiction of course).</p>",
        "id": 209432619,
        "sender_full_name": "Benjamin",
        "timestamp": 1599593231
    },
    {
        "content": "<p>Probably <code>use c,</code></p>",
        "id": 209433263,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599593578
    },
    {
        "content": "<p>That is,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">exists</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 209433504,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599593699
    },
    {
        "content": "<p>I'm getting this error <code>failed to instantiate goal with (frozen_name has_add.add) c1 c2</code> What I have is <code>h2_h : a = succ a + c1 + c2</code> and I typed <code>have p := ∃ m, a = succ a + m, {use c1 + c2},</code>.</p>",
        "id": 209434193,
        "sender_full_name": "Benjamin",
        "timestamp": 1599594058
    },
    {
        "content": "<p><code>:</code>, not <code>:=</code></p>",
        "id": 209434368,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599594139
    },
    {
        "content": "<p>That fixed one error, but now I think there's a problem because use acts on the goal, and I need it to act on h2_h. Is there a way to do that? The error is <code>solve1 tactic failed, focused goal has not been solved</code>.</p>",
        "id": 209434909,
        "sender_full_name": "Benjamin",
        "timestamp": 1599594396
    },
    {
        "content": "<p>After <code>use</code> you still have a goal: to prove that the value you provided satisfies whatever property it's supposed to.</p>",
        "id": 209435340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599594650
    },
    {
        "content": "<p>How can I say that it's true by h2_h? Also, is there a better way to go from <code>a = succ a + c1 + c2,</code> to <code>succ a &lt;= a</code>?</p>",
        "id": 209435748,
        "sender_full_name": "Benjamin",
        "timestamp": 1599594862
    },
    {
        "content": "<p>Ah, nvm, I think I see how this works now</p>",
        "id": 209435973,
        "sender_full_name": "Benjamin",
        "timestamp": 1599594988
    },
    {
        "content": "<p>Got it! Thanks for the help.</p>",
        "id": 209436099,
        "sender_full_name": "Benjamin",
        "timestamp": 1599595078
    }
]