[
    {
        "content": "<p>Why does the following not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">9</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>If <code>norm_num</code> cannot do it, how can numerical calculations then be done in <code>ℤ/nℤ</code>?</p>",
        "id": 275704221,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647540919
    },
    {
        "content": "<p><code>norm_fin</code> does this kind of thing but I think it doesn't work on <code>zmod</code>. You can also prove <code>9 % 8 = 1 % 8</code> using <code>norm_num</code> and apply a theorem to deduce the zmod fact</p>",
        "id": 275704984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647541268
    },
    {
        "content": "<p>I think <code>dec_trivial</code> works on this kind of thing.</p>",
        "id": 275705029,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647541295
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 275705043,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647541307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  Hm, I think I tried that (perhaps in a slightly more complicated situation).</p>\n<p>This also gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">17</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">fin_cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>But I guess that trying the same with (say)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">7</span>\n</code></pre></div>\n<p>will be too much for Lean.</p>",
        "id": 275706050,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647541803
    },
    {
        "content": "<p>My original question still stands: Is there a (good) reason why this is not part of what <code>norm_num</code> does?</p>",
        "id": 275706552,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647542033
    },
    {
        "content": "<p>Just because the <code>norm_fin</code> extension hasn't been expanded to support <code>zmod (n + 1)</code>. An easy way would be to transfer through the <code>fin (n + 1) \\~-+* zmod (n + 1)</code> ring equiv (which is just refl)</p>",
        "id": 275707028,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647542247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113489-new-members/topic/norm_num.20question/near/275706050\">said</a>:</p>\n<blockquote>\n<p>This also gives</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">17</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">fin_cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This should work with <code>dec_trivial!</code> (note the <code>!</code>).</p>",
        "id": 275707215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647542310
    },
    {
        "content": "<p>I was thinking of the 8^3 = 512 cases the naive approach would generate.</p>",
        "id": 275707805,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647542614
    },
    {
        "content": "<p>(Previous version had a wrong statement.)<br>\nThe simpler version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">fin_cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">fin_cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"kd\">end</span>\n</code></pre></div>\n<p>works without the <code>!</code> and also with it.</p>",
        "id": 275708125,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647542762
    },
    {
        "content": "<p>The 512 cases aren't instant, but aren't horribly slow. For the \"simpler\" version, luckily <code>dec_trivial</code> can only prove true statements <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 275708509,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1647542943
    },
    {
        "content": "<p>I had just realized that and was editing my message...</p>",
        "id": 275708577,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647542979
    },
    {
        "content": "<p>On my machine, I get a deterministic timeout from the 512 cases (with <code>dec_trivial!</code>).</p>",
        "id": 275708782,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647543062
    },
    {
        "content": "<p>... and also with <code>dec_trivial</code>.</p>",
        "id": 275708838,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647543097
    },
    {
        "content": "<p>Are you using <code>fin_cases</code> first? This isn't necessary. Lean knows that universal quantifiers over a finite type are decidable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 275709026,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1647543181
    },
    {
        "content": "<p>OK; I didn't know that. In fact, I have no really good idea <em>what</em> <code>dec_trivial[!]</code> is and is not capable of doing.<br>\nStill trying to feel my way in...</p>",
        "id": 275709335,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647543320
    },
    {
        "content": "<p>The difference between <code>dec_trivial</code> and <code>dec_trivial!</code> is quite small. The version with <code>!</code> will try to revert some assumptions, but otherwise it's just the same as <code>dec_trivial</code>.</p>",
        "id": 275709765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647543525
    },
    {
        "content": "<p>And <code>dec_trivial</code> tells Lean: hey all definitions involved are computable. You should be able to use them to run a finite algorithm and decide the truth of this claim.</p>",
        "id": 275709848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647543571
    },
    {
        "content": "<p>But the efficiency of that algorithm can of course be horrible, depending on those definitions and the size of the objects involved.</p>",
        "id": 275709939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647543604
    },
    {
        "content": "<p>I expected the following to work, but it doesn't.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l1</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"c1\">-- gives error, also with dec_trivial!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It does, however, after inserting <code>revert l</code> before <code>dec_trivial</code>. Why does this make a difference?</p>",
        "id": 275713791,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647545423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113489-new-members/topic/norm_num.20question/near/275706552\">said</a>:</p>\n<blockquote>\n<p>My original question still stands: Is there a (good) reason why this is not part of what <code>norm_num</code> does?</p>\n</blockquote>\n<p>I'm wondering this, too. Is it out of scope  for <code>norm_num</code> to be able to reduce <code>zmod</code> numerals?</p>",
        "id": 275714278,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647545688
    },
    {
        "content": "<p>It can be a norm_num extensions, probably within the extension provided by norm_fin</p>",
        "id": 275717881,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647547400
    }
]