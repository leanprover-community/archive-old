[
    {
        "content": "<p>I am still very bad at proofs involving <code>cast</code>. Can I prove something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">cast</span> <span class=\"n\">h2</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 247696913,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1627645417
    },
    {
        "content": "<p>I'd really avoid type equality and focus on equivs if you can</p>",
        "id": 247697237,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627645614
    },
    {
        "content": "<p>What do you mean exactly?</p>",
        "id": 247697388,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1627645701
    },
    {
        "content": "<p><code>h1 : (α × γ) = (β × γ)</code> is an evil hypothesis.</p>",
        "id": 247697429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627645726
    },
    {
        "content": "<p>Equality of types is like equality of objects in category theory -- it should be avoided if possible.</p>",
        "id": 247697488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627645763
    },
    {
        "content": "<p>What does evil hypothesis mean? In my specific case I have a proof of both h1 and h2, so that should not be a problem</p>",
        "id": 247697698,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1627645882
    },
    {
        "content": "<p>I am pretty sure I cannot avoid type equality</p>",
        "id": 247697737,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1627645910
    },
    {
        "content": "<p><code>by { subst h2, refl }</code></p>",
        "id": 247697761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627645923
    },
    {
        "content": "<p>Thank you very much!!</p>",
        "id": 247697820,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1627645943
    },
    {
        "content": "<p>For someone more familiar with type equality - is this statement provable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod_right_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247698088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627646124
    },
    {
        "content": "<p>this is a pathological question</p>",
        "id": 247704002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627649910
    },
    {
        "content": "<p>lol an interesting special case is <code>\\a = empty</code></p>",
        "id": 247704084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627649965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> here's some philosophy <a href=\"https://ncatlab.org/nlab/show/principle+of+equivalence\">https://ncatlab.org/nlab/show/principle+of+equivalence</a> but remember this: if you want to make your own mathlib in Lean 4 then you could make it so that <code>nat = int</code> was true, or you could make it so that it was unprovable, and all the proofs would still work, so there is something irrelevant about the question which as a mathematician you would not expect.</p>",
        "id": 247704544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627650166
    },
    {
        "content": "<p>Which would look something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">weird_int</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">weird_int.to_int</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">weird_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">nat.even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">weird_int</span> <span class=\"o\">:=</span> <span class=\"n\">equiv.add_comm_group</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 247705009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627650401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Cast.20exercise/near/247698088\">said</a>:</p>\n<blockquote>\n<p>For someone more familiar with type equality - is this statement provable?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod_right_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It's not disprovable, but the cardinality model falsifies it if you set <code>α = β = empty</code> and <code>γ = unit</code></p>",
        "id": 247705256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627650534
    },
    {
        "content": "<p>I don't really get what you mean by falsifies it. You mean it's false in a model where <code>=</code> iff <code>equiv</code>?</p>",
        "id": 247705427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627650620
    },
    {
        "content": "<p>yes</p>",
        "id": 247705483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627650638
    },
    {
        "content": "<p>Set theory is the same -- you can ask if the quaternion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>37</mn><msup><mi>π</mi><mn>2</mn></msup><mo>+</mo><mi>i</mi><mo>+</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">37\\pi^2+i+k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">37</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> equals the Riemann Sphere <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">S^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> in set theory. The answer is \"it's unlikely, but in theory it could happen\".</p>",
        "id": 247705560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627650687
    },
    {
        "content": "<p>even if you assume alpha is nonempty it's still false in the cardinality model with <code>α = β = nat</code> and <code>γ = unit</code></p>",
        "id": 247705611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627650714
    },
    {
        "content": "<p>Actually, in set theory the answer is usually answerable (and false)</p>",
        "id": 247705685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627650747
    },
    {
        "content": "<p>but what about independent developments with their own tricks?</p>",
        "id": 247705720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627650782
    },
    {
        "content": "<p>the \"in theory it could happen\" is quantifying over possible concrete implementations of the concepts</p>",
        "id": 247705722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627650784
    },
    {
        "content": "<p>for any particular implementation the question is a well defined \"junk theorem\"</p>",
        "id": 247705748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627650805
    },
    {
        "content": "<p>oh sure</p>",
        "id": 247705753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627650807
    },
    {
        "content": "<p>you just make a type theory on top of your set theory</p>",
        "id": 247705785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627650826
    },
    {
        "content": "<p>lean just makes most junk statements either type incorrect or independent</p>",
        "id": 247705799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627650838
    }
]