[
    {
        "content": "<p>I have a property defined for natural numbers: <code>p : N -&gt; Prop</code> and I have a subtype <code>{ x : N // p x }</code>. I can produce a natural <code>n : N</code> with <code>p n</code>, so this set/subtype is non-empty.  Since N is well-ordered, this non-empty subtype/set has a minimum element. But I cannot figure out what Lean incantation I should use to find/refer to this minimum element of this set/subtype.</p>\n<p>Any suggestions would be much welcomed, thanks!</p>",
        "id": 260105715,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1635930614
    },
    {
        "content": "<p>You want <code>nat.find</code> -- right click on it and look at the functions defined just after it to see the API available to you</p>",
        "id": 260105981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635930788
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> !</p>",
        "id": 260106028,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1635930833
    },
    {
        "content": "<p>Oh, groan, I thought I was getting the hang of this. But now I realise I don't know how to define a lambda expression inside a <code>begin</code>/<code>end</code> argument. I've written:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)),</span>\n</code></pre></div>\n<p>but then the goals just list: <code>p : N -&gt; Prop</code>, and when I get a target of <code>p n0</code> and I have a term <code>h</code> of exactly the right form (namely, <code>x &lt; (n0 : R) * (1 / (n : R))</code>), Lean refuses to match the two when I say <code>exact h</code>.  I guess I should be using something other than <code>have</code>, but I don't know what.</p>\n<p>My second problem, once I've resolved this, is that because my predicate uses the reals, I'm guessing it's not decidable.  So <code>nat.find</code> presumably won't work.  Is there a non-decidable version of <code>nat.find</code> which just asserts the existence of such an element but without attempting to compute it?</p>",
        "id": 260122506,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1635940557
    },
    {
        "content": "<p>Use <code>let</code> not <code>have</code></p>",
        "id": 260122805,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635940754
    },
    {
        "content": "<p>Ah, magic, thanks! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 260123045,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1635940870
    },
    {
        "content": "<p>For the second question you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#classical\">tactic#classical</a>, or <code>open_locale classical</code> at the top level of your file if this is something you will generally need</p>",
        "id": 260123516,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635941130
    },
    {
        "content": "<p>You can also use <code>Inf {n | p n}</code>, and use the instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.conditionally_complete_linear_order_bot\">docs#nat.conditionally_complete_linear_order_bot</a> and the API about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order\">docs#conditionally_complete_linear_order</a>. This does not require the predicate to be decidable.</p>",
        "id": 260137148,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1635947776
    },
    {
        "content": "<p>plus some lemmas specific to <code>nat</code>, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.Inf_mem\">docs#nat.Inf_mem</a></p>",
        "id": 260137241,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1635947829
    },
    {
        "content": "<p><code>Inf</code> doesn't require <code>decidable</code> and is not computable.</p>",
        "id": 260233617,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636007155
    }
]