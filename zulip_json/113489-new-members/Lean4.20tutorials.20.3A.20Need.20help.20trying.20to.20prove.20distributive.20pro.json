[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">and_distrib_or</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in the above equation I am trying to first prove <code>p ∧ (q ∨ r) → (p ∧ q) ∨ (p ∧ r)</code><br>\nbut I am unable to extract q and r from  <code>(q ∨ r)</code> which makes sense because <code>q -&gt; (q ∨ r)</code> and <code>r -&gt; (q ∨ r)</code> is possible but you can make a case for the other way.</p>\n<p>Is there a hint or am I missing something because I feel stuck at this point, getting p is easy with <code>And.left</code> but extracting properties from <code>q ∨ r</code> is not the right way to go I think</p>",
        "id": 305418865,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666376951
    },
    {
        "content": "<p>You want to give proofs in both cases. You can use <code>apply Or.elim h</code> where <code>h : p \\or r</code> or you can use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 305419499,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666377185
    },
    {
        "content": "<p>is there a way of doing things with functions only? I am more comfortable doing something like the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">or_assoc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">h</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpq</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Or.elim</span> <span class=\"n\">hpq</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_left</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_right</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Or.intro_left</span> <span class=\"n\">r</span> <span class=\"n\">hq</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_right</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">Or.intro_right</span> <span class=\"n\">q</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">h</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_left</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Or.intro_left</span> <span class=\"n\">q</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hqr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Or.elim</span> <span class=\"n\">hqr</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_left</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Or.intro_right</span> <span class=\"n\">p</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_right</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 305426792,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666379875
    },
    {
        "content": "<p>sorry if it's too much to ask, but I am ok with long solutions as long as they are using first principles.</p>\n<p>I am trying to practice from first principles then move onto using other ways.</p>",
        "id": 305427065,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666379960
    },
    {
        "content": "<p>also I try to be explicit and not implicit</p>",
        "id": 305427138,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666379991
    },
    {
        "content": "<p>Just checking: you only want a term proof and not a tactic one? Is that correct?</p>",
        "id": 305427153,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666379996
    }
]