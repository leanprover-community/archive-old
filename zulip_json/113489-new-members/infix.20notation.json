[
    {
        "content": "<p>I am working with a class Model  and an instance M of that class.   Then I define an equivalence relation <code>similar M</code>.   That is, in every<br>\ninstance M of model it will be an equivalence relation.   I would like to write x ~ y   instead of (similar M x y).  But since similar takes three <br>\narguments I can't seem to do it.    Of course for relations that are defined  inside the class itself,  like \\subseteq,   there is no problem,<br>\nbut I can't define similar inside the class as I must first define some other things that are used in the definition of similar.   Most of my <br>\ndefinitions are outside the class so every definition and lemma and theorem has an \"extra\"  M  tagging along.  I've gotten used to that <br>\nbut if it's possible to write x ~y  instead of  (similar M x y),   please tell me how.    Here's a test example of a class.  </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"err\">ùîΩ</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"err\">Œõ</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span>  <span class=\"err\">‚àà</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">SSC</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">emptyset_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬¨</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"err\">Œõ</span> <span class=\"o\">))</span>\n <span class=\"c\">/-</span><span class=\"cm\"> end of class definition because next line doesn&#39;t declare a member -/</span>\n</code></pre></div>",
        "id": 210225910,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1600237746
    },
    {
        "content": "<p>How is <code>similar M</code> defined?</p>",
        "id": 210226461,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600238430
    },
    {
        "content": "<p>There's also this sort of approach for notation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`~</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">M</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 210226554,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600238552
    },
    {
        "content": "<p>But, since <code>Model</code> is a class, something like this might work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">abbreviation</span> <span class=\"n\">similar&#39;</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">similar</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`~`</span> <span class=\"o\">:=</span> <span class=\"n\">similar&#39;</span>\n</code></pre></div>\n\n\n<p>(you might want to modify <code>similar</code> itself so that <code>M</code> is an implicit variable like this)</p>",
        "id": 210226765,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600238808
    },
    {
        "content": "<p>Thanks, I will try this tomorrow.  (it's midnight now in California).</p>",
        "id": 210227428,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1600239579
    },
    {
        "content": "<p>(Greetings from Berkeley <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 210227696,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600239827
    }
]