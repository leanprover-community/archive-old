[
    {
        "content": "<p>For the following proof of <code>h</code> I just want to say:  \"repeatedly apply mul_assoc and one_mul and mul_left_inv\".</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_group</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_inv_rev</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_right_cancel</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_group</span>\n</code></pre></div>\n\n\n<p>Is there a way to do this better than I'm doing now?</p>",
        "id": 202397987,
        "sender_full_name": "Chris M",
        "timestamp": 1593496565
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">my_group</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_inv_rev</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">group</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_group</span>\n</code></pre></div>",
        "id": 202398020,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593496668
    },
    {
        "content": "<p>lol</p>",
        "id": 202398064,
        "sender_full_name": "Chris M",
        "timestamp": 1593496689
    },
    {
        "content": "<p>nice.</p>",
        "id": 202398146,
        "sender_full_name": "Chris M",
        "timestamp": 1593496836
    },
    {
        "content": "<p>And what if I'm not allowed to use group?  i.e. I have to only use the three axioms, and no \"exotic\" tactics like <code>group</code>. Can I use something like <code>repeat</code>?</p>",
        "id": 202398157,
        "sender_full_name": "Chris M",
        "timestamp": 1593496905
    },
    {
        "content": "<p>Here are a few more proofs inspired by the proof in mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">my_group</span>\n\n<span class=\"c1\">-- mathlib proof</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_inv_rev</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"n\">inv_eq_of_mul_eq_one</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- above proof converted to tactic mode</span>\n<span class=\"c1\">-- lemmas in `simp only` found using `squeeze_simp`</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_inv_rev&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">inv_eq_of_mul_eq_one</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">mul_right_inv</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- rewrites found using `set_option trace.simplify.rewrite true`</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_inv_rev&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">inv_eq_of_mul_eq_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">mul_right_inv</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_group</span>\n</code></pre></div>",
        "id": 202398512,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593497427
    },
    {
        "content": "<p>Thanks for this! Some questions:</p>\n<ol>\n<li>what does the <code>$</code> sign mean in the first proof?</li>\n<li>What do you mean by <code>--above proof converted to tactic mode</code> and <code>-- lemmas in 'simp only' found using 'squeeze_simp'</code>?</li>\n<li>what do you mean by <code>-- rewrites found using 'set_option trace.simplify.rewrite true'</code></li>\n</ol>",
        "id": 202530981,
        "sender_full_name": "Chris M",
        "timestamp": 1593579303
    },
    {
        "content": "<p>the <code>$</code> is just another notation for application at low precedence</p>",
        "id": 202531101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593579482
    },
    {
        "content": "<p>it's the same as <code>inv_eq_of_mul_eq_one (by simp [mul_assoc])</code></p>",
        "id": 202531131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593579493
    },
    {
        "content": "<ol>\n<li><code>a $ b c</code>  is the same as <code>a (b c)</code>, basically <code>$</code> is an operator with extremely low precedence so that it acts like it wraps parentheses around everything that follows.</li>\n<li>\n<p>a. I mean that I took the term proof above and rewrote it fully in tactic mode.<br>\nb. If you use <code>squeeze_simp</code> instead of <code>simp</code>, it outputs the lemmas that were actually used, which lets you write a <code>simp only</code> statement. See <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#squeeze_simp%20/%20squeeze_simpa%20/%20squeeze_scope\">this doc entry</a>.</p>\n</li>\n<li>\n<p>If you write <code>set_option trace.simplify.rewrite true</code> before a proof using <code>simp</code>, then Lean will output some trace information when it runs <code>simp</code>, letting you see the rewrites that were performed. See the beginning of <a href=\"https://leanprover-community.github.io/extras/simp.html\">this page</a>.</p>\n</li>\n</ol>",
        "id": 202531144,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593579530
    },
    {
        "content": "<p>When I write this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mul_inv_rev3</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">inv_eq_of_mul_eq_one</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_right_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>It tells me: <code>tactic failed, there are unsolved goals</code>, even though those theorems should be enough to fully simplify to <code>1=1</code>. How should I think about this? Should I just think \"simp will not always be able to simplify even if it would be obvious to humans that it could\"?</p>",
        "id": 202531583,
        "sender_full_name": "Chris M",
        "timestamp": 1593580098
    },
    {
        "content": "<blockquote>\n<p>even though those theorems should be enough to fully simplify to <code>1=1</code></p>\n</blockquote>\n<p>Why? The tactic state after the <code>simp</code> will tell you how far it got.</p>",
        "id": 202531665,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593580234
    },
    {
        "content": "<blockquote>\n<p>Should I just think \"simp will not always be able to simplify even if it would be obvious to humans that it could\"?</p>\n</blockquote>\n<p>There are tons and tons of things that are obvious to humans which are very nonobvious to <code>simp</code> or Lean. The doc I linked in point 3 above gives some explanation about how simp works. You can also turn on the various trace options to see what it tried.</p>",
        "id": 202531732,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593580342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20simplify.20this.20proof.3F/near/202531665\">said</a>:</p>\n<blockquote>\n<p>Why? The tactic state after the <code>simp</code> will tell you how far it got.</p>\n</blockquote>\n<p>I mean, it is possible for me to rewrite the equation <code>a * b * (b⁻¹ * a⁻¹) = 1</code> as 1=1, using only the lemmas <code>mul_assoc, mul_right_inv, mul_one, one_mul</code>.</p>",
        "id": 202531736,
        "sender_full_name": "Chris M",
        "timestamp": 1593580351
    },
    {
        "content": "<p>That's true, but that's not how <code>simp</code> works. You can see that it uses <code>mul_assoc</code> in the \"other\" direction. While it's possible to reverse the direction with <code>simp only [←mul_assoc, mul_right_inv, mul_one, one_mul],</code>, you can see that <code>simp</code> still isn't smart enough to only apply <code>←mul_assoc</code> once before attempting to apply <code>mul_right_inv</code>.</p>",
        "id": 202531814,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593580530
    },
    {
        "content": "<p>Ok that makes sense.</p>",
        "id": 202531826,
        "sender_full_name": "Chris M",
        "timestamp": 1593580552
    },
    {
        "content": "<p>Thanks for the help!</p>",
        "id": 202532763,
        "sender_full_name": "Chris M",
        "timestamp": 1593581862
    },
    {
        "content": "<p>\"I can intuitively solve a logic puzzle\" is not the same as \"this algorithm will always find the solution that I can intuitively spot\"</p>",
        "id": 202535414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593585475
    }
]