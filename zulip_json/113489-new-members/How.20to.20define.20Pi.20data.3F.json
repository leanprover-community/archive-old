[
    {
        "content": "<p>How can I define values of a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Π</mi></mrow><annotation encoding=\"application/x-tex\">\\Pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Π</span></span></span></span> type when I need to distinguish the elements? Whenever I do <code>intros</code> then I can no longer distinguish different cases. This might be more of a basic type theory and less of a lean question ;-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.pimage</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mySets</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">multiThing</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ns</span> <span class=\"bp\">∈</span> <span class=\"n\">mySets</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ns</span> <span class=\"n\">ns_in_mySets</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ns_in_mySets</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- error: induction tactic failed, recursor 'or.dcases_on' can only eliminate into Prop</span>\n  <span class=\"c1\">-- wanted: if it is the first set, return this ... if it is the second set do this ...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270409352,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1643818099
    },
    {
        "content": "<p>This is is what <code>decidable</code> is for: it lets you take propositions and make decisions about what the value will be in a definition.</p>\n<p>One solution is to use an if/then/else chain.  For the final impossible case, you use <code>exfalso</code>, which turns the result into a <code>Prop</code> (false) and then you can do <code>cases ns_in_mySets</code>. This could be refined more, but it's just to demonstrate the idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">multiThing</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ns</span> <span class=\"bp\">∈</span> <span class=\"n\">mySets</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ns</span> <span class=\"n\">ns_in_mySets</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"k\">then</span> <span class=\"n\">_</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"k\">then</span> <span class=\"n\">_</span> <span class=\"k\">else</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ns_in_mySets</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">ns_in_mySets</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"n\">at</span> <span class=\"n\">ns_in_mySets</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"n\">ns_in_mySets</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270425801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643823356
    },
    {
        "content": "<p>Here's another way I'd probably organize it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">multiThing</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hns</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">∈</span> <span class=\"n\">mySets</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"k\">then</span> <span class=\"mi\">1</span>\n<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"k\">then</span> <span class=\"mi\">2</span>\n<span class=\"k\">else</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mySets</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hns</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hns</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270426579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643823601
    },
    {
        "content": "<p>Aha, many thanks!!</p>",
        "id": 270428844,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1643824357
    }
]