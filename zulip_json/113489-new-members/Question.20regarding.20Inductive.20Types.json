[
    {
        "content": "<p>Hi,</p>\n<p>I am new to Lean and I am trying to understand Inductive Types in Lean. Specifically, in section 4.4 of Lean Reference Manual (<a href=\"https://leanprover.github.io/reference/declarations.html#inductive-types\">https://leanprover.github.io/reference/declarations.html#inductive-types</a>), following is mentioned.</p>\n<blockquote>\n<p>The declaration of the type <code>foo</code> as above results in the addition of the following constants to the environment:</p>\n<p>the type former <code>foo : Π (a : α), Sort u</code></p>\n<p>for each <code>i</code>, the constructor <code>foo.constructorᵢ : Π (a : α) (b : βᵢ), foo a</code></p>\n</blockquote>\n<p>In case I have a simple inductive type definition such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ty_former</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">test_con</span> <span class=\"o\">:</span> <span class=\"n\">ty_former</span>\n</code></pre></div>\n<p>What values would <code>(a : α)</code> take?</p>\n<p>Would I be right in understanding that the constants generated would be something of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ty_former</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">test_con</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">ty_former</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 218683656,
        "sender_full_name": "Rajiv",
        "timestamp": 1606996665
    },
    {
        "content": "<p><code>a : α</code> are the \"fixed\" parameters of the inductive type, as described at the top of the section 4.4. in your example, there are no such parameters.</p>",
        "id": 218684824,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606997474
    },
    {
        "content": "<p>Thanks Marc. My apologies. I could not find where \"fixed\" parameters is described. </p>\n<p>Is it the case that in the form,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">constructor₁</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β₁</span><span class=\"o\">),</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">constructor₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β₂</span><span class=\"o\">),</span> <span class=\"n\">foo</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">constructorₙ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">βₙ</span><span class=\"o\">),</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p><code> (a : α)</code> and <code>Π (b : β₁)</code> are optional?</p>",
        "id": 218685623,
        "sender_full_name": "Rajiv",
        "timestamp": 1606998034
    },
    {
        "content": "<p>in this case, <code>(a : α)</code> and <code>(b : β₁)</code> do not refer to single type annotations, but telescopes (i.e. a sequence of type annotations), like in section 4.2. the sequence can be empty.</p>",
        "id": 218686417,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606998592
    },
    {
        "content": "<p>Thanks Marc.</p>",
        "id": 218692078,
        "sender_full_name": "Rajiv",
        "timestamp": 1607002062
    }
]