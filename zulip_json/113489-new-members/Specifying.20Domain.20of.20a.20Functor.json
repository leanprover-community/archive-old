[
    {
        "content": "<p>I've defined a category instance, and would like to define a functor out of it. However, as categories are implemented as typeclasses on objects and not structures unto themselves, it appears that I can't select a specific category to be the domain of the functor. Is there a work around to this?</p>",
        "id": 209865199,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1599887210
    },
    {
        "content": "<p>There are several ways to do this.</p>\n<ol>\n<li>Don't provide multiple instances for the same type, but use type tags: if you want to define a second category instance on <code>foo</code>, do <code>def bar := foo</code> and define the second instance on <code>bar</code>. This approach is sometimes used in mathlib, see for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/additive\">docs#additive</a></li>\n<li>use <code>local attribute [instance, priority &lt;some  large number&gt;]</code> to make type class resolution pick your instance.</li>\n<li>Instead of <code>C \\func D</code>, write <code>@category.functor</code> and supply the instance explicitly.</li>\n</ol>",
        "id": 209865720,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1599888166
    },
    {
        "content": "<p>Markus is spot on, but note that from the point of library design and larger scale of things, option (1) is clearly the most desirable. Option (2) and (3) will most give annoying clashes when multiple files are interacting and have different ideas of which category instance they expect on a given type. And users will also get confused (not at the place where you define the functor, but when it gets used and they have forgotten which category instance was used on the domain).</p>",
        "id": 209866142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599889008
    },
    {
        "content": "<p>It's important to remember that typeclass resolution is essentially syntactical: if <code>foo</code> already has a category structure, and you <code>def bar := foo</code>, then by default there's no category structure on <code>bar</code>. (And in particular, you're welcome to put a different category structure on it, without causing problems.)</p>",
        "id": 209866450,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599889792
    },
    {
        "content": "<p>When you <em>do</em> want to move a category (or anything else) structure across such a synonym, there are <code>derive</code> handlers: grep for <code>@[derive category]</code> for examples.</p>",
        "id": 209866494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599889833
    },
    {
        "content": "<p>This is not a workaround, but the intended use of the typeclass system.</p>",
        "id": 209866498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599889858
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 209867911,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599893029
    },
    {
        "content": "<p>Ah, I didn't know about the <code>def</code> thing, that looks like it will for nicely. Thanks for the clarification everyone!</p>",
        "id": 209883165,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1599920001
    }
]