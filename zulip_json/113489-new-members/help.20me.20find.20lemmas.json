[
    {
        "content": "<p>Surely these are somewhere?</p>\n<div class=\"codehilite\"><pre><span></span>lemma le_pred_of_lt {n m : ℕ} (h : n &lt; m) : n ≤ m - 1 := sorry\nlemma pred_le_self (n : ℕ) : n - 1 ≤ n := sorry\n</pre></div>",
        "id": 148255862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543019984
    },
    {
        "content": "<p>Second is a special case of <code>nat.sub_le</code>, do you specifically need it for 1?</p>",
        "id": 148255973,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543020207
    },
    {
        "content": "<p>Thanks, that'll do fine for the second.</p>",
        "id": 148256181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543020617
    },
    {
        "content": "<p>We seem to have <code>le_sub_iff_add_le</code> for commutative groups, but not <code>le_sub_of_add_le</code> for <code>nat</code>?</p>",
        "id": 148268678,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543048544
    },
    {
        "content": "<p>Am I missing something? I want <code>n + k ≤ b</code> implies <code>n ≤ b - k</code>.</p>",
        "id": 148268719,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543048575
    },
    {
        "content": "<p>I am sure it's there</p>",
        "id": 148268721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543048601
    },
    {
        "content": "<p><code>nat.basic</code> has a really comprehensive list of facts like this</p>",
        "id": 148268722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543048616
    },
    {
        "content": "<p><code>nat.le_sub_right_of_add_le</code></p>",
        "id": 148268728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543048631
    },
    {
        "content": "<p>ah, missing the <code>right</code>, thanks</p>",
        "id": 148268774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543048720
    },
    {
        "content": "<p>I should use find more -- it would have successfully found this lemma, it turns out.</p>",
        "id": 148268883,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543048992
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>H_left : n + k ≤ b,\nH_right : b &lt; m + k\n⊢ b - k &lt; m\n</pre></div>",
        "id": 148269200,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543049759
    },
    {
        "content": "<p><code>nat.sub_lt_right_iff_lt_add</code></p>",
        "id": 148269357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543050113
    },
    {
        "content": "<p>Ah, okay. I just found <code>sub_lt_sub_right_iff</code> and managed to use that.</p>",
        "id": 148269625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543050701
    },
    {
        "content": "<p>So ... is there some long term plan to avoid me having to memorize all these? :-)</p>",
        "id": 148269664,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543050726
    },
    {
        "content": "<p>go to <code>nat.basic</code> and browse around, that's what I jst did</p>",
        "id": 148269669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543050758
    },
    {
        "content": "<p>Is the following a crazy idea: we know that we can't just take all the standard results about naturals and mark them as [simp] (some of them are one-way implications for example). Scott is complaining that he cannot find lemmas which are \"standard\" though. Can we tag a shedload of lemmas in data.nat.basic as \"standard\" and then instead of Scott having to play guess-the-name (which is still sometimes hard, despite the heroic efforts of the name-that-lemma team), he can just explicitly look for the lemma in the \"standard\" list. I am not saying that there should be a tactic which attempts to apply more than one standard lemma at once. But I am saying that there could be a <code>standard</code> tactic which literally tries to find exactly which lemma you need from a list, and applies it if it's there, and fails otherwise. </p>\n<p>I have had problems recently looking for A -&gt; B if it happens to be the case that A &lt;-&gt; B. I personally never know whether to expect to see A -&gt; B or B -&gt; A or both or neither in the library if A &lt;-&gt; B is in there and I am not sure that there is a rule, especially if one direction needs some random thing I don't care about like decidability. Now I understand the philosophy of the library -- \"if it looks standard, it should be there\". OK so now let's make it easy to find the standard stuff by tagging it all with standard.</p>",
        "id": 148270509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543052583
    },
    {
        "content": "<p>if the bidirectional version is there, the one directional versions should not be there normally, unless the assumptions are different in each direction</p>",
        "id": 148270555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543052678
    },
    {
        "content": "<p>if A -&gt; B requires fewer assumptions than B -&gt; A, you will probably find A -&gt; B with a weak assumption and A &lt;-&gt; B with a strong assumption</p>",
        "id": 148270567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543052724
    },
    {
        "content": "<p>Ah so there is some logic to it? I'd not realised this. Of course the other thing is when you look for A &lt;-&gt; B and it turns out that it's B &lt;-&gt; A which is in there.</p>",
        "id": 148270619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543052832
    },
    {
        "content": "<p>in that case it's usually up to \"simplification order\"</p>",
        "id": 148270627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543052870
    },
    {
        "content": "<p>Is that just me not knowing the implicit total order on all predicates...yeah, that.</p>",
        "id": 148270629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543052878
    },
    {
        "content": "<p>for stuff involving subtraction vs addition, subtraction is on the left</p>",
        "id": 148270674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543052901
    },
    {
        "content": "<p>So how does that work for add_assoc?</p>",
        "id": 148270679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543052911
    },
    {
        "content": "<p>left assoc on the left, right assoc on the right. not much else to go on in that case</p>",
        "id": 148270689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543052940
    },
    {
        "content": "<p>But the thing on the right has more characters in, so it's more complicated.</p>",
        "id": 148270697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543052965
    },
    {
        "content": "<p>It's a comp lemma.</p>",
        "id": 148270700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543052970
    },
    {
        "content": "<p>well that depends on the parser</p>",
        "id": 148270703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543052988
    },
    {
        "content": "<p>what's the logic here?</p>",
        "id": 148270752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543053010
    },
    {
        "content": "<p>honestly I would always write an assoc lemma with explicit parens</p>",
        "id": 148270755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053020
    },
    {
        "content": "<p>(I should double check that's not a lie)</p>",
        "id": 148270758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053032
    },
    {
        "content": "<p>Even then I'm looking at it and thinking it's 50-50</p>",
        "id": 148270760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543053038
    },
    {
        "content": "<p>it is 50-50, I'm not going to lie</p>",
        "id": 148270765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053050
    },
    {
        "content": "<p>but you have to pick one order, and it was picked way back in core, and we stick with it</p>",
        "id": 148270782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053073
    },
    {
        "content": "<p>\"Something is simpler if it has fewer brackets\". Is that just nonsense?</p>",
        "id": 148270787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543053084
    },
    {
        "content": "<p>I'm not sure how much stock to put in what the parser thinks is the best order</p>",
        "id": 148270799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053115
    },
    {
        "content": "<p>I guess that works for mul_add though</p>",
        "id": 148270842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053146
    },
    {
        "content": "<p>I don't know, I wouldn't bet on it</p>",
        "id": 148270846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053161
    },
    {
        "content": "<p>OK, so it is random. The reason I am talking about add_assoc explicitly is that since I learnt that many simp or iff lemmas are of the form A = B, A &lt;-&gt; B with B less complicated than A, I've been able to start guessing which is on the left much better. But I still can't guess for add_assoc, so I just have to do look-up.</p>",
        "id": 148270856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543053183
    },
    {
        "content": "<p>yeah, just do the old <code>.1</code> <code> .2</code></p>",
        "id": 148270863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053205
    },
    {
        "content": "<p>If I were to list a bunch of bracketing combinations in some order, I would probably start from left assoc, maybe that's just me</p>",
        "id": 148270918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053280
    },
    {
        "content": "<p>So far my only idea for escaping \"look up the damn lemmas\" hell is to experiment with marking them all as <code>back</code>, and calling <code>back</code> a lot.</p>",
        "id": 148270919,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543053283
    },
    {
        "content": "<p>I actually think this will solve a lot of my problems.</p>",
        "id": 148270923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543053298
    },
    {
        "content": "<p>And <code>back?</code> prints the term-mode proof it finds, so it's easy to replace it if it is slow.</p>",
        "id": 148270930,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543053315
    },
    {
        "content": "<p>However .... all these <code>&lt;-&gt;</code> lemmas cause a problem.</p>",
        "id": 148270934,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543053333
    },
    {
        "content": "<p>metamath (more accurately, one of it's IDEs) had a one-step automatic proof function. It's a life saver for this stuff</p>",
        "id": 148270938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053339
    },
    {
        "content": "<p>you just write down all the assumptions you need and hit \"go\" and it finds the lemma</p>",
        "id": 148270980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053374
    },
    {
        "content": "<p>you have to be pretty specific, but it's great for doing lookups in context</p>",
        "id": 148270990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543053402
    },
    {
        "content": "<p>...</p>",
        "id": 148271221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543053822
    },
    {
        "content": "<p><a href=\"https://www.urbandictionary.com/define.php?term=the%20old%20one%20two\" target=\"_blank\" title=\"https://www.urbandictionary.com/define.php?term=the%20old%20one%20two\">https://www.urbandictionary.com/define.php?term=the%20old%20one%20two</a></p>",
        "id": 148271610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543054571
    },
    {
        "content": "<blockquote>\n<p>So ... is there some long term plan to avoid me having to memorize all these? :-)</p>\n</blockquote>\n<p>Yes, the long term goal is that you write some automation so that <em>we</em> can all avoid memorising these (-;</p>",
        "id": 148280408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543071696
    },
    {
        "content": "<p>The only thing I know how to do for \"lemmas involve nat subtraction\" is to get <code>back</code> up and running and trying beat problems over the head with that. I suspect it will probably work (<code>back</code>, especially if it calls <code>simp</code> along the way, it's not so far from <code>auto</code>) but it won't be pretty.</p>",
        "id": 148288111,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543087007
    },
    {
        "content": "<p>Are these nat subtraction problems solved in Coq? Why are they arising? I am struggling to relate this to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>⊕</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub><msub><mi>M</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\oplus_{i\\in I}M_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8607em;vertical-align:-0.17737em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathit mtight\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> but I never looked at the big operators paper seriously.</p>",
        "id": 148288271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543087362
    },
    {
        "content": "<p>Nat problems are solved by Omega in coq, aka Cooper in lean</p>",
        "id": 148288448,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1543087745
    },
    {
        "content": "<p>The interaction between big operators and (un)natural subtraction is arising for me because I was working with sums of subset of the naturals, because the <code>k</code> in <code>choose n k</code> really ought to be a natural number.</p>",
        "id": 148294216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543099904
    },
    {
        "content": "<p>Hey Scott, is there a reason why back @ <a href=\"https://github.com/leanprover/mathlib/pull/410\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/410\">https://github.com/leanprover/mathlib/pull/410</a> should still have the WIP tag (not that you decide)/is there any programming work I can do to make it mergeable</p>",
        "id": 148300063,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543113031
    },
    {
        "content": "<p>Yes, I'm sorry this PR has been abandonware for a while.</p>",
        "id": 148302416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543118390
    },
    {
        "content": "<p>I think the major obstacle is working out what to do with <code>apply_rules</code>. I haven't got around to looking at how <code>apply_rules</code> is used in mathlib yet.</p>",
        "id": 148302462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543118437
    },
    {
        "content": "<p>Can we just replace all the uses of <code>apply_rules</code> with <code>back</code>?</p>",
        "id": 148302463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543118450
    },
    {
        "content": "<p>It also needs some consideration of lemmas to tag, perhaps.</p>",
        "id": 148302517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543118525
    },
    {
        "content": "<p>The actual core code at &lt;<a href=\"https://github.com/leanprover/mathlib/pull/410/files#diff-e8836d95f7cd2f7e1c5ee370e791af03R33\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/410/files#diff-e8836d95f7cd2f7e1c5ee370e791af03R33\">https://github.com/leanprover/mathlib/pull/410/files#diff-e8836d95f7cd2f7e1c5ee370e791af03R33</a>&gt; could perhaps be rewritten, it reads a bit spaghetti-like at the moment, but I'm not sure what to do.</p>",
        "id": 148302537,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543118642
    },
    {
        "content": "<p>Something that would probably be easy for you, <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>, but I was confused by, is combining the <code>back</code> and <code>elim</code> attributes into just <code>back</code> and <code>back!</code>.</p>",
        "id": 148302594,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543118761
    },
    {
        "content": "<p>I don't think <code>apply_rules</code> is used anywhere yet, so you can safely remove it. I wrote it for proofs of continuity and limits, where it would be most useful, but there is a bug in Lean 3 <code>apply</code> (which unfolds too much) that prevents <code>apply</code> from working without underscores on continuity lemmas. So that I could never use it efficiently!</p>",
        "id": 148312045,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1543138147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> When <code>back</code> and <code>elim</code> are the same attribute what should their single unified description string be?<br>\nbut sure, I'll do that and then do a tiny shuffle</p>",
        "id": 148312348,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543138788
    },
    {
        "content": "<p>I forget which way round they go now. One counts as progress even if you don't discharge the goal.</p>",
        "id": 148312403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543138914
    },
    {
        "content": "<p>I put in my 2-cents and did the stuff<br>\nI got rid of that <code>precedence `?`:0</code> thing that worried you scott too</p>",
        "id": 148320789,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543156498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> I cleaned up a few things, but also realised the current implementation of <code>back</code> is hopelessly inefficient, and will need to be replaced.</p>",
        "id": 148337859,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543190739
    },
    {
        "content": "<p>(I'll continue this in the <code>PR reviews</code> stream.</p>",
        "id": 148342141,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543199334
    }
]