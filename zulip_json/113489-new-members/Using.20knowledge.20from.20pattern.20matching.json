[
    {
        "content": "<p>Hello, sorry if a variant of this question has already been asked. I’m currently trying to use information that should be available from prior pattern matching in a proof. In particular, if I have one variable serve as part of the pattern for another, I want to be able to recover that fact.</p>\n<p>So for example, in the code below, I need a proof that y &lt; x in order for the recursion to be valid. I can easily show that y is less than nat.succ y (i.e. x in the second branch), but I don’t actually know how to use this fact to prove that y &lt; x.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">recusion_test</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat.succ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n        <span class=\"n\">recusion_test</span> <span class=\"n\">y</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>\n<p>What should I replace sorry with to make this work?</p>",
        "id": 251948623,
        "sender_full_name": "Josh Clune",
        "timestamp": 1630707036
    },
    {
        "content": "<p>Not answering your question (I don't know how to do it, or if it can be done), but maybe you could provide an example of where you need this? Perhaps there's a workaround there too.</p>",
        "id": 251981340,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1630741164
    },
    {
        "content": "<p>I think the trick is usually <code>match _, rfl : ∀ x', x' = x with ...</code></p>",
        "id": 251981627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630741477
    },
    {
        "content": "<p>or <code>cases e : x</code></p>",
        "id": 251984142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630744118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20knowledge.20from.20pattern.20matching/near/251981627\">said</a>:</p>\n<blockquote>\n<p>I think the trick is usually <code>match _, rfl : ∀ x', x' = x with ...</code></p>\n</blockquote>\n<p>Sorry, I don't think I quite understand what you're getting at here. I'm not familiar with some of the syntax you're using or how it's supposed to work. Would you (or someone that knows what Eric is referring to) be willing to give an example of how I'm supposed to use this in context?</p>",
        "id": 252009963,
        "sender_full_name": "Josh Clune",
        "timestamp": 1630771372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20knowledge.20from.20pattern.20matching/near/251984142\">said</a>:</p>\n<blockquote>\n<p>or <code>cases e : x</code></p>\n</blockquote>\n<p>Unless if I'm misunderstanding, or am unfamiliar with some other way of using cases, I thought cases was usable as a tactic. But as I'm trying to define a program here, it's unclear to me how it would be possible to use this tactic in place of the match construct. I tried to use nat.cases_on x in place of match x with ..., but that ran into the same issue of lean being unable to recognize the relationship between y and x. Is there some way to use cases in this context to achieve the effect I'm aiming for?</p>",
        "id": 252010068,
        "sender_full_name": "Josh Clune",
        "timestamp": 1630771510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329243\">Horatiu Cheval</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20knowledge.20from.20pattern.20matching/near/251981340\">said</a>:</p>\n<blockquote>\n<p>Not answering your question (I don't know how to do it, or if it can be done), but maybe you could provide an example of where you need this? Perhaps there's a workaround there too.</p>\n</blockquote>\n<p>In the context of the specific function I'm working on at present, I'm trying to define a recursive function that takes a fin n and cases on the val of that fin n (e.g. if x : fin n, then I'm trying to write a recursive function that starts with match subtype.val x with...). Since I can't case directly on the fin n, that's why I think the workaround for the example I posted doesn't work. But I'm also interested on how to do this more generally for the future (assuming there is one).</p>",
        "id": 252010331,
        "sender_full_name": "Josh Clune",
        "timestamp": 1630771786
    }
]