[
    {
        "content": "<p>Dear All,</p>\n<p>I often struggle to know whether a lemma about coercions should have <code>coe</code> or <code>cast</code> in its name.  My vague rule is that most of the time <code>cast</code> is for ℕ, while <code>coe</code> is for everything else.</p>\n<p>Is there a stricter convention than this?</p>\n<p>Thanks!</p>",
        "id": 276826011,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648441305
    },
    {
        "content": "<p>The name of the coercion from <code>nat -&gt; A</code> is <code>nat.cast</code>, and similarly for <code>int.cast</code> and <code>rat.cast</code>. Other coercions might have their own names but are usually referred to as <code>coe</code></p>",
        "id": 276826211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648441633
    },
    {
        "content": "<p>In particular, there are two coercions declared for <code>nat -&gt; int</code>, and the usual one does not resolve to <code>nat.cast</code>, it unfolds to <code>int.of_nat</code>. This one is referred to as <code>coe</code> when it is used via <code>coe</code> and <code>of_nat</code> when the <code>int.of_nat</code> function is used directly</p>",
        "id": 276826334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648441813
    },
    {
        "content": "<p>Thanks Mario, this helps!</p>",
        "id": 276826352,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648441891
    },
    {
        "content": "<p>Just to make sure I understand, the \"other\" coercion ℕ →ℤ is the weird [-1-n] (or whatever the correct symbols are), right?</p>",
        "id": 276826410,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648441969
    },
    {
        "content": "<p>The other one is <code>nat.cast</code></p>",
        "id": 276826532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648442160
    },
    {
        "content": "<p><code>nat.cast : nat -&gt; A</code> where <code>A</code> is any monoid with one</p>",
        "id": 276826579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648442191
    },
    {
        "content": "<p>and <code>int</code> is a monoid with one so you can use <code>nat.cast</code> to coerce <code>nat -&gt; int</code></p>",
        "id": 276826586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648442220
    },
    {
        "content": "<p>Ok, thanks.  What I said above was nonsense.</p>",
        "id": 276826590,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648442235
    },
    {
        "content": "<p>but there is another coercion which is defined specifically for <code>nat -&gt; int</code> and overrides this blanket implementation</p>",
        "id": 276826591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648442238
    },
    {
        "content": "<p>using <code>int.of_nat</code></p>",
        "id": 276826595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648442245
    },
    {
        "content": "<p>to get the <code>nat.cast</code> coercion you have to write it out like <code>@coe nat int nat.cast_coe</code> or so</p>",
        "id": 276826644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648442288
    },
    {
        "content": "<p>the only place this is done, more or less, is in the proof that this is equal to the preferred coe based on <code>int.of_nat</code></p>",
        "id": 276826659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648442334
    },
    {
        "content": "<p>but this is a genuine diamond in the typeclass system that you have to watch out for since it's not a defeq</p>",
        "id": 276826668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648442373
    },
    {
        "content": "<p>Ok, I get it now.  In my mistaken comment above, I guess that I was using -1 as the <code>has_one</code>  of ℤ.</p>",
        "id": 276826675,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648442387
    },
    {
        "content": "<p>yeah that one's not a declared coe (it would probably be even more confusing)</p>",
        "id": 276826721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648442409
    },
    {
        "content": "<p>there's probably a way to get it using <code>nat.cast : nat -&gt; opposite int</code> or something</p>",
        "id": 276826728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648442440
    },
    {
        "content": "<p>There might be a way, but I'm not sure that I want to learn it, lest I get even more confused!</p>",
        "id": 276826743,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648442507
    },
    {
        "content": "<p>Thanks Mario!  I have a better understanding now of this <code>cast</code> vs <code>coe</code> issue!  And also I did not realize the subtlety of the two maps ℕ →ℤ.</p>",
        "id": 276826938,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648442860
    }
]