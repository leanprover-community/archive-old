[
    {
        "content": "<p>Dear all, I am struggling to work with continuous multilinear maps. Sorry for the long block of code below but one of the problems I am having is that when typing the \\up symbol in a new file it will not compile so the only way I know how to get it to appear is in the problem I'm trying to solve. I did shorten the code by changing the goal. The new goal is of course in general false but it is the open 'work_on_goal 2' that I am struggling to close at the moment. I have been trying to close it by first using rw help, but this comes up with an error even though the objects appear to be the same. Any help is much appreciated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">logic.is_empty</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">order.minimal</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.lattice</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">analysis.analytic.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">isolated_zeros</span>\n <span class=\"o\">{</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">}{</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">analytic_on</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"o\">)(</span><span class=\"n\">hzero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"c1\">--get the leading term result</span>\n    <span class=\"n\">rw</span> <span class=\"n\">analytic_on</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnew</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">analytic_at</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">has_fpower_series_at</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"n\">r</span> <span class=\"n\">hpower</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpsumatu</span> <span class=\"o\">:=</span> <span class=\"n\">hpower.has_sum</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hprpos</span> <span class=\"o\">:=</span> <span class=\"n\">hpower.r_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hpsumatu</span> <span class=\"o\">(</span><span class=\"n\">emetric.mem_ball_self</span> <span class=\"n\">hprpos</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hptsumatu</span> <span class=\"o\">:=</span> <span class=\"n\">has_sum.tsum_eq</span> <span class=\"n\">hpsumatu</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hptsumatu</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hzero</span> <span class=\"n\">at</span> <span class=\"n\">hptsumatu</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">tsum_eq_single</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">at</span> <span class=\"n\">hptsumatu</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hleading</span> <span class=\"o\">:=</span> <span class=\"n\">hptsumatu</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">},</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">b'</span> <span class=\"n\">hb'</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">help</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">b'</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                    <span class=\"n\">tauto</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks in advance.</p>",
        "id": 284764303,
        "sender_full_name": "Matthew Honnor",
        "timestamp": 1654184920
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">b'</span> <span class=\"n\">hb'</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">zero_lt_iff</span> <span class=\"n\">at</span> <span class=\"n\">hb'</span><span class=\"o\">,</span>\n      <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hb'</span><span class=\"o\">⟩⟩,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">continuous_multilinear_map.map_zero</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>works for me, if I've understood what you wanted a proof of. If I've done the wrong thing then maybe strategically put some <code>sorry</code>s in the proof to get it compiling with warnings but not errors, and then explicitly say which <code>sorry</code> you're interested in.</p>",
        "id": 284768561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654186678
    }
]