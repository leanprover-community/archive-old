[
    {
        "content": "<p>I wanted to prove that there is an isometric embedding of Lp of a sub-sigma-field onto Lp (which should be trivial), but am having problem with instances of emetric spaces. Boiling it down to a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.function.lp_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.isometry</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mα</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">isometry</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Lp.edist_def</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- rewrite tactic failed, did not find instance of the pattern</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">isometry</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span> <span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">edist</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- new goal: pseudo_emetric_space.to_has_edist = Lp.has_edist</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How am I supposed to do this proof using the Lp API? (Well, for this particular case <code>refl</code> works, but that will not help me in my actual problem.)</p>",
        "id": 278656988,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649748557
    },
    {
        "content": "<p>I know I am not answering your question here, but isn't the isometry you want something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp_meas_to_Lp_trim_lie\">docs#measure_theory.Lp_meas_to_Lp_trim_lie</a>, composed with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a>.subtypeₗᵢ in order to go from <code>Lp_meas</code> to <code>Lp</code> ?</p>",
        "id": 278657862,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1649749168
    },
    {
        "content": "<p>Yes, I know must be obtainable this way (and in any case the immediate reason I need the isometry is to get continuity from it to play around with induction principles, but I can prove continuity by hand because I know ae-equality of the relevant functions - in fact stating the equality of <code>dist</code> or <code>edist</code> works). It's just that for some reason that I would like to understand, explicit <code>dist</code> picks the right instance but <code>isometry</code> choses the wrong one - my current mental model is that the one <code>isometry</code> chooses is the more generic one, while <code>Lp.dist</code> knows to pick the more specific one.</p>\n<p>Don't worry I am starting to get your hints that <code>Lp_meas</code> is nicer to handle that <code>Lp _ _ (\\mu.trim _)</code> :-)</p>",
        "id": 278659186,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649750169
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lp_trim_to_Lp_li</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">m0</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">m0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Lp</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">μ.trim</span> <span class=\"n\">hm</span><span class=\"o\">))</span> <span class=\"bp\">→ₗᵢ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">Lp</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">submodule.subtypeₗ</span><span class=\"bp\">ᵢ</span> <span class=\"o\">(</span><span class=\"n\">Lp_meas</span> <span class=\"n\">F</span> <span class=\"n\">ℝ</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"n\">μ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n  <span class=\"o\">(</span><span class=\"n\">Lp_meas_to_Lp_trim_lie</span> <span class=\"n\">F</span> <span class=\"n\">ℝ</span> <span class=\"n\">p</span> <span class=\"n\">μ</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.to_linear_isometry</span>\n</code></pre></div>",
        "id": 278659305,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1649750278
    },
    {
        "content": "<p>Sorry, but I can't help you with that dist problem. I have no idea of what happens. Maybe someone else can help.</p>",
        "id": 278659482,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1649750401
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/Lp.has_edist\">docs#Lp.has_edist</a> for reference)</p>",
        "id": 278660815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649751240
    },
    {
        "content": "<p>My guess is that that shouldn't be defined in terms of <code>ennreal.of_real</code></p>",
        "id": 278660959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649751330
    },
    {
        "content": "<p>Because that's not how the default in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pseudo_metric_space/src\">src#pseudo_metric_space</a> is defined</p>",
        "id": 278661057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649751394
    },
    {
        "content": "<p>Ah so IIUC, <code>Lp</code> has a <code>pseudo_emetric_space</code> instance so it gets <code>pseudo_emetric_space.to_has_edist</code> from that, but <code>Lp.has_edist</code> is conflicting with it. Would a solution be to simply remove <code>Lp.has_edist</code> then?</p>\n<p>(BTW, is there a way to ask lean to show where an instance is coming from, like <code>trace_instance {pseudo_emetric_space (Lp ...)}</code> would tell me that is comes from <code>emetric_space</code> from <code>metric_space</code> from <code>normed_space</code> from a particular definition? Here I traced it back to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp.has_norm\">docs#measure_theory.Lp.has_norm</a> which is like 4 lines higher in the lean file but many instance layers above, but that was mostly browsing the docs and guessing.)</p>",
        "id": 278669951,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649756791
    },
    {
        "content": "<p>You can hover over the diamond in the goal view to trace it back</p>",
        "id": 278671927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649757991
    },
    {
        "content": "<p>Thanks for the tip! I finally realized also that after saying <code>letI : metric_space (Lp ℝ 1 μ) := by apply_instance</code> I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_inst</span><span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">Lp</span> <span class=\"n\">ℝ</span> <span class=\"mi\">1</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">normed_group.to_metric_space</span>\n</code></pre></div>\n<p>and clicking on the right-hand side takes me to the definition even if there is no diamond.</p>",
        "id": 278672929,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649758689
    },
    {
        "content": "<p>Ah, slowly realizing that the point of <code>Lp.has_edist</code> is that it does not depend on <code>[hp : fact (1 ≤ p)]</code></p>",
        "id": 278673829,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649759284
    },
    {
        "content": "<p>The bug here is the <code>normed_space.of_core</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp.normed_space\">docs#measure_theory.Lp.normed_space</a></p>",
        "id": 278681596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649764542
    },
    {
        "content": "<p>Which says \"discard the existing <code>edist</code> and <code>dist</code> definitions, and define brand new ones\"</p>",
        "id": 278681962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649764733
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/pull/13388\">#13388</a></p>",
        "id": 278683243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649765424
    },
    {
        "content": "<p>Isn't the bug rather in the definition of <code>edist</code>: one could make sure that it is defeq to the one corresponding to the <code>of_core</code> construction, no?</p>",
        "id": 278684037,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649765946
    },
    {
        "content": "<p>In fact I agree that your approach in <a href=\"https://github.com/leanprover-community/mathlib/pull/13388\">#13388</a> is better, as it allows to have a nicer definitional formula for the edist.</p>",
        "id": 278684542,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649766261
    },
    {
        "content": "<p>The natural choice of <code>edist</code> is neither the one we actually have right now, or the one that's generated by <code>normed_group.of_core</code></p>",
        "id": 278684566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649766282
    },
    {
        "content": "<p>Yes, let me fix that on <a href=\"https://github.com/leanprover-community/mathlib/pull/13388\">#13388</a> if you don't mind.</p>",
        "id": 278684596,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649766300
    },
    {
        "content": "<p>Probably making <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp.edist_def\">docs#measure_theory.Lp.edist_def</a> true by <code>rfl</code> is the right definition</p>",
        "id": 278684613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649766306
    },
    {
        "content": "<p>Go for it - I left if out because I didn't know if anyone cared, and wanted to keep the PR small</p>",
        "id": 278684658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649766332
    }
]