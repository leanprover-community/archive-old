[
    {
        "content": "<p>Hi, </p>\n<p><code>subtype.eq</code> shows that two members of a subtype with the same <code>val</code> are equal, is there something similar for structures (typically, a tactic that transforms a goal which states the equality of two structures into a list of goals, one for each non-<code>Prop</code> field)?</p>",
        "id": 179768896,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572824946
    },
    {
        "content": "<p>Sadly no, the closest would be <code>subtype.mk.inj</code>, a version of which is generated for all structures.</p>",
        "id": 179769751,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572826447
    },
    {
        "content": "<p>I could have sworn there was a tactic for this, that Scott petitioned for and Simon wrote, although I forget the name</p>",
        "id": 179770259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572827486
    },
    {
        "content": "<p>These kinds of theorems usually go by the name <code>*_ext</code></p>",
        "id": 179770308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572827523
    },
    {
        "content": "<p><code>subtype.mk.inj</code> feels like it goes in the wrong direction</p>",
        "id": 179770332,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572827606
    },
    {
        "content": "<p>Maybe I'm just thinking of the <code>ext</code> tactic, which applies <code>@[extensionality]</code> lemmas. But you have to state the theorem for your structure.</p>",
        "id": 179770340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572827635
    },
    {
        "content": "<p>luckily it's pretty easy to prove: case on the two structures, then congr; assumption</p>",
        "id": 179770392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572827680
    },
    {
        "content": "<p>Yes, that's more or less what I am doing, it works well enough</p>",
        "id": 179770457,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572827802
    },
    {
        "content": "<p>I remember receiving the request but I don't think I wrote it yet</p>",
        "id": 179775162,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572836348
    },
    {
        "content": "<p>Is this what you're looking for?</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1645\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1645\">https://github.com/leanprover-community/mathlib/pull/1645</a></p>",
        "id": 179780136,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572845474
    },
    {
        "content": "<p>Yes, exactly that.</p>",
        "id": 179816651,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1572859204
    },
    {
        "content": "<p>So this landed in mathlib, great, thanks a lot! I have a small issue though, this code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">toto</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">toto</span>\n\n<span class=\"n\">def</span> <span class=\"n\">head</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">toto</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">toto</span><span class=\"bp\">.</span><span class=\"n\">P</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">structure</span> <span class=\"n\">toto&#39;</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">toto</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">head</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">toto&#39;</span><span class=\"bp\">.</span><span class=\"n\">ext</span>\n</pre></div>\n\n\n<p>tells me <code>error: tactic failed, there are no goals to be solved</code> on the line with the <code>@[ext]</code> (but otherwise it works, toto'.ext is generated and correct). One more case of lean being too clever?</p>",
        "id": 181196915,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1574247365
    },
    {
        "content": "<p>Even simpler version exhibiting the same message:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">structure</span> <span class=\"n\">dumb</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">dumb</span><span class=\"bp\">.</span><span class=\"n\">ext</span>\n</pre></div>",
        "id": 181304152,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1574343159
    },
    {
        "content": "<p>Hmm, weird</p>",
        "id": 181304485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574343436
    },
    {
        "content": "<p><del>I am lost. What's the question here? Is @[ext] a thing?</del> Oh I see, it's a new thing</p>",
        "id": 181304579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574343501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> It looks like <code>@[ext]</code> is going through some growing pains...</p>",
        "id": 181304752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574343611
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1721\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1721\">https://github.com/leanprover-community/mathlib/pull/1721</a></p>",
        "id": 181305124,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574343893
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> !</p>",
        "id": 181306004,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574344525
    }
]