[
    {
        "content": "<p>I got stuck trying to prove these two, please can anyone help me with the solutions:</p>\n<p>theorem DG2 (α : Type*) (A : α → Prop) : (¬ ∃ x, ¬ A x) → ∀ x, A x := sorry<br>\ntheorem NG1 (α : Type*) (A : α → Prop) : (¬ ∀ x, A x) → ∃ x, ¬ A x := sorry</p>\n<p>Thanks,<br>\nJose</p>",
        "id": 257293282,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634085699
    },
    {
        "content": "<p>What have you tried? (See also <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>)</p>",
        "id": 257295216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634087320
    },
    {
        "content": "<p>Is this homework? And what Scott said.</p>",
        "id": 257316445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634105694
    },
    {
        "content": "<p>Hi Scott, and Kevin, thanks a lot for your message.</p>\n<p>It is not homework, I am just trying to learn Lean on my own, and I doing the exercises that I found in a Logic text book using Lean, but the book is not related at all with Lean.<br>\nIn the book the relations between quantifiers are given for granted and used without demonstration. That is why I thought it to be a good idea to use theorem and then use it directly in other demonstrations.<br>\nAll the exercises in the book have solutions, so for me it is more like translating them to Lean, to help me to learn how to translate natural deduction proofs into Lean. Hopefully that will help me to understand better natural deduction too.</p>\n<p>I had to try to solve the problem again as I had deleted all that I tried. I usually just keep the solutions that work.</p>\n<p>This what I tried but it is clearly wrong. Any hint?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">DG2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"n\">classical.by_contradiction</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n     <span class=\"n\">classical.by_contradiction</span><span class=\"o\">(</span>\n     <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n     <span class=\"k\">assume</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">⟩,</span>\n     <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">h4</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257436524,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634158646
    },
    {
        "content": "<p>Do you insist on writing a proof term or would you be happy using tactics?</p>",
        "id": 257438109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634159276
    },
    {
        "content": "<p>Hi Patrick, thanks for your message.<br>\nI tried to learn tactics, but found it very confusing, also, proof theorem looks to me more similar to natural deduction. Maybe I am wrong?<br>\nBut yes, I plan to learn tactics.</p>",
        "id": 257438545,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634159453
    },
    {
        "content": "<p>Ok, I'll give you a better term mode start then:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">DG2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">classical.by_contradiction</span> <span class=\"n\">_</span>\n</code></pre></div>\n</div></div>",
        "id": 257439063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634159658
    },
    {
        "content": "<p>You could first try showing <code>(¬ ∃ x, A x) → ∀ x, ¬ A x</code>. I'll let you appreciate how this is basically the definition of <code>∃</code>.</p>",
        "id": 257439084,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634159667
    },
    {
        "content": "<p>I assume he is already past that stage</p>",
        "id": 257439112,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634159682
    },
    {
        "content": "<p>Anyway, I do recommend learning tactic mode. The tutorials project is hopeful good enough, and it features proving all this (in tactic mode).</p>",
        "id": 257439199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634159726
    },
    {
        "content": "<p>Yes, that one was easy, thanks Yael</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">NP1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"o\">(</span>\n      <span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">exists.intro</span> <span class=\"n\">y</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">h3</span>\n    <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257439255,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634159749
    },
    {
        "content": "<p>Now, swapping the <code>¬</code> around is a matter of simplifying <code>¬ (¬ something)</code> to <code>something</code> and hopefully you should have a clearer view by now <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 257439509,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634159860
    },
    {
        "content": "<p>oh, I said that was easy, but not, in fact I don't understand it completely. Any hit about logical principles that I can look at, to understand it better Yaël? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span><br>\nThanks Patrick, will try that, I guess this is one of the things where Type Theory is different from Set theory. The need to assume that x to be able to do the demonstration. I think it is mentioned somewhere in Logic and Proof.</p>",
        "id": 257441643,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634160677
    },
    {
        "content": "<p>Thanks Patrick and Yaël.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">DG2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">classical.by_contradiction</span>\n<span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">h2</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n<p>Anyway, this is weird, need to think about it. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 257445658,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634162434
    },
    {
        "content": "<p>No, the keyword <code>assume</code> is a bit confusing but there is no difference with first order logic foundations here. In order to prove a statement starting with <code>∀ x, ...</code>, the direct proof starts with \"Let's fix an arbitrary x\". This is what <code>assume x</code> is doing</p>",
        "id": 257445676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634162439
    },
    {
        "content": "<p>I was answering your previous message, but we wrote at the same time</p>",
        "id": 257445725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634162465
    },
    {
        "content": "<p>Great. Now you're ready to rewrite it as <code>λ h1 x, classical.by_contradiction (λ h2, h1 ⟨x, h2⟩)</code></p>",
        "id": 257445798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634162508
    },
    {
        "content": "<p>And this is the signal you should be learning tactic mode instead of obfuscated mode.</p>",
        "id": 257445874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634162531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219844\">@Jose Balado</span> I've just been writing lean files and YouTube tutorials for this sort of thing for my UGs -- maybe <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean/blob/master/src/2021/logic/README.md\">https://github.com/ImperialCollegeLondon/M40001_lean/blob/master/src/2021/logic/README.md</a> and <a href=\"https://youtube.com/playlist?list=PLVZep5wTamMmeF968ovIjd-uc1I6kdirJ\">https://youtube.com/playlist?list=PLVZep5wTamMmeF968ovIjd-uc1I6kdirJ</a> might help?</p>",
        "id": 257446215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634162696
    },
    {
        "content": "<p>yes Patrick, I see, I got it wrong, the case I was referring being different for Type theory was this:<br>\nIn contrast, the statement (∀ x : U, P x) → ∃ x : U, P x is not provable in Lean.</p>\n<p>Yes, using Lambda notation is not a problem.</p>\n<p>Ok, I will give a try to tactics, but even this short code  looks weird, I can not see how I can related this to natural deduction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h2</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257446538,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634162853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219844\">Jose Balado</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20quantifiers/near/257446538\">said</a>:</p>\n<blockquote>\n<p>yes Patrick, I see, I got it wrong, the case I was referring being different for Type theory was this:<br>\nIn contrast, the statement (∀ x : U, P x) → ∃ x : U, P x is not provable in Lean.</p>\n</blockquote>\n<p>I still don't see a difference. That statement wouldn't be provable in any (sound) foundation.</p>",
        "id": 257446858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634163023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nEverything helps, looks interesting, thanks for the link.</p>",
        "id": 257446973,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634163091
    },
    {
        "content": "<p>I don't understand what's wrong with your short code involving two rewrites. But I'm a mathematician so I don't know what is \"natural deduction\".</p>",
        "id": 257446991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634163100
    },
    {
        "content": "<p>It's those crazy fractions I think</p>",
        "id": 257447132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634163157
    },
    {
        "content": "<p>Kevin is also a mathematician <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 257447237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634163211
    },
    {
        "content": "<p>On the Discord the other day I was telling someone that in the maths department we specialise in unnatural deduction</p>",
        "id": 257447249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634163218
    },
    {
        "content": "<p>He tries to pretend but he knows there are all sorts of crazy fractions (including typing rules)</p>",
        "id": 257447359,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634163258
    },
    {
        "content": "<p>Usually the way of presenting First Order demonstrations in first year Mathematical logic books. Like this, for example:<br>\n<a href=\"https://leanprover.github.io/logic_and_proof/natural_deduction_for_first_order_logic.html\">https://leanprover.github.io/logic_and_proof/natural_deduction_for_first_order_logic.html</a></p>\n<p><span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 257447495,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634163343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <br>\nTo give more context about (∀ x : U, P x) → ∃ x : U, P x is not provable in Lean.</p>\n<p>-- This is subtle: the proof does not go through if we do not declare a variable u of type U, even though u does not appear in the statement of the theorem.<br>\n-- This highlights a difference between first-order logic and the logic implemented in Lean. <br>\n-- In natural deduction, we can prove ∀x P(x) → ∃x P(x), which shows that our proof system implicitly assumes that the universe has at least one object. <br>\n-- In contrast, the statement (∀ x : U, P x) → ∃ x : U, P x is not provable in Lean. <br>\n-- In other words, in Lean, it is possible for a type to be empty, and so the proof above requires an explicit assumption that there is an element u in U.</p>\n<p>And I think I saw that in several logic books, but, can be completely mistaken, of course. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p><a href=\"https://leanprover.github.io/logic_and_proof/first_order_logic_in_lean.html\">https://leanprover.github.io/logic_and_proof/first_order_logic_in_lean.html</a></p>",
        "id": 257447865,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634163510
    },
    {
        "content": "<p>I understand this very well. But the analogue statement in set theory would not be <code>∀x P(x) → ∃x P(x)</code>, it would be <code>(∀ x ∈ A, P(x)) → ∃ x ∈ A, P(x)</code><br>\nfor some unspecified set <code>A</code>, and this isn't provable either.</p>",
        "id": 257448556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634163870
    },
    {
        "content": "<p>I remember telling one of the Isabelle crowd that we'd defined a perfectoid space and they asked if we'd proved any theorems about it and I said no, and they said \"oh so all you did was proved the type was inhabited?\" and I said \"oh no we didn't do that either\"</p>",
        "id": 257449042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634164117
    },
    {
        "content": "<p>I've never quite understood this. I have a memory from model theory lectures that they assume all models are nonempty</p>",
        "id": 257449106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634164154
    },
    {
        "content": "<p>Ok, I thought Set Theory and First Order Logic to be based in exactly the same foundations, aside from the Axiom of Choice. It seems they are not. Also, Type Theory feels different than Set Theory and probably better to represent other domains aside from Maths.<br>\nBut my knowledge of Set Theory and Mathematical Logic is really basic, so it is just a gut feeling.</p>",
        "id": 257450765,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634165178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20quantifiers/near/257446858\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"219844\">Jose Balado</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20quantifiers/near/257446538\">said</a>:</p>\n<blockquote>\n<p>yes Patrick, I see, I got it wrong, the case I was referring being different for Type theory was this:<br>\nIn contrast, the statement (∀ x : U, P x) → ∃ x : U, P x is not provable in Lean.</p>\n</blockquote>\n<p>I still don't see a difference. That statement wouldn't be provable in any (sound) foundation.</p>\n</blockquote>\n<p>Actually, this is an axiom or provable in FOL and HOL foundations</p>",
        "id": 257450854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634165248
    },
    {
        "content": "<p>the catch is that all types are nonempty in these foundations</p>",
        "id": 257450888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634165276
    },
    {
        "content": "<p><code>false</code> is not a type in those foundations?</p>",
        "id": 257450952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634165297
    },
    {
        "content": "<p>no</p>",
        "id": 257450957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634165301
    },
    {
        "content": "<p>in FOL, propositions are not types</p>",
        "id": 257450976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634165313
    },
    {
        "content": "<p>and this is one reason why they can't be</p>",
        "id": 257450997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634165333
    },
    {
        "content": "<p>in HOL whenever you construct a new type you have to prove it is nonempty before the construction is admitted</p>",
        "id": 257451062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634165378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks, that is really interesting.</p>",
        "id": 257451358,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634165537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219844\">Jose Balado</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20quantifiers/near/257450765\">said</a>:</p>\n<blockquote>\n<p>Also, Type Theory feels different than Set Theory and probably better to represent other domains aside from Maths.</p>\n</blockquote>\n<p>I claim type theory is much closer to how mathematicians actually think than FOL+set theory.</p>",
        "id": 257451436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634165585
    },
    {
        "content": "<p>It takes a bit of time to realize this because our polite lie that maths relies on set theory is an old habit. Of course the truth is math is completely foundation-agnostic.</p>",
        "id": 257451527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634165640
    },
    {
        "content": "<p>It's a soft type theory though, and defeq is definitely not a thing</p>",
        "id": 257451658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634165697
    },
    {
        "content": "<p>Anyway, I should go to sleep now that my teaching is ready for tomorrow.</p>",
        "id": 257451712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634165731
    },
    {
        "content": "<p>Hi, is there a way to simplify this theorem? Don't like too much the idea of using two by_contradicition.<br>\nThanks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">NG1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"n\">classical.by_contradiction</span>\n<span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">classical.by_contradiction</span><span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">h4</span>\n  <span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">h2</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257610353,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634247551
    },
    {
        "content": "<p>I mean, you can golf it to one line as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">classical.by_contradiction</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">classical.by_contradiction</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It turns out this is pretty much how mathlib proves <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_forall\">docs#not_forall</a> (the forward direction of which is your statement):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">not.decidable_imp_symm</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">nx</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nx.decidable_imp_symm</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>where <code>decidable.not_imp_symm</code> is basically just <code>by_contradiction</code>.</p>",
        "id": 257611903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634248390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks Eric, will take a look at it.</p>",
        "id": 257612258,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634248581
    },
    {
        "content": "<p>A little bit difficult for me to follow mathlib, but looks really interesting. Thanks for the link Eric</p>",
        "id": 257612844,
        "sender_full_name": "Jose Balado",
        "timestamp": 1634248847
    }
]