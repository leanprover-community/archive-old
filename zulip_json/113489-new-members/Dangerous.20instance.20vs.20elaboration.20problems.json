[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/4057\">#4057</a> (which defines inner products based on <code>is_R_or_C</code>), the main outstanding issue is that the linter reports a dangerous instance in the definition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">inner_product_space</span> <span class=\"o\">(</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">ℝ</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inner</span> <span class=\"err\">𝕜</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>which presumably comes from the fact that <code>normed_group α</code> doesn't have <code>𝕜</code> as a parameter. I gather that the usual way to fix this is to move <code>normed_group α</code> into the assumptions, as in</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">inner_product_space</span> <span class=\"o\">(</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">ℝ</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inner</span> <span class=\"err\">𝕜</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>However, when I do that, I run into some very annoying elaboration issues where I have to constantly spoonfeed it <code>𝕜</code> and/or <code>α</code> in lemmas that rewrite norms in terms of inner products, even though the relevant instance is directly present in the context.</p>\n<p>So: just how dangerous is an instance like this? Would it still send the search algorithm into a wild goose chase, even though the only possibilities for <code>𝕜</code> should always remain only <code>ℂ</code> and <code>ℝ</code>?</p>",
        "id": 210594971,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1600486118
    },
    {
        "content": "<p>I think you could have asked this in <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a>! :) <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ?</p>",
        "id": 210621861,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600531134
    }
]