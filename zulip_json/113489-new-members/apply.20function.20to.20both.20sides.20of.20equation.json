[
    {
        "content": "<p>If I have <code>h: a=b</code> and <code>f: X \\to Y</code> with <code>a b: X</code>, how do I prove <code>f a = f b</code>?</p>",
        "id": 277352187,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1648768293
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>   <span class=\"c1\">-- suggests   refine congr_arg f h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277352433,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648768473
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 277352565,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1648768564
    },
    {
        "content": "<p>There's also a tactic for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277356048,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648771674
    },
    {
        "content": "<p>Thanks, Kyle! That's more of what I expected!</p>",
        "id": 277823895,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1649129828
    },
    {
        "content": "<p><code>apply_fun</code> can also be used on the goal itself, which will introduce an obligation to prove injectivity (if the tactic can't do it automatically). This is one of my favorite tactics!</p>",
        "id": 277933387,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649187713
    }
]