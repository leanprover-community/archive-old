[
    {
        "content": "<p>Am I supposed to be able to get <code>set.nonempty</code> from a set whose subtype is nonempty, without using <code>classical</code> (for <code>classical.inhabited_of_nonempty</code> or similar)?  Please tell me how, if so!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">set.nonempty.to_subtype</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">default</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- is this true?</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 219902521,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607980271
    },
    {
        "content": "<p>Here's a bad and non-golfed proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">set.nonempty.to_subtype</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">default</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- is this true?</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">I.2</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219902895,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607980482
    },
    {
        "content": "<p>So at least it's true :)</p>",
        "id": 219902946,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607980513
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.nonempty_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nonempty_subtype</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219903212,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607980641
    },
    {
        "content": "<p>Much better!</p>",
        "id": 219903247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607980655
    },
    {
        "content": "<p>Found by two <code>suggest</code>s</p>",
        "id": 219903263,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607980667
    },
    {
        "content": "<p>Golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.nonempty_def.mpr</span> <span class=\"o\">(</span><span class=\"n\">nonempty_subtype.mp</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n</code></pre></div>",
        "id": 219903408,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607980745
    },
    {
        "content": "<p>Can you PR it? :). At least I assume it should be PR'd, it's so fundamental that perhaps it's been omitted for some good reason?</p>",
        "id": 219903570,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607980821
    },
    {
        "content": "<p>Also, this seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty_subtype.mp</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n</code></pre></div>",
        "id": 219904200,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607981126
    },
    {
        "content": "<p>So maybe no need for a PR :)</p>",
        "id": 219904537,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1607981288
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5373\">#5373</a> too late =)</p>",
        "id": 219904676,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607981383
    }
]