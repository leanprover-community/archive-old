[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">AB</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">AB</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">AB</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isa</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">AB</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">AB.a</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">AB.b</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">isa</span> <span class=\"n\">AB.a</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>My guess goes to <code>refl</code> and <code>unfold</code>. Both do not work.</p>",
        "id": 246388689,
        "sender_full_name": "Jiekai",
        "timestamp": 1626628403
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">ite</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_same_term</span><span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">term.t</span>      <span class=\"n\">term.t</span>    <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">term.f</span>      <span class=\"n\">term.f</span>    <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">term.ite</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">a3</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">term.ite</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"n\">b3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">is_same_term</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"n\">is_same_term</span> <span class=\"n\">a2</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"n\">is_same_term</span> <span class=\"n\">a3</span> <span class=\"n\">b3</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v00</span> <span class=\"o\">:=</span> <span class=\"n\">term.t</span>\n<span class=\"kd\">def</span> <span class=\"n\">v01</span> <span class=\"o\">:=</span> <span class=\"n\">term.f</span>\n<span class=\"kd\">def</span> <span class=\"n\">v10</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">term.ite</span> <span class=\"n\">term.t</span> <span class=\"n\">v00</span> <span class=\"n\">v01</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_same_term</span> <span class=\"o\">(</span><span class=\"n\">term.ite</span> <span class=\"n\">term.t</span> <span class=\"n\">term.t</span> <span class=\"n\">term.f</span><span class=\"o\">)</span> <span class=\"n\">v10</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">simplify tactic failed to simplify</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ is_same_term (term.t.ite term.t term.f) v10</span>\n<span class=\"cm\">-/</span>\n\n  <span class=\"n\">unfold</span> <span class=\"n\">is_same_term</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Why is <code> unfold is_same_term</code> not working here?</p>",
        "id": 246410520,
        "sender_full_name": "Jiekai",
        "timestamp": 1626661161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277676\">Jiekai</span> has marked this topic as unresolved.</p>",
        "id": 246410526,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626661183
    },
    {
        "content": "<p><code>unfold</code> doesn't see through semireducible definitions. So you have to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_same_term</span> <span class=\"o\">(</span><span class=\"n\">term.ite</span> <span class=\"n\">term.t</span> <span class=\"n\">term.t</span> <span class=\"n\">term.f</span><span class=\"o\">)</span> <span class=\"n\">v10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">v10</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_same_term</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">v00</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_same_term</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">v01</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_same_term</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246410702,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626661495
    },
    {
        "content": "<p>I wrote that in long form to be clearer about what's going on.</p>",
        "id": 246410706,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626661506
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_same_term</span> <span class=\"o\">(</span><span class=\"n\">term.ite</span> <span class=\"n\">term.t</span> <span class=\"n\">term.t</span> <span class=\"n\">term.f</span><span class=\"o\">)</span> <span class=\"n\">v10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">v10</span><span class=\"o\">,</span> <span class=\"n\">v00</span><span class=\"o\">,</span> <span class=\"n\">v01</span><span class=\"o\">,</span> <span class=\"n\">is_same_term</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 246410721,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626661553
    },
    {
        "content": "<p>long form appreciated <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 246410831,
        "sender_full_name": "Jiekai",
        "timestamp": 1626661710
    }
]