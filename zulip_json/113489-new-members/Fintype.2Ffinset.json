[
    {
        "content": "<p>I'm getting a bit lost navigating between the fintype/finset APIs - I'm not sure how to do what I want to do (if I even can). </p>\n<p>First, I want to be able to take a <code>fintype</code> AP,  an evalution from AP to <code>bool</code>, and construct a set of the elements of AP which evaluate to true.  Simple enough. </p>\n<p>Then, I  want to take a <code>set AP</code> <code>s</code> and construct an evaluation from AP to <code>bool</code> which returns <code>tt</code> if <code>a</code> is in  <code>s</code> and <code>ff</code> otherwise. </p>\n<p>Of course, membership isn't decidable, but since AP is a fintype I thought I should assume that <code>s</code> is a finset instead. But then, I can't seem to adjust my first function to construct a computable <code>finset</code> AP rather than a <code>set</code> AP. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_finset</span> <span class=\"o\">{</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">AP</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">AP</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">AP</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.univ</span> <span class=\"bp\">|</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>  <span class=\"c1\">-- noncomputable</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_eval</span>\n<span class=\"o\">{</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">AP</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">AP</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AP</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n</code></pre></div>\n\n<p>is there a way to do this so that both functions are decidable/computable?</p>",
        "id": 214841455,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1603894297
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">to_finset</span> <span class=\"o\">{</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">AP</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">AP</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">AP</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_eval</span> <span class=\"o\">{</span><span class=\"n\">AP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">AP</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">AP</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">AP</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 214842142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603894614
    }
]