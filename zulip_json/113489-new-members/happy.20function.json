[
    {
        "content": "<p>Hello again! Not really sure if I should make a new topic since I want to ask about happy numbers again. I think I might rename this topic to just \"happy function\" for now, unless it would be good to make a new topic? Anyways, I wanted to be able to get the ith iteration of the happy function so I have this recursive definition that I've been using to prove some small things.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">happyfunction&#39;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">happyfunction</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">happyfunction&#39;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>I'm not really sure if this is the easiest to work with, so would it be better if I used something else like a stream?</p>\n<p>Anyways (again), I am now trying to formalize <a href=\"https://oeis.org/A003621/a003621.pdf\">https://oeis.org/A003621/a003621.pdf</a> about 10-happy/sad numbers. I can't seem to figure out how to show <code> ∀ (d ∈ (digits 10 n)), d ≤ 9</code> so then I can show that the sum of the digits squared must be less than 81*(number of digits), and then that the happy function on a 4 or more digit number results in a smaller number. Here is what I've done so far (that is probably really inefficient and messy):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">ten_happyfunction_lt_four_digits</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">happyfunction</span> <span class=\"mi\">2</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">9</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">digits</span> <span class=\"n\">at</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">digits_aux_def</span> <span class=\"n\">at</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"err\">%</span><span class=\"mi\">10</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I wasn't sure how to deal with the list from the theorem <code>digits_aux_def</code> so I randomly used cases just to try and use the mod part to make some progress. Is there some tactic or way to show that every digit would be mod 10 and thus less than or equal to 9? I currently have this goal now:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≥</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">digits_aux</span> <span class=\"mi\">10</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">))</span>\n<span class=\"err\">⊢</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">9</span>\n</code></pre></div>\n\n\n<p>Hmm I tried library_search and hint but they weren't too helpful. Maybe there's some easy way that I am overlooking?<br>\nThank you so much!</p>",
        "id": 202252256,
        "sender_full_name": "Angela Li",
        "timestamp": 1593374258
    }
]