[
    {
        "content": "<p>I have a hypothesis <code>h : ∀ x : A, f x = c</code>, where <code>c</code> doesn't depend on <code>x</code>, and I have a goal <code>some_prop (λ x : A, g (f x))</code>. How can I rewrite the goal to <code>some_prop (λ x : A, g c)</code>? Just writing <code>rw h</code> doesn't seem to work</p>",
        "id": 243529193,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624373870
    },
    {
        "content": "<p>You can try <code>simp_rw h</code></p>",
        "id": 243529360,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624373928
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp_rw\">tactic#simp_rw</a> uses the simplifier to do rewrites, so it works better under binders like <code>λ</code> or <code>∀</code></p>",
        "id": 243529447,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624373969
    },
    {
        "content": "<p>Hmm that didn't seem to do anything</p>",
        "id": 243529484,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624373985
    },
    {
        "content": "<p>Maybe <code>g</code> is a dependent function? That's usually a problem for <code>simp</code></p>",
        "id": 243529660,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624374041
    },
    {
        "content": "<p>Alternatively, try something like <code>suffices : some_prop (λ x, g c), { convert this, ext, rw h },</code></p>",
        "id": 243529779,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624374104
    },
    {
        "content": "<p>You mean a type-dependent function? Yep</p>",
        "id": 243529793,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624374113
    },
    {
        "content": "<p>I also have  the problem that the types of <code>f x</code> and <code>c</code> are equal only because of <code>h</code>. I think it has something to do with <code>subtype</code>s</p>",
        "id": 243530164,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624374245
    },
    {
        "content": "<p><code>heq</code> time ? <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 243530341,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624374309
    },
    {
        "content": "<p>Let me see if I can even write a mwe, as I'm on line 50 of this (probably unnecessarily long) proof</p>",
        "id": 243530446,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624374360
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#extract_goal\">tactic#extract_goal</a> for turning the current goal into a separate <code>example</code>, and the <code>#where</code> for the list of imports and variables etc.</p>",
        "id": 243530711,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624374466
    },
    {
        "content": "<p>Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">repre</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"n\">direct_sum.to_module</span> <span class=\"n\">k</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">direct_sum.to_module</span> <span class=\"n\">k</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243531254,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624374714
    },
    {
        "content": "<p>The equality in <code>#check</code> fails because of type mismatch</p>",
        "id": 243531348,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624374742
    },
    {
        "content": "<p>Very useful tool, Anne! To be more precise, I actually have another hypothesis <code>h2</code> that I'm trying to <code>rw h at h2</code>, but the thing I'm trying to rewrite hides behind a lambda _and_ has a dependent type</p>",
        "id": 243531681,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624374897
    },
    {
        "content": "<p>Hmm, I suspect that you're trying to do \"the wrong thing\": if you get a goal to prove two module structures are equal, you probably want to define a <code>linear_equiv</code> between the two modules instead, and prove that property is preserved by an equiv (or a surjective linear map, etc)</p>",
        "id": 243535737,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624376502
    },
    {
        "content": "<p>I have a hypothesis <code>function.injective (direct_sum.to_module k ι M (λ (i : ι), (p i).subtype))</code> obtained from <code>submodule_is_internal</code>. All I want to do is to turn it into a hypothesis <code>function.injective (direct_sum.to_module k ι M (λ (i : ι), (⊤ : submodule k M).subtype))</code>, so I can apply it to <code>x y : ⊤</code>, which I have constructed earlier...</p>",
        "id": 243537271,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624377146
    },
    {
        "content": "<p>This is the last step of a long proof <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 243537462,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624377242
    },
    {
        "content": "<p>I don't think you can use equality for this. You need to write down the isomorphism of modules and show that the diagram commutes.</p>",
        "id": 243540527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624378568
    },
    {
        "content": "<p>The approach here should probably be to show that the function you're showing the injectivity of is just the other function composed with an equiv</p>",
        "id": 243581328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624397276
    },
    {
        "content": "<p>Since an injective function composed with an equiv is injective</p>",
        "id": 243581427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624397320
    },
    {
        "content": "<p>I'm curious what the high level statement you're working on is - it looks like it might be very similar to some of the things Kevin and I were looking at a month or so ago</p>",
        "id": 243581472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624397362
    },
    {
        "content": "<p>I managed to show it in an ugly way using a <code>convert</code>, which produced 29 goals, which were easily solved in two <code>any_goals</code>. I'm sure this could be done in a much better way</p>",
        "id": 243600288,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624414285
    },
    {
        "content": "<p>I posted about this before as well, in my previous attempt to implement the basics of representation. I defined the direct sum of a collection of representations (I found <code>dfinsupp</code> pretty hard to deal with). The statement I'm trying to prove is that the existence of a nontrivial decomposition of a representation in terms of its subrepresentations (via something like <code>submodule_is_internal</code>) implies not irreducible</p>",
        "id": 243602016,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624416394
    },
    {
        "content": "<p>A cursory note that turns out to be really tricky to prove in Lean</p>",
        "id": 243602032,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624416442
    },
    {
        "content": "<p>Is <code>simp_rw</code> more powerful than <code>simp</code>?</p>",
        "id": 243602307,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624416883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/substitution.20within.20a.20lambda/near/243581427\">said</a>:</p>\n<blockquote>\n<p>Since an injective function composed with an equiv is injective</p>\n</blockquote>\n<p>I could try this approach next time. It was just slightly frustrating that I couldn't just make the substitution even when the two types are literally equal according to a hypothesis.</p>",
        "id": 243602309,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624416889
    },
    {
        "content": "<p><code>simp_rw</code> didn't manage to work in this case</p>",
        "id": 243602316,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624416910
    },
    {
        "content": "<p>Hypotheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n<span class=\"n\">hinj</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.to_module</span> <span class=\"n\">k</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">direct_sum.to_module</span> <span class=\"n\">k</span> <span class=\"n\">ι</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 243602415,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624417058
    },
    {
        "content": "<p>Can you make that a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, perhaps with <code>extract_goal</code>?</p>",
        "id": 243615004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624432931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/substitution.20within.20a.20lambda/near/243602307\">said</a>:</p>\n<blockquote>\n<p>Is <code>simp_rw</code> more powerful than <code>simp</code>?</p>\n</blockquote>\n<p>Not really: <code>simp_rw [a, b, c]</code> should do exactly the same as <code>simp only [a], simp only [b], simp only [c]</code>. (This is not the same as <code>simp only [a, b, c]</code>!)</p>",
        "id": 243630855,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624443098
    }
]