[
    {
        "content": "<p>Is there a prettier way to do things like that ?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"err\">?</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"bp\">...</span><span class=\"o\">}),</span>\n</code></pre></div>",
        "id": 204316521,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595104291
    },
    {
        "content": "<p>I'm not sure I understand what's going on there, but maybe you want <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#convert\">tactic#convert</a></p>",
        "id": 204316645,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595104511
    },
    {
        "content": "<p>I'd say that and <code>have : ? = ? := by blah, rw this</code> are your main choices, depending on the length of blah.</p>",
        "id": 204316786,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595104752
    },
    {
        "content": "<p>Sometimes you can avoid these constructions by restructuring your proof into a <code>calc</code> proof.</p>",
        "id": 204316840,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595104820
    },
    {
        "content": "<p>Yes but the problem of calc proofs is they need to close the goal <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 204316856,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595104875
    },
    {
        "content": "<p>so start by creating the goal which is the last statement of the calc proof?</p>",
        "id": 204316921,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595104995
    },
    {
        "content": "<p>Indeed, but the whole objective of using the <code>rw (show ..., by ...)</code> syntax is we don't need to create a 1-use subgoal</p>",
        "id": 204316988,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595105107
    },
    {
        "content": "<p>does the following work as a way to introduce a lemma <code>A = C</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 204317048,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595105219
    },
    {
        "content": "<p>You can also <code>refine calc foo = bar : _</code> etc</p>",
        "id": 204317063,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595105265
    },
    {
        "content": "<p>Well you're still introducing it when you prove it it just disappears out of scope after, you can clear a <code>have</code> if you're finding you have two many of these one time things floating around.</p>",
        "id": 204317112,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595105305
    },
    {
        "content": "<p>Oh yes I forget about this all the time x)</p>",
        "id": 204317123,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595105365
    },
    {
        "content": "<p>Or prove it as a lemma if its not too specific ! So you can rewrite it without introducing it.</p>",
        "id": 204317137,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595105392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20show.20by/near/204317048\">said</a>:</p>\n<blockquote>\n<p>does the following work as a way to introduce a lemma <code>A = C</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>It does, that's clever</p>",
        "id": 204317189,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595105429
    },
    {
        "content": "<p>The use I had in mind was for things like that : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_id</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">sub</span> <span class=\"n\">tendsto_const_nhds</span> <span class=\"n\">tendsto_id</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204317290,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595105589
    },
    {
        "content": "<p>in this case, both lemmas have names</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_id</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">sub_self</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_const_nhds</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_id</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204317363,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595105729
    },
    {
        "content": "<p>Indeed, but that's a simple example</p>",
        "id": 204317421,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595105816
    },
    {
        "content": "<p>one can also do this which feels silly but maybe demonstrates <code>convert</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_id</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">sub</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">tendsto_const_nhds</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_id</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204317506,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595105951
    },
    {
        "content": "<p>Oh interesting. I need to learn how to use convert</p>",
        "id": 204317600,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595106071
    },
    {
        "content": "<p><code>convert</code> is great. It is like <code>rw</code> on steroids. Once you have a hypothesis <code>h</code> which is basically equal to your goal modulo a few differences, <code>convert h</code> will just explicitly give you the differences as new goals, saving you the trouble of having to work with them as subterms of a larger term</p>",
        "id": 204342386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595153474
    }
]