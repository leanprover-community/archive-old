[
    {
        "content": "<p>A while ago there was a discussion about how to prove <code>sum(range(n+1)) = n*(n+1)/2</code>, and the solution was along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nat_sum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sum</span><span class=\"o\">(</span><span class=\"n\">range</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">range_concat</span><span class=\"o\">,</span> <span class=\"n\">sum_append</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>After reading the tactics chapter in \"Programming in Lean\" I wanted to write a tactic for the <code>nat_sum</code> lemma above as an exercise.<br>\nUnfortunately this turned out to be way trickier than I expected ...</p>\n<p>I started with the <code>induction</code> part and wrote the following (incomplete) tactic:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">sum_range</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">ctx</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n   <span class=\"n\">induction</span> <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">n_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">ih_</span><span class=\"o\">],</span> <span class=\"c1\">-- Just using ctx.head as the first parameter is probably not ideal ...</span>\n     <span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n<span class=\"c1\">-- but essentially everything works till here :)</span>\n<span class=\"c1\">-- next I would like to do the rewrite stuff.</span>\n<span class=\"c1\">-- I expected/hoped that (something like) the following works, but it doesn&#39;t</span>\n   <span class=\"n\">t</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range_concat</span> <span class=\"n\">n_</span><span class=\"o\">),</span>\n   <span class=\"n\">rewrite</span> <span class=\"n\">t</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">skip</span>\n</pre></div>\n\n\n<p>To be precise, when executing the tactic lean tells me that <code>rewrite tactic failed, lemma is not an equality nor a iff</code> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> .</p>\n<p>Any help would be greatly appreciated</p>",
        "id": 183251699,
        "sender_full_name": "Elvorfirilmathredia",
        "timestamp": 1576151768
    },
    {
        "content": "<p>Hi. First let me give you a couple of practical Zulip advices. What really really help people helping other people is to get code they can copy-paste in a scratch file and run. Both your code snippets fail that criterion. You need to include the imports and name spaces opening. More tricky: it helps a lot if you describe the expected behavior of your tactic. I'll assume for now that you simply want the tactic to write exactly the same proof as what you did by hand, although this will give a very very specialized tactic (but that's fine as an exercise).</p>",
        "id": 183260447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576158718
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat_sum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sum</span><span class=\"o\">(</span><span class=\"n\">range</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">range_concat</span><span class=\"o\">,</span> <span class=\"n\">sum_append</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">sum_range</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n   <span class=\"n\">ih_name</span> <span class=\"err\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"bp\">`</span><span class=\"n\">ih</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ih_name</span><span class=\"o\">],</span>\n     <span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n   <span class=\"n\">ih_expr</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">ih_name</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range_concat</span><span class=\"o\">),</span>\n   <span class=\"n\">e&#39;</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum_append</span><span class=\"o\">),</span>\n   <span class=\"n\">e&#39;&#39;</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">mul_add</span><span class=\"o\">),</span>\n   <span class=\"n\">e&#39;&#39;&#39;</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_one</span><span class=\"o\">),</span>\n   <span class=\"n\">rewrite_target</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">rewrite_target</span> <span class=\"n\">e&#39;</span><span class=\"o\">,</span>\n   <span class=\"n\">rewrite_target</span> <span class=\"n\">e&#39;&#39;</span><span class=\"o\">,</span>\n   <span class=\"n\">rewrite_target</span> <span class=\"n\">ih_expr</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">sum_nil</span><span class=\"o\">]],</span>\n   <span class=\"n\">rewrite_target</span> <span class=\"n\">e&#39;&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">symm</span><span class=\"o\">:=</span><span class=\"n\">tt</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sum</span><span class=\"o\">(</span><span class=\"n\">range</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sum_range</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183260695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576158861
    },
    {
        "content": "<p>The above code works. Did you read <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md</a> by the way?</p>",
        "id": 183260759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576158907
    },
    {
        "content": "<blockquote>\n<p>What really really help people helping other people is to get code they can copy-paste in a scratch file and run. Both your code snippets fail that criterion. You need to include the imports and name spaces opening.</p>\n</blockquote>\n<p>Good point, I'll pay more attention to this in the future.</p>\n<blockquote>\n<p>The above code works. Did you read <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md</a> by the way?</p>\n</blockquote>\n<p>I read most of it, but didn't see anything that seemed helpful since <code>rewrite</code> is not used anywhere.</p>\n<p>Anyway, thanks a lot for your help! <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span> <br>\nShockingly my main mistake was apparently the usage of <code>rewrite</code>, since <code>rewrite_target e</code> is not exactly the same as <code>rewrite e t</code>. How could I miss that? <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 183283075,
        "sender_full_name": "Elvorfirilmathredia",
        "timestamp": 1576172859
    }
]