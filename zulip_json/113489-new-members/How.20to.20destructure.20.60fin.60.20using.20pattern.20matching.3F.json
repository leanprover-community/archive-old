[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- def nat.foldl.fin {α : Type} (n&#39; : nat) : ∀ (n : fin n&#39;) (s : α) (f : fin n&#39; → α → α), α</span>\n<span class=\"c1\">--     | 0 s f := s</span>\n<span class=\"c1\">--     | (n+1) s f := f n (nat.foldl.fin n s f)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">α</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">array</span><span class=\"bp\">.</span><span class=\"n\">map_foldl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n    <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span> <span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"k\">in</span>\n        <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">i</span> <span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I am trying to make a little helper for <code>array</code> and it requires <code>fin</code>s rather than <code>nat</code> in order to ensure bounds checking. But <code>fin</code> uses anonymous constructors and I am not sure how to destructure it in patterns nor how to construct it normally. How should I do this?</p>",
        "id": 178470157,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571403117
    },
    {
        "content": "<p>As an aside, does Lean have any special syntax for monadic computations like Haskell or Idris for example?</p>",
        "id": 178470275,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571403183
    },
    {
        "content": "<p>There is <code>do</code> notation, described here: <a href=\"https://leanprover.github.io/programming_in_lean/#07_Monads.html\" target=\"_blank\" title=\"https://leanprover.github.io/programming_in_lean/#07_Monads.html\">https://leanprover.github.io/programming_in_lean/#07_Monads.html</a></p>",
        "id": 178470401,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1571403269
    },
    {
        "content": "<p>Pointy brackets <code>⟨_, _, _, ...⟩</code> work for con-/destructing any structure:</p>\n<div class=\"codehilite\"><pre><span></span>def nat.foldl.fin {α : Type} (n&#39; : nat) : ∀ (n : fin n&#39;) (s : α) (f : fin n&#39; → α → α), α\n| ⟨0, _⟩ s f := s\n| ⟨n+1, lt⟩ s f := let n&#39; : fin n&#39; := ⟨n, sorry⟩ in f n&#39; (nat.foldl.fin n&#39; s f)\n</pre></div>",
        "id": 178471000,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1571403677
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span><span class=\"bp\">.</span><span class=\"n\">fin</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">⟩</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">lt_aux_1</span> <span class=\"n\">lt</span> <span class=\"bp\">⟩</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"n\">n&#39;</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span><span class=\"bp\">.</span><span class=\"n\">fin</span> <span class=\"n\">n&#39;</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I've filled in that <code>sorry</code>. Interesting that when I write it like...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span><span class=\"bp\">.</span><span class=\"n\">fin</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">⟩</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">lt_aux_1</span> <span class=\"n\">lt</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n&#39;</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span><span class=\"bp\">.</span><span class=\"n\">fin</span> <span class=\"n\">n&#39;</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>It runs into issues with termination checking. Why is that?</p>",
        "id": 178472642,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571404782
    },
    {
        "content": "<p>I guess the trouble is that <code>fin</code> is not an inductive type... but maybe there are ways to deal with that.</p>",
        "id": 178472968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571404958
    },
    {
        "content": "<p>No, the problem is that using <code>have</code> hides the definitional content of <code>n'</code>. If you do that, <code>n'</code> is just an arbitrary term of type <code>fin n'</code>, and Lean can't confirm that it's structurally smaller than <code>&lt;n+1, lt&gt;</code>.</p>",
        "id": 178473154,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571405075
    },
    {
        "content": "<p>(Careful with duplicating the variable name <code>n'</code>, by the way!)</p>",
        "id": 178473197,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571405107
    },
    {
        "content": "<p>In general, you should use <code>have</code> for propositions and <code>let</code> for data.</p>",
        "id": 178473342,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571405188
    },
    {
        "content": "<p>I see.</p>\n<blockquote>\n<p>(Careful with duplicating the variable name n', by the way!)</p>\n</blockquote>\n<p>That reminds me, is Lean lazy like Haskell or strict like Idris? I remember running into unexpected issues when doing variable shadowing in Haskell.</p>",
        "id": 178474186,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571405769
    },
    {
        "content": "<p>It's strict, and <code>let</code> is nonrecursive.</p>",
        "id": 178474969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571406365
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span><span class=\"bp\">.</span><span class=\"n\">fin_template</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n&#39;</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">⟩</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">lt_aux_1</span> <span class=\"n\">lt</span> <span class=\"bp\">⟩</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"n\">n&#39;</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span><span class=\"bp\">.</span><span class=\"n\">fin_template</span> <span class=\"n\">n&#39;</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span><span class=\"bp\">.</span><span class=\"n\">fin</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">n</span> <span class=\"bp\">⟩</span> <span class=\"k\">in</span>\n    <span class=\"n\">f</span> <span class=\"n\">n&#39;</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span><span class=\"bp\">.</span><span class=\"n\">fin_template</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n&#39;</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">array</span><span class=\"bp\">.</span><span class=\"n\">map_foldl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">χ</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">χ</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">foldl</span><span class=\"bp\">.</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">χ</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">array</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span> <span class=\"n\">a&#39;</span> <span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n            <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"k\">in</span>\n            <span class=\"o\">(</span><span class=\"n\">a&#39;</span><span class=\"bp\">.</span><span class=\"n\">push_back</span> <span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n            <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Here is how I did the functions. I realized after doing the first version that the types weren't general enough for my use case so I redesigned them. This is coming along nicely. I've studied dependently typed programming and theorem proving seriously for the last 6 months, but this is the first time I am doing a project out of my own volition without some book or tutorial to guide me. I am still acclimating to Lean, but it is definitely nice to not be completely lost at what is going on. There were many such situations in the first few months while I was working in Coq and to a lesser extent, Agda.</p>",
        "id": 178480349,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571409726
    }
]