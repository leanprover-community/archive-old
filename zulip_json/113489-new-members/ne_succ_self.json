[
    {
        "content": "<p>I tried different ways to solve the problem. I used the induction, the cases-tactic or the way to produce via intro h as a hypothesis 0=succ 0 . Going the way via cases or induction I supposed that at the end it should be possible to proof at least the first goal 0 not equal succ 0  with the lemma zero_ne_succ when a had been substituted by 0. But unfortunately this doesn't work and I don't understand why.</p>",
        "id": 207127292,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597660007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329867\">Claus-Peter Becke</span> <a href=\"#narrow/stream/113489-new-members/topic/ne_succ_self/near/207127292\">said</a>:</p>\n<blockquote>\n<p>this doesn't work and I don't understand why.</p>\n</blockquote>\n<p>what does the error message say?</p>",
        "id": 207127507,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597660202
    },
    {
        "content": "<p>zero_ne_succ should solve this fine</p>",
        "id": 207127741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597660379
    },
    {
        "content": "<p>I'm so sorry. I should have been a little more patient. That goal could be solved with apply zero_ne_succ. But the next one concerning the successor made some problems. I will evaluate it again and post the result.</p>",
        "id": 207127885,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597660491
    },
    {
        "content": "<p>don't just say \"this doesn't work\"; post the error</p>",
        "id": 207127916,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597660520
    },
    {
        "content": "<p>To solve the next goal succ n not equal succ(succ n) I used the tactic rw</p>\n<p>repeat {rw succ_eq_add_one},<br>\nrepeat {rw one_eq_succ_zero},<br>\nrepeat {rw succ_eq_add_one},</p>\n<p>to get the following result: n + (0 + 1) ≠ n + (0 + 1) + (0 + 1). This inequation is obviously true. So, as I did successfully before, I tried to apply the cc- or the simp-tactic, but that didn't succeed with the following error_messages: </p>\n<p>cc tactic failed<br>\nstate:<br>\ncase mynat.succ<br>\nn : mynat<br>\n⊢ n + (0 + 1) ≠ n + (0 + 1) + (0 + 1)</p>\n<p>tactic failed, there are unsolved goals<br>\nstate:<br>\ncase mynat.succ<br>\nn : mynat<br>\n⊢ ¬n + 1 = n + (1 + 1)</p>\n<p>Unfortuantely I don't find a way to continue at that point if this is a way that could be gone at all.</p>",
        "id": 207129260,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597661659
    },
    {
        "content": "<p>Tip: use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> for formatting code</p>",
        "id": 207129427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597661783
    },
    {
        "content": "<p>I'm not sure it's \"obviously true\" -- isn't it precisely what you're supposed to be proving?</p>",
        "id": 207129706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597662020
    },
    {
        "content": "<p>you surely need to prove this by induction</p>",
        "id": 207129731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597662052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> This is the induction step, right?</p>",
        "id": 207130141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597662378
    },
    {
        "content": "<p>So rather, <span class=\"user-mention\" data-user-id=\"329867\">@Claus-Peter Becke</span> you need to use the induction hypothesis somewhere</p>",
        "id": 207130169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597662406
    },
    {
        "content": "<p>Remember that <code>\\not P</code> is shorthand for <code>P → false</code></p>",
        "id": 207130177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597662417
    },
    {
        "content": "<p>These are very helpful hints. I'm just trying to prove the goal using the induction-tactic.</p>",
        "id": 207130346,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597662515
    },
    {
        "content": "<p>if you're trying to prove a != b then you can <code>intro h</code></p>",
        "id": 207130395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597662560
    },
    {
        "content": "<p>(because of what Johan said)</p>",
        "id": 207130410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597662568
    },
    {
        "content": "<p>ooh -- you'll need <code>succ_inj</code> right?</p>",
        "id": 207130434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597662588
    },
    {
        "content": "<p>After having used the following steps </p>\n<p>'induction n with m,<br>\nintro h,<br>\nrepeat {rw ← add_assoc at h},<br>\nrepeat {rw zero_add at h},<br>\nrw add_zero at h,'</p>\n<p>I end up with the following goal:<br>\n2 goals<br>\nh : 1 = 1 + 1<br>\n⊢ false'</p>\n<p>And at that point I don't know of how to apply Johan's hint. As far as I see h corresponds to P (in Johan's hint). If this is true I don't find a way to apply it in this context. The apply- or exact-tactics don't work as far as I see. If I would have succeeded in showing that what h maintains is false I should be able to use exact h to finish the proof of this goal.</p>",
        "id": 207131909,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597663691
    },
    {
        "content": "<p>Well, your <code>h</code> is very close to <code>succ_ne_zero</code></p>",
        "id": 207132378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597664135
    },
    {
        "content": "<p>I don't find an appropriate tactic to apply the succ_ne_zero- lemma. My h  has the following shape at present: <code>h : succ 0 = succ (succ 0)</code></p>",
        "id": 207134867,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597665970
    },
    {
        "content": "<p>you can probably just do cases on h to close the goal</p>",
        "id": 207135503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597666428
    },
    {
        "content": "<p>That works. I don't know why up tp now, but I will have again a closer look at the explanations of the tactics in the NNG.</p>",
        "id": 207135780,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597666645
    },
    {
        "content": "<p>if you want to do it more carefully you can apply succ_inj and then zero_ne_succ</p>",
        "id": 207136273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597667010
    },
    {
        "content": "<p>Using <code>apply succ_inj</code>instead of <code>cases h</code>doesn't work unfortunately It generates the following error messages:<br>\n`Invalid apply tactic, failed to unify<br>\nfalse<br>\nwith<br>\n  ?m_1 = ?m_2<br>\nstate:<br>\n2 goals<br>\nh : succ 0 = succ (succ 0)<br>\n⊢ false</p>\n<p>case mynat.succ<br>\nm : mynat,<br>\nn_ih : m + (0 + 1) ≠ m + (0 + 1) + (0 + 1)<br>\n⊢ succ m + (0 + 1) ≠ succ m + (0 + 1) + (0 + 1)`</p>",
        "id": 207137148,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597667582
    },
    {
        "content": "<p>you need to apply it to h, not to the goal</p>",
        "id": 207137173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597667604
    },
    {
        "content": "<p>e.g. <code>have h2 := succ_inj h</code></p>",
        "id": 207137183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597667617
    },
    {
        "content": "<p><code>apply</code> only works on goals</p>",
        "id": 207137222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597667642
    },
    {
        "content": "<p>Your inductive hypothesis is horrible. What are all these zeros? I suspect that you messed around with your goal and introduced them before you applied the induction tactic, and now they're everywhere</p>",
        "id": 207137320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597667705
    },
    {
        "content": "<p>All that <code>repeat</code> stuff you quoted above has just made the goal mathematically equivalent but harder to work with</p>",
        "id": 207137434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597667772
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 207138298,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597668368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Which tactic can I use to apply the zero_ne_succ-lemma on h2?</p>",
        "id": 207138794,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597668697
    },
    {
        "content": "<p>If you're trying to prove false, then you can just directly do <code>exact zero_ne_succ h2</code></p>",
        "id": 207139166,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597668861
    },
    {
        "content": "<p>That doesn't work unfortunately. It produces the following error messages after having generated h2 with the have-tactic.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">zero_ne_succ</span> <span class=\"n\">h2</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">Natural</span> <span class=\"n\">number</span> <span class=\"n\">game</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"n\">library</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"n\">zero_ne_succ</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"n\">false</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 207140937,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597669772
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>but is expected to have type\n  mynat : Type\n</code></pre></div>\n\n\n<p>That means it expects a number instead</p>",
        "id": 207143372,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597670860
    },
    {
        "content": "<p>Try <code>exact zero_ne_succ 0 h2</code></p>",
        "id": 207143458,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597670888
    },
    {
        "content": "<p>@Chris Wong: That worked. Thank you.</p>",
        "id": 207143829,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597671078
    },
    {
        "content": "<p>Finally I found a solution:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">zero_ne_succ</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">succ_inj</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">zero_ne_succ</span> <span class=\"mi\">0</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">succ_succ_inj</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h3</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h3</span> <span class=\"n\">at</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h3</span> <span class=\"n\">at</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>Some comments could helpful, I suppose.</p>",
        "id": 207149022,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597673804
    },
    {
        "content": "<p>why do you do cases n and then induction n? It would be quicker to just do induction n from the outset</p>",
        "id": 207149142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597673873
    },
    {
        "content": "<p>Ok, I will keep it in my mind. Now in the beginning of working with lean prover I followed every hint I could get. Next I will try to be more concise.</p>",
        "id": 207149454,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597674050
    },
    {
        "content": "<p>this is a straight induction, you don't need to do the initial case split.</p>",
        "id": 207149637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597674142
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">zero_ne_succ</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">succ_inj</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207149853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597674287
    },
    {
        "content": "<p>You can always take a peek at the \"official solutions\" too e.g. <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world8/level13.lean\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world8/level13.lean</a></p>",
        "id": 207150047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597674374
    },
    {
        "content": "<p>Next time ( in the Advanced Multiplication World) I will try to improve it. And you remember, you made me aware of the need to use the induction to prove what I expected to be self-evident. Because I'm not very experienced in dealing with mathematical subjects I will have to learn a lot.</p>",
        "id": 207150245,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597674479
    },
    {
        "content": "<p>natural numbers are a really cool mathematical object to learn about :-) They are in some sense the simplest infinite object.</p>",
        "id": 207150626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597674630
    },
    {
        "content": "<p>With respect to the link you posted. That's great. I didn't know that there is a collection of solutions.<br>\nAnd with respect to your comment on the natural numbers. Yes, I agree with you completely. That's a fascinating story. I regret that I start as late as I do becoming familiar with these subjects.</p>",
        "id": 207151130,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597674896
    },
    {
        "content": "<p>The way the game works is that that it needs to know that all the levels are solvable, so the solutions have to be in there somewhere :-) The link is to the source code.</p>",
        "id": 207151197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597674935
    },
    {
        "content": "<p>I would like to say thank you  and bye-bye for today. Tomorrow in the morning I will start the next session. Irt was a great pleasure to be here and to benefit from your great support.</p>",
        "id": 207151707,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1597675205
    }
]