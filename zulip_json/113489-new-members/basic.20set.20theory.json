[
    {
        "content": "<p>Hi, am student from Brazil trying to learn a bit more about lean and am having same difficulties in using some theorems from Mathlib, in particular this one: <br>\nhow would I use set.union_diff_left to solve something like this in tactic mode</p>\n<p>example : (t ∪ s) \\ s ⊆ t \\ s</p>\n<p>thx for the help</p>",
        "id": 214895108,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1603917866
    },
    {
        "content": "<p>Hey Pedro, you might find <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> useful when you're asking questions <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. I think it's more natural to prove your example with <code>set.union_diff_right</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq.subset</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.union_diff_right</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>But if you wanted to use <code>set.union_diff_left</code>, you could do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq.subset</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.union_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.union_diff_left</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Also, if you use the <code>hint</code> tactic you can see that you can prove the statement with <code>intro, finish</code> too</p>",
        "id": 214897100,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1603918899
    },
    {
        "content": "<p>But using finish wouldn't be considered cheating in such a simple proof? hahaha <br>\nby the way thx for the help, Alex</p>",
        "id": 214921095,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1603939771
    },
    {
        "content": "<p>The whole point of tactics like finish is to save humans from having to write mathematically trivial proofs</p>",
        "id": 214929218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603950964
    },
    {
        "content": "<p>Although writing mathematically trivial proofs is probably good practice for getting to grips with how lean works</p>",
        "id": 215820970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604654313
    },
    {
        "content": "<p>lean has helped me in writting better proofs. Someone could  give me an idea how to continue this proof or how can I use h? Thank you for your answers</p>",
        "id": 245848710,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1626192887
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>open set\n\nvariable {α : Type*}\nvariables (A B C : set α)\n\ntheorem t1 (h: A \\ B ⊆ C): A \\ C ⊆ B :=\nbegin\n  assume x,\n  intro h1,\n  cases h1 with ha hc,\n\nend ```\n</code></pre></div>",
        "id": 245848785,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1626192931
    },
    {
        "content": "<p>I'm guessing you don't want lemmas from Mathlib for this. So if you want to prove this \"yourself\", then perhaps unfolding the definition of <code>\\</code> might help:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"bp\">\\</span><span class=\"o\">),</span> <span class=\"n\">set.diff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You can unfold any notation using <code>simp [(&lt;notation&gt;)]</code>. So if you also want to unfold the <code>⊆</code> you could write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"bp\">⊆</span><span class=\"o\">),</span> <span class=\"n\">set.subset</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 245849293,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626193161
    },
    {
        "content": "<p>yes exactly, not using mathlib lemmas, prove by myself</p>",
        "id": 245849600,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1626193301
    },
    {
        "content": "<p>It's not cheating to use <code>set.mem_diff</code> in that proof - if you're using mathlib's definitions, then it's totally fair game to use mathlibs lemmas that tell you what they unfold to.</p>",
        "id": 245849818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626193395
    },
    {
        "content": "<p>If you use <code>dsimp [set.mem_diff]</code> that ensures you're not using a lemma which is \"cheating\" (ie, one that actually contains a proof)</p>",
        "id": 245850003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626193470
    },
    {
        "content": "<p>thank you, unfold is a practical tool in this case, first time I use it. I see  some facts that can use to proof from the unfold but sincerely I do not know how start. how can I link the unfold facts with the cases from and elimination of the first hypothesis?</p>",
        "id": 245855379,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1626195863
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">A</span> <span class=\"bp\">\\</span> <span class=\"n\">C</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"bp\">\\</span><span class=\"o\">),</span> <span class=\"n\">set.diff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"bp\">⊆</span><span class=\"o\">),</span> <span class=\"n\">set.subset</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245855384,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1626195867
    },
    {
        "content": "<p>You might want to allow yourself <code>dsimp only [mem_sep_eq] at h</code> now.  <code>mem_sep_eq</code> is a lemma that is the definitionally true -- it's a tautology.</p>\n<p>You can also have the same effect by using <code>change</code>, but that requires you to know the definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 245864680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626199758
    },
    {
        "content": "<p>thank you Kyle for supply me tactics. Now really I have the idea to  complete a proof of transitive law for inclusion for sets. By change tactic I m using only x variable. My idea is more less this. like I have x is in set R, i 'have' x in set S and like i 'have' x in set S, I conclude that x is in T set and finish the proof. I tried to use apply, have-from, intro, but all these put error in the code.</p>",
        "id": 245997206,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1626285862
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"bp\">⊆</span><span class=\"o\">),</span> <span class=\"n\">set.subset</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"bp\">⊆</span><span class=\"o\">),</span> <span class=\"n\">set.subset</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n\n\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245997275,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1626285910
    },
    {
        "content": "<p>Hint: use the <code>apply</code> tactic.  <code>apply h2</code> is a good next step.</p>",
        "id": 245998472,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626286476
    },
    {
        "content": "<p>That's a proof in the \"reverse direction.\"  If you want to go in the \"forward direction,\" a good next step is <code>specialize h1 x h</code>.</p>",
        "id": 245998564,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626286524
    }
]