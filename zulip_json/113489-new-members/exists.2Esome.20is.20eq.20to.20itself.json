[
    {
        "content": "<p>I'm stuck on this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f.lookup</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f.lookup</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">h.some</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">],</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Since <code>m</code> is obtained from <code>∃ m, f.lookup n = some m</code>, there must be some way to prove that <code>m =  (∃ m, f.lookup n = some m).some</code>. But I can't figure out how.</p>",
        "id": 246075309,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626344402
    },
    {
        "content": "<p><code>apply classical.some_spec</code></p>",
        "id": 246081984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626349182
    },
    {
        "content": "<p><code>generalize_proofs h2,</code> makes it a bit easier to understand the goal state</p>",
        "id": 246082053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626349217
    }
]