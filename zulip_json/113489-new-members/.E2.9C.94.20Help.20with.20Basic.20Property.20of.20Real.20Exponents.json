[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks for sharing this - I'm basically hacking my way through Lean by using <code>apply</code>, <code>exact</code>, and <code>rw</code> almost exclusively.<br>\nI'm still coming to grips with all of the other basic proof keywords and syntax. Your example will help me improve.</p>",
        "id": 306266586,
        "sender_full_name": "Dave Jones",
        "timestamp": 1666798062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"556334\">Dave Jones</span> has marked this topic as resolved.</p>",
        "id": 306267772,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666798335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nI would like to try using your code (above), but I'm running into errors.</p>\n<p>Should this code work with Lean 3?<br>\nWould you mind sharing your import statements?</p>",
        "id": 307630055,
        "sender_full_name": "Dave Jones",
        "timestamp": 1667428777
    },
    {
        "content": "<p>Yes, that should work with lean3</p>",
        "id": 307631873,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667429840
    },
    {
        "content": "<p>I don't remember the imports I'm afraid, but it should be easy to work them out by searching for the lemmas it can't find (eg, see what the file is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.rpow_left_inj_on\">docs#real.rpow_left_inj_on</a> is in)</p>",
        "id": 307631903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667429866
    },
    {
        "content": "<p>Perhaps you're missing <code>open_locale nnreal</code>?</p>",
        "id": 307631918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667429882
    },
    {
        "content": "<p><code>zero_le_one</code> changed too. This is working code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">real.rpow_eq_one_iff_of_nonneg</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">y</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">real.one_rpow</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">real.rpow_left_inj_on</span> <span class=\"n\">hy</span> <span class=\"n\">hx</span> <span class=\"n\">zero_le_one</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">real.one_rpow</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">real.rpow_zero</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nnreal.rpow_eq_one_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">real.rpow_eq_one_iff_of_nonneg</span> <span class=\"n\">x.prop</span>\n</code></pre></div>",
        "id": 307632980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667430508
    },
    {
        "content": "<p>Prof. Buzzard - yes, it was the <code>zero_le_one</code> that was hanging me up - your new sample appears to work for me, so I believe I'm good now.</p>\n<p>Sorry for the lack of details on the error - I was still working on getting the error copy and pasted out, but everyone is so quick with resolutions here, you beat me to it.  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>Also <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> - thank you for all of the wonderfully inspiring talks on YouTube - you're basically the reason why I'm here, and why I had the courage to dive in and persevere with Lean.</p>",
        "id": 307635600,
        "sender_full_name": "Dave Jones",
        "timestamp": 1667432214
    }
]