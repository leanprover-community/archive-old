[
    {
        "content": "<p>Hey all, I'm trying to formalize some theorems about <a href=\"https://arxiv.org/abs/1812.09752\">hat games</a> in Lean, and I'm not sure how best to define it. Essentially, in a hat game, you can see your neighbouring vertices and \"guess\" the colour of your own hat based on that. This is modeled as a function \"neighbour vertices → colour,\" but I'm wondering whether in Lean it's better to instead have a function \"all vertices → colour\" but make sure it's invariant under changes of non-neighbouring vertices. My code, for reference: (and a couple noobie questions...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.function</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.function.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- an assignment of colours to vertices</span>\n<span class=\"kd\">def</span> <span class=\"n\">hat_arr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- ATTEMPT 1: NEIGHBOUR VERTICES → COLOUR</span>\n\n<span class=\"c1\">-- I can't figure out this type; if i ctrl+c what `#check` says, I get \"type expected\"</span>\n<span class=\"c1\">-- which makes some sense, as membership of a set is not expressed through types</span>\n<span class=\"kd\">def</span> <span class=\"n\">visible_hats</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hat_arr</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">magical_type</span>\n  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">hat_guesser</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">magical_type</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hat_guessing_cond</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">hat_arr</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">visible_hats</span> <span class=\"n\">a</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">arr</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"c1\">-- definition looks nicer IF magical_type isn't too annoying to use</span>\n\n<span class=\"c1\">-- ATTEMPT 2: ALL VERTICES → COLOUR, check stuff is nice</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">hat_guesser</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">hat_arr</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">well_founded</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">G.adj</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">hat_arr</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">function.update</span> <span class=\"n\">arr</span> <span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"c1\">-- for some reason, this fails to typecheck.</span>\n<span class=\"c1\">-- I want to change arr at b to k, but clearly `function.update` isn't right for this job</span>\n<span class=\"o\">(</span><span class=\"n\">hat_guessing_cond</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">hat_arr</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=</span> <span class=\"n\">arr</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Would either of these definitions be annoying to use? Also, I'm sticking with finite stuff for now; would it make my life easier to use <code>fintype α</code> instead of just any <code>α</code>? Thanks very much!</p>",
        "id": 231570314,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616550132
    },
    {
        "content": "<p>This hidden information stuff might be related to this talk?<br>\nvideo: <a href=\"https://www.youtube.com/watch?v=kXCB5wzQTKc\">https://www.youtube.com/watch?v=kXCB5wzQTKc</a><br>\nslides: <a href=\"https://leanprover-community.github.io/lt2021/slides/paula-LeanTogether2021.pdf\">https://leanprover-community.github.io/lt2021/slides/paula-LeanTogether2021.pdf</a><br>\nrepo: <a href=\"https://github.com/paulaneeley/modal\">https://github.com/paulaneeley/modal</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"kXCB5wzQTKc\" href=\"https://www.youtube.com/watch?v=kXCB5wzQTKc\"><img src=\"https://i.ytimg.com/vi/kXCB5wzQTKc/default.jpg\"></a></div>",
        "id": 231579238,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1616558004
    },
    {
        "content": "<p>thanks - that's interesting! another possible way to formalize it... been trying to use \"neighbour vertices → colour\" now and it's feeling okay but not amazing</p>",
        "id": 231606347,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616579259
    },
    {
        "content": "<p>i'd appreciate one more bit of advice; here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.function.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">something</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">well_founded</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">function.update</span> <span class=\"n\">arr</span> <span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>For some reason, <code>function.update</code> doesn't typecheck; what's wrong here?</p>",
        "id": 231684788,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616610352
    },
    {
        "content": "<p>The error message says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>You need to add <code>[decidable_eq α]</code> to your assumptions</p>",
        "id": 231685730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616610703
    },
    {
        "content": "<p>Or <code>open_locale classical</code></p>",
        "id": 231685998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616610807
    },
    {
        "content": "<p>ahh I see it's got to be able to decide whether the input is equal to <code>b</code>. thanks!</p>",
        "id": 231686363,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616610961
    }
]