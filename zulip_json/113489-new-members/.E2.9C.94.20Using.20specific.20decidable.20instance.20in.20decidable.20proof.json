[
    {
        "content": "<p>When writing an instance of the <code>decidable</code> typeclass for a predicate, its decidability can reduce to the decidability of some other predicate. However, if I name some decidable instance, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">pred_decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and then try and use this typeclass instance in another proof, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">pred_decidable</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Lean yields an error of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">pred_decidable'</span>\n</code></pre></div>\n<p>How can I name a typeclass instance in such a way as to allow me to explicitly re-use it in later proofs?</p>",
        "id": 265670594,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640083145
    },
    {
        "content": "<p>It should work (up to the fact that you forgot to give it <code>a</code> given that you made it explicit), so we need more context to tell you what went wrong.</p>",
        "id": 265670904,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640083389
    },
    {
        "content": "<p>Thank you for your help! So I have a simple predicate, <code>is_empcblock</code>, that pattern matches on a specific constructor of an inductive type family:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_empcblock</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"n\">vars'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">IsInFor</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">IsInFunc</span><span class=\"o\">},</span>\n    <span class=\"n\">YulTerm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">vars</span> <span class=\"n\">vars'</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">EmpCBlock</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">empcblock_decidable</span>\n  <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"n\">vars'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">IsInFor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">IsInFunc</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">blklst</span> <span class=\"o\">:</span> <span class=\"n\">YulTerm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">vars</span> <span class=\"n\">vars'</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_empcblock</span> <span class=\"bp\">Γ</span> <span class=\"n\">blklst</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">blklst</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_empcblock</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">decidable.is_true</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_empcblock</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">decidable.is_false</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>It is associated with an instance of the <code>decidable</code> typeclass that I name <code>empcblock_decidable </code>, which lean accepts with no problems. I then have another predicate, <code>is_empblock</code>,  whose decidability is straightforwardly equivalent to <code>empcblock_decidable </code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_empblock</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">IsInFor</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">IsInFunc</span><span class=\"o\">},</span>\n    <span class=\"n\">YulTerm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">vars</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">NestedScope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">blklst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_empcblock</span> <span class=\"bp\">Γ</span> <span class=\"n\">blklst</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">IsInFor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">IsInFunc</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">blk</span> <span class=\"o\">:</span> <span class=\"n\">YulTerm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">vars</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_empblock</span> <span class=\"bp\">Γ</span> <span class=\"n\">blk</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">blk</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_empblock</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">empcblock_decidable</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>However, my attempt at referencing the <code>decidable</code> typeclass instance for <code>is_ empcblock</code> results in:</p>\n<p><code>unknown identifier 'empcblock_decidable'</code></p>",
        "id": 265671522,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640083848
    },
    {
        "content": "<p>Also, both of these instances are in the same file and same namespace.</p>",
        "id": 265671655,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640083935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  What do you mean that I forgot to give it a \"given\", sorry?</p>",
        "id": 265671725,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640084009
    },
    {
        "content": "<p>In <code>instance pred_decidable (a : α) : decidable (pred a) := ...</code> you've made the argument <code>a : α</code> <em>explicit</em> rather than <em>implicit</em> (by putting it in round brackets rather than curly brackets).</p>",
        "id": 265671855,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640084111
    },
    {
        "content": "<p>So, \"given that you made it explicit\", when you use <code>pred_decidable</code> you need to provide this argument <code>a</code>.</p>",
        "id": 265671976,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640084201
    },
    {
        "content": "<p>I think instances demand that you use full namespace names, are they protected automatically? Are you in a namespace? Check with #where and try the fully qualified name of the term</p>",
        "id": 265672034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640084261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span> This doesn't seem to be the problem, if I replace the above instance of the <code>decidable</code> typeclass with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">empcblock_decidable</span>\n  <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"n\">vars'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">IsInFor</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">IsInFunc</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">blklst</span> <span class=\"o\">:</span> <span class=\"n\">YulTerm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">vars</span> <span class=\"n\">vars'</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_empcblock</span> <span class=\"bp\">Γ</span> <span class=\"n\">blklst</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">blklst</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_empcblock</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">decidable.is_true</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_empcblock</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">decidable.is_false</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Making all arguments implicit, I still get the same error when later explicitly referencing this instance.</p>",
        "id": 265672038,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640084264
    },
    {
        "content": "<p>This totally threw me a few weeks ago BTW</p>",
        "id": 265672127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640084330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thanks so much for your help, that was it! Surprising that I have to refer to it using its namespace and name even though I am within the very namespace it is in... and glad to know that I'm not the only one to have gotten stuck due to this :D</p>",
        "id": 265672328,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640084434
    },
    {
        "content": "<p>#print the term and see if it has a <code>protected</code> attribute.</p>",
        "id": 265672430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640084508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  They are indeed labelled as protected! Good to know how to check this for the future :)</p>",
        "id": 265672898,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640084802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453259\">Julian Sutherland</span> has marked this topic as resolved.</p>",
        "id": 265672929,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640084819
    }
]