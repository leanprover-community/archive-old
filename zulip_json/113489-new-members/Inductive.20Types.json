[
    {
        "content": "<p>Hello, I am writing my first program in lean. I defined the following inductive type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">singleton</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n</code></pre></div>\n\n<p><code>Expr</code> is a parameterized type, and so instances would have type <code>Expr A</code> for some type  <code>A</code>. But the occurrence of the type <code>Expr</code> in the definition of <code>singleton</code> does not include the parameter? Is their a good reason? <br>\nPS: I am type checking this using the online tool: <a href=\"https://leanprover.github.io/live/latest/\">https://leanprover.github.io/live/latest/</a></p>",
        "id": 214623910,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1603741623
    },
    {
        "content": "<p>It does actually have the parameter, as you can see with <code>#print Expr.singleton</code></p>",
        "id": 214623995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603741675
    },
    {
        "content": "<p>but in the definition, the parameters to the inductive type are left off so you can't change them</p>",
        "id": 214624068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603741704
    },
    {
        "content": "<p>You're not allowed to use <code>Expr</code> with any other parameter inside <code>| singleton : A → Expr</code> line, so you don't write the parameter at all.</p>",
        "id": 214624132,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603741742
    },
    {
        "content": "<p>technically speaking, inside the types for the constructors, a local variable called <code>Expr : Type</code> is available for use to refer to the type being defined, and when the constructor is actually created, this variable is replaced with <code>Expr A</code> where <code>Expr : Type -&gt; Type</code> is the new constant</p>",
        "id": 214624338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603741848
    },
    {
        "content": "<p>If I define <code>mynat</code> as follows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">mynat.zero</span> <span class=\"bp\">≠</span> <span class=\"n\">mynat.succ</span> <span class=\"n\">mynat.zero</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">mynat.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Then do I have \"<a href=\"http://mynat.zero\">mynat.zero</a> ≠ mynat.succ <a href=\"http://mynat.zero\">mynat.zero</a>\" and \"mynat.succ is injective\" by the definition? If so, how can I prove them?</p>",
        "id": 242706498,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623748353
    },
    {
        "content": "<p><code>nat.no_confusion</code> can be used to prove both of them</p>",
        "id": 242706932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623748616
    },
    {
        "content": "<p>the equation compiler knows about both of these lemmas though so you can get some slicker proofs using it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">mynat.zero</span> <span class=\"bp\">≠</span> <span class=\"n\">mynat.succ</span> <span class=\"n\">mynat.zero.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">mynat.succ</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 242707028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623748674
    },
    {
        "content": "<p>Could you please explain the function of <code>nat.no_confusion</code>?</p>",
        "id": 242833187,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623823503
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a></p>",
        "id": 242833208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623823535
    }
]