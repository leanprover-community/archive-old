[
    {
        "content": "<p>(deleted)</p>",
        "id": 202195781,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593278025
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202195827,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593278065
    },
    {
        "content": "<p>Ok so after the harmonic series thing, which I still have to PR, I've been working on proving L'Hopital's rule, which is also one of the 100 theorems. I based myself upon the proof given here <a href=\"https://fr.wikiversity.org/wiki/Fonctions_d%27une_variable_r%C3%A9elle/D%C3%A9rivabilit%C3%A9#Th%C3%A9or%C3%A8mes_sur_la_d%C3%A9rivation\">https://fr.wikiversity.org/wiki/Fonctions_d%27une_variable_r%C3%A9elle/D%C3%A9rivabilit%C3%A9#Th%C3%A9or%C3%A8mes_sur_la_d%C3%A9rivation</a> (in French), and I got this. Of course there is still a lot to do :</p>\n<ul>\n<li>get rid of the \"continuity on [a,b[\" hypothesis by extending the functions</li>\n<li>prove the case where we take the limit at the right bound of derivability interval</li>\n<li>deduce the case where we take the limit in the middle of derivability interval</li>\n<li>and others...</li>\n</ul>\n<p>Here is the current proof, I'll take any advice !</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">mean_value</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">cancel_denoms</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span> <span class=\"n\">dense_inducing</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_within_of_eq_within</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">tendsto_congr&#39;</span> <span class=\"o\">(</span><span class=\"n\">mem_inf_sets_of_right</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_of_eventually_within</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"err\">ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nhds_within</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tendsto_inf</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_principal</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lhopital_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hdf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hdg</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hcf</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hcg</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hga</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hdiv</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">sub1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_Ioo</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_Icc</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_Ico</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">sub2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_Ioo</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_Ioo</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_Ioo</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">))),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">exists_ratio_deriv_eq_ratio_slope</span> <span class=\"n\">g</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">hca</span> <span class=\"n\">hcb</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hcb</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_Ioo</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">hcg</span> <span class=\"o\">(</span><span class=\"n\">sub1</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">differentiable_on</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">hdg</span> <span class=\"o\">(</span><span class=\"n\">sub2</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">hcf</span> <span class=\"o\">(</span><span class=\"n\">sub1</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">differentiable_on</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">hdf</span> <span class=\"o\">(</span><span class=\"n\">sub2</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"n\">choose</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x&#39;</span><span class=\"o\">))</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hc</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hg</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hg&#39;</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">sub2</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">)],</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">cmp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hc</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hc</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hc</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nhds_within_Ioo_eq_nhds_within_Ioi</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_within_of_eq_within</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">tendsto</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">deriv</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hdiv</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds_of_eventually_within</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_of_tendsto_of_tendsto_of_le_of_le&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_const_nhds</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds</span> <span class=\"n\">tendsto_id</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">univ_sets</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mem_principal_self</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">univ_inter</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">cmp</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mem_Ioi</span><span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">id</span><span class=\"o\">},</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202195925,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593278213
    },
    {
        "content": "<p>Cool! It's really nice to see this being done!<br>\n(However, don't forget to PR to mathlib. It's not easy, I know. But if you don't do it, your code will rot away.)</p>",
        "id": 202196799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593279616
    },
    {
        "content": "<p>One thing that I don't know (analysis is not my strongest point)... is there \"one l'Hopital to rule them all\"? A generalisation of the infty and -infty, and 0, cases?</p>",
        "id": 202196834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593279680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/L'Hopital's.20rule/near/202196799\">said</a>:</p>\n<blockquote>\n<p>Cool! It's really nice to see this being done!<br>\n(However, don't forget to PR to mathlib. It's not easy, I know. But if you don't do it, your code will rot away.)</p>\n</blockquote>\n<p>Do you talk about PR-ing this or the harmonic series ?</p>",
        "id": 202200690,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593285178
    },
    {
        "content": "<p>Both (-;</p>",
        "id": 202201247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593285915
    },
    {
        "content": "<p>But this is maybe not completely ready? I didn't look carefully</p>",
        "id": 202201254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593285928
    },
    {
        "content": "<p>No it isn't</p>",
        "id": 202201259,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593285940
    },
    {
        "content": "<p>You don't have to assume that <code>g</code> doesn't vanish on<code>Ioo a b</code>, it follows from the assumption on <code>g a</code> (provided you modify <code>g</code> by insisting <code>g a</code> = 0<code>) , the assumption on </code>g'` and Rolle.</p>",
        "id": 202204398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593291003
    },
    {
        "content": "<p>You can shorten things using <code>Icc_subset_Ico_right</code> and its friends.</p>",
        "id": 202204420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593291047
    },
    {
        "content": "<p>Also, the end of the proof would be easier using</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">eventually_nhds_with_of_forall</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"err\">ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">mem_inf_sets_of_right</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 202205785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593293398
    },
    {
        "content": "<p>It is indeed</p>",
        "id": 202206023,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593293762
    },
    {
        "content": "<p>Do you think L'Hopital's rule is useful enough to get into Mathlib ?</p>",
        "id": 202206045,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593293797
    },
    {
        "content": "<p>It doesn't have to be that useful to get into mathlib. And the fact that it needs several new lemmas about <code>nhds_within</code> is good.</p>",
        "id": 202206260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593294146
    },
    {
        "content": "<p>If this is on Freek's list then mathlib will almost surely find a place for it</p>",
        "id": 202219322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593318663
    },
    {
        "content": "<p>Do we have a canonical way to extend functions ? Right now, my strategy to get rid of the \"continuous on [a,b[\" hypothesis is to use the functions <code>(λ x, cond (x ∈ Ioo a b) (f x) 0)</code> and <code>(λ x, cond (x ∈ Ioo a b) (g x) 0)</code>, but proving all the hypothesis to use the original lemma are true is a nightmare, and I'm still struggling to prove that these are continuous on [a,b[. So I feel like, maybe, there is something better I should be using ?</p>",
        "id": 202234597,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593347181
    },
    {
        "content": "<p>Now I'm really hoping there isn't cause I managed to do it with this. Btw this made me state and prove a few lemmas about <code>continuous_within_at</code></p>",
        "id": 202240883,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593357523
    },
    {
        "content": "<p>The thing I know in this direction is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_if\">docs#continuous_if</a></p>",
        "id": 202246046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593365389
    },
    {
        "content": "<p>Ok so I managed to prove the rule for the cases where we wanna compute the limit of f/g at some real value, and I'm now working on the case where we're interested in the limit at +inf. I have a paper proof on the following lemma : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">mean_value</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lhopital_zero_at_top_nhds</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hdf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hdg</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hg&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hftop</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hgtop</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hdiv</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>which you can see here : <a href=\"https://drive.google.com/file/d/1nEaHw6D1B_diIVgHWxDyJu0XZo754RPq/view?usp=sharing\">https://drive.google.com/file/d/1nEaHw6D1B_diIVgHWxDyJu0XZo754RPq/view?usp=sharing</a><br>\nBut I am struggling writing this in term of filters, especially because of the <code>epsilon / 2</code>, because you can't divide a neighborhood set x)</p>",
        "id": 202875924,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593872648
    },
    {
        "content": "<p>Maybe there's a more direct proof working for all filters, not only <code>nhds l</code>. I managed to do this for the finite case, but I can't wrap my head around how I should do this here</p>",
        "id": 202875942,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593872738
    },
    {
        "content": "<p>(Btw sorry for my writing, I was too lazy to make a Latex doc)</p>",
        "id": 202875989,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593872789
    },
    {
        "content": "<p>What you wrote on \"paper\" doesn't seem to match your formal statement, and seems weird.</p>",
        "id": 202876524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593873527
    },
    {
        "content": "<p>Oh I forgot to write down a few things that were in my head, I'll reupload it soon</p>",
        "id": 202876630,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593873711
    },
    {
        "content": "<p>Is this <a href=\"https://drive.google.com/file/d/1c768NAsdmsuoFfQNmU-1CVBkQlIlNGJN/view?usp=sharing\">https://drive.google.com/file/d/1c768NAsdmsuoFfQNmU-1CVBkQlIlNGJN/view?usp=sharing</a> any better ? I thought of that \"proof\" at 1am, so it may be completely wrong</p>",
        "id": 202877298,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593874706
    },
    {
        "content": "<p>I don't have time to read the details now but it certainly looks much better</p>",
        "id": 202877624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593875232
    },
    {
        "content": "<p>since it starts with listing assumptions</p>",
        "id": 202877633,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593875273
    },
    {
        "content": "<p>Indeed <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 202877673,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593875308
    },
    {
        "content": "<p>Hmmm this still doesn't seem satisfying to me so I'll try another approach</p>",
        "id": 202879082,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593877378
    },
    {
        "content": "<p>That was definitely a good idea. I should never listen to 1am me</p>",
        "id": 202887768,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593890520
    },
    {
        "content": "<p>Before I go further, either by writing a PR or working on cases where <code>g -&gt; infinity</code>, I'd like to know your thoughts on what I already did, which is here : <a href=\"https://gitlab.com/Someody42/lhopital\">https://gitlab.com/Someody42/lhopital</a> (sorry, I just realized there's no lean syntax highlighting on Gitlab, if someone knows about Ruby we can maybe fix that). Again, this is just me being nervous about PR-ing some absolute nonsense or anything like that, so thanks in advance for your help !</p>",
        "id": 202989566,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594042748
    },
    {
        "content": "<p>I had a quick look. I'm not sure we can avoid stating many variations, but certainly the proofs shouldn't be repeated like that.</p>",
        "id": 203022480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594059079
    },
    {
        "content": "<p>I think a good starting point is to state and prove more general versions of Rolle.</p>",
        "id": 203022535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594059109
    },
    {
        "content": "<p>You should need to assume continuity on the closed interval, and also need the version where the interval is infinite.</p>",
        "id": 203022661,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594059183
    },
    {
        "content": "<p>Does anyone has Bourbaki \"Fonction d'une variable réelle\" at hand? If they cover this L'Hopital rule we can certainly take inspiration.</p>",
        "id": 203022742,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594059234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/L'Hopital's.20rule/near/203022480\">said</a>:</p>\n<blockquote>\n<p>I had a quick look. I'm not sure we can avoid stating many variations, but certainly the proofs shouldn't be repeated like that.</p>\n</blockquote>\n<p>I hope so. I thought I'd avoid it by reducing every other case to the first one using composition, but 1) it ends up being almost as long as if I just copy-pasted the whole proof, and 2) there is also some parts of the composition mess that I ended up copy-pasting, so I would say my objective wasn't really fulfilled</p>",
        "id": 203023401,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594059655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/L'Hopital's.20rule/near/203022742\">said</a>:</p>\n<blockquote>\n<p>Does anyone has Bourbaki \"Fonction d'une variable réelle\" at hand? If they cover this L'Hopital rule we can certainly take inspiration.</p>\n</blockquote>\n<p>I do, but I've glanced through chapter 1 and I can't see it in there.</p>",
        "id": 203028356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594062344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/L'Hopital's.20rule/near/203022742\">said</a>:</p>\n<blockquote>\n<p>Does anyone has Bourbaki \"Fonction d'une variable réelle\" at hand? If they cover this L'Hopital rule we can certainly take inspiration.</p>\n</blockquote>\n<p>I am sure you know about this, but probably some young people don't. Since it's not completely legal though, I won't mention libgen here.</p>",
        "id": 203028694,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594062532
    },
    {
        "content": "<p>My home ISP has blocked it! But actually Imperial gives me access to all Bourbaki online via our libary :D</p>",
        "id": 203028878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594062624
    },
    {
        "content": "<p>I am sure you know about this, but probably some young people don't. Since it's completely legal, let me say that you can use another DNS than your provider's, for instance Google's. It could unblock some things that are blocked just at the DNS level by your provider.</p>",
        "id": 203029238,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594062859
    },
    {
        "content": "<p>That, or the Wikipedia entry usually contains up-to-date info how to reach it (same for sci-hub which should also not be mentioned)</p>",
        "id": 203029385,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1594062956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <a href=\"https://universiteparissud.focus.universite-paris-saclay.fr/primo-explore/fulldisplay?docid=33UDPS_SFX1000000000282794&amp;context=L&amp;vid=33UDPS_VU1&amp;lang=fr_FR&amp;search_scope=default_scope&amp;adaptor=Local%20Search%20Engine&amp;tab=default_tab&amp;query=any,contains,fonctions%20d%27une%20variable%20r%C3%A9elle%20bourbaki&amp;offset=0&amp;pcAvailability=false\">https://universiteparissud.focus.universite-paris-saclay.fr/primo-explore/fulldisplay?docid=33UDPS_SFX1000000000282794&amp;context=L&amp;vid=33UDPS_VU1&amp;lang=fr_FR&amp;search_scope=default_scope&amp;adaptor=Local%20Search%20Engine&amp;tab=default_tab&amp;query=any,contains,fonctions%20d%27une%20variable%20r%C3%A9elle%20bourbaki&amp;offset=0&amp;pcAvailability=false</a></p>",
        "id": 203029709,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594063153
    },
    {
        "content": "<p>The legal way x)</p>",
        "id": 203029755,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594063190
    },
    {
        "content": "<p>All those almost legal ways are still much less convenient that having the book in your hand, right? Bu thanks anyway</p>",
        "id": 203033799,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594065625
    },
    {
        "content": "<p>Did anyone found what we are looking for in all those pdfs?</p>",
        "id": 203033832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594065640
    },
    {
        "content": "<p>I didn't <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span> In mine it is just evoked as a special application of series expansion</p>",
        "id": 203034490,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594065944
    },
    {
        "content": "<p>Under which assumptions?</p>",
        "id": 203034583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594065986
    },
    {
        "content": "<p>Where is that?</p>",
        "id": 203034805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594066088
    },
    {
        "content": "<p>Actually this is more of an historical reference, they don't even state it rigorously</p>",
        "id": 203034831,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594066104
    },
    {
        "content": "<p>Oh</p>",
        "id": 203034847,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594066117
    },
    {
        "content": "<p>It's in \"historical reference\"</p>",
        "id": 203034861,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594066128
    },
    {
        "content": "<p>So no concrete math here (p 288)</p>",
        "id": 203034927,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594066172
    },
    {
        "content": "<p>That's probably assuming differentiability at the point where you take the limit (which is of course the trivial case)</p>",
        "id": 203034944,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594066187
    },
    {
        "content": "<p>Yup</p>",
        "id": 203035007,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594066213
    },
    {
        "content": "<p>So it seems they didn't care about the non-trivial case.</p>",
        "id": 203035038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594066239
    },
    {
        "content": "<p>They don't even state several version of Rolle. Of course all variations are mathematically obviously equivalent to what they state.</p>",
        "id": 203035095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594066282
    },
    {
        "content": "<p>The wiki webpage that you cited a long time ago is actually extremely sloppy here. They write the usual version of Rolle and then seem to apply it without having the required assumptions.</p>",
        "id": 203035223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594066337
    },
    {
        "content": "<p>It works for the trivial case, but it soon starts to fail yes</p>",
        "id": 203035510,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594066534
    },
    {
        "content": "<p>Did you try to state and prove a version of Rolle where you assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">f'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> exists on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a, b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> tends to zero at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span>?</p>",
        "id": 203036103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594066833
    },
    {
        "content": "<p>beware of the stupid international notation for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">]</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo fence=\"true\">[</mo></mrow><annotation encoding=\"application/x-tex\">\\left]a, b\\right[</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">]</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose delimcenter\" style=\"top:0em;\">[</span></span></span></span></span></p>",
        "id": 203036136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594066854
    },
    {
        "content": "<p>(still more logical than the whole \"non increasing\" nonsense <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> ). Jokes aside I didn't, I'll look at it</p>",
        "id": 203036294,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594066947
    },
    {
        "content": "<p>Of course on paper there is nothing to say, you can just redefine <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> to  vanish at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> and the conclusion of the theorem is unaffected while the assumption become standard.</p>",
        "id": 203036400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067010
    },
    {
        "content": "<p>But in Lean this could be painful. I don't even know if it would be easier to redo the proof or use the existing lemma.</p>",
        "id": 203036491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067055
    },
    {
        "content": "<p>I did work with redefining for <code>lhopital_zero_at_left_of_Ioo</code>, and it was quite painful indeed</p>",
        "id": 203036582,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594067115
    },
    {
        "content": "<p>Oh, why did you work with <code>cond</code> instead of <code>if</code>?</p>",
        "id": 203036640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067160
    },
    {
        "content": "<p><code>cond</code> is the <code>bool</code> version, this is for programming, not math.</p>",
        "id": 203036704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067181
    },
    {
        "content": "<p>Well... I didn't know about if yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 203036730,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594067205
    },
    {
        "content": "<p>But yeah that could simplify a lot of things indeed</p>",
        "id": 203036909,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594067322
    },
    {
        "content": "<p>It probably wouldn't change much, but you can write <code>λ x, if x ∈ Ioo a b then f x else 0</code></p>",
        "id": 203036916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067327
    },
    {
        "content": "<p>That probably have more useful lemmas already proved</p>",
        "id": 203036935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067347
    },
    {
        "content": "<p>Such as the <code>continuous_if</code> you already mentioned...</p>",
        "id": 203036995,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594067393
    },
    {
        "content": "<p><code>continuous_if</code> is not enough because it assumes too much. We need the version I wrote for the sphere eversion project.</p>",
        "id": 203037361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067604
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/gluing.lean#L107-L111\">https://github.com/leanprover-community/sphere-eversion/blob/master/src/gluing.lean#L107-L111</a></p>",
        "id": 203037391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067626
    },
    {
        "content": "<p>and its special case <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/gluing.lean#L168-L170\">https://github.com/leanprover-community/sphere-eversion/blob/master/src/gluing.lean#L168-L170</a></p>",
        "id": 203037499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067677
    },
    {
        "content": "<p>except we need another special case of course.</p>",
        "id": 203037607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067749
    },
    {
        "content": "<p>A bit like my <code>continuous_on_Ico_of_extend_continuous_Ioo</code> ?</p>",
        "id": 203037802,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594067839
    },
    {
        "content": "<p>With ite rather than cond of course</p>",
        "id": 203037822,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594067850
    },
    {
        "content": "<p>(in <code>lemmas.lean</code>)</p>",
        "id": 203037944,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594067912
    },
    {
        "content": "<p>yes</p>",
        "id": 203037981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594067942
    },
    {
        "content": "<p>When I wanted to prove something like this I used <code>continuous_subtype_is_closed_cover</code>. We should probably have a version for two subsets.</p>",
        "id": 203038390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594068129
    },
    {
        "content": "<p>Oh this is a nice one.</p>",
        "id": 203038473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594068191
    },
    {
        "content": "<p>Wait, it doesn't help at all here, right?</p>",
        "id": 203038675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594068336
    },
    {
        "content": "<p>Which means mine also doesn't help.</p>",
        "id": 203038782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594068379
    },
    {
        "content": "<p><span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span> the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_deriv_eq_zero\">docs#exists_deriv_eq_zero</a> is really cute.</p>",
        "id": 203038882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594068446
    },
    {
        "content": "<p>Notice how it doesn't assume any differentiability.</p>",
        "id": 203038976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594068487
    },
    {
        "content": "<p>Yup, I did notice</p>",
        "id": 203039004,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594068511
    },
    {
        "content": "<p>Because <code>deriv f</code> is defined to be zero at <code>x</code> if <code>f</code> is not differentiable at <code>x</code>.</p>",
        "id": 203039010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594068519
    },
    {
        "content": "<p>This is much more evil than <code>1/0</code>. I suggest Kevin doesn't mention this on twitter.</p>",
        "id": 203039630,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594068922
    },
    {
        "content": "<p>Yeah, let's git blame that one.</p>",
        "id": 203039661,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594068959
    },
    {
        "content": "<p>I guess Yury.</p>",
        "id": 203039728,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594068981
    },
    {
        "content": "<p>If not you then certainly Yury</p>",
        "id": 203039783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594069032
    },
    {
        "content": "<p>GitHub says Yury but also  <a href=\"https://github.com/leanprover-community/mathlib/pull/1807#pullrequestreview-334554896\">https://github.com/leanprover-community/mathlib/pull/1807#pullrequestreview-334554896</a></p>",
        "id": 203039826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594069064
    },
    {
        "content": "<p>Oh, I just found a way to put emoji reactions to my own messages.</p>",
        "id": 203039925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594069119
    },
    {
        "content": "<p>In fact, the assumptions of the theorem are too strong; you just need to assume continuity within <code>Icc a b</code> at the endpoints, not in the middle.</p>",
        "id": 203040178,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594069301
    },
    {
        "content": "<p>Who would have guess we could make such huge progress on this classic theorem!</p>",
        "id": 203040335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594069366
    },
    {
        "content": "<p>Why not just define the derivative of a function that doesn't satisfy Rolle's theorem to be 0 and be done with it</p>",
        "id": 203041181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594069874
    },
    {
        "content": "<p>x)</p>",
        "id": 203041217,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594069901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/L'Hopital's.20rule/near/203036103\">said</a>:</p>\n<blockquote>\n<p>Did you try to state and prove a version of Rolle where you assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">f'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> exists on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a, b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> tends to zero at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span>?</p>\n</blockquote>\n<p>Why \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> tends to zero at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span>\" ? I mean in my case that's what I need, but in general <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> tends to the same <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">l\\in\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> should suffice, no ?</p>",
        "id": 203042119,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594070401
    },
    {
        "content": "<p>Sure, that's what I meant</p>",
        "id": 203042153,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594070425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/L'Hopital's.20rule/near/203040178\">said</a>:</p>\n<blockquote>\n<p>In fact, the assumptions of the theorem are too strong; you just need to assume continuity within <code>Icc a b</code> at the endpoints, not in the middle.</p>\n</blockquote>\n<p>That's actually quite a big problem, because it means I cannot use it by redefining the function at a and b : it won't be continuous on <code>Icc a b</code> if it wasn't originally on <code>Ioo a b</code></p>",
        "id": 203045145,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594072338
    },
    {
        "content": "<p>Guess I'll have to make variations of <code>exists_Ioo_extr_on_Icc</code> and <code>exists_local_extr_Ioo</code> too</p>",
        "id": 203045496,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594072617
    },
    {
        "content": "<p>Maybe yes, maybe not.</p>",
        "id": 203045563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594072654
    },
    {
        "content": "<p>Rah, congr lemmas are really lacking sometimes. Anyway, I'll continue tomorrow</p>",
        "id": 203047207,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594073743
    },
    {
        "content": "<p>Okay so, back after a 2-day lean break, I finally managed to prove this stronger Rolle : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">exists_deriv_eq_zero&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">b</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 203444879,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594331042
    },
    {
        "content": "<p>Funny how we don't even need continuity for this one to work x)</p>",
        "id": 203445148,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594331165
    },
    {
        "content": "<p>Note this is what Sébastien announced.</p>",
        "id": 203445760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594331470
    },
    {
        "content": "<p>It does look very fishy.</p>",
        "id": 203445801,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594331486
    },
    {
        "content": "<p>But I can totally see the proof.</p>",
        "id": 203445918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594331540
    },
    {
        "content": "<p>This is insane.</p>",
        "id": 203445955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594331561
    },
    {
        "content": "<p>I claim that Lean damaged Sébastien's mind. Otherwise he wouldn't have immediately seen this statement.</p>",
        "id": 203446245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594331741
    },
    {
        "content": "<p>You're part of our secret society now, you must swear not to tell anyone about this lemma outside this place, even (especially?) in your family.</p>",
        "id": 203446620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594331951
    },
    {
        "content": "<p>This is just nuts</p>",
        "id": 203446636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594331964
    },
    {
        "content": "<p>The point is just that if it's not math-differentiable on the interval then the lean derivative is zero?</p>",
        "id": 203446784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594332033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/L'Hopital's.20rule/near/203446620\">said</a>:</p>\n<blockquote>\n<p>You're part of our secret society now, you must swear not to tell anyone about this lemma outside this place, even (especially?) in your family.</p>\n</blockquote>\n<p>I want to know what my father would say if I tell him what Sebastien told me to prove <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 203446803,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594332044
    },
    {
        "content": "<p>I'm definitely going to mention this on Twitter</p>",
        "id": 203447051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594332177
    },
    {
        "content": "<p>Yes Kevin, if there is any point in the interior where <code>f</code> is not continuous then it's also not differentiable there, hence you can pick that point and the derivative there is zero by definition.</p>",
        "id": 203447076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594332189
    },
    {
        "content": "<p>Kevin, you're a completely failed cabalist.</p>",
        "id": 203447258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594332253
    },
    {
        "content": "<p>If you really want to do that you should prepare explanation about about you still need the reasonable assumptions as soon as you want to deduce anything non empty from this.</p>",
        "id": 203447324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594332305
    },
    {
        "content": "<blockquote>\n<p>I want to know what my father would say if I tell him what Sebastien told me to prove <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n</blockquote>\n<p>For those who didn't get this: Anatole's father is a mathematician who wrote several papers with Sébastien. Now I'm sure he'll blame Covid for not allowing Anatole to return to my university in September.</p>",
        "id": 203447499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594332399
    },
    {
        "content": "<p>I wouldn't say \"several\" though, I do only count 4 on my father's homepage (though it's a bit outdated, I'm supposed to work on that too <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> )</p>",
        "id": 203448020,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594332687
    },
    {
        "content": "<p>Little progress update : I have proven a similar version of Cauchy's mean value theorem : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">exists_ratio_deriv_eq_ratio_slope&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">lfa</span> <span class=\"n\">lga</span> <span class=\"n\">lfb</span> <span class=\"n\">lgb</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hdg</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">g</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">lfa</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hga</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">lga</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">b</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">lfb</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hgb</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">b</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">lgb</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">lgb</span> <span class=\"bp\">-</span> <span class=\"n\">lga</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">lfb</span> <span class=\"bp\">-</span> <span class=\"n\">lfa</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">g</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Thus I can now prove </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">lhopital_zero_at_left_of_Ioo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hdf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hdg</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hg&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hga</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hdiv</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>without doing all the if-then-else stuff here, and most importantly without relying on the <code>Ico</code> version as I did before</p>",
        "id": 203515319,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594392382
    },
    {
        "content": "<p>Which means the <code>Ico</code> version proof is now down to : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">lhopital_zero_at_left_of_Ico&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hdf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hdg</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hcf</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hcg</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hg&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hga</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hdiv</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">deriv</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lhopital_zero_at_left_of_Ioo</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hdf</span> <span class=\"n\">hdg</span> <span class=\"n\">hg&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hfa</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nhds_within_Ioo_eq_nhds_within_Ioi</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_within_at</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">continuous_within_at</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">hcf</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">left_mem_Ico</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hab</span><span class=\"o\">)</span> <span class=\"n\">Ioo_subset_Ico_self</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hga</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nhds_within_Ioo_eq_nhds_within_Ioi</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_within_at</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">continuous_within_at</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">hcg</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">left_mem_Ico</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hab</span><span class=\"o\">)</span> <span class=\"n\">Ioo_subset_Ico_self</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hdiv</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hab</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203517293,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594393281
    },
    {
        "content": "<p>I just noticed both Rolle and Cauchy were originally written using <code>has_deriv</code>, should I do that too ?</p>",
        "id": 203517474,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594393365
    },
    {
        "content": "<p>I think you can go back and forth between stating stuff with <code>has_deriv</code> and <code>differentiable_at</code>.</p>",
        "id": 203525830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594397187
    },
    {
        "content": "<p>Anatole Dedecker <a href=\"#narrow/stream/113489-new-members/topic/L'Hopital's.20rule/near/203444879\">said</a>:</p>\n<blockquote>\n<p>Okay so, back after a 2-day lean break, I finally managed to prove this stronger Rolle : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">exists_deriv_eq_zero&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">b</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">deriv</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I wanted to come back to this in case Kevin can't keep a secret. For the record, here is a proof that this statement contains the reasonable statement:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">rolle</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds_within</span> <span class=\"n\">b</span> <span class=\"err\">$</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">):</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝓝</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_deriv_eq_zero&#39;</span> <span class=\"n\">f</span> <span class=\"n\">hab</span> <span class=\"n\">hfa</span> <span class=\"n\">hfb</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c_in</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c_in</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">differentiable_at</span><span class=\"bp\">.</span><span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"n\">c_in</span><span class=\"o\">),</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203526328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594397438
    }
]