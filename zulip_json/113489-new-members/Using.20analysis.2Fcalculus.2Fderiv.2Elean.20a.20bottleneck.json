[
    {
        "content": "<p>Hi all: I've been trying to get started using this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">deriv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">twoX</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">twoX</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">has_deriv_at</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">twoX</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Lean seems to become angry. It took several good minutes for the imports to load on a Macbook (one could easily get fried eggs on it after that), then for a couple seconds I did see the check passed, then I got this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">checkDerivatives</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">excessive</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"err\">&#39;</span><span class=\"n\">replace&#39;</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">threshold</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Should I increase that memory threshold -  and if yes how?</p>",
        "id": 187941657,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581447151
    },
    {
        "content": "<p>Probably you haven't compiled mathlib</p>",
        "id": 187941767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581447237
    },
    {
        "content": "<p>So it's starting to do a whole bunch of compilations when you open that file.</p>",
        "id": 187941817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581447252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259186\">@Daniel Keys</span> Is this file in a project that depends on mathlib? Or are you working directly on a clone of mathlib?</p>",
        "id": 187941856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581447292
    },
    {
        "content": "<p>In the first case, run <code>update-mathlib</code>. In the second case <code>cache-olean --fetch</code>.</p>",
        "id": 187941913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581447328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>    I did set up the project directory with <code>mathlib</code>. So I suppose I should do <code>update-mathlib</code>. I did do that a couple of times in the directory though, but it was some time ago. How often does it need to be done? Thank you!</p>",
        "id": 187942913,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581448014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Actually just did it again and still have the same problem.</p>",
        "id": 187943238,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581448230
    },
    {
        "content": "<p>And when trying the other command I get: <code>Your repo is dirty; fetching in this state could cause you to lose data. </code> <br>\nWhich I don't understand, since all my editors are closed. I'm not too much of a GitHub user, maybe there's something I need to do regularly when editing or creating new files.</p>",
        "id": 187943549,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581448454
    },
    {
        "content": "<p>When you see this message in VSCode, what files do you have open in tabs?</p>",
        "id": 187943747,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581448609
    },
    {
        "content": "<p>Try closing everything besides the file you're working on, and restart the Lean server (ctrl-shift-p, start typing \"lean: restart\").</p>",
        "id": 187943832,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581448679
    },
    {
        "content": "<p>I didn't see this in Lean, but at the terminal prompt upon typing <code>cache-olean --fetch</code>. My VS Code was closed, and I had no files open in other editors.</p>",
        "id": 187950064,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581452056
    },
    {
        "content": "<p>Now I just restarted, I have only one file open in Lean which reads:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">deriv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">twoX</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">twoX</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">has_deriv_at</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">twoX</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and my computer is going nuts again.</p>",
        "id": 187950417,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581452302
    },
    {
        "content": "<p>I meant for the original issue with the recompiling, not the cache-olean error. If you're not working directly in a mathlib repository, cache-olean isn't the right script to use.</p>",
        "id": 187950577,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581452405
    },
    {
        "content": "<p>Even then, I was only using the same file</p>",
        "id": 187950625,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581452439
    },
    {
        "content": "<p>Delete everything after the imports and restart the server like I described above. Is the CPU still going at it?</p>",
        "id": 187950645,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581452452
    },
    {
        "content": "<p>And I do  work in a mathlib directory. Yes, I just did that and it's going crazy</p>",
        "id": 187950689,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581452476
    },
    {
        "content": "<p>Maybe set up a new, fresh directory?</p>",
        "id": 187950710,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581452495
    },
    {
        "content": "<p>You said before </p>\n<blockquote>\n<p>I did set up the project directory with <code>mathlib</code> </p>\n</blockquote>\n<p>Is the repository you're working in a clone of <code>mathlib</code>, or is it using <code>mathlib</code> as a dependency?</p>",
        "id": 187950777,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581452529
    },
    {
        "content": "<p>i.e., what's in the <code>leanpkg.toml</code> file?</p>",
        "id": 187950787,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581452543
    },
    {
        "content": "<p>I didn't know of a difference between the two. Here's the .toml:</p>\n<div class=\"codehilite\"><pre><span></span>[package]\nname = &quot;ProofByInduction&quot;\nversion = &quot;0.1&quot;\nlean_version = &quot;3.4.2&quot;\npath = &quot;src&quot;\n\n[dependencies]\nmathlib = {git = &quot;https://github.com/leanprover-community/mathlib&quot;, rev = &quot;585e107f9811719832c6656f49e1263a8eef5380&quot;}\n</pre></div>",
        "id": 187950893,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581452636
    },
    {
        "content": "<p>That's fine. You're just using mathlib as a dependency. <code>cache-olean</code> is for when you're working directly on mathlib.</p>",
        "id": 187951158,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581452779
    },
    {
        "content": "<p>What's the output when you run <code>update-mathlib</code>?</p>",
        "id": 187951170,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581452790
    },
    {
        "content": "<p>Here it is:</p>\n<div class=\"codehilite\"><pre><span></span>update-mathlib\nInfo: No github section found in &#39;git config&#39;, we will use GitHub with no authentication\nQuerying GitHub...\nReusing cached olean archive\nExtracting nightly...\n</pre></div>",
        "id": 187951227,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581452839
    },
    {
        "content": "<p>Try running <code>find _target | grep \"[.]olean$\" | xargs touch</code></p>",
        "id": 187951393,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581452943
    },
    {
        "content": "<p>Then restart the Lean server in VSCode.</p>",
        "id": 187951416,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581452962
    },
    {
        "content": "<p>Run this in the terminal?</p>",
        "id": 187951443,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581452990
    },
    {
        "content": "<p>Yep.</p>",
        "id": 187951447,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581452994
    },
    {
        "content": "<p>OK. Seems to work. Can you elaborate a bit on what was happening?</p>",
        "id": 187951626,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581453117
    },
    {
        "content": "<p>Ugh. It's an unfortunate \"feature.\" olean files are compiled versions of lean files. The <code>update-mathlib</code> script downloads olean files for all of mathlib so you don't need to compile it yourself, which takes ages. But there's one olean per lean file, and one of the tests Lean does to make sure olean files are compatible is to check the timestamps. If file 2 imports file 1 but olean 2 is older than olean 1, olean 2 (and the olean for any lean file that imports lean 2) is invalid.</p>",
        "id": 187951941,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581453332
    },
    {
        "content": "<p>Somehow your system must have updated timestamps on your lean files, or given the olean files old timestamps.</p>",
        "id": 187952018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581453379
    },
    {
        "content": "<p>Sometimes the timestamps end up wrong after unpacking.</p>",
        "id": 187952025,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581453382
    },
    {
        "content": "<p>OK. So if this happens again, the same solution, right?</p>",
        "id": 187952100,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581453429
    },
    {
        "content": "<p>Yes, but there really needs to be a more permanent solution, it's super annoying.</p>",
        "id": 187952142,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581453464
    },
    {
        "content": "<p>I'm actually not certain if the problem is with comparing .olean timestamps with each other, or comparing the .olean timestamps to the corresponding .lean timestamps.</p>",
        "id": 187952262,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581453536
    },
    {
        "content": "<p>Thank you all!</p>",
        "id": 187952311,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581453597
    },
    {
        "content": "<p>Remember -- Lean is a project, not a product. We work around things. Over the last couple of years the community has seen a lot of funny little issues, most have been fixed, and those that haven't have now got workarounds. I appreciate it can be daunting for the beginner. But the software is usable once you get to know its quirks :-)</p>",
        "id": 187966255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581462916
    },
    {
        "content": "<p>Agreed. It's lots of fun too! I just wish I could devote more time, but either way I'd be blown away without the help here.</p>",
        "id": 187966371,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581463035
    },
    {
        "content": "<blockquote>\n<p>It's an unfortunate \"feature.\"</p>\n</blockquote>\n<p>Would it be possible to just remove this feature in the community fork?</p>",
        "id": 187967300,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581463889
    },
    {
        "content": "<p>Or is this same feature responsible for recompiling the library if I change a <code>.lean</code> file?</p>",
        "id": 187967368,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581463934
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/112\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/112\">https://github.com/leanprover-community/lean/issues/112</a></p>",
        "id": 187967378,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581463945
    },
    {
        "content": "<p>I don't know the details myself, hoping someone more familiar will chime in.</p>",
        "id": 187967422,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581463977
    }
]