[
    {
        "content": "<p>How can I apply the contrapositive of a theorem? I guess I'm looking for something like <code>apply theorem_name.contrapositive</code>. Something similar to how we can use <code>apply iff_theoerem.mp</code> or <code>apply iff_theoerem.mpr</code>. Just to be clear, I know about the <code>contrapose</code> tactic, but I can't seem to make it work for theorems.</p>",
        "id": 254072405,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632153193
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mt\">docs#mt</a> is modus tollens.  Rather than using dot notation (since implications can't use dot notation), you'd do <code>apply mt theorem_name</code></p>",
        "id": 254072787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632153352
    },
    {
        "content": "<p>Incidentally, it would be nice if iffs could be contraposed as well.  These seem not to be present in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iff.mt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">h.mp</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">iff.mtr</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">h.mpr</span>\n</code></pre></div>\n<p>Then, in addition to <code>apply iff_theorem.mp</code> you could do <code>apply iff_theorem.mt</code>.</p>",
        "id": 254073153,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632153487
    },
    {
        "content": "<p>Perfect. What I needed to do was <code>apply mt filter.ext_iff.mp</code> which works exactly how I wanted.</p>",
        "id": 254073229,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632153514
    },
    {
        "content": "<p>Yes. because there is <code>iff.mp</code> and <code>iff.mpr</code> I would expect an <code>iff.mt</code>.</p>",
        "id": 254073398,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632153593
    },
    {
        "content": "<p>Perhaps versions that do <code>push_neg</code> would be convenient as well.</p>",
        "id": 254073600,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1632153641
    },
    {
        "content": "<p>I just learned about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_congr\">docs#not_congr</a>, but it's not in the <code>iff</code> namespace so it can't be used with dot notation.</p>",
        "id": 254073609,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632153645
    },
    {
        "content": "<p>Perhaps we should alias <code>not_congr</code> in the <code>iff</code> namespace somewhere</p>",
        "id": 254078170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632155467
    },
    {
        "content": "<p>I'd suggest <code>iff.mtr</code> for it, and <code>iff.mt</code> for its reverse.</p>\n<p>It would also be nice to have the reverse versions of these, that strip off the nots.  I don't know if these have a name in logic... maybe they could be <code>rmt</code> for \"reverse modus tollens\" and <code>rmtr</code> for \"reverse modus tollens reverse\".</p>",
        "id": 254078982,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632155769
    },
    {
        "content": "<p>Now we only need <code>rmp</code> and <code>rmpr</code>...</p>",
        "id": 254079222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632155879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Apply.20contrapostive/near/254073153\">said</a>:</p>\n<blockquote>\n<p>Incidentally, it would be nice if iffs could be contraposed as well.  These seem not to be present in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iff.mt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">h.mp</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">iff.mtr</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">h.mpr</span>\n</code></pre></div>\n<p>Then, in addition to <code>apply iff_theorem.mp</code> you could do <code>apply iff_theorem.mt</code>.</p>\n</blockquote>\n<p>Yes please! I really wanted those at one point.</p>",
        "id": 254084514,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632158003
    },
    {
        "content": "<p>If we had <code>iff.not</code> as <code>(h : a ↔ b) : ¬a ↔ ¬b</code> then you could use <code>h.not.mpr</code> and <code>h.not.mp</code> for those, which might be more discoverable</p>",
        "id": 254089346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632159934
    },
    {
        "content": "<p>I suppose we could do something similar for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and_congr\">docs#and_congr</a> too</p>",
        "id": 254089476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632159971
    }
]