[
    {
        "content": "<p>What would the name for the lemma in the example below me? I have a related lemma ported from list there for comparison.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector2</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">vector</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">vector</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">pmap</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nth_of_mem</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">v.to_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">v.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">mem_iff_nth.mp</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">v.nth</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">v.to_list</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">mem_iff_nth</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">v.nth</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pmap</span>\n</code></pre></div>",
        "id": 214758360,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603829938
    },
    {
        "content": "<p>With a golfed proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">v.nth</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">v.to_list</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exists.elim</span> <span class=\"o\">(</span><span class=\"n\">nth_of_mem</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_iff_nth.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩)⟩</span>\n</code></pre></div>",
        "id": 214759073,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603830244
    },
    {
        "content": "<p>well since no one else who knows what they're talking about chimed in I can throw stuff you maybe found already in :)</p>",
        "id": 214767506,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603834660
    },
    {
        "content": "<p>namely with some grep skills, you found this list lemma right:</p>",
        "id": 214767531,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603834678
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/a027a37bfbd2805fa8b1cc6890b6edbcbb6648f7/src/data/list/of_fn.lean#L87-L89\">https://github.com/leanprover-community/mathlib/blob/a027a37bfbd2805fa8b1cc6890b6edbcbb6648f7/src/data/list/of_fn.lean#L87-L89</a></p>",
        "id": 214767588,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603834688
    },
    {
        "content": "<p>it looks like the closest signature in mathlib to what you have</p>",
        "id": 214767703,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603834746
    },
    {
        "content": "<p>(so like <code>forall_mem_of_nth_iff</code> maybe, with the iff backwards?)</p>",
        "id": 214767807,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603834794
    },
    {
        "content": "<p>I found that via <code>rg --multiline '∀.*\\n?.*↔.*∀.*' | rg fin</code> after a few similar tries.</p>",
        "id": 214767973,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603834869
    },
    {
        "content": "<p>I would suggest flipping the iff and calling it <code>forall_mem_to_list_iff</code></p>",
        "id": 214769998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603836060
    }
]