[
    {
        "content": "<p>Is there a way to fix this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"k\">else</span> <span class=\"n\">default</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 287509899,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656271825
    },
    {
        "content": "<p>Or do something similar?</p>",
        "id": 287509915,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656271856
    },
    {
        "content": "<p>What if there are two different m's with f(m)=x?</p>",
        "id": 287509919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656271863
    },
    {
        "content": "<p>I think you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> to extract the m from the h</p>",
        "id": 287509927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656271893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/fin.20zip.20function/near/287509919\">said</a>:</p>\n<blockquote>\n<p>What if there are two different m's with f(m)=x?</p>\n</blockquote>\n<p>Yes, that is a good point. I should have added the condition that there are not.</p>",
        "id": 287509976,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656271939
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a> would also work if you add that condition</p>",
        "id": 287509994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656271991
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 287510005,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656272023
    }
]