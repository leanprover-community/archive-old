[
    {
        "content": "<p>Hi all, my name is Winston Yin, a PhD student in theoretical physics at UC Berkeley. As a side project, I want to contribute to mathlib by formalising some definitions and theorems in algebraic topology and differential geometry. I've just read through the \"Theorem Proving in Lean\" textbook, so I'm not too familiar with writing non-trivial proofs in Lean yet. Looking at the mathlib index, it looks like there are already some basic definitions, e.g. the smooth fibre bundle. Is there anyone here who's more familiar with this part of mathlib? What would be a good place to start extending mathlib?</p>",
        "id": 240809154,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622451903
    },
    {
        "content": "<p>Have you played the natural number game already? It's a great way of getting your hands dirty with Lean proofs. (Of course the maths isn't really exciting if you want to work on AT or DG.)</p>",
        "id": 240809336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622452025
    },
    {
        "content": "<p>For AT, I think we should do some stuff with Kan complexes. I'm not the best expert on what good next steps for DG would be.</p>",
        "id": 240809406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622452078
    },
    {
        "content": "<p>Not yet! Where can I find this \"game\"?</p>",
        "id": 240809828,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622452358
    },
    {
        "content": "<p>It's here: <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>",
        "id": 240809997,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622452460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span>  I am also new to Lean. May I know how long it took you to read through \"Theorem Proving in Lean\"? Did you try all the exercises on the book?</p>",
        "id": 240810103,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622452559
    },
    {
        "content": "<p>Ah it looks like the \"Theorem Proving in Lean\" book already covered a lot of the stuff in the natural number game.</p>",
        "id": 240810270,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622452674
    },
    {
        "content": "<p>I worked through maybe 60% of the exercises in that book. It took me about 8 days to finish the whole textbook, although I'm on day 7 of quarantine in a hotel room, so I've got all day. It introduces everything from propositional logic, dependent types, proof tactics, inductive types, structure to type classes, so if any thing, it's a good reference.</p>",
        "id": 240810547,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622452868
    },
    {
        "content": "<p>You can probably skip this game and go to the tutorial project</p>",
        "id": 240810873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622453094
    },
    {
        "content": "<p>Aah, I thought that \"read through\" just meant that: reading through. But if you also did the exercise on your lean installation, then you can skip NNG.</p>",
        "id": 240811397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622453466
    },
    {
        "content": "<p>Should I care about the difference between Lean 3 and 4? My installation is 3.30.0</p>",
        "id": 240816846,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622456914
    },
    {
        "content": "<p>they're fairly different, but the main maths library is currently on Lean 3; we're hoping to move over to lean 4 soon™, for some definition of soon</p>",
        "id": 240816905,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622456970
    },
    {
        "content": "<p>I see. Just curious, what are the todos involved in moving mathlib from Lean 3 to 4? Is Lean 4 not backwards compatible?</p>",
        "id": 240817073,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622457111
    },
    {
        "content": "<p>Pretty much everything needs to be rewritten, as far as I understand; tactics are different, too, and there is ad-hoc issues with \"straight\" porting wrt some changes made within Lean 4 specifically.</p>",
        "id": 240817342,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622457347
    },
    {
        "content": "<p>I am not the best person to ask about this, however; I'm not too involved with Lean 4 right now</p>",
        "id": 240817346,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622457352
    },
    {
        "content": "<p>Lean 4 is completely utterly non-backwards compatible. :-) The underlying type theoretic logic is essentially identical, and the syntax is \"familiar\", but that's about the end of it. That said, there have been a succession of experiments doing semi-automatic translation from Lean 3 to Lean 4, and I understand (second hand!) that hopes remain high that this is viable. It will still involve a lot of human work, however, so don't hold your breath for a mathematics library for Lean 4. I think we're hoping to start by the summer...?</p>",
        "id": 240817634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622457558
    },
    {
        "content": "<p>Your summer or northern-hemisphere summer Scott? :b</p>",
        "id": 240817899,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622457737
    },
    {
        "content": "<p>That remains to be seen? :-)</p>",
        "id": 240818529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622458298
    },
    {
        "content": "<p>Thanks for the info. I'm guessing it is only a coincidence that Scott here is also from down under, and we're not seeing the Australian PM contributing to mathlib in his spare time. :)</p>",
        "id": 240819148,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622458727
    },
    {
        "content": "<p>It's his full-time job, isn't it?</p>",
        "id": 240820231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622459593
    },
    {
        "content": "<p>I'm using \"leanproject new foobar\" to create a new project, but failed at step \"Failed to download <a href=\"https://oleanstorage.azureedge.net/mathlib/.tar.xz\">https://oleanstorage.azureedge.net/mathlib/.tar.xz</a>\"</p>",
        "id": 240823196,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622461633
    },
    {
        "content": "<p>Viewing the page in my browser gives a raw XML file with \"The specified blob does not exist.\"</p>",
        "id": 240823234,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622461669
    },
    {
        "content": "<p>what does <code>elan show</code> give as output?</p>",
        "id": 240823400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622461779
    },
    {
        "content": "<p>installed toolchains</p>\n<hr>\n<p>stable (default)<br>\nleanprover-community/lean:3.30.0</p>\n<p>active toolchain</p>\n<hr>\n<p>stable (default)<br>\nLean (version 3.30.0, commit a5822ea47ebc, Release)</p>",
        "id": 240823429,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622461797
    },
    {
        "content": "<p>Weird... it is somehow not fetching the git commit hash from your mathlib clone.</p>",
        "id": 240823582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622461869
    },
    {
        "content": "<p>Is git working properly on your system?</p>",
        "id": 240823594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622461876
    },
    {
        "content": "<p>I believe so. I've been using it for other things too</p>",
        "id": 240823614,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622461888
    },
    {
        "content": "<p>Is it possible this has anything to do with my network connection? I'm in China, and many sites are blocked</p>",
        "id": 240823652,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622461920
    },
    {
        "content": "<p>I'm on macOS, if that helps at all</p>",
        "id": 240823755,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622461955
    },
    {
        "content": "<p>Here's the full output of <code>leanproject new mathlib</code>:</p>\n<blockquote>\n<p>cd mathlib<br>\ngit init -q<br>\ngit checkout -b lean-3.30.0<br>\nSwitched to a new branch 'lean-3.30.0'<br>\nconfiguring mathlib 0.1<br>\nAdding mathlib<br>\nmathlib: cloning <a href=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a> to _target/deps/mathlib<br>\ngit clone <a href=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a> _target/deps/mathlib<br>\nCloning into '_target/deps/mathlib'...<br>\nremote: Enumerating objects: 160251, done.<br>\nremote: Counting objects: 100% (279/279), done.<br>\nremote: Compressing objects: 100% (175/175), done.<br>\nremote: Total 160251 (delta 178), reused 159 (delta 102), pack-reused 159972<br>\nReceiving objects: 100% (160251/160251), 69.51 MiB | 128.00 KiB/s, done.<br>\nResolving deltas: 100% (126322/126322), done.<br>\ngit checkout --detach fd48ac55697cadbf777009e95b963aa142310a84    # in directory _target/deps/mathlib<br>\nHEAD is now at fd48ac556 chore(data/list): extract sublists to a separate file (<a href=\"https://github.com/leanprover-community/mathlib/issues/7757\">#7757</a>)<br>\nconfiguring mathlib 0.1<br>\nLooking for local mathlib oleans<br>\nLooking for remote mathlib oleans<br>\nTrying to download <a href=\"https://oleanstorage.azureedge.net/mathlib/.tar.xz\">https://oleanstorage.azureedge.net/mathlib/.tar.xz</a> to /Users/winston/.mathlib/.tar.xz<br>\nFailed to download <a href=\"https://oleanstorage.azureedge.net/mathlib/.tar.xz\">https://oleanstorage.azureedge.net/mathlib/.tar.xz</a></p>\n</blockquote>",
        "id": 240823842,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622462008
    },
    {
        "content": "<p>Weird, it prints the commit hash from mathlib.</p>",
        "id": 240823949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622462067
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wget https://oleanstorage.azureedge.net/mathlib/fd48ac55697cadbf777009e95b963aa142310a84.tar.xz\n</code></pre></div>\n<p>work?</p>",
        "id": 240824034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622462127
    },
    {
        "content": "<p>(Or another way of downloading that file manually</p>",
        "id": 240824054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622462142
    },
    {
        "content": "<p>Yep successfully downloaded</p>",
        "id": 240824143,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622462177
    },
    {
        "content": "<p>If there's a raw script for <code>leanproject</code> I can continue the remaining steps manually perhaps</p>",
        "id": 240824185,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622462211
    },
    {
        "content": "<p>Hmm, I wouldn't know exactly where to look for it.</p>",
        "id": 240824639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622462472
    },
    {
        "content": "<p>But you should be able to unzip that tarball into <code>_target/deps/mathlib</code> inside your project directory.</p>",
        "id": 240824677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622462502
    },
    {
        "content": "<p>The result will be that you have a pre-compiled version of mathlib for your project.</p>",
        "id": 240824705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622462521
    },
    {
        "content": "<p>Then are there any subsequent steps that <code>leanproject</code> does?</p>",
        "id": 240825019,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622462715
    },
    {
        "content": "<p>Hmmm <code>_target/deps/mathlib</code> is already populated</p>",
        "id": 240825150,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622462783
    },
    {
        "content": "<p><code>leanproject check</code> says <code>Everything looks fine.</code></p>",
        "id": 240825225,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622462839
    },
    {
        "content": "<p><code>leanproject</code> is a Python program; the source files are <a href=\"https://github.com/leanprover-community/mathlib-tools/tree/master/mathlibtools\">here</a>.</p>\n<p>Yes, uncompressing into <code>_target/deps/mathlib</code> should just add a bunch of <code>.olean</code> files there without modifying any of the <code>.lean</code> files.</p>",
        "id": 240825232,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622462846
    },
    {
        "content": "<p>I see</p>",
        "id": 240825250,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622462860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin</span> <a href=\"#narrow/stream/113489-new-members/topic/Introducing.20myself.3A.20Winston.20Yin/near/240823652\">said</a>:</p>\n<blockquote>\n<p>Is it possible this has anything to do with my network connection? I'm in China, and many sites are blocked</p>\n</blockquote>\n<p>I do remember that several other people in China have reported having trouble with <code>leanproject</code> in this Zulip chat. I don't know how or if they solved it, but do let us know if you figure something out!</p>",
        "id": 240825400,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622462950
    },
    {
        "content": "<p>I'm using a special VPN, but that doesn't seem to affect the networking of the terminal. That requires some extra annoying steps. Downloads from github sometimes fails but succeed at slow speed after a couple trials</p>",
        "id": 240825587,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622463066
    },
    {
        "content": "<p>Now I'm quite sure it's a bug in the python script. Tried in on Ubuntu outside of China as well with same error (<code>Failed to download https://oleanstorage.azureedge.net/mathlib/.tar.xz</code>)</p>",
        "id": 240833335,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622467556
    },
    {
        "content": "<p>I just went into the python script and manually put in the olean url...</p>",
        "id": 240834251,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622468088
    },
    {
        "content": "<p>Now what paths should be in <code>lean --path</code>? My VS Code is telling me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">file</span> <span class=\"bp\">'</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">basic'</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">search</span> <span class=\"n\">path</span>\n<span class=\"n\">Use</span> <span class=\"bp\">'</span><span class=\"n\">lean</span> <span class=\"c1\">--path' to see where lean is looking, or https://leanprover-community.github.io/file-not-found.html for more</span>\n</code></pre></div>",
        "id": 240834747,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622468373
    },
    {
        "content": "<p>Something really weird is going on here. Obviously the script is failing to build the correct download url.</p>",
        "id": 240835094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622468550
    },
    {
        "content": "<p>Oh I see. You typed <code>leanproject new mathlib</code> so you are trying to make a new project called mathlib. I can believe this totally confuses <code>leanproject</code>.</p>",
        "id": 240835158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622468603
    },
    {
        "content": "<p>What are you actually trying to do here? If you want to work on mathlib itself your should type <code>leanproject get mathlib</code>. If you want to use mathlib in your own project then you should type <code>leanproject new my_shiny_project</code> (or any name by mathlib really).</p>",
        "id": 240835321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622468687
    },
    {
        "content": "<p>sigh... after hours I've finally made it work on VS Code. But you're right. I should've been smart and not double named things <code>mathlib</code></p>",
        "id": 240837008,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622469632
    },
    {
        "content": "<p>All I wanted to is create a new project. Since my goal is to understand mathlib and extend it, I just called it mathlib. Oh well!</p>",
        "id": 240837095,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622469692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin</span> <a href=\"#narrow/stream/113489-new-members/topic/Introducing.20myself.3A.20Winston.20Yin/near/240834747\">said</a>:</p>\n<blockquote>\n<p>Now what paths should be in <code>lean --path</code>? My VS Code is telling me</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">file</span> <span class=\"bp\">'</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">basic'</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">search</span> <span class=\"n\">path</span>\n<span class=\"n\">Use</span> <span class=\"bp\">'</span><span class=\"n\">lean</span> <span class=\"c1\">--path' to see where lean is looking, or https://leanprover-community.github.io/file-not-found.html for more</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Btw for this problem, VSCode should strictly open the directory of the project itself, rather than any parent directory.</p>",
        "id": 240837255,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622469772
    },
    {
        "content": "<p>So I may be the only one in the world with a working leanproject called mathlib now. Anyway, thanks everyone for your help. You've been exceedingly generous</p>",
        "id": 240837348,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622469838
    },
    {
        "content": "<p>Well, many people have a working lean project called mathlib (-; But it's a very different project than yours <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 240837442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622469879
    },
    {
        "content": "<p>Yes, we don't know how to write this more clearly in the instructions, but many people still fall in this trap. I thought that the Lean VSCode extension even has a warning if you open the wrong folder. But it probably triggers only if you open a child of the right folder, not a parent.</p>",
        "id": 240837484,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622469912
    },
    {
        "content": "<p>I actually started writing Lean code in VS Code even before installing mathlib, so it just got stuck in the parent directory without a retrospective warning</p>",
        "id": 240837612,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622469971
    },
    {
        "content": "<p>If I follow a particular undergraduate / graduate level textbook when formalising a certain area, the definitions and theorems are often not as general as they can be. Is there any harm in formalising the less general statements, in that they might be superseded in the future by more knowledgeable mathematicians? E.g. undergraduate textbooks are going to prove things for groups rather than monoids, or vector spaces instead of modules.</p>",
        "id": 240890979,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622517967
    },
    {
        "content": "<p>The ghost of Plato will haunt you if you don't write code in the perfect generality.</p>",
        "id": 240891527,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1622518665
    },
    {
        "content": "<p>There is no real harm, the only problem is that if you write statements that could be more general, and someone later tries to find the general version and doesn't (e.g. via <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">tactic#library_search</a>) they may end up reproving the fact which wastes a little bit of time. Also: as the person writing the first version it may take you less time to generalise the lemma than someone else to later as you understand the proof best at the time of writing, so if there are things that become clear can be improved during the proof, I'd say go for it. Mathlib tries to be quite general, but there are a lot of statements in mathlib that nevertheless get added in a more specific form (and then maybe generalised later).</p>",
        "id": 240891708,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1622518882
    },
    {
        "content": "<p>One of the many benefits of formalization is often how easy generalization can be, Lean can find the gaps in a long proof (assuming it is already written in lean) after an assumption is changed far faster than a human. So often generalizing using Lean is just a case of editing an assumption, jumping to the lines that broke and fixing those then being told by lean that the proof works again.</p>",
        "id": 240891838,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1622519064
    },
    {
        "content": "<p>This happens all the time. One thing that can be useful is to briefly outline what you plan to formalise in a thread here, and ask how it looks. (I often try to write new developments by writing definitions and statements first, and leaving all the proofs as <code>sorry</code> --- when you reach that stage is an excellent time to ask for advice.) People can often tell you about useful existing work, or point out cheap generalizations. It's also fine, if someone says \"oh, with bronchial azumaya tapestries this is just a special case of ...\", to say \"err, I'd prefer to keep it simple\". That is, if someone suggests a big generalization that is beyond what you know about / want to know about, it's fine to suggest they do it in a later PR. :-)</p>",
        "id": 240893205,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622521173
    },
    {
        "content": "<p>That's very helpful. If I understand Alex correctly, I can naively follow the (potentially less general) statements in the textbook first, prove what I need to prove, and then see if generalisation breaks the proof. I'm seeing a lot of algebra results formalised from Bourbaki, and it's just a bit intimidating.</p>",
        "id": 240893807,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622521909
    },
    {
        "content": "<p>On the other hand, Lean also teaches us that with the correct generalization, proofs can become genuinely simpler. This is something to keep in mind.</p>",
        "id": 240895834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622524539
    },
    {
        "content": "<p>I've been reading a lot of the definitions on mathlib, and I'm trying to understand the conceptual difference between <code>structure new_struct (S : Type*) [old_class S]</code> and <code>structure new_struct (S : Type*) extends old_class S</code>. What are the technical differences between them, and why would one choose one over the other?</p>",
        "id": 240918690,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622541160
    },
    {
        "content": "<p>The question is whether you want <code>[new_struct X]</code> to give you an instance of <code>[old_class X]</code> or to demand one.</p>",
        "id": 240919100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622541444
    },
    {
        "content": "<p>For example, if I say <code>[ring X]</code> should Lean say \"wait a minute, a ring is an <code>add_comm_group</code> so you need to type <code>[add_comm_group X]</code> first (no) or should it say \"OK I will assume you want X to be an add_comm_group given that you just told us you want it to be a ring\" (yes)</p>",
        "id": 240919242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622541518
    },
    {
        "content": "<p>Conversely, if I want to say that M is a Noetherian R-module then I'm not sure that <code>is_noetherian R M</code> should automatically make R into a ring, because maybe I want it to be a field or a semiring. I'd rather do <code>[field R]</code> first so I have better control over exactly what I want here.</p>",
        "id": 240919482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622541684
    },
    {
        "content": "<p>Let me carefully think about these two examples.</p>",
        "id": 240919591,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622541735
    },
    {
        "content": "<p>One reason to prefer <code>[old_class S]</code> is that if we have both <code>new_struct</code> and <code>new_struct_2</code> which both extend <code>old_class</code>, then there is no mechanism to say that they both extend it in the same way, so you can't have both without introducing a bad ambiguity.</p>",
        "id": 240920189,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622542114
    },
    {
        "content": "<p>A reason to not prefer <code>[old_class S]</code> is that you end up with large numbers of typeclass arguments.</p>",
        "id": 240920248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622542168
    },
    {
        "content": "<p>Ok it took me a while to think about this. Is this understanding correct: When I make a <code>ring X</code>, all I'm doing is use the same constructors for <code>add_comm_group</code>, plus some additional ones. That's why <code>ring</code> extends <code>add_comm_group</code>.  On the other hand, when I'm trying to make a <code>subring X</code>, assuming there's an instance of <code>[ring X]</code>, I just want to show all the closure statements, without having to go through a million constructors under <code>ring</code>. This is why <code>subring X</code> doesn't extend <code>ring X</code>. The property that any <code>R : subring X</code> is also a <code>ring R.carrier</code> is now a separate theorem that's also an instance accessible to the type class system.</p>",
        "id": 240929963,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622548488
    },
    {
        "content": "<p>A separate question is whether one should define an object like the reals directly as a ring or as a Type that has some instances available when we use it as a ring, or a field/group/monoid/etc. In the case of the reals we should probably NOT implement it as a ring. But it would in principle still be permissible to implement it as a ring, and then define some instances to show it can also be used as a field/group/monoid. Is this correct?</p>",
        "id": 240930827,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622549038
    },
    {
        "content": "<p>These decisions about how to set things up aren't somehow intrinsic to the type theory, they are design decisions which have been made by the maths library. I don't know what you mean by \"we should NOT implement [the reals] as a ring\". There is a term of type <code>ring real</code> in the type class inference system.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 240932084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622549766
    },
    {
        "content": "<p>I see. Thinking about it as a design decision makes sense to me. I'm sure with more practice, I'll see the benefit of either in various situations. Thank you!</p>",
        "id": 240936131,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622551829
    },
    {
        "content": "<p>hey @Winston Yin what do you mean by either? I don't quite understand what you are trying to convey lol</p>",
        "id": 240936955,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622552222
    },
    {
        "content": "<p>I'm also confused by the not implement as a ring part</p>",
        "id": 240937086,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622552292
    },
    {
        "content": "<p>Sorry! While trying to clarify myself, I realised the two approaches I described are essentially the same implementation. The difference in my mind was whether <code>real : ring cauchy_seq</code>, where <code>cauchy_seq : Type</code> is separately constructed, or <code>real : Type</code>, and then a <code>ring real</code> is constructed from <code>real</code>. It's just a matter of naming.</p>",
        "id": 240938695,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622553011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin</span> <a href=\"#narrow/stream/113489-new-members/topic/Introducing.20myself.3A.20Winston.20Yin/near/240929963\">said</a>:</p>\n<blockquote>\n<p>Ok it took me a while to think about this. Is this understanding correct: When I make a <code>ring X</code>, all I'm doing is use the same constructors for <code>add_comm_group</code>, plus some additional ones. That's why <code>ring</code> extends <code>add_comm_group</code>.  On the other hand, when I'm trying to make a <code>subring X</code>, assuming there's an instance of <code>[ring X]</code>, I just want to show all the closure statements, without having to go through a million constructors under <code>ring</code>. This is why <code>subring X</code> doesn't extend <code>ring X</code>. The property that any <code>R : subring X</code> is also a <code>ring R.carrier</code> is now a separate theorem that's also an instance accessible to the type class system.</p>\n</blockquote>\n<p>But does ^ this description make sense as a design decision?</p>",
        "id": 240938787,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622553059
    },
    {
        "content": "<p>What you quoted is correct. But I'm not sure it captures the design decision around <code>[foo X]</code> vs <code>extends foo X</code>.</p>",
        "id": 240940477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622553768
    },
    {
        "content": "<p>Think about commutative groups. There are two ways to think about this. You can think of \"commutative group\" as an atom: <code>[comm_group G]</code>. Or you can think of \"commutative\" as an extra property on top of \"group\": <code>[group G] [is_commutative G]</code></p>",
        "id": 240940696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622553869
    },
    {
        "content": "<p>So you can define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_commutative</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 240940823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622553927
    },
    {
        "content": "<p>The difference is that</p>\n<ol>\n<li><code>comm_group G</code> contains data, but <code>is_commutative G</code> does not. This is an important difference in the practice of formalization.</li>\n<li><code>[comm_group G]</code> is a bit shorter to write than <code>[group G] [is_commutative G]</code></li>\n<li><code>comm_group G</code> asks the type class system to search for 1 thing, whereas the other approach needs 2 searches.</li>\n</ol>",
        "id": 240941051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622554028
    },
    {
        "content": "<p>I see! That's very illustrative</p>",
        "id": 240941112,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622554063
    },
    {
        "content": "<p>When invoking <code>[is_commutative G]</code>, the type class system won't automatically include <code>[group G]</code>, even though that's in the definition of <code>is_commutative</code>?</p>",
        "id": 240941241,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622554103
    },
    {
        "content": "<p>What would happen if I write <code>example (G : Type) [is_commutative G] : ... := ...</code></p>",
        "id": 240941391,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622554178
    },
    {
        "content": "<p>you would get an error</p>",
        "id": 240941539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622554236
    },
    {
        "content": "<p>that it can't find <code>[group G]</code></p>",
        "id": 240941561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622554246
    },
    {
        "content": "<p>This is why Scott said earlier that there could be a lot of <code>[...]</code> if one does not use <code>extends</code></p>",
        "id": 240941684,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622554301
    },
    {
        "content": "<p>Thanks for the example!</p>",
        "id": 240941997,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622554405
    },
    {
        "content": "<p>How does one type the lift coercion symbols? ↑↥⇑</p>",
        "id": 241096933,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622597863
    },
    {
        "content": "<p><code>↑</code>: <code>\\u</code>, <code>↥</code>: <code>\\u-|</code>, <code>⇑</code>: <code>\\u=</code> or <code>\\Uparrow</code>.</p>\n<p>The full list of abbreviations is <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/abbreviation/abbreviations.json\">here</a>. Also, if you hover over a symbol in VS Code, the extension should pop up a window with the shortcuts.</p>",
        "id": 241097148,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622598072
    },
    {
        "content": "<p>If I'm sick and tired of writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>in front of every definition and theorem, is there a way to condense all this, say, for the whole namespace?</p>",
        "id": 241113396,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622618429
    },
    {
        "content": "<p>The <code>variable</code> keyword?</p>",
        "id": 241113507,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1622618528
    },
    {
        "content": "<p>Any way to include the <code>[group G]</code> and so on using the <code>variable</code> keyword?</p>",
        "id": 241113729,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622618731
    },
    {
        "content": "<p>Take a look at all the library files you're importing by right clicking on one</p>",
        "id": 241113813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622618796
    },
    {
        "content": "<p>It looks like <code>{G : Type _} {R : Type _} {M : Type _}</code> can be in <code>variable</code>, but the <code>[group G]</code> and so on have to be written explicitly in every def and theorem. Is that correct?</p>",
        "id": 241114118,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622619008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 241114120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622619008
    },
    {
        "content": "<p>Ok let me try this</p>",
        "id": 241114139,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622619026
    },
    {
        "content": "<p>I see. I was missing an \"s\" in variables. Silly!</p>",
        "id": 241114213,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622619096
    },
    {
        "content": "<p>you can also write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>but that style is not very common</p>",
        "id": 241116695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622620856
    },
    {
        "content": "<p>If we have <code>N : submodule R M</code> and a linear map <code>f : M -&gt; M'</code> between <code>module R M</code> and <code>module R M'</code>, are there existing definitions and theorems for the image of N under f as <code>im_f_N : submodule R M'</code> and for the induced linear map <code>f' : N -&gt; im_f_N</code>?</p>",
        "id": 241132291,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622630774
    },
    {
        "content": "<p>I think I found it: <code>submodule.map</code></p>",
        "id": 241133638,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622631785
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.subtype\">docs#submodule.subtype</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.incl\">docs#submodule.incl</a> is the induced map</p>",
        "id": 241134111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622632092
    },
    {
        "content": "<p>There is <code>submodule.module</code>, which turns a submodule into a module. But is there a function or easy way that takes a module and returns itself as a submodule of itself? (Same for groups/subgroups, etc)</p>",
        "id": 241158378,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622644824
    },
    {
        "content": "<p><code>\\top</code> is the \"object viewed as subobject of itself\"</p>",
        "id": 241158545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622644895
    },
    {
        "content": "<p>If lean is confused about which variant of <code>\\top</code> you mean, you can give it a hint <code>(\\top : submodule R M)</code></p>",
        "id": 241158621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622644923
    },
    {
        "content": "<p>Got it. Thanks for the quick reply!</p>",
        "id": 241158673,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622644938
    },
    {
        "content": "<p>Similarly <code>\\bot</code> is the zero submodule/group/algebra/etc</p>",
        "id": 241158725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622644966
    },
    {
        "content": "<p>I'm scratching my head here. I'm trying to state a theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">range_restrict_eq</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f.range_restrict</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Basically, if the codomain of the f has been restricted to be its range, then f and its restriction are equal in value. This is stated for linear maps f. (If such a thing already exists, please let me know.) The written code returns no error. Lean even tells me the goal with all the coe's written out: <code>⇑f x = ↑(⇑(f.range_restrict) x)</code>.</p>\n<p>But when I flip LHS and RHS of the equality (<code>f.range_restrict x = f x</code>), the following error is shown:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">f.range_restrict</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">M</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">f.range</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Errors are shown even when I put in the explicit arrows in the original direction <code>⇑f x = ↑(⇑(f.range_restrict) x)</code> and in the opposite direction <code>↑(⇑(f.range_restrict) x) = ⇑f x</code>. What is going on?</p>",
        "id": 241512518,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622800109
    },
    {
        "content": "<p>Lean is working out the type involved in the equality by looking at the first argument.</p>",
        "id": 241512656,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622800175
    },
    {
        "content": "<p>First argument meaning the whole LHS of equality?</p>",
        "id": 241512698,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622800200
    },
    {
        "content": "<p>As you've written it above, that is <code>M</code>, so when if reached <code>f.range_restrict x</code>, Lean thinks \"that doesn't look right, it's in <code>f.range</code>, not in <code>M</code>\", and goes looking for a coercion to fix the problem, which is successfully finds.</p>",
        "id": 241512758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622800213
    },
    {
        "content": "<p>If you switch the order, Lean decides the equality is an equation in <code>f.range</code>.</p>",
        "id": 241512782,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622800226
    },
    {
        "content": "<p>When it reaches <code>f x</code> it says \"that doesn't look right\", and goes looking unsuccessfully for a coercion from <code>M</code> to <code>f.range</code>.</p>",
        "id": 241512829,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622800256
    },
    {
        "content": "<p>You can fix this by stating the conclusion as <code>(f.range_restrict x : M) = f x</code>.</p>",
        "id": 241512909,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622800297
    },
    {
        "content": "<p>Indeed that fixes it. Let me think like Lean for a moment</p>",
        "id": 241513054,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622800360
    },
    {
        "content": "<p>Even with explicit arrows given, Lean still uses the preceding context to guess the target of the coe. Is that right?</p>",
        "id": 241513167,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622800441
    },
    {
        "content": "<p>Your explanation makes sense, but why <code>⇑f x = ↑(⇑(f.range_restrict) x)</code> fails still doesn't</p>",
        "id": 241513299,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622800518
    },
    {
        "content": "<p>I would guess because pretty printing is not always round-trippable, and Lean can't work out where the arrows are intended to send things. I haven't look closely, however.</p>",
        "id": 241513654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622800715
    },
    {
        "content": "<p>Generally, when copy-and-pasting goals with arrows, you may need to replace arrows with explicit coercions: <code>(X : T)</code>.</p>",
        "id": 241513705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622800749
    },
    {
        "content": "<p>I see. Learned something new!</p>",
        "id": 241513770,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622800801
    },
    {
        "content": "<p>And I think I found the theorem that's identical to the one I stated: <code>linear_map.cod_restrict_apply</code>, though it wasn't obvious before I saw the pretty printed statement</p>",
        "id": 241513866,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622800831
    },
    {
        "content": "<p>Suppose I'm trying to prove <code>example (m n : ℕ) (h : m = n) (f g : ℕ → ℕ) : f (g m) = f (g n) :=</code> using tactics. I can give a one line proof <code>exact congr_arg f (congr_arg g h)</code>, but how can I prove this more naturally in two step, first showing <code>g m = g n</code>, and then showing the ultimate goal?</p>",
        "id": 241525927,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622808625
    },
    {
        "content": "<p>Sorry this sounds quite basic</p>",
        "id": 241525977,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622808659
    },
    {
        "content": "<p><code>by subst h</code>?</p>",
        "id": 241526059,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622808712
    },
    {
        "content": "<p>Are you asking about the <code>have</code> tactic?</p>",
        "id": 241526132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622808739
    },
    {
        "content": "<p>How would I continue this: <code>have congr_arg g h</code> when I've already given it the term I want...</p>",
        "id": 241526214,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622808800
    },
    {
        "content": "<p>My original thought was to rewrite the hypothesis using congr_arg</p>",
        "id": 241526581,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622808989
    },
    {
        "content": "<p>Until my hypothesis looks like my goal</p>",
        "id": 241526620,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622809013
    },
    {
        "content": "<p><code>have := congr_arg g h, exact congr_arg f this</code></p>",
        "id": 241526999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622809232
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 241527081,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622809296
    },
    {
        "content": "<p>Looks like I mixed up the syntax between the <code>have</code> in tactic mode and in term mode</p>",
        "id": 241527232,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622809368
    },
    {
        "content": "<p>I see that <code>is_subgroup</code> is deprecated. What is it replaced by?</p>",
        "id": 241625801,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622884331
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup\">docs#subgroup</a></p>",
        "id": 241625811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622884373
    },
    {
        "content": "<p>So no more implicit coercions into subgroups?</p>",
        "id": 241626228,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622884905
    },
    {
        "content": "<p>You can use <code>is_subgroup</code>, but the community's conclusion on the matter is that <code>subgroup</code> is simply more convenient in practice, in most cases.</p>",
        "id": 241626299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622884959
    },
    {
        "content": "<p>I see. Thanks</p>",
        "id": 241626325,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622884989
    },
    {
        "content": "<p>I guess mathematically the argument could be something like this: when do you ever get a set, and then later on prove that it's a subgroup? Of course this happens, but why does it happen? It happens because the set is actually a kernel or an image or a product or... of subgroups, so actually the myriad constructors of subgroups which we have seem to suffice.</p>",
        "id": 241626393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622885083
    },
    {
        "content": "<p>But for those rare occasions when you discover an entirely novel way to build a subgroup, there's still <code>is_subgroup</code>. :-)</p>",
        "id": 241626755,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622885705
    },
    {
        "content": "<p>(I feel like this should be something like discovering a new small mammal...)</p>",
        "id": 241626761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622885725
    },
    {
        "content": "<p>I'm still practising Lean by defining and proving random things about groups, homomorphisms, and linear maps (often discovering equivalent theorems in mathlib afterwards), but I'm already eager to contribute new definitions and theorems in whichever area I'm more familiar with. One area might be the representation theory of finite groups and semisimple Lie algebras, which I learned from Fulton &amp; Harris. To what extent is this formalised, and would following a non-specialist book like Fulton &amp; Harris be a problem down the road?</p>",
        "id": 241631712,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622892768
    },
    {
        "content": "<p>(Many harder theorems are stated without proof in that book, but I'm just going to focus on the easier bits for now.)</p>",
        "id": 241631785,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622892844
    },
    {
        "content": "<p>I guess I'm pretty lost as to where to begin</p>",
        "id": 241632303,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622893565
    },
    {
        "content": "<p>If I write a bunch of definitions that later turn out to be a special case of something in mathlib, would that still be worth it, and would it be possible to then state them as a special case after the fact?</p>",
        "id": 241632393,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622893689
    },
    {
        "content": "<p>I think it might be best if you started asking questions new threads with appropriate topics</p>",
        "id": 241634965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622897365
    },
    {
        "content": "<p>There's plenty of Fulton-Harris which isn't in Lean and it would be an excellent thing to formalise.</p>",
        "id": 241635028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622897429
    },
    {
        "content": "<p>Sorry, I'm new to Zulip as well.</p>",
        "id": 241635557,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622898130
    },
    {
        "content": "<p>Start a Fulton-Harris thread in #maths and we can talk there. People interested in it might well not see the conversation if it's hidden in this thread.</p>",
        "id": 241636515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622899504
    },
    {
        "content": "<p>I think Fulton and Harris, while a lovely book for humans to learn from, is pretty terrible from a formalisation point of view. :-)</p>\n<p>Formalisation of representation theory will work best if we have a solid base of representation theory of algebras, before groups / finite groups / Lie algebras etc are mentioned. This makes sure we don't end up doing the same things over and over again. Fulton and Harris is somehow exactly backwards in this respect. </p>\n<p>I really Etingof's Representation Theory book (freely available on his website?). I think it's both pretty friendly to humans, and follows a path that would be productive in mathlib.</p>",
        "id": 241665165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622942657
    }
]