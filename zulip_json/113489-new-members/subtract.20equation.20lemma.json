[
    {
        "content": "<p>I have a goal <code> a = b </code> and a hypothesis <code>`c = d </code> is there a lemma that gives <code>a - c = b - d </code>?  Only way I see how to do it without the lemma is to subtract c from a = b, then use conv to rw c on rhs, but this is quite tedious.</p>",
        "id": 159341747,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1551105756
    },
    {
        "content": "<p>I am in some ring if that is relevant</p>",
        "id": 159341757,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1551105776
    },
    {
        "content": "<p><code>congr (congr_arg (-) (hab : a = b)) (hcd : c = d)</code></p>",
        "id": 159341774,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551105801
    },
    {
        "content": "<p>I once tried to get it to mathlib but people didn't like it</p>",
        "id": 159341781,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551105810
    },
    {
        "content": "<p>or you can just <code>have a - c = b - d, by rw [hab, hcd]</code></p>",
        "id": 159341836,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551105843
    },
    {
        "content": "<p>I think that actually we should have more tactics like that, at least for teaching purposes</p>",
        "id": 159341862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551105894
    },
    {
        "content": "<p>If you already have <code>a - c = b - d</code> as a goal, then you can apply the <code>congr</code> tactic which produces <code>a=b</code> and <code>c=d</code> as subgoals (there's also <code>congr'</code>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n</pre></div>",
        "id": 159343083,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1551106876
    },
    {
        "content": "<p>I have this goal: <code> 0 = finset.sum (finset.range n) (λ (x : ℕ), digit b r x * ↑b ^ (n - x) - digit b r x * ↑b ^ (n - 1 - x + 1)) </code> Im having trouble proving this, as the subtraction lemma I need require <code>x ≤ n</code> which is only true in the finset.range n, can I \"enter\" the sum somehow and prove it there, given hypothesis <code>x ≤ n</code> or similar .</p>",
        "id": 159348749,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1551110801
    },
    {
        "content": "<p>the lemma is, nat.add_sub_assoc</p>",
        "id": 159348782,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1551110828
    },
    {
        "content": "<p>The closest I have gotten is here: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">digit</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">digit</span> <span class=\"n\">b</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))))</span>\n</pre></div>\n\n\n<p>which is what requires nat.add_sub_assoc</p>",
        "id": 159348951,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1551110961
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_zero</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 159349056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551111025
    },
    {
        "content": "<p>You could use <a href=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L124\" target=\"_blank\" title=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L124\">https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L124</a> if you were using my bigop proto-library. I don't know about finset</p>",
        "id": 159349094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551111070
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 159349124,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1551111101
    },
    {
        "content": "<p>We really need a mode in <code>conv</code> to enter a sum (whether finset or bigop), automatically gaining the hypothesis saying that you are in the domain.</p>",
        "id": 159372370,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551129140
    },
    {
        "content": "<p>That would be really cool</p>",
        "id": 159372445,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551129218
    }
]