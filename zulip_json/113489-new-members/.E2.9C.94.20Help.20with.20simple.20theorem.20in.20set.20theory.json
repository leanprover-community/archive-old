[
    {
        "content": "<p>Dear all, I am stuck trying to provide a witness for the following simple theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- imports all the Lean tactics</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"c1\">-- Everything will be a subset of `X`</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"c1\">-- A,B,C,D,E are subsets of `X`</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"c1\">-- x,y,z are elements of `X` or, more precisely, terms of type `X`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h₂</span> <span class=\"n\">h_w</span> <span class=\"n\">h_h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- TODO: how to provide a witness ???</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks in advance -</p>",
        "id": 281842221,
        "sender_full_name": "Richard Evans",
        "timestamp": 1652197060
    },
    {
        "content": "<p>Using only the tactics you have, <code>apply Exists.intro</code> or <code>split</code>; but <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#use\">tactic#use</a> is often convenient for beginners</p>",
        "id": 281842490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652197134
    },
    {
        "content": "<p>this theorem requires choice, right?</p>",
        "id": 281842626,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652197179
    },
    {
        "content": "<p>Ah, so perhaps the question is not \"<em>how</em> to provide a witness\" but \"<em>what</em> should I provide as my witness\"</p>",
        "id": 281842842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652197271
    },
    {
        "content": "<p>Yes, sorry, my question is indeed how to provide a witness.</p>",
        "id": 281842916,
        "sender_full_name": "Richard Evans",
        "timestamp": 1652197309
    },
    {
        "content": "<p>in Lean, LEM is equivalent to choice, so you may want to take a look at something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_not\">docs#not_not</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#contrapose\">tactic#contrapose</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists.some\">docs#Exists.some</a> + <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists.some_spec\">docs#Exists.some_spec</a></p>",
        "id": 281843007,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652197334
    },
    {
        "content": "<p>thanks!</p>",
        "id": 281843067,
        "sender_full_name": "Richard Evans",
        "timestamp": 1652197363
    },
    {
        "content": "<p>Just for information's sake (for later, once you can do the exercise yourself), <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#push_neg\">tactic#push_neg</a> is useful in these situations.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281843990,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652197683
    },
    {
        "content": "<p>some tactics have versions that do <code>push_neg</code> for you, too, like contrapose! and by_contra'.</p>",
        "id": 281844102,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652197732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"494725\">Richard Evans</span> has marked this topic as resolved.</p>",
        "id": 281844974,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652198045
    }
]