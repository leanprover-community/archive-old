[
    {
        "content": "<p>What does it mean when I use <code>library_search</code> or  <code>library_search!</code> I get the error message <code>timeout</code>? (not really sure if I have ever got a <code>timeout</code> when using the first)<br>\nIn particular, what is the difference between <code>timeout</code> and <code>failed</code> when doing such search?</p>",
        "id": 244053270,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624776844
    },
    {
        "content": "<p>Can you post a reproducible MWE?</p>",
        "id": 244063150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624794133
    },
    {
        "content": "<p>I don't have one for \"failed\" and one for \"timeout\" at hand. I will post here if I get them.</p>",
        "id": 244105521,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624861158
    },
    {
        "content": "<p>Failed I've seen a lot, I think this means \"I can't find it\". But timeout sounds like it might be a bug, not sure</p>",
        "id": 244106915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624862701
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This example gives a timeout.</p>",
        "id": 244124091,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624874924
    },
    {
        "content": "<p>Not reproducible. It doesn't timeout for me <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> <a href=\"user_uploads/3121/Z-q6uNFKVHy9OH2LWDWf5Z2M/Screenshot-from-2021-06-28-17.19.21.png\">Screenshot-from-2021-06-28-17.19.21.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/Z-q6uNFKVHy9OH2LWDWf5Z2M/Screenshot-from-2021-06-28-17.19.21.png\" title=\"Screenshot-from-2021-06-28-17.19.21.png\"><img src=\"user_uploads/3121/Z-q6uNFKVHy9OH2LWDWf5Z2M/Screenshot-from-2021-06-28-17.19.21.png\"></a></div>",
        "id": 244124888,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624875541
    },
    {
        "content": "<p>What are the imports? <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 244124891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624875543
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span> <span class=\"c1\">-- Try this: exact smul_mul_assoc k x y</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244125003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624875613
    },
    {
        "content": "<p>Thanks! It is a little weird. It does not time out for me now either (maybe because I changed something in the file before this).</p>",
        "id": 244125587,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624876147
    },
    {
        "content": "<p>I mean, anecdotally I've also had it time out, but I just take that to mean <code>library_search</code> won't find it</p>",
        "id": 244125616,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624876179
    },
    {
        "content": "<p>If I change the code to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the search will fail.<br>\nWhy could this happen?</p>",
        "id": 244125872,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624876350
    },
    {
        "content": "<p><code>exact smul_mul_assoc k x y,</code> will also fail.</p>",
        "id": 244125962,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624876416
    },
    {
        "content": "<p>That code above gives alpha two multiplcations and no proof that they're the same, so probably the example isn't even true.</p>",
        "id": 244127620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624877636
    },
    {
        "content": "<p>Playing around with the infoview in this state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span>\n<span class=\"n\">k</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>seems to indicate that both the smul and the mul are coming from <code>_inst_1</code> rather than <code>_inst_2</code> so the reason you can't close the goal is that the <code>_inst_1</code> mul isn't known to be associative.</p>",
        "id": 244127765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624877741
    },
    {
        "content": "<p>I thought [ring \\a] just extends [has_mul \\a].</p>",
        "id": 244132328,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624880709
    },
    {
        "content": "<p>And the fact that it extends it means exactly that you shouldn't put it in again.</p>",
        "id": 244132445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624880783
    },
    {
        "content": "<p>Ring uses old_structure_cmd iirc so it provides all the fields separately, including the data, so Kevin's point stands.</p>",
        "id": 244132446,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624880786
    },
    {
        "content": "<p>Yes.<br>\nIf I declared <code>[has_mul a]</code> or <code>[ring a]</code> before. But later I want <code>a</code> to be a ring or a field. Is there a way that does extend a previous declaration?</p>",
        "id": 244133247,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624881292
    },
    {
        "content": "<p>Not really, just put the earlier stuff in a section</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">ring_stuff</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">a_lemma_about_rings</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">ring_stuff</span>\n<span class=\"kn\">section</span> <span class=\"n\">field_stuff</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">a_lemma_about_fields</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">field_stuff</span>\n</code></pre></div>",
        "id": 244133542,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1624881503
    },
    {
        "content": "<p>I am proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⊗</span> <span class=\"n\">B</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⊗</span> <span class=\"n\">B</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">library_search</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"c1\">--apply inv_eq_left_inv this,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The quoted-out line will close the next goal, but if I use library search, it will time out.<br>\nI am wondering why <code>library_search</code> fails to work.</p>",
        "id": 244411930,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625054680
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with imports and <code>variables</code>?</p>",
        "id": 244413053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625055252
    },
    {
        "content": "<p>The time taken by library_search greatly depends on how many things you've imported</p>",
        "id": 244413082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625055269
    },
    {
        "content": "<p>Since it only searches imported files</p>",
        "id": 244413091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625055273
    },
    {
        "content": "<p><code>inv_eq_left_inv</code> is a lemma defined in my current file.</p>",
        "id": 244415128,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625056286
    },
    {
        "content": "<p>I will try to extract a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 244415192,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625056317
    },
    {
        "content": "<p>OK..Well...lib search even doesn't work for <code>example (h : A ⬝ B = 1) :  B =  A⁻¹ :=</code>, but it works for <code>example (h : A ⬝ B = 1) :  A⁻¹ = B :=</code></p>",
        "id": 244418258,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625057664
    },
    {
        "content": "<p>Again, without the precise types of <code>A</code> and <code>B</code> there's very little chance anyone will be able to help you</p>",
        "id": 244418800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625057931
    },
    {
        "content": "<p>Learn how to ask good questions Alex.</p>",
        "id": 244422493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625059380
    },
    {
        "content": "<p>It might be a bore but you'll develop some techniques which will eventually enable you to answer some of your own questions by yourself, when writing the mwe reveals the issue (this happens)</p>",
        "id": 244422567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625059416
    },
    {
        "content": "<p>Why does library search fail for the first example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">int.one</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">int.one</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 245612877,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626018017
    },
    {
        "content": "<p>because <code>library_search</code> works up to syntactic equality and <code>mul_one a</code> doesn't say syntactically what the example says (it just says it definitionally, which is why the proof works)</p>",
        "id": 245613074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626018365
    },
    {
        "content": "<p>Does <code>by library_search!</code> work?</p>",
        "id": 245613086,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1626018403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  Yes, that does work!</p>",
        "id": 245613383,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626018866
    },
    {
        "content": "<p>Is <code>library_search!</code> always at least powerful as  (i.e. more powerful than) <code>library_search</code>?</p>",
        "id": 245613470,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626018981
    },
    {
        "content": "<p>Kindof, it searches including definitionally equal things, which means it takes longer. In practice I've found that it can sometimes time out when the normal library search doesn't so I normally run the regular library search then if that fails try adding the !.</p>",
        "id": 245613702,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1626019318
    }
]