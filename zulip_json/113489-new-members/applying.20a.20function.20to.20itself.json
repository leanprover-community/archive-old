[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 199635704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591198639
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">g</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">foo</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 199635714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591198644
    },
    {
        "content": "<p>how do I make it work?</p>",
        "id": 199635735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591198653
    },
    {
        "content": "<p>I want to apply a function to itself</p>",
        "id": 199635752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591198660
    },
    {
        "content": "<p>why does <code>foo</code> have no equational lemma?</p>",
        "id": 199635786,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591198677
    },
    {
        "content": "<p>I am not familiar with <code>meta</code> definitions in Lean, but <code>meta def foo : Type := foo → foo</code> seems to be a hack-y attempt at an untyped identity function.</p>",
        "id": 199956257,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591419157
    },
    {
        "content": "<p>You cannot apply a <em>strictly</em> one argument function to itself, because that necessarily would lead to a type mismatch. That is, you would have <code>α → b</code> and <code>α = α → b</code>, so <code>α</code> would have to be a fix-point <code>((... → b) → b) → b</code>, which is not possible, because <em>terms themselves</em> can't be infinite.</p>",
        "id": 199956358,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591419374
    },
    {
        "content": "<p>You can, however, (kind-of) apply an identify function to itself.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">id&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p><code>id</code> is a function of <em>two</em> arguments, the first of which is implicit, so Lean will try to figure it out for us if it can.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">id&#39;</span> <span class=\"n\">id&#39;</span>\n</code></pre></div>\n\n\n<p>Lean will figure out that the type <code>α</code> for the leftmost <code>id'</code> is <code>Π {α : Type*}, α → α</code>. You can make implicit arguments explicit using <code>@</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">id&#39;</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">@</span><span class=\"n\">id&#39;</span>\n</code></pre></div>",
        "id": 199956524,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591419740
    },
    {
        "content": "<p>Another example of interest:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">id&#39;</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">id&#39;</span>\n</code></pre></div>",
        "id": 199956539,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591419820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 200420159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591797926
    },
    {
        "content": "<p>hi</p>",
        "id": 200420273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591797965
    },
    {
        "content": "<p>it's not going to work</p>",
        "id": 200420298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591797976
    },
    {
        "content": "<p>why not</p>",
        "id": 200420356,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591797999
    },
    {
        "content": "<p>because this would make the typechecker diverge</p>",
        "id": 200420376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798011
    },
    {
        "content": "<p>what does diverge mean?</p>",
        "id": 200420407,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798027
    },
    {
        "content": "<p>not stop</p>",
        "id": 200420418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798032
    },
    {
        "content": "<p>recursive meta definitions use macros to indicate the recursion, they aren't defeq to their unfolding</p>",
        "id": 200420475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798070
    },
    {
        "content": "<p>but can we prove <code>foo = [foo._main]</code>?</p>",
        "id": 200420565,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798101
    },
    {
        "content": "<p>I'm not even sure the concept makes sense since the kernel never sees meta defs</p>",
        "id": 200420575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798105
    },
    {
        "content": "<p>what does that even mean? In meta land everything is provable</p>",
        "id": 200420637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798143
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">foo : Type</span>\n<span class=\"cm\">foo._main : Type</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">meta def foo : Type :=</span>\n<span class=\"cm\">foo._main</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo</span><span class=\"bp\">._</span><span class=\"n\">main</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">meta def foo._main : Type :=</span>\n<span class=\"cm\">id_rhs Type ([foo._main] → [foo._main])</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 200420667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798169
    },
    {
        "content": "<p>what is the <code>[]</code> in <code>[foo._main]</code>?</p>",
        "id": 200420771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798208
    },
    {
        "content": "<p>a macro</p>",
        "id": 200420785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798212
    },
    {
        "content": "<p>I just thought it meant \"you dunfolded too much\"</p>",
        "id": 200420838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591798246
    },
    {
        "content": "<p>how is <code>[]</code> defined?</p>",
        "id": 200420866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798262
    },
    {
        "content": "<p>You are thinking of the projection macro</p>",
        "id": 200420870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798262
    },
    {
        "content": "<p>It is <code>expr.macro</code></p>",
        "id": 200420890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798273
    },
    {
        "content": "<p>it is a separate constructor from <code>pi</code>, <code>lam</code>, <code>var</code>,<code>mvar</code> and everything else</p>",
        "id": 200420924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798294
    },
    {
        "content": "<p>Here's a projection macro:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n<span class=\"c1\">-- @[reducible]</span>\n<span class=\"c1\">-- def and.left : ∀ {a b : Prop}, a ∧ b → a :=</span>\n<span class=\"c1\">-- λ (a b : Prop) (c : a ∧ b), [and.left c]</span>\n</code></pre></div>",
        "id": 200421040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798339
    },
    {
        "content": "<p>how do I produce a term of type <code>[\\a]</code>?</p>",
        "id": 200421046,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798342
    },
    {
        "content": "<p>You can't</p>",
        "id": 200421050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798346
    },
    {
        "content": "<p>seriously, this is super annoying</p>",
        "id": 200421078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798358
    },
    {
        "content": "<p>alright sorry</p>",
        "id": 200421124,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798379
    },
    {
        "content": "<p>but <code>expr.macro</code> uses an opaque type <code>macro_def</code> that lean code can't create</p>",
        "id": 200421125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798379
    },
    {
        "content": "<p>no, not you, macros are annoying</p>",
        "id": 200421140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798392
    },
    {
        "content": "<p>can I use unchecked_cast?</p>",
        "id": 200421168,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798409
    },
    {
        "content": "<p>I think that will work</p>",
        "id": 200421190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798420
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">unchecked_cast</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 200421192,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798421
    },
    {
        "content": "<p>but would it \"work\" like I want it to?</p>",
        "id": 200421214,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798435
    },
    {
        "content": "<p>hm, best think of a better test</p>",
        "id": 200421296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798460
    },
    {
        "content": "<p>maybe use the Y combinator so that it halts</p>",
        "id": 200421320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798471
    },
    {
        "content": "<p>You can at least use <code>expr.macro_def_name</code> to see what kind of macro you are looking at</p>",
        "id": 200421494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591798558
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid type ascription, term has type</span>\n<span class=\"cm\">  ?m_2 = ?m_2</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Y f = f (Y f)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 200421671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798643
    },
    {
        "content": "<p>oh no</p>",
        "id": 200421675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798644
    },
    {
        "content": "<p>is it true that |A| = |A^A| iff |A| = 1?</p>",
        "id": 200422140,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798878
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@[pattern, reducible]</span>\n<span class=\"cm\">def has_add.add : Π {α : Type u} [c : has_add α], α → α → α :=</span>\n<span class=\"cm\">λ (α : Type u) [c : has_add α], [has_add.add c]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>Is that also a macro?</p>",
        "id": 200422168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591798889
    },
    {
        "content": "<p>If |A|&gt;1 then |A^A|&gt;=|2^A|&gt;|A|</p>",
        "id": 200422226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591798914
    },
    {
        "content": "<p>so we have proved that <code>foo \\equiv unit</code></p>",
        "id": 200422351,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798965
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">cantor</span> <span class=\"o\">:=</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 200422419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591798996
    },
    {
        "content": "<p>yay I broke Lean</p>",
        "id": 200422440,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799006
    },
    {
        "content": "<p>You only meta-broke it -- that's allowed</p>",
        "id": 200422467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591799024
    },
    {
        "content": "<p>Reid proved false the other day in meta land -- it wasn't hard</p>",
        "id": 200422546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591799045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how about this as a test: can you prove <code>false</code> using <code>unchecked_cast</code> and <code>cantor</code>?</p>",
        "id": 200422835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799183
    },
    {
        "content": "<p>you can prove false using just <code>unchecked_cast</code></p>",
        "id": 200422861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799199
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">cantor</span> <span class=\"o\">:=</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">meta</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"bp\">_</span> <span class=\"n\">cantor</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"k\">in</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 200422875,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799205
    },
    {
        "content": "<p>i.e. something like this</p>",
        "id": 200422880,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799210
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">unchecked_cast</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 200422902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799221
    },
    {
        "content": "<p>i.e. can you translate cantor's paradox</p>",
        "id": 200422927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799232
    },
    {
        "content": "<p>yes</p>",
        "id": 200422941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799236
    },
    {
        "content": "<p>you need to use <code>unchecked_cast</code> to prove the side condition on <code>cantor_injective</code> though</p>",
        "id": 200423103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799296
    },
    {
        "content": "<p>so it's not very impressive</p>",
        "id": 200423119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799302
    },
    {
        "content": "<p>Without the theorem that says that <code>cantor = (cantor → Prop)</code>, you won't get anywhere in the proof</p>",
        "id": 200423407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">cantor</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">unchecked_cast</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">unchecked_cast</span> <span class=\"n\">B</span>\n<span class=\"err\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 200423425,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799433
    },
    {
        "content": "<p>you mean this is <code>unchecked_cast H</code>?</p>",
        "id": 200423433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799438
    },
    {
        "content": "<p>It's <code>unchecked_cast</code> of anything you want</p>",
        "id": 200423539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799484
    },
    {
        "content": "<p>I think you are ascribing more meaning to this than is warranted</p>",
        "id": 200423563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799500
    },
    {
        "content": "<p>do we even \"know\" that <code>cantor = (cantor \\to Prop)</code>?</p>",
        "id": 200423584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799509
    },
    {
        "content": "<p>oh right, in meta land everything is true</p>",
        "id": 200423658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799524
    },
    {
        "content": "<p>In meta land, it's not a complete free for all, there is a semantics but it is more like the semantics of Haskell</p>",
        "id": 200423696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799540
    },
    {
        "content": "<p>however <code>unchecked_cast</code> breaks even that</p>",
        "id": 200423732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799553
    },
    {
        "content": "<p>oh no this doesn't terminate:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">true</span> <span class=\"n\">false</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 200423770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799569
    },
    {
        "content": "<p><code>unchecked_cast</code> is implemented as a loop IIRC</p>",
        "id": 200423812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799584
    },
    {
        "content": "<p>oh nvm</p>",
        "id": 200423845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799599
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℤ</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 200423864,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799611
    },
    {
        "content": "<p>try it for larger numbers :)</p>",
        "id": 200423918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799633
    },
    {
        "content": "<p>guess the outputs:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">empty</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">empty</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 200424006,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591799658
    },
    {
        "content": "<p>One of these is not like the others:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">34</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"c1\">-- [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383,</span>\n<span class=\"c1\">--  32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607,</span>\n<span class=\"c1\">--  16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823,</span>\n<span class=\"c1\">--  -1, 4294967295, 8589934591]</span>\n</code></pre></div>",
        "id": 200424327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799786
    },
    {
        "content": "<p>Oh haha the reason <code>#reduce @unchecked_cast true false trivial</code> doesn't terminate is for the very silly reason that strings are involved</p>",
        "id": 200424676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591799929
    },
    {
        "content": "<p>this works fine</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">unchecked_cast&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">undefined_core</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast&#39;</span> <span class=\"n\">true</span> <span class=\"n\">false</span> <span class=\"n\">trivial</span>\n<span class=\"c1\">-- eq.rec true.intro (undefined_core {data := list.nil char})</span>\n</code></pre></div>",
        "id": 200424908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591800014
    },
    {
        "content": "<p>why does it being <code>\"undefined\"</code> make it not terminate?</p>",
        "id": 200425013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591800057
    },
    {
        "content": "<p>It reminds me that we have something for <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  who is already hunting down ideas for Lean 3.17.0: fix <a href=\"https://github.com/leanprover-community/doc-gen/blob/master/src/export_json.lean#L284-L287\">https://github.com/leanprover-community/doc-gen/blob/master/src/export_json.lean#L284-L287</a>. I had to use the same <code>itersplit</code> trick in the sphere eversion infrastructure.</p>",
        "id": 200425022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591800062
    },
    {
        "content": "<p>it terminates but only after about O(size of unicode * length of string * very large #reduce constant) steps</p>",
        "id": 200425154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591800117
    },
    {
        "content": "<p>I'm not sure if these two are related, but this applies for both of them: please file a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> at the lean bug tracker!</p>",
        "id": 200425230,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591800135
    },
    {
        "content": "<p>wait, is there a lean feature suggestion in this thread?</p>",
        "id": 200425332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591800174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/applying.20a.20function.20to.20itself/near/200424327\">said</a>:</p>\n<blockquote>\n<p>One of these is not like the others:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">34</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"c1\">-- [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383,</span>\n<span class=\"c1\">--  32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607,</span>\n<span class=\"c1\">--  16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823,</span>\n<span class=\"c1\">--  -1, 4294967295, 8589934591]</span>\n</code></pre></div>\n\n\n</blockquote>\n<p><a href=\"https://oeis.org/search?q=0%2C+1%2C+3%2C+7%2C+15%2C+31%2C+63%2C+127%2C+255%2C+511%2C+1023%2C+2047%2C+4095%2C+8191%2C+16383%2C+32767%2C+65535%2C+131071%2C+262143%2C+524287%2C+1048575%2C+2097151%2C+4194303%2C+8388607%2C++16777215%2C+33554431%2C+67108863%2C+134217727%2C+268435455%2C+536870911%2C+1073741823%2C++-1%2C+4294967295%2C+8589934591&amp;sort=&amp;language=english&amp;go=Search\">https://oeis.org/search?q=0%2C+1%2C+3%2C+7%2C+15%2C+31%2C+63%2C+127%2C+255%2C+511%2C+1023%2C+2047%2C+4095%2C+8191%2C+16383%2C+32767%2C+65535%2C+131071%2C+262143%2C+524287%2C+1048575%2C+2097151%2C+4194303%2C+8388607%2C++16777215%2C+33554431%2C+67108863%2C+134217727%2C+268435455%2C+536870911%2C+1073741823%2C++-1%2C+4294967295%2C+8589934591&amp;sort=&amp;language=english&amp;go=Search</a> <br>\n:(</p>",
        "id": 200425339,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591800177
    },
    {
        "content": "<p>When I've got my number theorists hat on and I find a non-OEIS sequence I add it! But I'm not sure they'll like this one...</p>",
        "id": 200426327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591800580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/applying.20a.20function.20to.20itself/near/200424006\">said</a>:</p>\n<blockquote>\n<p>guess the outputs:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">empty</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">empty</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n</blockquote>\n<p><a href=\"http://bash.org/?10958\">http://bash.org/?10958</a> (aah, the old days)</p>",
        "id": 200426465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591800630
    }
]