[
    {
        "content": "<p>What is the function of <code>alias</code> here? Where can I look up such commands? I didn't find it in the Lean Reference Manual.<br>\n<a href=\"/user_uploads/3121/Xs28KB8NbrR-szW_-B1pCh8F/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Xs28KB8NbrR-szW_-B1pCh8F/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Xs28KB8NbrR-szW_-B1pCh8F/image.png\"></a></div>",
        "id": 240172417,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621941646
    },
    {
        "content": "<p>Where are you seeing this? I don't think I've ever heard of <code>alias</code>. If you're learning about Lean 3 (the best place to start) you should be reading <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a></p>",
        "id": 240172475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621941705
    },
    {
        "content": "<p>The point of it seems to be that <code>le_trans</code> is used in lots of places but dot notation is cool so we also wanted a version where we could do <code>hab.trans hbc</code> but it looks like we didn't want to remove the gazillion uses of le_trans in mathlib.</p>",
        "id": 240172657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621941836
    },
    {
        "content": "<p><code>alias A &lt;- B</code> seems to define B to be A.</p>",
        "id": 240172722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621941859
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#alias\">https://leanprover-community.github.io/mathlib_docs/commands.html#alias</a></p>",
        "id": 240173039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621942076
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#alias\">command#alias</a> for short)</p>",
        "id": 240198912,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1621954148
    },
    {
        "content": "<p>When applying <code>alias</code> to a lemma that is tagged with <code>to_additive</code>, Is there a way for <code>alias</code> to automatically generate the <code>to_additive</code> name-alias as well?</p>",
        "id": 240341139,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622042222
    },
    {
        "content": "<p>e.g. what is below does <em>not</em> work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_le_of_le_of_le_one</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_left'</span> <span class=\"n\">ha</span> <span class=\"n\">b</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>     <span class=\"o\">:</span> <span class=\"n\">mul_one</span> <span class=\"n\">b</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>     <span class=\"o\">:</span> <span class=\"n\">hbc</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"n\">alias</span> <span class=\"n\">mul_le_of_le_of_le_one</span> <span class=\"bp\">←</span> <span class=\"n\">mul_le_one'</span>\n<span class=\"k\">#check</span> <span class=\"n\">add_nonpos'</span>\n<span class=\"c1\">-- unknown identifier 'add_nonpos''</span>\n</code></pre></div>",
        "id": 240341359,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622042292
    },
    {
        "content": "<p>Does <code>attribute [to_additive] mul_le_one'</code> work?</p>",
        "id": 240342560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622042694
    },
    {
        "content": "<p>It does!!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">mul_le_of_le_of_le_one</span> <span class=\"bp\">←</span> <span class=\"n\">mul_le_one'</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">mul_le_one'</span>\n<span class=\"k\">#check</span> <span class=\"n\">add_nonpos'</span>\n<span class=\"c1\">-- theorem add_nonpos' : ∀ {α : Type u_1} [_inst_1 : add_zero_class α] [_inst_2 : preorder α]</span>\n<span class=\"c1\">-- [_inst_3 : covariant_class α α has_add.add has_le.le] {a b c : α}, b ≤ c → a ≤ 0 → b + a ≤ c :=</span>\n<span class=\"c1\">-- add_le_of_le_of_nonpos</span>\n</code></pre></div>",
        "id": 240343032,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622042863
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 240343050,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622042867
    },
    {
        "content": "<p>The downside of that approach is that the additive version doesn't get the <code>alias</code> docstring</p>",
        "id": 240344009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622043204
    },
    {
        "content": "<p>Ok, for the moment, none of these lemmas actually had a doc-string to begin with...</p>",
        "id": 240344419,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622043361
    },
    {
        "content": "<p>If you use <code>alias</code> they get a docstring that says \"this is an alias of ...\"</p>",
        "id": 240350547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622045800
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 240350607,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622045829
    }
]