[
    {
        "content": "<p>Why definitions <code>term₂</code> and <code>term₃</code> don't work? I don't understand the \"nested occurrence [...]\" error messages. Is there any work around I can do to fix them?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Language.constants</span> <span class=\"o\">:=</span> <span class=\"n\">L.functions</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term₁</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term₁</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">term₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term₁</span>\n\n<span class=\"c1\">-- nested occurrence contains variables that are not parameters</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term₂</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term₂</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">term₂</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term₂</span>\n\n<span class=\"c1\">-- nested occurrence lives in universe '0' but must live in resultant universe '1'</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term₃</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term₃</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">term₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">args.length</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">):</span> <span class=\"n\">term₃</span>\n</code></pre></div>",
        "id": 266981538,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641412036
    },
    {
        "content": "<p>I suggest using <code>args : fin l → term</code>.</p>",
        "id": 266985179,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641413700
    },
    {
        "content": "<p>Thanks for the suggestion.</p>",
        "id": 266991805,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641417160
    },
    {
        "content": "<p>I would love to hear an explanation of why definitions 2 and 3 don't work tho.</p>",
        "id": 266991833,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641417183
    },
    {
        "content": "<p>Check out <a href=\"#narrow/stream/113488-general/topic/nested.20inductive.20type.20error/near/211030307\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/nested.20inductive.20type.20error/near/211030307</a></p>",
        "id": 266992197,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641417388
    },
    {
        "content": "<p>Thanks Alex <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 266992673,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641417640
    }
]