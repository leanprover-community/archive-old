[
    {
        "content": "<p>Is there any lemma(s) that helps to close the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 244811733,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625327036
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">I</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.sum_ite_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>with <code>i = j</code> instead of <code>j = i</code></p>",
        "id": 244813016,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1625329033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> has marked this topic as resolved.</p>",
        "id": 246140229,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626375634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> has marked this topic as unresolved.</p>",
        "id": 246140237,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626375636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> has marked this topic as resolved.</p>",
        "id": 246692399,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626856449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> has marked this topic as unresolved.</p>",
        "id": 246692410,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626856456
    },
    {
        "content": "<p>If I want to \"reindex\" the terms of a sum like the following e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is <code>#check finset.sum_map</code> the lemma I am supposed to use for showing this?</p>",
        "id": 246692615,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626856606
    },
    {
        "content": "<p>Can you show that (finset.univ : finset F).image ((-) i) = finset.univ?</p>",
        "id": 246693260,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626857057
    },
    {
        "content": "<p>Do you mean to use <code>finset.sum_map</code> is the right way?</p>",
        "id": 246693422,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626857170
    },
    {
        "content": "<p><del>I would use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_congr\">docs#finset.sum_congr</a></del> (no, it's not strong enough)</p>",
        "id": 246693486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626857218
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_map\">docs#finset.sum_map</a></p>",
        "id": 246693504,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626857232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/fin_sum.2Ffin_prod/near/246693260\">said</a>:</p>\n<blockquote>\n<p>Can you show that (finset.univ : finset F).image ((-) i) = finset.univ?</p>\n</blockquote>\n<p>It is true. I will try the proof.</p>",
        "id": 246693840,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626857487
    },
    {
        "content": "<p>I could imagine a specialisation of sum_map which deals with a sum over a permutation of a fintype</p>",
        "id": 246693896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626857524
    },
    {
        "content": "<p>Ie proves that for a permutation sigma of a base fintype X, sum of f(x) equals sum of f(sigma(X))</p>",
        "id": 246693980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626857591
    },
    {
        "content": "<p>Do we have that?</p>",
        "id": 246694013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626857627
    },
    {
        "content": "<p>If you used finsum instead of all this constructivist nonsense you wouldn't even need the fintype :-)</p>",
        "id": 246694088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626857674
    },
    {
        "content": "<p>Yes, it's <del>docs#equiv.sum_congr I think?</del> somewhere I can't find</p>",
        "id": 246699694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626861705
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.sum_equiv\">docs#fintype.sum_equiv</a></p>",
        "id": 246699803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626861770
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fintype.sum_equiv</span> <span class=\"o\">((</span><span class=\"n\">equiv.add_left</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">equiv.neg</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246700005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626861911
    },
    {
        "content": "<p>We could do with an <code>equiv.sub_left</code> and <code>equiv.sub_right</code> to complement <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.add_left\">docs#equiv.add_left</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.add_right\">docs#equiv.add_right</a>, which would make the <code>simp</code> just <code>refl</code></p>",
        "id": 246700051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626861950
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/8385\">#8385</a></p>",
        "id": 246702068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626863553
    }
]