[
    {
        "content": "<p>I want to use the gcd in a general unique factorization domain and prove e.g. what the prime factorization of <code>gcd a b</code> looks like in terms of the the prime factorizations of <code>a</code> and <code>b</code>. So (but I'm probably misunderstanding something) I don't think I can \"just ask for a <code>gcd_domain</code>\". I want both a <code>gcd_domain</code> and a <code>unique_factorization_doamin</code>, but I can't <code>variables [unique_factorization_domain α]</code> without <code>integral_domain</code>...</p>",
        "id": 194552593,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1587227165
    },
    {
        "content": "<p>But there is no gcd in a general UFD. It's only defined up to units.</p>",
        "id": 194553686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587228771
    },
    {
        "content": "<p>The whole purpose of <code>normalisation domain</code>s is to give a fixed notion of a gcd.</p>",
        "id": 194553749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587228853
    },
    {
        "content": "<p>So I guess the first question is, <em>in math</em>, do you want to treat a general UFD?</p>",
        "id": 194553779,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587228948
    },
    {
        "content": "<p>If so then I think you can't use one of these funny <code>normalization_domain</code>/<code>gcd_domain</code>s.</p>",
        "id": 194553819,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587228972
    },
    {
        "content": "<p>Then the second question will be how to say what you want to say using mathlib's classes.</p>",
        "id": 194553908,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587229100
    },
    {
        "content": "<p>Hmm, I think that on a general UFD you can give a structure of a normalization domain. You put the equivalence relation \"our ratio is a unit\" on all the irreducible elements of the UFD and then randomly choose an element in each equivalence class, and then extend multiplicatively.</p>",
        "id": 194554029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587229309
    },
    {
        "content": "<p>Although you'll have to be careful not to make it too random, because <code>normalization domain int</code> is already an instance in mathlib, where they chose the positive element of each equivalence class <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>p</mi><mo separator=\"true\">,</mo><mo>−</mo><mi>p</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{p,-p\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord mathdefault\">p</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 194554109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587229429
    },
    {
        "content": "<p>Oh I see, I forgot you had these irreducibles to work with.</p>",
        "id": 194554166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587229491
    },
    {
        "content": "<p>I'm not sure this construction is in mathlib though (I don't know this part of the library, I'm just browsing through it). The def <code>unique_factorization_domain.to_gcd_domain</code> assumes a normalization domain.</p>",
        "id": 194554238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587229569
    },
    {
        "content": "<p>Ultimately what I wanted to prove was that in the <code>gaussian_int</code>s, if the product of 2 relatively prime elements is a k'th power then each element is a k'th power. I was thinking it would be possible to do the normalization in <code>gaussian_int</code>s like Kevin describes.</p>",
        "id": 194554326,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1587229705
    },
    {
        "content": "<p>But this statement isn't true.</p>",
        "id": 194554331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587229724
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>9</mn><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">9i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord\">9</span><span class=\"mord mathdefault\">i</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>4</mn><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">-4i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">4</span><span class=\"mord mathdefault\">i</span></span></span></span> are not squares, but their product is.</p>",
        "id": 194554338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587229742
    },
    {
        "content": "<p>OK, up to units! :)</p>",
        "id": 194554392,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1587229805
    },
    {
        "content": "<p>If you only care up to units then hopefully you don't need any of that normalisation domain nonsense.</p>",
        "id": 194554398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587229823
    },
    {
        "content": "<p>I thought all the \"normalization domain nonsense\" was exactly there to make it easy to state things \"up to units\"!</p>",
        "id": 194554467,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1587229943
    },
    {
        "content": "<p>On the contrary, my impression is that it's exactly there because the computer scientists thought it was a good idea, and no self-respecting mathematician would touch it.</p>",
        "id": 194554480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587229988
    },
    {
        "content": "<p><code>unique_factorization_domain.lean</code> should contain everything you need.</p>",
        "id": 194554488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587230005
    },
    {
        "content": "<p><code>associates R</code> is the type of equivalence classes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi mathvariant=\"normal\">/</mi><msup><mi>R</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">R/R^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 194554494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587230041
    },
    {
        "content": "<p>and there is a predicate <code>irreducible</code> on them, and <code>factor_set</code> is the type of (finite) multisets of elements of <code>associates R</code> plus a random extra term corresponding to the factors of 0</p>",
        "id": 194554553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587230127
    },
    {
        "content": "<p>and <code>factors' r</code> is the multiset of prime factors of r if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">r\\not=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> (multiset just means set but you're allowed repeated elements)</p>",
        "id": 194554606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587230185
    },
    {
        "content": "<p>If you think about how you want to formalise things, then you want a factorization of a non-zero thing to be exactly a collection of primes-up-to-units (with repeats allowed) whose product is the thing, and this is exactly what <code>factors</code> and <code>factors'</code> are giving you, and all the lemmas you want are proved about these things.</p>",
        "id": 194554693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587230331
    },
    {
        "content": "<p>It sure would be easier if we didn't have all these crazy negative and imaginary numbers</p>",
        "id": 194554714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587230386
    },
    {
        "content": "<p>I think that's what the computer scientists are thinking. You also have to learn to see through the computer science lattice notation, e.g. <code>theorem prod_le {a b : factor_set α} : a.prod ≤ b.prod ↔ a ≤ b</code> means that if the product of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> divides the product of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> then the multiset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is a subset of the multiset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">b_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and <code>lemma sup_mul_inf (a b : associates α) : (a ⊔ b) * (a ⊓ b) = a * b</code> means that <code>gcd(a,b)*lcm(a,b)=a*b</code>, where equality is up to units (a and b are not elements of R, they're elements of <code>associates R</code>)</p>",
        "id": 194554783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587230507
    },
    {
        "content": "<p>OK, thanks Kevin! I'll give all of this another think.</p>",
        "id": 194554830,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1587230539
    },
    {
        "content": "<p>If you only want to work up to units then <code>associates R</code> is the type you're looking for, and there are a ton of lemmas about it.</p>",
        "id": 194554838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587230562
    },
    {
        "content": "<p>Yep, have been staring at this for a while now... I was thinking using <code>to_gcd_domain</code> would get me a bit more functionality, but I can certainly survive without it.</p>",
        "id": 194554938,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1587230729
    },
    {
        "content": "<p>The only thing it will give you is a non-canonical but fixed splitting of the map <code>R -&gt; associates R</code>, but given that the statement you want is only true up to units I'm not sure you're buying much with it.</p>",
        "id": 194555004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587230803
    },
    {
        "content": "<p><code>gcd_domain</code> really needs to be refactored at some point I think, to unlink it from <code>normalization_domain</code>.</p>",
        "id": 194626136,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587345038
    }
]