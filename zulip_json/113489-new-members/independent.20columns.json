[
    {
        "content": "<p>Is there something like <code>set</code> which gives all families rather than sets? Context is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n  <span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n  <span class=\"o\">]</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">linear_independent</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>-- which I don't know is correct yet, I'm trying to say a type of \"all collections of indices whose columns in A are linearly independent\", but I see <code>linearly_independent</code> is telling me to start with families rather than sets if I can, so is there a thing that given <code>fin 7</code> will give me all of those maps directly, or am I doing that the way that's expected? (Including whether transposing is the way I'm supposed to pull off columns?)</p>",
        "id": 220657390,
        "sender_full_name": "Julian Berman",
        "timestamp": 1608610680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> The code compiles, right?<br>\nI think you want to replace <code>(fin 3 → ℚ)</code> with <code>ℚ</code>, because you presumably want the columns to be linearly independent over the rationals. Otherwise, this seems like the way to go, to me.</p>",
        "id": 220661538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608617067
    },
    {
        "content": "<p>ah of course -- thanks. It does indeed compile, I just wasn't sure (besides whether it was idiomatic) if that was the right type (e.g. I couldn't yet prove that column 7 isn't in any set despite finding <code>linear_independent.ne_zero</code> -- probably I'm close though, will give it another shot in the morning, thanks for the confirmation!.</p>",
        "id": 220662313,
        "sender_full_name": "Julian Berman",
        "timestamp": 1608618267
    },
    {
        "content": "<p>OK managed to get a little bit closer but I think my issue is struggling a bit to prove things about a subtype (or perhaps I'm confused about how to pull an element out of the set there)...</p>\n<p>I'm not sure how to proceed from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">i.val</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">linear_independent.ne_zero</span> <span class=\"n\">i.property</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    2 goals</span>\n<span class=\"cm\">    i : I,</span>\n<span class=\"cm\">    h : (λ (i_1 : ↥(i.val)), A.transpose ↑i_1) ?m_1 ≠ 0</span>\n<span class=\"cm\">    ⊢ 6 ∉ i.val</span>\n\n<span class=\"cm\">    i : I</span>\n<span class=\"cm\">    ⊢ ↥(i.val)</span>\n<span class=\"cm\">    -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I need to basically pass <code>6</code> into <code>h</code> right? Is that what <code>specialize</code> is for?</p>",
        "id": 220695565,
        "sender_full_name": "Julian Berman",
        "timestamp": 1608648191
    },
    {
        "content": "<p>The main source of trouble here is a bad implicit argument on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.ne_zero\">docs#linear_independent.ne_zero</a>.</p>",
        "id": 220700702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608650805
    },
    {
        "content": "<p>You should start with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">linear_independent</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A.transpose</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent.ne_zero'</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.ne_zero</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">i.val</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">i.property.ne_zero'</span> <span class=\"o\">(⟨</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">i.val</span><span class=\"o\">),</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>And then open a PR fixing that broken binder.</p>",
        "id": 220700754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608650831
    },
    {
        "content": "<p>The difference between <code>linear_independent.ne_zero'</code> and <code>linear_independent.ne_zero</code> is the <code>i</code> argument is explicit.</p>",
        "id": 220700830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608650882
    },
    {
        "content": "<p>Aha... thank you! Will do.</p>",
        "id": 220702044,
        "sender_full_name": "Julian Berman",
        "timestamp": 1608651528
    }
]