[
    {
        "content": "<p>Hi all. Is there a \"standard\" way of using strong induction on <code>pnat</code>? I mean, something like <code>nat.strong_induction_on</code> or <code>nat.case_strong_induction_on</code> but for <code>n : pnat</code> (so starting with <code>n = 1</code>). Of course having <code>n : pnat</code> I can write it as <code>n = k + 1</code> with <code>k : nat</code> and then apply one of the theorems to <code>k</code>, but this is rather inelegant (for example for <code>nat.case_strong_induction_on</code> I have to prove the proposition for <code>k + 2</code> and the notation can become quite messy).</p>",
        "id": 213653636,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602943696
    },
    {
        "content": "<p>The \"standard\" way is to write a lemma</p>",
        "id": 213653805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602943951
    },
    {
        "content": "<p>No problem in doing that, but I just wanted to check that it wasn't already in marhlib.</p>",
        "id": 213653914,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602944132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> not sure if you started already - I think I have it proved somewhere</p>",
        "id": 213666456,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1602961926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> You mean it as already in mathlib? I wasn't able to find it.By the way it should be just a  few lines, I think.</p>",
        "id": 213690388,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1603000244
    },
    {
        "content": "<p>No, I meant I proved it locally - <a href=\"https://gist.github.com/Ruben-VandeVelde/ef797b8fb8d8f9bf51dd5218c118ccee\">https://gist.github.com/Ruben-VandeVelde/ef797b8fb8d8f9bf51dd5218c118ccee</a></p>\n<p>Probably plenty of room to golf it, still</p>",
        "id": 213707595,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1603029446
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pnat.strong_induction_on</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">IH</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">pnat.strong_induction_on</span> <span class=\"n\">a</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">coe</span><span class=\"o\">⟩],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213707832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603029841
    },
    {
        "content": "<p>better yet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span> <span class=\"n\">measure_wf</span> <span class=\"n\">coe</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pnat.strong_induction_on</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">IH</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">pnat.strong_induction_on</span> <span class=\"n\">a</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213707888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603029912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thank you! If you don't mind I will put your proof in my next PR.</p>",
        "id": 213757326,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1603097286
    },
    {
        "content": "<p>We still need a Zulip button that turns code blocks into mathlib PRs</p>",
        "id": 213757416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603097371
    },
    {
        "content": "<p>We need one which turns informal discussions into PRs :-)</p>",
        "id": 213757972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603097747
    }
]