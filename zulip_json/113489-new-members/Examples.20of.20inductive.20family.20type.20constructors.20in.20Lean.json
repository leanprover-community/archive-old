[
    {
        "content": "<p>I am trying to develop an intuition of how inductive families type constructors work in lean. I was wondering where I can find more examples of inductive type families in Lean standard library? So far, I've discovered <code>eq</code> and <code>heq</code>.</p>",
        "id": 219304033,
        "sender_full_name": "Rajiv",
        "timestamp": 1607498481
    },
    {
        "content": "<p>the most important ones are probably <code>eq</code> and <code>acc</code> (well founded recursion).<br>\nthere's an introduction to well founded recursion in lean <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#well-founded-recursion-and-induction\">here</a> and you can find the definition <a href=\"https://github.com/leanprover-community/lean/blob/8ae4f717da4d6d4eb0c64f1808aaa9e8890ee0bb/library/init/wf.lean#L11\">here</a>. a dependently-typed<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductive-families\">vector</a> is also often used as an example (although rarely used in practice), and <a href=\"https://github.com/leanprover-community/mathlib/blob/1f309c52c472a6cd37e41c580a470033e63d4720/src/data/list/perm.lean#L24\">inductive predicates</a> come up a lot in general.</p>",
        "id": 219312194,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607505412
    },
    {
        "content": "<p>Thanks Marc for the pointers. I'll check it out.</p>",
        "id": 219323885,
        "sender_full_name": "Rajiv",
        "timestamp": 1607513263
    }
]