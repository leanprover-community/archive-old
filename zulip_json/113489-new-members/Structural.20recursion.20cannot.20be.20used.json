[
    {
        "content": "<p>I'm trying to do some programming in Lean 4, i.e., no proofs yet. Being a Haskell programmer I tried following :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">termfold</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">fv</span> <span class=\"n\">ff</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Term.var</span> <span class=\"n\">v</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">fv</span> <span class=\"n\">v</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Term.fn</span> <span class=\"n\">f</span> <span class=\"n\">ts</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">ff</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">termfold</span> <span class=\"n\">fv</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"n\">ts</span>\n</code></pre></div>\n<p>The error message include <em>structural recursion cannot be used</em> and <em>well founded recursion has not been implemented yet</em>.</p>\n<p>Is there another way that I can write my definition of <code>termfold</code>? Or some additional information that I can provide to explain to Lean 4 that the recursion is well-founded?</p>\n<p>I've looked here on Zulip and on GitHub for an answer since I assume this must be a well-known problem, but being ignorant about dependent types  I may not have been able to understand the relevance of the material that I found.<br>\n(I did find a 6 month old <a href=\"https://github.com/leanprover/lean4/issues/262\">issue</a> that seems related, but no clues as how to address the problem.)</p>\n<p>Any hints greatly appreciated! And apologies in advance for my ignorance.</p>",
        "id": 246847632,
        "sender_full_name": "Bjarte M. Østvold",
        "timestamp": 1626961165
    },
    {
        "content": "<p>Use <code>partial def</code></p>",
        "id": 246847668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626961192
    },
    {
        "content": "<p>Also use <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream</p>",
        "id": 246847739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626961213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"427062\">Bjarte M. Østvold</span> <a href=\"#narrow/stream/113489-new-members/topic/Structural.20recursion.20cannot.20be.20used/near/246847632\">said</a>:</p>\n<blockquote>\n<p>Any hints greatly appreciated! And apologies in advance for my ignorance.</p>\n</blockquote>\n<p>Beginner questions are welcome both here in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> (mostly Lean 3) and also in the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream (all Lean 4), no need to apologise.</p>",
        "id": 246847871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626961270
    },
    {
        "content": "<p><code>partial def</code> is basically the haskell button of lean</p>",
        "id": 246848040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626961359
    },
    {
        "content": "<p>Oh, you will run into an issue though: <code>partial def</code> doesn't want to compromise the soundness of the system, so it will require that the target type is inhabited, and here <code>α</code> isn't. You can fix that by adding a typeclass argument <code>[Inhabited α]</code></p>",
        "id": 246848292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626961460
    },
    {
        "content": "<p>Alternatively, if you don't care about compromising soundness you can use <code>unsafe def</code> instead and then lean will stop complaining</p>",
        "id": 246848374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626961504
    },
    {
        "content": "<p>What's the lean3 analogy here? From what you're saying I understand that <code>unsafe</code> is like <code>meta</code>, is that right? And then, is there a lean3 analogous to <code>partial</code>? (I've never used lean4)</p>",
        "id": 246850572,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1626962441
    },
    {
        "content": "<p>Thanks for the rapid and kind answers! In case there is someone wondering here is the relevant line with the two required changes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">termfold</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Having learned about <code>partial def</code> I do have some questions about how to prove results about such definitions, but I'll reserve that for a future posting in the #lean4 stream. Thanks again!</p>",
        "id": 246856284,
        "sender_full_name": "Bjarte M. Østvold",
        "timestamp": 1626964876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329243\">Horatiu Cheval</span> <a href=\"#narrow/stream/113489-new-members/topic/Structural.20recursion.20cannot.20be.20used/near/246850572\">said</a>:</p>\n<blockquote>\n<p>What's the lean3 analogy here? From what you're saying I understand that <code>unsafe</code> is like <code>meta</code>, is that right? And then, is there a lean3 analogous to <code>partial</code>? (I've never used lean4)</p>\n</blockquote>\n<p>In lean 3, <code>meta</code> plays the role of both <code>unsafe</code> and <code>partial</code>. <code>unsafe</code> lets you call external functions, do unsound things, and break the type system, while <code>partial</code> lets you do unguarded recursion</p>",
        "id": 246863263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626967871
    }
]