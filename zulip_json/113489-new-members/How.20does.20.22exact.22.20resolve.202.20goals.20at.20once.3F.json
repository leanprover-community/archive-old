[
    {
        "content": "<p>I am working on a proof where I have two subgoals at one point.  I apply <code>exact</code> and both are resolved.  How does that work?  My prior understanding was that tactics only operate on one goal at a time.   Here is the example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxr</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">pxr.left</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"c1\">-- two open goals at this point</span>\n      <span class=\"n\">exact</span> <span class=\"n\">px</span><span class=\"o\">,</span> <span class=\"c1\">-- no goals here</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>where the open goals are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">pxr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">px</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">pxr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">px</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 218039909,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606426430
    },
    {
        "content": "<p>Do you know what <code>?m_1</code> means?</p>",
        "id": 218039965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606426488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I guess <code>?m_1</code> is any member of set <code>α</code>.   <code>p ?m_1</code> is...I don't know, maybe it is a way of denotating any proposition <code>p y</code> where <code>y</code> is in <code>α</code>.  I suppose <code>⊢ p ?m_1</code> means prove any proposition on all instances of <code>α</code>.   I don't what a goal of<code>⊢ α</code> represents, because <code>α</code> is not a proposition.  Apparently the proof<code>p x</code> is being applied to both goals in the set, so I suppose if I have a set of goals and a proof, then the rule is that all goals which unify with the <code>exact</code> expression are eliminated.  So maybe what I'm seeing here is that <code>p x</code> unifies with <code>p ?m_1</code> and it unfies with <code>α</code>.  These are all guesses, hence the question.</p>",
        "id": 218044933,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606433109
    },
    {
        "content": "<p>?m_1 is a metavariable, i.e. Lean doesn't know what it is or even what its name is. It knows its type is alpha though, because <code>p ?m_1</code> makes sense. That explains the second goal -- Lean is asking for a term of type alpha, and then will instantiate ?m_1 in the first goal with that term. But <code>exact px</code> on the first goal makes Lean figure out that ?m_1 must have been x, so it can now close the second goal as well.</p>",
        "id": 218045470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606433907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20does.20.22exact.22.20resolve.202.20goals.20at.20once.3F/near/218044933\">said</a>:</p>\n<blockquote>\n<p>I don't what a goal of<code>⊢ α</code> represents, because <code>α</code> is not a proposition.  </p>\n</blockquote>\n<p>It's important to understand that, to first principle, anything can be a goal, not just terms <code>p : Prop</code>. That means providing a term <code>a : α</code> where <code>α : Type*</code> can solve a goal of <code>⊢ α</code>. Could you explain why you thought that only propositions can be goals?</p>",
        "id": 218045912,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606434614
    },
    {
        "content": "<p>It's probably true that if you're in tactic mode and your goal isn't a prop then you're doing it wrong -- these things are certainly quite rare. It's also probably true that if your goal contains metavariables then you're doing it wrong, or you're at least being a bit cheeky.</p>",
        "id": 218048842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606438837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  in the context of theorem proving, i.e. expressions like <code>example</code>, <code>lemma</code> and <code>theorem</code>, I assumed that what came after <code>⊢</code> would be a <code>Prop</code>.  If instead the state of Lean is a stack of goals and anything to be constructed can apply to the right of <code>⊢ </code>, then I can see how <code>⊢ α</code> would make sense.</p>\n<p>I incorrectly assumed that only one goal at a time could be resolved by a tactic, because initially in filling out the proof I might have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but in the above example, when I fill out the first <code>sorry</code> with the <code>exact</code>, the second <code>sorry</code> becomes redundant.</p>",
        "id": 218048862,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606438875
    }
]