[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α_set</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finset</span> <span class=\"n\">α_set</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>declares that p is a finite type and α_set is a finite set.<br>\nHow can I declare a finite type and a finite set of cardinal <code>n</code> for both?</p>",
        "id": 242047355,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623236444
    },
    {
        "content": "<p>No, <code>finset</code> is not a class, the code you wrote about finsets does not make sense (although it probably parses)</p>",
        "id": 242048109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623236963
    },
    {
        "content": "<p>What you have written is \"let alpha_set be a type and let _inst_2 (or whatever lean called it because you didn't give it a name) be a finite subset of alpha_set. And then lean attempts to put this finite set into the type class system which will then ignore it because finset isn't a class</p>",
        "id": 242048328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623237072
    },
    {
        "content": "<p>There are no such thing as sets in type theory, there are only subsets of a type. At least that's my mental model of sets in Lean</p>",
        "id": 242048469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623237160
    },
    {
        "content": "<p>If you want to say that p has size n you can just ask that <code>fintype.card p = n</code></p>",
        "id": 242048720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623237319
    },
    {
        "content": "<p>Yes, the third line of my code is problematic, I will fix it., although this is not the problem I am concerned here.</p>",
        "id": 242048750,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623237355
    },
    {
        "content": "<p>Once you've fixed it the answer is probably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card\">docs#finset.card</a></p>",
        "id": 242048830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623237389
    },
    {
        "content": "<p>Although if you are not interested in constructivism then I might be able to interest you in nat.card which takes the size of pretty much anything and returns a natural, which is 0 if the input is infinite (rather like 1/X returning 0 if X=0)</p>",
        "id": 242049073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623237542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Declaration/near/242048720\">said</a>:</p>\n<blockquote>\n<p>If you want to say that p has size n you can just ask that <code>fintype.card p = n</code></p>\n</blockquote>\n<p>I don't quite understand how to do this. Could you please give me a full code?</p>",
        "id": 242049115,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623237570
    },
    {
        "content": "<p>I'm afraid I'm on my phone. What happens if you just add that as a hypothesis?</p>",
        "id": 242049204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623237607
    },
    {
        "content": "<p>It's the first time I've been out the house in months -- I'm just coming back from my second Covid jab!</p>",
        "id": 242049262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623237647
    },
    {
        "content": "<p>It is easy to add it as a hypothesis, but what I really want to do is to construct/declare a fintype or finset of cardinal n instead of giving that as a hypothesis.</p>",
        "id": 242049549,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623237779
    },
    {
        "content": "<p>I don't understand the difference</p>",
        "id": 242049767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623237864
    },
    {
        "content": "<p>Maybe Alex wants a bundled \"finset-of-cardinality-n\"</p>",
        "id": 242049912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623237943
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">x.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 242049993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623237966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Declaration/near/242049912\">said</a>:</p>\n<blockquote>\n<p>Maybe Alex wants a bundled \"finset-of-cardinality-n\"</p>\n</blockquote>\n<p>Exactly</p>",
        "id": 242050010,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623237974
    },
    {
        "content": "<p>But mathematically this is exactly the same data</p>",
        "id": 242050041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623237985
    },
    {
        "content": "<p>You can package it up like Johan suggests but at the end of the day you'll just unpack it again :-)</p>",
        "id": 242050099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623238013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> My guess is that you'll find the unbundled approach easier to work with in Lean</p>",
        "id": 242050119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623238020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Declaration/near/242050119\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> My guess is that you'll find the unbundled approach easier to work with in Lean</p>\n</blockquote>\n<p>uhmm, how do you exactly do this?</p>",
        "id": 242050169,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623238055
    },
    {
        "content": "<p>Just follow Kevin's advice, and add the hypothesis</p>",
        "id": 242050274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623238102
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">x.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- vs</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 242050363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623238156
    },
    {
        "content": "<p>Am I able to declare <code>p</code> to be a fintype of cardinal n after <code>variables {p q : Type*}</code> or <code>variables</code> before any statement of an example or a theorem?</p>",
        "id": 242050791,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623238379
    },
    {
        "content": "<p>Bundling and unbundling are words which are used to express how lean stores mathematical ideas. For example, for a group homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>→</mo><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">G\\to H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> you could either store it \"unbundled\" as two things, a function <code>f : G → H</code> and a proof <code>hf : ∀ a b, f(a*b)=f(a)*f(b)</code> or \"bundled\" as <code>f : G →* H</code> where <code>f</code> is now one object, a term of a structure which contains both the map and the proof all in one. Whether you should bundle a mathematical idea or not is a delicate question and not a mathematical one!</p>",
        "id": 242050840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623238407
    },
    {
        "content": "<p>We're suggesting that to store a finite type of size n you're better off with the unbundled approach, so you will have a term without a name of type <code>fintype p</code> and which will be dealt with by the typeclass system, and then a hypothesis <code>hp : card p = n</code> which you'll carry around. You don't need to bundle because the type class inference system will handle the finiteness statements for you.</p>",
        "id": 242051059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623238519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/Declaration/near/242050791\">said</a>:</p>\n<blockquote>\n<p>Am I able to declare <code>p</code> to be a fintype of cardinal n after <code>variables {p q : Type*}</code> or <code>variables</code> before any statement of an example or a theorem?</p>\n</blockquote>\n<p>I am still curious about this question.</p>",
        "id": 242052535,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623239331
    },
    {
        "content": "<p>I don't understand the question</p>",
        "id": 242052746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623239430
    },
    {
        "content": "<p>Just add the hypotheses you want where you want them? Is that the answer?</p>",
        "id": 242052814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623239466
    },
    {
        "content": "<p>Yeah, I understand your suggestion.</p>",
        "id": 242053698,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623239962
    }
]