[
    {
        "content": "<p>What does the revert tactic exactly do?</p>",
        "id": 163735781,
        "sender_full_name": "bulut",
        "timestamp": 1555681163
    },
    {
        "content": "<p>The opposite of <code>intro</code>.</p>",
        "id": 163735986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555681331
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hPQ</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163735991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555681337
    },
    {
        "content": "<p>So if the goal is to prove P, revert hQ (where hQ has type Q) changes the goal to Q-&gt;P?</p>",
        "id": 163736368,
        "sender_full_name": "bulut",
        "timestamp": 1555681713
    },
    {
        "content": "<p>Yup.</p>",
        "id": 163736472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555681830
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 163736517,
        "sender_full_name": "bulut",
        "timestamp": 1555681917
    },
    {
        "content": "<p>You can check that like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hQ</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The nice thing about Lean is that if you can precisely formalise a question (like yours above) then you don't even need to ask it, you can just ask Lean :D</p>",
        "id": 163736519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555681918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think this is leaving out a couple of things. If you know nothing about what <code>revert</code> does, you can try <code>revert (1 + 2)</code> see the complaint (actually, right now, Lean will crash) and be puzzled about why that's a wrong argument. Or worse, you call <code>revert</code> see nothing happened and not know where to go from there.</p>",
        "id": 163738350,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555683542
    },
    {
        "content": "<p>If you put your cursor on <code>revert</code> in VS code, I think it will show you its documentation though so that should be helpful.</p>",
        "id": 163738396,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555683590
    },
    {
        "content": "<p>revert (1+2) -&gt;</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nP Q : Prop,\nhQ : Q\n⊢ has_add tactic_state\n</pre></div>",
        "id": 163738587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555683747
    }
]