[
    {
        "content": "<p>I noticed that performance becomes a problem with long calc chains. Can someone give me advice on what patterns work well for performance (in vscode):</p>\n<p>i.e. What is the scope of effort that the logic engine has to perform on each change to the text?</p>\n<p>What does the engine re-process on each change?</p>\n<ul>\n<li>the file and all imports (whether or not they are used)</li>\n<li>the entire logic chain (all imports and dependencies that are used)</li>\n<li>everything in the changed file</li>\n<li>only the theorem that has changed in the changed file</li>\n<li>only the statements at and after the change in the changed file</li>\n</ul>\n<p>I suspect it is the 3rd or 4th case, but it would be helpful to know the best way to organize files.</p>\n<p>Specifically, my question is:</p>\n<ul>\n<li>Should I move complex theorems to their own files and make sure not to import them unless they are required?</li>\n<li>Is it enough to keep complex logic in its own theorem (even in the current file)?</li>\n</ul>",
        "id": 207263059,
        "sender_full_name": "Rick Love",
        "timestamp": 1597759543
    },
    {
        "content": "<p>It is the 5th option, everything at and below (and possibly one statement above) the point of change</p>",
        "id": 207264769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597760362
    },
    {
        "content": "<p>In particular, all changes to a proof or tactic script require re-running the whole thing, which means that long proofs can get slow to interact with</p>",
        "id": 207264999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597760454
    },
    {
        "content": "<p>I would suggest trying to keep proof size down to maybe 50 lines max by extracting lemmas. If those lemmas are independently useful, even better</p>",
        "id": 207265081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597760498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Performance.20in.20Large.20Projects/near/207264999\">said</a>:</p>\n<blockquote>\n<p>In particular, all changes to a proof or tactic script require re-running the whole thing, which means that long proofs can get slow to interact with</p>\n</blockquote>\n<p>So that sounds like the 4th option (the entire current theorem - when working on a tactic script), which would include the statements above the current.</p>\n<p>I guess I meant by statement was a single tactic being used (not a whole theorem or lemma), maybe I'm using the wrong terms.</p>",
        "id": 207265554,
        "sender_full_name": "Rick Love",
        "timestamp": 1597760729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Performance.20in.20Large.20Projects/near/207265081\">said</a>:</p>\n<blockquote>\n<p>I would suggest trying to keep proof size down to maybe 50 lines max by extracting lemmas. If those lemmas are independently useful, even better</p>\n</blockquote>\n<p>Yeah, that makes sense. The instance where it occurred was more a prototype and was not organized well.</p>",
        "id": 207265759,
        "sender_full_name": "Rick Love",
        "timestamp": 1597760822
    },
    {
        "content": "<p>\"Statement\" here means something starting with a command keyword like <code>theorem</code> or <code>def</code></p>",
        "id": 207265856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597760871
    },
    {
        "content": "<p>the top level objects in a lean file</p>",
        "id": 207265866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597760879
    },
    {
        "content": "<p>in particular I don't mean tactic calls in a begin end block</p>",
        "id": 207265934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597760900
    },
    {
        "content": "<p>Is there a specific term to refer to a single \"tactic call\"?</p>",
        "id": 207266037,
        "sender_full_name": "Rick Love",
        "timestamp": 1597760951
    },
    {
        "content": "<p>a tactic line, tactic call, tactic</p>",
        "id": 207266088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597760979
    },
    {
        "content": "<p>the structure of such things is not very line based in general so you have to be a bit more specific</p>",
        "id": 207266185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597761009
    },
    {
        "content": "<p>Also it's possible you misused the term \"calc block\", which is used to describe a sequence of equality proofs starting with the <code>calc</code> keyword</p>",
        "id": 207266709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597761246
    },
    {
        "content": "<p>What about \"expression\", when talking about other code that usually refers to an atomic unit of code, but I don't know if that has another meaning.</p>",
        "id": 207266739,
        "sender_full_name": "Rick Love",
        "timestamp": 1597761265
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/2a8d7f3e1e79646b2cc914c477f060123d871a25/src/category_theory/equivalence.lean#L126-L134\">a <code>calc</code> block</a></p>",
        "id": 207266813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597761298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Performance.20in.20Large.20Projects/near/207266709\">said</a>:</p>\n<blockquote>\n<p>Also it's possible you misused the term \"calc block\", which is used to describe a sequence of equality proofs starting with the <code>calc</code> keyword</p>\n</blockquote>\n<p>No, I was talking about the \"calc\" keyword specifically in that case. It was around 20 lines with around 100 tactics and got slow.</p>",
        "id": 207266940,
        "sender_full_name": "Rick Love",
        "timestamp": 1597761360
    },
    {
        "content": "<p>\"Expression\" has a specific meaning in lean. An expression is any term used for denoting an element of the type theory, for example <code>x</code> or <code>2+2</code> or <code>have foo, from bar, baz</code> or <code>show foo, from bar</code> or <code>begin tactics... end</code></p>",
        "id": 207266941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597761362
    },
    {
        "content": "<p>it's pretty odd to have a calc proof that is significantly expensive unless you are calling <code>omega</code> on every line or something, or the block is massive</p>",
        "id": 207267037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597761403
    },
    {
        "content": "<p>how do you manage to get 100 tactics on 20 lines unless you have some unusual (or shall we say \"compact\") formatting</p>",
        "id": 207267126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597761455
    },
    {
        "content": "<p>how many of those lines start with <code>... =</code>?</p>",
        "id": 207267162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597761479
    },
    {
        "content": "<p>anyway, a proof getting slow is lean's way of telling you that your proof is too large and should be split into smaller parts</p>",
        "id": 207267346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597761549
    },
    {
        "content": "<p>I think because of proof irrelevance, Lean can start checking a proof before it has validated its dependencies? So splitting a proof can result in more parallelism than you might think</p>",
        "id": 207381041,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597825046
    },
    {
        "content": "<p>Well, technically you can inspect the value of a proof from another proof, and of course <code>#print</code> will also look at proof terms, but this is basically joining on a future and is relatively rare in the process</p>",
        "id": 207381148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597825156
    },
    {
        "content": "<p>so for the most part it is just running the definitions and theorem statements on one thread and then spawning asynchronous proof elaboration tasks</p>",
        "id": 207381237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597825209
    }
]