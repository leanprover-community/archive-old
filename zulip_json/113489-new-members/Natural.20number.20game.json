[
    {
        "content": "<p>Hi :) I just finished the natural number game, it was really fun! The levels are well designed and explanations are sufficient to understand the material but not spoil the solutions.</p>\n<p>A few questions</p>\n<ul>\n<li>I noticed in Proposition World, many of the levels are very similar to Function world. I assume this is to instill the \"moral\" that propositions and functions can be thought of as similar? Level 7 proposition world still says \"Function world\" though, and there are few more typos. Should I submit a PR for these, or is this intended?</li>\n<li>I'm not much of a mathematician but I can probably help out on the more programming aspects, are the issues in <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/issues\">https://github.com/ImperialCollegeLondon/natural_number_game/issues</a> good to start with if I wanted to help out?</li>\n<li>I'm a little fuzzy on the concept of \"fixed\" variables (as introduced in Adv Mult 4/4). If there's a declaration <code>a: mynat</code>, does that mean <code>a</code> is fixed in this context? If I'm doing an induction (for example) on <code>b</code> in <code>a+b&gt;a</code> and my inductive hypothesis ends up being <code>a+k&gt;a</code>, are both <code>a</code> and <code>k</code> the same \"kinds\" of variables in this context? Fixed? It seems a bit weird because I should be able to substitute anything I want for <code>a</code> in the inductive hypothesis and still have the proof be correct, but of course I cannot substitute <code>succ k</code> for <code>k</code>. Are there other kinds of variables? For example, in <code>\\exists z.z \\geq 0</code>, is z thought of as \"fixed\"?</li>\n</ul>",
        "id": 232857906,
        "sender_full_name": "Rei",
        "timestamp": 1617336706
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 232859472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617338374
    },
    {
        "content": "<p>Oh yeah proposition world and function world are a kind of joke way of teaching mathematicians about the Curry Howard correspondence. I did it like that because at the time I was convinced that mathematicians would better understand intro and apply in the context of functions and I thought that this was quite an amusing way to teach it. Since then I've discovered that mathematicians are just fine with the whole intro apply thing applied directly to propositions and proofs (see for example workshop 1 of <a href=\"https://xenaproject.wordpress.com/2021/01/24/formalising-mathematics-workshop-1/\">my recent course</a> where I just dive straight in) so if I were to write the game again then probably function world would not be in there. I would happily look at PRs, maybe it's about time I added less than world</p>",
        "id": 232879388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617355915
    },
    {
        "content": "<p>As a mathematician with no logic background, I can confirm that Kevin's joke landed, and \"amusing\" is an understatement.</p>\n<p>I was wondering, however, if it is worth avoiding explicit spoilers about that. At least I personally really appreciated sitting back and enjoying the NNG show.</p>",
        "id": 232884094,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1617359303
    },
    {
        "content": "<p>In Power World, I noticed that the first two (at least) can be solved using only \"refl,\". I don't think that should be a valid strategy for either, as they are not literally equal.</p>",
        "id": 232911663,
        "sender_full_name": "n Simplex Pachinko",
        "timestamp": 1617377006
    },
    {
        "content": "<p>They are definitionally equal though, and that's what refl tests for, and I can't change the behaviour of lean there. I guess I could make a bunch of stuff irreducible, but in practice the one big change to lean I did make (disabling refl after rw) has caused some confusion when people come from NNG to proper lean so I'm reluctant to make any more changes such as breaking refl</p>",
        "id": 232932382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617386842
    },
    {
        "content": "<p>Can I ask a question about the Natural number game here? It looks like if I close a proof by \"simp\", the game does not acknowledge that the proof is complete. For example in Power World, Level 2, there is a very short proof like \"rw pow_succ, rw mul_zero, simp,\" but all I get is \"no goals\". However, if instead of \"simp\" I say \"refl\" it says \"Proof complete\". What am I missing here?</p>",
        "id": 249781858,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1629235952
    },
    {
        "content": "<p>Weird. Just <code>simp [pow_succ]</code> also shows \"Proof complete\"</p>",
        "id": 249782166,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629236125
    },
    {
        "content": "<p>it's just a bug (an annoying one tbf); don't worry about it!</p>",
        "id": 249782167,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629236127
    },
    {
        "content": "<p>it can happen with <code>refl</code> and with other things too, it's very unpredictable in my experience</p>",
        "id": 249782188,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629236144
    },
    {
        "content": "<p>Ok thanks :) It's just confusing that even if I complete all levels, the world stays blue in the Main Menu (because some of the levels were not \"really\" completed). I get the feeling that I missed something. Now that I know, I won't worry</p>",
        "id": 249782376,
        "sender_full_name": "Jukka Kohonen",
        "timestamp": 1629236248
    },
    {
        "content": "<p>Just hit enter a few times</p>",
        "id": 249820201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629274931
    },
    {
        "content": "<p>Where is the definition of prime numbers in lean? I tried <a href=\"http://data.nat.prime\">data.nat.prime</a> and <a href=\"http://init.data.nat.prime\">init.data.nat.prime</a> and many close variants thereof. It seems to have moved from where the online tutorials say they are, and I am having trouble finding it.</p>",
        "id": 249906510,
        "sender_full_name": "Lucas",
        "timestamp": 1629318090
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime\">docs#nat.prime</a> what you're looking for?</p>",
        "id": 249906671,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1629318160
    },
    {
        "content": "<p>it looks like it is, how do you set it up to be imported?</p>",
        "id": 249906909,
        "sender_full_name": "Lucas",
        "timestamp": 1629318276
    },
    {
        "content": "<p>Make sure your <a href=\"https://leanprover-community.github.io/install/project.html\">Lean project depends on mathlib</a> and add the line <code>import data.nat.prime</code> at the top of your file.</p>",
        "id": 249907386,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1629318558
    },
    {
        "content": "<p>Which online tutorial are you talking about?</p>",
        "id": 249907515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629318612
    },
    {
        "content": "<p>I'm going to look at what Bryan mentioned, I didn't know you needed this extra setup. Thanks for the help!</p>",
        "id": 249907685,
        "sender_full_name": "Lucas",
        "timestamp": 1629318712
    },
    {
        "content": "<p>Also, it was on youtube tutorials, lean for the curious mathematician</p>",
        "id": 249907762,
        "sender_full_name": "Lucas",
        "timestamp": 1629318731
    },
    {
        "content": "<p>they gave the example of proving the infinitude of primes</p>",
        "id": 249907783,
        "sender_full_name": "Lucas",
        "timestamp": 1629318748
    },
    {
        "content": "<p>The videos are unfortunately impossible to keep updated. However you can download an updated version of all the Lean files from those lectures as described <a href=\"https://leanprover-community.github.io/lftcm2020/exercises.html\">here</a>.</p>",
        "id": 249907922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629318840
    },
    {
        "content": "<p>are they already outdated?</p>",
        "id": 249908042,
        "sender_full_name": "Lucas",
        "timestamp": 1629318905
    },
    {
        "content": "<p>Anything about Lean + mathlib which is more than one day old is outdated: <a href=\"https://leanprover-community.github.io/mathlib_stats.html\">https://leanprover-community.github.io/mathlib_stats.html</a></p>",
        "id": 249908279,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629319049
    },
    {
        "content": "<p>You can still learn a lot from those talks, but you can't expect the details to be accurate.</p>",
        "id": 249908326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629319077
    },
    {
        "content": "<p>alright, good to know for the future</p>",
        "id": 249908610,
        "sender_full_name": "Lucas",
        "timestamp": 1629319218
    },
    {
        "content": "<p>Hi guys! I have recently started exploring Lean. I am not able to access the Natural Number Game link  today. Few days ago it was just working fine. (<a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/</a> ) . Can anyone advise please?</p>",
        "id": 255634194,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1633030415
    },
    {
        "content": "<p>The issue is also being discussed in this thread: <a href=\"#narrow/stream/113488-general/topic/natural.20numbers.20game\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/natural.20numbers.20game</a></p>",
        "id": 255635632,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1633030948
    },
    {
        "content": "<p>I don't know what's going on. I've opened a ticket with the people who maintain the site but I've not heard back from them</p>",
        "id": 255658054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633040469
    },
    {
        "content": "<p>I found the natural number game recently and I am still working on finishing it, but I am getting an error with the website.<br>\n\"403 Forbidden<br>\nYou don't have permission to access this resource.\"</p>",
        "id": 290522451,
        "sender_full_name": "Galen Selligman",
        "timestamp": 1658502357
    },
    {
        "content": "<p>The NNG is also available at &lt;<a href=\"https://cbirkbeck.github.io/natural_number_game/\">https://cbirkbeck.github.io/natural_number_game/</a>&gt; .</p>",
        "id": 290524878,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1658503342
    },
    {
        "content": "<p>Thanks. I've put in the usual complaint. Basically all of <a href=\"http://www.ma.imperial.ac.uk\">www.ma.imperial.ac.uk</a> is down right now and the issue is that there are some people high up in the system who would like it to be down always.</p>",
        "id": 290556940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658518562
    },
    {
        "content": "<p>Hello, I've been really enjoying the Natural Number Game for the past few days. I was wondering if there is a way to solve Advanced Proposition world lvl 10 using tactics in a way that might be more intuitive to someone who might approach the proof \"by hand\" like this:</p>\n<p>lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) := sorry</p>\n<p>assume (¬ Q → ¬ P):<br>\n__assume P:<br>\n____assume ¬ Q:<br>\n______¬ P<br>\n____ ¬¬ Q<br>\n____Q<br>\n__P → Q<br>\n(¬ Q → ¬ P) → (P → Q) </p>\n<p>Thanks!</p>",
        "id": 295616830,
        "sender_full_name": "King Crawford",
        "timestamp": 1661617590
    },
    {
        "content": "<p>Maybe this is close enough?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">nqinp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">by_contra</span> <span class=\"n\">nq</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">np</span> <span class=\"o\">:=</span> <span class=\"n\">nqinp</span> <span class=\"n\">nq</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">np</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 295623530,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661621870
    },
    {
        "content": "<p>This is exactly what I was looking for. Appreciate it!</p>",
        "id": 295623926,
        "sender_full_name": "King Crawford",
        "timestamp": 1661622098
    },
    {
        "content": "<p>I'm working through NNG and stuck on <code>eq_zero_or_eq_zero_of_mul_eq_zero</code>.</p>\n<p>I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>which gets me <code>a=0</code> either through <code>succ_ne_zero</code> (assume right, leads to contradiction), or more directly by rewriting via <code>mul_succ</code> then <code>add_left_eq_zero</code> which gets me the left branch. </p>\n<p>But the latter rewrite fails due to \"metavariable\" issues, and I don't now how to get Lean to assume right.... I guess I could also get there through <code>hd</code> applied to <code>h</code>, but that also fails due to \"metavariable\" issues...</p>",
        "id": 298263540,
        "sender_full_name": "Arien Malec",
        "timestamp": 1662910654
    },
    {
        "content": "<p>Do you need to generalise <code>c</code>?</p>",
        "id": 298269228,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1662914278
    },
    {
        "content": "<p>Because the goal doesn't seem provable from your induction hypothesis</p>",
        "id": 298269436,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1662914444
    },
    {
        "content": "<p>Right now your inductive hypothesis <code>hd</code> is unusable because it needs as input a proof that <code>a*c=0</code> and you only have a hypothesis that <code>a*(c+1)=0</code>.</p>",
        "id": 298270339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662915040
    },
    {
        "content": "<p>the issue is the same if I use  <code>cases</code> -- agree that <code>hd</code> doesn't do much here. (If I understand the logic of cases, it splits the proof into a proof for zero <code>n</code> and a proof for non-zero (<code>succ n</code>) at which point I should be done with the disjunction but I can't tell that to Lean. With <code>cases</code> I get to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and since I know <code>succ_ne_zero</code> I should be done.</p>",
        "id": 298278265,
        "sender_full_name": "Arien Malec",
        "timestamp": 1662920722
    },
    {
        "content": "<p>No you're not at all done -- all you've managed to do is to reduce the question to the question you started with!</p>",
        "id": 298278360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662920784
    },
    {
        "content": "<p>Or maybe I'm not understanding your logic. Sure you know <code>succ c \\ne 0</code>. But how do you deduce a = 0 without assuming the thing you're supposed to be proving?</p>",
        "id": 298278426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662920848
    },
    {
        "content": "<p>Maybe you can show me an explicit example of the \"metavariable\" issues? Can you post some code which you think should work and doesn't?</p>",
        "id": 298278552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662920927
    },
    {
        "content": "<p>here are the moves that get the metavariable issue -- from the above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">mul_succ</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_left_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kd\">lemma</span> <span class=\"n\">lhs</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">metavariable</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>There's an implicit assumption that <code>a*c</code> : <code>mynat</code>...</p>",
        "id": 298279265,
        "sender_full_name": "Arien Malec",
        "timestamp": 1662921400
    },
    {
        "content": "<p>yeesh I got it with <code>left</code> + <code>exact add_left_eq_zero h</code></p>",
        "id": 298279906,
        "sender_full_name": "Arien Malec",
        "timestamp": 1662921872
    },
    {
        "content": "<p>Nice! Sorry, I'm just doing several other things at the same time. Let me try and figure out the error</p>",
        "id": 298279947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662921929
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_left_eq_zero\">docs#add_left_eq_zero</a></p>",
        "id": 298280022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662921971
    },
    {
        "content": "<p>OK after firing up NNG it appears that <code>add_left_eq_zero : a + b = 0 -&gt; b = 0</code></p>",
        "id": 298280125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662922066
    },
    {
        "content": "<p>so your error about metavariables is a very unhelpful error message which should instead say \"hey! You cannot <code>rw add_left_eq_zero</code> because <code>rw X</code> <em>only</em> works for lemmas <code>X</code> which are of the form <code>P = Q</code> or <code>P &lt;-&gt; Q</code>\"</p>",
        "id": 298280254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662922143
    },
    {
        "content": "<p>In fact <code>add_left_eq_zero</code> is a <em>function</em> which eats as input a proof that <code>X + Y = 0</code> for some X and Y, and returns a proof that <code>Y = 0</code>.</p>",
        "id": 298280348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662922217
    },
    {
        "content": "<p>And indeed <code>exact add_left_eq_zero h</code> works because this means \"feed <code>h</code> into the <code>add_left_eq_zero</code> function and the goal is exactly the output\". Sorry about the obscure error messages but hopefully that explains your problem!</p>",
        "id": 298280413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662922271
    },
    {
        "content": "<p>I also now understand that the inductive hypo was irrelevant -- I had imagined that one needed to do this by induction but as you point out you don't need the inductive hypothesis at all! It's been a while since I played through the game :-)</p>",
        "id": 298280452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662922313
    },
    {
        "content": "<p>super helpful! Bitten by the rw vs apply conceptual issue.</p>",
        "id": 298289337,
        "sender_full_name": "Arien Malec",
        "timestamp": 1662929715
    },
    {
        "content": "<p>Another issue here with inequality level 14 (<code>add_le_add_left</code>).</p>\n<p>My first thought was that <code>t + a ≤ t + b</code> is just <code>a + t ≤ b + t</code> by commutativity, but there's a quantification issue with how <code>add_le_add_right</code> is defined relative to <code>add_le_add_left</code>. Signature of right is <code>{a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t)</code> and left is <code>add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) : t + a ≤ t + b</code> which leads to an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Is there a trick to address the quantification mismatch?</p>",
        "id": 298798584,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663170887
    },
    {
        "content": "<p>Oh nevermind, <code>add_comm</code> applied to wrong side &amp; I didn't read the error message well enough. <span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span></p>",
        "id": 298798930,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663170996
    },
    {
        "content": "<p>But once I fixed that bonehead error, I still have the type error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 298799083,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663171059
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">t</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 298800831,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663171573
    },
    {
        "content": "<p>Quck question, how would this expression be simplified |x - y + z| + w ^ 2 ≤ 10 + 5 + 4 + 3 ^ 2? I've tried combinations of abs_sub/abs_add and it always says it cannot find expressions of type |a+b| to get the inequality of &lt;= |a| + |b| or something of that sort. and le_trans doesn't do anything</p>",
        "id": 298809453,
        "sender_full_name": "Ryan Duan",
        "timestamp": 1663174172
    },
    {
        "content": "<p>Probably you need the fact that a \\le b and c \\le d implies a+c \\le b+d</p>",
        "id": 298809825,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663174284
    },
    {
        "content": "<p>I see, there's no way to just evaluate away an abs value expression with three elements with just abs_sub/add?</p>",
        "id": 298810985,
        "sender_full_name": "Ryan Duan",
        "timestamp": 1663174663
    },
    {
        "content": "<p>adding <code>t</code> as a parameter worked -- collapses <code>∀ t</code> to  my <code>t : mynat</code> ?</p>",
        "id": 298813844,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663175554
    },
    {
        "content": "<p>It now occurs to me that Lean does currying...</p>",
        "id": 298814249,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663175720
    },
    {
        "content": "<p>Yeah, that's right</p>",
        "id": 298815809,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663176310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"533309\">@Ryan Duan</span> if you ask your question in a new thread it'll be much clearer whats going on here. Also check out the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> guide, this will make your questions easier to answer</p>",
        "id": 298817095,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663176779
    },
    {
        "content": "<p>As feedback to the NNG maintainers, the biggest issues in NNG were often the syntax of function calls - when I can call <code>foo_bar_baz h</code> and when I have to call <code>foo_bar_baz a b h</code>, etc., as well as the mental table I had to construct of when I have to <code>cases h</code> vs <code>split</code> vs etc. depending on if I'm in hypothesis space or goal space, etc.</p>\n<p>If I hadn't \"cheated\" and found some examples of how to do all this stuff, I'd still be in a maze working through <code>mul_left_cancel</code>...)</p>",
        "id": 298881140,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663198254
    },
    {
        "content": "<p>But generally kudos -- have been interested in this space since I discovered OCaml and heard about this thing called Coq, but getting my arms around what automated theory provers did and how they worked was a bit overwhelming. NNG is an amazing intro to the curious computer scientist.</p>",
        "id": 298881489,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663198538
    },
    {
        "content": "<p>Yeah I definitely could have said something about implicit and explicit inputs to functions. If you look at the type of a function, the inputs it can implicitly infer are those in <code>{}</code> brackets, but I'm not sure this is ever explicitly mentioned</p>",
        "id": 298913153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663225484
    },
    {
        "content": "<p>Advanced Addition world level 1/13 It says 'You should know a couple of ways to prove the below -- one directly using an exact' But I don't see how to prove directly and it without using apply. Any suggestion? Thanks!</p>",
        "id": 299549170,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663588333
    },
    {
        "content": "<p>If you can prove something in one line using <code>apply</code> you should be able to prove the same using <code>exact</code>, using the same lemma. The difference is that with <code>exact</code> you can specify all the arguments, that are \"guessed\" by Lean using <code>apply</code>. (You can also just use <code>_</code> as an argument.)</p>",
        "id": 299549350,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663588451
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/f29b6c2884299fc63fdfc81ae5d7daaa3219f9fd/src/game/world8/level1.lean#L46\">Spoiler from the source code</a></p>",
        "id": 299552519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663589719
    },
    {
        "content": "<p>Advanced Addition World, level 8/13. Typing <br>\n<code>intro h,\nrw ← add_left_cancel a b 0,</code><br>\nproduces two goals. Why??</p>\n<p>Second question: it is a little weird to always work <em>backwards</em>. For example, here, after <code>intro h</code> the goal is <code>b=0</code> while the hypothesis is <code>h:a+b=a</code> . The way to think <em>forward</em> would be that somehow <code>add_zero</code> should produce somehow  <code>p: a+b=a+0</code>  and <code>add_left_cancel</code> should produce  <code>q:b=0</code>. Is there a way to do so?</p>\n<p>Thanks in advance</p>",
        "id": 299729363,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663673169
    },
    {
        "content": "<p><code>add_left_cancel a b 0</code> has type <code>a + b = a + 0 -&gt; b = 0</code>. This is not an equality or an iff statement, so you cannot rewrite it. You attempt to use the <code>rw</code> tactic anyway, so Lean has to make a decision about what you could mean, and it decides that probably you're going to give a proof of <code>a + b = a + 0</code> later on (and creates this as a new goal) and then it tries to rewrite the new conclusion <code>b = 0</code> (which <em>is</em> an equality, so is rewritable) backwards, so it changes the 0 to a <code>b</code> giving you the first goal you see.</p>",
        "id": 299731218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663673968
    },
    {
        "content": "<p>Sure you can argue forwards in Lean, using repeated <code>have</code> statements, but it almost always takes longer. Here's a Lean version of your sketch proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 299731803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663674229
    },
    {
        "content": "<p>The general structure of a formal proof is that you have multiple hypotheses but only one goal. The hypotheses tend to stick around, even when you've finished with them. The goal is fluid, it can change during a proof, and previous goals can be thrown away as the proof moves on. If you want to argue via \"we know this stuff, so we can deduce this, and now we can deduce this, and now this, and now we're done\" then you are constantly adding to the list of hypotheses. If you are instead arguing backwards, saying \"reduce the problem to this, and then to this, and then to this, and now we're done\" then you don't have to keep adding hypotheses to the local context and you can throw away previous goals. So from the point of view of formalisation it's less clutter.</p>\n<p>Under the hood, a proof is a function. What a tactic proof is really doing is building that function in an extremely flexible way, adding in parts of the function in funny places and leaving \"holes\" which become new goals. Thought of in this way, a forwards (\"normal for mathematician\") proof can be thought of as building other functions along the way which you plug into the definition of the function you actually want. Arguing backwards is building the function you actually want directly, by building the \"end part\" of it first (you build a function from A to C by directly plugging in the function from B to C and reducing the question to building the function from A to B -- this is the <code>apply</code> tactic). If instead you want to build the function from A to B first, you can't plug it in directly, you need to give it a new name and then apply it to the input (a term of type A) to get the term of type B which as mathematicians we're trained to think we want to have.</p>",
        "id": 299732613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663674575
    },
    {
        "content": "<p>Advanced Multiplication World 4/4. Hi all, I'm not too sure how to solve the first goal of this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I assume the use of <code>eq_zero_or_eq_zero_of_mul_eq_zero</code> or <code>mul_eq_zero_iff</code> is necassary but I'm unsure what tactics I can use with them. Thanks!</p>",
        "id": 299772378,
        "sender_full_name": "Will Midwood",
        "timestamp": 1663685357
    },
    {
        "content": "<p>If you <code>intro hab</code> then you'll be able to feed <code>hab</code> into <code>eq_zero_or_eq_zero_of_mul_eq_zero</code> and you'll be able to <code>rw mul_eq_zero_iff at hab</code>.</p>",
        "id": 299785409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663687017
    },
    {
        "content": "<p>Multiplication World 1/13: Question about syntaxis . Writing<br>\n<code>induction m on n,\nexact mul_zero 0,\nrw mul_succ,\nrw m_ih,\nrw zero_add,\nrefl,</code><br>\nLean says \"no goals\" but no \"Proof complete!\" The console writes<br>\n<code>60:12: error:\ninvalid 'begin-end' expression, ',' expected\n61:0: error:\nsync</code><br>\nI usually find that several times Lean says 'no goals<code>but no </code>Proof complete!<code>. Usually, when this happens I erase and write again the last line few times until it says </code>Proof complete!`, but this time it does not work. Surely I am writing something wrong, but I don't see it...</p>\n<p>Thanks in advance.</p>",
        "id": 299927874,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663757470
    },
    {
        "content": "<p>Pro-tip: you can surround a longer quotation by three <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> on their own line</p>",
        "id": 299930182,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663758408
    },
    {
        "content": "<p>The error you're encountering means there's some syntax error like forgetting to close a parenthesis but I don't see any in your code...</p>",
        "id": 299930282,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663758458
    },
    {
        "content": "<p>I see <code>induction m on n</code>, which is not valid syntax</p>",
        "id": 299936692,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663760934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/299936692\">ha dicho</a>:</p>\n<blockquote>\n<p>I see <code>induction m on n</code>, which is not valid syntax</p>\n</blockquote>\n<p>Thanx a lot, that was it. Although it is surprising, while using  <code>induction m on n</code>doesn't display any error at that moment and the proof goes all the way correctly (only that it does not say <code>Proof complete</code> at the end). Now, with <code>induction m with n</code>every step works the same, except the final one wich says <code>Proof complete </code>.  Anyway. Thank you very much!</p>",
        "id": 299944190,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663763580
    },
    {
        "content": "<p>Me again, struggling with Advanced Multiplication world Level 4/4 again, I'm just not sure how to proceed? Here is my Goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>I'm not sure if I should be manipulating the hypotheses or the goal or if I need to retry my tactics. Any help would be much appreciated!</p>",
        "id": 300169529,
        "sender_full_name": "Will Midwood",
        "timestamp": 1663855597
    },
    {
        "content": "<p>I tried <code>cases a with n</code> but couldn't get anything more solvable</p>",
        "id": 300169718,
        "sender_full_name": "Will Midwood",
        "timestamp": 1663855667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"534386\">Alberto Navarro Garmendia</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/299927874\">said</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">I</span> <span class=\"n\">usually</span> <span class=\"n\">find</span> <span class=\"n\">that</span> <span class=\"n\">several</span> <span class=\"n\">times</span> <span class=\"n\">Lean</span> <span class=\"n\">says</span> <span class=\"bp\">```</span><span class=\"n\">no</span> <span class=\"n\">goals</span><span class=\"bp\">```</span> <span class=\"n\">but</span> <span class=\"n\">no</span> <span class=\"bp\">```</span><span class=\"n\">Proof</span> <span class=\"n\">complete</span><span class=\"bp\">!```.</span> <span class=\"n\">Usually</span><span class=\"o\">,</span> <span class=\"n\">when</span> <span class=\"n\">this</span> <span class=\"n\">happens</span> <span class=\"n\">I</span> <span class=\"n\">erase</span> <span class=\"n\">and</span> <span class=\"n\">write</span> <span class=\"n\">again</span> <span class=\"n\">the</span> <span class=\"n\">last</span> <span class=\"n\">line</span> <span class=\"n\">few</span> <span class=\"n\">times</span> <span class=\"n\">until</span> <span class=\"n\">it</span> <span class=\"n\">says</span> <span class=\"bp\">```</span><span class=\"n\">Proof</span> <span class=\"n\">complete</span><span class=\"bp\">!```</span> <span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">this</span> <span class=\"n\">time</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">work.</span> <span class=\"n\">Surely</span> <span class=\"n\">I</span> <span class=\"n\">am</span> <span class=\"n\">writing</span> <span class=\"n\">something</span> <span class=\"n\">wrong</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">I</span> <span class=\"n\">don't</span> <span class=\"n\">see</span> <span class=\"n\">it...</span>\n</code></pre></div>\n<p>I didn't see a reply here -- when I was doing NNG, adding a newline after the last line in the proof usually triggered the transition between <code>no goals</code> and <code>Proof complete!</code>.</p>",
        "id": 300198818,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663864321
    },
    {
        "content": "<p>Two questions:</p>\n<p>First: I am having troubles with the syntaxis of  <code>add_left_equal_zero</code>,  <code>eq_zero_or_eq_zero_of_mul_eq_zero</code>and similar statements.</p>\n<p>More concretely, let <code>p: 0=succ a * succ b </code>.  I want to produce <code>q : succ a =0 ∨ succ b =0 </code> out of <code>p</code>, but I fail to do so.  The command <code>have q:= eq_zero_or_eq_zero_of_mul_eq_zero (p)</code> does not work. </p>\n<p>Second, very stupid: is there a quick command to switch <code>p: P=Q</code>into some <code>q:Q=P</code>, where <code>P</code>and <code>Q</code>are different expressions?</p>\n<p>Thanks in advance.</p>",
        "id": 300204867,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663866102
    },
    {
        "content": "<p>2/ <code>rw eq_comm at p</code> or <code>have q := p.symm</code></p>",
        "id": 300208831,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663867354
    },
    {
        "content": "<p>1/ what's the error?</p>",
        "id": 300208880,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663867372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"545295\">Will Midwood</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300169529\">said</a>:</p>\n<blockquote>\n<p>Me again, struggling with Advanced Multiplication world Level 4/4 again, I'm just not sure how to proceed? Here is my Goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>I'm not sure if I should be manipulating the hypotheses or the goal or if I need to retry my tactics. Any help would be much appreciated!</p>\n</blockquote>\n<p>Do you know the maths proof from where you have got to, to the goal, or are you just kind of trying things at random? Before embarking on this Lean proof you might want to plan your route on paper.</p>",
        "id": 300235317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663876525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300208880\">ha dicho</a>:</p>\n<blockquote>\n<p>1/ what's the error?</p>\n</blockquote>\n<p>The console sais</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">p</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">c_n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Note that  <code>p: 0=succ a * succ c_n </code>because i was inside an induction.</p>",
        "id": 300263151,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1663888234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300235317\">said</a>:</p>\n<blockquote>\n<p>Do you know the maths proof from where you have got to, to the goal, or are you just kind of trying things at random? Before embarking on this Lean proof you might want to plan your route on paper.</p>\n</blockquote>\n<p>You make an excellent point. Without the use of division I actually do not not how to prove this statement from here anyways. I guess back to the drawing board!</p>",
        "id": 300325874,
        "sender_full_name": "Will Midwood",
        "timestamp": 1663926495
    },
    {
        "content": "<p>I'm not \"being cruel\" not giving you access to division -- you don't get to division until you've built the rationals and to build the rationals you need all the theorems about naturals first!</p>",
        "id": 300340964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663932495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"534386\">Alberto Navarro Garmendia</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300263151\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300208880\">ha dicho</a>:</p>\n<blockquote>\n<p>1/ what's the error?</p>\n</blockquote>\n<p>I solved the problem. For the sake of completeness: the console said</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">p</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">c_n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Right -- so <code>eq_zero_or_eq_zero_of_mul_eq_zero</code> seems to want to eat a natural number next, not <code>p</code>. You could try <code>eq_zero_or_eq_zero_of_mul_eq_zero _ _ p</code> or something (the number of <code>_</code>s is the number of natural numbers which you don't want to give but which the system wants before <code>p</code>).</p>",
        "id": 300341305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663932611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300340964\">said</a>:</p>\n<blockquote>\n<p>I'm not \"being cruel\" not giving you access to division -- you don't get to division until you've built the rationals and to build the rationals you need all the theorems about naturals first!</p>\n</blockquote>\n<p>I'm getting a bit nerdsniped by what we are actually proving --- something like the natural numbers under multiplication are a cancellable semigroup?</p>\n<p>Is there a way in Lean to do induction starting at a different base case? The  paper outline of the proof here is far easier if we can start <code>a</code> with 1, which is sort of what my now rewritten proof does, just inside out... (induction over <code>b</code> then sorta induction by <code>case</code> over <code>c</code>).</p>",
        "id": 300469318,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663978801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300469318\">said</a>:</p>\n<blockquote>\n<p>Is there a way in Lean to do induction starting at a different base case? The  paper outline of the proof here is far easier if we can start <code>a</code> with 1, which is sort of what my now rewritten proof does, just inside out... (induction over <code>b</code> then sorta induction by <code>case</code> over <code>c</code>).</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.le_induction\">docs#nat.le_induction</a></p>",
        "id": 300469479,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663978928
    },
    {
        "content": "<p>but you probably don't have access to that in the game...not sure</p>",
        "id": 300469509,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663978972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> If you want to start at <code>1</code> without additional library lemmas, you can do <code>cases a, { ... proof for 0 ... }, induction a</code></p>",
        "id": 300471197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663980813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300471197\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> If you want to start at <code>1</code> without additional library lemmas, you can do <code>cases a, { ... proof for 0 ... }, induction a</code></p>\n</blockquote>\n<p>Sadly I think that leads to a dead end...</p>",
        "id": 300478606,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663988695
    },
    {
        "content": "<p>No that's exactly the right way to do induction on a&gt;=1.</p>",
        "id": 300500647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664007794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/300500647\">said</a>:</p>\n<blockquote>\n<p>No that's exactly the right way to do induction on a&gt;=1.</p>\n</blockquote>\n<p>It works, but it's not shorter, simpler or easier to understand than the original proof...</p>",
        "id": 300552754,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664033781
    },
    {
        "content": "<p>I have a syntaxis doubt. Having <code>h :  a * c + a = a * d + a </code>and the goal being  <code>a * c = a * d </code> my question is: why does  <code>apply add_right_cancel _ _ _ h, </code>solves the goal?</p>\n<p>As far as I know, the <code>apply</code> tactic with <code>add_right_cancel _ a _ </code>transforms the goal precisely into <code> a * c + a = a * d + a </code>, Why can I just simply write h after the apply tactic in the same line? I don't understand the syntaxis and the description of the apply tactic does not explain this use.</p>\n<p>Thanks in advance.</p>",
        "id": 301184031,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1664355040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"534386\">@Alberto Navarro Garmendia</span> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_right_cancel\">docs#add_right_cancel</a> is a function that takes (some elements and) a proof that <code>X + a = Y + a</code> and returns a proof that <code>X = Y</code>.</p>\n<p>So you can either</p>\n<ol>\n<li><code>apply add_right_cancel</code> which will require you to provide <code>h</code> afterwards. In particular that is the new goal that you are seeing; or</li>\n<li><code>apply (add_right_cancel _ _ _ h)</code> which applies the function immediately to <code>h</code> and closes the goal with the resulting proof of <code>X = Y</code>. (I added the parentheses after the <code>apply</code> for some clarity. They aren't needed.)</li>\n</ol>",
        "id": 301187252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664356269
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I see . </p>\n<p>I still have a doubt:  it seems to me that the <code>apply</code> tactic can also work on hypothesis, not only on the goal as I learnt. More concretely, If  I understand correctly,  having a theorem  (let's denote it theorem_1) saying <code>P →  Q</code> and having  <code>p : P</code> then <code>apply (theorem_1 p)</code> would solve a goal  <code>Q</code>.    But, , is there a way to simply get <code>q : Q</code>out of   <code>apply (Theorem_1 p)</code>or a similar syntaxis? Thanks in advance</p>",
        "id": 301189196,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1664356995
    },
    {
        "content": "<p>You could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">theorem_1</span> <span class=\"n\">p</span>\n<span class=\"c1\">-- or</span>\n<span class=\"n\">apply_fun</span> <span class=\"n\">theorem_1</span> <span class=\"n\">at</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 301189426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664357068
    },
    {
        "content": "<p>Probably <code>apply_fun</code> is closest to what you want. But the downside is that it doesn't update the name. So now you will suddenly have <code>p : Q</code>, which looks a bit odd.</p>",
        "id": 301189530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664357106
    },
    {
        "content": "<p>I am currently trying to use the add_left_cancel theorem to get from h2 to the goal, it says that the type of h2 should be mynat instead of Prop, which I think is problematic? I have also tried to just repeat again the proofs of all the theorems I need, but at the end I could not use induction on (a * d), so this doesn't work either, does anyone have some hint of it?<br>\n<a href=\"/user_uploads/3121/rPZbAsqqwSvN1oz-F_z0_YTC/SharedScreenshot.jpg\">SharedScreenshot.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rPZbAsqqwSvN1oz-F_z0_YTC/SharedScreenshot.jpg\" title=\"SharedScreenshot.jpg\"><img src=\"/user_uploads/3121/rPZbAsqqwSvN1oz-F_z0_YTC/SharedScreenshot.jpg\"></a></div>",
        "id": 303067047,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665266068
    },
    {
        "content": "<p>The reason is that <code>add_left_cancel</code> wants to eat three numbers before it eats <code>h2</code>. You can see on the left it says <code>add_left_cancel (t a b : mynat) : ...</code>, which means \"I want to eat t, a and b, before I eat the proof that t+a=t+b and then I'll spit out the proof that a = b\". You can probably write <code>have h3 := add_left_cancel _ _ _ h2</code>.</p>",
        "id": 303067141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665266169
    },
    {
        "content": "<p>It still doesn't seem to work, and I have also tried writing explicitly (a * d) 0 a out, but there is still error <a href=\"/user_uploads/3121/nCiC910g8pO3IIYdN7ghJWtC/SharedScreenshot.jpg\">SharedScreenshot.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nCiC910g8pO3IIYdN7ghJWtC/SharedScreenshot.jpg\" title=\"SharedScreenshot.jpg\"><img src=\"/user_uploads/3121/nCiC910g8pO3IIYdN7ghJWtC/SharedScreenshot.jpg\"></a></div>",
        "id": 303067430,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665266485
    },
    {
        "content": "<p>You've got two <code>d</code>s</p>",
        "id": 303067645,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665266647
    },
    {
        "content": "<p>Oh I see, I will try to fix that. Thanks  a lot.</p>",
        "id": 303067780,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665266785
    },
    {
        "content": "<p>Yeah, sorry the error message is confusing, the reason it's talking about d and d_1 is that you've called two things d</p>",
        "id": 303070616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665269384
    },
    {
        "content": "<p>Did you consider making the infix notations <code>+</code> and <code>*</code> nonassociative in the NNG?  I have some students working through it as part of a class in formalization, and they frequently have trouble remembering that <code>a + b + c</code> actually means <code>(a + b) + c</code>.  (To be honest, I have trouble remembering that myself!)</p>",
        "id": 303073079,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665271709
    },
    {
        "content": "<p>I don't think lean 3 supports nonassociative operators</p>",
        "id": 303076630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665275280
    },
    {
        "content": "<p>actually that's not true, you can do it with <code>notation</code> if you set all the precedences manually</p>",
        "id": 303076687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665275318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> (btw you seem to have two active accounts here which makes you harder to @) I agree that the lack of brackets causes confusion. I think <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> made some pp.bracket option which you can now switch on to see where they are. At the time people convinced me that it was important to learn lean's conventions for associativity and I didn't know anything about how to make the brackets appear so I just went with what we have</p>",
        "id": 303077476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665276207
    },
    {
        "content": "<p>(Huh, I had no idea I had a second account.  I wonder how that happened, let's see if I can delete it.)</p>",
        "id": 303081125,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665280234
    },
    {
        "content": "<p>Is there an important reason to use Lean's <code>has_add</code>?  In another proof assistant I would just declare <code>+</code> directly to be an infix notation without associativity.  I presume that going through <code>has_add</code> forces you to use the same associativity as all other \"add\"s in the library.</p>",
        "id": 303081197,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665280322
    },
    {
        "content": "<p>You can do that, but you either have to shadow the original notation (meaning that your new add can't be used along with the old one), or you have to use lean's type-based disambiguation mechanism which is largely avoided in mathlib because it doesn't play well with typeclasses</p>",
        "id": 303081614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665280802
    },
    {
        "content": "<p>for teaching purposes the former approach is often reasonable</p>",
        "id": 303081668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665280827
    },
    {
        "content": "<p>Personally, I almost wish proof assistants would <em>always</em> include the brackets.  I can never remember the default associativity of any binary operation and am always failing to rewrite because I got it wrong.</p>",
        "id": 303084758,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665283970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/303076630\">said</a>:</p>\n<blockquote>\n<p>I don't think lean 3 supports nonassociative operators</p>\n</blockquote>\n<p>I would be very disappointed in any proof assistant that doesn't support nonassociative operators.  I can think of oodles of infix binary operators that I think should be nonassociative, starting with <code>=</code>.</p>",
        "id": 303085012,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665284220
    },
    {
        "content": "<p>I see that in Lean 3, <code>=</code> is left-associative.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">variable</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">P</span>\n</code></pre></div>\n<p>Ugh.</p>",
        "id": 303085406,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665284558
    },
    {
        "content": "<p>lean 4 has nonassociative operators, although I'm not so sure about using them because I noticed that the parse failure can sometimes trigger a surprising fallback behavior</p>",
        "id": 303088198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665287457
    },
    {
        "content": "<p>The way to write them in lean 3 is <code>notation:p x:p+1 `foo` y:p+1 := foo x y</code> for some choice of <code>p</code></p>",
        "id": 303088531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665287540
    },
    {
        "content": "<p>How do I parse that?</p>",
        "id": 303093862,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665294230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> you can just hover over a + or any other infix operator in the infoview to see how it's associating, you have instant visual feedback in VS Code</p>",
        "id": 303107817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665306227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> You can tell Lean to print parentheses always:<code>set_option pp.parens true</code>.</p>",
        "id": 303151113,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1665333192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/303107817\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"381187\">Mike Shulman</span> you can just hover over a + or any other infix operator in the infoview to see how it's associating, you have instant visual feedback in VS Code</p>\n</blockquote>\n<p>When I hover over <code>+</code> I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_add.add</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 303385690,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665478799
    },
    {
        "content": "<p>He means in the info view.</p>",
        "id": 303385778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665478829
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/3l1O1-sZXi6MhKDAqNFA12wp/assoc.gif\">assoc.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3l1O1-sZXi6MhKDAqNFA12wp/assoc.gif\" title=\"assoc.gif\"><img src=\"/user_uploads/3121/3l1O1-sZXi6MhKDAqNFA12wp/assoc.gif\"></a></div>",
        "id": 303386038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665478948
    },
    {
        "content": "<p>Observe how part of the expression turns blue, indicating that addition is left-associative.</p>",
        "id": 303386075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665478982
    },
    {
        "content": "<p>My infoview doesn't do that.</p>",
        "id": 303387808,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665479675
    },
    {
        "content": "<p>That's probably because the natural number game uses an ancient version of Lean and mathlib.</p>",
        "id": 303391043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665480980
    },
    {
        "content": "<p>At least you know that when working on a real project you won't have this issue.</p>",
        "id": 303391079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665481003
    },
    {
        "content": "<p>I'm not talking about the NNG now, I actually have vs code running locally.</p>",
        "id": 303391136,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665481031
    },
    {
        "content": "<p>(Although I would much prefer to use Emacs...)</p>",
        "id": 303393169,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665481873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> Which version of the Lean extension do you have in VScode?</p>",
        "id": 303398382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484159
    },
    {
        "content": "<p>And which version of Lean are you running in that project? <code>#eval lean.version</code></p>",
        "id": 303398420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484176
    },
    {
        "content": "<p>Lean extension is 0.16.55, Lean version is <code>(3, (46, 0))</code>.</p>",
        "id": 303398654,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665484279
    },
    {
        "content": "<p>Ooh, maybe you need something like <code>import tactic</code> at the top? I'm just guessing.</p>",
        "id": 303398700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484307
    },
    {
        "content": "<p>Because those version numbers seem pretty up to date</p>",
        "id": 303398802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484342
    },
    {
        "content": "<p>I don't know exactly which part of mathlib you need to import to make the widget stuff work...</p>",
        "id": 303398851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484369
    },
    {
        "content": "<p>At the moment I'm not using any of mathlib.</p>",
        "id": 303398944,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665484410
    },
    {
        "content": "<p>Understood. I'm afraid it might not work without mathlib.</p>",
        "id": 303398999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484441
    },
    {
        "content": "<p>The libraries that I import in my code can affect what sort of information my editor can display?</p>",
        "id": 303399067,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665484460
    },
    {
        "content": "<p>That seems like a weird sort of level-mixing.</p>",
        "id": 303399142,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665484489
    },
    {
        "content": "<p>Sure, if you import a library about Young tableaus, you might want to explain to your editor how to display them.</p>",
        "id": 303399193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484507
    },
    {
        "content": "<p>Or if you setup category theory, you might want to implement a widget for diagram chasing.</p>",
        "id": 303399241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484525
    },
    {
        "content": "<p>Sure, but those are domain-specific.  Bracketing is something that applies to all infix operators in the world.</p>",
        "id": 303399373,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665484581
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/interactive_expr.html#widgets-used-for-tactic-state-and-term-mode-goal-display\">https://leanprover-community.github.io/mathlib_docs/tactic/interactive_expr.html#widgets-used-for-tactic-state-and-term-mode-goal-display</a> is the relevant file I believe.</p>",
        "id": 303399374,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665484582
    },
    {
        "content": "<p>The default tactic state is pure text, the widgets override it with the additional nested expression information</p>",
        "id": 303399433,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665484623
    },
    {
        "content": "<p>One could definitely make the argument that this should be in core now though!</p>",
        "id": 303399514,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665484665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"381187\">Mike Shulman</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20number.20game/near/303399373\">said</a>:</p>\n<blockquote>\n<p>Sure, but those are domain-specific.  Bracketing is something that applies to all infix operators in the world.</p>\n</blockquote>\n<p>Agreed. So you would expect it to be implemented in the standard library. But in the case of Lean 3, by historical accident, mathlib is the standard library. In Lean 4 this will all be done with more modular packages.</p>",
        "id": 303399527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665484673
    },
    {
        "content": "<p>Seeing as that file imports none of mathlib, you could simply copy it to your project I guess</p>",
        "id": 303399640,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665484705
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive_expr.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive_expr.lean</a> is the file that Mike wants. It is extremely convenient to be able to override what is that file, and I use this possibility in my teaching or in the sphere eversion project. But indeed the basic version could be in the core library now that is stabilized (in the beginning it was convenient to have that file in mathlib for fast iteration).</p>",
        "id": 303404222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665486763
    }
]