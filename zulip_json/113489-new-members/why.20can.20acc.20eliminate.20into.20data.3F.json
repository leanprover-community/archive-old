[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">acc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">acc</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">x</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">acc.rec_on :</span>\n<span class=\"cm\">  Π {α : Sort u_2} {r : α → α → Prop} {C : α → Sort u_1} {a : α},</span>\n<span class=\"cm\">    acc r a → (Π (x : α), (∀ (y : α), r y x → acc r y) → (Π (y : α), r y x → C y) → C x) → C a</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 207109163,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597643875
    },
    {
        "content": "<p>if <code>acc</code> is <code>Prop</code>, why can it eliminate into data?</p>",
        "id": 207109208,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597643889
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/declarations.html#inductive-families\">https://leanprover.github.io/reference/declarations.html#inductive-families</a></p>\n<blockquote>\n<p>Generally speaking, for an inductive family in Prop, the motive in the eliminator is required to be in Prop. But there is an exception to this rule: you are allowed to eliminate from an inductively defined Prop to an arbitrary Sort when there is only one constructor, and each argument to that constructor is either in Prop or an index. The intuition is that in this case the elimination does not make use of any information that is not already given by the mere fact that the type of argument is inhabited. This special case is known as singleton elimination.</p>\n</blockquote>",
        "id": 207112334,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597647856
    }
]