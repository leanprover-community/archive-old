[
    {
        "content": "<p>Hey, I'm in a situation that I suspect that is a bug, but It may be as well that I'm missing something obvious. Unfortunately, this is part of some bigger code chunk, with a few dependencies, so I can't post a MWE. Also I don't even know how to reproduce this behaviour.</p>\n<p>I am writing a proof and I have some hypothesis with an existential quantifier, When I try to <code>cases</code> or <code>rcases</code> this hypothesis, I get the following error message: <code>induction tactic failed, recursor 'Exists.dcases_on' can only eliminate into Prop</code>.  Now what is really weird is that in an earlier proof, with exactly <em>the same</em> hypothesis (when I say exactly, I mean I compared the two hypothesis with <code>set_option pp.all true</code> and they were really exactly the same) , and cases worked just fine.<br>\nNow even weirder: if I <code>tidy?</code> in my proof, and follow the first few instructions (a few <code>fsplit</code> and <code>work_on_goal</code>), tidy then suggests some <code>cases</code> is done on this hypothesis, and it works. I tried a bunch of things: if I open some subgoal, then it starts working as well. </p>\n<p>here is what my exists statement looks like with pprint.all : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span><span class=\"o\">)),</span>\n       <span class=\"bp\">@</span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span><span class=\"o\">)))</span>\n            <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span>\n          <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span>\n            <span class=\"bp\">@</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span><span class=\"o\">)))</span>\n              <span class=\"n\">R</span>\n              <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">X</span><span class=\"o\">)),</span>\n            <span class=\"bp\">@</span><span class=\"n\">has_subset</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_subset</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n              <span class=\"n\">R</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">sieve</span><span class=\"bp\">.</span><span class=\"n\">arrows</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span> <span class=\"n\">X</span> <span class=\"n\">S</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>Any idea how one would find a work-around for this kind of things? I can <code>classical.some</code> one the hypothesis but I'd rather avoid. Also, what kind of debug options (further than pp.print_all) would be usefull there to try to understand what's going on?</p>",
        "id": 199261377,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590851813
    },
    {
        "content": "<p>It means that your goal is not a <code>Prop</code></p>",
        "id": 199261502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590851952
    },
    {
        "content": "<p>So even though the hypothesis is the same, the rest of your context isn't</p>",
        "id": 199261518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590851969
    },
    {
        "content": "<p>Oh well that explains everything</p>",
        "id": 199261531,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590851990
    },
    {
        "content": "<p>You'll have to either work your way around it (by doing stuff that makes your goal a <code>Prop</code>) or use <code>choose</code>.</p>",
        "id": 199261608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852062
    },
    {
        "content": "<p>For example, if you want to use <code>exfalso</code>, do that first, and afterwards the <code>cases</code> will work.</p>",
        "id": 199261631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852103
    },
    {
        "content": "<p>Well I guess I'll just use choose. Makes sense since the goal is to give some object.</p>",
        "id": 199261675,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590852129
    },
    {
        "content": "<p>Well thank you a lot, I was going mad over this!</p>",
        "id": 199261868,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590852369
    },
    {
        "content": "<p>No worries</p>",
        "id": 199261914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852466
    },
    {
        "content": "<p>Asking questions here is an encouraged method of solving problems</p>",
        "id": 199261918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590852478
    },
    {
        "content": "<p>If you're using tactic mode to make something that isn't a proof, you might be doing it wrong.</p>\n<p>Sometimes you can get around things not eliminating to Type by using <code>classical. some</code></p>",
        "id": 199264226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590855649
    }
]