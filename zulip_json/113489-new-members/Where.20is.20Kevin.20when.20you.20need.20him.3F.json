[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nNew StackExchange question. <br>\nAre some proof assistants better suited for given areas of math than others? (<a href=\"https://proofassistants.stackexchange.com/q/105/5\">ref</a>)</p>",
        "id": 271210286,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1644364505
    },
    {
        "content": "<p>I’ve learned to fear that kind of questions…</p>",
        "id": 271211758,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1644365303
    },
    {
        "content": "<p>One thing I would honestly like to know is: what are the hard thresholds of known proof assistants?<br>\nThat is:</p>\n<ul>\n<li>What can't Lean do?</li>\n<li>What can't Coq do?</li>\n<li>What can't Agda do?<br>\n...</li>\n</ul>",
        "id": 271212468,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644365824
    },
    {
        "content": "<p>The answer: Kevin is probably in London, where it's after midnight.</p>",
        "id": 271212527,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644365870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> that sounds like a perfect question for the stack exchange!</p>",
        "id": 271212647,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644365932
    },
    {
        "content": "<p>Gonna post it in a few minutes</p>",
        "id": 271212928,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644366129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"366057\">Eric Taucher</span> <a href=\"#narrow/stream/113489-new-members/topic/Where.20is.20Kevin.20when.20you.20need.20him.3F/near/271210286\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <br>\nNew StackExchange question. <br>\nAre some proof assistants better suited for given areas of math than others? (<a href=\"https://proofassistants.stackexchange.com/q/105/5\">ref</a>)</p>\n</blockquote>\n<p>OK OK I answered.</p>",
        "id": 271282421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644415627
    },
    {
        "content": "<p>I saw, I upvoted. If I had written it I would have accepted.</p>",
        "id": 271292460,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1644419652
    },
    {
        "content": "<p>Is anyone really afraid that there are foundational issues preventing one from defining the tensor product of two vector bundles in Lean?</p>",
        "id": 271306666,
        "sender_full_name": "Will Sawin",
        "timestamp": 1644424748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230900\">Will Sawin</span> <a href=\"#narrow/stream/113489-new-members/topic/Where.20is.20Kevin.20when.20you.20need.20him.3F/near/271306666\">said</a>:</p>\n<blockquote>\n<p>Is anyone really afraid that there are foundational issues preventing one from defining the tensor product of two vector bundles in Lean?</p>\n</blockquote>\n<p>Can you ask that as a new question.</p>",
        "id": 271309944,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1644425897
    },
    {
        "content": "<p>I really didn't expect this get this much attention and really do not need it to grow any more.</p>",
        "id": 271310007,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1644425925
    },
    {
        "content": "<p>I would close this topic but I don't know if that is possible with Zulip.</p>",
        "id": 271310272,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1644426007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230900\">@Will Sawin</span> there is more to this than meets the eye [more to come]</p>",
        "id": 271310604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644426116
    },
    {
        "content": "<p>It might be easier to explain the schemes in HOL situation first. Isabelle/HOL doesn't have dependent types, but it can try to work around this. A sheaf of commutative rings wants to eat an open set and spit out a ring. Sounds like it's a function, right? But if it's a function, what is the codomain? There's no set of all rings. A sheaf is of course a functor, not a function, and this concept doesn't fit into HOL. So what can one do in practice? What one can do is to fix a specific sheaf (e.g. the structure sheaf of some scheme) and then take the disjoint union of all the O_X(U) as U varies over all the open sets and call this thing R, and then you can define the structure sheaf as a function from the set of open subsets of X to the set of subsets of R. Now this thing is a function again. The problem is that rings are supposed to be types, and a subset of R is not a type, it's a term. Moreover R is not a ring; it has many 0s, many 1s, and a weird partially-defined multiplication. Isabelle/HOL's ring theory is not set up to work with either R or its subsets, so they had to redesign ring theory so as to allow subsets of R to be rings. And now the problem is that the theory of tensor products of modules over a ring all has to be rewritten etc etc if you want to do tensor products of O_X-modules. Is it possible in theory? Probably. Will it actually compile in finite time if you try it in practice? Who knows -- this is an unsolved problem.</p>",
        "id": 271312162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644426673
    },
    {
        "content": "<p>OK so now let's move onto Lean. Consider complexes of abelian groups indexed by the integers. This is easy, right? We have A : Z -&gt; Type (Lean can do this) and for each i, A(i) gets an ab gp structure, and then for each i we have d(i) : A(i)-&gt;A(i+1) and the axiom that d^2=0. What could go wrong? Rather surprisingly, when you start looking at homotopies and things you end up looking at d(i-1):A(i-1)-&gt;A((i-1)+1) and guess what: A((i-1)+1) and A(i) are not considered particularly equal by Lean, because (i-1)+1 and i are propositionally equal but not defniitionally equal. Lean can come up with an isomorphism from A((i-1)+1) to A(i) but it's not an equality. All of a sudden there are tons of isomorphisms floating around which you have to keep track of. Now try and prove that a short exact sequence of complexes induces a long exact sequence in cohomology. It's horrible. Can it be done in theory? Maybe. Can it be done in practice? I don't know, because after a lot of thought we came up with a fix where we don't have d(i):A(i)-&gt;A(i+1), d instead takes three inputs i, j, and a proof that j=i+1, and spits out a map from A(i) to A(j). This solves the problems. But this problem needed solving; without it it was going to be absolute hell to do homological algebra; some insight was needed here.</p>",
        "id": 271313016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644426989
    },
    {
        "content": "<p>If that's the situation with complexes of sheaves of abelian groups over a point, now imagine what happens when you put these two things together and start doing complexes of sheaves of abelian groups, and trying to do homological algebra with them. Equality in type theory is hard. There are lots of things which mathematicians think are equal but which are not equal, e.g. for sure you can't have all of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup><mo>×</mo><mi mathvariant=\"double-struck\">R</mi><mo>=</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup><mo>=</mo><mi mathvariant=\"double-struck\">R</mi><mo>×</mo><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\R^2\\times\\R=\\R^3=\\R\\times\\R^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> being true at once, and in Lean none of these are equal. This sounds like just some stupid observation but now try proving that the product of two real manifolds is a manifold -- this issue is real, and I don't know if we have products of manifolds yet.  Problems like this can compound themselves and after a while you can drown. Right now smart people are working out how to deal with these issues, but at the end of the day the point is that mathematicians have an extremely fluid idea of equality, Lean has an extremely precise idea, and then when the ideas don't coincide then you either have to think hard about how to make things more Lean-equal, or you have to bite the bullet and start carrying around invisible isomorphisms, and the moment you have too many of these things writing code gets slower and slower.</p>",
        "id": 271313695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644427248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Where.20is.20Kevin.20when.20you.20need.20him.3F/near/271313016\">said</a>:</p>\n<blockquote>\n<p>we came up with a fix where we don't have d(i):A(i)-&gt;A(i+1), d instead takes three inputs i, j, and a proof that j=i+1, and spits out a map from A(i) to A(j).</p>\n</blockquote>\n<p>I'd run into this problem, too, when trying to prove some things about inverse systems of types. The solution I came up with was to work instead with inverse systems of sets on a \"universal\" type. It's not quite so clear how you'd want to set this up for abelian groups, but it could be done (have a single abelian group <code>A</code>, an endomorphism <code>d : A -&gt; A</code>, a grading <code>g : A -&gt; Z</code>, and axioms that <code>d^2 = 0</code> and that <code>d</code> shifts the grading by 1), while surely pushing some problems elsewhere.</p>\n<p>\"Buffering\" a definition with an equality seems like a useful idea. One thing I wonder is what the difference is in practice between buffering the inductive type or providing an additional buffered interface. (Certainly, having two <code>d</code> operators makes things more annoying since rewrites for one don't apply to the other...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">cplx</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">d'</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">cplx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c.α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">c.α</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">c.d</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 271316444,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644428160
    },
    {
        "content": "<p>One caveat is that you might want to talk about a complex of <code>foo</code>s where the category of <code>foo</code>s doesn't have countable coproducts.</p>",
        "id": 271317133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644428358
    },
    {
        "content": "<p>I haven't tried doing any homological algebra with it so it is very untested, but just to give something closer to what I was doing with having a universal type, rather than using the coproduct trick (which doesn't always work), there's this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">cplx</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">cplx</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">c.A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c.inst</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>Even though there are those <code>subtype</code> coercions in there for <code>d</code>, when you're manipulating elements you can lean on the crutch of cracking everything open to get terms of <code>α</code>. (I didn't need typeclasses to work, however, so I worry by doing this you can easily lose track of the <code>add_comm_group</code> structure...)</p>",
        "id": 271323241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644430331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thanks for this detailed explanation! I still have two questions:</p>\n<p>(1) When you say \"after a while you can drown\", I get that, but we're not talking about \"after a while\", right? In a traditional textbook the product of manifolds might be defined directly after manifolds are defined and a few examples are given. Tensor product of vector bundles can be defined right after vector bundles if you want. Keeping track of that isomorphism sounds annoying but, in the proof that the product of two manifolds is a manifold that I know, it's only used once, to construct another isomorphism. Is the point less that it might not be possible even if someone grits their teeth and writes down a bunch of isomorphisms and more that it might not be possible in a way that produces clean code that is up to your standards? </p>\n<p>(2) When you say maybe something can't be done, are you not comforted by the fact that other, seemingly much more difficult things can be done? Wasn't that the whole point of constructing perfectoid spaces? Do you think that after the Liquid Tensor Experiment finishes with a proof of Theorem 9.1 from Clausen-Scholze, no one will be able to extend it to Theorem 6.5 because it's too difficult to define tensor products of sheaves?</p>",
        "id": 271324098,
        "sender_full_name": "Will Sawin",
        "timestamp": 1644430670
    },
    {
        "content": "<p>He means you can drown if you isomorphism pile up and get out of control.</p>",
        "id": 271326221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644431558
    },
    {
        "content": "<p>We very much hope that there is no fundamental obstacle to formalizing everything, but it requires work.</p>",
        "id": 271326291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644431588
    },
    {
        "content": "<p>For products of manifolds, isn't that some combination of <a href=\"https://leanprover-community.github.io/mathlib_docs/geometry/manifold/smooth_manifold_with_corners.html#model_with_corners.range_eq_univ_prod\">https://leanprover-community.github.io/mathlib_docs/geometry/manifold/smooth_manifold_with_corners.html#model_with_corners.range_eq_univ_prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/geometry/manifold/smooth_manifold_with_corners.html#model_with_corners.range_eq_univ_prod\">https://leanprover-community.github.io/mathlib_docs/geometry/manifold/smooth_manifold_with_corners.html#model_with_corners.range_eq_univ_prod</a> ?</p>",
        "id": 271331222,
        "sender_full_name": "Will Sawin",
        "timestamp": 1644433698
    },
    {
        "content": "<p>We have products of manifolds, but it requires more work than what you think it should.</p>",
        "id": 271331544,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644433868
    },
    {
        "content": "<p>Tensor products of sheaves will probably get done somehow, and hopefully they'll be usable. It's not just about making the definition, it's about proving theorems about the definition. If we have products of manifolds now, do we have that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\times Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>×</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">Y\\times X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> are diffeomorphic? What about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo>×</mo><mi>Y</mi><mo stretchy=\"false\">)</mo><mo>×</mo><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">(X\\times Y)\\times Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>Y</mi><mo>×</mo><mi>Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X\\times (Y\\times Z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">)</span></span></span></span>? These are not idle questions -- mathematicians will inevitably use these facts and they might be really painful to prove. Are they impossible to prove? Hopefully not. But such silly things can present genuine impediments to progress, and when you run out of people who are prepared to put the time and effort into doing them -- when our small pool of volunteers becomes a set of size 0 -- then you're stuck. And you're also stuck (as Johan was a while ago with Witt vectors) if the software decides to start timing out on you, not finding the route to something which you think it should be doing automatically, or taking a long time to find it. We only got Witt vectors in part because Gabriel Ebner actually rewrote a part of core Lean 3 so that it worked better. It is not a given that MSR will randomly rewrite parts of core Lean 4 just because we're stuck on something. It should all work in theory, but whether things work in practice is a different kettle of fish. Things can get unexpectedly complicated sometimes, and it then takes either a good solution from a mathematician or a good solution from a computer scientist  before things can get back on track.</p>",
        "id": 271333602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644434790
    },
    {
        "content": "<p>The product of manifolds could be a good example of isomorphism overload. If you define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> as the usual (type-level) product with the appropriate manifold structure, that's great, but of course one should also prove that this is indeed the product in the category of manifolds. Once one has that, you could write <code>prod X Y</code> where <code>prod</code> refers to a noncomputable <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.prod\">docs#category_theory.limits.prod</a> and then use general nonsense to obtain an isomorphism between <code>prod X Y</code> and <code>prod Y X</code>. The uniqueness of limits would then give you isomorphisms between the actual product you constructed before and this noncomputable <code>prod X Y</code>, so you could compose three isomorphisms to obtain an isomorphism between <code>X x Y</code> and <code>Y x X</code>. Now you have to work with such an isomorphism whenever you want to interchange <code>X</code> and <code>Y</code> in your \"explicit\" product, and it only gets worse from there. (This example is a bit contrived, because it's possible to avoid going through the noncomputable stuff, but in other situations this might be the best approach.)</p>",
        "id": 271335083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644435366
    },
    {
        "content": "<p>Perhaps the systematic use of functors, functors between different proof assistants, might help. One might define a few score proof assistants which are not part of Lean. Then prove various transports and theorems, ah, \"metatheorems\", that justify source to source translations, from, say, a little proof assistant that handles Universal Algebra, style of G. Birkhoff's HSP Theorem on Varieties, to/from Lean.</p>\n<p>Likely something like this has already been done inside Lean.</p>",
        "id": 273926780,
        "sender_full_name": "Jay Sulzberger",
        "timestamp": 1646286904
    }
]