[
    {
        "content": "<p>There are a number of different unioning functions. Is there one that would work here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal_ordinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">Ω</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">s</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">})</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">real</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">Ω</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">δ</span> <span class=\"o\">}</span> <span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 208273995,
        "sender_full_name": "Iocta",
        "timestamp": 1598561250
    },
    {
        "content": "<p>In english, the statement is \"Let X be a random variable with P(X&gt;0)&gt;0. Prove that there is a delta &gt;0 such that P(X&gt;=delta)&gt;0.\"</p>",
        "id": 208274514,
        "sender_full_name": "Iocta",
        "timestamp": 1598561497
    },
    {
        "content": "<p>are you sure <code>pmf (set Ω)</code> is the correct type?</p>",
        "id": 208275630,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598562069
    },
    {
        "content": "<p>a random variable is a measurable function from a probability space to R right</p>",
        "id": 208275825,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598562148
    },
    {
        "content": "<p>and \"P(X&gt;0)\" means the measure of { s | X s &gt; 0 }</p>",
        "id": 208275922,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598562193
    },
    {
        "content": "<p>there is no <code>set.Union</code></p>",
        "id": 208275936,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598562199
    },
    {
        "content": "<p>I feel like at least one of your other imports probably imports <code>data.nat.basic</code> for you</p>",
        "id": 208275996,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598562229
    },
    {
        "content": "<p>I'm not sure if I have the correct type. If I say <code>p: pmf \\Omega</code> <code>X : \\Omega -&gt; real</code>, then <code>h : p { w : \\Omega | X w &gt; 0 } </code> is wrong because <code>p</code> should take omegas, not <code>set Omega</code>s</p>",
        "id": 208276515,
        "sender_full_name": "Iocta",
        "timestamp": 1598562465
    },
    {
        "content": "<p>So idk what <code>h</code> is if <code>p: pmf \\Omega</code>.</p>",
        "id": 208277396,
        "sender_full_name": "Iocta",
        "timestamp": 1598562934
    },
    {
        "content": "<p>What's wrong with this <code>tsum</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">indicator_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">probability_mass_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal_ordinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">example</span>\n<span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"err\">Ω</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"err\">Ω</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">probability_measure</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">ω</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n<span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">ω</span> <span class=\"bp\">≥</span> <span class=\"n\">δ</span> <span class=\"o\">}</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">ω</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n<span class=\"k\">let</span> <span class=\"n\">A&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}),</span> <span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">ω</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">union_to_A</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">A&#39;</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">subadditivity</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">∑&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:{</span><span class=\"n\">n&#39;</span><span class=\"o\">:</span><span class=\"bp\">ℕ|</span><span class=\"n\">n&#39;</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">}),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"n\">A&#39;</span> <span class=\"n\">m</span><span class=\"o\">)))</span>\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   ∑&#39; (n : ↥{n&#39; : ℕ | n&#39; &gt; 0}), λ (m : ↥{n : ℕ | n &gt; 0}), p.to_outer_measure.measure_of (A&#39; m)</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   λ (n m : ↥{n&#39; : ℕ | n&#39; &gt; 0}), p.to_outer_measure.measure_of (A&#39; m)</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   ↥{n&#39; : ℕ | n&#39; &gt; 0} → ↥{n : ℕ | n &gt; 0} → ennreal : Type</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ?m_1 → ennreal : Type ?</span>\n<span class=\"c1\">-- state:</span>\n<span class=\"c1\">-- Ω : Type u,</span>\n<span class=\"c1\">-- _inst_1 : measurable_space Ω,</span>\n<span class=\"c1\">-- p : measure Ω,</span>\n<span class=\"c1\">-- _inst_2 : probability_measure p,</span>\n<span class=\"c1\">-- X : Ω → ℝ,</span>\n<span class=\"c1\">-- h : ⇑p {ω : Ω | X ω &gt; 0} &gt; 0,</span>\n<span class=\"c1\">-- A : set Ω := {ω : Ω | X ω &gt; 0},</span>\n<span class=\"c1\">-- A&#39; : ↥{n : ℕ | n &gt; 0} → set Ω := λ (n : ↥{n : ℕ | n &gt; 0}), {ω : Ω | X ω &gt; 1 / ↑n},</span>\n<span class=\"c1\">-- union_to_A : (⋃ (n : ↥{n : ℕ | n &gt; 0}), A&#39; n) = A</span>\n<span class=\"c1\">-- ⊢ ∃ (δ : ℝ) (H : δ &gt; 0), ⇑p {ω : Ω | X ω ≥ δ} &gt; 0</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208421909,
        "sender_full_name": "Iocta",
        "timestamp": 1598686264
    },
    {
        "content": "<p>the lambda has two parameters <code>n m</code>, but I'm not sure where the <code>n</code> is coming from</p>",
        "id": 208423694,
        "sender_full_name": "Iocta",
        "timestamp": 1598689775
    },
    {
        "content": "<p>I'm on mobile right now and can't really at this, but isn't it about time you started cutting down on your imports? They make your code about twice as long as it needs to be. You'll only need to import about two things to make this work. You know imports are transitive, right?</p>",
        "id": 208425225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598692658
    },
    {
        "content": "<p>is there tooling that will warn me about redundant or unused imports, or do I need to do it manually?</p>",
        "id": 208425455,
        "sender_full_name": "Iocta",
        "timestamp": 1598693063
    },
    {
        "content": "<p>I think you need to do it manually. But to be honest I think doing it manually once will be a good exercise for you, your imports have been growing ever longer over the last few months</p>",
        "id": 208426257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598694671
    }
]