[
    {
        "content": "<p>When I use <code>def</code>, I wonder how to replace the LHS by the RHS of the definition in a proposition. Consider this toy example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">17</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Let's say instead in a more complicated proof I want to for some reason replace an occurance of <code>a</code> with <code>17</code>.  I can trivially do that like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">17</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a_eq_17</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">17</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a_eq_17</span><span class=\"o\">],</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>by just proving a lemma and then using a rewrite, but I'm pretty sure that is not how it should be done.<br>\nHow should this be done?</p>",
        "id": 228732610,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1614845786
    },
    {
        "content": "<p><code>unfold a</code></p>",
        "id": 228733115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614846046
    },
    {
        "content": "<p>or <code>dsimp [a]</code></p>",
        "id": 228733137,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614846058
    },
    {
        "content": "<p>perfect, thanks!</p>",
        "id": 228733231,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1614846105
    },
    {
        "content": "<p>What about doing it in the reverse way, i.e. replace <code>17</code> by <code>a</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">17</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a_eq_17</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">17</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">17</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">a_eq_17</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228733813,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1614846370
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize\">tactic#generalize</a></p>",
        "id": 228733875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614846403
    },
    {
        "content": "<p>Hmm, maybe that's not what you want...</p>",
        "id": 228733939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614846445
    },
    {
        "content": "<p>What you did in the example, is called \"equation lemma\", and it's a useful technique.</p>",
        "id": 228733980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614846477
    },
    {
        "content": "<p>But you can also use <code>show \\ex n, n * n + 1 = a</code>.</p>",
        "id": 228734060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614846502
    },
    {
        "content": "<p>Ok, I see. So it seems to be much easier to substitute in one direction than in the other..</p>",
        "id": 228736448,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1614847810
    },
    {
        "content": "<p>Of course it is. You could have also <code>def b := 17</code> and <code>def c := 17</code> in the same file, so how could Lean know what you want <code>17</code> to be replaced by, if you don't tell it?</p>",
        "id": 228737126,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614848214
    },
    {
        "content": "<p>Of course I didn't expect that it should be replaced without explicitly saying which definition should be reversely substituted. I guess I was expecting something like <code>dsimp [←a]</code>or <code>ununfold a</code> to exist.</p>",
        "id": 228737601,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1614848512
    }
]