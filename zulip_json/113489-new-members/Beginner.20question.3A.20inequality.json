[
    {
        "content": "<p>Hi. What is the preferred way to prove something like: 0 ≠ 1? Right now I'm using:</p>\n<p>example : 0 ≠ 1 :=<br>\nbegin<br>\n   intro h, injection h<br>\nend</p>\n<p>I'm asking because there seems to be multiple ways of doing the same thing in Lean. Some may introduce me to some new tactics.</p>",
        "id": 177316685,
        "sender_full_name": "Chu-Wee Lim",
        "timestamp": 1570174635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242884\">@Chu-Wee Lim</span> This very much depends on what <code>0</code> and <code>1</code> are. Are the natural numbers or integers or real numbers?</p>",
        "id": 177317388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570175571
    },
    {
        "content": "<p>There are many ways, if I saw this or something similar I'd write <code>example : 0 \\ne 1 := dec_trivial</code> to use the fact naturals are decidable, however this lemma is in core (so you can apply it...) but the core proof is here <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/nat/lemmas.lean#L47\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/nat/lemmas.lean#L47\">https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/nat/lemmas.lean#L47</a></p>",
        "id": 177317407,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1570175598
    },
    {
        "content": "<p>In my code above, natural numbers.</p>",
        "id": 177317491,
        "sender_full_name": "Chu-Wee Lim",
        "timestamp": 1570175686
    },
    {
        "content": "<p>The proof of this fact is usually called <code>zero_ne_one</code>. Here is mathlibs proof for real numbers: <a href=\"https://github.com/leanprover-community/mathlib/blob/b5b40c749f2f581778e5d72907eca1aa663962b1/src/data/real/cau_seq_completion.lean#L120\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/b5b40c749f2f581778e5d72907eca1aa663962b1/src/data/real/cau_seq_completion.lean#L120\">https://github.com/leanprover-community/mathlib/blob/b5b40c749f2f581778e5d72907eca1aa663962b1/src/data/real/cau_seq_completion.lean#L120</a></p>",
        "id": 177317493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570175692
    },
    {
        "content": "<p>The generic way to do it is the <code>norm_num</code> tactic.</p>",
        "id": 177317588,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570175788
    },
    {
        "content": "<p>i can never remember the name of lemmas unless i look it up. for stuff like this that is straightforward, you can use <code>example : 0 ≠ 1 := λ h, nat.no_confusion h</code></p>",
        "id": 177330909,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1570189378
    },
    {
        "content": "<p>Aha, this lets me use my trick for the shortest proof ever:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 177331191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570189674
    },
    {
        "content": "<p>That's the way Kevin would have wanted to prove <code>1 ≠ 2</code> on his example sheets on quadratic equations...</p>",
        "id": 177331512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570190047
    },
    {
        "content": "<p>that makes my lean server crash when I apply it to arbitrary lemmas</p>",
        "id": 177331714,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1570190284
    },
    {
        "content": "<p>Can you give a MWE of the crash? It might be something fixable in 3.5.0c.</p>",
        "id": 177342058,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1570198288
    },
    {
        "content": "<blockquote>\n<p>Aha, this lets me use my trick for the shortest proof ever:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n</pre></div>\n\n\n</blockquote>\n<p>How does this work? I've never seen the period in Lean before.</p>",
        "id": 177351639,
        "sender_full_name": "Chu-Wee Lim",
        "timestamp": 1570204005
    },
    {
        "content": "<p>The period is sometimes required to terminate a statement if it is ambiguous whether the statement ends there or not (lean will otherwise proceed parsing, probably encounter the <code>lemma</code> beginning the next statement, interpret the result as a function application and throw an error)</p>",
        "id": 177351844,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570204129
    },
    {
        "content": "<p>As for why it works... <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> Maybe lean tries <code>dec_trivial</code> if you omit the definition of an <code>example</code>?</p>",
        "id": 177351888,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570204160
    },
    {
        "content": "<p>Ah, got it</p>",
        "id": 177352266,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570204420
    },
    {
        "content": "<p>Not is just shorthand for a map to false, so we are just defining a function to false using an empty inductive definition (the <code>match</code>-like syntax)</p>",
        "id": 177352350,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570204452
    },
    {
        "content": "<p><code>0 ≠ 1</code> expands to <code>0 = 1 → false</code>. In general, you can define functions (or prove implications) using the equation compiler, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>The equation compiler is more powerful than this example. If the variables are coming from an inductive type (<code>A</code>), you can destruct them using this syntax.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p><code>0 = 1</code> is an inductive proposition. There's only one way to prove an equality, <code>refl a : a = a</code>. But this can never be applied to prove <code>0 = 1</code>, since they're built with different constructors for <code>nat</code>. The equation compiler figures out that this case is impossible, so you're left with zero applicable cases for the pattern match.</p>",
        "id": 177352355,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570204454
    },
    {
        "content": "<p>Adding a newline after <code>example : 0 ≠ 1.</code> seems to crash the Lean 3.5.0 (nightly-2019-10-01) server. I'll try to MWE later.</p>",
        "id": 177733021,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1570639803
    },
    {
        "content": "<p>Happens to me in 3.4.2 as well, but I can't get it to trigger from the command-line.</p>",
        "id": 177733512,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1570640161
    }
]