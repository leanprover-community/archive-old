[
    {
        "content": "<p>I'm confused about the behavior of <code>rec_on</code>. Specifically, in the example below, I'm trying to prove something is true for both instances of my inductive definition  <code>mult_3</code>, which only has two cases, but I'm getting three new goal states. In term mode, I understand that <code>rec_on</code> takes in three args, but isn't the goal state here the \"first\" of those three? The first goal I get when I do this looks identical to the original goal state as well, which doesn't seem right. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">mult_3</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">mult_3_O</span> <span class=\"o\">:</span>\n    <span class=\"n\">mult_3</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">mult_3_SSS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">mult_3</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"n\">mult_3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">mult_3</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">mult_3</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193544046,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586503131
    },
    {
        "content": "<p>don't use <code>rec_on</code> in tactic mode. Instead, use <code>induction</code></p>",
        "id": 193544073,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586503181
    },
    {
        "content": "<p>if you want to keep the orders of the arguments when using <code>apply</code>, use <code>fapply</code></p>",
        "id": 193544125,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586503213
    },
    {
        "content": "<p>also try minimize the number of lines by using <code>apply mult_3.rec_on hk</code> instead</p>",
        "id": 193544138,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586503242
    },
    {
        "content": "<p>but preferably use <code>induction hk</code></p>",
        "id": 193544144,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586503254
    },
    {
        "content": "<p>It seems like <code>induction</code> defaults to the type of the variable I apply it to. Is there a way to tell <code>induction</code> that I want it to work on the cases of <code>mult_3</code> instead of the cases of <code>nat</code>, even though everything in <code>hk</code> is a <code>nat</code>?</p>",
        "id": 193544562,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586503778
    },
    {
        "content": "<p>If you have some <code>hyp : mult_3 n</code> then <code>induction hyp</code> should perform structural induction on <code>mult_3</code> instead of ordinary induction on <code>n</code>.</p>",
        "id": 193544874,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586504117
    },
    {
        "content": "<p>it looks like I misread the whole thing. The instance of <code>mult_3</code> is in your goal, not your hypothesis.</p>",
        "id": 193545405,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586504632
    },
    {
        "content": "<p>so 1. <code>mult_3.rec_on</code> will never work because it is used for destructing an instance of <code>mult_3</code> in your hypothesis, and 2. you should induct on <code>k</code> instead</p>",
        "id": 193545491,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586504701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113489-new-members/topic/Rec_on.20arguments/near/193544874\" title=\"#narrow/stream/113489-new-members/topic/Rec_on.20arguments/near/193544874\">said</a>:</p>\n<blockquote>\n<p>If you have some <code>hyp : mult_3 n</code> then <code>induction hyp</code> should perform structural induction on <code>mult_3</code> instead of ordinary induction on <code>n</code>.</p>\n</blockquote>\n<p>Interesting. That makes sense, and seems to be working for me, but it feels weird to have to make something of that type just to tell induction to act on it. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Rec_on.20arguments/near/193545405\" title=\"#narrow/stream/113489-new-members/topic/Rec_on.20arguments/near/193545405\">said</a>:</p>\n<blockquote>\n<p>it looks like I misread the whole thing. The instance of <code>mult_3</code> is in your goal, not your hypothesis.</p>\n</blockquote>\n<p>Yeah I'm trying to show <code>mult_3 n </code>.</p>",
        "id": 193545524,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586504741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Rec_on.20arguments/near/193545491\" title=\"#narrow/stream/113489-new-members/topic/Rec_on.20arguments/near/193545491\">said</a>:</p>\n<blockquote>\n<p>so 1. <code>mult_3.rec_on</code> will never work because it is used for destructing an instance of <code>mult_3</code> in your hypothesis, and 2. you should induct on <code>k</code> instead</p>\n</blockquote>\n<p>I tried inducting on k  and got stuck here. My thinking was that this was tricky because I should have been exploiting the structure of mult_3 more directly, but maybe there's a way forward I'm not seeing? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">mult_3</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">mult_3</span><span class=\"bp\">.</span><span class=\"n\">mult_3_O</span><span class=\"o\">,</span>\n\n<span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Edit: copied the wrong code initially and had to modify.</p>",
        "id": 193546605,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586505707
    },
    {
        "content": "<p>This is no good -- your induction hypothesis is useless.</p>",
        "id": 193546784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586505843
    },
    {
        "content": "<p>You need to do induction before the intro. You need to think carefully about precisely which statement you need to prove by induction.</p>",
        "id": 193546815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586505881
    },
    {
        "content": "<p>actually, rewrite, and then induct on <code>k</code> to prove <code>mult_3 (3 * k)</code></p>",
        "id": 193546842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586505916
    },
    {
        "content": "<p>Even better.</p>",
        "id": 193546861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586505935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Rec_on.20arguments/near/193546842\" title=\"#narrow/stream/113489-new-members/topic/Rec_on.20arguments/near/193546842\">said</a>:</p>\n<blockquote>\n<p>actually, rewrite, and then induct on <code>k</code> to prove <code>mult_3 (3 * k)</code></p>\n</blockquote>\n<p>This seems a lot better but I'm still getting stuck at the end with my index off by one. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">mult_3</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">mult_3</span><span class=\"bp\">.</span><span class=\"n\">mult_3_O</span><span class=\"o\">,</span>\n\n<span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_one</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">mult_3</span><span class=\"bp\">.</span><span class=\"n\">mult_3_SSS</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193547481,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586506543
    },
    {
        "content": "<p>you need to delete hypothesis <code>h</code> before the induction, or else it will get automatically pulled into the induction hypothesis making it useless</p>",
        "id": 193547666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586506687
    },
    {
        "content": "<p>alternatively you can use <code>induction k with l hl generalizing n</code>, but the variable <code>n</code> is already useless by that point so there is no reason to</p>",
        "id": 193547696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586506719
    },
    {
        "content": "<p>The formalisation of the question itself is bad</p>",
        "id": 193547728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586506750
    },
    {
        "content": "<p>n plays no role and is now screwing you up</p>",
        "id": 193547733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586506767
    },
    {
        "content": "<p>Just prove mult_3 (3*k) and drop the n</p>",
        "id": 193547744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586506788
    },
    {
        "content": "<p>You don't want a function which demands n as an input and then immediately demands a proof that it's equal to something else</p>",
        "id": 193547833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586506864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Rec_on.20arguments/near/193547744\" title=\"#narrow/stream/113489-new-members/topic/Rec_on.20arguments/near/193547744\">said</a>:</p>\n<blockquote>\n<p>Just prove mult_3 (3*k) and drop the n</p>\n</blockquote>\n<p>So the larger proof I'm trying to write uses <code>def div3 (n:ℕ) := ∃ (k : ℕ), n = 3*k</code>, and the question would be stated as <code>div n \\r  mult_3 n</code>but I felt like that would have cluttered this example. I agree this formalism is bad.</p>",
        "id": 193548069,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586507108
    },
    {
        "content": "<p>You can do the small amount of logical glue to connect <code>mult_3 (3*k)</code> to <code>3 \\| n -&gt;  mult_3 n</code> in the proof of the latter</p>",
        "id": 193548185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586507209
    },
    {
        "content": "<p>This is how I was ultimately able to do it. I kept get stuck not generalizing my n properly at the end with the induction on k, but induction on <code>hyp : mult_3 n</code> worked. Maybe I'm missing something. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">mult_3</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">mult_3_O</span> <span class=\"o\">:</span>\n    <span class=\"n\">mult_3</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">mult_3_SSS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">mult_3</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"n\">mult_3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div3</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">mult_3</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>  <span class=\"n\">mult_3</span><span class=\"bp\">.</span><span class=\"n\">mult_3_O</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">div3_imp_p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">mult_3</span> <span class=\"n\">n</span><span class=\"o\">}:</span> <span class=\"n\">div3</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">mult_3</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">div3</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">mult_3</span><span class=\"bp\">.</span><span class=\"n\">mult_3_SSS</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hyp_a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193636971,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586570458
    },
    {
        "content": "<p>The statement of <code>div3_imp_p</code> is nonsense; you can prove it by <code>exact hyp</code> on the first line</p>",
        "id": 193638251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586572306
    },
    {
        "content": "<p>you've assumed what you wanted to prove</p>",
        "id": 193638293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586572339
    },
    {
        "content": "<p>This is a totally unfair proof since you probably haven't seen most of these tricks but fwiw</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">div3_imp_p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">div3</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">mult_3</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193638448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586572649
    },
    {
        "content": "<p>or the one liner version</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">div3_imp_p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">div3</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">mult_3</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n</pre></div>",
        "id": 193638551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586572808
    },
    {
        "content": "<p>Cool! Yeah I'm not too familiar with most of those tactics so I'll read up some more.</p>",
        "id": 193639087,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586573967
    },
    {
        "content": "<p>Here is the same proof but being more explicit about the changes</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">div3_imp_p</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">div3</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mult_3</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">div3</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mult_3</span><span class=\"bp\">.</span><span class=\"n\">mult_3_O</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mult_3</span><span class=\"bp\">.</span><span class=\"n\">mult_3_SSS</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193639312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586574381
    },
    {
        "content": "<p>The <code>unfold</code>, <code>rw mul_zero</code> and <code>change</code> steps are optional because they make definitionally equal changes to the goal</p>",
        "id": 193639316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586574429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> feel free to post your short solutions <a href=\"https://www.codewars.com/kata/5cc47f8c4b8fea001de6d226/lean\" title=\"https://www.codewars.com/kata/5cc47f8c4b8fea001de6d226/lean\">here</a></p>",
        "id": 193641302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586578499
    }
]