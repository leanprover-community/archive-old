[
    {
        "content": "<p>Can anyone explain why this is expected behavior in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Array literal declaration and subscripts.</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"sc\">'a'</span><span class=\"o\">,</span> <span class=\"sc\">'b'</span><span class=\"o\">,</span> <span class=\"sc\">'c'</span><span class=\"o\">][</span><span class=\"mi\">4</span><span class=\"o\">]</span>     <span class=\"bp\">■</span> <span class=\"sc\">'A'</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"sc\">'b'</span><span class=\"o\">,</span> <span class=\"sc\">'c'</span><span class=\"o\">,</span> <span class=\"sc\">'d'</span><span class=\"o\">][</span><span class=\"mi\">4</span><span class=\"o\">]</span>     <span class=\"bp\">■</span> <span class=\"sc\">'A'</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">][</span><span class=\"mi\">4</span><span class=\"o\">]</span>     <span class=\"bp\">■</span> <span class=\"mi\">0</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"s2\">\"aa\"</span><span class=\"o\">,</span> <span class=\"s2\">\"aaa\"</span><span class=\"o\">][</span><span class=\"mi\">4</span><span class=\"o\">]</span>     <span class=\"bp\">■</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>I expect it has something to do with wanting the \"subscript\" function to be total. This seems like javascript-level silent failure inducing behavior to me. I thought one of the big selling points of dependent types was the whole <code>Vector</code> example thing (I'm thinking of one of Edwin Brady's talks), where we can't get index errors because the length of our containers is encoded in the type?</p>\n<p>Is <code>Array</code> a type that most users aren't supposed to touch, or something that only exists because it's very fast in certain special cases or something?</p>",
        "id": 284206657,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1653708268
    },
    {
        "content": "<p>Length isn't in the type of <code>Array</code>. The notation here uses <code>Array.getOp</code>, so it's returning the default element of the type. Collections generally have methods like <code>Array.get</code> that take a proof the access is in-bounds to ensure safe access.</p>\n<p>I think the three options for default behavior in this case are 1. crash, 2. return an <code>Option A</code>, or 3. return a default element. I wouldn't call the third option failure, but I sort of agree it's the most likely to hide a bug. I'm not sure if there's a reason they went with that or if it's set in stone.</p>",
        "id": 284207154,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1653708916
    },
    {
        "content": "<p>I'm not sure if there's a public indexing function that panics yet, so that might be part of it.</p>",
        "id": 284207337,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1653709190
    },
    {
        "content": "<p>Thanks very much for the explanation! I understand length isn't in the type of <code>Array</code>. I guess my question is more why <code>Array</code> exists at all, and in particular why something that is unsafe like this is given \"priority\" notation, if that makes any sense. When would you need something that doesn't take a proof of in-bounds-ness?</p>",
        "id": 284207478,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1653709420
    },
    {
        "content": "<p>You need it if you don't know that your index is in-bounds statically. <code>get</code> with some default to cover failure is the same thing as trying to generate the proof at runtime. Even if you made every sequence in your code <code>Vec A n</code> at the type level, it's unlikely that you'll always be able to tell that a given <code>i</code> is in-bounds without testing it, at which point you need some behavior if it's not actually in-bounds.</p>\n<p>As for why the default is what it is, I think it's probably some combination of what I mentioned. There might not be a preferable alternative they can implement with what's public at this point in development, and I don't think they've spent a lot of time trying to put a razor fine edge on the public API. They might change it in the future.</p>",
        "id": 284208245,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1653710444
    },
    {
        "content": "<p>I see, that makes a lot of sense, thanks!</p>",
        "id": 284208383,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1653710591
    },
    {
        "content": "<p>Another thing is that sometimes it's easier to write an algorithm and prove that it's correct than to prove each step is safe inline. That's easier said than done at the moment with <code>Array</code>, though, since there aren't so many lemmas about it.</p>",
        "id": 284214031,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653719849
    },
    {
        "content": "<p><code>Array</code> is an implementation of <code>List</code> that at runtime is represented by a contiguous block of memory. As far as I know, it's meant to be used. It has the special feature that the Lean compiler will turn functional modifications of an <code>Array</code> into actual mutations.</p>",
        "id": 284214144,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653720056
    }
]