[
    {
        "content": "<p>I'm proving the following theorem in Lean.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">progress</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">has_type</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span><span class=\"n\">t&#39;</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">-+&gt;</span> <span class=\"n\">t&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">tm</span><span class=\"bp\">.</span><span class=\"n\">var</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">var_not_has_type_empty_context</span> <span class=\"n\">ht</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">tm</span><span class=\"bp\">.</span><span class=\"n\">abs</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">v_abs</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">tm</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"o\">{</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">tm</span><span class=\"bp\">.</span><span class=\"n\">tru</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">v_tru</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">tm</span><span class=\"bp\">.</span><span class=\"n\">fls</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">v_fls</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">tm</span><span class=\"bp\">.</span><span class=\"n\">tst</span><span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">t₃</span> <span class=\"n\">ih₁</span> <span class=\"n\">ih₂</span> <span class=\"n\">ih₃</span> <span class=\"o\">{</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>If I remove <code>sorry</code> in <code>case tm.app</code>, Lean tells me that <code>ih₁</code> has type <code>has_type context.empty t₁ T -&gt; value t₁ ∨ ∃t', t₁ -+&gt; t'</code>, which is wrong.</p>\n<p>The definitions for <code>ty</code>, <code>tm</code>, <code>value</code>, and <code>has_type</code> can be found <a href=\"https://github.com/minhnhdo/programming-language-foundations-in-lean/blob/master/stlc.lean\" target=\"_blank\" title=\"https://github.com/minhnhdo/programming-language-foundations-in-lean/blob/master/stlc.lean\">here</a>.</p>\n<p>Can anyone please give me a hint on how to proceed?</p>",
        "id": 168218890,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560624523
    },
    {
        "content": "<p>why is it wrong?</p>",
        "id": 168219288,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560625313
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">tm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ty</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span>\n<span class=\"bp\">|</span> <span class=\"n\">tru</span> <span class=\"o\">:</span> <span class=\"n\">tm</span>\n<span class=\"bp\">|</span> <span class=\"n\">fls</span> <span class=\"o\">:</span> <span class=\"n\">tm</span>\n<span class=\"bp\">|</span> <span class=\"n\">tst</span> <span class=\"o\">:</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tm</span>\n</pre></div>\n\n\n<p>in particular <code>| app : tm -&gt; tm -&gt; tm</code>, so <code>case tm.app</code> reads \"<code>t</code> is now <code>tm.app t1 t2</code> where <code>t1</code> and <code>t2</code> satisfy the proposition, and we prove that <code>t</code> also satisfies the proposition\"</p>",
        "id": 168219333,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560625381
    },
    {
        "content": "<p>the proposition of course being <code>has_type context.empty t T -&gt; value t or exists t', t -+&gt; t'</code></p>",
        "id": 168219340,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560625411
    },
    {
        "content": "<p>it should have type <code>has_type context.empty t₁ (arrow T₁ T₂) -&gt; value t₁ ∨ ∃t', t₁ -+&gt; t'</code></p>",
        "id": 168219386,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560625479
    },
    {
        "content": "<p>how should I change the definition of <code>tm</code> to make that happen?</p>",
        "id": 168219393,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560625497
    },
    {
        "content": "<p>you should induct on <code>ht</code> instead</p>",
        "id": 168219409,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560625546
    },
    {
        "content": "<p>I'm translating the definition in Coq found <a href=\"https://softwarefoundations.cis.upenn.edu/plf-current/Stlc.html#lab204\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu/plf-current/Stlc.html#lab204\">here</a> to Lean and I'm not doing a good job at it</p>",
        "id": 168219463,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560625618
    },
    {
        "content": "<p>induction on <code>ht</code> also gives me wrong hypotheses, such as a new <code>context</code> (named <code>ht_context</code>) for <code>case has_type.t_var</code></p>",
        "id": 168219512,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560625709
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 168219580,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560625840
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">progress</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">has_type</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span><span class=\"n\">t&#39;</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">-+&gt;</span> <span class=\"n\">t&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">generalize</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_var</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">he</span> <span class=\"n\">at</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_abs</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_app</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_tru</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_fls</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_tst</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168219945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560626436
    },
    {
        "content": "<p>Could you please explain what revert and generalize does?</p>",
        "id": 168220082,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560626727
    },
    {
        "content": "<p>revert and generalize are also explained here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#basic-tactics\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#basic-tactics\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html#basic-tactics</a></p>",
        "id": 168220154,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1560626847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224162\">@Do Nhat Minh</span> you can compare the state before and after those tactics</p>",
        "id": 168220279,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560627029
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">progress</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">has_type</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span><span class=\"n\">t&#39;</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">-+&gt;</span> <span class=\"n\">t&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"c\">/-</span><span class=\"cm\">  state 1 -/</span>\n  <span class=\"n\">revert</span> <span class=\"n\">ht</span><span class=\"o\">,</span>  <span class=\"c\">/-</span><span class=\"cm\"> state 2 -/</span> <span class=\"n\">generalize</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">,</span>  <span class=\"c\">/-</span><span class=\"cm\"> state 3 -/</span> <span class=\"n\">intro</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_var</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">he</span> <span class=\"n\">at</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_abs</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_app</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_tru</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_fls</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_tst</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168220289,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560627061
    },
    {
        "content": "<p>state 1:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">,</span>\n<span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">,</span>\n<span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">has_type</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">t</span> <span class=\"n\">T</span>\n<span class=\"err\">⊢</span> <span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">-+&gt;</span> <span class=\"n\">t&#39;</span>\n</pre></div>\n\n\n<p>state 2:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">,</span>\n<span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ty</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_type</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">t</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">-+&gt;</span> <span class=\"n\">t&#39;</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>state 3:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">,</span>\n<span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">,</span>\n<span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_type</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tm</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">-+&gt;</span> <span class=\"n\">t&#39;</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 168220300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560627088
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">progress</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">has_type</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span><span class=\"n\">t&#39;</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">-+&gt;</span> <span class=\"n\">t&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">generalize</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_var</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">he</span> <span class=\"n\">at</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ht</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_abs</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_app</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h₃</span> <span class=\"n\">he</span> <span class=\"k\">with</span> <span class=\"n\">h₅</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₄</span> <span class=\"n\">he</span> <span class=\"k\">with</span> <span class=\"n\">h₆</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h₅</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">st_appabs</span> <span class=\"n\">h₆</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h₆</span> <span class=\"k\">with</span> <span class=\"n\">t&#39;</span> <span class=\"n\">h₆</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">st_app2</span> <span class=\"n\">h₅</span> <span class=\"n\">h₆</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h₅</span> <span class=\"k\">with</span> <span class=\"n\">t&#39;</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">st_app1</span> <span class=\"n\">h₅</span> <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_tru</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_fls</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">has_type</span><span class=\"bp\">.</span><span class=\"n\">t_tst</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">y</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">t₃</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span> <span class=\"n\">h₅</span> <span class=\"n\">h₆</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168221313,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560628925
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> !</p>",
        "id": 168235749,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560660194
    },
    {
        "content": "<p>That helps!</p>",
        "id": 168235750,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560660202
    },
    {
        "content": "<p>Thanks for the pointer, <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span></p>",
        "id": 168235753,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560660231
    },
    {
        "content": "<p>I've read the whole book but the explanation for <code>generalize</code> is not clear to me</p>",
        "id": 168235803,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560660289
    },
    {
        "content": "<p>If you want to prove <code>P foo</code>, it suffices to prove <code>\\forall x, P x</code>. <code>generalize : foo = x</code> will do that. Similarly, it suffices to prove <code>\\forall x, foo = x -&gt; P x</code>, and <code>generalize h : foo = x</code> will do that (introducing <code>x</code> and <code>h : foo = x</code>).</p>",
        "id": 168237405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560663914
    },
    {
        "content": "<p>That really helps! Thanks, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> !</p>",
        "id": 168255310,
        "sender_full_name": "Do Nhat Minh",
        "timestamp": 1560696178
    }
]