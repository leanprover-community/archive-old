[
    {
        "content": "<p>I'm trying to understand the construction of set.<br>\nI would like to prove that something is a member a of a set defined by a predicate, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">coe</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but the goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>when I want it to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"mi\">0</span><span class=\"bp\">*↑</span><span class=\"mi\">0</span>  <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 229865598,
        "sender_full_name": "Florestan",
        "timestamp": 1615475896
    },
    {
        "content": "<p>Two approaches:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In the first one, you ask Lean to expand the definition of <code>S</code>. In the second one, you do the expansion yourself, but you ask Lean to check that this is still the same question (this is the role of <code>change</code>)</p>",
        "id": 229867539,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615476552
    },
    {
        "content": "<p>Great, thank you !</p>",
        "id": 229867933,
        "sender_full_name": "Florestan",
        "timestamp": 1615476695
    },
    {
        "content": "<p>And instead of using <code>change</code> you can also write <code>rw set.mem_set_of_eq</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of_eq\">docs#set.mem_set_of_eq</a>). That lemma states <code>a ∈ {a : α | p a} = p a</code>.</p>",
        "id": 229868260,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1615476799
    }
]