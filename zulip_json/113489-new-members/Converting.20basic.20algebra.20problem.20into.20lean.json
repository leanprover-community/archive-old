[
    {
        "content": "<p>I want to convert some algebra problems into a lean theorem. Here's one for example: Write x<em>x</em>x<em>y</em>y in exponential notation. How could i formulate this in lean?</p>",
        "id": 197503726,
        "sender_full_name": "Jake",
        "timestamp": 1589428105
    },
    {
        "content": "<p>Maybe:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 197503895,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589428412
    },
    {
        "content": "<p>are there algebra simplification features in lean? like say i had a more complicated example with all kinds of operations (including trig functions and rational expressions). Or could i just test for equality numerically somehow?</p>",
        "id": 197504022,
        "sender_full_name": "Jake",
        "timestamp": 1589428639
    },
    {
        "content": "<p>Most likely not in the sense you're thinking of, though <a href=\"https://github.com/leanprover-community/mathlib/blob/master/test/simp_command.lean\"><code>#simp</code> can do some basic stuff</a>.</p>",
        "id": 197504109,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589428782
    },
    {
        "content": "<p>what does Type* mean?</p>",
        "id": 197504290,
        "sender_full_name": "Jake",
        "timestamp": 1589429030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245155\">@Jake</span> Are you asking about the <code>Type</code> in <code>Type*</code> or the <code>*</code> in <code>Type*</code>, or both?</p>",
        "id": 197504368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589429137
    },
    {
        "content": "<p>The * in Type</p>",
        "id": 197504405,
        "sender_full_name": "Jake",
        "timestamp": 1589429162
    },
    {
        "content": "<p>Im on chapter 4 of hitchhikers and did the natural number game and havent seen that</p>",
        "id": 197504419,
        "sender_full_name": "Jake",
        "timestamp": 1589429182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245155\">@Jake</span> It means <code>Type u</code> for a fresh new universe <code>u</code>.</p>",
        "id": 197504423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589429221
    },
    {
        "content": "<p>Have you read about universes already? If not, just ignore it.</p>",
        "id": 197504429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589429239
    },
    {
        "content": "<p>kk ya ill just come back to that</p>",
        "id": 197504438,
        "sender_full_name": "Jake",
        "timestamp": 1589429277
    },
    {
        "content": "<p>There's a brief discussion in 11.1 of Hitchhiker's guide. But I agree with Johan.</p>",
        "id": 197504439,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589429280
    },
    {
        "content": "<p>in theory i can make my own equality type class that tests for equality numerically?</p>",
        "id": 197504615,
        "sender_full_name": "Jake",
        "timestamp": 1589429614
    },
    {
        "content": "<p>What does that mean?</p>",
        "id": 197504668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589429679
    },
    {
        "content": "<p>You mean</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">approx_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some_def</span>\n</code></pre></div>\n\n\n<p>¿Or something else?</p>",
        "id": 197504684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589429725
    },
    {
        "content": "<p>ya what you wrote!</p>",
        "id": 197504688,
        "sender_full_name": "Jake",
        "timestamp": 1589429739
    },
    {
        "content": "<p>Because this only makes sense for real numbers (and a couple of other types) but not something general.</p>",
        "id": 197504709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589429761
    },
    {
        "content": "<p>yeah only for real numbers</p>",
        "id": 197504751,
        "sender_full_name": "Jake",
        "timestamp": 1589429778
    },
    {
        "content": "<p>Not really, because you can't evaluate elements of type <code>real</code></p>",
        "id": 197505805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589431466
    },
    {
        "content": "<p>If you made a <code>float</code> type (that isn't really <code>real</code>) with floating point approximations of real numbers then you could define <code>approx_eq</code> on that</p>",
        "id": 197505902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589431602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245155\">@Jake</span> here's a way of formalising the question which doesn't give the answer away:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>As for not having seen stuff, yeah, we're working on it. There is still not enough teaching material for beginners. Hopefully by July this will have changed.</p>",
        "id": 197511025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589438655
    },
    {
        "content": "<p>Yes that's more what i had in mind, thank you! Looking forward to new learning material</p>",
        "id": 197511509,
        "sender_full_name": "Jake",
        "timestamp": 1589439161
    },
    {
        "content": "<p>we could also formalize \"normal forms\"</p>",
        "id": 197511905,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589439327
    },
    {
        "content": "<p>right <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  the problem im really trying to solve here is show the existence of an expression that is equal to the expression you started with and is in the proper normal form</p>",
        "id": 197513200,
        "sender_full_name": "Jake",
        "timestamp": 1589440463
    },
    {
        "content": "<p>so first define normal form</p>",
        "id": 197513270,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589440530
    },
    {
        "content": "<p>for that specific example id need the normal form to be some predicate that returns true for x^a y^b or y^b x^a, and false otherwise</p>",
        "id": 197513512,
        "sender_full_name": "Jake",
        "timestamp": 1589440698
    },
    {
        "content": "<p>that is not a normal form</p>",
        "id": 197513552,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589440717
    },
    {
        "content": "<p>because x^a y^b = y^b x^a</p>",
        "id": 197513558,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589440723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245155\">@Jake</span> That won't work, because <code>x * x = x^2</code>. If one of them is in normal form, so is the other.</p>",
        "id": 197513628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589440783
    },
    {
        "content": "<p>You are caring about syntax, so you can't work with actual terms of type <code>real</code> or whatever.</p>",
        "id": 197513691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589440805
    },
    {
        "content": "<p>right sorry normal form is not the correct term for what im describing</p>",
        "id": 197513717,
        "sender_full_name": "Jake",
        "timestamp": 1589440831
    },
    {
        "content": "<p>You either need to go <code>meta</code> and work with <code>expr</code>, or you need to define a type of expressions yourself</p>",
        "id": 197513721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589440834
    },
    {
        "content": "<p>But I'm not sure if this is really what you should want to do.</p>",
        "id": 197513755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589440865
    },
    {
        "content": "<p>Because it's a lot of work, and I'm not sure what you would gain.</p>",
        "id": 197513767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589440882
    },
    {
        "content": "<p>If you are interested in automatically reorganising expressions in the theory of commutative rings, you can look at what the <code>ring</code> tactic does. It puts expressions in some normal form, and then tries to prove equalities.</p>",
        "id": 197513856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589440929
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">normal_form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">normal_form</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">normal_form</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">normal_form</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">b</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">normal_form</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">normal_form</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">normal_form</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 197513877,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589440943
    },
    {
        "content": "<p>ok the problems much clearer now, thank you</p>",
        "id": 197514382,
        "sender_full_name": "Jake",
        "timestamp": 1589441336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245155\">@Jake</span> What is wrong with Kevin Buzzard's version of the statement?</p>",
        "id": 197514532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441445
    },
    {
        "content": "<p>I don't think you need to be formalizing normal forms for this question</p>",
        "id": 197514582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589441490
    },
    {
        "content": "<p>There is a general phenomenon, which I am only too aware of, where there are \"questions\" given to mathematicians which are hard to formalise in the sense that the question is not well-specified. We all know the \"underlying meaning\" of the question here, but there are several ways to formalise it, and people are just playing with these ideas I guess.</p>",
        "id": 197514608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589441516
    },
    {
        "content": "<p>\"For which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> are all groups of order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> abelian?\" is one of my favourites.</p>",
        "id": 197514671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589441538
    },
    {
        "content": "<p>Try formalising that in Lean :-)</p>",
        "id": 197514687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589441551
    },
    {
        "content": "<p>theres nothing wrong for this particular question, im just trying build a mental model of how this would generalize to other problems</p>",
        "id": 197514700,
        "sender_full_name": "Jake",
        "timestamp": 1589441574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Converting.20basic.20algebra.20problem.20into.20lean/near/197504423\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245155\">Jake</span> It means <code>Type u</code> for a fresh new universe <code>u</code>.</p>\n</blockquote>\n<p>Probably too subtle for this thread, but as far as I can tell it actually just means <code>Type _</code>.</p>",
        "id": 197523235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589444900
    }
]