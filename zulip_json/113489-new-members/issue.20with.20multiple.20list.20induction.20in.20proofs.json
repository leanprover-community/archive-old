[
    {
        "content": "<p>I have defined a special kind of list addition, <code>ladd</code>, which adds two lists with entries in a ring <code>R</code> pairwise (starting from the head of the list), and cuts off remaining elements at the end if one of the lists is longer than the other.  In proving that this operation is commutative, I've run into issues. I don't know how to perform induction on multiple objects at once during a proof, and inducting on them separately results in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- MWE</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- list addition</span>\n<span class=\"kd\">def</span> <span class=\"n\">ladd</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">list.zip_with</span> <span class=\"o\">(</span><span class=\"n\">has_add.add</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- useful lemmata</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_nil_left</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ladd</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_nil_right</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ladd</span> <span class=\"n\">l</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"c1\">-- WTS ladd is commutative</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ladd_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">ladd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">ladd</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- doing induction  one at a time</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_nil_left</span><span class=\"o\">,</span> <span class=\"n\">add_nil_right</span><span class=\"o\">],</span>\n<span class=\"n\">induction</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_nil_right</span><span class=\"o\">,</span> <span class=\"n\">add_nil_left</span><span class=\"o\">],</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">x_hd</span> <span class=\"bp\">+</span> <span class=\"n\">y_hd</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">ladd</span> <span class=\"n\">x_tl</span> <span class=\"n\">y_tl</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y_hd</span> <span class=\"bp\">+</span> <span class=\"n\">x_hd</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">ladd</span> <span class=\"n\">y_tl</span> <span class=\"n\">x_tl</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"n\">congr</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- iterated induction doesn't get to the right goal</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The end tactic state gives us <code>y_ih</code>, and implication with the current goal as the hypothesis, which seems to be useless, and the current goal is the same as the statement of the theorem, just with the heads of the lists removed. The same problem occurs when trying to prove associativity as well. I'm not sure how to progress here.</p>",
        "id": 220721998,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1608663230
    },
    {
        "content": "<p>You might like the lemmas and proofs in recent PR <a href=\"https://github.com/leanprover-community/mathlib/issues/5455\">#5455</a></p>",
        "id": 220722562,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608663553
    },
    {
        "content": "<p>Another crucial element is <code>induction ... generalizing ...</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- MWE</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- list addition</span>\n<span class=\"kd\">def</span> <span class=\"n\">ladd</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">list.zip_with</span> <span class=\"o\">(</span><span class=\"n\">has_add.add</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- useful lemmata</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_nil_left</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ladd</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_nil_right</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ladd</span> <span class=\"n\">l</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">zip_with_cons_cons</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.zip_with</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">list.zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- WTS ladd is commutative</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ladd_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">ladd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">ladd</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">hl</span> <span class=\"n\">generalizing</span> <span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"c1\">-- doing induction, have to generalize l'</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_nil_left</span><span class=\"o\">,</span> <span class=\"n\">add_nil_right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">l'</span> <span class=\"k\">with</span> <span class=\"n\">hd'</span> <span class=\"n\">tl'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_nil_left</span><span class=\"o\">,</span> <span class=\"n\">add_nil_right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ladd</span> <span class=\"n\">at</span> <span class=\"n\">hl</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zip_with_cons_cons</span><span class=\"o\">,</span> <span class=\"n\">zip_with_cons_cons</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220722879,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608663733
    },
    {
        "content": "<p>With a simp:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- MWE</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- list addition</span>\n<span class=\"kd\">def</span> <span class=\"n\">ladd</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">list.zip_with</span> <span class=\"o\">(</span><span class=\"n\">has_add.add</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- useful lemmata</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">add_nil_left</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ladd</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_nil_right</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ladd</span> <span class=\"n\">l</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">zip_with_cons_cons</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.zip_with</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">list.zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- WTS ladd is commutative</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ladd_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">ladd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">ladd</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">hl</span> <span class=\"n\">generalizing</span> <span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"c1\">-- doing induction, have to generalize l'</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_nil_left</span><span class=\"o\">,</span> <span class=\"n\">add_nil_right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">l'</span> <span class=\"k\">with</span> <span class=\"n\">hd'</span> <span class=\"n\">tl'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_nil_left</span><span class=\"o\">,</span> <span class=\"n\">add_nil_right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">ladd</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hl</span> <span class=\"n\">tl'</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220723036,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608663821
    },
    {
        "content": "<p>A good lemma to prove (and possibly PR) is that this is true for any <code>commutative</code> function.</p>",
        "id": 220723139,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608663865
    },
    {
        "content": "<p>Right, it did seem as though the list library was a little lackluster. Thanks for the help, I didn't know about the <code>generalizing</code> trick.</p>",
        "id": 220723494,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1608664092
    },
    {
        "content": "<p>That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- MWE</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- list addition</span>\n<span class=\"kd\">def</span> <span class=\"n\">ladd</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">list.zip_with</span> <span class=\"o\">(</span><span class=\"n\">has_add.add</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_prove</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_commutative</span> <span class=\"n\">α</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">commutative</span> <span class=\"o\">(</span><span class=\"n\">list.zip_with</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- WTS ladd is commutative</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ladd_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">ladd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">ladd</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ladd</span><span class=\"o\">,</span> <span class=\"n\">to_prove</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220723696,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608664221
    },
    {
        "content": "<p>And from looking at the definitions, you might notice that your <code>ladd</code> is too constrained, it could work for something more general than a <code>ring</code></p>",
        "id": 220723753,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608664259
    }
]