[
    {
        "content": "<p>I can represent the set of all binary strings of length 3 as the type <code>(fin 3) \\to (fin 2)</code>. Is there a way to associate that type with lists <code>[0,0,0]</code>, <code>[0,0,1]</code>, ...? Or in other words, instead of writing <code>list (fin 2)</code> is there something like <code>list_of_length 3 (fin 2)</code>?</p>",
        "id": 219898267,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607978094
    },
    {
        "content": "<p><code>vector</code> is what you are looking for</p>",
        "id": 219898318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607978127
    },
    {
        "content": "<p>Great... and then access values of <code>f: vector (fin 2) 3</code> by <code>f.nth 0</code>, <code>f.nth 1</code>, <code>f.nth 2</code> it seems</p>",
        "id": 219899301,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1607978612
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector.of_fn\">docs#vector.of_fn</a> for the other direction. I don't know if there is an <code>equiv</code> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector.of_fn\">docs#vector.of_fn</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector.nth\">docs#vector.nth</a> as <code>to_fun</code> and <code>inv_fun</code>.</p>",
        "id": 219932934,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608002040
    },
    {
        "content": "<p>I seem to drift towards accessing entries of <code>f</code> using the complicated expressions <code>(f.nth 0).val</code>, <code>(f.nth 1).val</code>, <code>(f.nth 2).val</code>. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> Because I don't know if it's true that <code>m.val = n.val → m = n</code> for <code>m n : fin 2</code>?</p>",
        "id": 219936909,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608006461
    },
    {
        "content": "<p>Yes, it is true.</p>",
        "id": 219937082,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608006684
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.ext\">docs#fin.ext</a></p>",
        "id": 219937086,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608006705
    },
    {
        "content": "<p>In Lean any two proofs of the same proposition are equal.</p>",
        "id": 219937130,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608006736
    },
    {
        "content": "<p>Awesome, so there's no \"Hott\" :grin:</p>",
        "id": 219937228,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608006892
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/propext\">docs#propext</a></p>",
        "id": 219937245,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608006956
    },
    {
        "content": "<p>How about binary strings of length <em>at most</em> 3? Any easy way to turn that into a type?</p>",
        "id": 220080208,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608097828
    },
    {
        "content": "<p>you can use subtypes</p>",
        "id": 220082638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608101141
    },
    {
        "content": "<p>Thanks yes it's time for some reading <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span></p>",
        "id": 220082983,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1608101628
    },
    {
        "content": "<p><code>{l : list (fin 2) // length l ≤ 3}</code></p>",
        "id": 220274635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608226177
    }
]