[
    {
        "content": "<p>Dear All,</p>\n<p>I was playing around with Lean and I noticed the behaviour below, that I find weird.  I imagine that the answer is going to be \"[...] defeq [...]\", but, even if this is the case, I would still like to understand better what [...] stands for in the template answer!</p>\n<p>My question is why does <code>zero_mul 0</code> for <code>nat</code> prove that <code>0 = a * 0</code>, while it does not for an arbitrary semiring?  Note that the offered proof seems to <em>completely</em> ignore the <code>a : ℕ</code>: this is the thing that really puzzles me!</p>\n<p>Any clarification would be greatly appreciated!</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zms</span>       <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"c1\">-- obviously works</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zms_wrong</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span> <span class=\"mi\">0</span> <span class=\"c1\">-- obviously does not work:</span>\n<span class=\"c\">/-</span><span class=\"cm\"> type mismatch, term</span>\n<span class=\"cm\">  zero_mul 0</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  0 * 0 = 0</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  0 = a * 0 -/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.zms</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span> <span class=\"mi\">0</span> <span class=\"c1\">-- works!</span>\n<span class=\"c\">/-</span><span class=\"cm\"> In fact, you can replace \"zero_mul 0\" by \"zero_mul 1\",  \"zero_mul 2\",... and it still works.</span>\n<span class=\"cm\">However, adding a new variable {n : ℕ} and using \"zero_mul n\" does **not** work. -/</span>\n</code></pre></div>",
        "id": 238723644,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620973111
    },
    {
        "content": "<p>I assume it's because both statements are true by refl</p>",
        "id": 238724889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620974126
    },
    {
        "content": "<p>By \"both statements\" you mean the two sides of the equality in the statement and in the proof term?</p>",
        "id": 238724960,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620974170
    },
    {
        "content": "<p>The statement you're trying to prove and the statement the lemma you're using claims to prove</p>",
        "id": 238725081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620974289
    },
    {
        "content": "<p>So, to be completely explicit:</p>\n<p><code>0 = 0 * 0</code> (left-hand sides)<br>\n<code>a * 0 = 0</code> (right-hand sides)</p>\n<p>and the answer is that separately, each one of these identities is refl, only for <code>nat</code>, but not for a general semiring (or <code>int</code>, for that matter).</p>",
        "id": 238725092,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620974306
    },
    {
        "content": "<p>Yes, I think so</p>",
        "id": 238725107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620974326
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul/src\">src#nat.mul</a> should confirm that</p>",
        "id": 238725152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620974402
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mul/src\">src#nat.mul</a>  says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>and presumably the first line of the definition is the defeq that is working here, right?</p>",
        "id": 238725246,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620974465
    },
    {
        "content": "<p>So, that is the sinkhole where <code>a</code> disappears, if I understand correctly.</p>",
        "id": 238725267,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620974491
    },
    {
        "content": "<p>Ok, this \"makes sense\"!  Indeed, I can now produce an even more paradoxical example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.zms</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span> <span class=\"n\">n</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>",
        "id": 238725746,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620974872
    },
    {
        "content": "<p>Both variables, the explicit one (<code>a</code>) in the statement and the implicit one that seems to appear in the proof term (<code>n</code>) disappear in the definition of <code>nat</code> multiplication!</p>",
        "id": 238725871,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620974938
    },
    {
        "content": "<p>Thanks Eric!  What I was missing were the vertical reductions going in \"opposite\" directions (terrible ASCII art, sorry!):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"mi\">0</span>   <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">^</span>       <span class=\"bp\">|</span>\n  <span class=\"bp\">|</span>       <span class=\"n\">v</span>\n<span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span>   <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 238726016,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620975095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.60mul_zero.20_.60.20and.20.60zero_mul.200.60/near/238724889\">said</a>:</p>\n<blockquote>\n<p>I assume it's because both statements are true by refl</p>\n</blockquote>\n<p>I don't think this has anything to do with it -- it's just because the LHS of what you're trying to prove is defeq to the LHS of what you're proving it with, and similarly for the RHS.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">36</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">20</span> <span class=\"bp\">+</span> <span class=\"mi\">17</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 238731097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620978693
    },
    {
        "content": "<p>My favourite: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 238731167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620978744
    }
]