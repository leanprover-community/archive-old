[
    {
        "content": "<p>I'm currently doing a proof using finmaps. As a result of some other work, I obtain the following in the local context:</p>\n<div class=\"codehilite\" data-code-language=\"typ_a\"><pre><span></span><code>  finmap.lookup name\n      ((quotient.lift_on ctx.entries\n          (λ (l : list (Σ (x : string), ttype)),\n             {dom := list.nodupkeys l,\n              get := λ (nd : list.nodupkeys l), alist.to_finmap (alist.insert name T {entries := l, nodupkeys := nd})})\n          _).get\n         _) =\n    some S\n</code></pre></div>\n<p>As far as I know, this is roughly equivalent to <code>finmap.lookup name (finmap.insert name T ctx) = some S</code>, which should be reducible into <code>some T = some S</code> (which is what I need for my proof). However, how do I move forward from the first form? simp doesn't seem to cut it.</p>\n<p>Thanks</p>",
        "id": 229858034,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615473409
    },
    {
        "content": "<p>Proving things about <code>get</code> is annoying. Have you tried using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.eq_some_iff_get_eq\">docs#option.eq_some_iff_get_eq</a> ?</p>",
        "id": 229858546,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615473568
    },
    {
        "content": "<p>as far as I can tell, I'm not actually trying to prove anything using option.get (unless finmap uses it internally and I have to somehow use the internals to prove it)</p>\n<p>this lemma ((finmap.lookup t (finmap.insert t S ctx) =<br>\n    some T)↔(S=T)) seems to be essential to proving anything using finmaps, so I believe it should be somewhere.</p>\n<p>as for using <code>option.eq_some_iff_get_eq</code>, I don't even know where to begin constructing such a proof. My brain can barely parse that massive definition.</p>",
        "id": 229861045,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615474417
    },
    {
        "content": "<p>I've found <a href=\"https://leanprover-community.github.io/mathlib_docs/data/finmap.html#finmap.lookup_insert\">https://leanprover-community.github.io/mathlib_docs/data/finmap.html#finmap.lookup_insert</a><br>\nhowever, it isn't applied here for some reason</p>",
        "id": 229863393,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615475168
    },
    {
        "content": "<p>of note is that the blob comes from a cases statement, maybe the cases statement is unwrapping too much?</p>",
        "id": 229863522,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615475213
    },
    {
        "content": "<p>Here is a minimal example that showcases my problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finmap</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">mapp</span><span class=\"o\">:=</span> <span class=\"n\">finmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"n\">mapp</span><span class=\"bp\">-&gt;</span><span class=\"n\">string</span><span class=\"bp\">-&gt;</span><span class=\"n\">string</span><span class=\"bp\">-&gt;</span><span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span><span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">finmap.lookup</span> <span class=\"n\">s1</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">s2</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ind</span> <span class=\"n\">m</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">testt</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">m</span><span class=\"o\">}:</span> <span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"n\">finmap.insert</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"c1\">-- place mouse here</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229874979,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615478781
    },
    {
        "content": "<p>A similar, but lesser problem occurs with alist:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">t_a</span> <span class=\"o\">:</span> <span class=\"n\">alist.lookup</span> <span class=\"n\">b</span> <span class=\"o\">{</span><span class=\"n\">entries</span> <span class=\"o\">:=</span> <span class=\"n\">list.kinsert</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">m.entries</span><span class=\"o\">,</span> <span class=\"n\">nodupkeys</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 229879044,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615479943
    },
    {
        "content": "<p>Your original goal looks like you have used <code>unfold</code> too much</p>",
        "id": 229881019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615480622
    },
    {
        "content": "<p>What are you trying to prove?</p>",
        "id": 229881062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615480635
    },
    {
        "content": "<p>The issue in the MWE is that <code>cases</code> has the bad habit of putting indexes in weak head normal form (which is a side effect of it trying to see if some inductive cases are inaccessible because the constructor applies for <code>0</code> and your goal state had index <code>n+1</code>, for example). A workaround is to generalize it before the cases and substitute afterward, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">testt</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">m</span><span class=\"o\">}:</span> <span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"n\">finmap.insert</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">finmap.insert</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m'</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229881865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615480890
    },
    {
        "content": "<p>This works pretty nicely and solves the issue. Is there an existing tactic that packages this dance? If not, do you think implementing a custom tactic on my side that does this would be difficult?</p>",
        "id": 229888594,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615483041
    },
    {
        "content": "<p>There are a few choices to be made in the dance so it's not entirely trivial to have a tactic do it</p>",
        "id": 229889812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615483402
    }
]