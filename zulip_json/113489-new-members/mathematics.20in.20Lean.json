[
    {
        "content": "<p>I followed the step-by-step from the introduction. but almost all examples when I loaded in VS Code, I got a memory error in the import statement. I am using Lean 3.18.4. I did one extra step running <code>lean --make --memory 6000</code> in the mathematics_in_lean directory.</p>",
        "id": 209050335,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599187572
    },
    {
        "content": "<p>I see errors like this too</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">imported</span> <span class=\"n\">file</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">ar</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"bp\">/</span><span class=\"n\">MD</span><span class=\"bp\">-</span><span class=\"mi\">2020</span><span class=\"bp\">/</span><span class=\"n\">mathematics_in_lean</span><span class=\"bp\">/_</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">int</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean&#39;</span> <span class=\"n\">uses</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 209050663,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599188247
    },
    {
        "content": "<p>These memory errors are because the VS Code extension is trying to compile mathlib. You should run <code>leanproject get-mathlib-cache</code> to get the precompiled binary files.</p>",
        "id": 209050716,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599188315
    },
    {
        "content": "<p>I removed the directory, did again the setup and executed the <code>leanproject get-mathlib-cache</code>. But again, I am getting</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n<span class=\"n\">excessive</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"err\">&#39;</span><span class=\"n\">replace&#39;</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">threshold</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209050949,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599188757
    },
    {
        "content": "<p>For some reason, your VS code extension is still trying to compile mathlib. From what I can tell, Mathematics in Lean is still on Lean 3.17.1. If you're using elan as recommended, then the VS Code extension should automatically use the correct version of Lean. The only thing I can think of at the moment is that you may have to either close and re-open VS Code or hit cmd+P and search for \"restart Lean\" to (1) get the correct version of Lean to run and (2) get Lean to look for the new olean files.</p>",
        "id": 209051083,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189000
    },
    {
        "content": "<p>But my command above <code>lean --make --memory 6000</code> shouldn't be able to recompile everything with Lean 3.18.4?</p>",
        "id": 209051197,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599189177
    },
    {
        "content": "<p>If you're using <code>elan</code>, the version of <code>lean</code> that's run when you enter that will be the one which is specified in <code>leanpkg.toml</code>, which is 3.17.1 (unless you've edited it or run <code>leanproject up</code>).</p>",
        "id": 209051267,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189287
    },
    {
        "content": "<p>I edited the toml changing to 3.18.4</p>",
        "id": 209051282,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599189332
    },
    {
        "content": "<p>And you didn't get any errors when you ran <code>lean --make --memory 6000</code>?</p>",
        "id": 209051328,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189374
    },
    {
        "content": "<p>Did you edit the mathlib commit too in <code>leanpkg.toml</code>? The one specified there might not be compatible with 3.18.4.</p>",
        "id": 209051338,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189423
    },
    {
        "content": "<p>An easier way to upgrade the version of mathlib that a Lean project depends on is to run <code>leanproject up</code>. This will also download precompiled mathlib for you so you don't have to wait for <code>lean --make</code> to finish.</p>",
        "id": 209051352,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189469
    },
    {
        "content": "<p>No, i didn't changed the commit hash for mathlib...  I got some warnings but the process finished.</p>",
        "id": 209051394,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599189489
    },
    {
        "content": "<p>Are you sure they were just warnings and not errors? Errors will cause olean files not to be built, which will then lead to VS Code trying to rebuild the missing files (which will probably lead to errors again).</p>",
        "id": 209051400,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189537
    },
    {
        "content": "<p>Hum, just checking now <a href=\"https://leanprover-community.github.io/install/macos.html\">https://leanprover-community.github.io/install/macos.html</a> and it seems that use the lean from brew may not be a good idea.</p>",
        "id": 209051406,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599189563
    },
    {
        "content": "<p>Yes, it's not recommended at the moment. We recommend using <code>elan</code>.</p>",
        "id": 209051410,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189592
    },
    {
        "content": "<p>I see many lines such </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">ar</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"bp\">/</span><span class=\"n\">MD</span><span class=\"bp\">-</span><span class=\"mi\">2020</span><span class=\"bp\">/</span><span class=\"n\">mathematics_in_lean</span><span class=\"bp\">/</span><span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">basics</span><span class=\"bp\">/</span><span class=\"n\">unnamed_1319</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">imported</span> <span class=\"n\">file</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">ar</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"bp\">/</span><span class=\"n\">MD</span><span class=\"bp\">-</span><span class=\"mi\">2020</span><span class=\"bp\">/</span><span class=\"n\">mathematics_in_lean</span><span class=\"bp\">/_</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">order_functions</span><span class=\"bp\">.</span><span class=\"n\">lean&#39;</span> <span class=\"n\">uses</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">ar</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"bp\">/</span><span class=\"n\">MD</span><span class=\"bp\">-</span><span class=\"mi\">2020</span><span class=\"bp\">/</span><span class=\"n\">mathematics_in_lean</span><span class=\"bp\">/_</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">iterated_deriv</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">imported</span> <span class=\"n\">file</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">ar</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"bp\">/</span><span class=\"n\">MD</span><span class=\"bp\">-</span><span class=\"mi\">2020</span><span class=\"bp\">/</span><span class=\"n\">mathematics_in_lean</span><span class=\"bp\">/_</span><span class=\"n\">target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">lean&#39;</span> <span class=\"n\">uses</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 209051468,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599189645
    },
    {
        "content": "<p>There was some discussion about replacing the homebrew version of Lean with elan <a href=\"#narrow/stream/113488-general/topic/Homebrew.20Tap/near/207744336\">recently</a>.</p>",
        "id": 209051482,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189677
    },
    {
        "content": "<p>The reason that those files are importing files with <code>sorry</code> is most likely that some transitive dependency had an error in it.</p>",
        "id": 209051487,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189697
    },
    {
        "content": "<p>And that is ultimately due to trying to compile an older version of mathlib with a newer version of Lean.</p>",
        "id": 209051531,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189725
    },
    {
        "content": "<p>I see. OK, I will uninstall the brew version and try to follow the step-by-step suggested.</p>",
        "id": 209051538,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599189745
    },
    {
        "content": "<p>Feel free to ask again if you have any more trouble!</p>",
        "id": 209051558,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599189786
    },
    {
        "content": "<p>thank you so much!</p>",
        "id": 209051563,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599189803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> don't edit the toml because mathlib is not backwards compatible so this might make your problems worse -- the designer of any package is only guaranteeing that it will compile with the exact version of lean and mathlib stated in the toml</p>",
        "id": 209066906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599207709
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> . In my case, the problem is that I didn't want to downgrade Lean to the previous version. I finally managed to have examples running with </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;mathematics_in_lean_source&quot;</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;0.1&quot;</span>\n<span class=\"n\">lean_version</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;leanprover-community/lean:3.18.4&quot;</span>\n<span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;src&quot;</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n<span class=\"n\">mathlib</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">git</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;https://github.com/leanprover-community/mathlib&quot;</span><span class=\"o\">,</span> <span class=\"n\">rev</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;17c4651c593391462d55f7f990dc05e54ec8ee39&quot;</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>But I understood your point. I am doing something risky! You can't guarantee that code will work with Lean 3.18.4 and the commit 17c46... from mathlib!</p>",
        "id": 209124817,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599243222
    },
    {
        "content": "<p>ps: I hope to experiment with <code>elan</code> in the next days... It seems that it is the solution to have more than one version of Lean available.</p>",
        "id": 209124969,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599243306
    },
    {
        "content": "<p>I liked the magic in VS Code to open the files in the buffer once I click in the <code>try it</code>. It would be nice to have this option in the Emacs too! ;-)</p>\n<p>I saw that you use a <code>tryitfile</code> parameter in the <code>href</code> tag! Somehow the VS Code can interpret it and use this information instead of open the web editor remotely....  But I don't know VS enough to going deep into it.</p>",
        "id": 209125156,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599243411
    },
    {
        "content": "<p>(The relevant part of the VS Code extension is in <a href=\"https://github.com/leanprover/vscode-lean/blob/456411a3dd763c43d40187eaca31366aa38e4e09/src/docview.ts#L164\">this file</a>.)</p>",
        "id": 209126562,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599244226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121542\">Alexandre Rademaker</span> <a href=\"#narrow/stream/113489-new-members/topic/mathematics.20in.20Lean/near/209124969\">said</a>:</p>\n<blockquote>\n<p>ps: I hope to experiment with <code>elan</code> in the next days... It seems that it is the solution to have more than one version of Lean available.</p>\n</blockquote>\n<p>Yes, we try to encourage people to not install Lean at all, only <code>elan</code>, and let handle things from there.</p>",
        "id": 209155933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599271034
    },
    {
        "content": "<p>One option, of course, is to propose a pull request to <code>MiL</code> (or any other project, I guess) that helpfully upgrades (and fixes all the resulting problems!) to the latest version.</p>",
        "id": 209155944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599271078
    }
]