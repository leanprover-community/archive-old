[
    {
        "content": "<p>Hello, can someone please help me prove this (I assume it's in mathlib? subsequence of abs converging sequence is also convergent)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">extraction</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">m</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy_sequence</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">q</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"n\">def</span> <span class=\"n\">partial_sum</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">seq</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>  <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">partial_sum</span> <span class=\"n\">n</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">subseq_cauchy_is_cauchy</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">incφ</span> <span class=\"o\">:</span> <span class=\"n\">extraction</span> <span class=\"n\">φ</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">cauchy_sequence</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"n\">cauchy_sequence</span> <span class=\"o\">(</span><span class=\"n\">partial_sum</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"err\">∘</span><span class=\"n\">φ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203511095,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1594390401
    },
    {
        "content": "<p>This looks like a fun exercise. I'd recommend you use &lt;= not &gt;= in your definition of Cauchy sequence. I doubt it's in mathlib and even if it is it would be in there using some mathlib definition of Cauchy rather than your home-rolled one</p>",
        "id": 203511614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594390719
    },
    {
        "content": "<p>Wait -- is this true?</p>",
        "id": 203511689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594390766
    },
    {
        "content": "<p>How about 1-1+1/2-1/2+1/3-1/3+...?</p>",
        "id": 203511740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594390799
    },
    {
        "content": "<p>Oh I just spotted the positivity condition :-)</p>",
        "id": 203511845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594390857
    },
    {
        "content": "<p>I would be tempted to define a function representing the sum from a to b and prove that under the positivity condition the subsequence sum from a to b was at most the original sum from phi a to phi b</p>",
        "id": 203512011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594390945
    },
    {
        "content": "<p>Then you're home by monotonicity of phi</p>",
        "id": 203512056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594390965
    },
    {
        "content": "<p>Yes, thanks; I was hoping to quote something in mathlib, but if it's not there, it'll be a fun (?) exercise (which I guess I'll get to now)...</p>\n<p>Why aren't basic facts about series (as opposed to sequences) in mathlib?...</p>",
        "id": 203512245,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1594391062
    },
    {
        "content": "<p>Formalising it will be a bit annoying. Humans have a very good intuitive picture of a subsequence, and would write things such as a(phi n)  + a(phi(n+1))+...+a(phi(m)) &lt;= a(phi n) + a(phi(n) + 1) + ...+a(phi(m)) but this is actually some tedious induction</p>",
        "id": 203512499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594391187
    },
    {
        "content": "<p>People have defined exp(x) as an infinite sum so there must be stuff about infinite sums in there somewhere</p>",
        "id": 203512611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594391247
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cauchy_seq\">docs#cauchy_seq</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_subseq_of_bounded\">docs#tendsto_subseq_of_bounded</a> are probably good entry points</p>",
        "id": 203513355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594391556
    },
    {
        "content": "<p>About series, we discussed building a specialized theory for them but it didn't happen yet. However you shouldn't define your own <code>partial_sum</code>.  See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/harmonic_tendsto_at_top\">docs#harmonic_tendsto_at_top</a> for inspiration.</p>",
        "id": 203513575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594391655
    },
    {
        "content": "<p>Returning to your question, maybe I'm blind but it looks like one more little  hole in the library:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">cauchy_seq</span><span class=\"bp\">.</span><span class=\"n\">subseq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cauchy_seq</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">limφ</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">φ</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span> <span class=\"n\">strict_mono_tendsto_at_top</span> <span class=\"n\">hφ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">φ</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">prod_at_top_at_top_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">limφ</span><span class=\"bp\">.</span><span class=\"n\">prod_map</span> <span class=\"n\">limφ</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cauchy_seq_iff_tendsto</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hS</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203518024,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594393627
    },
    {
        "content": "<p>One last comment about how you were meant to find answers (beyond asking here which is fine). Since this is elementary stuff, you got to <a href=\"https://leanprover-community.github.io/undergrad.html\">https://leanprover-community.github.io/undergrad.html</a>, open \"Single Variable Real Analysis\" and then \"Sequences of real numbers\" to see \"Cauchy sequences\" mentioned. You can then click on that and wander around.</p>",
        "id": 203518345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594393789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> this lemma won't answer <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> 's question, because a subsequence of the sequence doesn't give a subsequence of the partial sums :-/</p>",
        "id": 203518789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594393981
    },
    {
        "content": "<p>Oh, I read too quickly</p>",
        "id": 203519346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594394231
    },
    {
        "content": "<p>yeah and me, I accused him of asking us to prove something false :-) It looks like a real bore</p>",
        "id": 203519536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594394306
    },
    {
        "content": "<p>No, it follows easily from what I wrote.</p>",
        "id": 203519614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594394346
    },
    {
        "content": "<p>or maybe not. I'll leave that as an exercise <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 203519765,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594394414
    }
]