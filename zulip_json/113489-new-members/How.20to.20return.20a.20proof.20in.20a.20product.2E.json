[
    {
        "content": "<p>I have a function that returns some <code>finset</code> which I want to relate to one of the functions inputs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">evalStatement</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"bp\">...</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">},</span> <span class=\"bp\">...</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ</span> <span class=\"n\">vars'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">,</span> <span class=\"n\">vars</span> <span class=\"bp\">⊆</span> <span class=\"n\">vars'</span> <span class=\"bp\">×</span> <span class=\"bp\">...</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>However, <code>prod</code> is of type <code>Type u → Type v → Type (max u v)</code>, and therefore I cannot pass to it an element of type <code>Prop</code>. Is there some standard functor in Lean for lifting a Prop to <code>Type 0</code>?</p>",
        "id": 264325667,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1639066990
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 264326168,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639067203
    },
    {
        "content": "<p><code>plift</code>?</p>",
        "id": 264326233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639067226
    },
    {
        "content": "<p>pprod will accept proofs</p>",
        "id": 264326263,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639067239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  Both work for my use case! Thanks to you both! :)</p>",
        "id": 264327250,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1639067582
    },
    {
        "content": "<p>Is it possible that instead of <code>sigma</code> you want <code>subtype</code> there?</p>",
        "id": 264331609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639069300
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">vars'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">//</span> <span class=\"n\">vars</span> <span class=\"bp\">⊆</span> <span class=\"n\">vars'</span> <span class=\"bp\">∧</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264331707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639069326
    },
    {
        "content": "<p>That might be a better way of doing it, thank you :) I'll give it a try.</p>",
        "id": 264352850,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1639077663
    }
]