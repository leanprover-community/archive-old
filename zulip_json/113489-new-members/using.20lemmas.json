[
    {
        "content": "<p>Suppose I have a lemma <code>p → q</code> and, in my current state goal I have <code>h: p</code>. How do I add <code>q</code> to my set of valid truths?</p>",
        "id": 259181737,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635296471
    },
    {
        "content": "<p>You can use <code>have hq := my_lemma h,</code></p>",
        "id": 259181896,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635296552
    },
    {
        "content": "<p>Hm, it's not working. This is my lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_tree_then_card_edges_le_card_vertices</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G.edge_set</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">G.is_tree</span> <span class=\"bp\">→</span> <span class=\"n\">G.edge_set.to_finset.card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">card</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>In my state I have <code>h: G.is_tree</code></p>\n<p>If I do <code>have hq := is_tree_then_card_edges_le_card_vertices h</code> I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">is_tree_then_card_edges_le_card_vertices</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">G.is_tree</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">simple_graph</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 259182626,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635297144
    },
    {
        "content": "<p>The lemma eats more arguments than it seems from the statement. The arguments must have been be declared above the lemma. Try putting underscores between <code>is_...</code> and <code>h</code></p>",
        "id": 259182856,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635297370
    },
    {
        "content": "<p>It works! thank you</p>",
        "id": 259182986,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635297580
    },
    {
        "content": "<p>Infact, I think the problem is that those arguments to the lemma should have been implicit, but are needed explicitly because you used <code>()</code></p>",
        "id": 259182989,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635297589
    },
    {
        "content": "<p>Anytime you're putting in underscores to use something that you've written a moment ago, you should go back and consider changing the binders.</p>",
        "id": 259186937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635302560
    },
    {
        "content": "<p>It take a little while to learn the correct binders, but once you do it's usually most efficient to get them right as you write the lemmas!</p>",
        "id": 259186944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635302585
    }
]