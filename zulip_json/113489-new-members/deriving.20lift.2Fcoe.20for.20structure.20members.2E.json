[
    {
        "content": "<p>I have to do some math with \\nat and \\int members of a structure: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive inhabited ]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">position</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">distance</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">aim</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">)</span>\n <span class=\"bp\">```</span>\n<span class=\"n\">and</span> <span class=\"n\">I</span> <span class=\"n\">am</span> <span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">lift</span> <span class=\"k\">from</span> <span class=\"n\">one</span> <span class=\"n\">set</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">other.</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>((position.aim p) * (instruction.length i))</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">gets</span> <span class=\"n\">me</span> <span class=\"s2\">\"type mismatch at application</span>\n<span class=\"s2\">  has_mul.mul p.aim</span>\n<span class=\"s2\">term</span>\n<span class=\"s2\">  p.aim</span>\n<span class=\"s2\">has type</span>\n<span class=\"s2\">  ℤ</span>\n<span class=\"s2\">but is expected to have type</span>\n<span class=\"s2\">  ℕ\"</span>\n\n<span class=\"n\">All</span> <span class=\"n\">attempts</span> <span class=\"n\">to</span> <span class=\"n\">lift</span> <span class=\"n\">members</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">expression</span> <span class=\"n\">are</span> <span class=\"n\">failing.</span> <span class=\"n\">Do</span> <span class=\"n\">I</span> <span class=\"n\">need</span> <span class=\"n\">to</span> <span class=\"n\">derive</span> <span class=\"n\">something</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">structures</span> <span class=\"n\">first</span><span class=\"bp\">&gt;?</span>\n</code></pre></div>",
        "id": 265392124,
        "sender_full_name": "Ocschwar",
        "timestamp": 1639802743
    },
    {
        "content": "<p>The answer to this depends on the context of this expression. A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> could be helpful.</p>\n<p>If you know the result is supposed to be an integer, you could do  <code>(position.aim p) * (instruction.length i : ℤ)</code>.</p>",
        "id": 265392368,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639803124
    },
    {
        "content": "<p>This is it: <a href=\"https://github.com/ocschwar/adventofcode/blob/master/src/aoc/day2.lean\">https://github.com/ocschwar/adventofcode/blob/master/src/aoc/day2.lean</a><br>\nI can drill it down too</p>",
        "id": 265393779,
        "sender_full_name": "Ocschwar",
        "timestamp": 1639805248
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.data.nat</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.to_string</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.bool</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.buffer.parser</span>\n<span class=\"k\">#check</span> <span class=\"n\">prod.mk</span>\n<span class=\"kn\">open</span> <span class=\"n\">parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">io</span>\n\n<span class=\"kd\">@[derive  inhabited ]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">position</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">distance</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">aim</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"kd\">@[derive inhabited]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">comd</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">up</span> <span class=\"o\">:</span> <span class=\"n\">comd</span>\n<span class=\"bp\">|</span> <span class=\"n\">down</span> <span class=\"o\">:</span> <span class=\"n\">comd</span>\n<span class=\"bp\">|</span> <span class=\"n\">forward</span> <span class=\"o\">:</span> <span class=\"n\">comd</span>\n<span class=\"kd\">@[derive inhabited]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">instruction</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comd</span> <span class=\"o\">:</span> <span class=\"n\">comd</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>  <span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">mkstr</span>  <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">position</span><span class=\"o\">):</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">position.depth</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span>  <span class=\"bp\">++</span> <span class=\"n\">to_string</span><span class=\"o\">(</span><span class=\"n\">position.distance</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">move_position</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">position</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">instruction</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">position</span> <span class=\"o\">:=</span>\n  <span class=\"n\">position.mk</span> <span class=\"o\">((</span><span class=\"n\">position.distance</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">+</span>\n  <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">instruction.comd</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n     <span class=\"n\">comd.forward</span> <span class=\"o\">:=</span>  <span class=\"bp\">↑</span>  <span class=\"o\">(</span> <span class=\"n\">instruction.length</span> <span class=\"n\">i</span><span class=\"o\">)</span>  <span class=\"o\">,</span>\n     <span class=\"n\">comd.up</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">,</span>\n     <span class=\"n\">comd.down</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"kd\">end</span>\n  <span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span>\n   <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">instruction.comd</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n     <span class=\"n\">comd.forward</span> <span class=\"o\">:=</span>  <span class=\"k\">match</span> <span class=\"n\">cmp</span> <span class=\"o\">(</span><span class=\"n\">position.aim</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"n\">ordering.eq</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n     <span class=\"bp\">|</span> <span class=\"n\">ordering.gt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">position.depth</span> <span class=\"n\">p</span> <span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">position.aim</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">instruction.length</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℤ</span> <span class=\"o\">))</span>\n     <span class=\"bp\">|</span> <span class=\"n\">ordering.lt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">position.depth</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">position.aim</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">instruction.length</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span><span class=\"n\">ordering.gt</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"n\">ordering.eq</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">|</span> <span class=\"n\">ordering.lt</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n        <span class=\"kd\">end</span> <span class=\"o\">)</span>\n      <span class=\"kd\">end</span>\n      <span class=\"bp\">|</span><span class=\"n\">comd.up</span><span class=\"o\">:=</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span><span class=\"n\">comd.down</span><span class=\"o\">:=</span> <span class=\"mi\">0</span>\n      <span class=\"kd\">end</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">instruction.comd</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">comd.forward</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">position.aim</span> <span class=\"n\">p</span> <span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">comd.up</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">position.aim</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">instruction.length</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">comd.down</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">position.aim</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">instruction.length</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 265393964,
        "sender_full_name": "Ocschwar",
        "timestamp": 1639805523
    },
    {
        "content": "<p>It won't fix your issue, but instead of <code>position.mk _ _ _</code> I recommend <code>{ distance := _, depth := _, aim := _ }</code></p>",
        "id": 265394097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639805809
    },
    {
        "content": "<p>Definitely looks more ergonomic. I'll switch</p>",
        "id": 265394492,
        "sender_full_name": "Ocschwar",
        "timestamp": 1639806463
    },
    {
        "content": "<p>The error message above is telling you \"you're trying to convert an int into a nat\", probably because you're trying to set <code>depth</code> to an int calculation</p>",
        "id": 265394915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639807118
    },
    {
        "content": "<p>I am, because depth is a depth in water dimension, so the negative is meaningless. I thought setting it to a nat will be a succinct way of enforcing depth to be non-negative.</p>",
        "id": 265427522,
        "sender_full_name": "Ocschwar",
        "timestamp": 1639845676
    },
    {
        "content": "<p>Right, but what if the thing you try to assign to it is negative?</p>",
        "id": 265431146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639850062
    },
    {
        "content": "<p>Do you want the absolute value? The truncation?</p>",
        "id": 265431151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639850072
    },
    {
        "content": "<p>Which line in the above code is the one that fails?</p>",
        "id": 265431163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639850113
    },
    {
        "content": "<p>Right now, whether you mean to or not, you have an integer and are trying to pretend that it's a natural, and Lean knows that this is impossible. But it's hard for people to explain to you how you've done this and how to fix it because we can't see the error happening on our own machines.</p>",
        "id": 265432970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639851101
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"bp\">|</span> <span class=\"n\">ordering.gt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">position.depth</span> <span class=\"n\">p</span> <span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">position.aim</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">instruction.length</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℤ</span> <span class=\"o\">))</span>\n\n<span class=\"bp\">-&gt;</span>\n\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">has_mul.mul</span> <span class=\"n\">p.aim</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p.aim</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℤ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 265433247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639851437
    },
    {
        "content": "<p>What's happening here is that you want seem to be trying to define a number of the form <code>A+(B*C)</code>. Lean takes a look at <code>A</code> and sees it's a natural, concludes that <code>+</code> must indicate addition of naturals, that <code>B * C</code> is a natural, that <code>*</code> is multiplication of naturals, and that <code>B</code> must be a natural, and then it discovers that <code>B</code> is an integer. Hence the error.</p>",
        "id": 265433329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639851558
    },
    {
        "content": "<p>Naturals are not a subset of the integers in Lean, they are two distinct types. If you want to make some things naturals and some things integers, then you are going learn how to move between these two types. An alternative is to just stick to integers everywhere.</p>",
        "id": 265433387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639851611
    },
    {
        "content": "<p>Lean wants you to prove everything. Right now on line 42 you are making some construction which involves integers and you are claiming at the end that the result is a natural (the 0 on line 38 is a natural). To make this work you either have to insert a proof that this integer is always &gt;= 0 and then cast it back to a natural, or you can ignore these issues and just take the norm of the integer (which is a natural, but of course now if you make a mistake in your code then changing a random sign here will make debugging even harder), or you can stop using naturals completely (my recommendation) and just work with integers, and then later on, if you need to, prove that one of those integers is always &gt;= 0.</p>",
        "id": 265433520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639851786
    },
    {
        "content": "<p>I wound up sidestepping the issue for the purpose of this task by making depth an integer and enforcing it as a positive with <code>comd.forward :=  max (0:ℤ )((position.depth p)+(position.aim p)*(instruction.length i) )</code></p>\n<p>Thank you for the detailed explanation. The reason I'm fiddling with day 2 of Advent of Code on Dec 18th is that I want to understand this material and your explanations are a godsend.</p>",
        "id": 265434854,
        "sender_full_name": "Ocschwar",
        "timestamp": 1639852410
    }
]