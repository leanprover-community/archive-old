[
    {
        "content": "<p>New to functional languages. Want to understand how <code>assume</code> works in Lean. Why is it OK to have <code>theorem ex1 : ¬(p ∧ ¬q) → (p → q) := begin assume h : ¬(p ∧ ¬q), assume hp : p</code> but not for example <code>theorem ex2 : (p → r ∨ s) → ((p → r) ∨ (p → s)) := begin assume rs : r ∨ s</code>?</p>",
        "id": 186014967,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579387635
    },
    {
        "content": "<p>Because -&gt; is right associative. The first argument of <code>theorem ex2</code> is a function from <code>p</code> to <code>r or s</code>.</p>",
        "id": 186015136,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1579387944
    },
    {
        "content": "<p>Also note that in <code>theorem ex1</code>, your <code>h</code> is of type <code>(p and not q) -&gt; false</code>, that is, a function type. You're then left with <code>p -&gt; s</code>, where associativity plays no part. You can therefore further assume <code>p</code>. Note that the parentheses around <code>(p -&gt; q)</code> are redundant.</p>",
        "id": 186015147,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1579388003
    },
    {
        "content": "<p>Surely the analogue of what works in ex1 is <code>assume prs : (p → r ∨ s)</code>? That's the left hand side of the implication. Both goals are of the form <code>P -&gt; Q</code> and you want to start with <code>assume hP : P</code>.</p>",
        "id": 186015496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579388589
    },
    {
        "content": "<p>So is there any assumption that can be made to help in <code>theorem ex2</code>? I wanted to get started like <code>assume hp : p</code>, like @Kevin Buzzard suggests, but it just doesn't work. I get an error message.</p>",
        "id": 186015568,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579388690
    },
    {
        "content": "<p>You can't prove that theorem in constructive logic, meaning that the straightforward \"follow your nose\" approach doesn't work</p>",
        "id": 186015706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579388886
    },
    {
        "content": "<p>You can prove it by cases on whether <code>p</code> is true or false</p>",
        "id": 186015716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579388913
    },
    {
        "content": "<p>How to get started in that case?</p>",
        "id": 186015737,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579388966
    },
    {
        "content": "<p><code>begin by_cases p,</code></p>",
        "id": 186015741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579388975
    },
    {
        "content": "<p>if it complains about decidable something then write this at the top of your file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</pre></div>",
        "id": 186015794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579389032
    },
    {
        "content": "<p>Right, it does say <code>by_cases tactic failed, type of given expression is not decidable</code>.</p>",
        "id": 186015816,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579389113
    },
    {
        "content": "<p>I said <code>P</code> not <code>p</code>. You have some super-complex goals with lots and lots of p's and q's and and's and r's, but ultimately it is of the form P -&gt; Q with P and Q slightly less complicated expressions. Your job is to figure out what P and Q are, and then assume hP of type P.</p>",
        "id": 186015925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579389322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Sorry, I noticed that too late. That is actually something I can already get from <code>intro</code>, right?</p>",
        "id": 186015988,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579389446
    },
    {
        "content": "<p>oh sure</p>",
        "id": 186015990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579389462
    },
    {
        "content": "<blockquote>\n<p>if it complains about decidable something then write this at the top of your file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</pre></div>\n\n\n</blockquote>\n<p>Isn't something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</pre></div>\n\n\n<p>better? But isn't <code>open_locale classical</code> even better?</p>",
        "id": 186016225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579389926
    },
    {
        "content": "<p>Yes, but I don't know if daniel is using mathlib</p>",
        "id": 186016375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579390221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110027\">@Moses Schönfinkel</span> Your response is too high-level for a newbie like me. Is there any way to elaborate a bit? For another example, I can do <code>theorem T3L : ¬p ∧ ¬q → ¬(p ∨ q) := assume right: p ∨ q</code> but can't do <code>assume right : ((p → r) ∨ (p → s)) </code> in that <code>ex2</code>.</p>",
        "id": 186016690,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579390903
    },
    {
        "content": "<p>Are you really sure you can do <code>assume right: p ∨ q</code>?</p>",
        "id": 186016739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579390972
    },
    {
        "content": "<p><code>¬p ∧ ¬q → ¬(p ∨ q)</code> is of the form <code>X -&gt; Y</code> with <code>X=¬p ∧ ¬q</code> and <code>Y=¬(p ∨ q)</code>. Do you understand that?</p>",
        "id": 186016750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579391012
    },
    {
        "content": "<p>So the only possible thing you can assume is a proof of <code>X</code></p>",
        "id": 186016753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579391029
    },
    {
        "content": "<p>ex2 is also of the form X -&gt; Y and you have to figure out what X and Y are, and then assume you have a proof of X, and your goal will be to prove Y. But first you need to figure out what X and Y are.</p>",
        "id": 186016801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579391087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I sure can. I have that working. </p>\n<div class=\"codehilite\"><pre><span></span>theorem T3L : ¬p ∧ ¬q → ¬(p ∨ q) :=\nbegin\n    intros notP_and_notQ,\n    assume rhs : p ∨ q,\n    { cases rhs with hp hq,\n            { exact notP_and_notQ.left hp },\n            { exact notP_and_notQ.right hq } }\nend\n#check T3L p q\n</pre></div>",
        "id": 186016815,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579391139
    },
    {
        "content": "<p>sure it works after the intros!</p>",
        "id": 186017170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579391750
    },
    {
        "content": "<p>After the intros, the goal is <code>(p ∨ q) -&gt; false</code></p>",
        "id": 186017213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579391769
    },
    {
        "content": "<p>so you can assume a proof of <code>(p ∨ q)</code></p>",
        "id": 186017215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579391786
    },
    {
        "content": "<p>If your goal is X -&gt; Y then you can assume a proof of X. That's the rule.</p>",
        "id": 186017276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579391913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259186\">@Daniel Keys</span> <br>\nYou want to prove <code>((p → r) ∨ (p → s))</code> in <code>ex2</code>, so it just doesn't make any sense to assume it. Else there would be nothing left to prove.</p>",
        "id": 186017285,
        "sender_full_name": "Joe",
        "timestamp": 1579391946
    },
    {
        "content": "<p>I'm not sure why you find this confusing...</p>",
        "id": 186017289,
        "sender_full_name": "Joe",
        "timestamp": 1579391994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> You're right, that part is not confusing. What I struggle with is something around these lines: to prove a statement, sometimes you need to go several routes. For example, you can have cases that split in \"if p is true, this follows\" and \"if p is not true, this follows\". So in my mind it seems like I should be able to \"assume p\" and reach a conclusion, then \"assume not p\" and reach the other. That is kind of where I struggle now.</p>",
        "id": 186017939,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579393236
    },
    {
        "content": "<p>Yes you can do that</p>",
        "id": 186017994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579393377
    },
    {
        "content": "<p>Do you have mathlib installed? What happens if you type <code>import tactic.linarith</code> at the beginning of your file?</p>",
        "id": 186018042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579393448
    },
    {
        "content": "<p>What does that do? Why install mathlib?</p>",
        "id": 186018097,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579393618
    },
    {
        "content": "<p>fellow newbie so take this with a grain of salt: mathlib is the accompanying library that defines a bunch of common mathematical concepts for use in other proofs</p>",
        "id": 186018352,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579394219
    },
    {
        "content": "<p>e.g. i'm using it for <code>data.set.basic</code> which just defines sets and their properties</p>",
        "id": 186018362,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579394246
    },
    {
        "content": "<p>Mathlib offers more tactic tools for you to be able to argue like a mathematician would, for example here's a proof of Q given that <code>P -&gt; Q</code> and <code>¬ P → Q</code>, but using a tactic from mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnP</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hnP</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Without mathlib you have to write some more intimidating stuff like Mario's <code>local attribute [instance] classical.prop_decidable</code> above.</p>",
        "id": 186018564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579394668
    },
    {
        "content": "<p>Your underlying problem with <code>assume</code> is that you're assuming it means a vague all-purpose \"assume\" which we use in normal English. In Lean <code>assume</code> has one, extremely precise, meaning -- it can only be used on goals of the form <code>X -&gt; Y</code> and it can only be used to assume that <code>X</code> is true.</p>",
        "id": 186018623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579394812
    },
    {
        "content": "<p>I proved <code>Q</code> above by saying \"Assume <code>P</code> is true -- then use <code>hP</code>; now assume it's false and use <code>hnP</code> instead\". But the Lean translation of <em>that</em> kind of \"assume\" is <code>by_cases</code>, at least if you have mathlib. If you only have core Lean then it will look uglier.</p>",
        "id": 186018672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579394898
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnP</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hnP</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><code>classical.em</code> is the classical law of the excluded middle.</p>",
        "id": 186018686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579394992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> OK then, so the way to introduce other assumptions (is it goals?) is by <code>have</code>? But what was confusing was that I could still use <code>assume hp:p</code> in the very first example I posted. It seems like an extra.</p>",
        "id": 186018995,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579395597
    },
    {
        "content": "<p>I can only repeat what I've said before about exactly what assume does</p>",
        "id": 186019050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395661
    },
    {
        "content": "<p>That's fine, thank you! I need more homework.</p>",
        "id": 186019060,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579395695
    },
    {
        "content": "<p>Try the exercises in Theorem Proving In Lean</p>",
        "id": 186019064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395717
    },
    {
        "content": "<p>Or the natural number game</p>",
        "id": 186019104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395737
    },
    {
        "content": "<p>Well, I did all of those in chapter 3 except for the classical stuff (7 problems) where I got totally stuck.</p>",
        "id": 186019108,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579395767
    },
    {
        "content": "<p>Well maybe you could ask some very precise questions about things you were stuck on</p>",
        "id": 186019117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395828
    },
    {
        "content": "<p>A precise question in the form of some working lean code which people can just cut and paste without having to figure out variables or whatever is usually what goes down best here</p>",
        "id": 186019159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I can. Here is this, I need help! <code>theorem T1 : (p → r ∨ s) → ((p → r) ∨ (p → s)) := sorry</code>. The first one in the classical problems in ch.3</p>",
        "id": 186019161,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579395881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259186\">@Daniel Keys</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">T1</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp&#39;</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp&#39;</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 186022501,
        "sender_full_name": "Joe",
        "timestamp": 1579402998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  So that brings me exactly to what I fail to understand in these proofs. All of a sudden you have <code>hr</code> and <code>hs</code>, or the even more cryptic <code>$ λ hp'</code> coming up in your <code>lambda</code> terms. How can you produce these and work with them if the only hypothesis is <code>(p → r ∨ s)</code>? Where from does LEAN know what <code>hp'</code> is? Maybe it is my unwillingness to work with <code>lambda</code>. While I'll be looking into it, can one get what you wrote in a framework like this:</p>\n<div class=\"codehilite\"><pre><span></span>theorem T1 : (p → r ∨ s) → ((p → r) ∨ (p → s)) :=\nbegin\n    intros prs,\n    cases (em p) with hp hnp,\n    { ... },\n    { ... }\nend\n</pre></div>\n\n\n<p>which is easier to read, to help my understanding?</p>",
        "id": 186031050,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579421494
    },
    {
        "content": "<p>lambda is a binder, meaning that it introduces a new name. So when you see <code>λ hp'</code>, you should expect that the name <code>hp'</code> has not been previously used</p>",
        "id": 186031409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579422255
    },
    {
        "content": "<p>The tactic version of lambda is <code>intros</code></p>",
        "id": 186031411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579422282
    },
    {
        "content": "<p>The dollar sign is just a trick for reducing parentheses. <code>f $ g x y</code> is the same as <code>f (g x y)</code></p>",
        "id": 186031418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579422323
    },
    {
        "content": "<p>So how do you write it with <code>begin...end</code>? I probably just need to see that once.</p>",
        "id": 186031472,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579422431
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">T1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">prs</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">prs</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"n\">hr</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hr</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hs</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186031505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579422482
    },
    {
        "content": "<p>Thanks a lot! This will get me going.</p>",
        "id": 186031531,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579422533
    },
    {
        "content": "<p>protip: use <code> ```lean ... ``` </code> to fence lean code</p>",
        "id": 186031534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579422538
    },
    {
        "content": "<p>I can see what the <code>left</code> and <code>right</code> terms do in the above, but I don't remember having seen that in the manual. Is it there somewhere?</p>",
        "id": 186031922,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579423380
    },
    {
        "content": "<p>They're explained in the <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">natural number game</a></p>",
        "id": 186031983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579423449
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html?highlight=left#more-tactics\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html?highlight=left#more-tactics\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html?highlight=left#more-tactics</a></p>",
        "id": 186032452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579424496
    },
    {
        "content": "<p>OK, I see. I only got to the end of chapter 3.</p>",
        "id": 186032495,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579424564
    }
]