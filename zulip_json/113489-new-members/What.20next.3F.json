[
    {
        "content": "<p>I played through NNG and solved the Lean maths challenges, and I'm hooked. What's the next step? I doubt I'm ready to formalize stuff seriously. Is there a \"game\" that teaches term mode? (I assume that's important??) Eventually, I may want to contribute to mathlib, but I wouldn't want to step on anyone's toes or reproduce effort. Is there a place I can go to see what needs to be done and who's doing what?</p>",
        "id": 257468276,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1634177107
    },
    {
        "content": "<p>Welcome! We've got a bunch of different learning resources here, though I don't know of any other completed \"games\" like the NNG: <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>\n<p>We have a bunch of <a href=\"https://github.com/leanprover-community/mathlib/issues\">issues on the mathlib repo</a> that you can take a look at, but the best way to find out if something's being worked on or not is to ask here on Zulip!</p>",
        "id": 257470420,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1634178904
    },
    {
        "content": "<p>Typically the way to get started is to pick some random bit of maths that you like, and ask here what's been done on it. We can then try to steer you in the direction of something both plausible and useful. But it helps if you have some suggestion about the general areas of mathematics/CS that you're interested in.</p>",
        "id": 257478433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634186188
    },
    {
        "content": "<p>I'm in a similar situation.  I did the NNG yesterday and I've just set up Lean and Emacs and now I'm working through the M40001 exercise sheets.  I've got some fairly specific maths in mind that I'd like to formalise (related to my PhD project), but at the moment I have no idea how to even write definitions in Lean...</p>",
        "id": 257502768,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634202274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"450621\">@Francis Southern</span> Can you give an example of what you would like to define?</p>",
        "id": 257502980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202378
    },
    {
        "content": "<p>There are several ways to define things in Lean. Maybe the LftCM videos can help you?</p>",
        "id": 257503019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202408
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=8mVOIGW5US4&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N\">https://www.youtube.com/watch?v=8mVOIGW5US4&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"8mVOIGW5US4\" href=\"https://www.youtube.com/watch?v=8mVOIGW5US4&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N\"><img src=\"https://uploads.zulipusercontent.net/530976a966a415e9eeb23a5335af2cb7adcb71ea/68747470733a2f2f692e7974696d672e636f6d2f76692f386d564f494757355553342f64656661756c742e6a7067\"></a></div>",
        "id": 257503061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202434
    },
    {
        "content": "<p>Thanks for the suggestion, I'll definitely watch the videos, but I don't believe the objects I'm working with should be very complex.  I'm in combinatorics, so basically I want specific types of (multi-)hypergraphs.  It's fine to represent the vertices as pairs natural numbers.  So I want a set S of all finite (multi-)sets of finite (multi-)sets of pairs of natural numbers. and then I want operations from S to S which add and remove edges and the like, and I want functions from S to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> which give me various properties of the hypergraphs, like the number of times a certain vertex (pair of natural numbers) appears.  Does that make sense?</p>",
        "id": 257504201,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634203039
    },
    {
        "content": "<p>\"all finite multisets of finite multisets of pairs of natural numbers\" would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 257505837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634203833
    },
    {
        "content": "<p>So you could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">specific_type_of_hypergraph</span> <span class=\"o\">:=</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 257506158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634203886
    },
    {
        "content": "<p>And then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">specific_type_of_hypergraph.count_vertex</span> <span class=\"o\">:</span> <span class=\"n\">specific_type_of_hypergraph</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">_</span> <span class=\"c1\">-- fill this in</span>\n</code></pre></div>",
        "id": 257506278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634203925
    },
    {
        "content": "<p>I've added you to the stream graph theory.</p>",
        "id": 257506785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634204193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20next.3F/near/257505837\">said</a>:</p>\n<blockquote>\n<p>\"all finite multisets of finite multisets of pairs of natural numbers\" would be</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you, that's very helpful.  How would I then refer to the set of all specific_type_of_hypergraphs?  And how could I make subsets of that set?</p>",
        "id": 257507007,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634204303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/What.20next.3F/near/257506785\">said</a>:</p>\n<blockquote>\n<p>I've added you to the stream graph theory.</p>\n</blockquote>\n<p>Thank you. :-)</p>",
        "id": 257507033,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634204316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"450621\">@Francis Southern</span> <code>specific_type_of_hypergraphs</code> <em>is</em> the collection/set/type of all such hypergraphs.</p>",
        "id": 257507352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634204472
    },
    {
        "content": "<p>So you can write <code>variable (G : specific_type_of_hypergraphs)</code> to say \"Let <code>G</code> be a (specific type) hypergraph\".</p>",
        "id": 257507473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634204526
    },
    {
        "content": "<p>Do these specific type of hypergraphs have a specific name? Of course <code>specific_type_of_hypergraph</code> is a bit awkard, and way too long to be practical.</p>",
        "id": 257507495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634204541
    },
    {
        "content": "<p>Note that Lean is based on type theory. So you will find less talk about sets, and more talk about types. But from a practical point of view (as mathematician), the difference is not important.</p>",
        "id": 257507645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634204634
    },
    {
        "content": "<p><code>ℕ</code> and <code>ℝ</code> are types. But <code>{π, √2}</code> is a set of real numbers.</p>",
        "id": 257507718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634204659
    },
    {
        "content": "<p>So in Lean you can basically only talk about <em>subsets</em>. If you want an \"ambient\" set, then you should use types instead.</p>",
        "id": 257507767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634204696
    },
    {
        "content": "<p>The collection of all hypergraphs is naturally a type. It's the collection of all hypergraphs. Just like <code>ℕ</code> is the collection of all natural numbers.</p>",
        "id": 257507823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634204737
    },
    {
        "content": "<p>Oh, whoops.  I see.  But if, for example, I want the set of all positive real numbers or hypergraphs with exactly k vertices?  I suppose I mean how do I write set (type?) comprehension?<br>\nAnd regarding naming, we could call them \"generalised clause sets\" as they are a generalisation of boolean clause sets (generalised because variables may take more than two values, and also because I'm considering multisets of clauses which can actually contain \"clashing literals\").  These changes make the setting more combinatorial than logical though.</p>",
        "id": 257509979,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634205909
    },
    {
        "content": "<p>I'm not sure these objects are of a particularly general interest though, so they don't really have a short or precise name, so far as I know (I'd love to be proved wrong on that though!).</p>",
        "id": 257510121,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634205965
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal\">docs#nnreal</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype\">docs#subtype</a>.</p>",
        "id": 257510147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634205981
    },
    {
        "content": "<p>The idea is that you can create a new type by carving it out a previous one using its indicator predicate.</p>",
        "id": 257510181,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634206006
    },
    {
        "content": "<p>By the way, am I mistaken or did the definitions you give earlier, Johan, make no reference to finiteness?</p>",
        "id": 257510221,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634206024
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">positive_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">positive_subtype</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- assumes `hypergraph.count_vertices` is defined</span>\n<span class=\"kd\">def</span> <span class=\"n\">with_vertices</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">hypergraph</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">G.count_vertices</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 257510270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634206056
    },
    {
        "content": "<p><code>multiset</code> is, by definition, finite.</p>",
        "id": 257510273,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634206057
    },
    {
        "content": "<p>Ah, that looks perfect, Yaël.  I hadn't seen this documentation yet.  I'm sorry being such a neophyte. :-)</p>",
        "id": 257510296,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634206071
    },
    {
        "content": "<p>The distinction between <code>set</code> and <code>subtype</code> is a bit painful, unfortunately.</p>",
        "id": 257510346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634206084
    },
    {
        "content": "<p>No worries! We've all been newbies. And there is quite a lot to learn.</p>",
        "id": 257510368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634206097
    },
    {
        "content": "<p>If you want an infinite multiset, you just do <code>α → ℕ</code>.</p>",
        "id": 257510373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634206101
    },
    {
        "content": "<p>We are always interested in taming the learning curve.</p>",
        "id": 257510384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634206109
    },
    {
        "content": "<p>Thanks again, I really appreciate it!  I'll now sit and read and watch and digest a bit.</p>",
        "id": 257510467,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634206169
    },
    {
        "content": "<p>One thing I'm interested in is formalizing the main result in [<a href=\"https://arxiv.org/abs/1809.04726\">HM18</a>]. This is the state of the art for the Paulsen problem in frame theory. Recently, a colleague identified a tiny (presumably inconsequential) error in the proof, so I'd like to regain full confidence. The proof uses Theorem 4.1 in Forster's \"A linear lower bound on the unbounded error probabilistic communication complexity\", which in turn uses tools from matrix analysis (e.g., the spectral theorem for real symmetric matrices, the fact that singular values depend continuously on the matrix, etc.). How far is matrix analysis from today's mathlib?</p>",
        "id": 257517556,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1634210074
    },
    {
        "content": "<p>Tip: Ctrl + Shift + L to insert a link <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 257517817,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634210209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"450749\">@Dustin Mixon</span> I think that such matrix analysis is certainly within reach. <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> might want to chime in.</p>",
        "id": 257524617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634213921
    },
    {
        "content": "<p>We will have the (finite-dimensional) spectral theorem quite soon!  The fact that the singular values depend on the matrix would be very nice to have; I guess one of the ingredients would be the implicit function theorem, which is in mathlib, but another would be the continuity of the determinant, which was mentioned just the other day as a TODO:<br>\n<a href=\"#narrow/stream/303200-sphere-eversion/topic/Smoothness.20of.20barycentric.20coordinates.20.28Lemma.201.2E7.29\">https://leanprover.zulipchat.com/#narrow/stream/303200-sphere-eversion/topic/Smoothness.20of.20barycentric.20coordinates.20.28Lemma.201.2E7.29</a></p>",
        "id": 257535680,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1634218524
    }
]