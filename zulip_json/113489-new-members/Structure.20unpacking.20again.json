[
    {
        "content": "<p>I'm sure I've run into this before, but I can never remember how to get out of it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.quadratic_form</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">Q</span>\n<span class=\"kd\">structure</span> <span class=\"n\">pre</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pre.mk_eta</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">pre.mk</span> <span class=\"n\">b.k</span> <span class=\"n\">b.factors</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span> <span class=\"c1\">-- b = {k := b.k, factors := b.factors}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217431481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605892641
    },
    {
        "content": "<p><code>cases b, simp</code></p>",
        "id": 217431576,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605892683
    },
    {
        "content": "<p>Maybe <code>cases b, refl</code>?</p>",
        "id": 217431682,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605892732
    },
    {
        "content": "<p>A question continuing from that example...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a.k</span> <span class=\"bp\">*</span> <span class=\"n\">b.k</span><span class=\"o\">,</span> <span class=\"n\">a.factors</span> <span class=\"bp\">++</span> <span class=\"n\">b.factors</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">has_mul.mul</span> <span class=\"n\">semigroup.to_has_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">distrib.mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">[]⟩,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>I can't work out how to unfold the definition of <code>mul := ...</code> without also unfolding the <code>*</code> within that definition, which I don't want to touch</p>",
        "id": 217432599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605893155
    },
    {
        "content": "<p>Put <code>@[ext]</code> on <code>structure pre</code> and use <code>ext</code> as the first step, then just apply the lemmas you need</p>",
        "id": 217432821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605893271
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.quadratic_form</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">Q</span>\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">pre</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pre.mk_eta</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">pre.mk</span> <span class=\"n\">b.k</span> <span class=\"n\">b.factors</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a.k</span> <span class=\"bp\">*</span> <span class=\"n\">b.k</span><span class=\"o\">,</span> <span class=\"n\">a.factors</span> <span class=\"bp\">++</span> <span class=\"n\">b.factors</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">[]⟩,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217432959,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605893327
    },
    {
        "content": "<p><code>ext1; dsimp only</code> does the unfolding I need in <code>mul_assoc</code></p>",
        "id": 217433037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605893368
    },
    {
        "content": "<p>But it doens't do the job for <code>one_mul</code> - the one is stubborn and doesn't unfold</p>",
        "id": 217433044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605893374
    },
    {
        "content": "<p>You can always use <code>change</code> :-/</p>",
        "id": 217433523,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605893587
    },
    {
        "content": "<p>Or add some simp lemmas.</p>",
        "id": 217433548,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605893602
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a.k</span> <span class=\"bp\">*</span> <span class=\"n\">b.k</span><span class=\"o\">,</span> <span class=\"n\">a.factors</span> <span class=\"bp\">++</span> <span class=\"n\">b.factors</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">[]⟩,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">pre.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.append_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pre.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.nil_append</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pre.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.append_nil</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217433711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605893668
    },
    {
        "content": "<p>But I still have no idea how to make tactic mode useful for me here</p>",
        "id": 217433726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605893678
    },
    {
        "content": "<p><code>@[ext]</code> was enough to save the day, I'd assumed that it was added automatically</p>",
        "id": 217433786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605893704
    },
    {
        "content": "<p>Well it's going to be hard to improve much on these term-mode proofs</p>",
        "id": 217434457,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605894004
    },
    {
        "content": "<p>It would be nice if I had a better toolbox to discover them</p>",
        "id": 217434491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605894018
    },
    {
        "content": "<p>but after <code>ext</code>, regardless of what Lean is showing you, you know the next step should be <code>apply one_mul</code> etc.</p>",
        "id": 217434499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605894022
    },
    {
        "content": "<p>Well, I only \"know\" that if I know the goal state is definitionally equal to what I was expecting</p>",
        "id": 217434576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605894059
    },
    {
        "content": "<p>But I can't use <code>rw</code> because its not syntactically equal</p>",
        "id": 217434601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605894070
    },
    {
        "content": "<p>But you do know that because you know what the definition of <code>mul</code> is and how Lean works</p>",
        "id": 217434809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605894162
    },
    {
        "content": "<p>I'd be stuck if I didn't have a one-step proof for each of the fields though</p>",
        "id": 217434858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605894186
    },
    {
        "content": "<p>Not as long as you know step 1</p>",
        "id": 217434882,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605894201
    },
    {
        "content": "<p>Right, but i need to know it in terms of <code>apply</code>, not just in terms of a rewrite</p>",
        "id": 217434931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605894232
    },
    {
        "content": "<p>In this case the first step happens to also be the last step</p>",
        "id": 217434944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605894236
    },
    {
        "content": "<p>Sure, it could happen but it didn't</p>",
        "id": 217434963,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605894242
    }
]