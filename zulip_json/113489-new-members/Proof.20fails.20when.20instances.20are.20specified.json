[
    {
        "content": "<p>Hello, I have a proof that only seems to work if the instances are not specified. E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- This works</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">le_sup_left</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">tv</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">le_sup_iff</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- So why shouldn't this?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">le_sup_left_2</span> <span class=\"o\">[</span><span class=\"n\">lo</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">tv</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">has_sup</span> <span class=\"n\">tv</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">tv</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">le_sup_iff</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The message I get in the second lemma is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">lo</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">tv</span><span class=\"o\">,</span>\n<span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">has_sup</span> <span class=\"n\">tv</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">tv</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Which just looking at the pattern alone, that should match?</p>\n<p>I'm very confused and I'm not sure what the upper proof is using if not linear_order tv and has_sup tv.<br>\nI've tried to trim down my code as much as possible<br>\n<a href=\"https://gist.github.com/sjkillen/0dadd10c867de3e0488a51461ac25e4b\">https://gist.github.com/sjkillen/0dadd10c867de3e0488a51461ac25e4b</a></p>",
        "id": 279468760,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650402489
    },
    {
        "content": "<p>This is because <code>[linear_order tv] [has_sup tv]</code> is nonsense.</p>",
        "id": 279469201,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650402747
    },
    {
        "content": "<p>A <code>linear_order</code> already has a <code>sup</code>, namely <code>max</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/sup_eq_max\">docs#sup_eq_max</a>). So <code>[linear_order tv] [has_sup tv]</code> means \"Assume <code>tv</code> is a linear order AND there is a totally unrelated <code>⊔</code> on it as well\". Lean then picks one of the two possible <code>⊔</code> randomly and you eat your hat.</p>",
        "id": 279469332,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650402838
    },
    {
        "content": "<p>Also, you haven't given me a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, so maybe <code>[linear_order tv]</code> is nonsense on its own. Is <code>tv</code> a concrete type that you defined or a  variable that you declared with something like <code>variables {tv : Type*}</code>?</p>",
        "id": 279469507,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650402928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20fails.20when.20instances.20are.20specified/near/279469201\">said</a>:</p>\n<blockquote>\n<p>This is because <code>[linear_order tv] [has_sup tv]</code> is nonsense.</p>\n</blockquote>\n<p>Seems incorrect to call it nonsense -- it means something very precise, just very much not what you'd want.</p>",
        "id": 279469731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650403057
    },
    {
        "content": "<p>Nonsense can be precise! And nobody ever declares two competing instances <em>in square brackets</em>. Eckmann-Hilton does declare two competing instances, but not this way.</p>",
        "id": 279470712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650403438
    },
    {
        "content": "<p>The first one works because of the way you have defined the <code>linear_order</code> and <code>has_sup</code> instances on <code>tv</code>. In the second one you consider arbitrary variable instances  <code>linear_order tv</code> and <code>has_sup tv</code>, which may be unrelated.</p>",
        "id": 279475082,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650406066
    },
    {
        "content": "<p>Ah thank you! I didn't actually realize that a type could have multiple instances defined on it</p>",
        "id": 279477476,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650407775
    },
    {
        "content": "<p>How do I access the has_sup instance for <code>linear_order tv</code>?<br>\nI was to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">lo</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">tv</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_sup</span> <span class=\"n\">tv</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">le_sup_left</span> <span class=\"o\">:=</span> <span class=\"n\">le_sup_left</span><span class=\"o\">,</span>\n<span class=\"n\">le_sup_right</span> <span class=\"o\">:=</span> <span class=\"n\">le_sup_right</span><span class=\"o\">,</span>\n<span class=\"n\">sup_le</span> <span class=\"o\">:=</span> <span class=\"n\">sup_le</span><span class=\"o\">,</span>\n<span class=\"c1\">-- sup := sorry,</span>\n<span class=\"bp\">..</span><span class=\"n\">lo</span>  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 279479453,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650409302
    }
]