[
    {
        "content": "<p>This question is about verification of the behavior of <code>linarith</code>.  Suppose <code>h : ∀ (ε : ℝ), ε &gt; 0 → ...</code> (the rest does not matter) and we have <code>a &gt; b</code> in the context.  If you do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>the <code>linarith</code> fails to prove <code>ε &gt; 0</code>.  However, if you do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">εeq</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>the <code>linarith</code> succeeds proving the same fact.</p>\n<p>Having perused the code for the tactic, it seems it looks through the context only for propositions that are inequalities.  Is there any reason it doesn't also consider definitions produced by <code>let</code>?  (Another question: is there a tactic that converts definitions into equalities?)</p>",
        "id": 199939542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591394983
    },
    {
        "content": "<p>This doesn't answer your question, but I avoid issues like this by using <code>set</code> or by using the full expression instead of a name for it</p>",
        "id": 199940521,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591395738
    },
    {
        "content": "<p>Is the issue that you are using the banned predicate <code>&gt;</code> instead of the officially sanctioned <code>&lt;</code>? Not sure if this is relevant</p>",
        "id": 199941048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591396184
    },
    {
        "content": "<p>here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199941141,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591396256
    },
    {
        "content": "<p>Thanks for the MWE.  In the second example, it looks like you can replace <code>simp only [eq_self_iff_true]</code> with <code>refl</code>.</p>",
        "id": 199941247,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591396353
    },
    {
        "content": "<p>hah thanks, I am silly</p>",
        "id": 199941281,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591396407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/linarith.20and.20let/near/199941048\">said</a>:</p>\n<blockquote>\n<p>Is the issue that you are using the banned predicate <code>&gt;</code> instead of the officially sanctioned <code>&lt;</code>? Not sure if this is relevant</p>\n</blockquote>\n<p>I just tried reversing the inequalities, and <code>linarith</code> still doesn't seem to notice the definition of epsilon.</p>",
        "id": 199941352,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591396448
    },
    {
        "content": "<p>I guess one of your questions is \"how do i complete the following proof in tactic mode\"?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199941366,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591396464
    },
    {
        "content": "<p>My best guess at the answer is <code>  have : ε = (a - b) / 2 := by refl, linarith</code></p>",
        "id": 199941526,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591396619
    },
    {
        "content": "<p>I think you're just supposed to keep the definition of <code>\\e</code> in context</p>",
        "id": 199941546,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591396649
    },
    {
        "content": "<p>the tactic state gives a handy little reminder how <code>\\e</code> is defined but if you want to do math you need the theorem that <code>\\e</code> and some other thing are equal</p>",
        "id": 199941620,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591396720
    },
    {
        "content": "<p>Do you think there's any reason <code>linarith</code> doesn't consider definitions as equalities?</p>",
        "id": 199941630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591396728
    },
    {
        "content": "<p>(of course, other than the fact it's not programmed that way [yet])</p>",
        "id": 199941654,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591396747
    },
    {
        "content": "<p>the difference between defeq and other kinds of equality is mysterious to me</p>",
        "id": 199941681,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591396771
    },
    {
        "content": "<p>but notice that the <code>refl</code> tactic isn't free to apply. you wouldnt necessarily want it to run everytime <code>linarith</code> wants to do something</p>",
        "id": 199941689,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591396779
    },
    {
        "content": "<p>I think <code>set</code> is essentially doing the refl tactic and substituting the definition into the rhs, but I haven't checked</p>",
        "id": 199941770,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591396826
    },
    {
        "content": "<p>Speaking of which, I know <code>unfold</code> can unfold certain definitions, but how do you \"unfold\" the definition of, say, epsilon in an expression?</p>",
        "id": 199941841,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591396910
    },
    {
        "content": "<p>this takes noticeably long to run on my computer:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1001</span> <span class=\"bp\">+</span> <span class=\"mi\">1000</span> <span class=\"bp\">=</span> <span class=\"mi\">2001</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 199941925,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591396959
    },
    {
        "content": "<p>Oh, got it, <code>dsimp only [ε]</code></p>",
        "id": 199941938,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591396969
    },
    {
        "content": "<p>so this is the final result?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">],</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199941983,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591397032
    },
    {
        "content": "<p>That seems like the best approach so far (assuming the definition of epsilon is given to you and you can't turn it into a <code>set</code>).  It's a bit non-intuitive and backwards-feeling (ideally you could supply the positivity proof up-front), but at least the proof doesn't need you to have multiple copies of the definition of epsilon.</p>",
        "id": 199942325,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591397302
    },
    {
        "content": "<p>Lets in the context are a little special. For most of lean automation the <code>:= ...</code> part isn't visible - they look just like regular variables in the definition. So <code>linarith</code> will see that epsilon is a real number but nothing else. Some relatively recent changes have made it easier to get access to these definitions, but it still seems like a bad idea for linarith to eagerly unfold all lets because this could explode the state.</p>",
        "id": 199946423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591401509
    }
]