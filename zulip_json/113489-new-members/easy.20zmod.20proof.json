[
    {
        "content": "<p>Is there a decent way to prove something about something mod n where you have a proof that if k is true, then k+n is also true, and then just bashing the small cases?<br>\nCurrently I have this (here the proof of <code>modfact1</code> is irrelevant except for maybe proving <code>modfact2</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">modfact1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">zmod.val</span> <span class=\"o\">(</span><span class=\"n\">pow_add</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span><span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">modfact2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211871268,
        "sender_full_name": "Kenji Nakagawa",
        "timestamp": 1601530795
    },
    {
        "content": "<p>Not very familiar with <code>zmod</code>. But here are two options.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">modfact2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">n'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- 0 case</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- 1 case</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- 2 case</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">modfact2'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span> <span class=\"c1\">-- 3+ case</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211871923,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601531822
    },
    {
        "content": "<p>You'll probably want to restate <code>modfact1</code> to be in <code>n + 3</code> form instead.</p>",
        "id": 211872234,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601532359
    },
    {
        "content": "<p><code>dec_trivial</code> should be able to handle the <code>n &lt; 7</code> case</p>",
        "id": 211872273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601532393
    },
    {
        "content": "<p>Note that <code>.val</code> is an implementation issue that should be avoided.</p>",
        "id": 211872453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601532660
    },
    {
        "content": "<p>If you want to stay in the nats, maybe <code>2 ^ n % 7</code> is what you want.</p>",
        "id": 211872465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601532689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319839\">@Kenji Nakagawa</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">modfact2'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">7</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211872604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601532864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319839\">@Kenji Nakagawa</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">modfact2'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zmod.pow_bit0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">zmod.pow_card_sub_one_eq_one</span> <span class=\"n\">hk</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">modfact2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">delta</span> <span class=\"n\">fact</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.mod_add_div</span> <span class=\"n\">n</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now run `squeeze_simp [h2, pow_add, pow_mul]`</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">bit0_zero</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">zmod.cast_self</span><span class=\"o\">,</span>\n    <span class=\"n\">zmod.pow_bit0</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_bit0</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">modfact2'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.mod_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211873184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601533697
    },
    {
        "content": "<p>I think that <code>zmod.pow_bit0</code> should be part of mathlib</p>",
        "id": 211873195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601533720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think it makes sense to teach the primality prover of <code>norm_num</code> about <code>fact</code>?</p>",
        "id": 211873207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601533742
    },
    {
        "content": "<p>this <code>fin_cases</code> is neat. can I somehow use that on a variable n if I just know something like <code>n &lt; 10</code>? (for nats)</p>",
        "id": 211873281,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601533817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#interval_cases\">tactic#interval_cases</a> might work better for that use case.</p>",
        "id": 211873400,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601533974
    },
    {
        "content": "<p>ooh interesting</p>",
        "id": 211873411,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601533998
    },
    {
        "content": "<p>just as a sanity check, roughly how many goals should I expect Lean to handle at once. tens? hundreds? thousands? more? less?</p>",
        "id": 211873426,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601534029
    },
    {
        "content": "<p>Hmm, I would say &lt; 10. But I don't really know</p>",
        "id": 211873729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601534376
    },
    {
        "content": "<p>Of course it depends immensely on what kind of goals you are talking about</p>",
        "id": 211873742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601534397
    },
    {
        "content": "<p>i basically have a simple expression of natural numbers, and i want to check that it is nonzero for n = 0 ... 1000</p>",
        "id": 211874034,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601534686
    },
    {
        "content": "<p>but it pegs at 100% cpu whenever i just try to expand this out into 1000 goals</p>",
        "id": 211874075,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601534724
    },
    {
        "content": "<p>well, the compiler can't even really handle 1000 of these proofs each on their own line in a file. so it's probably not going to work to do it via a tactic either....</p>",
        "id": 211874812,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> please paste some code (and start a new thread <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 211874871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601535587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/easy.20zmod.20proof/near/211873207\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> Do you think it makes sense to teach the primality prover of <code>norm_num</code> about <code>fact</code>?</p>\n</blockquote>\n<p>I think it makes more sense to have a <code>fact.mk</code></p>",
        "id": 211943329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601572499
    },
    {
        "content": "<p>the API behind fact is pretty absent</p>",
        "id": 211943358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601572518
    },
    {
        "content": "<p>I mean, it would be nice if it could see through <code>fact</code>, instead of needing to write <code>delta fact; norm_num</code> when prove <code>fact (nat.prime 7)</code></p>",
        "id": 211943789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601572693
    },
    {
        "content": "<p>It just uses simp. Should that be a simp lemma?</p>",
        "id": 211946639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601573912
    },
    {
        "content": "<p>I guess if <code>fact.mk</code> was a simp lemma this would solve the problem</p>",
        "id": 211946775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601573994
    },
    {
        "content": "<p>I guess that would cause other problems. You almost never want to simp <code>fact</code> away.</p>",
        "id": 211946909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601574054
    },
    {
        "content": "<p>Can you do <code>norm_num [extra, simp, lemmas]</code>?</p>",
        "id": 211946944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601574075
    },
    {
        "content": "<p>Then don't simp a hypothesis</p>",
        "id": 211946968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601574084
    },
    {
        "content": "<p>yes you can</p>",
        "id": 211946980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601574089
    },
    {
        "content": "<p>I think if <code>fact.mk</code>, that is <code>p -&gt; fact p</code> was a simp lemma, then it still wouldn't simplify <code>fact</code> away unless it could prove the contents</p>",
        "id": 211947131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601574150
    },
    {
        "content": "<p>but unless you can find a way to do this with simp I don't think it should go into norm_num. But <code>delta fact</code> is a really ugly way to do it</p>",
        "id": 211947229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601574209
    },
    {
        "content": "<p>If <code>fact</code> was a one argument structure then you could write <code>&lt;by norm_num&gt;</code></p>",
        "id": 211947347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601574260
    },
    {
        "content": "<p>Sure, but then you cannot write <code>hp.pos</code> or <code>hp.one_lt</code> etc, for <code>hp : fact p.prime</code></p>",
        "id": 211947847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601574512
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">fact</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 211947910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601574553
    },
    {
        "content": "<p>This works (-;</p>",
        "id": 211947926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601574558
    },
    {
        "content": "<p>you could write <code>hp.1.pos</code> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 211948009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601574595
    }
]