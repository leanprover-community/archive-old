[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">he</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>How do I construct the same thing without using <code>classical.some</code>? I think it is possible because <code>ha</code> says f doesn't care which <code>x</code> is chosen as long as <code>p x</code> is satisfied.</p>",
        "id": 166236339,
        "sender_full_name": "Joe",
        "timestamp": 1558499633
    },
    {
        "content": "<p>it's not possible</p>",
        "id": 166236541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558499951
    },
    {
        "content": "<p>this is called unique choice, and there isn't a way to get it without using choice or making your own axiom</p>",
        "id": 166236546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558499986
    },
    {
        "content": "<p>as far as lean is concerned, it's just as \"nonconstructive\" because the exists doesn't tell you how to find such an element</p>",
        "id": 166236602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558500034
    },
    {
        "content": "<p>For example, you could use this to compute the busy beaver function</p>",
        "id": 166236667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558500168
    },
    {
        "content": "<p>are lean's constructive reals the same as the computable reals? another example could be definable but noncomputable reals</p>",
        "id": 166239269,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1558504217
    },
    {
        "content": "<p>Oh, wait, what's that <code>(x : α)</code> doing there? It's not used in the definition</p>",
        "id": 166239612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558504693
    },
    {
        "content": "<p>I will assume that's a typo. Here's how everything becomes computable using (computable) unique choice:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">unique_choice</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">choice&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">unique_choice</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>",
        "id": 166239650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558504799
    },
    {
        "content": "<p>The problem is that even if <code>f : α → β</code> is a function which is computable and which you can prove is a bijection, there might be no algorithm to compute the inverse function (the proof might just be an abstract existence proof rather than a construction). Going from <code>∃ x, p x</code> to <code>x</code> is going from the <code>Prop</code> universe to the <code>Type</code> universe and sometimes this is not possible constructively.</p>",
        "id": 166241415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558507237
    },
    {
        "content": "<blockquote>\n<p>are lean's constructive reals the same as the computable reals? another example could be definable but noncomputable reals</p>\n</blockquote>\n<p>Does Lean even have constructive reals?</p>",
        "id": 166241457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558507297
    },
    {
        "content": "<p>there's an issue about that</p>",
        "id": 166242517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558508598
    },
    {
        "content": "<p>It's also worth pointing out that you can avoid <code>classical.some</code> if  <code>α</code>  and <code>β</code> are finite with decidable equality.  I think that this is in mathlib with a non-obvious name that I do not remember.  There is a more extensive set of similar results <a href=\"https://github.com/NeilStrickland/lean_lib/blob/master/src/data/unique_element.lean\" target=\"_blank\" title=\"https://github.com/NeilStrickland/lean_lib/blob/master/src/data/unique_element.lean\">here</a>.  This will need some work before it can go into mathlib, but I hope to do that at some point.</p>",
        "id": 166247083,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558513727
    },
    {
        "content": "<p>Even if alpha is infinite I guess you could get away with it, as long as it has decidable equality and can be computably enumerated (e.g. <code>nat</code>, for which there is even some explicit function that does it IIRC, <code>nat.some</code> or something? Not at Lean right now). </p>\n<p>Can someone remind me of a computable bijection (on the reals, or the power set of the naturals or something) with no computable inverse?</p>",
        "id": 166257466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558523246
    },
    {
        "content": "<blockquote>\n<p>There is a more extensive set of similar results <a href=\"https://github.com/NeilStrickland/lean_lib/blob/master/src/data/unique_element.lean\" target=\"_blank\" title=\"https://github.com/NeilStrickland/lean_lib/blob/master/src/data/unique_element.lean\">here</a>.  </p>\n</blockquote>\n<p>Is this one of these situations where the <code>trunc</code> trick can somehow help? I didn't understand this trick in the past but it's getting to the point where the next time that someone explains it to me, I'll probably get it.</p>",
        "id": 166257568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558523358
    },
    {
        "content": "<p>Yes. If you replace <code>\\ex x, p x</code> with <code>trunc {x // p x}</code> then it's definable</p>",
        "id": 166257921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558523678
    },
    {
        "content": "<p>The proof of this is just the literal construction -</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">quot</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">unique_choice</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">:{</span><span class=\"n\">x</span><span class=\"bp\">//</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">he</span>\n</pre></div>\n\n\n<p>but the meaning explanation is that <code>trunc</code> contains data that can be used in further computation, because it lives in <code>Type</code> instead of <code>Prop</code>. So when the VM wants to execute this function it just takes <code>f</code> and applies it to the value stored in <code>he</code></p>",
        "id": 166258183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558523893
    },
    {
        "content": "<p>You can't do this with the exists version because <code>he</code> isn't storing anything in that case</p>",
        "id": 166258215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558523922
    },
    {
        "content": "<p>I guess the canonical function from <code>option A</code> to <code>roption A</code> is a bijection with no computable inverse</p>",
        "id": 166258485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558524178
    },
    {
        "content": "<p>I guess that the coercion <code>bool → Prop</code> is also a bijection without computable inverse.</p>",
        "id": 166259022,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558524689
    },
    {
        "content": "<blockquote>\n<p>I guess that the coercion <code>bool → Prop</code> is also a bijection without computable inverse.</p>\n</blockquote>\n<p>I'm not sure it is provably a bijection in Lean, is it?</p>",
        "id": 166259706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558525368
    },
    {
        "content": "<blockquote>\n<p>I guess the canonical function from <code>option A</code> to <code>roption A</code> is a bijection with no computable inverse</p>\n</blockquote>\n<p>We could also consider the function from functions to bool sending f to true iff f is canonical</p>",
        "id": 166259799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558525464
    },
    {
        "content": "<p>both are provably bijections assuming choice</p>",
        "id": 166260156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558525815
    },
    {
        "content": "<p>If you don't assume choice then it's a very different problem... In this case you are purely intuitionistic and so from the existence property from a closed proof that the function is bijective you can reconstruct a function that was the existential witness</p>",
        "id": 166260292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558525924
    },
    {
        "content": "<p>Is it an orthogonal issue that possibly multiple instances of <code>nonempty α</code> could exist and any function which tries to compute <code>(h: nonempty α) -&gt; α := choice α h</code> would have to choose one nondeterministically? Or is this more or less the same problem?</p>",
        "id": 167497334,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1559838386
    },
    {
        "content": "<p>This cannot happen, since <code>nonempty α</code> is defined to live in <code>Prop</code>. Hence every term of type <code>nonempty α</code> is equal to every other. Thus applying <code>choice</code> to any two such terms gives the same result.</p>",
        "id": 167557056,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559895274
    }
]