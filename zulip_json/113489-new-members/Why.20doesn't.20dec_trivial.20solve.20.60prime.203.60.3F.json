[
    {
        "content": "<p>In <code>prime.lean</code>, the following statements are made:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">prime_two</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">prime_three</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>\n\n\n<p>And both work. However if I reproduce the same code on another lean file, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">prime_two</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">prime_three</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>\n\n\n<p>Only <code>prime_two</code> works. What's going on?</p>",
        "id": 136416609,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1540394441
    },
    {
        "content": "<p>The crucial line in <code>data.nat.prime</code> seems to be <code>local attribute [instance] decidable_prime_1</code>. If you include that, then <code>prime_three</code> works.</p>",
        "id": 136417706,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540395514
    },
    {
        "content": "<p>I guess what's initially surprising is how lean knows <code>prime 2</code> is decidable without that instance.</p>",
        "id": 136417744,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540395567
    },
    {
        "content": "<p><code>decidable_prime_1</code> just says: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">decidable_prime_1</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_of_iff&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">prime_def_lt&#39;</span>\n</pre></div>",
        "id": 136417839,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540395614
    },
    {
        "content": "<p>Here's the definition of <code>prime</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"err\">∣</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n</pre></div>\n\n\n<p>and here's the type of <code>prime_def_lt</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">prime_def_lt&#39;</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">m</span> <span class=\"err\">∣</span> <span class=\"n\">p</span>\n</pre></div>\n\n\n<p>When <code>p=2</code> it's obvious to lean that <code>prime p</code> is decidable, but when <code>p &gt; 2</code> it needs the extra hint that you only need to check <code>m &lt; p</code>.</p>",
        "id": 136418233,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540395968
    },
    {
        "content": "<p>Ah ok. Interestingly if the file contains <code>local attribute [instance] classical.prop_decidable</code> (and not <code>nat.decidable_prime_1</code>), then even <code>prime 2</code> gets messed up.</p>",
        "id": 136418284,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1540396055
    },
    {
        "content": "<p>Yes, that makes sense. I don't think <code>dec_trivial</code> can do very much for you when every proposition is declared to be decidable.</p>",
        "id": 136418800,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540396512
    },
    {
        "content": "<p>If every proposition is declared to be decidable, but you still want to use <code>dec_trivial</code>, the trick is <code>local attribute [instance, priority 0] classical.prop_decidable</code></p>",
        "id": 136425801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540403985
    },
    {
        "content": "<p>Then the \"fake\" decidabilty is always used after the \"real\" one, if a real one can be found.</p>",
        "id": 136425868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540404015
    },
    {
        "content": "<blockquote>\n<p>If every proposition is declared to be decidable, but you still want to use <code>dec_trivial</code>, the trick is <code>local attribute [instance, priority 0] classical.prop_decidable</code></p>\n</blockquote>\n<p>Yeah, I know that -- but I don't get why exactly it is that the fake decidability isn't enough for dec_trivial.</p>",
        "id": 136425939,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1540404089
    },
    {
        "content": "<p>because it uses <code>choice</code> and the VM can't evaluate <code>choice</code></p>",
        "id": 136426003,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540404154
    },
    {
        "content": "<p>fake decidability just confuses <code>dec_trivial</code>. We saw another instance of <code>dec_trivial</code> getting confused in the <code>even</code> thread a week or so ago. I am very much not an expert in these matters, but it's something to do with what the VM does</p>",
        "id": 136426010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540404166
    },
    {
        "content": "<p><code>decidable</code> isn't a Prop, it's data</p>",
        "id": 136426012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540404169
    },
    {
        "content": "<p>what Kenny said</p>",
        "id": 136426014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540404172
    },
    {
        "content": "<p>Yeah. I don't understand this properly. I don't even really know what the kernel and the VM are. I suspect that this might be quite a good way of learning what the difference is between them.</p>",
        "id": 136426117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540404282
    },
    {
        "content": "<p><code>decidable blah</code> usually encodes some sort of way of computing whether blah is true or false. But if you make a random instance of it using classical mathematics then the algorithm isn't actually there. What does the kernel think of this situation? What about the VM?</p>",
        "id": 136426264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540404413
    },
    {
        "content": "<p>What would happen if there were no VM? The kernel does all the typechecking, right? Why do we even need the VM?</p>",
        "id": 136426305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540404470
    },
    {
        "content": "<p>Sorry for my dumb questions -- given that we are on the \"new members\" stream I figure they would be OK.</p>",
        "id": 136426361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540404498
    },
    {
        "content": "<p>The VM is faster than the kernel. This is useful for executing tactics.</p>",
        "id": 136426424,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540404593
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>If every proposition is declared to be decidable, but you still want to use <code>dec_trivial</code>, the trick is <code>local attribute [instance, priority 0] classical.prop_decidable</code></p>\n</blockquote>\n<p>Yeah, I know that -- but I don't get why exactly it is that the fake decidability isn't enough for dec_trivial.</p>\n</blockquote>\n<p>The idea behind <code>dec_trivial</code> is basically that the value of type <code>decidable P</code> given by the instance is going to reduce to either <code>is_false p</code> (where <code>p : not P</code>) or <code>is_true p</code> (where <code>p : P</code>). But if you use an axiom to define the instance, like <code>classical.prop_decidable</code> does, then that axiom won't be reducible.</p>",
        "id": 136426930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540405101
    },
    {
        "content": "<p>I <em>think</em> the VM is actually not involved here. But some things about <code>dec_trivial</code> still confuse me.</p>",
        "id": 136426949,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540405145
    },
    {
        "content": "<p>(Like why do we need this tactic <code>meta def triv : tactic unit := mk_const `trivial &gt;&gt;= exact</code>? Could we just have defined <code>notation `dec_trivial` := of_as_true trivial</code>?)</p>",
        "id": 136427170,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540405326
    },
    {
        "content": "<p>Maybe this is the <code>by exact</code> trick to defer type checking a term, in the hopes that its expected type will be known later?</p>",
        "id": 136427226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540405415
    },
    {
        "content": "<p>I'm intrigued. I've never heard of the <code>by exact</code> trick. Where (else) is it used?</p>",
        "id": 136427709,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540405879
    },
    {
        "content": "<p>whenever Lean is being dumb</p>",
        "id": 136427741,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540405921
    },
    {
        "content": "<p>that is to say, I don't really understand when or why it works--I have used it successfully once or twice though</p>",
        "id": 136427796,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540405941
    },
    {
        "content": "<p>I guess something like: if there is a subterm which should type check, but Lean is rejecting it, and there are metavariables in its expected type, then maybe wrapping the subterm in <code>by exact</code> will cause those metavariables to be solved for earlier relative to Lean trying to check the subterm</p>",
        "id": 136427913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540406044
    },
    {
        "content": "<p>I think it's the kind of thing which only crops up in situations which are a bit complicated</p>",
        "id": 136427965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540406130
    },
    {
        "content": "<p>I did a search for \"<code>by exact</code>\" in mathlib and it looks like <a href=\"https://github.com/leanprover/mathlib/blob/fedee9835e73df24a367163e87c9c70284acf4f2/set_theory/cardinal.lean#L309\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/fedee9835e73df24a367163e87c9c70284acf4f2/set_theory/cardinal.lean#L309\">there's a concrete example</a> in <code>set_theory/cardinal.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_one_le_succ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">succ</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">β</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"k\">with</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">ne_of_lt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">of_bijective</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inj</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩⟩</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">nex</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"bp\">|⟨⟨⟨⟩⟩⟩;</span> <span class=\"n\">rcases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"bp\">|⟨⟨⟨⟩⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nex</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nex</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Removing <code>by exact</code> from the line <code>refine ⟨⟨sum.rec (by exact f) _, _⟩⟩,</code> causes lean to complain:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"err\">⇑</span><span class=\"n\">f</span>\n<span class=\"n\">term</span>\n  <span class=\"err\">⇑</span><span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_coe_to_fun</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I guess this is what you're describing?</p>\n<p>(on the other hand, <a href=\"https://github.com/leanprover/mathlib/blob/fedee9835e73df24a367163e87c9c70284acf4f2/set_theory/cardinal.lean#L296\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/fedee9835e73df24a367163e87c9c70284acf4f2/set_theory/cardinal.lean#L296\">the <code>by exact</code> at line 296</a> can be removed, at least when I play around with this in VS code.)</p>",
        "id": 136428220,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540406410
    },
    {
        "content": "<p>Yeah, there are metavariables in the expected type, and in this case those prevent the coercion from triggering, I guess</p>",
        "id": 136428283,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540406516
    },
    {
        "content": "<p>Returning to your question about why <code>dec_trivial</code> isn't just notation for <code>of_as_true trivial</code>, the <code>prime 2</code> and <code>prime 3</code> examples can be proved with <code>of_as_true trivial</code>, which is also disposing of all the other <code>dec_trivial</code> examples I'm throwing at it at the moment.  Can we cook up an example where <code>of_as_true trivial</code> fails and the current <code>dec_trivial</code> works?</p>",
        "id": 136429224,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540407416
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">of_as_true</span> <span class=\"n\">trivial</span>\n</pre></div>",
        "id": 136429357,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540407554
    },
    {
        "content": "<p>But returning to the original original question: I think there's something wrong with the current <code>nat.decidable_prime</code> instance. For <code>n &gt; 2</code> it depends on  evaluating <code>min_fac</code>, and reducing <code>min_fac 3</code> takes an implausible amount of time.</p>",
        "id": 136429714,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540407843
    },
    {
        "content": "<p>I remember being confused by exactly this original issue about <code>is_prime 2</code> and <code>is_prime 3</code> as well when I was starting out using Lean. It would be nice if it could be fixed somehow.</p>",
        "id": 136429866,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540407981
    },
    {
        "content": "<p><code>nat.decidable_prime</code> should evaluate faster than <code>nat.decidable_prime_1</code> in the VM, I think, but apparently not in the kernel.</p>",
        "id": 136429876,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540407994
    },
    {
        "content": "<p>Maybe this isn't \"wrong,\" it could be the right default for the way <code>prime</code> is used right now.</p>",
        "id": 136429966,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540408091
    },
    {
        "content": "<p>But it is confusing.</p>",
        "id": 136429969,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540408099
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">of_as_true</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is the current definition of <code>dec_trivial</code> using <code>meta def triv : tactic unit := mk_const `trivial &gt;&gt;= exact</code> equivalent to <code>of_as_true (by exact trivial)</code>?</p>",
        "id": 136430222,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540408434
    },
    {
        "content": "<p>yes, this is just the situation. <code>decidable_prime_1</code> is faster in the kernel, <code>decidable_prime</code> is faster in the VM (and also incorporates some tricks to speed up the checking of largeish numbers)</p>",
        "id": 136430285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540408482
    },
    {
        "content": "<p>I recommend using <code>by norm_num</code> if you want a proof that a number is prime, though, since this builds a proof using similar tricks but the kernel will accept it</p>",
        "id": 136430327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540408550
    },
    {
        "content": "<p>Oh, cool, I didn't know <code>norm_num</code> did primality proofs.</p>",
        "id": 136430389,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540408613
    },
    {
        "content": "<p>it's a recently added module</p>",
        "id": 136430397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540408623
    },
    {
        "content": "<blockquote>\n<p>Is the current definition of <code>dec_trivial</code> using <code>meta def triv : tactic unit := mk_const `trivial &gt;&gt;= exact</code> equivalent to <code>of_as_true (by exact trivial)</code>?</p>\n</blockquote>\n<p>It should be, though maybe <code>tactic.interactive.exact</code> is not available yet when <code>dec_trivial</code> is being defined</p>",
        "id": 136430418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540408656
    },
    {
        "content": "<blockquote>\n<p>Oh, cool, I didn't know <code>norm_num</code> did primality proofs.</p>\n</blockquote>\n<p><a href=\"https://xenaproject.wordpress.com/2018/07/26/617-is-prime/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/07/26/617-is-prime/\">https://xenaproject.wordpress.com/2018/07/26/617-is-prime/</a> -- last line!</p>",
        "id": 136431051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540409303
    },
    {
        "content": "<p>Now I'm wondering: what's the largest number formally proven to be prime</p>",
        "id": 136431192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540409435
    },
    {
        "content": "<p>I would definitely start with the largest known Mersenne prime (i.e. the largest known prime).</p>",
        "id": 136431228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540409470
    },
    {
        "content": "<p>Aren't the primality tests pretty low-level and trivial?</p>",
        "id": 136431242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540409484
    },
    {
        "content": "<p>I think they take a couple of weeks to run though :-/</p>",
        "id": 136431260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540409507
    },
    {
        "content": "<p>You'd probably have to do a bit of elementary number theory to prove they are correct</p>",
        "id": 136431264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540409512
    },
    {
        "content": "<blockquote>\n<p>Aren't the primality tests pretty low-level and trivial?</p>\n</blockquote>\n<p>...</p>",
        "id": 136431268,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540409516
    },
    {
        "content": "<p>right</p>",
        "id": 136431270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540409519
    },
    {
        "content": "<p>They are specific primality tests for Mersenne numbers</p>",
        "id": 136431314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540409533
    },
    {
        "content": "<p>A separate question is, if I gave you a \"random\" 256-bit prime, could we prove it's prime using the AKS primality test or something like that</p>",
        "id": 136431334,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540409573
    },
    {
        "content": "<p>The current algorithm is just trial division with some optimizations</p>",
        "id": 136431355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540409601
    },
    {
        "content": "<p>so it is still exponential in the bits of the number</p>",
        "id": 136431364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540409618
    },
    {
        "content": "<p>I thought about implementing AKS, but it probably won't show an advantage until at least 15-digit primes</p>",
        "id": 136431416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540409654
    },
    {
        "content": "<p><a href=\"http://www.lix.polytechnique.fr/~werner/publis/flops06.pdf\" target=\"_blank\" title=\"http://www.lix.polytechnique.fr/~werner/publis/flops06.pdf\">http://www.lix.polytechnique.fr/~werner/publis/flops06.pdf</a> has some benchmarks.</p>",
        "id": 136431457,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1540409735
    },
    {
        "content": "<p>Apparently the answer was probably the 20th Mersenne prime <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>4</mn><mn>4</mn><mn>2</mn><mn>3</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{4423} - 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">4</span><span class=\"mord mathrm mtight\">4</span><span class=\"mord mathrm mtight\">2</span><span class=\"mord mathrm mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span>, at least as of whenever that paper was written</p>",
        "id": 136432039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540410364
    },
    {
        "content": "<p>Is that all??</p>",
        "id": 136432178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540410585
    },
    {
        "content": "<p>People aren't trying hard enough</p>",
        "id": 136432183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540410591
    },
    {
        "content": "<p>If I understood the paper correctly, they are using a mode of Coq with a VM implementation of reduction in the kernel, so it's a rather large trusted kernel code base as well</p>",
        "id": 136432377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540410778
    },
    {
        "content": "<p>though apparently they don't use native machine arithmetic, so I'm not really sure</p>",
        "id": 136432418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540410836
    },
    {
        "content": "<p>So I finally had a chance to look at the paper Rob linked to. So they seem to be doing lots of things at once. They have implemented a generic primality test (this is before AKS I guess -- IIRC that was discovered around the same time). But I am not sure if people care about 10 more primes being verified prime -- people care about the <em>biggest</em> one. So forget Pocklington -- one wants to go straight for the Mersenne primes and probably use the polynomial time Lucas method. So the thing to go for is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>:</mo><mo>=</mo><msup><mn>2</mn><mrow><mn>9</mn><mn>6</mn><mn>8</mn><mn>9</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">P:=2^{9689}-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">P</span><span class=\"mrel\">:</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">9</span><span class=\"mord mathrm mtight\">6</span><span class=\"mord mathrm mtight\">8</span><span class=\"mord mathrm mtight\">9</span></span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span>. This can be proved prime if one can knock off a proof of <a href=\"https://en.wikipedia.org/wiki/Lucas%E2%80%93Lehmer_primality_test\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Lucas%E2%80%93Lehmer_primality_test\">the Lucas-Lehmer primality test</a>, which looks well within reach, and then one has to basically square 9689 numbers modulo <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">P</span></span></span></span>. How feasible is that? I just ran the entire test in 217 ms in pari-gp.</p>",
        "id": 136669712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540760743
    },
    {
        "content": "<p>The next question of course is how feasible it is to square 77232917 numbers modulo <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>7</mn><mn>7</mn><mn>2</mn><mn>3</mn><mn>2</mn><mn>9</mn><mn>1</mn><mn>7</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{77232917}-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">7</span><span class=\"mord mathrm mtight\">7</span><span class=\"mord mathrm mtight\">2</span><span class=\"mord mathrm mtight\">3</span><span class=\"mord mathrm mtight\">2</span><span class=\"mord mathrm mtight\">9</span><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span>.</p>",
        "id": 136669835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540760988
    },
    {
        "content": "<p>It's probably worth pointing out that if numbers are somehow being stored in binary, then reducing modulo a number of the form <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^n-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span> can be done using specialised code which would perhaps be more efficient than usual Euclid? But I have no idea whatsoever how reasonable it would be to expect Lean to do any arithmetic at all with numbers so large.</p>",
        "id": 136670082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540761377
    }
]