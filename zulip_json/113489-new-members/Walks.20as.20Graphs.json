[
    {
        "content": "<p>Hello everyone,<br>\nonce again I have an issue with my directed graphs. I am trying to transfer directed walks to directed (sub)graphs :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">directed_simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">directed_simple_graph</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">directed_simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">directed_subgraph</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">directed_simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kd\">extends</span> <span class=\"n\">directed_simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">verts</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">adj_sub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">G.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edge_vert</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">verts</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">verts</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">singleton_directed_subgraph</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">directed_simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">G.directed_subgraph</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">verts</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">},</span>\n  <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span>\n  <span class=\"n\">adj_sub</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">set.bot_eq_empty</span><span class=\"o\">],</span>\n  <span class=\"n\">edge_vert</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">set.bot_eq_empty</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">directed_subgraph_of_adj</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">directed_simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hvw</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">G.directed_subgraph</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">verts</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">},</span>\n  <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">adj_sub</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod.mk.inj_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h.2</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hvw</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">edge_vert</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod.mk.inj_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">eq.symm</span> <span class=\"n\">h.1</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">eq.symm</span> <span class=\"n\">h.2</span><span class=\"o\">},</span> <span class=\"o\">}}</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">directed_walk</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">directed_walk</span> <span class=\"n\">u</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">directed_walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">directed_walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">directed_walk</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">to_directed_subgraph</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">G.directed_walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">G.directed_subgraph</span>\n<span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">G.singleton_directed_subgraph</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">G.directed_subgraph_of_adj</span> <span class=\"n\">h</span> <span class=\"bp\">⊔</span> <span class=\"n\">p.to_directed_subgraph</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">to_directed_graph</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.directed_walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">directed_simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">p.to_directed_subgraph.to_directed_simple_graph</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">directed_walk</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">directed_simple_graph</span>\n</code></pre></div>\n<p>Any help is appreciated.</p>",
        "id": 321055484,
        "sender_full_name": "Christopher Schmidt",
        "timestamp": 1673566776
    },
    {
        "content": "<p>What is your issue?</p>",
        "id": 321117325,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673603129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> oh, the code (i.e. \"to_directed_subgraph\" and \"to_directed_graph\") does not compile</p>\n<p>there seems to be a problem with \" ⊔\" and \"p.to_directed_subgraph.to_directed_simple_graph\"</p>",
        "id": 321127991,
        "sender_full_name": "Christopher Schmidt",
        "timestamp": 1673606441
    },
    {
        "content": "<p><code>⊔</code> comes from defining a <code>has_sup</code> instance. This is implied by the lattice instance for <code>subgraph</code> (the <code>sup</code> field): <a href=\"https://github.com/leanprover-community/mathlib/blob/9003f28797c0664a49e4179487267c494477d853/src/combinatorics/simple_graph/subgraph.lean#L266\">https://github.com/leanprover-community/mathlib/blob/9003f28797c0664a49e4179487267c494477d853/src/combinatorics/simple_graph/subgraph.lean#L266</a></p>",
        "id": 321150873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673613683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Walks.20as.20Graphs/near/321150873\">schrieb</a>:</p>\n<blockquote>\n<p><code>⊔</code> comes from defining a <code>has_sup</code> instance. This is implied by the lattice instance for <code>subgraph</code> (the <code>sup</code> field): <a href=\"https://github.com/leanprover-community/mathlib/blob/9003f28797c0664a49e4179487267c494477d853/src/combinatorics/simple_graph/subgraph.lean#L266\">https://github.com/leanprover-community/mathlib/blob/9003f28797c0664a49e4179487267c494477d853/src/combinatorics/simple_graph/subgraph.lean#L266</a></p>\n</blockquote>\n<p>Thanks. I managed to fix my problem.</p>",
        "id": 321169899,
        "sender_full_name": "Christopher Schmidt",
        "timestamp": 1673618879
    }
]