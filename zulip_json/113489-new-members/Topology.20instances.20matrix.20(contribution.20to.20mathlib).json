[
    {
        "content": "<p>Hello, I would like to add some instances to mathlib for matrices, as requested <a href=\"#narrow/stream/113489-new-members/topic/Uniqueness.20of.20.28global.29.20minimum/near/282633431\">here</a>.</p>\n<p>I have a couple questions<br>\n1.) There is already a <code>matrix.has_continuous_smul</code>, which only applies to matrices where both indices have the same type. I've written an instance for arbitrary matrices, what should the name be? I could not find anything in the naming conventions regarding this case. Should It simply be <code>matrix.has_continuous_smul'</code>?</p>\n<p>2.) I wanted to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pi.has_continuous_add</span>\n</code></pre></div>\n<p>However, I'm getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">58</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">pi.has_continuous_add</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Turning the <code>matrix</code> into a function type with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">matrix</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">pi.has_continuous_add</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">58</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_8</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm a bit confused as to why this happens, as I assumed function types are subtypes of pi types.</p>\n<p>3.) Could someone invite me to mathlib so I can contribute these new instances? My GitHub name is <code>aronerben</code>. A bit of context/an introduction: I have little formal training in math, as I'm a software dev with a CS background <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> . At my dayjob, I'm currently working on formalizing theorems from econometry in Lean as a long-term project with one of the professors at my department. So this means we are currently focusing on applied linear algebra, regressions, etc.</p>\n<p>Thanks in advance!</p>",
        "id": 282654878,
        "sender_full_name": "Aron Erben",
        "timestamp": 1652800175
    },
    {
        "content": "<p>I've sent you an invite!</p>",
        "id": 282655887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652800530
    },
    {
        "content": "<p>This isn't the right statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pi.has_continuous_add</span>\n</code></pre></div>\n<p>because it allows any possible definition of <code>+</code> on matrices. You want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_continuous_add</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pi.has_continuous_add</span>\n</code></pre></div>",
        "id": 282656066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652800578
    },
    {
        "content": "<blockquote>\n<p>There is already a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_continuous_smul\">docs#matrix.has_continuous_smul</a>, which only applies to matrices where both indices have the same type.</p>\n</blockquote>\n<p>Oops, that's my fault! Just replace the existing instance with the correct one</p>",
        "id": 282656163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652800609
    },
    {
        "content": "<p>I was thinking about exponentials of square matrices at the time and forgot to write <code>m n</code></p>",
        "id": 282656399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652800691
    }
]