[
    {
        "content": "<p>The last line in the following fails -- even though it is the same operation that is proved to create h''.<br>\nIs there an issue with using conv in calc, or am I misunderstanding how calc works?</p>\n<div class=\"codehilite\"><pre><span></span>theorem le_trans {x y z : α} (h : x ≤ y) (h&#39; : y ≤ z) : x ≤ z :=\nbegin\n  replace h : x = x ⊓ y, from (eq.subst (le_def x y) h),\n  replace h&#39; : y = y ⊓ z, from (eq.subst (le_def y z) h&#39;),\n  refine (eq.subst (le_def x z).symm _),\n  have h&#39;&#39; : x ⊓ y = x ⊓ (y ⊓ y), from by conv { to_lhs, congr, skip, rw ←(inf_idem y) }\n  calc\n    x      = x ⊓ y       : by exact h,\n    ...    = x ⊓ (y ⊓ y) : by conv { to_lhs, congr, skip, rw ←(inf_idem y) }\n</pre></div>",
        "id": 178433577,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1571357890
    },
    {
        "content": "<p>If <code>h''</code> is introduced by <code>have</code> then its definition is not \"visible\". Use <code>let</code> instead</p>",
        "id": 178434216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571358856
    },
    {
        "content": "<p>The issue was the comma at the end of the first calc line</p>",
        "id": 178434313,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1571359045
    },
    {
        "content": "<p>h'' seems still too be visible -- lean doesn't complain at the following:</p>\n<div class=\"codehilite\"><pre><span></span>theorem le_trans {x y z : α} (h : x ≤ y) (h&#39; : y ≤ z) : x ≤ z :=\nbegin\n  replace h : x = x ⊓ y, from (eq.subst (le_def x y) h),\n  replace h&#39; : y = y ⊓ z, from (eq.subst (le_def y z) h&#39;),\n  refine (eq.subst (le_def x z).symm _),\n  have h&#39;&#39; : x ⊓ y = x ⊓ (y ⊓ y), from by conv { to_lhs, congr, skip, rw ←(inf_idem y) },\n  calc\n    x      = x ⊓ y       : by exact h\n    ...    = x ⊓ (y ⊓ y) : by exact h&#39;&#39;\n</pre></div>",
        "id": 178434365,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1571359088
    },
    {
        "content": "<p>Oh yes, that's also no good!</p>",
        "id": 178434368,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571359091
    },
    {
        "content": "<p>Ah, I didn't read closely enough about <code>h''</code>.</p>",
        "id": 178434369,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571359101
    },
    {
        "content": "<p>no problem, and thanks!</p>",
        "id": 178434380,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1571359143
    },
    {
        "content": "<p>I remember really struggling with calc syntax as a beginner, and the error messages are unforgiving -- you just get a red line under the ... and something you don't understand in the error messages. The way I do it now is to lay everything out with <code>sorry</code> proofs and to make sure I've got the syntax of the calc block exactly right before I start filling in the theorems.</p>",
        "id": 178451490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571385098
    },
    {
        "content": "<p>When writing <code>calc</code> proofs, I strongly suggest first writing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">calc</span>\n  <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>and only after that type-checks, filling in the underscores.</p>",
        "id": 178482475,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1571411090
    },
    {
        "content": "<p>aah, even better than the sorry idea</p>",
        "id": 178495996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571420724
    }
]