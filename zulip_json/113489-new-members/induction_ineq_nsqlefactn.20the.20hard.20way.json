[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How should I prove this?</p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/Michael.20Shaw/near/245674353\">previous discussion</a></p>",
        "id": 245680180,
        "sender_full_name": "Jiekai",
        "timestamp": 1626093746
    },
    {
        "content": "<p>It's much harder than doing proofs in the tutorial and NNG.</p>",
        "id": 245680307,
        "sender_full_name": "Jiekai",
        "timestamp": 1626093828
    },
    {
        "content": "<p>Do you know how to prove <code>0 &lt; 4</code>? Do you know how to prove <code>4 &lt;= 4 + x</code>? Do you know how to chain inequalities?</p>",
        "id": 245680708,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626094040
    },
    {
        "content": "<p>You could either rearrange the parentheses, to exploit that the RHS is a successor and hence positive, or, I think, <code>add_pos</code> is a thing...</p>",
        "id": 245680736,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626094059
    },
    {
        "content": "<p>Yes, Damiano is right. Do you know how to prove <code>0 &lt; succ n</code>? What's nice about mathlib is that it mostly has a very \"discoverable\" naming scheme for lemmas.</p>",
        "id": 245681078,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626094232
    },
    {
        "content": "<p>pos_of_ne_zero?</p>",
        "id": 245681295,
        "sender_full_name": "Jiekai",
        "timestamp": 1626094368
    },
    {
        "content": "<p>... except that you have a <code>succ</code> instead of a <code>ne_zero</code>...</p>",
        "id": 245681367,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626094410
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.zero_lt_succ\">docs#nat.zero_lt_succ</a></p>",
        "id": 245681479,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626094466
    },
    {
        "content": "<p>succ_ne_zero</p>",
        "id": 245681490,
        "sender_full_name": "Jiekai",
        "timestamp": 1626094472
    },
    {
        "content": "<p>I was going to say <code>succ_pos</code>! <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 245681508,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626094485
    },
    {
        "content": "<p>but there is also a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.succ_pos\">docs#nat.succ_pos</a> too!</p>",
        "id": 245681521,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626094493
    },
    {
        "content": "<p>ooh, I see. thanks</p>",
        "id": 245681525,
        "sender_full_name": "Jiekai",
        "timestamp": 1626094494
    },
    {
        "content": "<p>You were transforming the <code>succ</code> into an <code>ne_zero</code> statement, but that's another lemma too! These really basic lemmas are usually named exactly as you'd read them left-to-right. So something like <code>0 &lt; 2</code> is <code>zero_lt_two</code>. And <code>x &lt;= x + y</code> is <code>nat.le_add_right</code>.</p>",
        "id": 245681716,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626094593
    },
    {
        "content": "<p>Keep in mind that this kind of \"low-level\" arguments require some training: any mathematician would simply file this as \"it is a sum of positive natural numbers, of course it is positive\".  However, you really have to give a precise reason to Lean and, successors being positive seems the most direct here.</p>",
        "id": 245681764,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626094626
    },
    {
        "content": "<p>Damiano, what would be the term-mode proof for your \"most direct\" claim?</p>",
        "id": 245682105,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626094804
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_ineq_nsqlefactn</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"k\">have</span> <span class=\"n\">t0</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_le</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">t0</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n   <span class=\"n\">rw</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n   <span class=\"n\">clear</span> <span class=\"n\">hk</span> <span class=\"n\">h₀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- necessary?</span>\n   <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n   <span class=\"k\">have</span> <span class=\"n\">step0</span> <span class=\"o\">:</span> <span class=\"n\">d.succ</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n   <span class=\"n\">rw</span> <span class=\"n\">step0</span><span class=\"o\">,</span>\n   <span class=\"n\">clear</span> <span class=\"n\">step0</span><span class=\"o\">,</span>\n\n   <span class=\"k\">have</span> <span class=\"n\">step1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span>\n     <span class=\"n\">apply</span> <span class=\"n\">nat.mul_factorial_pred</span><span class=\"o\">,</span>\n     <span class=\"gr\">sorry</span>\n   <span class=\"o\">},</span>\n\n   <span class=\"k\">have</span> <span class=\"n\">step2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n   <span class=\"o\">{</span>\n     <span class=\"gr\">sorry</span>\n   <span class=\"o\">},</span>\n\n   <span class=\"k\">have</span> <span class=\"n\">step3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n   <span class=\"o\">{</span>\n     <span class=\"gr\">sorry</span>\n   <span class=\"o\">},</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm giving up.  It's getting out of control. <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 245682452,
        "sender_full_name": "Jiekai",
        "timestamp": 1626094929
    },
    {
        "content": "<p>what I had in mind, was more something along the lines of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 245682628,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626095029
    },
    {
        "content": "<p>If I really had to to it in term mode, I would probably go with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.succ_pos</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>but I would not like the abuse...</p>",
        "id": 245682723,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626095062
    },
    {
        "content": "<p>(I am not sure why my comments were sent in the opposite order in which I typed them)</p>",
        "id": 245682768,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626095093
    },
    {
        "content": "<p>Because of the way that addition on nats is defined, <code>nat.succ_pos _</code> is enough!</p>",
        "id": 245682794,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626095100
    },
    {
        "content": "<p>Yes, indeed, but I think that the now-first approach is more \"friendly\".</p>",
        "id": 245682868,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626095138
    },
    {
        "content": "<p>I'd do <code>zero_lt_four.trans_le le_self_add</code></p>",
        "id": 245682901,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626095152
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"mi\">4</span> <span class=\"n\">d</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span>\n</code></pre></div>",
        "id": 245683086,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626095226
    },
    {
        "content": "<p>Ah, I forget how high the zero_lt_n lemmas go!  I would have proven <code>0 &lt; 4</code> with <code>succ_pos _</code> again!</p>",
        "id": 245683224,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626095289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277676\">@Jiekai</span> , do these help you? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factorial_succ\">docs#nat.factorial_succ</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_sq\">docs#add_sq</a>?</p>",
        "id": 245683319,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626095345
    },
    {
        "content": "<p>Again, found them by guessing the names.</p>",
        "id": 245683332,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626095353
    },
    {
        "content": "<p>(My zulip seems to have some issues and my messages come out delayed and out of order.)</p>",
        "id": 245683607,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1626095487
    },
    {
        "content": "<p>This is all very instructive, but let's not forget to mention the correct answer is of course that Lean can prove it without any help, simply write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 245683921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626095629
    },
    {
        "content": "<p>My solution</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_two_le_factorial</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_le</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.factorial_succ</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat.mul_le_mul</span> <span class=\"n\">le_rfl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_add</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_add</span><span class=\"o\">,</span> <span class=\"n\">nat.factorial_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_le_succ</span> <span class=\"n\">hd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_le_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">nat.factorial_pos</span> <span class=\"n\">d</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 245687240,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626097247
    },
    {
        "content": "<p>so much to learn!  <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 245687989,
        "sender_full_name": "Jiekai",
        "timestamp": 1626097609
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_two_le_factorial</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_le</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mul_le_mul'</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">factorial_pos</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n  <span class=\"k\">calc</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">self_le_add_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>           <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 245691560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626099297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277676\">@Jiekai</span> I had a really hard time doing the first year undergraduate problem sheets which I was giving to my students when I was learning lean.</p>",
        "id": 245697571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626101710
    },
    {
        "content": "<p>I played with NNG last year and had a lot of fun.  Then haven't touched lean for more than a year.</p>\n<p>Recently I'm thinking about learning some math for fun and thought lean could be useful.  My near-term goal is to understand the <strong>Fundamental theorem of arithmetic</strong> in mathlib.</p>",
        "id": 245701235,
        "sender_full_name": "Jiekai",
        "timestamp": 1626103113
    },
    {
        "content": "<p>The first challenge would be figuring out how to state it, and before that you have to decide whether it's a theorem about naturals or integers</p>",
        "id": 245705107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626104777
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_ineq_nsqlefactn</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"k\">have</span> <span class=\"n\">t0</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_le</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">t0</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n   <span class=\"n\">rw</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n   <span class=\"n\">clear</span> <span class=\"n\">hk</span> <span class=\"n\">h₀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- necessary?</span>\n   <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n   <span class=\"k\">have</span> <span class=\"n\">step0</span> <span class=\"o\">:</span> <span class=\"n\">d.succ</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n   <span class=\"n\">rw</span> <span class=\"n\">step0</span><span class=\"o\">,</span>\n   <span class=\"n\">clear</span> <span class=\"n\">step0</span><span class=\"o\">,</span>\n\n   <span class=\"k\">have</span> <span class=\"n\">step00</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n   <span class=\"o\">{</span>\n     <span class=\"n\">linarith</span><span class=\"o\">,</span>\n   <span class=\"o\">},</span>\n\n   <span class=\"k\">have</span> <span class=\"n\">step1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span>\n     <span class=\"n\">apply</span> <span class=\"n\">nat.mul_factorial_pred</span><span class=\"o\">,</span>\n     <span class=\"n\">exact</span> <span class=\"n\">step00</span><span class=\"o\">,</span>\n   <span class=\"o\">},</span>\n\n   <span class=\"k\">have</span> <span class=\"n\">step2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n   <span class=\"o\">{</span>\n     <span class=\"n\">rw</span> <span class=\"n\">sq</span><span class=\"o\">,</span>\n     <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span><span class=\"o\">,</span>\n     <span class=\"o\">{</span>\n       <span class=\"n\">rw</span> <span class=\"n\">add_sq</span><span class=\"o\">,</span>\n       <span class=\"n\">rw</span> <span class=\"n\">sq</span><span class=\"o\">,</span>\n       <span class=\"n\">rw</span> <span class=\"n\">sq</span><span class=\"o\">,</span>\n       <span class=\"k\">have</span> <span class=\"n\">t20</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n       <span class=\"o\">{</span>\n         <span class=\"n\">ring</span><span class=\"o\">,</span>\n       <span class=\"o\">},</span>\n       <span class=\"k\">have</span> <span class=\"n\">t21</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n       <span class=\"o\">{</span>\n         <span class=\"n\">ring</span><span class=\"o\">,</span>\n       <span class=\"o\">},</span>\n       <span class=\"n\">rw</span> <span class=\"n\">t20</span><span class=\"o\">,</span>\n       <span class=\"n\">rw</span> <span class=\"n\">t21</span><span class=\"o\">,</span>\n       <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span><span class=\"o\">,</span>\n       <span class=\"n\">apply</span> <span class=\"n\">zero_le</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n     <span class=\"o\">{</span>\n       <span class=\"n\">refl</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n     <span class=\"o\">{</span>\n       <span class=\"n\">apply</span> <span class=\"n\">zero_le</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n     <span class=\"o\">{</span>\n       <span class=\"n\">apply</span> <span class=\"n\">zero_le</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n   <span class=\"o\">},</span>\n\n   <span class=\"k\">have</span> <span class=\"n\">step3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span>\n     <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">step1</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">t30</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n     <span class=\"o\">{</span>\n       <span class=\"n\">ring</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n     <span class=\"n\">rw</span> <span class=\"n\">t30</span><span class=\"o\">,</span>\n     <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span><span class=\"o\">,</span>\n     <span class=\"o\">{</span>\n       <span class=\"n\">apply</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n     <span class=\"o\">{</span>\n       <span class=\"n\">refl</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n     <span class=\"o\">{</span>\n       <span class=\"n\">apply</span> <span class=\"n\">zero_le</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n     <span class=\"o\">{</span>\n       <span class=\"n\">apply</span> <span class=\"n\">zero_le</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n   <span class=\"o\">},</span>\n\n   <span class=\"k\">have</span> <span class=\"n\">step4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span>\n     <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">step2</span> <span class=\"n\">step3</span><span class=\"o\">,</span>\n   <span class=\"o\">},</span>\n\n   <span class=\"n\">exact</span> <span class=\"n\">step4</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<p>Save the ugly one</p>",
        "id": 245716540,
        "sender_full_name": "Jiekai",
        "timestamp": 1626109661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277676\">@Jiekai</span> you can write Lean far more compactly than this, for example your last 25 lines or so are just the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">step3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">step1</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span> <span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">step2.trans</span> <span class=\"n\">step3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245724442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626113269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/induction_ineq_nsqlefactn.20the.20hard.20way/near/245697571\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"277676\">Jiekai</span> I had a really hard time doing the first year undergraduate problem sheets which I was giving to my students when I was learning lean.</p>\n</blockquote>\n<p>I just found M1F from the title image of xena blog.  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> </p>\n<p><a href=\"https://xenaproject.wordpress.com/2018/01/09/complex-numbers-and-m1f-theorems/\">This post</a> says</p>\n<blockquote>\n<p>Of all the theorems I proved in M1F, de Moivre’s theorem (Theorem 3.2 of the course) is, I think, the only one which will need some work before it’s possible to verify it, the work in this case being a rigorous definition of the exponential function and its basic properties.</p>\n</blockquote>\n<p>This is fun!</p>",
        "id": 245955131,
        "sender_full_name": "Jiekai",
        "timestamp": 1626267252
    },
    {
        "content": "<p>This work was done long ago :-)</p>",
        "id": 245978541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626277586
    }
]