[
    {
        "content": "<p>I have the following <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">topological_space_equiv</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">contin</span>     <span class=\"o\">:</span> <span class=\"n\">is_continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_contin</span> <span class=\"o\">:</span> <span class=\"n\">is_continuous</span> <span class=\"n\">inv_fun</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"n\">X</span> <span class=\"bp\">`</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"bp\">`</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space_equiv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_continuous</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n<span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- no errors</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_continuous</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n<span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- no errors</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"c1\">-- breaks here</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_continuous</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n<span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>As you can see, the first two examples work fine but the last one raises the error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">iff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">X</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">Y</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n\n\n<p>Why might this be?</p>",
        "id": 198480504,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590173567
    },
    {
        "content": "<p>yeah, unlike in maths, \"X and Y are homeomorphic\" isn't a proposition</p>",
        "id": 198480617,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590173631
    },
    {
        "content": "<p>Oh! I see! I should've thought about it a bit more</p>",
        "id": 198480759,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590173707
    },
    {
        "content": "<p><code>equiv X Y</code> is data. That's why it's more than <code>bijective f</code> (which is a Prop)</p>",
        "id": 198480811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590173742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/iff.20raises.20error/near/198480617\">said</a>:</p>\n<blockquote>\n<p>yeah, unlike in maths, \"X and Y are homeomorphic\" isn't a proposition</p>\n</blockquote>\n<p>That's not the issue. The issue is a somewhat confusing notation for the type of homeomorphisms from X to Y</p>",
        "id": 198480903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590173774
    },
    {
        "content": "<p>What's wrong with the notation?</p>",
        "id": 198480958,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590173811
    },
    {
        "content": "<p>It suggests a Prop</p>",
        "id": 198480986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590173827
    },
    {
        "content": "<p>I found it very confusing in the beginning (the basic equiv case, this has nothing to do with topology) but I got used to it</p>",
        "id": 198481044,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590173856
    },
    {
        "content": "<p>I think it's just confusing the first time it comes up. Hopefully I won't ever assume its a prop anymore :)</p>",
        "id": 198481177,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590173907
    }
]