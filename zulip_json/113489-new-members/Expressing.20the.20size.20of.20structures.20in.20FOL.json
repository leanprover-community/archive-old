[
    {
        "content": "<p>In FOL we can express that a structure must have a size n for a given n. A template for produce such a sentence can be easily defined using n variables. Can we define a function in Lean to produce such sentence given a n?</p>",
        "id": 209591303,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599706499
    },
    {
        "content": "<p>Yes, but you need a definition of what a formula is to start with</p>",
        "id": 209592615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599708452
    },
    {
        "content": "<p>you mean, define formula as an inductive type?</p>",
        "id": 209592822,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599708726
    },
    {
        "content": "<p>Yes. Something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">fmla</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">fmla</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">fmla</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">fmla</span> <span class=\"bp\">→</span> <span class=\"n\">fmla</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">fmla</span> <span class=\"bp\">→</span> <span class=\"n\">fmla</span> <span class=\"bp\">→</span> <span class=\"n\">fmla</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span> <span class=\"o\">:</span> <span class=\"n\">fmla</span> <span class=\"bp\">→</span> <span class=\"n\">fmla</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fmla</span><span class=\"bp\">.</span><span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">fmla</span> <span class=\"bp\">→</span> <span class=\"n\">fmla</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">fmla</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">fmla</span><span class=\"bp\">.</span><span class=\"n\">true</span>\n\n<span class=\"n\">def</span> <span class=\"n\">at_least_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fmla</span> <span class=\"o\">:=</span>\n<span class=\"n\">fmla</span><span class=\"bp\">.</span><span class=\"n\">all</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"err\">$</span> <span class=\"n\">fmla</span><span class=\"bp\">.</span><span class=\"n\">conj</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n  <span class=\"n\">j</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">i</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"o\">[(</span><span class=\"n\">fmla</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">at_least_n</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 209593138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599709168
    },
    {
        "content": "<p>just read flypitch</p>",
        "id": 209599296,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599718303
    },
    {
        "content": "<p>What is that?</p>",
        "id": 209644492,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599746074
    },
    {
        "content": "<p>You are probably taking about <a href=\"https://flypitch.github.io/about/\">https://flypitch.github.io/about/</a>, right? My point is really much simpler. I am reacting to a student question on a want to procure FOL formulas from templates in Lean</p>",
        "id": 209645000,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599746227
    }
]