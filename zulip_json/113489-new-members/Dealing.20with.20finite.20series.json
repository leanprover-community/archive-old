[
    {
        "content": "<p>Hi, everyone! I was formalising Riemann integration as a side project and got really really stuck with this.</p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import data.real.basic\nimport data.finset.sort\n\nopen_locale big_operators\nopen set\n\nnoncomputable theory\n\nstructure dissection (a b : ℝ) (S : finset ℝ) :=\n(to_right: a &lt; b)\n(mem_Icc: ∀ x ∈ S, a ≤  x ∧ x ≤ b)\n(mem_endpoints : a ∈ S ∧ b ∈ S)\n\ndef dissection.N {a b: ℝ} {S:finset ℝ} (D: dissection a b S) : ℕ := S.card -1\n\ndef dissection.function {a b: ℝ} {S: finset ℝ} (D: dissection a b S): fin((D.N)+1) → ℝ :=\nbegin\n   intro x,\n   exact (S.sort (≤)).nth_le x sorry, --sorry is trivial, ommited to reduce length of mwe\nend\n\ndef upper_Riemann_sum {a b : ℝ} {S:finset ℝ} (D: dissection a b S) (f: ℝ → ℝ ) (h: ∃(M:ℝ), ∀ (x:Icc a b), abs(f x) ≤ M):=\n∑ i: fin (D.N), (D.function (i.succ) - D.function i)* Sup(set.range (set.restrict f (Icc (D.function i) (D.function (i.succ)))))\n\nlemma refinement_upper_sum_le_singleton {S: finset ℝ} {f: ℝ → ℝ} (y: ℝ) {a b: ℝ} (h₁: ∃(M:ℝ), ∀ (x: Icc a b), abs(f x) ≤ M) (D₁ : dissection a b S)\n(D₂: dissection a b (S∪{y})) : upper_Riemann_sum D₁ f h₁ ≤ upper_Riemann_sum D₂ f h₁ :=\nbegin\n   sorry,\nend\n</code></pre></div>\n<p>The proof of this lemma is, of course, trivial, however I can't seem to come up with a way in Lean  to essentially cancel <code>D₁.N -1</code> terms on both sides and then prove an easy inequality, which I think will pose no problems. Does anybody have any ideas? Thanks in advance.</p>",
        "id": 234238569,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1618265533
    },
    {
        "content": "<p>where is the <code>D₁.N -1</code> in your example?</p>",
        "id": 234239218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618265986
    },
    {
        "content": "<p>could you work out the <code>sorry</code> until you get stuck?</p>",
        "id": 234239240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618266000
    },
    {
        "content": "<p>One thing which will help a lot is to make <code>dissection</code> a <code>Prop</code>, since it's just a conjunction of <code>Prop</code>s</p>",
        "id": 234239546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618266164
    },
    {
        "content": "<p>Then, you can remove it as an argument from all the functions</p>",
        "id": 234239592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618266194
    },
    {
        "content": "<p>Your theorem is definitely not \"trivial\" due to the way it is stated. You have to prove statements about what <code>sort</code> does, using <code>nth_le</code> to turn a list into a function, and how finite sums over the range act</p>",
        "id": 234240172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618266552
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  for the suggestion to turn dissection into Prop, will certainly do that. <br>\nThe general idea, is to work under assumption that <code>a&lt;y&lt;b</code> and then find two elements, say <code>x₁, x₂ ∈ S</code> such that <code>x₁ &lt; y &lt; x₂ </code> and that they are closest to y (on the left and right respectively) . Then, I would like to argue that the inequality reduces to <br>\n<code> (x₁ - y)*Sup (set.range (set.restrict f (Icc x₁ y)) + (y-x₂)*Sup(set.range(set.restrict f (Icc y x₂))≤(x₁ - x₂)* Sup(set.range (set.restrict f (Icc x₁  x₂)) </code>. However, as said before, that would require somehow proving that I can cancel <code>D₁.N -1</code> terms on both sides that are the same. <br>\nI am sorry for not posting a longer attempt, it's all because I'm stuck at the 'idea' level still and can't seem to get past it for quite a while. Sorry if this is too vague...</p>",
        "id": 234287061,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1618302281
    },
    {
        "content": "<p>you might want to start with a simpler example if you haven't done many proofs in lean before. It's really easy to write a statement that is mathematically correct but way too hard to prove anything about</p>",
        "id": 234287268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618302388
    },
    {
        "content": "<p>Here's some partial progress on this based on that sketch</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">dissection</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_right</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem_Icc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem_endpoints</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">S.card</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">S</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">S.sort</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">x</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">--sorry is trivial, ommited to reduce length of mwe</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upper_Riemann_sum</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">S</span> <span class=\"n\">i.succ</span> <span class=\"bp\">-</span> <span class=\"n\">func</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"n\">set.restrict</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">S</span> <span class=\"n\">i.succ</span><span class=\"o\">))))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">refinement_upper_sum_le_singleton</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">D₁</span> <span class=\"o\">:</span> <span class=\"n\">dissection</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D₂</span> <span class=\"o\">:</span> <span class=\"n\">dissection</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">y</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">upper_Riemann_sum</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">upper_Riemann_sum</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">y</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset.insert_eq_of_mem</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">S.card</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.card_eq_zero.1</span> <span class=\"n\">e</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234287494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618302519
    },
    {
        "content": "<p>You really want to rewrite the sum as something over lists to make it easier to work with</p>",
        "id": 234287555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618302559
    },
    {
        "content": "<p>Here's an alternate definition that is much easier to prove things about but not obviously the same as the one you wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">list.upper_Riemann_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"n\">set.restrict</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"n\">list.upper_Riemann_sum</span> <span class=\"n\">b</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upper_Riemann_sum</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">S.sort</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list.upper_Riemann_sum</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">l</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234288077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618302831
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , this is a really cool suggestion, will definitely play with the definitions you have suggested and will post again if I fail miserably <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>.</p>",
        "id": 234291634,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1618304581
    }
]