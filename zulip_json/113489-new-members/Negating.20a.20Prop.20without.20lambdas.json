[
    {
        "content": "<p>Is there a short notation for the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 215669038,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604548556
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∘</span><span class=\"o\">)</span> <span class=\"n\">not</span>\n</code></pre></div>",
        "id": 215669411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604549058
    },
    {
        "content": "<p>Cool. But <code>not ∘ p</code> when <code>p</code> is <code>decidable_pred</code> is not <code>decidable_pred</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">v.nth</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">v.filter_count</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">v.nth</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">v.head</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">not</span>\n</code></pre></div>",
        "id": 215672086,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604553141
    },
    {
        "content": "<p>I think there's just a missing instance in mathlib maybe? Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidable_not_of_decidable_pred</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst1</span><span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">is_true</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 215760400,
        "sender_full_name": "Chris B",
        "timestamp": 1604603656
    },
    {
        "content": "<p>Actually the composition one is a little nicer to look at.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidable_not_of_decidable_pred</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst1</span><span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">is_true</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 215761132,
        "sender_full_name": "Chris B",
        "timestamp": 1604604069
    },
    {
        "content": "<p>I think my not finding it was due to a <code>congr</code> that went too deep. Because this is in core:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">is_true</span> <span class=\"n\">hp</span>\n</code></pre></div>",
        "id": 215761473,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604604230
    },
    {
        "content": "<p>Judging from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.partition_eq_filter_filter\">docs#list.partition_eq_filter_filter</a> it seems like such an instance must already exist, no?</p>",
        "id": 215761483,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604604236
    },
    {
        "content": "<p>But that's not exactly the same thing.</p>",
        "id": 215762160,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604604519
    },
    {
        "content": "<p>This fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">not</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 215762171,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604604524
    },
    {
        "content": "<p>And there can't be such an instance</p>",
        "id": 215763211,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604604977
    },
    {
        "content": "<p>Right. So again, <code>congr</code>'d too deep. This is all in the context of trying to define <code>partition</code> like things on vectors. Thanks for the pointer to that list partition lemma!</p>",
        "id": 215763377,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604605069
    },
    {
        "content": "<p>Lean tends to not really like you writing <code>not ∘ p</code> for <code>λ x, ¬ p x</code> because of reasons like this</p>",
        "id": 215763512,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604605127
    },
    {
        "content": "<p>You'd want a reducible version of <code>∘</code>.</p>",
        "id": 215763576,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604605160
    },
    {
        "content": "<p>Relatedly, is there a partition-like sum type that splits a type into a sum of two subtypes, each predicated on the two cases of a proposition?</p>",
        "id": 215763672,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604605201
    },
    {
        "content": "<p>Yeah, the friction of Lean with some pointfree style gets in the way sometimes</p>",
        "id": 215763868,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604605280
    },
    {
        "content": "<p>It's better to not stir up trouble and stick to the simple <code>λ x, ¬ p x</code>, IMO</p>",
        "id": 215764578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604605595
    },
    {
        "content": "<p>Yeah, sorry for misleading with the first response. I don't recommend using pointfree style in lean because it doesn't work well with higher order type classes</p>",
        "id": 215764664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604605641
    },
    {
        "content": "<p>Does that mean things like this should also be avoided?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prod.map</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">prod.fst</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 215765817,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604606163
    },
    {
        "content": "<p>In the context of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">prod.map</span> <span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">prod.map</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">prod.fst</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 215765878,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604606188
    },
    {
        "content": "<p>This is <code>\\lam p, (1 + p.1.1, p.2)</code>?</p>",
        "id": 215765983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604606245
    },
    {
        "content": "<p>I'd say there is certainly no advantage to the pointfree version... even ignoring it being unnecessarily higher-order</p>",
        "id": 215766121,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604606303
    },
    {
        "content": "<p>Hopefully, it took me just three tries to understand what it meant</p>",
        "id": 215766249,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604606370
    },
    {
        "content": "<p>I'm trying to show that one can rearrange these operations on a vector of pairs -- I guess I should probably simplify my definitions</p>",
        "id": 215766449,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604606462
    },
    {
        "content": "<p>what's the context of the goal?</p>",
        "id": 215767327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604606896
    },
    {
        "content": "<p>I was assuming you wrote that expression... if it arose in a proof then it's not necessarily bad, but these <code>prod.map</code> and <code>∘</code> must have come from somewhere</p>",
        "id": 215767601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604607035
    },
    {
        "content": "<p>At this point, I've probably fixed the code enough that I don't remember where this was coming up. But I am proving (not putting in all of the auxiliary definitions):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">map_filter_enum_prop_eq_enum_from_filter'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v.filter_count</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">v.enum_prop'</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">xpair</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">xpair.snd</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filter_count_of_map_snd_enum_prop'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">prod.map</span> <span class=\"n\">prod.fst</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">v.filter</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">enum_from'</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 215767613,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604607043
    },
    {
        "content": "<p>The broader goal is to provide an <code>enumerate</code> definition for vectors, which enumerates the <code>p x</code> and <code>not (p x)</code> separately.</p>",
        "id": 215767863,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604607178
    },
    {
        "content": "<p>And at the end of the day, indexes them not by <code>nat</code> but by <code>fin m</code> where <code>m</code> is the total number of <code>p x</code> in the vector (of size <code>n</code>).</p>",
        "id": 215767952,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604607224
    },
    {
        "content": "<p>Sorry for confusion -- the explanations about pointfree or not was helpful! I think I'm good to go.</p>",
        "id": 215768029,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604607248
    },
    {
        "content": "<p>what is the type of <code>v</code>?</p>",
        "id": 215769415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604608011
    },
    {
        "content": "<p>that <code>rw</code> in the middle of the statement doesn't look great</p>",
        "id": 215769496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604608060
    },
    {
        "content": "<p>It sounds like what you are doing could be most easily accomplished by converting the vector to a list and then using <code>list.filter</code> or perhaps <code>list.partition</code></p>",
        "id": 215769741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604608190
    },
    {
        "content": "<p>to get that final indexing, you can use <code>list.nth_le</code> on the resulting list, after a propositional proof that the length of the list is whatever your target value is</p>",
        "id": 215770009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604608322
    },
    {
        "content": "<p>So perform all the manipulations on the list level, while carrying around proofs that the length isn't changed? Isn't that exactly what the vector type represents? I think you're saying that, yes, that is what vector represents, but it is not worth it to \"avoid the underlying list\". While I have been trying to try to remain in the vector API (as I build it up). Did I understand correctly?</p>",
        "id": 215771232,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604608943
    },
    {
        "content": "<p>I don't even understand how that statement is valid Lean code... you can use a <code>by rw</code> inside the statement of a lemma that you're trying to prove?</p>",
        "id": 215772779,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604609771
    },
    {
        "content": "<p>Why not? <code>by</code> is a way to enter tactic mode when in term mode. It creates a weird <code>eq.rec</code> term, but that shouldn't matter, because proof irrelevance means a proof that has <code>eq.rec</code> on it is still equal to one that doesn't. I had to use <code>by rw</code> in that instance because my current definitions have implicit variables where I probably should not have them. So, a simple <code>filter_count_of_map_snd_enum_prop'  ▸  h</code> or whatever it would be doesn't work because of uninferred metavariables. But <code>rw</code> is able to discharge them.</p>",
        "id": 215775043,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604610850
    },
    {
        "content": "<p>The reason I have that propositional term here anyway is that my definition of <code>vector.filter</code> requires a hypothesis that proves that the number of items that match the condition that you're filtering on is <code>m</code>: <code>(h : v.filter_count p = m)</code>. This makes it easier to make proofs by operations on that <code>m</code>. I guess I could encode it implicitly, then have to do something like a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">v.filter_count</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>inside all my proofs.</p>",
        "id": 215775400,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604611042
    },
    {
        "content": "<blockquote>\n<p>while carrying around proofs that the length isn't changed?</p>\n</blockquote>\n<p>Not carrying around the proof, inserting the proof once at the end</p>",
        "id": 215777903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604612450
    },
    {
        "content": "<p>Still a bit hard to give pointed advice without a mwe</p>",
        "id": 215777973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604612511
    },
    {
        "content": "<p>I think that <code>vector.filter</code>, if it is to exist at all, is forced to have essentially the type you have said, but I would want to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> the problem a bit more and look at the reason you want this function</p>",
        "id": 215778156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604612617
    },
    {
        "content": "<p>However, the fact that you need a special function just to describe the length of the resulting filter, and assert equality to <code>m</code>, suggests that you aren't really gaining anything over a plain <code>list.filter</code> (which you can always force into a <code>vector A m</code> using the constructor, which takes a hypothesis <code>(list.filter v p).length = m</code>)</p>",
        "id": 215778402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604612767
    },
    {
        "content": "<p>The goal is to make this sorry free and legible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">collect_pieces</span>\n       <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">number_pieces</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span>\n       <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n       <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b.count_some</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">number_pieces</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">option.map</span> <span class=\"o\">(</span><span class=\"n\">collect_pieces</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 215781477,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604614588
    },
    {
        "content": "<p>Here's a stub file with a lot of missing definitions and lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">white</span>\n<span class=\"bp\">|</span> <span class=\"n\">black</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">pieces</span>\n<span class=\"bp\">|</span> <span class=\"n\">knight</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">piece</span> <span class=\"o\">:</span> <span class=\"n\">pieces</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">color</span> <span class=\"o\">:</span> <span class=\"n\">color</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">white_knight</span> <span class=\"o\">:</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pieces.knight</span><span class=\"o\">,</span> <span class=\"n\">color.white</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">black_knight</span> <span class=\"o\">:</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pieces.knight</span><span class=\"o\">,</span> <span class=\"n\">color.black</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"bp\">♘</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">white_knight</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"bp\">♞</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">black_knight</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">__</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix.ravel</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.filter_count</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">v.to_list.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.filter</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v.filter_count</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">v.to_list.filter</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.count_some</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">v.filter_count</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">option.is_some</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.filter_some</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">v.count_some</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">v.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">option.is_some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hm</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vector.filter_valid</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">v.filter_count</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">v.filter</span> <span class=\"n\">p</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vector.filter_some_pred</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">v.count_some</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">v.filter_some</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"o\">:=</span>\n<span class=\"n\">vector.filter_valid</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector.reduce_some</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">v.count_some</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">vector.of_fn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">option.get</span> <span class=\"o\">((</span><span class=\"n\">v.filter_some_pred</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix.count_some</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">vector.count_some</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">M.ravel</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">collect_pieces</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b.count_some</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span>\n<span class=\"n\">vector.nth</span> <span class=\"o\">(</span><span class=\"n\">vector.reduce_some</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">b.ravel</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">number_pieces</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b.count_some</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">collect_pieces</span>\n       <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">number_pieces</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span>\n       <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n       <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b.count_some</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">number_pieces</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">option.map</span> <span class=\"o\">(</span><span class=\"n\">collect_pieces</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 215781489,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604614608
    },
    {
        "content": "<p>For this exact problem, I could have just written all the <code>filter</code> stuff specialized to <code>option</code>, like <code>list.reduce_option</code> already is. But at some point, I'll need to filter on other predicates, like what piece it is, so that I can number pieces of different types.</p>",
        "id": 215781663,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604614708
    },
    {
        "content": "<p>Happy to hear any suggestions and to be set on a right path.</p>",
        "id": 215781754,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604614793
    },
    {
        "content": "<p>can you describe what is the overall problem you are trying to solve, like why do you want to number pieces?</p>",
        "id": 215782806,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604615532
    },
    {
        "content": "<p>for this specific problem it seems like having a matrix is pretty inconvenient, maybe you could just turn it into a list and prove things there</p>",
        "id": 215782928,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604615607
    },
    {
        "content": "<p>The general context is the following project: <a href=\"https://github.com/Julian/lean-across-the-board\">https://github.com/Julian/lean-across-the-board</a></p>",
        "id": 215782943,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604615613
    },
    {
        "content": "<p>The pieces have to be numbered because one moves around pieces based on the piece identity, but tracks their positions based on index.</p>",
        "id": 215783038,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604615664
    },
    {
        "content": "<p>does one do that? typically in chess you specify moves like <code>Ng1-f3</code>, you dont store an identity for a single knight across the whole game</p>",
        "id": 215783126,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604615727
    },
    {
        "content": "<p>For example, if you wanted to model castling, would you assign the two different rooks different piece types? How would you keep track of which was the king's-side and which was the queen's-side rook to keep track of whether it has moved before castling?</p>",
        "id": 215783131,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604615731
    },
    {
        "content": "<p>you just keep track of two boolean values, is k-side castling and q-side castling still allowed</p>",
        "id": 215783215,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604615768
    },
    {
        "content": "<p>I think it's a matter of notation. If I started from a board with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]</span> <span class=\"bp\">@</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">],</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span> <span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"o\">]]</span>\n</code></pre></div>\n<p>and said that I made a move to end at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]</span> <span class=\"bp\">@</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"o\">],</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span> <span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"o\">]]</span>\n</code></pre></div>\n<p>should that be counted at legal?</p>",
        "id": 215783472,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604615949
    },
    {
        "content": "<p>basically I recommend having some <code>meta structure chess_board</code> sort of class, and sticking a bunch of variables in there whenever it helps you. you probably want to keep the whole game history around in the data structure. then you can implement lots of lemmas on top of it.</p>",
        "id": 215783581,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604616009
    },
    {
        "content": "<p>you don't really want to have to do things like extend the <code>vector</code> class to do different sorts of filtering</p>",
        "id": 215783632,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604616053
    },
    {
        "content": "<p>Which we've done so far, without <code>meta</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">starting_position</span> <span class=\"o\">:</span> <span class=\"n\">chess.board</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">pieces</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">],</span>\n  <span class=\"n\">contents</span> <span class=\"o\">:=</span> <span class=\"n\">PF</span> <span class=\"bp\">!</span><span class=\"o\">[</span>\n    <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span>    <span class=\"n\">__</span><span class=\"o\">,</span>      <span class=\"n\">__</span><span class=\"o\">,</span>       <span class=\"n\">__</span>   <span class=\"o\">],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)]</span>\n  <span class=\"o\">],</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">ending_position</span> <span class=\"o\">:</span> <span class=\"n\">chess.board</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">starting_position</span> <span class=\"k\">with</span>\n  <span class=\"n\">pieces</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- Direct solution</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">guarini_seq</span> <span class=\"o\">:</span> <span class=\"n\">chess.move.sequence.legal</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">start_board</span> <span class=\"o\">:=</span> <span class=\"n\">starting_position</span><span class=\"o\">,</span>\n  <span class=\"n\">elements</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first_move</span> <span class=\"o\">:</span> <span class=\"n\">chess.move</span> <span class=\"n\">starting_position</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">pair</span> <span class=\"o\">:=</span> <span class=\"n\">guarini_seq.elements</span> <span class=\"mi\">0</span> <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">pair.fst</span><span class=\"o\">,</span> <span class=\"n\">pair.snd</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">guarini_seq.to_sequence.boards</span> <span class=\"mi\">0</span> <span class=\"bp\">≈</span> <span class=\"n\">guarini_seq.start_board</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">guarini_seq.to_sequence.boards</span> <span class=\"mi\">1</span> <span class=\"bp\">≈</span> <span class=\"n\">first_move.perform_move</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ix</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">guarini_seq.elements</span> <span class=\"n\">ix</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">guarini_seq.elements</span> <span class=\"n\">ix</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">guarini</span> <span class=\"o\">:</span> <span class=\"n\">starting_position.has_sequence_to</span> <span class=\"n\">ending_position</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">guarini_seq.to_sequence</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 215783637,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604616054
    },
    {
        "content": "<p>so dont try to make a bunch of lemmas like <code>vector.filter_some_pred</code></p>",
        "id": 215783761,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604616132
    },
    {
        "content": "<p>And that compiles currently without sorries. However, it's annoying to have to say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">starting_position</span> <span class=\"o\">:</span> <span class=\"n\">chess.board</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">pieces</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">],</span>\n  <span class=\"n\">contents</span> <span class=\"o\">:=</span> <span class=\"n\">PF</span> <span class=\"bp\">!</span><span class=\"o\">[</span>\n    <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span>    <span class=\"n\">__</span><span class=\"o\">,</span>      <span class=\"n\">__</span><span class=\"o\">,</span>       <span class=\"n\">__</span>   <span class=\"o\">],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)]</span>\n  <span class=\"o\">],</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 215783768,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604616137
    },
    {
        "content": "<p>make lemmas about chess boards</p>",
        "id": 215783769,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604616138
    },
    {
        "content": "<p>yeah if you read like PGN or ASCII format it'll be much nicer</p>",
        "id": 215783788,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604616157
    },
    {
        "content": "<p>And it's be nice to just say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">starting_position</span> <span class=\"o\">:</span> <span class=\"n\">chess.board</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">convert</span> <span class=\"bp\">!</span><span class=\"o\">[</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p>and have the <code>pieces</code> and <code>contents</code> correct.</p>",
        "id": 215783861,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604616215
    },
    {
        "content": "<p>But then there'll need to be lemmas making sure that <code>convert</code> always generates a <code>pieces</code> and <code>contents</code> that matches the defition of the board structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">board</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- The pieces the board holds, provided as an indexed vector</span>\n<span class=\"o\">(</span><span class=\"n\">pieces</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"c1\">-- The playfield on which the pieces are placed</span>\n<span class=\"o\">(</span><span class=\"n\">contents</span> <span class=\"o\">:</span> <span class=\"n\">playfield</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n<span class=\"c1\">-- All the pieces in `pieces` are on the `contents`</span>\n<span class=\"c1\">-- See \"Implementation details\" for info about `dec_trivial`</span>\n<span class=\"o\">(</span><span class=\"n\">contains</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">contents.index_at</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Different positions hold different indices</span>\n<span class=\"o\">(</span><span class=\"n\">injects</span> <span class=\"o\">:</span> <span class=\"n\">contents.some_injective</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.exact_dec_trivial</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 215783988,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604616303
    },
    {
        "content": "<p>Specifically, that <code>convert</code> respects and satisfies the <code>contains</code> and <code>injects</code> constraints.</p>",
        "id": 215784019,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604616326
    },
    {
        "content": "<p>And so I ended up (over?)generalizing the vector filtering operations, instead of just working on the specific case of the chess board.</p>",
        "id": 215784041,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604616351
    },
    {
        "content": "<p>ok. I guess overall I would just try using lists instead of vectors. you might want to make the size of the chess board part of the top level structure - it seems pretty important</p>",
        "id": 215784111,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604616387
    },
    {
        "content": "<p>Sorry, I didn't include:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The dimensions of the board, finite and decidably equal</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"c1\">-- The index associated to pieces on a playfield</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"c1\">-- The piece type</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 215784146,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604616416
    },
    {
        "content": "<p>i just mean lists for helper functions like \"list all the knights on the board\". if you don't know the length of the output, just make it a list rather than a vector. then i think you will avoid a lot of this painful typing.</p>",
        "id": 215784161,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604616425
    },
    {
        "content": "<p>I think we're a step before that really. Like Yakov said, we're trying to make <em>constructing</em> boards simpler</p>",
        "id": 215788157,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604619464
    },
    {
        "content": "<p>Parsing ASCII boards was my original idea, but I think that'd be fairly painful in Lean, from what I saw there's not very many implemented string manipulation methods</p>",
        "id": 215788223,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604619498
    },
    {
        "content": "<p>i mean, this sample code is building 10 or so helper functions over vectors in order to construct a chessboard</p>",
        "id": 215788266,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604619551
    },
    {
        "content": "<p>i'm saying, at least, it would be smoother to use lists there</p>",
        "id": 215788282,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604619567
    },
    {
        "content": "<p>how I would represent chess positions for input is as a string like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rnbqkbnr</span>\n<span class=\"n\">pppppppp</span>\n<span class=\"bp\">........</span>\n<span class=\"bp\">........</span>\n<span class=\"bp\">........</span>\n<span class=\"bp\">........</span>\n<span class=\"n\">PPPPPPPP</span>\n<span class=\"n\">RNBQKBNR</span>\n</code></pre></div>\n<p>you should be able to do that without any string functions except converting to a list of chars.</p>",
        "id": 215788455,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604619703
    },
    {
        "content": "<p>I have to think more personally. But it's not obvious to me that that makes the \"collect the knights\" problem easier, it sounds like you're saying it is (and I admit I'm not fully following the conversation about vectors other than \"there's a bunch more stuff implemented on list that isn't implemented on vectors\", so it could just be I don't understand enough to have an opinion)</p>",
        "id": 215788600,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604619830
    },
    {
        "content": "<p>But unlike normal chess we <em>do</em> I think want/need to track \"identity\" of pieces globally</p>",
        "id": 215788650,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604619846
    },
    {
        "content": "<p>Because if I want to prove like 2 knights making simultaneous knights tours on a board it seems likely it's easier to do that if you remember which knight it was the whole time?</p>",
        "id": 215788676,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604619877
    },
    {
        "content": "<p>But maybe my intuition is wrong there too and you'll say you can do it just as easy with just the sequences of moving numbers I don't know too hard to think before dinner</p>",
        "id": 215788699,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604619901
    },
    {
        "content": "<p>what are you proving about two simultaneous knights tours on a board? you're giving it a tour and you want to prove that it's a tour? or you want it to automatically find one?</p>",
        "id": 215788865,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604620053
    },
    {
        "content": "<p>sorry I left out words, but I meant \"given a board and two knights on it, the existence (or non-existence) of a tour of both knights on it\"</p>",
        "id": 215788895,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604620081
    },
    {
        "content": "<p>i.e. both of them need to cover every square once (and cannot capture each other)</p>",
        "id": 215788949,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604620106
    },
    {
        "content": "<p>is the existence just supposed to follow from the existence of a single tour</p>",
        "id": 215788978,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604620150
    },
    {
        "content": "<p>no because in the general case (some number of pieces, some configuration) you can fill up squares you need to make progress</p>",
        "id": 215789013,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604620197
    },
    {
        "content": "<p>do you want lean to like, analyze a specific position to see if there's a tour, via some search algorithm</p>",
        "id": 215789094,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604620252
    },
    {
        "content": "<p>or is there some mathy principle for how you'd prove the existence</p>",
        "id": 215789113,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604620268
    },
    {
        "content": "<p>so firstly all of this is purely for fun :) so I don't know what I personally want to do other  than \"prove stuff that's fun\"</p>",
        "id": 215789117,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604620275
    },
    {
        "content": "<p>but yeah there are mathy principles for proving existence</p>",
        "id": 215789125,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604620282
    },
    {
        "content": "<p>you do coloring proofs (parity proofs) in simple cases where you show nonexistence because squares of various colors would be visited an impossible number of times</p>",
        "id": 215789153,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604620317
    },
    {
        "content": "<p>ok. well, i dont really understand what sort of thing you're trying to do, but I am fairly sure that you don't want to be implementing <code>vector.filter_some</code> as part of a plan to read in chess boards from an ascii representation as part of it</p>",
        "id": 215789214,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604620348
    },
    {
        "content": "<p>use a list when a function is returning things that might be of different lengths, it'll be easier</p>",
        "id": 215789253,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604620385
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 215789291,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604620433
    },
    {
        "content": "<p>What if you just had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">starting_position</span> <span class=\"o\">:</span> <span class=\"n\">chess.board</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p>?</p>",
        "id": 215790110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604621150
    },
    {
        "content": "<p>Which is to say, why bother with the <code>pieces</code> if you are already storing all the info in the <code>contents</code></p>",
        "id": 215790185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604621190
    },
    {
        "content": "<p>Because in a chess game, the piece behind an index can change (pawn upgrades).</p>",
        "id": 215790613,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604621512
    },
    {
        "content": "<p>if the pieces are on the board, you just change what is stored at that position</p>",
        "id": 215790697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604621562
    },
    {
        "content": "<p>evidence that this is easier with lists:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">collect_pieces</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">list</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">a.to_list</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">collect_pieces</span>\n        <span class=\"o\">[[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n         <span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 215790710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604621580
    },
    {
        "content": "<p>Yeah, I have a working <code>collect_pieces</code> that I didn't upload above. I think I started down this path because I foresaw proving (or even expressing) that accessing by number into the collected pieces is the same as what you started with.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b.count_some</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">number_pieces</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">option.map</span> <span class=\"o\">(</span><span class=\"n\">collect_pieces</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 215791108,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604621898
    },
    {
        "content": "<p>Of course, that's not relevant if one throws indexing out of the window.</p>",
        "id": 215791123,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604621908
    },
    {
        "content": "<p>algebraic chess notation doesn't index pieces by number</p>",
        "id": 215791139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604621925
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">move</span>\n<span class=\"bp\">|</span> <span class=\"n\">knight</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">position</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">position.get</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">position</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">colored_pieces</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">p.nth</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">l.nth</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span>\n<span class=\"kd\">def</span> <span class=\"n\">position.set</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">colored_pieces</span> <span class=\"bp\">→</span> <span class=\"n\">position</span> <span class=\"bp\">→</span> <span class=\"n\">position</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p.modify_nth</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l.update_nth</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">move.eval</span> <span class=\"o\">:</span> <span class=\"n\">color</span> <span class=\"bp\">→</span> <span class=\"n\">move</span> <span class=\"bp\">→</span> <span class=\"n\">position</span> <span class=\"bp\">→</span> <span class=\"n\">position</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">move.knight</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p.set</span> <span class=\"n\">a</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">pieces.knight</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">move.valid</span> <span class=\"o\">:</span> <span class=\"n\">color</span> <span class=\"bp\">→</span> <span class=\"n\">move</span> <span class=\"bp\">→</span> <span class=\"n\">position</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">move.knight</span> <span class=\"o\">(</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">y₂</span><span class=\"o\">))</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x₁.dist</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">y₁.dist</span> <span class=\"n\">y₂</span> <span class=\"k\">in</span>\n   <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">p.get</span> <span class=\"o\">(</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">pieces.knight</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">move.apply</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">color</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">move</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">position</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">position</span> <span class=\"o\">:=</span>\n<span class=\"n\">guardb</span> <span class=\"o\">(</span><span class=\"n\">m.valid</span> <span class=\"n\">c</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">m.eval</span> <span class=\"n\">c</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">move.knight</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"n\">color.black</span>\n        <span class=\"o\">[[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n         <span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]</span> <span class=\"bp\">=</span>\n   <span class=\"n\">some</span> <span class=\"o\">[[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n         <span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 215792128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604622833
    },
    {
        "content": "<p>Here's an implementation of the guarini knight exchange problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.dist</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">white</span>\n<span class=\"bp\">|</span> <span class=\"n\">black</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">pieces</span>\n<span class=\"bp\">|</span> <span class=\"n\">knight</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">piece</span> <span class=\"o\">:</span> <span class=\"n\">pieces</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">color</span> <span class=\"o\">:</span> <span class=\"n\">color</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">white_knight</span> <span class=\"o\">:</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pieces.knight</span><span class=\"o\">,</span> <span class=\"n\">color.white</span><span class=\"o\">⟩</span>\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">black_knight</span> <span class=\"o\">:</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pieces.knight</span><span class=\"o\">,</span> <span class=\"n\">color.black</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"bp\">♘</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">white_knight</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"bp\">♞</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">black_knight</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">__</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">colored_pieces.to_string</span> <span class=\"o\">:</span> <span class=\"n\">colored_pieces</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">pieces.knight</span><span class=\"o\">,</span> <span class=\"n\">color.white</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"♘\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">pieces.knight</span><span class=\"o\">,</span> <span class=\"n\">color.black</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"♞\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">colored_pieces.to_string</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">position</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">position.get</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">position</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">p.nth</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">l.nth</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">position.set</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">colored_pieces</span> <span class=\"bp\">→</span> <span class=\"n\">position</span> <span class=\"bp\">→</span> <span class=\"n\">position</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p.modify_nth</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l.update_nth</span> <span class=\"n\">x</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_knight_move</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">y₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">x₁.dist</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">y₁.dist</span> <span class=\"n\">y₂</span> <span class=\"k\">in</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">position</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c.to_string</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">position.apply</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">position</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">position</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">guardb</span> <span class=\"o\">(</span><span class=\"n\">is_knight_move</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"o\">⟨</span><span class=\"n\">pieces.knight</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">mjoin</span> <span class=\"o\">(</span><span class=\"n\">p.get</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">p.get</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">none</span><span class=\"o\">),</span>\n  <span class=\"n\">some</span> <span class=\"o\">((</span><span class=\"n\">p.set</span> <span class=\"n\">a</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">pieces.knight</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">position.apply_seq</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">((</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">position</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">position</span> <span class=\"o\">:=</span> <span class=\"n\">l.mfoldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p.apply</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">starting_position</span> <span class=\"o\">:</span> <span class=\"n\">position</span> <span class=\"o\">:=</span>\n<span class=\"o\">[[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n <span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n <span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ending_position</span> <span class=\"o\">:</span> <span class=\"n\">position</span> <span class=\"o\">:=</span>\n<span class=\"o\">[[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">],</span>\n <span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n <span class=\"o\">[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">]]</span>\n\n<span class=\"c1\">-- Direct solution</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">guarini_seq</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n  <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">))]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">guarini</span> <span class=\"o\">:</span>\n  <span class=\"n\">position.apply_seq</span> <span class=\"n\">guarini_seq</span> <span class=\"n\">starting_position</span> <span class=\"bp\">=</span>\n  <span class=\"n\">some</span> <span class=\"n\">ending_position</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 215795163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604625218
    },
    {
        "content": "<p>Wow, thanks, that looks way way simpler than what I ended up with. I don't know what dist or the guards do but will do some reading and then see if I can poke a bit more. Thanks this is great</p>",
        "id": 215800867,
        "sender_full_name": "Julian Berman",
        "timestamp": 1604630937
    },
    {
        "content": "<p><code>nat.dist</code> is <code>abs (x - y)</code> defined on nats</p>",
        "id": 215808480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604641465
    },
    {
        "content": "<p>it makes it easy to define the knights move requirement</p>",
        "id": 215808487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604641489
    },
    {
        "content": "<p><code>guard</code> is a function defined on option by <code>guard p = if p then some () else none</code>, which is useful to assert predicates inside the option monad</p>",
        "id": 215808501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604641535
    },
    {
        "content": "<p><code>guardb</code> is the same thing but for bools</p>",
        "id": 215808507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604641551
    },
    {
        "content": "<p>By writing the function this way it is easy for lean to compute with, and you can still prove properties about the function if you want a more abstract representation</p>",
        "id": 215808559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604641603
    },
    {
        "content": "<p>for instance, you could prove that <code>position.apply</code> always returns a <code>n × n</code> board if the input is <code>n × n</code>, and similarly for other structural properties like the number of knights of each color on the board</p>",
        "id": 215808626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604641699
    },
    {
        "content": "<p>(By the way, when I implemented this at first I had a turn counter, that would track the current color to play, and enforced that you only move a piece of your color. I dropped this because the guarini sequence does not respect turn order, and I don't know if it's part of the original problem statement.)</p>",
        "id": 215808736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604641893
    },
    {
        "content": "<p>starting to get off topic, but this code confused me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">collect_pieces</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">list</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">a.to_list</span>\n</code></pre></div>\n<p>So those left-arrows are de-monadizing the list and option monads? or both list monads? I don't get how that works. like what type are <code>a</code> and <code>l</code></p>",
        "id": 215813260,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604648034
    },
    {
        "content": "<p><code>l : list (option colored_pieces)</code> and <code>a : option colored_pieces</code>.</p>",
        "id": 215814390,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604649207
    },
    {
        "content": "<p>and then <code>a.to_list</code> converts an <code>option colored_pieces</code> to a <code>list colored_pieces</code>? is there some implicit monadic cast sort of thing going on here</p>",
        "id": 215814750,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604649495
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">to_list</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>from mathlib</p>",
        "id": 215815076,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604649797
    },
    {
        "content": "<p>Compare to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">collect_pieces'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">colored_pieces</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">b.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">a.to_list</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">collect_pieces'</span>\n        <span class=\"o\">[[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n         <span class=\"o\">[</span><span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">],</span>\n         <span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"n\">__</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]</span> <span class=\"bp\">=</span>\n        <span class=\"o\">[[</span><span class=\"bp\">♞</span><span class=\"o\">,</span> <span class=\"bp\">♞</span><span class=\"o\">],</span>\n         <span class=\"o\">[],</span>\n         <span class=\"o\">[</span><span class=\"bp\">♘</span><span class=\"o\">,</span> <span class=\"bp\">♘</span><span class=\"o\">]]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 215815763,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604650368
    },
    {
        "content": "<p>The <code>do</code> notation desugars to the following, (recalling that <code>bind l f</code> in the <code>list</code> monad is <code>list.join (l.map f)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">collect_pieces_desugared</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">colored_pieces</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">list</span> <span class=\"n\">colored_pieces</span> <span class=\"o\">:=</span>\n<span class=\"n\">list.join</span> <span class=\"o\">(</span><span class=\"n\">b.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">list.join</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a.to_list</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 215815785,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604650394
    },
    {
        "content": "<p>Right, that's why my example looks like that, it's the map but without the join.</p>",
        "id": 215815892,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604650482
    },
    {
        "content": "<p>Are there portions of mathlib that make definitions and state/prove lemmas using do notation on the term level?</p>",
        "id": 215815926,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604650526
    },
    {
        "content": "<p>I understand that the tactic sequence is operating in the tactic \"monad\", but I mean some mathematical statements phrased in <code>do</code> or other monadic bind chains?</p>",
        "id": 215816000,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604650566
    },
    {
        "content": "<p>The only thing that comes to mind at the moment is some <code>list</code> definitions stated with <code>do</code> notation in <a href=\"https://github.com/leanprover-community/mathlib/blob/fd3212c39d39dab1174fada57c7de6bf32b98bc8/src/data/list/defs.lean\"><code>data.list.defs</code></a>.</p>",
        "id": 215816292,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604650816
    },
    {
        "content": "<p>Oh, there's also presumably a bunch of stuff in <a href=\"https://github.com/leanprover-community/mathlib/blob/2ab31f911c04a45ae4c155e0a4172424665f4a50/src/control/basic.lean\"><code>control</code></a>, but just like <code>list</code>, I don't know whether these count as \"mathematical\".</p>",
        "id": 215816495,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604650958
    },
    {
        "content": "<p>Even those list defs seem to be the lemmas about other monads</p>",
        "id": 215816508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604650973
    },
    {
        "content": "<p>Yeah, that's true.</p>",
        "id": 215816568,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604651021
    },
    {
        "content": "<p>My guess is that lemmas aren't stated that way because a proof about <code>list.bind</code> is easier to apply than a proof about <code>@has_bind.bind list</code></p>",
        "id": 215820771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604654186
    },
    {
        "content": "<p>The turing machine stuff has a lot of proofs about things in the roption monad written in do notation</p>",
        "id": 215861058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604676473
    }
]