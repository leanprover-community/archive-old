[
    {
        "content": "<p>Hi, I'm a second-year undergraduate computing student at Imperial College London. I've just started using Lean for doing textbook exercises (tried it on some basic set proofs, hoping to eventually use it for computability theory).</p>",
        "id": 234807130,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1618557736
    },
    {
        "content": "<p>Hi. I'm at Imperial too. There has been some recent action in mathlib about finite state automata / pumping lemma. I would really like to see a statement of P v NP in mathlib some day.</p>",
        "id": 234808024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618558307
    },
    {
        "content": "<p>Hi, nice to finally meet you. I've heard about you a little bit from talking to JMC students.</p>\n<p>I did see some entries about DFAs and NFAs in the documentation - I'd like to try contributing after my exams. Also, what would need to be done to state the P vs NP problem? Is it setting up all the necessary definitions of P, NP, decision problems etc.?</p>",
        "id": 234811948,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1618560404
    },
    {
        "content": "<p>I'm not the best person to talk to about this. <span class=\"user-mention\" data-user-id=\"267202\">@Fox Thomson</span> ?</p>",
        "id": 234812063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618560469
    },
    {
        "content": "<p>Hi Alex, I have been working on regular languages but have also taken a bit of a break for exams, I think the next big milestone would be to show that DFAs and regular expressions are equivalent. I would also really like to see statements of P, NP etc. We currently have Turing machines and partial recursive functions however I'm not sure how friendly they would be to complexity theory, maybe we need some different model of computation.</p>",
        "id": 234819322,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1618563955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267202\">Fox Thomson</span> <a href=\"#narrow/stream/113489-new-members/topic/Introducing.20myself.3A.20Alex.20Reynaldi/near/234819322\">said</a>:</p>\n<blockquote>\n<p>Hi Alex, I have been working on regular languages but have also taken a bit of a break for exams, I think the next big milestone would be to show that DFAs and regular expressions are equivalent. I would also really like to see statements of P, NP etc. We currently have Turing machines and partial recursive functions however I'm not sure how friendly they would be to complexity theory, maybe we need some different model of computation.</p>\n</blockquote>\n<p>Thanks for the overview - I'll give it a try as I learn more about lean. Are there any guides/readmes on which constructs I should start looking at? I think I'm looking to start with recursive functions as I've already got some pen &amp; paper proofs for those from doing textbook exercises. I found the mathlib docs to be comprehensive but wasn't sure where to start.</p>",
        "id": 234973013,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1618649266
    },
    {
        "content": "<p>Not really, there's a paper about the library but it's not too detailed about the nitty gritty. But you can ask me if you have any questions about it</p>",
        "id": 234973087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618649340
    },
    {
        "content": "<p>I would certainly like to make the turing machine stuff useful for complexity theory, this was one of the goals</p>",
        "id": 234973098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618649366
    },
    {
        "content": "<p>The <code>turing_machine.lean</code> file contains 3 or 4 different computational models and (polynomial time) translations between them, and <code>tm_to_partrec.lean</code> constructs a (polynomial time) simulation of partial recursive functions as a TM</p>",
        "id": 234973201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618649497
    },
    {
        "content": "<p>but the complexity class P is not defined</p>",
        "id": 234973208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618649514
    },
    {
        "content": "<p>I recall someone was working on this, but whatever they did never turned into a PR</p>",
        "id": 234973252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618649533
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"319356\">@Pim Spelier</span> and <span class=\"user-mention\" data-user-id=\"320867\">@Daan van Gent</span> made some PRs in complexity theory last year.</p>",
        "id": 234973299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618649595
    },
    {
        "content": "<p>Oh there was a PR?</p>",
        "id": 234973318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618649637
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Computability.2C.20P.20.28and.20NP.29/near/208327235\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Computability.2C.20P.20.28and.20NP.29/near/208327235</a></p>",
        "id": 234973386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618649707
    },
    {
        "content": "<p>Just to be sure, this is the paper you're referencing right?</p>\n<p>Mario Carneiro, Formalizing computability theory via partial recursive functions</p>",
        "id": 234973491,
        "sender_full_name": "Alex Reynaldi",
        "timestamp": 1618649865
    },
    {
        "content": "<p>yes</p>",
        "id": 234973554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618649923
    }
]