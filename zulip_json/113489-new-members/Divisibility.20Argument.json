[
    {
        "content": "<p>Say I wanted to prove <code>n^2 ∣ 3 -&gt; n ∣ 3</code>,</p>\n<p>what I'd do would be to <code>intro h</code>, giving me <code>h : n^2 ∣ 3</code> and requiring me to prove <code>n ∣ 3</code>. The way I'd do it would be by contradiction, (say <code>n = 3*m + 1</code> and <code>n = 3*m + 2</code>), then <code>rw at h</code> and reaching a contradiction.</p>\n<p>However I'm not sure how I can generate those cases in Lean, ie <code>¬n ∣ 3 -&gt; ∃ m, n = 3*m + 1 ∨ n = 3*m + 2</code>. I could define that as a lemma but then I don't know how to prove it.</p>\n<p>(Should it be <code>∃ m, n = 3*m + 1 ∨ n = 3*m + 2</code> or <code>(∃ m, n = 3*m + 1) ∨ (∃ m, n = 3*m + 2)</code>?)</p>\n<p>Also how do you enter <code>∣</code> in VSCode, since it's not <code>|</code>, and I've just been copy and pasting it.</p>\n<p>(Also if there is a more straightforward way to prove the original statement that'd be welcome as well. I'm still in Sixth Form so I haven't properly done any University Mathematics before)</p>\n<p>Thank you,</p>",
        "id": 189204588,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1582802149
    },
    {
        "content": "<p>do you mean <code>3 \\| n^2</code>?</p>",
        "id": 189206028,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582803707
    },
    {
        "content": "<p>you can use <code>%</code> (<code>nat.mod</code>)</p>",
        "id": 189206079,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582803742
    },
    {
        "content": "<p>Yes. Apologies I do mean <code>3 \\| n^2</code>. </p>\n<p>I'm not sure what you mean about using <code>%</code> here, do you mean to use <code>n^2 % 3 == 0</code> instead of <code>3 \\| n^2</code>?</p>",
        "id": 189206920,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1582804694
    },
    {
        "content": "<p>Also, does <code>Ctrl-P</code> <code>#</code> only search in files that have been imported? or is it all of <code>mathlib</code>?</p>",
        "id": 189207053,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1582804843
    },
    {
        "content": "<p>Ok, so I have the proof complete except one thing, which is that I can't seem to find any definitions that can prove <code>1 &lt; 3</code>.</p>",
        "id": 189211799,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1582808854
    },
    {
        "content": "<p>If tactics are also ok, then <code>by norm_num</code> is perfect for this</p>",
        "id": 189211910,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1582808944
    },
    {
        "content": "<p>Alright. Thank you very much.</p>",
        "id": 189212334,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1582809244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> Here's my attempt at your question (I put in lots of comments so it looks longer than it could be):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn2</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Let q be floor of n/3 and let r be the remainder when dividing n by 3</span>\n  <span class=\"n\">set</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"k\">with</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">3</span> <span class=\"k\">with</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Then n=3q+r</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">mod_add_div</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- and r&lt;3</span>\n  <span class=\"k\">have</span> <span class=\"n\">hr3</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mod_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- There are only three cases for r so let&#39;s split into those cases.</span>\n  <span class=\"n\">set</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr3</span><span class=\"bp\">⟩</span> <span class=\"k\">with</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">hi</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- First r = 0</span>\n    <span class=\"c1\">-- In this case n is a multiple of 3 because it&#39;s 3q</span>\n    <span class=\"n\">use</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Next r = 1</span>\n    <span class=\"c1\">-- I claim this contradicts 3|n^2</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- because here 3 | 1+3(2q+3q^2)</span>\n    <span class=\"k\">have</span> <span class=\"n\">hbad</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">q</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"n\">convert</span> <span class=\"n\">hn2</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- and hence 1 mod 3 = 0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dvd_iff_mod_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_mul_mod_self_left</span><span class=\"o\">,</span> <span class=\"n\">mod_eq_of_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hbad</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- which is nonsense</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hbad</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Finally r = 2; the argument is pretty much the same</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hbad</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"n\">convert</span> <span class=\"n\">hn2</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dvd_iff_mod_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_mul_mod_self_left</span><span class=\"o\">,</span> <span class=\"n\">mod_eq_of_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hbad</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hbad</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>When I was a beginner I also wrote a proof of this result: you can still see it <a href=\"https://github.com/kbuzzard/xena/blob/master/M1F/2017-18/Example_Sheet_02/solutions.lean#L286-L361\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/M1F/2017-18/Example_Sheet_02/solutions.lean#L286-L361\">here</a>. It's nice to see that I've got a bit better since then; that was just over 2 years ago.  When I had finished I proved that no rational number squared was 3, and then I looked at the Lean term I had generated using the <code>#print</code> command. I emailed the resulting text file to my son who imported it into blender, coloured it and twisted it around a lot, and we sent the result to the London Mathematical Society who put it on the front page of their newsletter <a href=\"https://www.lms.ac.uk/sites/lms.ac.uk/files/files/NLMS_484-forweb2.pdf\" target=\"_blank\" title=\"https://www.lms.ac.uk/sites/lms.ac.uk/files/files/NLMS_484-forweb2.pdf\">here</a>.</p>",
        "id": 189228290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582820184
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_dvd_nat</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_self_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189229250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582820841
    },
    {
        "content": "<p>Cunningham's Law is in full effect</p>",
        "id": 189229257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582820847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<p>That's great. Mine is <em>much</em> longer than yours (around 100 lines!), but it's nice to see the different approaches and the <em>mistakes</em> (I suppose you can call them that) I made along the way.</p>\n<ul>\n<li>I didn't know <code>set ... := ...</code>, so my goal was full of <code>(n / 3)</code>. This sucked for readability, but the result was the same.</li>\n<li>I didn't know about <code>fin</code> and <code>fin_cases</code>, so I wrote my own lemmas that did <code>n % 3 = 0 ∨ n % 3 = 1 ∨ n % 3 = 2</code>.</li>\n<li>In retrospect, using cases made more sense than what I did, which was proof by contradiction from the beginning (although this is what I would do if I was doing this on paper). So I wrote a lemma that gave me <code>n % 3 ≠ 0 -&gt; n % 3 = 1 ∨ n % 3 = 2</code> and then <code>cases</code> on that by getting <code>1 = 0</code> in two separate goals.</li>\n<li>I tried to expand <code>(3*m + 1)</code> and <code>(3*m + 2)</code> to get it in the form <code>3*k + 1</code>(for some k), which took a lot of <code>rw</code>s (12 for <code>3*m+1</code>,  18 for <code>3*m + 2</code>), which once again, in retrospect is not the simplest route to take.</li>\n<li>I guess this is more down to my lack of familiarity with University Maths (the little time that I had to explore Maths is now taken up by revision for my A Levels), but I replaced all <code>n ∣ m</code> with <code>m % n = 0</code>, where I was more familiar with <code>%</code> due to the programming that I've done before.</li>\n</ul>\n<p>I guess these are all beginner mistakes, and more practice would be better, and hopefully I'd be better at actually doing proofs when I start uni at October, which would hopefully translate into better Lean.</p>",
        "id": 189275976,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1582853445
    },
    {
        "content": "<p>Kenny's approach uses the full force of uniqueness of factorization of integers into primes, that's why it looks so much shorter (it imports so much more -- once you know that p divides ab implies p divides a or p divides b then your problem becomes easy, but the usual proof of this uses Euclid's algorithm etc). The <code>ring</code> tactic will do all the expanding out stuff for you.</p>\n<p>Finally, there is not really any correlation between better Lean code and more maths knowledge, you can goof around with Lean in your spare time after A-levels in July and this will teach you far more about Lean than any maths degree will (although hopefully next year I'll be teaching a Lean course as part of Imperial's curriculum...)</p>",
        "id": 189290513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582876922
    },
    {
        "content": "<p>Kevin, I don't think your account of Kenny's proof is accurate. What he uses is Z/p is a domain when p is prime. This has nothing to do with uniqueness of factorization. And he could have done in two lines instead of three by putting the <code>(by norm_num : nat.prime 3)</code> instead of this in the second line.</p>",
        "id": 189291931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582878816
    },
    {
        "content": "<p>Thanks a lot. My point about Maths knowledge was referring to me not even knowing the definitions at the moment, so learning the Maths would be useful to know what I should be looking at in the first place. And what to <code>Ctrl-P</code> for. I guess it's like programming, where knowing what to search for is half the struggle (for me at least). It's a bit hard for me right now if I don't know what to search for. </p>\n<p>( Part about Imperial sounds great. You're seriously tempting me to firm Imperial :) Do you know if Lean is offered at any other Universities (UK)?)</p>",
        "id": 189291954,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1582878838
    },
    {
        "content": "<p>Oh, I hadn't looked closely and thought Kenny gave the Euclid's lemma argument, which is definitely the easiest:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">@</span><span class=\"n\">of_as_true</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">decidable_prime_1</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">or_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">dvd_mul</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 189293430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582880566
    },
    {
        "content": "<p>golfed with <code>norm_num</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">or_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">dvd_mul</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"mi\">3</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 189293520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582880655
    },
    {
        "content": "<p>What he uses is that Z/p is a domain when p is prime, which is the statement that if p divides ab then p divides a or p divides b. You're right it's not 100% the full force of uniqueness of factorization, but this is the key lemma which makes uniqueness of factorization easy by induction.</p>",
        "id": 189293817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582880967
    },
    {
        "content": "<p>I don't think the proof of Euclid's lemma in mathlib is at all high powered</p>",
        "id": 189293885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582881024
    },
    {
        "content": "<p>you need to know that <code>prime.coprime_iff_not_dvd</code> but this is more or less true by the definitions</p>",
        "id": 189293925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582881091
    },
    {
        "content": "<p>oh but <code>coprime.dvd_of_dvd_mul_left</code> relies on <code>dvd_gcd</code> which is basically the euclidean algorithm proof</p>",
        "id": 189293979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582881140
    },
    {
        "content": "<p>Is Euclid's Lemma this p|ab implies p|a or p|b statement? This lemma is exactly the door to uniqueness of factorization. If you ask a new undergrad to prove uniqueness of factorization they usually reduce it easily to this statement, but then they claim this statement is obvious because p is prime and when you press them for details they use uniqueness of factorization. Euclid's Lemma needs an idea.</p>",
        "id": 189293989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582881148
    },
    {
        "content": "<p>I am willing to grant that <code>dvd_gcd</code>, or the existence of the gcd in general, is nontrivial</p>",
        "id": 189294016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582881209
    },
    {
        "content": "<p>I usually explain to them that the assertion that p is prime is an assertion about all the numbers less than p (they don't divide p), so perhaps it isn't obvious that if p divides the product of two numbers much larger than p then it divides one of them. Prime iff irreducible isn't true in an arbitrary integral domain, this is somehow where the tension is.</p>",
        "id": 189294019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582881216
    },
    {
        "content": "<p>Interestingly, I do know a direct proof of p|ab implies p|a or p|b by induction, which doesn't use Euclid, but it also relies on an idea.</p>",
        "id": 189294103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582881293
    }
]