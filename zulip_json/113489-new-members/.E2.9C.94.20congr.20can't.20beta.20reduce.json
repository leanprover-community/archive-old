[
    {
        "content": "<p>Hey, I'm a bit confused about using cong on a function equal to the identity, as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_coarsely_antilipschitz_with_retract</span>  <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">retract</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">cal</span> <span class=\"o\">:</span> <span class=\"n\">coarse_antilipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coarse_lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">cal</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">retract</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- rewrite tactic failed, did not find instance of the pattern in the target expression (λ (x : α), x) x</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>any idea how to force intelligent rewriting?</p>",
        "id": 270676574,
        "sender_full_name": "bottine",
        "timestamp": 1643959849
    },
    {
        "content": "<p>Maybe <code>erw</code> will work. But <code>rw</code> is pretty sensitive to syntactic equality as opposed to definitional equality.</p>",
        "id": 270676700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643959973
    },
    {
        "content": "<p>And <code>congr_fun</code> is just a random function. It wouldn't know to beta reduce its results.</p>",
        "id": 270676715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643959995
    },
    {
        "content": "<p>What you can do is <code>have := congr_fun retract x, dsimp at this, rw ← this</code></p>",
        "id": 270676750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643960019
    },
    {
        "content": "<p>It's hard to suggest a better approach without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that I can load into VScode.</p>",
        "id": 270676810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643960056
    },
    {
        "content": "<p>yeah, sorry, I figured this was a bit lazy of me.</p>",
        "id": 270676822,
        "sender_full_name": "bottine",
        "timestamp": 1643960074
    },
    {
        "content": "<p>but let me see if your way works</p>",
        "id": 270676865,
        "sender_full_name": "bottine",
        "timestamp": 1643960126
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">lemma</span> <span class=\"n\">of_coarse_lipschitz_with_retract</span>  <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">retract</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">cl</span> <span class=\"o\">:</span> <span class=\"n\">coarse_lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coarse_antilipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">cl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">retract</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">cal</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">retract</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this_1</span> <span class=\"n\">at</span> <span class=\"n\">cal</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>a bit ugly but it works :)</p>",
        "id": 270677191,
        "sender_full_name": "bottine",
        "timestamp": 1643960403
    },
    {
        "content": "<p>what you did was essentially an intermediariy step of beta-reduction with dsimp, is that it?</p>",
        "id": 270677218,
        "sender_full_name": "bottine",
        "timestamp": 1643960437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">bottine</span> has marked this topic as resolved.</p>",
        "id": 270677342,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643960560
    },
    {
        "content": "<p>alright, thanks a lot :)</p>",
        "id": 270677350,
        "sender_full_name": "bottine",
        "timestamp": 1643960570
    },
    {
        "content": "<p>You could rephrase <code>retract</code> as <code>retract : ∀ x, g (f x) = x</code>.</p>",
        "id": 270677351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643960570
    },
    {
        "content": "<p>Then you can substantially golf this proof.</p>",
        "id": 270677362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643960579
    },
    {
        "content": "<p>mmh, is one cleaner than the other?</p>",
        "id": 270677377,
        "sender_full_name": "bottine",
        "timestamp": 1643960595
    },
    {
        "content": "<p>My guess is that you can replace the entire <code>begin ... end</code> block with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">retract</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">retract</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">cl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270677406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643960635
    },
    {
        "content": "<p>well, that <em>is</em> golfing</p>",
        "id": 270677534,
        "sender_full_name": "bottine",
        "timestamp": 1643960727
    },
    {
        "content": "<p>Maybe even </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">retract</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">cl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270677601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643960771
    },
    {
        "content": "<p>and you're right, it does work</p>",
        "id": 270677604,
        "sender_full_name": "bottine",
        "timestamp": 1643960773
    },
    {
        "content": "<p>So... I don't know if that hypothesis is cleaner. But it clearly is what Lean prefers <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 270677650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643960804
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 270677775,
        "sender_full_name": "bottine",
        "timestamp": 1643960945
    },
    {
        "content": "<p>I'll go with the shorter one, thanks!</p>",
        "id": 270678330,
        "sender_full_name": "bottine",
        "timestamp": 1643961399
    }
]