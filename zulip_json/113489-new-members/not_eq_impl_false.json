[
    {
        "content": "<p>Hello !</p>\n<p>I'm a new member who just started learning Lean with The Natural Number Game.</p>\n<p>I want to prove in intuitionistic logic this property (I've started a bit)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">nnA</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">choose_B_false</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">),</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>And now I need to use the definition of not : implie false.<br>\nWhere can I find such a property ? And for the future,  where can I easely find them ?</p>\n<p>Should I use <code>axiom</code> ? And how ? </p>\n<p>Thanks for the answers ^^</p>",
        "id": 235079322,
        "sender_full_name": "Cypooos",
        "timestamp": 1618758902
    },
    {
        "content": "<p>Lean knows about the definition, you don't need to \"use it\".</p>",
        "id": 235079951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759583
    },
    {
        "content": "<p>If you want to help your eyes, you can type things like: <code>change ¬ A → false at nnA,</code></p>",
        "id": 235079984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759630
    },
    {
        "content": "<p>Do you know about the <code>apply</code> tactic? And about <code>false.elim</code>?</p>",
        "id": 235080005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759666
    },
    {
        "content": "<p>I know about the <code>apply</code> one, not the <code>false.elim</code></p>",
        "id": 235080077,
        "sender_full_name": "Cypooos",
        "timestamp": 1618759718
    },
    {
        "content": "<p>Maybe you know the <code>exfalso</code> tactic then?</p>",
        "id": 235080111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759780
    },
    {
        "content": "<p>Anyway, <code>false.elim</code> will take as input a proof of <code>false</code> and output a proof of whatever you want.</p>",
        "id": 235080188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759834
    },
    {
        "content": "<p>yes but I've never used it.</p>\n<p>I know how to solve the puzzle, I just want to write the proof in Lean. Maybe you want me to tell you how ?</p>",
        "id": 235080245,
        "sender_full_name": "Cypooos",
        "timestamp": 1618759903
    },
    {
        "content": "<p>Oh sure.</p>",
        "id": 235080251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759917
    },
    {
        "content": "<p>I thought you didn't want spoilers.</p>",
        "id": 235080291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759925
    },
    {
        "content": "<p>Give 30 seconds to launch the web editor from your snippet</p>",
        "id": 235080306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759943
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">nnA</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">choose_B_false</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">choose_B_false</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hnA</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">nnA</span> <span class=\"n\">hnA</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235080320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759963
    },
    {
        "content": "<p>This is using your beginning.</p>",
        "id": 235080374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759998
    },
    {
        "content": "<p>It can be compressed a lot of course.</p>",
        "id": 235080376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618760005
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">nnA</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnA</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nnA</span> <span class=\"n\">hnA</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 235080430,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618760056
    },
    {
        "content": "<p>Yeah I just need to understand it now. What does false.elim ? I've read the doc but I didn't really truly understand it.</p>",
        "id": 235080463,
        "sender_full_name": "Cypooos",
        "timestamp": 1618760077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/not_eq_impl_false/near/235080430\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬¬</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">nnA</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnA</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nnA</span> <span class=\"n\">hnA</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's dense</p>",
        "id": 235080469,
        "sender_full_name": "Cypooos",
        "timestamp": 1618760100
    },
    {
        "content": "<p>If you are interested in pure logic rather than regular maths (as I gather from the fact that you know the words \"intuitionistic logic\") then we have great resources for you, search for \"Logic and proof\" and \"Theorem proving in Lean\" on <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a></p>",
        "id": 235080505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618760150
    },
    {
        "content": "<p>Definitely going to look at this !</p>\n<p>Thanks !</p>",
        "id": 235080576,
        "sender_full_name": "Cypooos",
        "timestamp": 1618760210
    },
    {
        "content": "<p>We don't mind answering beginners questions, but you'll have a far less frustrating experience if you try to follow <em>Theorem proving in Lean</em> instead of trying to get away with explanation from the natural number game.</p>",
        "id": 235080656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618760288
    },
    {
        "content": "<p>I will then. Sorry to bother !</p>",
        "id": 235080764,
        "sender_full_name": "Cypooos",
        "timestamp": 1618760409
    },
    {
        "content": "<p>There is no problem at all!</p>",
        "id": 235080783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618760432
    }
]