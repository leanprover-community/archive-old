[
    {
        "content": "<p>I want to prove the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.power</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.intervals</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">somelemma</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Using <code>library_search</code> I found <code>rw ← sum_range_reflect</code> as a possible first step. But then I wasn't able to convince lean that <code>n-1-(n-1-j)=j</code> because I wasn't able to apply <code>nat.sub_sub_self</code> since I didn't know how to extract the hypothesis that <code>j\\leq n-1</code> from the context. How can I do that or is there a better lemma to apply in mathlib?</p>",
        "id": 225433826,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1612651707
    },
    {
        "content": "<p>Your second line should be <code>refine sum_congr rfl (λ j j_in, _)</code></p>",
        "id": 225434041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612652109
    },
    {
        "content": "<p>(after the rw you found)</p>",
        "id": 225434048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612652126
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>You need to add <code>import tactic</code> at the top, and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">somelemma</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sum_range_reflect</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">j_in</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_range</span> <span class=\"n\">at</span> <span class=\"n\">j_in</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 225434162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612652312
    },
    {
        "content": "<p>This <code>sum_congr rfl</code> trick comes up again and again, it's well worth knowing!</p>",
        "id": 225434609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612653012
    },
    {
        "content": "<p>Thanks a lot.</p>",
        "id": 225434612,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1612653024
    },
    {
        "content": "<p>For more complex reindexings by different argument types, you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_bij\">docs#finset.sum_bij</a></p>",
        "id": 225439833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612662099
    }
]