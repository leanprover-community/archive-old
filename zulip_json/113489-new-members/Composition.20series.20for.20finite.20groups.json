[
    {
        "content": "<p>What would be the best way to define composition series on finite groups? I'm thinking of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">composition_series</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">maximal_normal_subgroup</span> <span class=\"o\">(</span><span class=\"n\">composition_series</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It should be possible to define <code>maximal_normal_subgroup</code> by creating a maximal element of <code>{ N : subgroup G // N.normal }</code>, but I'm not sure how to do that. Presumably there's something in the order theory files, but I haven't been able to find anything. (I don't really know what I'm looking for.  <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> )</p>",
        "id": 221565377,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609786822
    },
    {
        "content": "<p>At least two other people have been thinking about this recently. <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> ?</p>",
        "id": 221565498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609786883
    },
    {
        "content": "<p>You probably want to use <code>is_coatom</code> somewhere. I'm not sure how much API we have on the lattice of normal subgroups, though.</p>",
        "id": 221565574,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1609786919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> and I haven't done composition series specifically. However, <span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> did composition series a long time ago: <a href=\"https://github.com/Shamrock-Frost/jordan-holder/blob/master/src/composition_series.lean\">https://github.com/Shamrock-Frost/jordan-holder/blob/master/src/composition_series.lean</a></p>",
        "id": 221565661,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1609786950
    },
    {
        "content": "<p>In my mind this is not a completely straightforward problem. If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>⊂</mo><msub><mi>G</mi><mn>1</mn></msub><mo>⊂</mo><msub><mi>G</mi><mn>2</mn></msub><mo>⊂</mo><msub><mi>G</mi><mn>3</mn></msub><mo>⊂</mo><mo>⋯</mo><mo>⊂</mo><msub><mi>G</mi><mi>n</mi></msub><mo>=</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">1\\subset G_1\\subset G_2\\subset G_3\\subset\\cdots\\subset G_n=G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> then it's very natural for the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>G</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">G_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be subgroups of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> but you also want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>G</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">G_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be a subgroup of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>G</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">G_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> too.</p>",
        "id": 221565863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609787047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Maybe just specify embeddings rather than require the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>G</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">G_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be subgroups?</p>",
        "id": 221566082,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609787175
    },
    {
        "content": "<p>So you can go \"full type\" and have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>G</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">G_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">G</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> all being types and there being maps between them</p>",
        "id": 221566134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609787206
    },
    {
        "content": "<p>yeah</p>",
        "id": 221566168,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609787225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/113489-new-members/topic/Composition.20series.20for.20finite.20groups/near/221565661\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> and I haven't done composition series specifically. However, <span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> did composition series a long time ago: <a href=\"https://github.com/Shamrock-Frost/jordan-holder/blob/master/src/composition_series.lean\">https://github.com/Shamrock-Frost/jordan-holder/blob/master/src/composition_series.lean</a></p>\n</blockquote>\n<p>To give a little more detail: we've proved some stuff about solvable groups (along with Jordan Brown), but it seemed easier to us to define solvable in terms of the derived series of a group rather than in terms of composition series. The definition of derived series should be merged into mathlib soon though</p>",
        "id": 221566654,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609787456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> Your definition of <code>composition_series</code> seems to be trying to define a unique sequence associated to a finite group. But can't a group have multiple different composition series (because there is not always a unique maximal normal subgroup)?</p>",
        "id": 221567673,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609787943
    },
    {
        "content": "<p>So maybe instead you should define a <em>type</em> of composition series and prove that it's nonempty (it looks like the repository that Thomas linked to takes a similar approach)</p>",
        "id": 221567743,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609787987
    },
    {
        "content": "<p>I can't really understand what <span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> has done at first glance. The category theory is getting lost on me. Would the type be <code>list subgroup G</code>? I don't really understand what \"full type\" means either.</p>",
        "id": 221567933,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609788066
    },
    {
        "content": "<p>Also, not sure if this is the type of lemma you are asking about, but mathlib does have <code>finset.exists_maximal</code> which shows that any finite subset of a preorder has a maximal element</p>",
        "id": 221568023,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609788109
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/fintype/basic.html#finset.exists_maximal\">https://leanprover-community.github.io/mathlib_docs/data/fintype/basic.html#finset.exists_maximal</a></p>",
        "id": 221568030,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609788113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/Composition.20series.20for.20finite.20groups/near/221567933\">said</a>:</p>\n<blockquote>\n<p>I can't really understand what <span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> has done at first glance. The category theory is getting lost on me. Would the type be <code>list subgroup G</code>? I don't really understand what \"full type\" means either.</p>\n</blockquote>\n<p>Here's what's going on I think. First, he defines a type consisting of all \"normal series\" of a group</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">normal_series</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Group.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}):</span> <span class=\"n\">Group.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">initial</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">T'</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">T'</span> <span class=\"bp\">≅</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">normal_series</span> <span class=\"n\">T'</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">G</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Group.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}},</span>\n       <span class=\"n\">SES</span> <span class=\"n\">H</span> <span class=\"n\">G</span> <span class=\"n\">K</span>\n       <span class=\"bp\">→</span> <span class=\"n\">normal_series</span> <span class=\"n\">H</span>\n       <span class=\"bp\">→</span> <span class=\"n\">normal_series</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>Basically this is saying that if <code>G</code> is a group then </p>\n<ol>\n<li>Any group isomorphic to <code>G</code> can count as a normal series for <code>G</code> (think of it as the trivial normal series of length 1)</li>\n<li>If <code>H</code> embeds into <code>G</code> and its image is a normal subgroup then if you have a normal series on <code>H</code> you also have a normal series on <code>G</code> which you get by appending <code>H</code> to the beginning</li>\n</ol>\n<p>One slightly tricky thing here is that the elements of this type are not sequences in the usual sense (i.e. they are not functions from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> to some set), instead they are elements of some inductive type. But you could extract a sequence from them if you wanted.</p>",
        "id": 221568693,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609788460
    },
    {
        "content": "<p>Next, he defines a predicate on the <code>normal_series</code> type that says if the given normal series is a composition series</p>",
        "id": 221568796,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609788496
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_composition_series</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Group</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">normal_series</span> <span class=\"mi\">1</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">list.foldr</span> <span class=\"o\">(</span><span class=\"bp\">∧</span><span class=\"o\">)</span> <span class=\"n\">true</span>\n     <span class=\"bp\">$</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Group</span><span class=\"o\">,</span> <span class=\"n\">simple_group</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">subsingleton</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n     <span class=\"bp\">$</span> <span class=\"n\">factors</span> <span class=\"n\">σ</span>\n</code></pre></div>\n<p>Basically this is just saying that if <code>σ</code> is a normal series for <code>G</code> it is a composition series if at every step in the formation of <code>σ</code>, if you quotient by the subgroup that was used, you get a simple group</p>",
        "id": 221569022,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609788602
    },
    {
        "content": "<p>What is the analog of <code>Group.{u}</code> in Lean currently? I'm guessing it means the Type of all groups in <code>u</code>.</p>",
        "id": 221569087,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609788641
    },
    {
        "content": "<p>Also, thanks for all the explanations, they're very helpful.</p>",
        "id": 221569170,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609788684
    },
    {
        "content": "<p>I would normally write <code>(G : Type u) [group G]</code></p>",
        "id": 221569171,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609788685
    },
    {
        "content": "<p>or <code>(G : Type*) [group G]</code></p>",
        "id": 221569219,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609788709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Composition.20series.20for.20finite.20groups/near/221565498\">said</a>:</p>\n<blockquote>\n<p>At least two other people have been thinking about this recently. <span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> ?</p>\n</blockquote>\n<p>I messed around with derived series a while back and I defined it in a way similar to what Zhang has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">derived_subgroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"bp\">⊤</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">commutator</span> <span class=\"bp\">$</span> <span class=\"n\">derived_subgroup</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">derived_subgroup</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inclusion</span>\n</code></pre></div>\n<p>where <code>inclusion</code>is the following homomorphism</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subgroup.inclusion</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I couldn't find a nice way of extending this to composition series however.</p>",
        "id": 221571504,
        "sender_full_name": "Jason KY.",
        "timestamp": 1609789741
    },
    {
        "content": "<p>I think I'm getting somewhere, although the definition isn't done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">normal_series</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">init</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">T'</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">T'</span><span class=\"o\">],</span> <span class=\"n\">T'</span> <span class=\"bp\">≃*</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">normal_series</span> <span class=\"n\">T'</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">G</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">K</span><span class=\"o\">],</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"c\">/-</span><span class=\"cm\"> H identifies as a normal subgroup of G -/</span> <span class=\"o\">)</span>\n  <span class=\"n\">normal_series</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">normal_series</span> <span class=\"n\">G</span>\n</code></pre></div>",
        "id": 221572277,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609790084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/Composition.20series.20for.20finite.20groups/near/221569087\">said</a>:</p>\n<blockquote>\n<p>What is the analog of <code>Group.{u}</code> in Lean currently? I'm guessing it means the Type of all groups in <code>u</code>.</p>\n</blockquote>\n<p>In Lean, <code>Group</code> would be the category of all groups (in universe u) (assuming they made this category by now :-) )</p>",
        "id": 221572337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609790115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> FYI, there is currently a PR underway to mathlib to add derived series (<a href=\"https://github.com/leanprover-community/mathlib/issues/5565\">#5565</a>). Also there will probably soon be a PR coming to add something like your <code>inclusion</code></p>",
        "id": 221572396,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609790147
    },
    {
        "content": "<p>Oh no, is it better to work with <code>Group</code> then?  This is getting much harder than I thought it would be.</p>",
        "id": 221572747,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609790308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> Actually I got a little confused. Your <code>inclusion</code> is just <code>subgroup.subtype</code> which is already in mathlib</p>",
        "id": 221572757,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609790313
    },
    {
        "content": "<p>but soon there will be a map from <code>subgroup H</code> to <code>subgroup G</code> (see <a href=\"https://github.com/leanprover-community/mathlib/blob/697692be6219bdcd15d17883b632441c0b7ab930/src/group_theory/subgroup.lean#L774\">here</a>)</p>",
        "id": 221572813,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609790341
    },
    {
        "content": "<p>I was just messing around in lean since I was learning the material myself so its not surprising that I missed that definition :p</p>",
        "id": 221572899,
        "sender_full_name": "Jason KY.",
        "timestamp": 1609790388
    },
    {
        "content": "<p>Yeah, I think I only discovered it by accident (using <code>library_search</code> or something)</p>",
        "id": 221573164,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1609790490
    },
    {
        "content": "<p>I am not sure that using category theory will help here</p>",
        "id": 221573845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609790842
    }
]