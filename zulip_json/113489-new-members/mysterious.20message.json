[
    {
        "content": "<p>Can you help me make sense of this error message?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">h10</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h10</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n   <span class=\"err\">‹</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n   <span class=\"err\">‹</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span> <span class=\"err\">›</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 202401144,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593500176
    },
    {
        "content": "<p>try <code>set_option pp.all true</code> in your file.</p>",
        "id": 202401173,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593500221
    },
    {
        "content": "<p>That causes<br>\ninvalid Boolean option value, 'true' or 'false' expected</p>",
        "id": 202401379,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593500415
    },
    {
        "content": "<p>Sorry, I forgot the <code>true</code> there. I've edited my original comment</p>",
        "id": 202401393,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593500447
    },
    {
        "content": "<p>Whew,  now I have a lot more to look at!</p>",
        "id": 202401430,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593500500
    },
    {
        "content": "<p>but the mystery is still there:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Model</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">M</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Model</span><span class=\"bp\">.</span><span class=\"n\">ordered_pair</span> <span class=\"n\">M</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Model</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">M</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Model</span><span class=\"bp\">.</span><span class=\"n\">ordered_pair</span> <span class=\"n\">M</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 202401587,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593500652
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 202401688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593500775
    },
    {
        "content": "<p>Could be a universe issue, you could set_option pp.universes true</p>",
        "id": 202401702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593500801
    },
    {
        "content": "<p>I don't think that changed the output messages at all.</p>",
        "id": 202401860,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593500964
    },
    {
        "content": "<p>What about <code>set_option pp.all true</code>?</p>",
        "id": 202401930,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593501021
    },
    {
        "content": "<p>See above,  that was the first suggestion.</p>",
        "id": 202401936,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593501046
    },
    {
        "content": "<p>ok, we really need a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 202401964,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593501107
    },
    {
        "content": "<p>Well,  I only have a maximal working example.   My file is 385 lines.</p>",
        "id": 202402038,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593501184
    },
    {
        "content": "<p>I  was hoping it was easy for you people.. but if not I guess I'll just delete that proof and try it again some other way.</p>",
        "id": 202402127,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593501269
    },
    {
        "content": "<p>If your file is self-contained, you can just upload it as an attachment on zulip.</p>",
        "id": 202402409,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593501605
    },
    {
        "content": "<p>How do I upload an attachment?</p>",
        "id": 202402470,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593501673
    },
    {
        "content": "<p>You can post it on <a href=\"http://gist.github.com\">gist.github.com</a> as well. You upload an attachment by clicking on the paper clip under the box where you type messages</p>",
        "id": 202402508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593501717
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/_umtDcJabfiO8VE0L3k-x9yX/inf.lean\">inf.lean</a> </p>\n<p>OK there is my file that produces the error message about which I posted.</p>",
        "id": 202403866,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593502983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284844\">@Michael Beeson</span> </p>\n<p>I've modified your example slightly, and I get the actual error message.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">paste_members</span><span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">Rel</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">Rel</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">‹</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">x</span><span class=\"o\">)),</span> <span class=\"err\">‹</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">›</span> <span class=\"err\">›</span> <span class=\"err\">∈</span> <span class=\"n\">paste</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span>\n                                   <span class=\"err\">‹</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"err\">›</span> <span class=\"err\">∈</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"err\">‹</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"err\">›</span> <span class=\"err\">∈</span>  <span class=\"n\">S</span>\n                                  <span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">proj1</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">inverse_axiom1</span> <span class=\"n\">proj1</span> <span class=\"o\">(</span><span class=\"n\">rel_proj1</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">proj2</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">inverse_axiom1</span> <span class=\"n\">proj2</span> <span class=\"o\">(</span><span class=\"n\">rel_proj2</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">hr</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">paste</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">intersection_axiom</span> <span class=\"o\">(</span><span class=\"n\">join</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">proj1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">join</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">proj2</span><span class=\"o\">))</span> <span class=\"err\">‹</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"err\">‹</span> <span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">›</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">join_axiom</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">proj1</span><span class=\"o\">)</span> <span class=\"n\">hr</span> <span class=\"n\">h1</span> <span class=\"err\">‹</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"err\">‹</span> <span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">›</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">join_axiom</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">proj2</span><span class=\"o\">)</span> <span class=\"n\">hs</span> <span class=\"n\">h2</span> <span class=\"err\">‹</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"err\">‹</span> <span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span> <span class=\"err\">›</span>  <span class=\"err\">›</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h3</span> <span class=\"k\">with</span> <span class=\"n\">h4</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h4</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h6</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h5</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h7</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h7</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">h9</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h8</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">h10</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h9</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">h11</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h10</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n\n      <span class=\"o\">}</span>\n\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202404195,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593503277
    },
    {
        "content": "<p>Essentially, you have multiple variables called <code>x</code> and <code>y</code>,  and <code>h10.right.left</code> has a different <code>x</code> and/or <code>y</code> compared to the goal</p>",
        "id": 202404288,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593503340
    },
    {
        "content": "<p>Thank you.   I have made other errors having multiple variables with the same name.   I am a slow learner...</p>",
        "id": 202404410,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593503447
    },
    {
        "content": "<p>Exactly. After the <code>cases h9</code>, you have in your proof state</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>So three different things are named <code>x</code></p>",
        "id": 202404420,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593503457
    },
    {
        "content": "<p>(and three are named <code>z</code> and two are named <code>y</code>!)</p>",
        "id": 202404446,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593503478
    },
    {
        "content": "<p>Lean's error message could be better here. I know there are already some situations where it warns about having two variables with the same name.</p>",
        "id": 202430007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593521530
    },
    {
        "content": "<p>This multiple variables with the same name issue is really awful. I was never convinced by arguments in favor of not warning the user here, except when the name is <code>this</code>.</p>",
        "id": 202499421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593553653
    },
    {
        "content": "<p>Can autogenerated variables names collide with existing ones? If so a warning could be annoying to work around sometimes. (Or it could only warn about variables the user explicitly named.) But if Lean is going to produce an error anyways, then there's absolutely no reason not to emit a warning as well.</p>",
        "id": 202503405,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593556353
    },
    {
        "content": "<p>My experience with auto-generated variables is that it depends on the tactic. For example <code>have</code> will make as many <code>this</code>s as you will ever need</p>",
        "id": 202535675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593585800
    },
    {
        "content": "<p>I guess I meant other than <code>this</code>.</p>",
        "id": 202571675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593611886
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span>  <span class=\"err\">∈</span>  <span class=\"o\">:=</span>  <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pairing_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span> <span class=\"n\">single_definition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"kn\">infix</span>  <span class=\"err\">∈</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">symmetry_test2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">):=</span>\n <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The line \"symmetry at h\"  third from the bottom generates <br>\n\"invalid 'begin-end' expression, ',' expected\"<br>\nand the next line generates \"sync\",  although the <br>\nlemma does type-check.   I got here when an attempted<br>\nuse of \"symmetry\" generated a similar error, but in that<br>\ncase the proof wouldn't check.    The example above<br>\ncan be copied and checked.   Probably you could remove<br>\nmany of the class members.   If you remove \"at h\" the <br>\nerror goes away, indicating that the syntax elsewhere is OK.<br>\nBut it should be OK with \"at h\" as shown;  indeed it is OK enough<br>\nto type-check...</p>",
        "id": 209206975,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599363095
    },
    {
        "content": "<p>It's just that <code>symmetry</code> doesn't accept an <code>at</code> keyword.</p>",
        "id": 209208853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599366931
    },
    {
        "content": "<p>If you hover over <code>symmetry</code> to get the tooltip, or look at <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#symmetry\">tactic#symmetry</a>, you'll see it only operates on the goal.</p>",
        "id": 209208862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599366957
    },
    {
        "content": "<p>I agree it would be nice if it accepted this, and indeed this would be an excellent tactic project for someone wanting to learn about writing tactics.</p>",
        "id": 209208909,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599367018
    },
    {
        "content": "<p>If you <code>import tactic.basic</code>, then you can use <code>replace h := h.symm</code> in the meantime.</p>",
        "id": 209208920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599367072
    },
    {
        "content": "<p>(or indeed just <code>exact h.symm</code>)</p>",
        "id": 209208923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599367080
    },
    {
        "content": "<p>You can't define notations starting with <code>{</code>. Bad Things will happen. All notations starting with <code>{</code> are defined inside the C++ code</p>",
        "id": 209209665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599368565
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/symmetry'\">docs#symmetry'</a> a thing?</p>",
        "id": 209209731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599368756
    },
    {
        "content": "<p>guess not</p>",
        "id": 209209777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599368800
    },
    {
        "content": "<p>I started implementing it, but then I found <code>symmetry'</code> is in <code>tactic/apply.lean</code></p>",
        "id": 209210064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599369473
    },
    {
        "content": "<p>We should really beg and plead those <code>tactic'</code> versions until they give up and move to core to merge themselves with the unprimed versions.</p>",
        "id": 209210119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599369585
    },
    {
        "content": "<p>It looks like one difference with <code>symmetry'</code> versus <code>symmetry</code> is that when it applies to the goal, it uses <code>tactic.symmetry'</code>, which uses <code>retry_apply</code> rather than <code>apply_core</code> to apply the symmetry lemma.  This <code>retry_apply</code> tries <code>apply_core</code> first, but then it does some sort of try-to-apply-harder routine if that fails.</p>",
        "id": 209210407,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599370133
    },
    {
        "content": "<p>Here's a tracking issue for the primed tactics, though it hasn't been updated in a while: <a href=\"https://github.com/leanprover-community/lean/issues/124\">lean#124</a>.</p>",
        "id": 209210574,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599370477
    }
]