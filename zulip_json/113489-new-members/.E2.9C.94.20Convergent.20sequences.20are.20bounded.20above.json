[
    {
        "content": "<p>(Spoiler - solution)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.range</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">converges_to</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_le_of_converges_to_ev</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">converges_to</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">cs</span> <span class=\"mi\">1</span> <span class=\"n\">zero_lt_one</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">N</span> <span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n<span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"n\">apply</span> <span class=\"n\">le_abs_self</span><span class=\"o\">,</span>\n<span class=\"k\">suffices</span> <span class=\"n\">h₃</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">sub_lt_iff_lt_add'.mp</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_le_of_converges_to_eventually</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">converges_to</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">cs</span> <span class=\"mi\">1</span> <span class=\"n\">zero_lt_one</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"n\">N.succ</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.maximum</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">with_bot.none_eq_bot</span><span class=\"o\">,</span> <span class=\"n\">list.maximum_eq_none</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">list.ne_nil_of_length_eq_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.length_map</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">list.length_range</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n <span class=\"o\">},</span>\n<span class=\"k\">let</span> <span class=\"n\">lm</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">with_bot.unbot</span> <span class=\"n\">l.maximum</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l.maximum</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">lm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">list.maximum</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coe_unbot</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n\n<span class=\"n\">use</span> <span class=\"n\">max</span> <span class=\"n\">lm</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">nat.lt_or_ge</span> <span class=\"n\">n</span> <span class=\"n\">N</span> <span class=\"k\">with</span> <span class=\"n\">hn</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">lm</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">list.le_maximum_of_mem</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.mem_map</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">list.mem_range</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">nat.le_succ</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.cast_id</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">lm</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_le_add_iff_right</span><span class=\"o\">,</span> <span class=\"n\">le_max_iff</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">abs_lt.mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_add_of_neg_add_lt_left</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hn</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275388926,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647358296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>You can wrap spoilers in</p>\n<div class=\"codehilite\"><pre><span></span><code>```spoiler\ncode blocks\n```\n```\n</code></pre></div>\n</div></div>",
        "id": 275389522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647358526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455400\">Harry Pacitti</span> has marked this topic as resolved.</p>",
        "id": 275392111,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647359587
    },
    {
        "content": "<p>I'm pretty one can write a much shorter proof, but I don't have time right now.</p>",
        "id": 275392836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647359886
    },
    {
        "content": "<p>I'd be interested. I did it exactly as I would do in math, except that I'm not good at using <code>calc</code>. Also,  using <code>list.maximum</code> is a bit awkward, since the list can be empty and then it returns <code>bot</code>, so one needs to pay attention to this.</p>",
        "id": 275394199,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647360367
    },
    {
        "content": "<p>I came back and tried to write a solution that is not cheating too much and is readable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">converges_to</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_le_of_converges_to_ev</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">converges_to</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">cs</span> <span class=\"mi\">1</span> <span class=\"n\">zero_lt_one</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">N</span> <span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n<span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"n\">apply</span> <span class=\"n\">le_abs_self</span><span class=\"o\">,</span>\n<span class=\"k\">suffices</span> <span class=\"n\">h₃</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">sub_lt_iff_lt_add'.mp</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>  <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_le_of_converges_to_eventually</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">converges_to</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">cs</span> <span class=\"mi\">1</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">''</span> <span class=\"n\">Iio</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"o\">((</span><span class=\"n\">finite_Iio</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bdd_above</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">lt_max_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_or_ge</span> <span class=\"n\">n</span> <span class=\"n\">N</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hM</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">abs_lt.mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275437693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647379583
    },
    {
        "content": "<p>Note that I didn't modify the first proof, I'm only pasting it to get the full snippet. Note also I changed the import line.</p>",
        "id": 275437746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647379614
    }
]