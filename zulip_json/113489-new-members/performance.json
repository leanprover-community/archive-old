[
    {
        "content": "<p>Why is <code>norm_num</code> quadratic when there's only linear work to be done?  (I've reported this as an issue at <a href=\"https://github.com/leanprover-community/mathlib/issues/3500\">https://github.com/leanprover-community/mathlib/issues/3500</a> , but let me know if it should be reported elsewhere, or if this is not a real bug)</p>",
        "id": 204592533,
        "sender_full_name": "Jason Gross",
        "timestamp": 1595359958
    },
    {
        "content": "<p>I would guess the answer is that <code>simp</code> does quadratic work to build the expressions like <code>f (f (f ...))</code></p>",
        "id": 204595744,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595361471
    },
    {
        "content": "<p>What happens if you use <code>simp only </code> in place of <code>norm_num</code>?</p>",
        "id": 204595848,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595361519
    },
    {
        "content": "<p>Also in case you weren't aware, it looks like your <code>comp_pow</code> is the same (but not definitionally) as <code>nat.iterate</code> in core. (P.s. this isn't really a new members question!)</p>",
        "id": 204596169,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595361673
    },
    {
        "content": "<p>This is entirely <code>simp</code>'s doing, not <code>norm_num</code>.</p>",
        "id": 204598227,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595362778
    },
    {
        "content": "<p>(<code>norm_num</code> calls <code>simp</code>, which is why you see it here.)</p>",
        "id": 204598339,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595362820
    },
    {
        "content": "<p><code>simp only</code> is also quadratic (I've just reported this as <a href=\"https://github.com/leanprover-community/lean/issues/401\">https://github.com/leanprover-community/lean/issues/401</a>), but the coefficient on the quadratic is about 100x smaller than for <code>norm_num</code>.  This is perhaps fast enough for now, thanks!</p>",
        "id": 204598613,
        "sender_full_name": "Jason Gross",
        "timestamp": 1595362990
    },
    {
        "content": "<p>Because <code>simp only</code> is not trying to rewrite with 100 other simp lemmas.</p>",
        "id": 204598655,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595363029
    },
    {
        "content": "<p>FYI, if you want <code>norm_num</code> to not try <code>simp</code> itself, you can use <code>norm_num1</code>. Depending on the order things get solved this may or may not make any difference.</p>",
        "id": 204598727,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595363053
    },
    {
        "content": "<p>Obviously this is an artificial example but there is nothing relevant to <code>norm_num</code> here, right?</p>",
        "id": 204598875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595363148
    },
    {
        "content": "<p>No, but given its presence in the artificial example, I assume it's actually doing something in the real life case.</p>",
        "id": 204598993,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595363199
    },
    {
        "content": "<p>Anyways this all seems like expected behavior. I'm not surprised that <code>simp</code> is not smart enough to simplify the term it substitutes recursively in the same pass.</p>",
        "id": 204599054,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595363233
    },
    {
        "content": "<p>In fact if it wasn't a definitional equality then the proof term size would be quadratic right?</p>",
        "id": 204599286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595363357
    },
    {
        "content": "<blockquote>\n<p>No, but given its presence in the artificial example, I assume it's actually doing something in the real life case.</p>\n</blockquote>\n<p>No, this is just me being inexperienced with Lean and not knowing the proper way to simplify things (I believe someone suggested <code>norm_num</code> a while back when I was doing something else, and I misremembered why it was suggested over <code>simp</code>)</p>",
        "id": 204599506,
        "sender_full_name": "Jason Gross",
        "timestamp": 1595363465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Is the quadratic part really the \"attempt to rewrite with non-matching lemmas\" and not the \"rewrite successfully\"?</p>",
        "id": 204599645,
        "sender_full_name": "Jason Gross",
        "timestamp": 1595363535
    },
    {
        "content": "<p>(I am trying to test this, but I can't seem to get <code>simp only</code> to not solve goals that are solvable by rfl...)</p>",
        "id": 204599726,
        "sender_full_name": "Jason Gross",
        "timestamp": 1595363600
    },
    {
        "content": "<p>for testing purposes, you could delete the <code>Î£' P, P =</code> part</p>",
        "id": 204599831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595363669
    },
    {
        "content": "<p>Let's say <code>simp</code> has finished the left-hand side, then it has a big expression of 100 <code>f</code>s to search for subexpressions which can be rewritten using simp lemmas</p>",
        "id": 204600002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595363774
    },
    {
        "content": "<p>as far as I know, it will try to match every simp lemma against every subexpression (and give up as soon as it sees the head symbols do not match), every time it expands one more <code>g</code> on the right</p>",
        "id": 204600078,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595363838
    },
    {
        "content": "<p>so it's quadratic * size of simp set</p>",
        "id": 204600091,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595363848
    },
    {
        "content": "<p><code>simp</code> is top-down rather than bottom-up?  Is there any way to tell it to be bottom-up instead?  (Also, it doesn't seem like walking the term should be <em>that</em> expensive...)</p>",
        "id": 204601105,
        "sender_full_name": "Jason Gross",
        "timestamp": 1595364498
    },
    {
        "content": "<p>It doesn't matter whether it's top-down or bottom-up once the LHS is done, that's partly why I used that example.</p>",
        "id": 204601683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595364876
    },
    {
        "content": "<p>Also I imagine that even if it magically knew where to rewrite next every time, there would still be a considerable (and certainly) quadratic amount of bookkeeping work to figure out how to substitute the definition of <code>comp_pow</code> inside the deeply nested context.</p>",
        "id": 204601898,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595365008
    },
    {
        "content": "<p>I imagine it would help if <code>comp_pow</code> built the nested application in the opposite order</p>",
        "id": 204601928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595365022
    },
    {
        "content": "<p>We generally don't intentionally introduce large expressions like this when proving, so <code>simp</code> is not really optimized for this use case</p>",
        "id": 204602343,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595365259
    },
    {
        "content": "<p>I think <code>simp</code> is actually bottom up but I'm not sure.</p>",
        "id": 204602486,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595365336
    },
    {
        "content": "<p>You can get a sense of the work <code>simp</code> is doing with <code>set_option trace.simplify true</code></p>",
        "id": 204602506,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595365350
    }
]