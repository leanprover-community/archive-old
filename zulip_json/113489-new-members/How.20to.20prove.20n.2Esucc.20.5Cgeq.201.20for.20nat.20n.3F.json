[
    {
        "content": "<p>Originally I wanted to prove </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">nonzero_gt_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">):</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>I tried library_search but couldn't find anything. So I started to try to prove this theorem by hand and got stuck here. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">nonzero_gt_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">):</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"c1\">-- how to prove n_n.succ ≥ 1 ?</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Once again, these seems like something library_search should be able to handle but nothing was coming up. I also typed \"nat.\" in VSCode and manually looked through proven results about natural numbers but nothing seemed particularly applicable. </p>\n<p>How can I prove this (frustratingly simple) theorem?</p>",
        "id": 204258775,
        "sender_full_name": "Sara Fish",
        "timestamp": 1595019788
    },
    {
        "content": "<p><code>omega</code>?</p>",
        "id": 204259022,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595019929
    },
    {
        "content": "<p>I think if you replace <code>n \\ge 1</code> with <code>1 \\le n</code> you will have more <code>library_search</code> luck</p>",
        "id": 204259087,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595019959
    },
    {
        "content": "<p><code>omega</code> did the trick, thanks. Forgot it exists.</p>",
        "id": 204259154,
        "sender_full_name": "Sara Fish",
        "timestamp": 1595019979
    },
    {
        "content": "<p><code>library_search</code> doesn't try as hard as you might expect to unify the goal with each theorem it compares it to</p>",
        "id": 204259265,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595020054
    },
    {
        "content": "<p>so it's sensitive to syntactic equality</p>",
        "id": 204259281,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595020066
    },
    {
        "content": "<p>Replacing with \\le still didn't work...is there any way to find out what <code>omega</code> did?</p>",
        "id": 204259284,
        "sender_full_name": "Sara Fish",
        "timestamp": 1595020067
    },
    {
        "content": "<p>I think the <code>omega</code> algorithm doesn't naturally produce readable certificates</p>",
        "id": 204259351,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595020084
    },
    {
        "content": "<p>You can write <code>show_term { omega },</code> but it's not going to be very enlightening.</p>",
        "id": 204259408,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595020120
    },
    {
        "content": "<p>also replace <code>\\n n = 0</code> with <code>n \\ne 0</code></p>",
        "id": 204259420,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595020131
    },
    {
        "content": "<p>this is another syntactic choice; in mathlib we try to consistently use <code>\\ne</code> and <code>\\le</code> in order to make search work (or at least, work up to knowing which expressions are \"idiomatic\" or \"normal form\")</p>",
        "id": 204259471,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595020164
    },
    {
        "content": "<p>There's some info on omega here: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#omega\">tactic#omega</a></p>",
        "id": 204259606,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595020226
    },
    {
        "content": "<p>I am a little surprised this one isn't in the library. I tried changing to <code>\\ne</code> and <code>\\le</code> and <code>library_search</code> and <code>suggest</code> still couldn't find a proof.</p>",
        "id": 204259666,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595020273
    },
    {
        "content": "<p><code>theorem nonzero_gt_one (n : ℕ ): ¬ n = 0 → n ≥ 1 := nat.pos_of_ne_zero</code></p>",
        "id": 204259787,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595020361
    },
    {
        "content": "<p><code>suggest</code> works for me here</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nonzero_gt_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">):</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">suggest</span><span class=\"o\">,</span>\n  <span class=\"c1\">--exact inf_eq_left.mp rfl,</span>\n  <span class=\"n\">sorry</span> <span class=\"c1\">-- how to prove n_n.succ ≥ 1 ?</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204259798,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595020368
    },
    {
        "content": "<p>OK, I've learned to always try <code>suggest</code> and <code>hint</code> before posting here! :)</p>",
        "id": 204259899,
        "sender_full_name": "Sara Fish",
        "timestamp": 1595020434
    },
    {
        "content": "<p>(<code>hint</code> just told me to use <code>omega</code>)</p>",
        "id": 204260048,
        "sender_full_name": "Sara Fish",
        "timestamp": 1595020462
    },
    {
        "content": "<p>I opened an issue about <code>library_search</code>: <a href=\"https://github.com/leanprover-community/mathlib/issues/3432\">#3432</a></p>",
        "id": 204263437,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595022332
    },
    {
        "content": "<p><code>library_search!</code>   works for me for the original goal here (with the <code>!</code>) giving <code>    exact inf_eq_left.mp rfl, </code>, but not for Bryans ticket</p>",
        "id": 204269748,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595027394
    }
]