[
    {
        "content": "<p>The <code>list.head</code> function requires <code>[inhabited α]</code>, but <code>list.last</code> requires <code>l ≠ list.nil</code>.  I understand that both are useful in different settings, and indeed there is <code>list.ilast</code> for the variant with <code>[inhabited α]</code>.<br>\nFor what I am doing right now I am missing the not-nil-variant of <code>head</code>, though. Is there a reason why it isn’t there?</p>",
        "id": 272679232,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645445054
    },
    {
        "content": "<p>Is it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.head'\">docs#list.head'</a>?</p>",
        "id": 272679716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645445361
    },
    {
        "content": "<p>this naming is a disaster</p>",
        "id": 272679886,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645445487
    },
    {
        "content": "<p>I don't think I have ever used the <code>l != []</code> functions on list. I see a use for <code>list.head</code> and <code>list.head'</code> style functions</p>",
        "id": 272680469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645445785
    },
    {
        "content": "<p>what is your application?</p>",
        "id": 272680511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645445804
    },
    {
        "content": "<p>The naming is definitely a disaster. I would use <code>list.ihead</code> and <code>list.head</code> for those two</p>",
        "id": 272680602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645445875
    },
    {
        "content": "<p>to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth\">docs#list.nth</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.inth\">docs#list.inth</a></p>",
        "id": 272680661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645445896
    },
    {
        "content": "<p>My application is dealing with reduced non-empty word in free products, where I have to do a lot of peeking at the head and tail.</p>",
        "id": 272684770,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645448365
    },
    {
        "content": "<p>But it turns what I really want is a higher level API (that uses the list internally), and then it begins to matters less how the list api looks like</p>",
        "id": 272684912,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645448418
    },
    {
        "content": "<p>Does this have something to do with parsing?</p>",
        "id": 272685839,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1645448928
    },
    {
        "content": "<p>No, I wouldn’t say so.</p>",
        "id": 272687584,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645449930
    },
    {
        "content": "<p>Maybe it's time for an explicit nonempty list as a promoted subtype and associated API?</p>",
        "id": 272692290,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645452311
    },
    {
        "content": "<p>Maybe, although with head and last you might also encounter them with mixed lists, e.g. appending a non-empty to a general list.</p>",
        "id": 272776343,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645520922
    },
    {
        "content": "<p>I refactored my current proof back and forth between tail and itail, and at least for me, tail works much better, so I added the equivalent head variant (with the not-nil assumption) to my file for now.</p>\n<p>So I wonder if I should add it to the base library? If so, as <code>head</code>, renaming the existing function to <code>ihead</code>? Or some other naming convention that keeps <code>head</code> as it is and renames <code>tail</code>?</p>",
        "id": 272776545,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645521055
    },
    {
        "content": "<p>Hmm, and the very next proof gets ugly (because <code>cases</code> doesn't work well on expressions that appear in such indices? Lack of dependent rewriting). Surprisingly tricky, all that.</p>",
        "id": 272780462,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645523411
    },
    {
        "content": "<p>Try <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.cases'\">docs#tactic.interactive.cases'</a>; it should generate equations for 'complex' indices.</p>",
        "id": 272782250,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1645524407
    },
    {
        "content": "<p>Ah, interesting! I’ll try it next time</p>",
        "id": 272789006,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645528607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113489-new-members/topic/list.2Ehead.20vs.2E.20list.2Elast/near/272780462\">said</a>:</p>\n<blockquote>\n<p>Hmm, and the very next proof gets ugly (because <code>cases</code> doesn't work well on expressions that appear in such indices? Lack of dependent rewriting). Surprisingly tricky, all that.</p>\n</blockquote>\n<p>Yes, this is why I'm not so enthusiastic to add these functions, I don't think they actually work all that well. I would use the name <code>list.head</code> for the option-returning one, and you can have an API to use <code>option.get</code> on it but most likely you just want to actually pattern match to get the name out</p>",
        "id": 272790169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645529361
    },
    {
        "content": "<p>Or maybe a subtype-based API might be useful after all</p>",
        "id": 272799636,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645535322
    },
    {
        "content": "<p>You say “just pattern match”, but that doesn't work easily for <code>last'</code>…</p>\n<p>Anyways, I'm tempted to side step that issue in my proof completely and use a different data structure. Probably better anyways.</p>",
        "id": 272801968,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645536540
    },
    {
        "content": "<p>you can pattern match on an option-returning <code>last</code></p>",
        "id": 272802947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645536994
    },
    {
        "content": "<p>Pattern matching on a complex expression (e.g. <code>l.last'</code>) is often tedious, I find, as it tends to lose the connection to other facts about the things in the expression (e.g. <code>l ≠ nil</code>)</p>",
        "id": 272803554,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1645537294
    }
]