[
    {
        "content": "<p>What is the _semantic_ difference between an argument <code>example (p : P) : Q</code> and an antecedent <code>example : P → Q</code> in Lean? I know that the ways we work with them syntactically are slightly different. However, what is the semantic difference — why do they both exist?</p>",
        "id": 251050892,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630151811
    },
    {
        "content": "<p>There is no semantic difference. Both versions prove <code>P -&gt; Q</code> from the point of view of external uses</p>",
        "id": 251051195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630152064
    },
    {
        "content": "<p>However, the version with <code>(p : P)</code> is shorthand for starting the proof with a lambda</p>",
        "id": 251051236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630152105
    },
    {
        "content": "<p>Additionally, the autogenerated equation lemmas for a definition will be slightly different, and the equation compiler also treats the two cases differently</p>",
        "id": 251051317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630152174
    },
    {
        "content": "<p>Are they semantically the same also when used for a function definition?</p>",
        "id": 251051337,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630152212
    },
    {
        "content": "<p>yes</p>",
        "id": 251051347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630152229
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 251051353,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630152235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 251051410,
        "sender_full_name": "Notification Bot",
        "timestamp": 1630152269
    },
    {
        "content": "<p>Here's what I mean about the equation lemmas being different:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo.equations._eqn_1</span>\n<span class=\"c1\">-- foo.equations._eqn_1 : foo = λ (n : ℕ), n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">bar.equations._eqn_1</span>\n<span class=\"c1\">-- bar.equations._eqn_1 : ∀ (n : ℕ), bar n = n</span>\n</code></pre></div>",
        "id": 251051472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630152329
    },
    {
        "content": "<p>Note that <code>foo</code> and <code>bar</code> are the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>It is only the generated equation lemma that is different</p>",
        "id": 251051548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630152381
    },
    {
        "content": "<p>Thanks a lot for the detailed explanation!</p>",
        "id": 251051576,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630152424
    },
    {
        "content": "<p>As an end user the general rule is that you should put as much stuff to the left of the colon as possible, because it makes proofs more compact.</p>",
        "id": 251052047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630152866
    },
    {
        "content": "<p>There are some exceptions when proofs are a bit more compact if you leave some arguments to the right of the colon, particularly when the proof makes use of the equation compiler or <code>induction</code>.</p>",
        "id": 251052155,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1630152999
    },
    {
        "content": "<p>The remark about <code>induction</code> confuses me. Maybe I should first ask whether <code>example : ∀ p : P, Q</code> is the same as  <code>example : P → Q</code>.</p>",
        "id": 251052282,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630153152
    },
    {
        "content": "<p>If those are different at all, it only by alpha equivalence (ie the P argument may have a different name for the second case; but nothing uses that name anyway)</p>",
        "id": 251052510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630153391
    },
    {
        "content": "<p>Hmm, I can't find any examples of what I had in mind for <code>induction</code>, so maybe I'm misremembering / confused. Sorry about that!</p>",
        "id": 251052864,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1630153753
    },
    {
        "content": "<p>Did you mean something like <code>revert, induction</code> as alternative for <code>induction generalizing</code>?</p>",
        "id": 251052954,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1630153821
    },
    {
        "content": "<p>Yeah, that's probably it. I can't think of a case where the former would be preferred though.</p>",
        "id": 251053023,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1630153888
    },
    {
        "content": "<p>When I was playing with mathematical induction in Lean, I ended up using an auxiliary lemma with <code>n : ℕ</code> on the left side because this is what I was able to prove.</p>\n<p><a href=\"https://github.com/madvorak/Lean-first-steps/blob/main/src/Complete_induction.lean\">https://github.com/madvorak/Lean-first-steps/blob/main/src/Complete_induction.lean</a></p>",
        "id": 251053351,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630154208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Argument.20vs.20antecedent/near/251052510\">said</a>:</p>\n<blockquote>\n<p>If those are different at all, it only by alpha equivalence (ie the P argument may have a different name for the second case; but nothing uses that name anyway)</p>\n</blockquote>\n<p>So on the semantic level, are the following three interchangeable?<br>\n1) <code>example (p : P) : Q</code><br>\n2) <code>example : P → Q</code><br>\n3) <code>example : ∀ p : P, Q</code></p>",
        "id": 251053614,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630154483
    },
    {
        "content": "<p>If by semantic you mean 'up to definitional equality', then yes. Any differences exist only in the metatheory (things that only metaprograms can distinguish)</p>",
        "id": 251053982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630154852
    },
    {
        "content": "<p>Yeah. I was just scared of using the word \"equality\" because I am not sure whether I know what the word means.</p>",
        "id": 251054085,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630154969
    },
    {
        "content": "<p>Both the proofs you link to start with <code>intro</code>, which is almost always an indication you have something on the wrong side of a colon</p>",
        "id": 251054087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630154973
    },
    {
        "content": "<p>(exception: a goal of <code>function.injective</code> is proved usually by starting with <code>intros x y hxy</code>, because the binders are part of the definition)</p>",
        "id": 251054165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630155032
    },
    {
        "content": "<p>Do you want me to put this whole term <code>(∀ x : ℕ, (∀ y : ℕ, y &lt; x → (P y)) → (P x))</code> on the left side?</p>",
        "id": 251054169,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630155037
    },
    {
        "content": "<p>Yes!</p>",
        "id": 251054179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630155047
    },
    {
        "content": "<p>This makes me a bit uncomfortable. I think about the statement as an implication and I want to make it explicit I think about that way.</p>",
        "id": 251054231,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630155117
    },
    {
        "content": "<p>Or should I just mechanically write almost everything in the way No.1?</p>",
        "id": 251054293,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630155153
    },
    {
        "content": "<p>You are free to write lean however you think is most readable to you; but the mathlib style is to pick the one that results in the shortest proof (the one that saves an <code>intro</code> line)</p>",
        "id": 251054539,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630155449
    },
    {
        "content": "<p>BTW, is the recommended Lean/mathlib style to write the proof itself in the shortest possible way as well?</p>",
        "id": 251054621,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1630155522
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a> may have some answers for you</p>",
        "id": 251054694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630155604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Argument.20vs.20antecedent/near/251052155\">said</a>:</p>\n<blockquote>\n<p>There are some exceptions when proofs are a bit more compact if you leave some arguments to the right of the colon, particularly when the proof makes use of the equation compiler or <code>induction</code>.</p>\n</blockquote>\n<p>Maybe you're thinking about when you're using a more specialized induction principle, like <code>refine nat.strong_induction_on n (λ n' ih, _)</code></p>",
        "id": 251061562,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630162818
    }
]