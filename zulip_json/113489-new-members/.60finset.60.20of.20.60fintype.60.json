[
    {
        "content": "<p>I have <code>s : set bool</code> and would like to turn it into <code>s : finset bool</code>. (My goal has the form <code>p s</code>.) Also, is there an elegant way to do exhaustive \"cases\" on <code>s : set bool</code>, considering there are only 4 possibility it would be fine (but a way to do it for any <code>fintype</code> would be welcome).</p>",
        "id": 209462767,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599614160
    },
    {
        "content": "<p>I think it's (very nearly) <code>set_fintype</code> in <code>data.fintype.basic</code></p>",
        "id": 209463078,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599614567
    },
    {
        "content": "<p>That only gives you <code>fintype s</code>, though, but then I think you can use <code>set.to_finset</code>.</p>",
        "id": 209463103,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599614604
    },
    {
        "content": "<p>Apparently this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n</code></pre></div>",
        "id": 209463306,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599614862
    },
    {
        "content": "<p>Oh, great! Thank you.</p>",
        "id": 209463522,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599615060
    },
    {
        "content": "<p>With that <code>finset.induction_on</code> is what I want (\"an elegant way to do exhaustive \"cases\" on <code>s : set bool</code>\").</p>",
        "id": 209463553,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599615113
    },
    {
        "content": "<p>It looks like <code>fin_cases s</code> works for <code>s : set bool</code> when there is a <code>decidable_pred s</code> instance.  You can also use <code>fin_cases s</code> for <code>finset</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209463842,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599615454
    },
    {
        "content": "<p>Wow, amazing! I didn't know this tactic, very useful!</p>",
        "id": 209463925,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599615558
    },
    {
        "content": "<p>Is the <code>decidable_pred</code> necessary because one could have a</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">DoesSomeComplexTuringMachineOfLength1000Terminate</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">|</span> <span class=\"n\">DoesSomeComplexTuringMachineOfLength1000Terminate</span> <span class=\"n\">term</span><span class=\"o\">}</span> <span class=\"c1\">-- set bool</span>\n</code></pre></div>\n\n\n<p>but you can't necessarily prove what finset it is specifically?</p>",
        "id": 209464332,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599616128
    },
    {
        "content": "<p>With classical logic one can \"decide\" that. Also, <code>fin_cases</code> apparently uses <code>classical.dec_pred</code> automatically, as I didn't have <code>decidable_pred</code> in the context for the set I specified.</p>",
        "id": 209464871,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599616845
    },
    {
        "content": "<p>Is there a way to make <code>fin_cases</code> <em>not</em> delete the intermediate equality hypothesis it creates (e.i. not rewrite the goal and clear the hypothesis, but give the hypothesis to me)?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"err\">∪</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- No `decidable_pred s` in context.</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- The goal becomes `↑{val := 0, ...} = ↑{val := 0, ...} ∪ ∅`</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"err\">∪</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec_pred</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- I have a hypothesis `h : s = ↑{val := 0, nodup := _}` in the context.</span>\n    <span class=\"c1\">-- `fin_cases` probably created it and clears it, but was stopped because</span>\n    <span class=\"c1\">-- `inst` depends on it.</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209465088,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599617166
    },
    {
        "content": "<p>I think no. You can read the implementation of <code>fin_cases</code> and just do it yourself, I guess.</p>",
        "id": 209465515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599617864
    },
    {
        "content": "<p>I think rather <code>fin_cases</code> tried to <code>subst</code> the intermediate equality hypothesis but failed because <code>inst</code> is a frozen instance--if you change <code>haveI</code> to <code>have</code> then you end up with the first behavior again.</p>",
        "id": 209493882,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599647243
    },
    {
        "content": "<p>In any case, isn't your second example an answer to your question? Or do you want a more robust way to do it?</p>",
        "id": 209493900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599647265
    },
    {
        "content": "<p>One approach (many variants are possible) is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"err\">∪</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- s : set bool,</span>\n    <span class=\"c1\">-- ht : ↑{val := 0, nodup := _} = s</span>\n    <span class=\"c1\">-- ⊢ s = s ∪ ∅</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209494365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599647636
    }
]