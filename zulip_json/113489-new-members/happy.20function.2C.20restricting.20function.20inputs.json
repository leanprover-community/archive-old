[
    {
        "content": "<p>Hello! I'm trying to define a function that takes 3 natural numbers so that p &gt; 0 and b &gt; 1.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">happyfunction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">digits</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</code></pre></div>\n\n\n<p>Would it be better to have <code>(p : ℕ+)</code> like I have right now or have <code>{p : ℕ} (hp : p &gt; 0)</code>? Currently, I have to add</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">n</span> <span class=\"n\">p</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">pow</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>This is my first time using instance and I was also trying to restrict b using a set <code>def B := set.Ioi (1 : ℕ)</code> then <code>(b : B)</code> but it gave me the following errors when I tried <code>#eval happyfunction 2 10 8</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">111</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_one</span> <span class=\"err\">↥</span><span class=\"n\">B</span>\n\n<span class=\"mi\">111</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_add</span> <span class=\"err\">↥</span><span class=\"n\">B</span>\n</code></pre></div>\n\n\n<p>I'm not sure how to solve this since B does not include one. Would it be better to just have <code>(hb : b &gt; 1)</code>?<br>\nI would like to just be able to pass numbers in since I will mostly be working with p=2 and b=2,4,6,10, so if I have the hypotheses instead of using the sets, would Lean know automatically that 10 &gt; 1 by norm_num?</p>\n<p>Also, slightly random, but what is the difference between <code>(b : B)</code> and <code>(b ∈ B)</code>? And what does <code>↥</code> mean?<br>\nAnyways, thank you so much and I hope this was not too many questions.</p>",
        "id": 202106890,
        "sender_full_name": "Angela Li",
        "timestamp": 1593186158
    },
    {
        "content": "<p>There's not much of an API for N+, it might be easier using N</p>",
        "id": 202106954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593186197
    },
    {
        "content": "<p>The problem you're running into is that if Lean sees <code>10 : B</code> then it tries to figure out a map from the naturals to B and then evaluates it at 10, and we're failing at the first hurdle here.</p>",
        "id": 202107159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593186320
    },
    {
        "content": "<p>A term of type B is a pair consisting of a natural, and a proof that the natural is in the required range, so you will have to give that to Lean directly to avoid this problem</p>",
        "id": 202107216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593186351
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ioi</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 202107529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593186501
    },
    {
        "content": "<p><code>set nat</code> is a type. <code>B : set nat</code> is a term. So <code>b : B</code> doesn't make sense. But Lean figures that if you want to talk about <code>b : B</code> i.e. if you want to make B into a type, you probably mean the subtype corresponding to B, and that little funny arrow indicates the transformation of B from a set to a subtype.</p>",
        "id": 202107702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593186598
    },
    {
        "content": "<p>The idiomatic way to do all this in type theory is just to define stuff anyway, not worry about edge cases like b=1, and make a mental note that if you attempt to evaluate your function at a junk input, expect a junk output.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">digits</span>\n\n<span class=\"n\">def</span> <span class=\"n\">happyfunction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">digits</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</code></pre></div>",
        "id": 202107928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593186709
    },
    {
        "content": "<p>things like digits will just give junk answers for small b, but you promise not to evaluate this function at small b, right?</p>",
        "id": 202108019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593186741
    },
    {
        "content": "<p>Lean will happily accept 1/0, and for all I know it gives the answer 37, but I'm a mathematician so I never divide by 0.</p>",
        "id": 202108075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593186768
    },
    {
        "content": "<p>Ohh okay that makes more sense. Thank you so much! Yes I'm only going to evaluate for b &gt; 1</p>",
        "id": 202108082,
        "sender_full_name": "Angela Li",
        "timestamp": 1593186774
    },
    {
        "content": "<p>Also, would it be worth expanding the N+ API? I'm not too sure what I'm doing right now since I don't have that much math background haha.</p>",
        "id": 202108139,
        "sender_full_name": "Angela Li",
        "timestamp": 1593186794
    },
    {
        "content": "<p>You're the second person to ask this recently. The argument against is that if 0 can just tag along and give junk values most of the time, then maybe that's fine. The API for nat is huuge.</p>",
        "id": 202108214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593186840
    }
]