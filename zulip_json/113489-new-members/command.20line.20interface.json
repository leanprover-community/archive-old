[
    {
        "content": "<p>My vscode lean environment constantly run out of memory.   I'm wondering if there is a command line interface?<br>\nHere is the my lean file.  What command should I use to output the <code>#check</code> result?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">pi</span>\n</pre></div>",
        "id": 192006856,
        "sender_full_name": "Jiekai",
        "timestamp": 1585310075
    },
    {
        "content": "<p>Trying to go through &lt;<a href=\"https://github.com/kbuzzard/xena/blob/master/lean_together/5_minutes_on_type_theory/2_more_type_examples.lean\" title=\"https://github.com/kbuzzard/xena/blob/master/lean_together/5_minutes_on_type_theory/2_more_type_examples.lean\">https://github.com/kbuzzard/xena/blob/master/lean_together/5_minutes_on_type_theory/2_more_type_examples.lean</a>&gt;</p>",
        "id": 192006896,
        "sender_full_name": "Jiekai",
        "timestamp": 1585310107
    },
    {
        "content": "<p>Oh my goodness how do people find these random things</p>",
        "id": 192009771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585312221
    },
    {
        "content": "<p>Why don't you just fix your VS Code lean environment?</p>",
        "id": 192009843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585312271
    },
    {
        "content": "<p>There are commend line options to limit the amount of memory lean uses</p>",
        "id": 192009844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585312271
    },
    {
        "content": "<p>And you can tell VS Code to use these options when it invokes Lean</p>",
        "id": 192009872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585312295
    },
    {
        "content": "<p>if you publish anything on the web, someone's gonna find it ;)</p>",
        "id": 192009987,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585312347
    },
    {
        "content": "<p>That stuff you stumbled upon is some ideas for scripts for five minute lean videos</p>",
        "id": 192010003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585312362
    },
    {
        "content": "<p>I have more not online</p>",
        "id": 192010013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585312372
    },
    {
        "content": "<p><a href=\"https://av-media.vu.nl/mediasite/Play/27894c3a8a4d4768a0421f62e5345a6c1d\" title=\"https://av-media.vu.nl/mediasite/Play/27894c3a8a4d4768a0421f62e5345a6c1d\">https://av-media.vu.nl/mediasite/Play/27894c3a8a4d4768a0421f62e5345a6c1d</a></p>\n<p>I'm watching the video <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 192010035,
        "sender_full_name": "Jiekai",
        "timestamp": 1585312392
    },
    {
        "content": "<p>Maybe it's time some of those videos got made. The big issue I had with making them is that I want wacky graphics and don't know how to make them</p>",
        "id": 192010067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585312420
    },
    {
        "content": "<p>I mean I want something which could easily be knocked up in 5 minutes by someone who knows how to use PowerPoint</p>",
        "id": 192010167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585312484
    },
    {
        "content": "<p>Looking into the vscode lean server situation, there seems to be some sort of memory leak.  The memory lean process uses increases at 100MiB / sec.<br>\nThe process command:<br>\n<code>/home/zjk/.elan/toolchains/leanprover-community-lean-3.5.1/bin/lean --server -M 4096 -T 100000 */home/zjk/github/M4P33*</code></p>",
        "id": 192099726,
        "sender_full_name": "Jiekai",
        "timestamp": 1585360802
    },
    {
        "content": "<p>Can you provide us a reproducible case to run it on?</p>",
        "id": 192102417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585365063
    },
    {
        "content": "<p>I think all I did is typing this line then after several seconds commenting it out.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- import analysis.complex.basic</span>\n</pre></div>",
        "id": 192112708,
        "sender_full_name": "Jiekai",
        "timestamp": 1585384652
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>_target/deps/mathlib$ git status\nHEAD detached at 8700aa7d\nnothing to commit, working tree clean\n</pre></div>\n\n\n<p>Not sure if this is relevant.</p>",
        "id": 192112797,
        "sender_full_name": "Jiekai",
        "timestamp": 1585384743
    },
    {
        "content": "<p>Seems quite reproducible.  I change this &lt;<a href=\"https://github.com/leanprover/lean-client-js/blob/master/lean-client-js-node/demo.ts\" title=\"https://github.com/leanprover/lean-client-js/blob/master/lean-client-js-node/demo.ts\">https://github.com/leanprover/lean-client-js/blob/master/lean-client-js-node/demo.ts</a>&gt; to </p>\n<div class=\"codehilite\"><pre><span></span>diff --git a/lean-client-js-node/demo.ts b/lean-client-js-node/demo.ts\nindex 895d0da..1b0071c 100644\n--- a/lean-client-js-node/demo.ts\n+++ b/lean-client-js-node/demo.ts\n@@ -1,6 +1,8 @@\n import * as lean from &#39;./src&#39;;\n\n-const transport = new lean.ProcessTransport(&#39;lean&#39;, &#39;.&#39;, []);\n+const transport = new lean.ProcessTransport(\n+  &#39;/home/zjk/.elan/toolchains/leanprover-community-lean-3.5.1/bin/lean&#39;,\n+  &#39;/home/zjk/github/M4P33&#39;, [&#39;-M 4096&#39;, &#39;-T 100000&#39;]);\n const server = new lean.Server(transport);\n server.error.on((err) =&gt; console.log(&#39;error:&#39;, err));\n server.allMessages.on((allMessages) =&gt; console.log(&#39;messages&#39;, allMessages.msgs));\n@@ -8,16 +10,10 @@ server.tasks.on((currentTasks) =&gt; console.log(&#39;tasks:&#39;, currentTasks.tasks));\n\n server.connect();\n\n-const testfile = &#39;&#39;\n-    + &#39;variables p q r s : Prop\\n&#39;\n-    + &#39;theorem my_and_comm : p /\\\\ q &lt;-&gt; q /\\\\ p :=\\n&#39;\n-    + &#39;iff.intro\\n&#39;\n-    + &#39;  (assume Hpq : p /\\\\ q,\\n&#39;\n-    + &#39;    and.intro (and.elim_right Hpq) (and.elim_left Hpq))\\n&#39;\n-    + &#39;  (assume Hqp : q /\\\\ p,\\n&#39;\n-    + &#39;    and.intro (and.elim_right Hqp) {!!})\\n&#39;\n-    + &#39;#check @nat.rec_on\\n&#39;\n-    + &#39;#print &quot;end of file!&quot;\\n&#39;;\n+const testfile = `\n+import analysis.complex.basic\n+\n+`;\n\n async function demo(): Promise&lt;any&gt; {\n     await server.sync(&#39;test.lean&#39;, testfile);\n@@ -34,14 +30,14 @@ async function demo(): Promise&lt;any&gt; {\n     }\n\n     const info = await server.info(&#39;test.lean&#39;, 3, 0);\n-    console.log(`got info: ${JSON.stringify(info)}`);\n+    // console.log(`got info: ${JSON.stringify(info)}`);\n }\n\n async function main(): Promise&lt;any&gt; {\n     await demo();\n-    server.restart();\n-    await demo();\n-    process.exit(0);\n+    // server.restart();\n+    // await demo();\n+    // process.exit(0);\n }\n\n main().catch((err) =&gt; console.log(&#39;error:&#39;, err));\n</pre></div>\n\n\n<p>Then I have until the process is killed</p>\n<div class=\"codehilite\"><pre><span></span>  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1454 zjk       20   0 10.706g 9.749g   9368 S 507.3 62.9  20:52.73 lean\n21454 zjk       20   0 11.190g 1.571g  35832 S   1.3 10.1  25:29.84 java\n</pre></div>",
        "id": 192113419,
        "sender_full_name": "Jiekai",
        "timestamp": 1585385961
    },
    {
        "content": "<p>Can you make sure <code>leanpkg build</code> returns in &lt;30 secs, and post your <code>leanpkg.toml</code> file and the output of <code>ls</code> in your project directory?</p>",
        "id": 192116414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585391026
    },
    {
        "content": "<p><code>leanpkg build</code> never returns correctly and uses all memory eventually.</p>",
        "id": 192116753,
        "sender_full_name": "Jiekai",
        "timestamp": 1585391544
    },
    {
        "content": "<p>My project directory is a cloned <code>https://github.com/ImperialCollegeLondon/M4P33</code>.</p>",
        "id": 192116762,
        "sender_full_name": "Jiekai",
        "timestamp": 1585391582
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[package]\nname = &quot;M4P33&quot;\nversion = &quot;0.1&quot;\nlean_version = &quot;leanprover-community/lean:3.5.1&quot;\npath = &quot;src&quot;\n\n[dependencies]\nmathlib = {git = &quot;https://github.com/leanprover-community/mathlib&quot;, rev = &quot;8700aa7d78b10b65cf8db1d9e320872ae313517a&quot;}\n</pre></div>",
        "id": 192116766,
        "sender_full_name": "Jiekai",
        "timestamp": 1585391597
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ ls -l\ntotal 44\ndrwxr-xr-x 2 zjk zjk  4096 3月  26 10:43 doc\n-rw-r--r-- 1 zjk zjk    54 3月  28 18:40 leanpkg.path\n-rw-r--r-- 1 zjk zjk   237 3月  28 10:33 leanpkg.toml\n-rw-r--r-- 1 zjk zjk 11357 3月  26 10:43 LICENSE\ndrwxr-xr-x 3 zjk zjk  4096 3月  26 10:43 problem_sheets\n-rw-r--r-- 1 zjk zjk  1816 3月  26 10:43 README.md\ndrwxr-xr-x 6 zjk zjk  4096 3月  28 18:40 src\ndrwxr-xr-x 3 zjk zjk  4096 3月  27 17:04 _target\n-rw-r--r-- 1 zjk zjk   266 3月  26 10:43 TODO.txt\n</pre></div>",
        "id": 192117260,
        "sender_full_name": "Jiekai",
        "timestamp": 1585392440
    },
    {
        "content": "<p>Oh. <code>leanpkg build</code> finished.  Seems that in the previous run I just give up when memory usage hit 4Gib and killed <code>leanpkg build</code>.</p>",
        "id": 192117472,
        "sender_full_name": "Jiekai",
        "timestamp": 1585392802
    },
    {
        "content": "<p>Now it all seems working.  Thank you!  So <code>leanpkg build</code> is crucial.</p>",
        "id": 192117514,
        "sender_full_name": "Jiekai",
        "timestamp": 1585392852
    },
    {
        "content": "<p>Nobody should be using leanpkg any more</p>",
        "id": 192117542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585392950
    },
    {
        "content": "<p>If you install the project with <code>leanproject</code> do you get the same problems? This should download a compiled mathlib</p>",
        "id": 192117590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585393013
    },
    {
        "content": "<p>Anywhere I can learn about difference between<code>leanpkg</code> and <code>leanproject</code>?</p>",
        "id": 192117591,
        "sender_full_name": "Jiekai",
        "timestamp": 1585393015
    },
    {
        "content": "<p>Leanproject handles projects which aren't on 3.4.2 like the M4P33 one</p>",
        "id": 192117600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585393064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> this project is not so old, it actually has available mathlib olean (although they are still on GitHub, so API limiting rate may strike). Could you change the README to tell people to <code>leanproject get ImperialCollegeLondon/M4P33</code>?</p>",
        "id": 192119084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585395701
    },
    {
        "content": "<p>Oh sure! I hadn't realised it was my fault</p>",
        "id": 192119952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585397147
    },
    {
        "content": "<p>I should do this for all my repos</p>",
        "id": 192119956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585397158
    },
    {
        "content": "<p>By the way, I'm working on the weird message about not being in a Git repository. I totally understand where it comes from. The problem is that fetching oleans from GitHub instead of Azure is half deprecated, still supported by mathlibtools but not well tested.</p>",
        "id": 192120143,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585397422
    }
]