[
    {
        "content": "<p>I'm trying to prove the fact that the infimum of a real interval <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> (a, b) </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span>, with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\"> a &lt; b </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>, is the left endpoint <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\"> a </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>.</p>\n<p>There are what seem to be the key pieces of this lying around -- but when I try to combine them, I get a puzzling type error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Inf_Ioo_R</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_glb_Ioo</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Inf_eq</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch at application\n  (is_glb_Ioo hab).Inf_eq\nterm\n  is_glb_Ioo hab\nhas type\n  is_glb (Ioo a b) a\nbut is expected to have type\n  is_glb ?m_3 ?m_4\n</code></pre></div>",
        "id": 234449630,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383097
    },
    {
        "content": "<p>I've learned that when I get an error that seems not to make sense in that particular way -- i.e. it seems like the actual and expected type perfectly well do match -- it's usually helpful to set <code>pp.implicit true</code>, or even <code>pp.all true</code>.</p>\n<p>But in this case that's leaving me still puzzled:</p>",
        "id": 234449807,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383190
    },
    {
        "content": "<p>That kind of error usually means the theorem requires a typeclass that the target doesn't support. In this case I would guess that real is not a complete lattice</p>",
        "id": 234449937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618383269
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Inf_Ioo_R'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_glb_Ioo</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Inf_eq</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch at application\n  (@is_glb_Ioo ℝ real.linear_order (@linear_ordered_field.to_densely_ordered ℝ real.linear_ordered_field) a b\n     hab).Inf_eq\nterm\n  @is_glb_Ioo ℝ real.linear_order (@linear_ordered_field.to_densely_ordered ℝ real.linear_ordered_field) a b hab\nhas type\n  @is_glb ℝ\n    (@partial_order.to_preorder ℝ\n       (@semilattice_inf.to_partial_order ℝ\n          (@lattice.to_semilattice_inf ℝ (@lattice_of_linear_order ℝ real.linear_order))))\n    (@Ioo ℝ\n       (@partial_order.to_preorder ℝ\n          (@semilattice_inf.to_partial_order ℝ\n             (@lattice.to_semilattice_inf ℝ (@lattice_of_linear_order ℝ real.linear_order))))\n       a\n       b)\n    a\nbut is expected to have type\n  @is_glb ?m_1 (@partial_order.to_preorder ?m_1 (@complete_semilattice_Inf.to_partial_order ?m_1 ?m_2)) ?m_3 ?m_4\n</code></pre></div>",
        "id": 234449949,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383278
    },
    {
        "content": "<p>Mmm, that seems very plausible</p>",
        "id": 234449962,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383299
    },
    {
        "content": "<p>yep, real is not a <code>complete_semilattice_Inf</code></p>",
        "id": 234449975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618383310
    },
    {
        "content": "<p>You should try to find a variation on the theorem that works for conditionally complete lattices</p>",
        "id": 234450031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618383356
    },
    {
        "content": "<p>Huh, I see</p>",
        "id": 234450132,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383397
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 234450169,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383426
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_glb_Ioo\">docs#is_glb_Ioo</a> for reference</p>",
        "id": 234450611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618383638
    },
    {
        "content": "<p>Yup, here's a working version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Inf_Ioo_R</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_glb_Ioo</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cInf_eq</span> <span class=\"o\">(</span><span class=\"n\">nonempty_Ioo.mpr</span> <span class=\"n\">hab</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234450683,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Inf.20of.20Ioo.20in.20.E2.84.9D/near/234450611\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_glb_Ioo\">docs#is_glb_Ioo</a> for reference</p>\n</blockquote>\n<p>This is one of the theorems I was using, right? Or was that your point <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 234450768,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383694
    },
    {
        "content": "<p>That was my point - but I can't see why that lemma wouldn't apply</p>",
        "id": 234450835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618383726
    },
    {
        "content": "<p>That part was working fine, I think, but then it was the <code>Inf_eq</code> that was failing, because it wanted a complete lattice</p>",
        "id": 234450888,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383771
    },
    {
        "content": "<p>Which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\"> \\mathbb R </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> isn't, but it is a \"conditionally complete lattice\" which is a term I'd never heard before but perfectly captures the relevant familiar property of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\"> \\mathbb R </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span></p>",
        "id": 234450964,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383809
    },
    {
        "content": "<p>So <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_glb.cInf_eq\">docs#is_glb.cInf_eq</a> is the right version of that lemma</p>",
        "id": 234451001,
        "sender_full_name": "Greg Price",
        "timestamp": 1618383839
    },
    {
        "content": "<p>And ftr here's the version of this little lemma in (what I believe is) the appropriate generality -- nothing changes except replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\"> \\mathbb R </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> with some typeclasses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">densely_ordered</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Inf_Ioo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_glb_Ioo</span> <span class=\"n\">hab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cInf_eq</span> <span class=\"o\">(</span><span class=\"n\">nonempty_Ioo.mpr</span> <span class=\"n\">hab</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234451294,
        "sender_full_name": "Greg Price",
        "timestamp": 1618384031
    },
    {
        "content": "<p>It almost feels like one doesn't need the conditionally complete assumption, if one has <code>densely_ordered</code>. Is the issue that without conditionally complete there is no _definition_ of Inf?</p>",
        "id": 234458484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618387719
    },
    {
        "content": "<p>Exactly</p>",
        "id": 234459566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618388293
    },
    {
        "content": "<p>Could you make a PR for this? I found myself needing Inf_Ioi over the reals yesterday too</p>",
        "id": 234496488,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618406265
    }
]