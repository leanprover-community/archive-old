[
    {
        "content": "<p>Hi. My Lean keeps giving me a SIGSEGV error every 5 minutes or so while I'm working on it, are there any general fixes for this?</p>",
        "id": 202672058,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593686328
    },
    {
        "content": "<p>Are you putting .s at the end of your file? That can cause this</p>",
        "id": 202672080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593686355
    },
    {
        "content": "<p>?</p>",
        "id": 202672093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686368
    },
    {
        "content": "<p>.s? I have no .s's anywhere from what I can tell</p>",
        "id": 202672185,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593686409
    },
    {
        "content": "<p>The thing you were last typing is often important to debugging this kind of thing</p>",
        "id": 202672206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686436
    },
    {
        "content": "<p>I meant <code>.</code>, but there was a new segfault introduced recently and possibly also removed recently</p>",
        "id": 202672213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593686450
    },
    {
        "content": "<p>Does it trigger again immediately on restart?</p>",
        "id": 202672228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686462
    },
    {
        "content": "<p>If you can reliably reproduce the segfault we'd be interested to see it</p>",
        "id": 202672236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593686467
    },
    {
        "content": "<p>ok, here's what I've been typing: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">G1mul_left_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">G1one</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- ring,</span>\n    <span class=\"c1\">-- rw mul_assoc,</span>\n    <span class=\"c1\">-- it seems like doing norm_num does some infinite loop!</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inj&#39;</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel</span><span class=\"o\">],</span>\n\n    <span class=\"n\">sorry</span>\n    <span class=\"c1\">--unfold has_inv.inv,</span>\n    <span class=\"c1\">--simp,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202672249,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593686483
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please</p>",
        "id": 202672277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686518
    },
    {
        "content": "<p>ok, one sec I'll try to reproduce the segfault, and fix my code block</p>",
        "id": 202672328,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593686532
    },
    {
        "content": "<p>in particular we need all the imports and opens</p>",
        "id": 202672329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686533
    },
    {
        "content": "<p>use triple backtick</p>",
        "id": 202672335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686541
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 202672340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686546
    },
    {
        "content": "<p>sweet <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a><br>\nthe whole file? <br>\nmy imports are:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 202672397,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593686602
    },
    {
        "content": "<p>enough to make the lemma in question have the errors you expect</p>",
        "id": 202672427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686622
    },
    {
        "content": "<p>what you gave isn't enough because I don't know what <code>G1</code> and <code>G1one</code> are</p>",
        "id": 202672515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686666
    },
    {
        "content": "<p>oh that's the whole file since I told simp many things, I'll just upload the whole .lean</p>",
        "id": 202672558,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593686703
    },
    {
        "content": "<p>feel free to paste the entire code block here, zulip will hide it appropriately</p>",
        "id": 202672608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686747
    },
    {
        "content": "<p>oh nice, that's better </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">G2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">G1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">ℚ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">G2</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">pos_of_one_div_pos</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">mul_pos</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">four_pos</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n\n\n\n<span class=\"c1\">-- so we want G1 -- a type -- to make a group</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"c1\">--&gt; a.property stores 0 &lt; a.val</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Def of mul --/</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">G1mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">mul_pos</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">)</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">G1mul</span> <span class=\"bp\">⟩</span> <span class=\"c1\">-- now we have *</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Def of One --/</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">G1one</span>  <span class=\"o\">:</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">two_pos</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">G1one</span> <span class=\"bp\">⟩</span>\n\n<span class=\"c1\">-- clearly follow other axioms since from field</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Def and Lemmas for Inverse --/</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1_val_pos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⁻¹</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">G1_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">),</span> <span class=\"n\">mul_pos</span> <span class=\"n\">four_pos</span> <span class=\"o\">(</span><span class=\"n\">G1_val_pos</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">G1_inv</span> <span class=\"bp\">⟩</span>\n\n\n\n\n\n\n\n<span class=\"c1\">-- what does extensionality mean in this context?</span>\n<span class=\"c\">/-</span><span class=\"cm\">- ##Extensionality and Simplification Lemmas  --/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hVal</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- I see that simp is doing something, but what exactly is it doing?</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_val</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span><span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">G1one_div_two</span> <span class=\"o\">:</span> <span class=\"n\">G1one</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">G1one_mul_half</span> <span class=\"o\">:</span> <span class=\"n\">G1one</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">G1one_mul_two_inv</span> <span class=\"o\">:</span> <span class=\"n\">G1one</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">G1_val_mul_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">div_left_inj&#39;</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"c1\">-- DK : I don&#39;t know how it magically changed everything to a.val but I&#39;m not complaining</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">and_not_self</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"c1\">-- DK : Is there an easier way to use h2?</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">div_self</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">,</span> <span class=\"c1\">-- DK : I&#39;m repeating things from before, is this good practice?</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">and_not_self</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"c1\">-- DK : I did it!!</span>\n<span class=\"kn\">end</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Group Axioms --/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">G1mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G1one</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">--simp, ring, -- DK : I added G1one to simp, made it better</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1mul_one</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">G1one</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- DK : Below was &#39;G1mul_left_inv&#39; which I thought was a typo given the goal</span>\n<span class=\"c1\">-- DK : so I changed it to right, also further amending the Poof.</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">G1mul_left_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">G1one</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- ring,</span>\n    <span class=\"c1\">-- rw mul_assoc,</span>\n    <span class=\"c1\">-- it seems like doing norm_num does some infinite loop!</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inj&#39;</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- DK : I am using my approach from the previous question, not sure if it&#39;s ok</span>\n    <span class=\"c1\">-- DK : since it&#39;s quite different to your structure</span>\n    <span class=\"n\">exact</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel</span><span class=\"o\">],</span>\n\n    <span class=\"n\">sorry</span>\n    <span class=\"c1\">--unfold has_inv.inv,</span>\n    <span class=\"c1\">--simp,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Poof G1 is a group  --/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- mul</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- mul_assoc</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- one</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">G1one</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- one_mul</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">G1one_mul</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- mul_one</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul_one</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- inv</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">G1_inv</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- mul_left_inv</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul_left_inv</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202672672,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593686771
    },
    {
        "content": "<p>well at least it didn't segfault for me</p>",
        "id": 202672699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686796
    },
    {
        "content": "<p>yeah, when I do nothing it's fine, but when I try to fix the (lemma G1mul_left_inv) at the end it does it eventually</p>\n<p>i'll try to reproduce it and send over what I've done</p>",
        "id": 202672715,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593686826
    },
    {
        "content": "<p>hm, the <code>norm_num</code> loop seems to be an issue with <code>simp</code> normal form battling <code>norm_num</code> normal form</p>",
        "id": 202672818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686925
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 202672868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686988
    },
    {
        "content": "<p>Ok, that explains one of the infinite loops I was having!</p>",
        "id": 202672983,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593687070
    },
    {
        "content": "<p>I think I'll just do my thing and if it segfaults again just mimic what I've done to get the server to stop. Thanks for now <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 202673500,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593687481
    },
    {
        "content": "<p>I took the liberty of cleaning up the proofs a bit. Hope this helps:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n\n<span class=\"c1\">-- One way to define a subtype (G1) out of a type (ℚ)</span>\n<span class=\"n\">def</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"c1\">-- This instead is a &quot;set&quot;</span>\n<span class=\"n\">def</span> <span class=\"n\">G2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1</span><span class=\"bp\">.</span><span class=\"n\">nz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">G1mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">mul_pos</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">)</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">G1mul</span> <span class=\"bp\">⟩</span> <span class=\"c1\">-- now we have *</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">G1_mul_val</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Def of One --/</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">G1one</span> <span class=\"o\">:</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">two_pos</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">G1one</span> <span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">G1_one_val</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- clearly follow other axioms since from field</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Def and Lemmas for Inverse --/</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1_val_pos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">G1_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">),</span> <span class=\"n\">mul_pos</span> <span class=\"n\">four_pos</span> <span class=\"o\">(</span><span class=\"n\">G1_val_pos</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">G1_inv</span> <span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">G1_inv_val</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n\n<span class=\"c1\">-- what does extensionality mean in this context?</span>\n<span class=\"c\">/-</span><span class=\"cm\">- ##Extensionality and Simplification Lemmas  --/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hVal</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_val</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span><span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">G1_val_mul_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">nz</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Group Axioms --/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">G1mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1mul_one</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- example (a : ℚ) : 1 / 2 * a = a := by norm_num</span>\n\n<span class=\"c1\">-- DK : Below was &#39;G1mul_left_inv&#39; which I thought was a typo given the goal</span>\n<span class=\"c1\">-- DK : so I changed it to right, also further amending the Poof.</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">G1mul_left_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">nz</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Poof G1 is a group  --/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- mul</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- mul_assoc</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- one</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">G1one</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- one_mul</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">G1one_mul</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- mul_one</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul_one</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- inv</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">G1_inv</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- mul_left_inv</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul_left_inv</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202673602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593687551
    },
    {
        "content": "<p>Oh that is much better than what I have</p>\n<p>So does the lemma_name.ext let you use the .ext as a method onto some object?</p>\n<p>maybe .ext is a bad name for it, extension</p>",
        "id": 202674268,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593688064
    },
    {
        "content": "<p><code>ext</code> in this context means roughly speaking that <code>X</code> and <code>Y</code> are equal if all their \"components\" are equal.</p>",
        "id": 202674405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593688178
    },
    {
        "content": "<p>yes, if you give theorems names like <code>G1.foo</code> then you can write <code>a.foo</code> instead of <code>G1.foo a</code> if one of the arguments to the theorem has type <code>G1</code></p>",
        "id": 202674406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593688179
    },
    {
        "content": "<p>And sometimes, you can get away with less than all components, because for example some of the components are proofs</p>",
        "id": 202674469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593688206
    }
]