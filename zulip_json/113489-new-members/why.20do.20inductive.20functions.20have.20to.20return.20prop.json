[
    {
        "content": "<p>they can't return anything else, can they? i guess inductive functions are used to define deduction rules for a particular system, e.g. the MIU system (<code>derivable</code> predicate) or the <code>data.list.perm</code> predicate</p>",
        "id": 240690957,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622276448
    },
    {
        "content": "<p>You can give inductive definitions into any sort. So, <code>Prop</code>, <code>Type 0</code>, <code>Type 1</code> and so on. There is nothing restricting them to <code>Prop</code>.<br>\nFor example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat\">docs#nat</a>, the definition of natural numbers lives in <code>Type</code>.</p>",
        "id": 240691227,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622276886
    },
    {
        "content": "<p>I wouldn't say that you \"inductively define functions\" but rather that you \"inductively define types\". Propositions are a particular example of types so the <code>Prop</code> case falls into this. In some cases people refer to inductively defined propositions as \"inductive predicates\" but it's really the same notion.</p>",
        "id": 240691282,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622277003
    },
    {
        "content": "<p>What is MIU?</p>",
        "id": 240691296,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622277012
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/master/archive/miu_language\">https://github.com/leanprover-community/mathlib/tree/master/archive/miu_language</a></p>",
        "id": 240691304,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622277030
    },
    {
        "content": "<p><code>structure</code>s and <code>class</code>es are essentially inductive functions with syntax sugar</p>",
        "id": 240691312,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622277038
    },
    {
        "content": "<p>MIU is the formal system used in Gödel Escher Bach <span class=\"user-mention\" data-user-id=\"329243\">@Horatiu Cheval</span></p>",
        "id": 240691320,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622277052
    },
    {
        "content": "<p>And it's indeed a good way of thinking them as rules of deduction, or as rules of constructions. <code>inductive</code> basically says \"everything that can be constructed, or derived if you prefer, from these rules and these rules only\"</p>",
        "id": 240691425,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622277164
    },
    {
        "content": "<p>\"inductive functions\" isn't the normal terminology for the <code>inductive</code> keyword in lean, is it?</p>",
        "id": 240691735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622277628
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 240691952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622278033
    },
    {
        "content": "<p>Right, it's \"inductive type\" and the like, predicate, family etc. Inductive function would be misleading in my opinion since functions are not something inductive.</p>",
        "id": 240692175,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622278426
    }
]