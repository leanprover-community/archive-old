[
    {
        "content": "<p>I've come across an embarrassingly simple problem:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">eq_one_of_dvd_one</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_one</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Due to the local context in my proof, lean wanted me to show the first version (in integers as opposed to natural numbers) and the number of theorems available is substantially smaller. Is there a way to cast the statement down to naturals (even though it's technically a weaker statement, so I might have to prove that 2 and 1 are indeed \\ge 0).</p>\n<p>And secondly, how do I convince lean that something is impossible, i.e. how do I apply refl in a negative position? Looks like adding it as an assumption and then definition by cases eliminated it.</p>\n<p>Also, <code>library_search</code> came up with the idea to call decidable prop on the proposition and use that instead: <code>exact of_to_bool_ff rfl</code></p>\n<p>Is introducing followed by cases the right way to discharge a non-equality proof?</p>",
        "id": 198798442,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590515964
    },
    {
        "content": "<p><code>norm_num</code>?</p>",
        "id": 198798470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590515982
    },
    {
        "content": "<p><code>exact dec_trivial</code>?</p>",
        "id": 198798477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590515990
    },
    {
        "content": "<p><code>norm_num</code> didn't do the trick, because it left everything in integer domain.</p>",
        "id": 198798579,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590516029
    },
    {
        "content": "<p>Do I need an import for this? Lean is complaining about <code>has_dvd int</code></p>",
        "id": 198798723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590516104
    },
    {
        "content": "<p><code>norm_num</code> should close both of those goals.</p>",
        "id": 198798733,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590516110
    },
    {
        "content": "<p>right</p>",
        "id": 198798748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590516116
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>works fine</p>",
        "id": 198798827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590516157
    },
    {
        "content": "<p>ah, I didn't know about <code>modeq</code>.</p>",
        "id": 198798971,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590516234
    },
    {
        "content": "<p>If the question is how to reduce the first to the second (and not use norm_num, which really is the recommended way) you can do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">∣</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_one</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198799055,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590516266
    },
    {
        "content": "<p>cool, thanks.</p>",
        "id": 198799169,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590516334
    }
]