[
    {
        "content": "<p><code>\nh3: ∀ a b:M, (a ≠ b ↔ ¬ (a = b)) := \n      begin\n        ifinish,\n      end   \n</code><br>\nThis fails, specifically \"solve1 tactic failed, focused goal has not been solved\".<br>\nI got here because something that should rewrite a certain equality did not rewrite when I had \\neq  instead of = .<br>\nSo apparently \\neq is not just an abbreviation for not equal ??</p>",
        "id": 209184638,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599322021
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 209184718,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599322134
    },
    {
        "content": "<p>\\ne is just an abbreviation for not equals, but some tactics cannot see through abbreviations</p>",
        "id": 209184728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599322155
    },
    {
        "content": "<p>What you've posted isn't a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and it's missing something relevant, because this works fine:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">finish</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ifinish</span>\n</code></pre></div>",
        "id": 209184867,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599322368
    },
    {
        "content": "<p>Yes,  something trivial was wrong with the posted syntax,  and I guess Kenny Lau's answer explains the original problem.<br>\nSo the moral is,  I should just use neg (a=b)  and never use a \\neq b.</p>",
        "id": 209184934,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599322465
    },
    {
        "content": "<p>But also note that <code>ifinish</code> and <code>i</code>friends aren't advertised for a reason.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">finish</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ifinish</span>\n</code></pre></div>",
        "id": 209184944,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599322490
    },
    {
        "content": "<p>Ouch!   I've been using ifinish  under the assumption that it is intuitionistic.   That's what it says in the file where it's defined.</p>",
        "id": 209185030,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599322605
    },
    {
        "content": "<p>Someone told me once about a command to see what axioms have been used in a file.  What was that again?  <br>\nI've used  ifinish   many times to polish off the last few steps.  Now my whole development might not be intuitionistically correct??</p>",
        "id": 209185101,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599322717
    },
    {
        "content": "<p>See the top of that file.</p>\n<div class=\"codehilite\"><pre><span></span><code>The variants <span class=\"sb\">`ifinish`</span>, <span class=\"sb\">`iclarify`</span>, and <span class=\"sb\">`isafe`</span> try to restrict to intuitionistic logic. But the\n<span class=\"sb\">`done`</span> tactic leaks classical logic:\n\n<span class=\"s\">```lean</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">using_smt</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">smt_tactic</span><span class=\"bp\">.</span><span class=\"n\">close</span><span class=\"o\">)</span>\n<span class=\"s\">```</span>\n\nThey also do not work well with the current heuristic instantiation method used by <span class=\"sb\">`ematch`</span>.\nSo they are left here mainly for reference.\n</code></pre></div>",
        "id": 209185104,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599322727
    },
    {
        "content": "<p><code>#print my_lemma</code></p>",
        "id": 209185105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599322727
    },
    {
        "content": "<p>So \"try to\"  means \"do not\".</p>",
        "id": 209185181,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599322855
    },
    {
        "content": "<p>It means \"does not always\", you can always <code>#print axioms my_classical_lemma_name</code> to check if it did anything non-classical though.</p>",
        "id": 209185275,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1599323013
    },
    {
        "content": "<p>There has to be a joke involving \"do or do not\" and classical logic in here somewhere</p>",
        "id": 209185335,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599323080
    },
    {
        "content": "<p>How can I use #print axioms   on my whole file at once to check if it is really intuitionistically correct?</p>",
        "id": 209185336,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599323084
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209185358,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1599323119
    },
    {
        "content": "<p>And why should I (not to mention the referee of my journal article)  believe that #print axioms is telling the truth about that?</p>",
        "id": 209185403,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599323178
    },
    {
        "content": "<p>AFAIK there's no per-file way to check, just per-declaration.</p>",
        "id": 209185405,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599323193
    },
    {
        "content": "<p>So after every lemma that uses ifinish, I have to put #print axioms &lt;lemma_name&gt;   and check manually that <br>\nit doesn't list anything classical.   I thought I was using a computer proof-checker.</p>",
        "id": 209185465,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599323284
    },
    {
        "content": "<p>Is there a tactic interface to <code>#print axioms</code>?</p>",
        "id": 209185466,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599323290
    },
    {
        "content": "<p>Of course the ifinish situation is a bit unfortunate, and it is not intended to work in this way, but nobody has had the time+need+energy to fix it. As far as I know there is no obstacle to making a version of ifinish that really is intuitionistic.</p>",
        "id": 209185502,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1599323388
    },
    {
        "content": "<p>Here is a super hacky way to print all the axioms used by everything in the current file. Import it and invoke it with <code>#axioms_all</code>. You could grep the output for <code>choice</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">core</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_command</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">axioms_all</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">&quot;#axioms_all&quot;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">())</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">rest</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n     <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">in_current_file</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">emit_command_here</span> <span class=\"o\">(</span><span class=\"s2\">&quot;#check &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"o\">),</span>\n           <span class=\"n\">emit_command_here</span> <span class=\"o\">(</span><span class=\"s2\">&quot;#print axioms &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"o\">),</span>\n           <span class=\"n\">return</span> <span class=\"o\">()),</span>\n     <span class=\"n\">rest</span><span class=\"o\">),</span>\n   <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209186002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599324178
    },
    {
        "content": "<p>Reid,  your code for #axioms_all  works,  and (happily) there's no \"choice\" in the output,  so I'm good to go.<br>\nBut,  your code did produce a message I thought you should see:</p>\n<p>invalid 'Model.no_confusion' application, elaborator has special support for no_confusion but the expected type must be known</p>",
        "id": 209233162,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599411953
    },
    {
        "content": "<p>Throw in some type annotations</p>",
        "id": 209233211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599412043
    },
    {
        "content": "<p>This is almost certainly from the line <code>#check Model.no_confusion</code> that it generates. Simplest solution: in Reid's code, change <code>\"#check \"</code> to <code>\"#check @\"</code></p>",
        "id": 209233330,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599412233
    },
    {
        "content": "<p>This is a good idea anyway if you want to see the full types.</p>",
        "id": 209233398,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599412361
    }
]