[
    {
        "content": "<p>I just attempted to install Lean 4, but I don't think it's installed properly.  I started a file with \"import data.real.basic\" and got an error message \"unknown package 'data' \".  What am I doing wrong?</p>",
        "id": 259003733,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635187911
    },
    {
        "content": "<p>That's lean 3</p>",
        "id": 259004891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635188466
    },
    {
        "content": "<p>an import that exists in lean 4 is <code>import Std.Data.HashMap</code></p>",
        "id": 259005072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635188537
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 259005117,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635188557
    },
    {
        "content": "<p>If you want to do mathematics then <a href=\"https://leanprover-community.github.io/get_started.html\">start here</a> with Lean 3.</p>",
        "id": 259005126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635188562
    },
    {
        "content": "<p>Right now the big maths library is Lean 3 only; this will change, but not for a few months at least.</p>",
        "id": 259005175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635188604
    },
    {
        "content": "<p>Is there a list of imports that exist in Lean 4?</p>",
        "id": 259005269,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635188647
    },
    {
        "content": "<p>Is it possible to have both Lean 3 and Lean 4 installed and switch between them?</p>",
        "id": 259005344,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635188695
    },
    {
        "content": "<p>Yes</p>",
        "id": 259005358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635188702
    },
    {
        "content": "<p>Each Lean repository has a file in the root directory which says exactly which version of Lean it compiles against</p>",
        "id": 259005435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635188739
    },
    {
        "content": "<p>For example <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/leanpkg.toml\">here</a> is the file corresponding to a repository I've done some work with -- the file says it uses Lean 3.34 and also a specific commit of mathlib, Lean 3's maths library. On the other hand I can also open another github repo which says it works with Lean 4 (e.g. <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/lean-toolchain\">this file</a> in a Lean 4 repo) and this just works out of the box too.</p>",
        "id": 259005605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635188812
    },
    {
        "content": "<p>I see there's something called mathlib4 at GitHub.  Is that the Lean 4 library?  Was it supposed to be installed on my computer as part of the Lean 4 installation?  Or is there something I'm supposed to do to install it?</p>",
        "id": 259006375,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635189190
    },
    {
        "content": "<p>mathlib4 is a playground for experimenting with manual ports of part of mathlib, Lean 3's maths library,</p>",
        "id": 259006424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189224
    },
    {
        "content": "<p>If you installed Lean 4 then all you got was Lean 4. You can clone repos from github and work on them, although the actual procedure for how to do this is changing rapidly right now (e.g. I don't think I know how to do it myself right now with Lean 4).</p>",
        "id": 259006563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189290
    },
    {
        "content": "<p>I installed Lean 3 first and played with it a little bit, but I have a project that I think is going to need to be done in Lean 4, so I installed that.  I don't know if I still have Lean 3, or how to go back to it if I do.</p>",
        "id": 259006678,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635189359
    },
    {
        "content": "<p>There is something called <code>lakefile.lean</code> in mathlib4 as of a week ago, and this is some kind of \"Lean makefile\" but I don't know any more than that (although there are oodles of details in the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream about it)</p>",
        "id": 259006776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189403
    },
    {
        "content": "<p>What's the nature of your project?</p>",
        "id": 259006799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189416
    },
    {
        "content": "<p>Both Lean 3 and Lean 4 can certainly coexist on a machine and there won't be any problems; a little program called <code>elan</code> will do the job of deciding which version of Lean you will be using.</p>",
        "id": 259006868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189469
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>buzzard@bob:~$ <span class=\"nb\">cd</span> active-lean-projects/\nbuzzard@bob:~/active-lean-projects$ <span class=\"nb\">cd</span> mathlib4\nbuzzard@bob:~/active-lean-projects/mathlib4$ lean --version\nLean <span class=\"o\">(</span>version <span class=\"m\">4</span>.0.0-nightly-2021-07-27, commit 0bea52d1b535, Release<span class=\"o\">)</span>\nbuzzard@bob:~/active-lean-projects/mathlib4$ <span class=\"nb\">cd</span> ..\nbuzzard@bob:~/active-lean-projects$ <span class=\"nb\">cd</span> mathlib\nbuzzard@bob:~/active-lean-projects/mathlib$ lean --version\nLean <span class=\"o\">(</span>version <span class=\"m\">3</span>.33.0, commit a0fb1e8c7ac8, Release<span class=\"o\">)</span>\nbuzzard@bob:~/active-lean-projects/mathlib$\n</code></pre></div>\n<p>Works by magic</p>",
        "id": 259006953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635189508
    },
    {
        "content": "<p>If I understand the commands you displayed, different projects can use different versions of lean.  But then how do I determine which version of Lean a project will use?</p>",
        "id": 259007384,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635189716
    },
    {
        "content": "<p>Are there completely different procedures for creating projects in Lean 3 and Lean 4?  It looks like in Lean 3 I'm supposed to use leanproject new, and in Lean 4 I'm supposed to use leanpkg init.  Is that right?</p>",
        "id": 259007972,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635189965
    },
    {
        "content": "<p>If you're downloading the package from github then you look in the leanpkg.toml or (for projects which are only a week or two old) then <code>lean-toolchain</code> file (so it seems -- I don't know anything about this file). Yes, there are completely different procedures for creating projects in Lean 3 and Lean 4. <code>leanproject</code> is supposed to be a one size fits all so-easy-even-mathematicians-can-use-it program which sets up Lean 3 projects.</p>",
        "id": 259008064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635190027
    },
    {
        "content": "<p>We'll worry about making Lean 4 project initialisation so easy even mathematicians can do it once we've solved the problem of porting the maths library. You didn't say what the nature of your project was.</p>",
        "id": 259008140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635190071
    },
    {
        "content": "<p>Sorry, it is not \"so-easy-even-mathematicians-can-use-it.\"  I just tried the command \"leanproject new &lt;project name&gt;\", which I thought was what I was supposed to use to create a Lean 3 project, and got an error message: \"uncaught exception: Lean package manager, version 4.0.0\"</p>",
        "id": 259008799,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635190405
    },
    {
        "content": "<p>I suspect that's because you've run it inside a directory which contains some lean 4 files</p>",
        "id": 259009200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635190661
    },
    {
        "content": "<p>Mathematicians aren't supposed to be messing with lean 4 yet :-)</p>",
        "id": 259009296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635190701
    },
    {
        "content": "<p>OK, I'll try in a different directory.  Thanks for all your help.</p>",
        "id": 259009368,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635190750
    },
    {
        "content": "<p>Just like a file explorer, the command line knows which directory it's in. You want to make sure that it's in C:/my_lean_projects or whatever</p>",
        "id": 259009440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635190799
    },
    {
        "content": "<p>(ps just to be clear, I am unashamedly a mathematician)</p>",
        "id": 259009570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635190860
    },
    {
        "content": "<p>Both Lean installation instructions install a program called <code>elan</code> which magically decides which version of Lean to run, and even fetches it if necessary. When you are in a directory that has been set up right with a <code>leanpkg.toml</code> file, it uses that information to determine the right version. If you type <code>elan</code> at the command line, you can see some options. For example, <code>elan show</code> will show you all the versions of Lean that it has fetched over time. You can say e.g. <code>elan default leanprover-community/lean:3.32.1</code> to set a specific default, but it should be overridden by a <code>toml</code> file when there is one. Note that typing <code>lean</code> really runs <code>elan</code>. If you type <code>lean --version</code>, it will tell you which version of Lean is being run.</p>",
        "id": 259010039,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1635191107
    },
    {
        "content": "<p>Perhaps <code>leanproject</code> should run <code>lean --version</code> and check it's on Lean 3, assuming it doesn't know anything about lean 4</p>",
        "id": 259014891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635193197
    },
    {
        "content": "<p>Thanks Jeremy.  When I type elan show I get the following list of installed toolchains:<br>\nstable<br>\nleanprover-community/lean:3.26.0<br>\nleanprover-community/lean:3.33.0<br>\nleanprover/lean4:stable (default)</p>\n<p>You say that Lean will use the right version in a directory with a leanpkg.toml file.  OK, so how do I set up a directory with such a file to use Lean 3?  The Lean 3 instructions for setting up a project say to use the command leanproject new &lt;name&gt;, but that now gives me an error message.  The Lean 4 instructions for setting up a project say to use the command leanpkg init &lt;name&gt;.  That command doesn't give an error message, but the leanpkg.toml file it creates says nothing about what version of Lean it should use.  I can see in the mathematics_in_lean leanpkg.toml file how the lean version should be specified.  Do I have to open my .toml file and add a \"lean_version\" line?</p>\n<p>Maybe I should just use elan default to go back to Lean 3 and stick to that for the moment.</p>\n<p>I'm sorry if I sound a little frustrated, but when I try to follow the installation instructions, nothing works as described online.  <br>\nI often get error messages, and the instructions give almost no information about what to do when you get error messages.</p>",
        "id": 259022041,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635196707
    },
    {
        "content": "<p>The instructions for lean 3 should be fine for lean 3 projects. Can you be more specific about the problem you're having with <code>leanproject new my_cool_project</code>? Saying \"it gives me an error message\" isn't very helpful</p>",
        "id": 259022618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635197010
    },
    {
        "content": "<p>Here's the error message:<br>\nuncaught exception: Lean package manager, version 4.0.0</p>\n<p>Usage: leanpkg &lt;command&gt;</p>\n<p>init &lt;name&gt;      create a Lean package in the current directory<br>\nconfigure        download and build dependencies<br>\nbuild [&lt;args&gt;]   configure and build *.olean files</p>\n<p>See <code>leanpkg help &lt;command&gt;</code> for more information on a specific command.<br>\nCommand '['leanpkg', 'new', 'HTPI']' returned non-zero exit status 1.</p>",
        "id": 259022819,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635197117
    },
    {
        "content": "<p>If the directory you're running this command in, or if <em>any directory containing this directory</em> as a subdirectory, contains a  <code>leanpkg.toml</code> file, then there will be trouble of this nature</p>",
        "id": 259022858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635197151
    },
    {
        "content": "<p>This looks like a bug in leanproject to me</p>",
        "id": 259022875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635197160
    },
    {
        "content": "<p>If you have lean4 as a default and no existing projects, then when <code>leanproject</code> calls out to <code>leanpkg init</code> internally, it's in for a shock</p>",
        "id": 259022967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635197196
    },
    {
        "content": "<p>Can you also confirm which version of <code>leanproject</code> you're using, with <code>leanproject --version</code>?</p>",
        "id": 259022971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635197200
    },
    {
        "content": "<p>Maybe the issue is simply that when you installed lean 4 the default lean changed and you have to manually change it back using elan?</p>",
        "id": 259023075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635197278
    },
    {
        "content": "<p>There's no leanpkg.toml file in either this directory or any directory that contains it (although there are leanpkg.toml files in another subdirectory of the directory containing this directory).  I'll try changing my default and see if that solves it.</p>",
        "id": 259023078,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635197281
    },
    {
        "content": "<p>I'll get to a computer and see if I can reproduce. Toml files in other subdirectories should be fine, I have those too (all my lean 3 and lean 4 repos are in a <code>lean-stuff</code> directory)</p>",
        "id": 259023249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635197375
    },
    {
        "content": "<p>OK, I changed my default to leanprover-community/lean:3.33.0, and now leanproject new &lt;name&gt; seems to work.</p>",
        "id": 259023737,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635197644
    },
    {
        "content": "<p>Indeed I can confirm that having elan default to a Lean 4 binary breaks <code>leanproject</code>. Hopefully you can fix it with <code>elan default leanprover-community/lean:3.33.0</code> and then <code>leanproject new my_cool_project</code> should hopefully eotk.</p>",
        "id": 259023743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635197647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I have a vague memory that this came up before...</p>",
        "id": 259023781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635197676
    },
    {
        "content": "<p>Does every project contain a copy of mathlib?  I wasn't expecting that.</p>",
        "id": 259024132,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635197884
    },
    {
        "content": "<p>Every project you make with <code>leanproject</code> does because it's supposed to be mathematician-proof</p>",
        "id": 259024167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635197905
    },
    {
        "content": "<p>You can just remove it if you want -- do you want to know how?</p>",
        "id": 259024195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635197926
    },
    {
        "content": "<p>It involves manually editing leanpkg.html and then deleting _target</p>",
        "id": 259024247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635197955
    },
    {
        "content": "<p>You leave the <code>[dependencies]</code> line but delete the <code>mathlib = ...</code> line after it</p>",
        "id": 259024384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635198024
    },
    {
        "content": "<p>I've asked several times what you're planning on doing, but because you never responded I can't give any advice on whether this would be a good or bad idea for you</p>",
        "id": 259024423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635198049
    },
    {
        "content": "<p>To be clear; are you surprised that new projects depend on mathlib, or that that dependency is handled by making a full copy?</p>",
        "id": 259024436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635198063
    },
    {
        "content": "<p>mathlib isn't just a maths library, it contains a lot of useful tactics too.</p>",
        "id": 259024447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635198078
    },
    {
        "content": "<p>Also non-mathlib lean3 core gets smaller and smaller; currently Yaël is PRing removing integers from core!</p>",
        "id": 259024545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635198132
    },
    {
        "content": "<p>Kevin:  Perhaps I shouldn't have said \"project\".  More of a vague, unformed idea at the moment, and I didn't want to try to explain.  At this point, I'm just trying to learn Lean.<br>\nEric:  I'm not surprised that new projects depend on mathlib, but I assumed that there would be one copy of mathlib on my computer in a place that is accessible to all projects.  Perhaps the issue is that mathlib changes often, so there isn't a single, stable \"mathlib\" that all projects can use?</p>",
        "id": 259026479,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635199417
    },
    {
        "content": "<p>Yes that's exactly it -- mathlib master can change 10 times a day and as it grows people want to use the latest features. I probably have 50 copies of mathlib on the machine I'm typing on now</p>",
        "id": 259026594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635199474
    },
    {
        "content": "<p>and they're probably all different</p>",
        "id": 259026609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635199482
    },
    {
        "content": "<p>Got it.  Thanks.</p>",
        "id": 259026618,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635199492
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/M40001_lean/blob/master/src/2021/README.md\">Here</a> is what I'm subjecting the 1st year UGs at my university to, and <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics\">here</a> is what I subjected some PhD students to earlier this year (all mathematicians)</p>",
        "id": 259026764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635199572
    },
    {
        "content": "<p>And if you want something more type-theoretic then <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> is a fantastic resource</p>",
        "id": 259026795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635199613
    },
    {
        "content": "<p>Thanks Kevin.</p>",
        "id": 259026915,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1635199684
    },
    {
        "content": "<p>My stuff is often quite alegbraic -- the <a href=\"https://github.com/leanprover-community/tutorials\">official tutorials</a> are more analytic</p>",
        "id": 259027068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635199797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Installation/near/259024545\">said</a>:</p>\n<blockquote>\n<p>Also non-mathlib lean3 core gets smaller and smaller; currently Yaël is PRing removing integers from core!</p>\n</blockquote>\n<p>Not to lower your expectations, but I think this is <strong>not</strong> happening <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span><br>\nI got terribly misled by faulty docgen.</p>",
        "id": 259030899,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635202123
    },
    {
        "content": "<p>In particular, they are used for widgets, which I think should stay in core?</p>",
        "id": 259030928,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635202152
    },
    {
        "content": "<p>It's true that <code>leanproject</code> was written long before Lean4 came out and it was never updated to cooperate with Lean 4. PRs are welcome. Also note that you can actually have a central copy of mathlib used by all projects, this is explained in the documentation. But it's so useless (for reasons explained by Kevin) that nobody does it.</p>",
        "id": 259059936,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635232887
    }
]