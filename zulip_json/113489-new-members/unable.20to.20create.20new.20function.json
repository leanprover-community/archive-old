[
    {
        "content": "<p><code>have test: ℕ -&gt; ℝ := λ(x:ℕ) ((1 / (x + 1)):ℝ),</code> fails with <code>invalid binder, identifier expected</code></p>",
        "id": 258633056,
        "sender_full_name": "abaaba",
        "timestamp": 1634858563
    },
    {
        "content": "<p>You want something more like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)):</span><span class=\"n\">ℝ</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>Note the extra comma.</p>",
        "id": 258633125,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1634858615
    },
    {
        "content": "<p>thanks! btw can I write in def grammar, where parameters appear at left hand side of equal sign?</p>",
        "id": 258633277,
        "sender_full_name": "abaaba",
        "timestamp": 1634858692
    },
    {
        "content": "<p>You probably want to use <code>let</code> rather than <code>have</code> with this though. <code>have</code> will forget the definition and only keep the type.</p>",
        "id": 258633284,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1634858696
    },
    {
        "content": "<p>Sorry, I don't know what you mean by \"def grammar\".</p>",
        "id": 258633327,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1634858725
    },
    {
        "content": "<p>I think that's a request for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)):</span><span class=\"n\">ℝ</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>to be valid syntax, which I agree is appealing</p>",
        "id": 258633884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634859057
    },
    {
        "content": "<p><code>let</code> already supports it in term mode</p>",
        "id": 258633992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634859123
    },
    {
        "content": "<p>I had no idea</p>",
        "id": 258635136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634859896
    }
]