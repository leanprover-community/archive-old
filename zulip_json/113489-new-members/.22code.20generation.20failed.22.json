[
    {
        "content": "<p>I want to define this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">nat.succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat.lt_of_succ_lt</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">nat.succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>but Lean tells me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">classical.choice'</span>\n</code></pre></div>\n<p>How can I avoid that error?</p>",
        "id": 234238294,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618265384
    },
    {
        "content": "<p>I tried <code>noncomputable theory</code> but it didn't seem to help.</p>",
        "id": 234238309,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618265399
    },
    {
        "content": "<p>I don't actually need to run the function -- I just want to prove some properties about it.</p>",
        "id": 234238370,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618265413
    },
    {
        "content": "<p><code>noncomputable def foo ...</code></p>",
        "id": 234238603,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618265553
    },
    {
        "content": "<p>You can also define this using <code>fin.cast_succ</code></p>",
        "id": 234238697,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618265626
    },
    {
        "content": "<p><code>| x@⟨nat.succ k, h⟩ := if (foo (fin.cast_succ x)) &lt; (a (fin.succ k) - d / 2) then (a (fin.succ x) - d / 2) else foo (fin.cast_succ x)</code></p>",
        "id": 234238833,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618265707
    },
    {
        "content": "<p>You have to first untuple the arguments</p>",
        "id": 234238857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618265721
    },
    {
        "content": "<p>Is that what you meant by untuple?</p>",
        "id": 234238878,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618265746
    },
    {
        "content": "<p>oh... I was wondering about \"at patterns\" too</p>",
        "id": 234238938,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618265768
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo_aux</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">foo_aux</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_of_succ_lt</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">nat.succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">foo_aux</span> <span class=\"n\">d</span> <span class=\"n\">a</span> <span class=\"n\">i.1</span> <span class=\"n\">i.2</span>\n</code></pre></div>",
        "id": 234238973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618265800
    },
    {
        "content": "<p>(i.e. <code>x@⟨nat.succ k, h⟩</code>)</p>",
        "id": 234238978,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618265804
    }
]