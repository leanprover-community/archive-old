[
    {
        "content": "<p>How do I use infix notation for tensor products?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">tensor_product</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"c1\">-- seems to work fine</span>\n<span class=\"kn\">open</span> <span class=\"n\">tensor_product</span> <span class=\"c1\">-- this doesn&#39;t seem to make a difference, with or without it I get:</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">M</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"c1\">-- error : unexpected token</span>\n</code></pre></div>",
        "id": 199699250,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591237702
    },
    {
        "content": "<p>The notation is declared like so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">&quot;infix ` ⊗ `:100 := tensor_product _&quot;</span> <span class=\"k\">in</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation M ` ⊗[`:100 R `] ` N:100 := tensor_product R M N&quot;</span> <span class=\"k\">in</span> <span class=\"n\">tensor_product</span>\n</code></pre></div>\n\n\n<p>This means it is a localized notation, which means it is local to a file but can be reopened using <code>open_locale tensor_product</code></p>",
        "id": 199699630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591238353
    },
    {
        "content": "<p>(These \"locales\" are separate from lean's \"namespaces\" and so <code>open</code> doesn't work; they are enabled by some tactics in mathlib.)</p>",
        "id": 199699691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591238419
    },
    {
        "content": "<p>thanks!</p>",
        "id": 199699789,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591238562
    }
]