[
    {
        "content": "<p>Hello, I'm somewhat new to Lean and have been working through the Mathematics in Lean book. Wasn't having any issues for most of it, but I've run into an exercise where my (very short) solution gives a baffling \"invalid occurrence of field notation\" error. Where would be a good place to post this to have someone more experienced in Lean take a look? I'm probably making a silly mistake but I've triple-checked my proof and can't see what's wrong.</p>",
        "id": 261720512,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637103807
    },
    {
        "content": "<p>Post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> here, you're in exactly the right place, just post fully working code so we can see the error ourselves.</p>",
        "id": 261720560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637103842
    },
    {
        "content": "<p>Thanks, here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">inj_on</span> <span class=\"n\">sqrt</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sqr_sqrt</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">eq</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sqr_sqrt</span> <span class=\"n\">hy</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261720652,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637103898
    },
    {
        "content": "<p>Can you include the <code>import</code>s too?</p>",
        "id": 261720702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637103923
    },
    {
        "content": "<p>can you make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? If I post that into my Lean I just get errors about not knowing what x is</p>",
        "id": 261720712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637103934
    },
    {
        "content": "<p>Oops, my mistake, now with imports included:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">inj_on</span> <span class=\"n\">sqrt</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sqr_sqrt</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">eq</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sqr_sqrt</span> <span class=\"n\">hy</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261720791,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637103966
    },
    {
        "content": "<p><code>calc</code> errors are always messy to debug because the syntax is a bit unwieldy</p>",
        "id": 261720847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637104008
    },
    {
        "content": "<p>Yeah. I can make the proof work just by using the same logic with <code>rw</code>s instead of <code>calc</code>, but I'd like to figure out what I'm doing wrong here.</p>",
        "id": 261720914,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637104057
    },
    {
        "content": "<p>I have no idea why that doesn't work! The error message is super-unhelpful.</p>",
        "id": 261721078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637104154
    },
    {
        "content": "<p>does <code>sqr_sqrt</code> exist? I can only find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sq_sqrt\">docs#real.sq_sqrt</a></p>",
        "id": 261721089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104163
    },
    {
        "content": "<p>That's not the issue though, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">inj_on</span> <span class=\"n\">sqrt</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- invalid occurrence of field notation</span>\n</code></pre></div>",
        "id": 261721175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637104202
    },
    {
        "content": "<p>It's happy in term mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">inj_on</span> <span class=\"n\">sqrt</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sq_sqrt</span> <span class=\"n\">hx</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">eq</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sq_sqrt</span> <span class=\"n\">hy</span>\n</code></pre></div>",
        "id": 261721332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104283
    },
    {
        "content": "<p>I used autocomplete to find <code>sqr_sqrt</code>, so it certainly does seem to exist and behave as expected—the proof works if I replace the <code>calc</code> block with <code>rw</code>s (with <code>sqr_sqrt</code>, not <code>sq_sqrt</code>).</p>",
        "id": 261721583,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637104398
    },
    {
        "content": "<p>A more minimal mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.function</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">inj_on</span> <span class=\"n\">foo</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261721763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104518
    },
    {
        "content": "<p>It works for me in term mode too—though, oddly enough, only with <code>sqr_sqrt</code>. If I use <code>sq_sqrt</code>, it says \"unknown identifier 'sq_sqrt'\". Seems like this is a separate issue, though, as the above MWE illustrates.</p>",
        "id": 261721880,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637104568
    },
    {
        "content": "<p>When you hover over <code>sqr_sqrt</code>, what does it tell you the full name is?</p>",
        "id": 261721912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104596
    },
    {
        "content": "<p>I think you might be on an old mathlib, but the other issue seems to persist with new mathlib too</p>",
        "id": 261721917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104601
    },
    {
        "content": "<p><code>real.sqr_sqrt</code> is the full name</p>",
        "id": 261721944,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637104624
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sqr_sqrt\">docs#real.sqr_sqrt</a> says that doesn't exist any more</p>",
        "id": 261721968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104641
    },
    {
        "content": "<p>Aha</p>",
        "id": 261722011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104679
    },
    {
        "content": "<p>You confused calc by calling a local variable <code>eq</code></p>",
        "id": 261722058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104690
    },
    {
        "content": "<p>Huh. I only installed lean a couple weeks ago, so I'm surprised I could be on an old version already.</p>",
        "id": 261722071,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637104705
    },
    {
        "content": "<p>oh very nice!</p>",
        "id": 261722079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637104711
    },
    {
        "content": "<p>Oh, is <code>eq</code> a reserved name? Oops, that would explain it!</p>",
        "id": 261722095,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637104723
    },
    {
        "content": "<p>Nope, that's a calc bug I think</p>",
        "id": 261722104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"458142\">@Daniel Hast</span> <code>eq</code> is the actual name for <code>=</code> so you could imagine how this might screw things up in edge cases, but nonetheless it shouldn't have happened.</p>",
        "id": 261722133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637104747
    },
    {
        "content": "<p><code>have := x = y</code> works just fine with the bad local <code>eq</code></p>",
        "id": 261722154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104762
    },
    {
        "content": "<p><code>calc</code> is using some bad rules to resolve the <code>=</code> notation</p>",
        "id": 261722166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104776
    },
    {
        "content": "<p>This is definitely what's causing it, though. I changed <code>eq</code> to <code>e</code> and it works fine.</p>",
        "id": 261722178,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637104788
    },
    {
        "content": "<p>As for old versions, if you take a look at the <a class=\"stream\" data-stream-id=\"116290\" href=\"/#narrow/stream/116290-rss\">#rss</a>  stream you'll be able to see how much Lean's maths library has changed in the last two weeks. It's a bit scary.</p>",
        "id": 261722269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637104850
    },
    {
        "content": "<p>Thanks for the help!</p>",
        "id": 261722290,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637104862
    },
    {
        "content": "<p>How do I make sure I'm on the newest version of mathlib, by the way?</p>",
        "id": 261722309,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637104878
    },
    {
        "content": "<p>Are you using <code>leanproject</code>?</p>",
        "id": 261722328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637104886
    },
    {
        "content": "<p>Yes</p>",
        "id": 261722338,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637104895
    },
    {
        "content": "<p>Looks like it was renamed by Yael on 9th September.</p>",
        "id": 261722395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637104923
    },
    {
        "content": "<p>Oh? Don't remember that</p>",
        "id": 261722434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637104944
    },
    {
        "content": "<p>Ah yeah, maybe. <code>sqr</code> is a weird name so I must've changed it while doing adjacent stuff.</p>",
        "id": 261722467,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637104974
    },
    {
        "content": "<p>Here's something I didn't know <code>calc</code> could do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 261722733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637105121
    },
    {
        "content": "<p>I think this has come up before but I can't remember why it works. I think <code>calc</code> works for <code>=</code> because <code>eq.trans</code> is tagged <code>@[trans]</code>. But what does one tag here?</p>",
        "id": 261722961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637105276
    },
    {
        "content": "<p>I created a bug report at <a href=\"https://github.com/leanprover-community/lean/issues/651\">https://github.com/leanprover-community/lean/issues/651</a></p>",
        "id": 261723134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637105372
    },
    {
        "content": "<p>This is only the calc _tactic_ that is broken</p>",
        "id": 261723144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637105377
    },
    {
        "content": "<p>Given that the website is now quite professional-looking, I'm slightly surprised and amused that there are still \"(Kevin thinks)\" comments in <a href=\"https://leanprover-community.github.io/extras/calc.html\">https://leanprover-community.github.io/extras/calc.html</a></p>",
        "id": 261723147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637105382
    },
    {
        "content": "<p>I just figured out the issue with the outdated version of mathlib: I had downloaded the \"Mathematics in Lean\" project using <code>leanproject get mathematics_in_lean</code>, and presumably this came with an older version of mathlib. I ran <code>leanproject upgrade-mathlib</code> in the project directory and restarted VSCodium, and now the function is named <code>sq_sqrt</code> rather than <code>sqr_sqrt</code>.</p>",
        "id": 261723537,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637105600
    },
    {
        "content": "<p>you might also find that you broke <code>mathematics_in_lean</code> too :-/ I can't guarantee that the book works with current mathlib.</p>",
        "id": 261723637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637105656
    },
    {
        "content": "<p>Hm, it's possible. I'm almost done going through it anyway, so it's unlikely to be an issue for me.</p>",
        "id": 261723699,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637105704
    },
    {
        "content": "<p>Great, you can help write the next bit :-)</p>",
        "id": 261723739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637105732
    },
    {
        "content": "<p>What chapters are planned?</p>",
        "id": 261723758,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637105748
    },
    {
        "content": "<p>I'd like to do some of the stuff in <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics\">https://github.com/ImperialCollegeLondon/formalising-mathematics</a> but the thing about a multi-author project is that different authors might have different opinions :-)</p>",
        "id": 261723855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637105807
    },
    {
        "content": "<p>I'm afraid we're quite a way from non-abelian Chabauty, but <a href=\"https://github.com/leanprover-community/mathlib/projects/13\">algebraic geometry is slowly ticking along...</a></p>",
        "id": 261724077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637105961
    },
    {
        "content": "<p>Very cool! I'm teaching commutative algebra next semester and was thinking about formalizing some of Atiyah-Macdonald in Lean.</p>",
        "id": 261724367,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637106098
    },
    {
        "content": "<p>Oh we probably have all of that now but it's definitely a really good way to learn when you want to branch out away from all the learning material.</p>",
        "id": 261724696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637106282
    },
    {
        "content": "<p>Here are some of the things we learnt when formalising A-M:<br>\n1) Mathematicians are really good at writing things R[1/f][1/g]=R[1/fg] (e.g. this is embedded in stuff like the proof that the presheaf on Spec(R) is a sheaf in the Stacks project) and this is not actually true when you think about it. So instead of defining a ring <code>localisation R S</code>, you should define <code>is_localisation R S A</code>, a predicate on R-algebras A saying \"I satisfy the universal property\". We talk about this more <a href=\"https://arxiv.org/abs/2101.02602\">here</a> -- most of my co-authors are undergrads.</p>\n<p>2) Distinct types are disjoint. This is different from set theory where you can have rings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊆</mo><mi>B</mi><mo>⊆</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A\\subseteq B\\subseteq C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>; in type theory you have to decide how you want to handle this. We tried making some of A,B,C terms but it didn't work out; in the end we made them all types. Along the way we <a href=\"https://arxiv.org/abs/2108.10700\">invented heterogeneous associativity</a>. I was really surprised these ideas weren't discovered 30 years ago, but it's interesting that your immediate reaction, like mine, was \"hey I bet formalising commutative algebra would be fun\", whereas this was apparently not the reaction of previous users of systems such as this, perhaps because they tended to come from computer science departments.<br>\n3) There's a <a href=\"https://twitter.com/XenaProject/status/1308693991144206336\">mistake</a> in the proof of the Artin-Tate lemma in A-M! It's very hard to spot though -- don't read the thread, see if you can spot it :-) It's Prop 7.8 and the issue is the claim about each element of C being a linear combination of the y_i with coefficients in B_0. Lean didn't like this claim. Of course it's not hard to fix, it's just interesting that it's there.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/XenaProject/status/1308693991144206336\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/9686557e167ea0d81d62930b9cefbd210a469b3c/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313236333831303239373536303733353734342f674d69616e515f565f6e6f726d616c2e6a7067\"></a><p>Hey algebra Twitter! Imperial undergraduate Kenny Lau just found a cool oversight in the proof of the Artin-Tate lemma in Atiyah--Macdonald, when formalising it in Lean. Of course the proof can be fixed. How to justify \"each elt of C is a lin comb of the y_i with coeffts in B_0\"? <a href=\"https://t.co/XnFGNpQ799\">https://twitter.com/XenaProject/status/1308693991144206336/photo/1</a></p><span>- The Xena Project (@XenaProject)</span><div class=\"twitter-image\"><a href=\"https://t.co/XnFGNpQ799\"><img src=\"https://uploads.zulipusercontent.net/48cbd752e1d62018968a472dab1cac6b1f680d17/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45696c70733164586b41493065666b2e706e673a736d616c6c\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/XnFGNpQ799\"><img src=\"https://uploads.zulipusercontent.net/a4dcb9a08efd8dcd8dffb8ab5008a1350a4fb2e0/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45696c70743131586341453445454f2e706e673a6d656469756d\"></a></div></div></div><p><span class=\"user-mention\" data-user-id=\"458142\">@Daniel Hast</span></p>",
        "id": 261725632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637106711
    },
    {
        "content": "<p>Interesting, thanks!</p>",
        "id": 261725753,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1637106808
    },
    {
        "content": "<p>There was a slip of a similar nature in Clausen-Scholze which we also spotted when formalising but which Peter of course fixed immediately.</p>",
        "id": 261725877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637106910
    },
    {
        "content": "<p>If you want to see some more advanced number theory in Lean you should subscribe to some of the \"not-subscribed-by-default\" streams such as <a class=\"stream\" data-stream-id=\"304774\" href=\"/#narrow/stream/304774-FLT-regular\">#FLT regular</a> or <a class=\"stream\" data-stream-id=\"267928\" href=\"/#narrow/stream/267928-condensed-mathematics\">#condensed mathematics</a> (click on the + by \"STREAMS\" )</p>",
        "id": 261726117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637106967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20to.20Lean.2C.20getting.20confusing.20error.20message/near/261723144\">said</a>:</p>\n<blockquote>\n<p>This is only the calc _tactic_ that is broken</p>\n</blockquote>\n<p>There is no <code>calc</code> tactic. <code>calc</code> in tactic mode is literally a shorthand for <code>refine calc</code>, so there is only a term mode <code>calc</code>. (Yes, this is weird and does not occur for any other tactic/term constructor in lean.)</p>",
        "id": 261727226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637107648
    },
    {
        "content": "<p>Which makes it even more puzzling that the code worked in term mode but not in tactic mode.</p>",
        "id": 261742581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637123521
    },
    {
        "content": "<p>FTR, it seems that Mario already fixed this in <a href=\"https://github.com/leanprover-community/lean/issues/652\">lean#652</a></p>",
        "id": 261742668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637123632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is this something that might also matter to Lean 4?</p>",
        "id": 261742753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637123704
    },
    {
        "content": "<p><code>calc</code> doesn't exist in lean 4</p>",
        "id": 261742770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637123732
    },
    {
        "content": "<p>actually that's false. The analogous issue does not appear though, in a basic test:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">Eq</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n     <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 261742928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637123893
    },
    {
        "content": "<p>the bug is a rather specific sequence of things going wrong so I would expect any reimplementation not to have the same issue</p>",
        "id": 261742946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637123926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20to.20Lean.2C.20getting.20confusing.20error.20message/near/261742581\">said</a>:</p>\n<blockquote>\n<p>Which makes it even more puzzling that the code worked in term mode but not in tactic mode.</p>\n</blockquote>\n<p>Note that <code>by refine calc</code> had the same issue as <code>by calc</code></p>",
        "id": 261743042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637124028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20to.20Lean.2C.20getting.20confusing.20error.20message/near/261725632\">said</a>:</p>\n<blockquote>\n<p>2) Distinct types are disjoint. This is different from set theory where you can have rings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊆</mo><mi>B</mi><mo>⊆</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A\\subseteq B\\subseteq C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>; in type theory you have to decide how you want to handle this. </p>\n</blockquote>\n<p>I claim this is not a type theory vs set theory issue. Indeed in set theory \"you <em>could</em> have rings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊆</mo><mi>B</mi><mo>⊆</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A\\subseteq B\\subseteq C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>\", but this simply don't happen. It's simply not true that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>⊂</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} \\subset \\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.728em;vertical-align:-0.0391em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊂</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A \\subset A[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> are set inclusions, at least not with any construction that I'm aware of. They are simply abuse of notation, using invisible symbols for some maps.</p>",
        "id": 261753939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637137067
    },
    {
        "content": "<p>The calc bug fix is <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean.3Amaster/near/261767373\">merged</a>.</p>",
        "id": 261779593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637153579
    },
    {
        "content": "<p>(but won't actually be available in mathlib for a while longer)</p>",
        "id": 261781709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637154776
    }
]