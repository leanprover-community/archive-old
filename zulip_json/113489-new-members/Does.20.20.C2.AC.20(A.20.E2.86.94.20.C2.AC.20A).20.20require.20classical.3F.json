[
    {
        "content": "<p>As a rule of thumb, proving a negation is somehow less likely to require classical than proving a positive statement (e.g. \"<code>¬¬p</code> implies <code>p</code>\" requires classical, though \"<code>¬¬¬p</code> implies <code>¬p</code>\" does not). The \"content\" of classical is that <em>removing</em> negations is hard.</p>",
        "id": 264846907,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1639483437
    },
    {
        "content": "<p>Note there's another thread on this <a href=\"#narrow/stream/113489-new-members/topic/.C2.AC.20.28p.20.E2.86.94.20.C2.AC.20p.29/near/194285992\">here</a></p>",
        "id": 264857240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639488787
    },
    {
        "content": "<p>Patrick's remark can be made precise. Whenever you can derive a contradiction using some instance of LEM you can derive one also without it. This is because <code>¬¬(p ∨ ¬p)</code> holds constructively. Here's an illustration in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lem_is_not_false</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eliminate_lem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">lem_is_not_false</span> <span class=\"n\">q</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span>\n</code></pre></div>",
        "id": 264861059,
        "sender_full_name": "David Wärn",
        "timestamp": 1639490460
    }
]