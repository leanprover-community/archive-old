[
    {
        "content": "<p>Hello, I'm wondering how to prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span>\n<span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">I_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm not really sure how to prove = without using rw and I don't see how rw could be applied here</p>",
        "id": 279233120,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650218892
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Proving.20two.20functions.20are.20equivalent\">#general &gt; Proving two functions are equivalent</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 279233232,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650219085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"494907\">@Fingy Soupy</span> You need to use function extensionality in some way to prove <code>a = b</code> from equality on values.</p>\n<p>Here's one way using tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">I_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279233245,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650219119
    },
    {
        "content": "<p>You can also do this using a term proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">I_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 279233293,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650219148
    },
    {
        "content": "<p>(I hope you don't mind I moved your question to \"new members\".)</p>",
        "id": 279233310,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650219188
    },
    {
        "content": "<p>Awesome, thanks :) I have not heard of 'function extensionality' before. I'll do some reading into it. I don't mind, I didn't see that was a stream, sorry.</p>",
        "id": 279233730,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650219803
    },
    {
        "content": "<p><code>by library_search</code> should have been able to answer this question for you :)</p>",
        "id": 279233736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650219815
    },
    {
        "content": "<p>In general, \"extensionality\" refers to an idea where things are considered to be equal if they're externally indistinguishable. The only thing you can do with a function is evaluate it, and in Lean we (more-or-less) define function equality by extensionality. (The hedge there is just because function extensionality is actually a consequence of some other axioms.)</p>\n<p>Similarly, the extensionality property for sets is that they're equal if they have the same elements. In ZFC, that's taken as an axiom. In Lean, that's actually <code>funext</code> but with special notation for sets.</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ext\">tactic#ext</a> looks in a database of extensionality lemmas to retrieve one that applies to the given situation. Lemmas are added to this database by giving them the <code>ext</code> attribute.</p>",
        "id": 279233955,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650220178
    },
    {
        "content": "<p>Oh wow, I wasn't aware of <code>library_search</code>. This is great, thank you! :)<br>\nThis is very informative thanks :)</p>",
        "id": 279234421,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650220874
    }
]