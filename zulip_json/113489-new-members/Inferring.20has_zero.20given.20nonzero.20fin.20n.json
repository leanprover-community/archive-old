[
    {
        "content": "<p>How can I convert a <code>(n : \\N) (h : 0 \\neq n)</code> to gain a <code>has_zero (fin n)</code>? fuller problem is here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_mat_nonzero</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">B</span> <span class=\"n\">hB</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hB</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">hB</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hB</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201215817,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592438968
    },
    {
        "content": "<p>I guess I can try proving that <code>A = 0 -&gt; n = 0</code></p>",
        "id": 201215840,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592438998
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201216105,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592439189
    },
    {
        "content": "<p>an instance of <code>has_zero</code> is just a zero</p>",
        "id": 201216120,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592439208
    },
    {
        "content": "<p>an element of <code>fin n</code> is a nat plus a proof that it's less than <code>n</code></p>",
        "id": 201216147,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592439236
    },
    {
        "content": "<p><code>suggest</code> can tell you the first line of the proof</p>",
        "id": 201216204,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592439276
    },
    {
        "content": "<p>so can <code>{! !}</code></p>",
        "id": 201216209,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592439280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Inferring.20has_zero.20given.20nonzero.20fin.20n/near/201215817\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">choose</span> <span class=\"n\">B</span> <span class=\"n\">hB</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I guess this works, but more normal is <code>cases h with B hB</code> or an <code>rcases</code> or <code>obtain</code> variant.</p>",
        "id": 201216459,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592439529
    },
    {
        "content": "<p>That's awesome. Never really got the hang of <code>suggest</code></p>",
        "id": 201216467,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592439541
    },
    {
        "content": "<p>Also, you don't really need <code>has_zero</code> specifically, do you? Just any <code>z : fin n</code> will do</p>",
        "id": 201216508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592439597
    },
    {
        "content": "<p>With those insights:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_mat_nonzero</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">refine</span> <span class=\"bp\">⟨_⟩</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">npos</span> <span class=\"o\">},</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hB</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">hB</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hB</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201216576,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592439634
    },
    {
        "content": "<p>That's true about the <code>z : fin n</code></p>",
        "id": 201216583,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592439647
    },
    {
        "content": "<p>How does one just pluck an arbitrary <code>fin n</code>, would that be using <code>arbitrary</code>? Then I still have to show <code>inhabited (fin n)</code>.</p>",
        "id": 201216845,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592439901
    },
    {
        "content": "<p>Which would require a <code>nonempty (fin n)</code></p>",
        "id": 201217130,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592440152
    },
    {
        "content": "<p>Just do the same thing but without saying <code>has_zero</code>.</p>",
        "id": 201217141,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592440173
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">refine</span> <span class=\"bp\">⟨_⟩</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">npos</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 201217149,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592440189
    },
    {
        "content": "<p><code>have z : fin n := \\&lt;0, npos\\&gt;</code>, etc.</p>",
        "id": 201217153,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592440193
    },
    {
        "content": "<p>Oh.</p>",
        "id": 201217157,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592440200
    },
    {
        "content": "<p>That's really cool. That's helping me understand better how <code>fin n</code> is defined.</p>",
        "id": 201217297,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592440298
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_mat_nonzero</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">npos</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hB</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">hB</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hB</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201217300,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592440311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Inferring.20has_zero.20given.20nonzero.20fin.20n/near/201216459\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Inferring.20has_zero.20given.20nonzero.20fin.20n/near/201215817\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">choose</span> <span class=\"n\">B</span> <span class=\"n\">hB</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I guess this works, but more normal is <code>cases h with B hB</code> or an <code>rcases</code> or <code>obtain</code> variant.</p>\n</blockquote>\n<p>How do <code>rcases</code> or <code>obtain</code> work with <code>\\ex !</code>, the unique exists? The inverse is unique, so I might prefer to use that syntax. The error I get with <code>rcases</code> or <code>obtain</code> is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">recursor</span> <span class=\"err\">&#39;</span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">dcases_on&#39;</span> <span class=\"n\">can</span> <span class=\"n\">only</span> <span class=\"n\">eliminate</span> <span class=\"n\">into</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 201218808,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592442024
    }
]