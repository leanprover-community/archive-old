[
    {
        "content": "<p>I am trying to resolve the following universe error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If I understand correctly, <code>?l_1</code> is a universe metavariable which can still be set, and the problem might be that <code>max u_2 u_1</code> and <code>max u_1 u_2</code>are different ?!<br>\n(I can share more context, but felt like this should be a very generic problem independent of the concrete situation.)</p>",
        "id": 273253683,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645808065
    },
    {
        "content": "<p>it's always nice to have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to try the solutions we suggest</p>",
        "id": 273253790,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645808115
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.projective</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.principal_ideal_domain</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">free_module_natural_map</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp.total</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">step_two</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">free_module_natural_map</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">step_two_projective</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_principal_ideal_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module.projective</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">step_two</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 273254105,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645808247
    },
    {
        "content": "<p>the statement of step_two_projective produces the type error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">module.projective.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">step_two.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">step_two.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 273254295,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645808334
    },
    {
        "content": "<p><code>max u v = max v u</code> is known to lean, this isn't the problem</p>",
        "id": 273255178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645808651
    },
    {
        "content": "<p>okay, good</p>",
        "id": 273255245,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645808684
    },
    {
        "content": "<p>The issue is that <code>max u v = max v ?l</code> does not have a unique solution for <code>?l</code>: <code>?l := max u v</code> is also a solution</p>",
        "id": 273255252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645808686
    },
    {
        "content": "<p>because <code>max</code> isn't an injective function when you fix one of its arguments</p>",
        "id": 273255299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645808707
    },
    {
        "content": "<p>so would i have to annotate the universes by hand?<br>\nwith the <code>.{u_2}</code> syntax?</p>",
        "id": 273255391,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645808746
    },
    {
        "content": "<p>It's possible</p>",
        "id": 273255409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645808754
    },
    {
        "content": "<p>yes</p>",
        "id": 273255503,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645808776
    },
    {
        "content": "<p><code>lemma step_two_projective [is_domain R] [is_principal_ideal_ring R] : module.projective.{u_1 u_2} R (@step_two R _ M _ _) := sorry</code> works</p>",
        "id": 273255511,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645808782
    },
    {
        "content": "<p>It's also possible one of the lemmas has spurious universe arguments, there is a linter to check for this so try <code>#lint</code></p>",
        "id": 273255520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645808785
    },
    {
        "content": "<p>your example isn't a MWE by the way, you don't have any imports</p>",
        "id": 273255658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645808844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/universe.20question.3A.20max.20u.20v.20.3D.20max.20v.20u.3F/near/273255520\">said</a>:</p>\n<blockquote>\n<p>It's also possible one of the lemmas has spurious universe arguments, there is a linter to check for this so try <code>#lint</code></p>\n</blockquote>\n<p>no, only missing docstrings</p>",
        "id": 273255732,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645808878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/universe.20question.3A.20max.20u.20v.20.3D.20max.20v.20u.3F/near/273255658\">said</a>:</p>\n<blockquote>\n<p>your example isn't a MWE by the way, you don't have any imports</p>\n</blockquote>\n<p>fixed for future reference,  and thanks</p>",
        "id": 273255959,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645808964
    },
    {
        "content": "<p>Thank you, fixed</p>",
        "id": 273256104,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645809014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210057\">Fabian Glöckle</span> has marked this topic as resolved.</p>",
        "id": 273256110,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645809016
    },
    {
        "content": "<p>Oh I see, it looks like the culprit is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.projective\">docs#module.projective</a></p>",
        "id": 273256499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645809183
    },
    {
        "content": "<p>the <code>P : Type (max u v)</code> in the assumptions is sure to cause this issue, but it has been explicitly written like that in the source so I guess there is a reason for it</p>",
        "id": 273256605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645809236
    },
    {
        "content": "<p>Looks like this was done in <a href=\"https://github.com/leanprover-community/mathlib/commit/a617d0a61d6517258d88045c087f2f8c680c753a#diff-19b612d25c09e095a5127c64ec5f2dec8d39c3240dc76044f7520aea89c0a1e8\">a617d0a</a> by <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , perhaps he can speak to why the restriction is necessary. The code contains a comment</p>\n<blockquote>\n<p>We require that the module sits in at least as high a universe as the ring: without this, free modules don't even exist, and it's unclear if projective modules are even a useful notion.</p>\n</blockquote>\n<p>but I don't see why this needs to be a constraint on the definition itself</p>",
        "id": 273257149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645809440
    },
    {
        "content": "<p>Somewhere later I proved an equivalence with some other notion of equivalence (perhaps the general category theoretic one?), and my vague memory is that I had to put the universe description all the way back here on the definition in order to state the equivalence cleanly?? But that doesn't sound particularly plausible, so anyone should feel free to experiment with relaxing it if they can see a payoff.</p>",
        "id": 273284245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1645822751
    },
    {
        "content": "<p>It's not clear to me that there is any good notion of projective R-module in universes smaller than that of R</p>",
        "id": 273307794,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645839191
    },
    {
        "content": "<p>Anyways, just put your rings and modules in the same universe.</p>",
        "id": 273307809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645839198
    },
    {
        "content": "<p>That's easy to say until you want some theorem about abelian groups coming from the condensed sets work (or version zero of etale cohomology groups) which live in <code>Type 1</code> and the proof goes via ℤ-modules :-/</p>",
        "id": 273326570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645863178
    },
    {
        "content": "<p>I guess then you just <code>ulift</code> except that I learnt (from you) very recently that this comes with its own problems (eg apparently putting the order on <code>ulift ℤ</code> is currently an unsolved problem?)</p>",
        "id": 273326642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645863302
    },
    {
        "content": "<p>Right but this is a mathematically sensible thing to do anyways</p>",
        "id": 273331242,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645869809
    },
    {
        "content": "<p>I think that <em>even if</em> there is no suitable notion of projective R-module when the universe of R is larger than P (and I'm not convinced this is the case, e.g. if R happens to be a ulifted type from a small universe), it would be better not to put the universe restriction in the definition using a <code>max</code>, and instead only use the definition when the universe of <code>P</code> is larger than <code>R</code> and ignore the other cases, like we do for definitions out of range.</p>",
        "id": 273332112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645871141
    },
    {
        "content": "<p>I think <code>v</code> is better than <code>max u v</code> (barring some technical reason for <code>max u v</code> that's a bit hard to imagine), but maybe <code>u</code> (i.e. the universe of the ring) is better than <code>v</code> if it prevents people from trying to think about the nonsense case <code>u &gt; v</code>.</p>",
        "id": 273332724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645871871
    },
    {
        "content": "<p>i.e. <code>v</code> is abstractly better than <code>u</code> in terms of first order effects, but maybe not actually better for humans</p>",
        "id": 273332768,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645871899
    },
    {
        "content": "<p>The total effort I've seen people expend on trying to \"generalize\" to things like <code>Mod.{v u} R</code> far exceeds the amount of effort it would take even to manually add a bunch of instances for <code>ulift</code>, and the result isn't nicer because <code>Mod.{v u} R</code> will still need to use <code>ulift R</code> anyways (e.g. for the monoidal unit)</p>",
        "id": 273332972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645872233
    },
    {
        "content": "<p>So I'm inclined to conclude that this is the wrong path, and the earlier you don't go down it, the better</p>",
        "id": 273333023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645872260
    },
    {
        "content": "<p>But I'm confused now -- I thought that the discussion you and Gabriel had earlier this week about lifting total orders threw up the issue that this was going to cause diamonds?</p>",
        "id": 273344141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645886095
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> said something about that but I have no idea what it means.</p>",
        "id": 273344159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645886134
    },
    {
        "content": "<p>But clearly you should just be able to write instances for <code>ulift a</code>, it is just an ordinary type after all.</p>",
        "id": 273344235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645886215
    },
    {
        "content": "<p>For example, it's clearly easier than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.linear_order\">docs#with_top.linear_order</a></p>",
        "id": 273344680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645886822
    },
    {
        "content": "<p>(at a computer now -- sorry for delay in posting link) : <a href=\"#narrow/stream/270676-lean4/topic/universes/near/272699801\">here</a> Gabriel lifted the linear order on <code>int</code>; Eric's objections to the code were explained a bit further down. Is this the sort of thing which is going to be sorted out in the end though?</p>",
        "id": 273345282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645887507
    },
    {
        "content": "<p>The diamonds in ulift instances are easy to fix, they're just easy to make a mess of</p>",
        "id": 273345296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645887531
    },
    {
        "content": "<p>What is the diamond?</p>",
        "id": 273345745,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645887916
    },
    {
        "content": "<p>I see a reference to a comment on a PR but no link to the PR</p>",
        "id": 273346110,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645888341
    },
    {
        "content": "<p>OTOH the \"feet with holes\" comment did make me laugh out loud</p>",
        "id": 273346419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645888706
    },
    {
        "content": "<p>In particular I wonder whether these are actual diamonds, or just \"some two things which we would like to be defeq aren't\"</p>",
        "id": 273347317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645889776
    },
    {
        "content": "<p>isn't that what a diamond means?</p>",
        "id": 273350728,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645893993
    },
    {
        "content": "<p>If the two things are instances (that can be synthesized by instance search), then yes</p>",
        "id": 273352184,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645895852
    },
    {
        "content": "<p>If they are random other terms, then no</p>",
        "id": 273352187,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645895862
    },
    {
        "content": "<p>You get a diamond if you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective.monoid_pow</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective.comm_monoid</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 273428264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646000141
    },
    {
        "content": "<p>In this case of ulift, mathlib has the first instance, and a collection of loaded footguns (pretty much everything in the <code>function.injective</code> namespace that is more structured than <code>monoid</code>) ready to trick you into creating an instance like the second one</p>",
        "id": 273428337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646000246
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12126\">#12126</a> removes all the loaded footguns mentioned above</p>",
        "id": 274426935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646674172
    }
]