[
    {
        "content": "<p>In general I would view a one-line proof as simple, but this one generates a big proof term.  Is this the preferred proof?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">simple</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">simple</span>\n</pre></div>",
        "id": 163191558,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555077187
    },
    {
        "content": "<p>use <code>norm_num</code></p>",
        "id": 163191739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555077324
    },
    {
        "content": "<p>the auto proof should be something like <code>bit0_pos one_pos</code></p>",
        "id": 163191762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555077348
    },
    {
        "content": "<p>PS: why always with the reals? They are a pain to import</p>",
        "id": 163191833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555077380
    },
    {
        "content": "<p>By the way, this is one of the reasons I don't like too much blasty in my tactics. Like you say, a simple looking proof should actually be simple. Big super tactics break this connection - a tiny <code>by tidy</code> might be a huge term behind the scenes, and the only direct exposure you have to it is in compile times, which kill you in tiny distributed amounts until the library is so slow and there is no easy fix</p>",
        "id": 163192050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555077553
    },
    {
        "content": "<p>Ah that's much nicer, thanks Mario.  The reals are b/c I'm doing continuity proofs.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">simple</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">eq_true_intro</span> <span class=\"o\">(</span><span class=\"n\">bit0_pos</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">)))</span> <span class=\"n\">trivial</span>\n</pre></div>",
        "id": 163192911,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555078075
    },
    {
        "content": "<p><code>two_pos</code></p>",
        "id": 163193491,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1555078440
    },
    {
        "content": "<p><code>lemma simple : (0:ℝ) &lt; 2 := bit0_pos zero_lt_one</code></p>",
        "id": 163193657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555078529
    },
    {
        "content": "<p>Joe, why do you add anything to this line?</p>",
        "id": 163193681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555078547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> the somewhat longer proof was what was supplied by <code>norm_num</code>.</p>",
        "id": 163194758,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555079130
    },
    {
        "content": "<p>I wonder a bit why we don't call <code>dsimp</code> on the generated proofs themselves, for things like norm_num. We don't have all the relevant lemmas written for simplifying proofs themselves, but I think sometimes it's valuable --- especially if people are copying and pasting tactic generated proofs.</p>",
        "id": 163239606,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555116942
    },
    {
        "content": "<p>I've tried it, lean doesn't like to simplify proofs</p>",
        "id": 163241061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555119037
    },
    {
        "content": "<p>which means you have to deal with any cruft added by upstream tactics (this one is simp's fault)</p>",
        "id": 163241079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555119096
    },
    {
        "content": "<p>There are a lot of easy simplifications you can apply; one easy one I would like to do is if a subterm of P proves the same theorem T as P itself, then you can replace P with the subterm. This looks really obviously unprofessional in <code>#explode</code>, I'm thinking \"why are you still working? You did it already\". This is part of the metamath workflow, but somehow there isn't a good way to do this in lean and so <code>#print foo</code> just shows you crappy proofs most of the time</p>",
        "id": 163241284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555119374
    },
    {
        "content": "<p>Hmm... I'm pretty sure I've simplified proofs in the past. I've certainly made use of the lemmas</p>\n<div class=\"codehilite\"><pre><span></span>@[simp] lemma congr_arg_refl {α : Sort*} {β : Sort*} {f : α → β} {a : α} :\n  congr_arg f (eq.refl a) = eq.refl (f a) := rfl\n\n@[simp] lemma congr_fun_refl {α : Sort*} {β : Sort*} {f : α → β} {a : α} :\n  congr_fun (eq.refl f) a = eq.refl (f a) := rfl\n\n@[simp] lemma congr_refl_fun {α : Sort*} {β : Sort*} {f : α → β} {a₁ a₂ : α} (h : a₁ = a₂) :\n  congr (eq.refl f) h = congr_arg f h := rfl\n\n@[simp] lemma congr_refl_arg {α : Sort*} {β : Sort*} {f₁ f₂ : α → β} {a : α} (h : f₁ = f₂) :\n  congr h (eq.refl a) = congr_fun h a := rfl\n</pre></div>",
        "id": 163241546,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555119740
    },
    {
        "content": "<p>I wonder when you can and can't run the simplifier on proofs.</p>",
        "id": 163241554,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555119763
    },
    {
        "content": "<p>I've needed these lemmas times that a strange eq.rec has appeared, and I can't even see the underlying non-definitional equality that caused the problem, because it's stacked up inside a million <code>congr</code> and <code>eq.mpr</code> and <code>eq.symm</code>s, etc.</p>",
        "id": 163241586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555119832
    },
    {
        "content": "<p>I am pretty sure the problem is simp ignores arguments of prop type because it thinks \"proofs are irrelevant\"</p>",
        "id": 163243493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555122513
    },
    {
        "content": "<p>It's possible you can get it to sometimes trigger, but it doesn't work on large scale</p>",
        "id": 163243522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555122579
    }
]