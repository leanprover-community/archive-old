[
    {
        "content": "<p>If I have a typeclass with a funciton f : A -&gt; B , and for any argument type A it will have at most one instance declared, is there a way to mark it so that I don't have to annotate the return type at the call site? As an artificial example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- class provides one function f mapping α to some representation</span>\n<span class=\"n\">class</span> <span class=\"n\">to_representable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nat_to_string</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"s2\">&quot;I am a nat&quot;</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">int_to_list</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">])</span>\n\n<span class=\"c1\">-- These will be the only instances of this typeclass for nat and int respectively</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">to_representable</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">nat_to_string</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">to_representable</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">int_to_list</span> <span class=\"bp\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">to_representable</span>\n\n<span class=\"c1\">-- Have to call like this, explicitly passing β</span>\n<span class=\"n\">def</span> <span class=\"n\">with_type1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">string</span> <span class=\"o\">(</span><span class=\"mi\">999</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">with_type2</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Want to be able to call like this</span>\n<span class=\"n\">def</span> <span class=\"n\">without_type1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">999</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- type mnismatch application...</span>\n<span class=\"n\">def</span> <span class=\"n\">without_type2</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 160384086,
        "sender_full_name": "cbailey",
        "timestamp": 1552166065
    },
    {
        "content": "<p>Well we were just talking about the dangers of this in another thread, but you could move beta into the class as a field I guess</p>",
        "id": 160384116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552166151
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- class provides one function f mapping α to some representation</span>\n<span class=\"n\">class</span> <span class=\"n\">to_representable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_representable</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">to_representable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">to_representable</span><span class=\"bp\">.</span><span class=\"n\">β</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">to_representable</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nat_to_string</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"s2\">&quot;I am a nat&quot;</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">int_to_list</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">])</span>\n\n<span class=\"c1\">-- These will be the only instances of this typeclass for nat and int respectively</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">to_representable</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">nat_to_string</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">to_representable</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">int_to_list</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">to_representable</span>\n\n<span class=\"c1\">-- Want to be able to call like this</span>\n<span class=\"n\">def</span> <span class=\"n\">without_type1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">999</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">without_type2</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 160384457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552166700
    },
    {
        "content": "<p>alternatively, with <code>out_param</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- class provides one function f mapping α to some representation</span>\n<span class=\"n\">class</span> <span class=\"n\">to_representable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"n\">has_repr</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_representable</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">to_representable</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">to_representable</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nat_to_string</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"s2\">&quot;I am a nat&quot;</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">int_to_list</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">])</span>\n\n<span class=\"c1\">-- These will be the only instances of this typeclass for nat and int respectively</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">to_representable</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">nat_to_string</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">to_representable</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">int_to_list</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">to_representable</span>\n\n<span class=\"c1\">-- Want to be able to call like this</span>\n<span class=\"n\">def</span> <span class=\"n\">without_type1</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">999</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">without_type2</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 160384540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552166812
    },
    {
        "content": "<p>I was just about to ask what the syntax was to shoehorn the typeclass constraint in there. This is perfect.</p>",
        "id": 160384601,
        "sender_full_name": "cbailey",
        "timestamp": 1552166885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You mean the danger for the consumers of the API?</p>",
        "id": 160384605,
        "sender_full_name": "cbailey",
        "timestamp": 1552166902
    },
    {
        "content": "<p>I cheated a bit in the first version, because everything is in <code>Type 0</code></p>",
        "id": 160384608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552166926
    },
    {
        "content": "<p>when you allow for universes the free universe argument for beta can cause problems</p>",
        "id": 160384616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552166950
    },
    {
        "content": "<p>but at least with the stuff in the example, everything works without incident if you put universes in as in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"n\">class</span> <span class=\"n\">to_representable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 160384683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552167027
    },
    {
        "content": "<p>I'll keep that in mind. What exactly is out_param? I've seen it here and there, but searching the lean repo wasn't terribly enlightening.</p>",
        "id": 160384697,
        "sender_full_name": "cbailey",
        "timestamp": 1552167077
    },
    {
        "content": "<p>searching the chat will have better results</p>",
        "id": 160384708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552167113
    },
    {
        "content": "<p>Word.</p>",
        "id": 160384757,
        "sender_full_name": "cbailey",
        "timestamp": 1552167151
    },
    {
        "content": "<p><a href=\"https://gitter.im/leanprover_public/Lobby?at=5a6e31685a9ebe4f75e77351\" target=\"_blank\" title=\"https://gitter.im/leanprover_public/Lobby?at=5a6e31685a9ebe4f75e77351\">https://gitter.im/leanprover_public/Lobby?at=5a6e31685a9ebe4f75e77351</a></p>",
        "id": 160384958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552167540
    },
    {
        "content": "<p>searching the old chat has the best results :-)</p>",
        "id": 160384966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552167554
    },
    {
        "content": "<p>Oh, nice. I didn't even know there was an old chat.</p>",
        "id": 160385363,
        "sender_full_name": "cbailey",
        "timestamp": 1552168302
    },
    {
        "content": "<p>please don't post anything there :-)</p>",
        "id": 160385367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552168320
    },
    {
        "content": "<p>we all got bored of going back once a month saying \"we're now at the new chat\"</p>",
        "id": 160385412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552168340
    }
]