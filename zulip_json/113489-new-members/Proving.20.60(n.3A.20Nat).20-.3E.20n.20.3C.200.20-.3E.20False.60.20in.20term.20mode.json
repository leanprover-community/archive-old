[
    {
        "content": "<p>I'm trying to learn Lean and some type theory, but I haven't been able to figure this out. In AGDA I could case split on a proof of <code>n &lt; 0</code> and it'd detect it as an absurd pattern, but I wanted to understand what was going on on a deeper level (and without using tactics). I feel like I'll need a noConfusion or something like it, but I'm not sure exactly how</p>",
        "id": 266979343,
        "sender_full_name": "Sky",
        "timestamp": 1641410878
    },
    {
        "content": "<p>Whether or not this trick would work in Lean will depend on the exact definition of <code>&lt;</code> on nat. Let's take a look...</p>",
        "id": 266979446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641410927
    },
    {
        "content": "<p>OK so <code>&lt;</code> is <code>nat.lt</code> which is defined by <code>a &lt; b := a.succ &lt;= b</code> and <code>&lt;=</code> is defined recursively:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">less_than_or_equal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">less_than_or_equal</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">less_than_or_equal</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">less_than_or_equal</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266979712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641411059
    },
    {
        "content": "<p>So it should work. And it does!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266979793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641411107
    },
    {
        "content": "<p>Thanks! I did want it in term mode, but the #print output doesn't look too bad. I'll take a closer look</p>",
        "id": 266980237,
        "sender_full_name": "Sky",
        "timestamp": 1641411349
    },
    {
        "content": "<p>And this works too!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 266980543,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641411493
    },
    {
        "content": "<p>I've read about that dot here on Zulip before. Does it have an equivalent in lean4?</p>",
        "id": 266980983,
        "sender_full_name": "Sky",
        "timestamp": 1641411736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"458698\">@Sky</span> </p>\n<p>If you really want to expose the gears, you need something like this; the second one is maybe a bit easier since it uses a concrete value and <code>&lt;=</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n<span class=\"n\">Nat.le.recOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n<span class=\"n\">h</span>\n<span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">one_eq_zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.noConfusion</span> <span class=\"n\">one_eq_zero</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">succ_eq_zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.noConfusion</span> <span class=\"n\">succ_eq_zero</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n<span class=\"n\">Nat.le.recOn</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">False</span><span class=\"o\">)</span>\n<span class=\"n\">h</span>\n<span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">one_eq_zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.noConfusion</span> <span class=\"n\">one_eq_zero</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">succ_eq_zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.noConfusion</span> <span class=\"n\">succ_eq_zero</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266984283,
        "sender_full_name": "Chris B",
        "timestamp": 1641413272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"458698\">@Sky</span> There's now a <code>nomatch</code> keyword:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>The syntax seems to be just like <code>match</code>, but it has no alternatives.</p>",
        "id": 266984289,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641413275
    },
    {
        "content": "<p>The Lean 3 equivalent is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"kd\">end</span>\n</code></pre></div>\n<p>but since Lean 4 does not use the <code>end</code> keyword, it has a new syntactic construct.</p>",
        "id": 266984814,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641413521
    }
]