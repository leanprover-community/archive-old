[
    {
        "content": "<p>Hi, I'm new here, I'm Ilmu. I've got a BS in math and am currently applying for a MS.</p>\n<p>I'm sorry to ask before I finish reading the resources that you already point to (like the mathlib paper) but what would be the recommended way to read the library / try to reimplement parts of it / use it to solve exercises (like a munkres topology course).</p>\n<p>Part of the reason I ask is an analogy with haskell; if Lean is to Mathematics what Haskell is to Programming then mathlib is like prelude, and the best haskell tutorial I ever did was to reimplement prelude (fp-course from data61). Has anyone tried to make some exercises or introductory material along these lines?</p>\n<p>Thank you in advance :)</p>",
        "id": 192721524,
        "sender_full_name": "ilmu",
        "timestamp": 1585859247
    },
    {
        "content": "<p>The Natural Number Game sounds pretty similar to this, although it is in a controlled environment so that the proving is more game-like</p>",
        "id": 192722233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585859558
    },
    {
        "content": "<p>Cool, I'll start with this.</p>",
        "id": 192722453,
        "sender_full_name": "ilmu",
        "timestamp": 1585859676
    },
    {
        "content": "<p>If you want to learn how to read mathlib itself, you could pick a simple file like <code>data.list.basic</code> and try to follow the definitions and proofs. If you don't know enough syntax for that yet consult TPIL (theorem proving in lean)</p>",
        "id": 192722621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585859761
    },
    {
        "content": "<p>it's a steeper learning curve but worth it especially if you intend to eventually contribute to mathlib</p>",
        "id": 192722732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585859804
    },
    {
        "content": "<p>I aim to get some tutorials up within the next week or two implementing the basics of eg group theory or equivalence relations</p>",
        "id": 192728184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585862480
    },
    {
        "content": "<p>I still don't know whether I should put them in the tutorial project or just post them here in #new members</p>",
        "id": 192728235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585862516
    },
    {
        "content": "<p>Hey so I was almost finished with the natural number game (level 6 of advanced addition and I'd finished the other side as well) when the lean guy froze and it looks like I'll have to refresh but if I do I think I'll lose my state.. is there a cheatcode to open all the worlds?</p>",
        "id": 192745100,
        "sender_full_name": "ilmu",
        "timestamp": 1585873389
    },
    {
        "content": "<p>is this \"the tutorial project\" <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean\" title=\"https://github.com/ImperialCollegeLondon/M40001_lean\">https://github.com/ImperialCollegeLondon/M40001_lean</a> ?</p>\n<p>or is it the natural number game or something completely different?</p>",
        "id": 192745221,
        "sender_full_name": "ilmu",
        "timestamp": 1585873466
    },
    {
        "content": "<p>anyway, also wanted to say: thank you Kevin for these great resources! and for resolving my analysis paralysis w.r.t. which of these tools was most suitable to invest my time in (Edward Kmett had already told me that Lean was the best but at the time they were in the middle of rewriting it and Coq was the only thing that had any learning resources so I ended up just procrastinating).</p>",
        "id": 192745368,
        "sender_full_name": "ilmu",
        "timestamp": 1585873595
    },
    {
        "content": "<p>Oh and btw, while the natural number game is simple enough to kind of just steamroll (but it is very educational nevertheless, perfect introduction!), anyway, I think the left column would be a super useful resource if it had wider scope and was independent (i.e. tactic cheatsheet).</p>\n<p>The thing I needed to be able to do the exercise sheets in the M40001 repo was basically this kind of api reference for tactics ..and in general I think this is the most useful thing to have in any kind of programming ecosystem.</p>\n<p>I ran into this problem when attempting to do some Coq exercises in the past, the author of the exercises had shown a few tactics which worked for the first few problems but then I got stuck and when I finally gave up and looked at the solutions, it turned out that suddenly you needed to know tactics that had never appeared before... this completely blew my morale and I pretty much decided Coq is stupid (which it is most definitely is not, but you know what I mean).</p>\n<p>Lean is already miles easier to get started with (although agda is probably still easier than lean) but I foresee some difficulties, once I become intermediate, with keeping track of all the different tactics and finding out which options I have in a context.</p>\n<p>I think these are especially good (but obviously it'll be somewhat differently organized in the lean context) :</p>\n<ul>\n<li><a href=\"https://cljs.info/cheatsheet/\" title=\"https://cljs.info/cheatsheet/\">https://cljs.info/cheatsheet/</a></li>\n<li><a href=\"https://hoogle.haskell.org/\" title=\"https://hoogle.haskell.org/\">https://hoogle.haskell.org/</a></li>\n</ul>",
        "id": 192747475,
        "sender_full_name": "ilmu",
        "timestamp": 1585875594
    },
    {
        "content": "<p>I guess this is it: <a href=\"https://leanprover-community.github.io/mathlib_docs/\" title=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 192748159,
        "sender_full_name": "ilmu",
        "timestamp": 1585876208
    },
    {
        "content": "<p>Good enough, you guys are awesome (y)</p>",
        "id": 192748181,
        "sender_full_name": "ilmu",
        "timestamp": 1585876234
    },
    {
        "content": "<p>I feel like the most important thing, even more than tactics, is knowing how to understand Lean terms?  Give a man a tactic, and you'll feed him for a day. Teach a man to understand the terms tactics construct, and you've avoided weeks of angst in the debugger</p>",
        "id": 192748947,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585877138
    },
    {
        "content": "<p>aren't the terms just like normal functional programming though?</p>\n<p>also wow the manual is superb, I'm more and more impressed!</p>",
        "id": 192749199,
        "sender_full_name": "ilmu",
        "timestamp": 1585877496
    },
    {
        "content": "<p>Yes, they are. Ignore what I wrote : ) I did not see your background with functional programming</p>",
        "id": 192749873,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1585878438
    },
    {
        "content": "<blockquote>\n<p>I ran into this problem when attempting to do some Coq exercises in the past, the author of the exercises had shown a few tactics which worked for the first few problems but then I got stuck and when I finally gave up and looked at the solutions, it turned out that suddenly you needed to know tactics that had never appeared before... this completely blew my morale and I pretty much decided Coq is stupid (which it is most definitely is not, but you know what I mean).</p>\n</blockquote>\n<p>I'm sorry you had this experience with Coq. Which tutorial(s) were you following back then? For me, I was following <a href=\"https://softwarefoundations.cis.upenn.edu/\" title=\"https://softwarefoundations.cis.upenn.edu/\">Software Foundations</a> and only encountered this problem once in the first 3 books of the series (never got around to trying the 4th). But even then, an online friend of mine later told me that (s)he was able to solve that particular problem using only the tactics taught up to that point, albeit in a slightly convoluted way.</p>",
        "id": 192755105,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1585885507
    },
    {
        "content": "<p>There is an entire #teaching stream and any comments about resources that are missing or could be better would be definitely of interest there</p>",
        "id": 192765778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585898516
    },
    {
        "content": "<p>i'm sure you've seen it already, but <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a> is also a good introduction for those who are already somewhat familiar with functional programming. if you know a bit of coq or agda, much of it may not be new to you, so perhaps it can also serve as a reference manual for a good portion of the lean language itself.</p>",
        "id": 192785583,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585910435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264734\">@Donald Sebastian Leung</span> it was a (remote) summer school, I don't have the exercise sheet anymore, sorry.</p>",
        "id": 192863816,
        "sender_full_name": "ilmu",
        "timestamp": 1585947875
    }
]