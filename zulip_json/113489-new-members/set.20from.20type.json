[
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n</code></pre></div>\n\n\n<p>How do I make the set <code>{a, b, c}</code>?</p>",
        "id": 205880977,
        "sender_full_name": "Iocta",
        "timestamp": 1596527550
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">thing</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">thing</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205881010,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596527623
    },
    {
        "content": "<p>oh, that was easy :-)</p>",
        "id": 205881077,
        "sender_full_name": "Iocta",
        "timestamp": 1596527684
    },
    {
        "content": "<p>is it possible to do it in general, such as for infinite sets?</p>",
        "id": 205881375,
        "sender_full_name": "Iocta",
        "timestamp": 1596528002
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 205881644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596528168
    },
    {
        "content": "<p>do you have an example?</p>",
        "id": 205881657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596528179
    },
    {
        "content": "<p>the set of all the naturals</p>",
        "id": 205881683,
        "sender_full_name": "Iocta",
        "timestamp": 1596528201
    },
    {
        "content": "<p>or do we use types there instead</p>",
        "id": 205881769,
        "sender_full_name": "Iocta",
        "timestamp": 1596528271
    },
    {
        "content": "<p><code>set.univ</code></p>",
        "id": 205881785,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596528294
    },
    {
        "content": "<p>cool</p>",
        "id": 205881832,
        "sender_full_name": "Iocta",
        "timestamp": 1596528353
    },
    {
        "content": "<p>I don't really understand <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.univ\">docs#set.univ</a> by looking at its doc or source.</p>",
        "id": 206342129,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596882424
    },
    {
        "content": "<p>Sets are represented by their characteristic predicate, so the definition of <code>set.univ</code> means that <code>(x : α) ∈ set.univ</code> iff <code>(λ a, true) x</code> holds, i.e. <code>set.univ</code> is the set of all <code>x : α</code>.</p>",
        "id": 206342265,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1596882685
    },
    {
        "content": "<p>Thanks, that makes sense. Should have read its implementation together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem\">docs#set.mem</a> 's .</p>\n<p>What does <code>univ</code> stand for here? \"universal\"?</p>",
        "id": 206342953,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596884034
    },
    {
        "content": "<p>universe</p>",
        "id": 206344037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596886056
    },
    {
        "content": "<p>Or universal set perhaps</p>",
        "id": 206344218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596886366
    },
    {
        "content": "<p>I've checked other concepts in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set\">docs#set</a>, there're 3 more that I don't understand :</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_of\">docs#set_of</a> : why is it need?</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sUnion\">docs#set.sUnion</a>: any reference for the notation ⋃₀ ?</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.is_lawful_singleton\">docs#set.is_lawful_singleton</a>&gt; any reference for the concept of a lawful singleton ?</li>\n</ul>\n<p>(I understand what they mean by the equations but don't know the references for the concepts)</p>",
        "id": 206346501,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596890274
    },
    {
        "content": "<p>What do you mean by reference? If you're looking for examples of e.g. sUnion, you might find Ch.4 of MiL helpful: <a href=\"https://leanprover-community.github.io/mathematics_in_lean/sets_functions_and_relations.html\">https://leanprover-community.github.io/mathematics_in_lean/sets_functions_and_relations.html</a></p>",
        "id": 206348452,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1596893735
    },
    {
        "content": "<p>By references I mean references outside of Lean world and in the ordinary math world, I could not find references for them by googling.</p>",
        "id": 206348849,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596894464
    },
    {
        "content": "<p>Thanks for the link in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> , <code>sUnion_eq_bUnion</code> is helpful.</p>",
        "id": 206348949,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596894622
    },
    {
        "content": "<p><code>set_of</code> is the constructor of sets, you could use an explicit type declaration to make a set from a function to Prop but <code>set_of</code> is more explicit, and the notation <code>{ | }</code> is defined as <code>set_of</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">set_of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">even</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">even</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">l</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 206356300,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596907083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you remember why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sUnion\">docs#set.sUnion</a> is in Lean and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sInter\">docs#set.sInter</a> is in Mathlib? (<code>git blame</code> traces back to your commits in 2017: <a href=\"https://github.com/leanprover-community/lean/commit/19a919061f793eed772d1090cfe07946b99432da\">lean</a>, <a href=\"https://github.com/leanprover-community/mathlib/commit/deb168147d4ede8848940a797753f026648501a4\">mathlib</a> ) </p>\n<p>Should it stay this way?</p>",
        "id": 206926458,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597410056
    },
    {
        "content": "<p>The commit to lean is marked \"response to review\" and seems to be referring to <a href=\"https://github.com/leanprover/lean/pull/1567#discussion_r114865336\">https://github.com/leanprover/lean/pull/1567#discussion_r114865336</a> . It appears that I added <code>sUnion</code> and <code>sInter</code> in this commit, renaming <code>Union</code> to <code>sUnion</code> (and a matching <code>Inter</code> did not exist before that commit)</p>",
        "id": 206929226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597412008
    },
    {
        "content": "<p>The source of the asymmetry appears to be <a href=\"https://github.com/leanprover/lean/commit/5e8572b407d7ecb8780c7cc1f5cf80ae2c373648\">https://github.com/leanprover/lean/commit/5e8572b407d7ecb8780c7cc1f5cf80ae2c373648</a>, which was PR'd by me, I'm not sure why. Maybe it was being used by the hash_map implementation</p>",
        "id": 206931973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597413612
    },
    {
        "content": "<p>Anyway to answer your  question I don't think we need sets in lean core at all, except for <code>set_of</code> which has special parser support</p>",
        "id": 206932085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597413692
    }
]