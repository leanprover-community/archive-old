[
    {
        "content": "<p>could I get a hint how to make progress here:</p>\n<p><a href=\"https://gist.github.com/luxbock/853bdcdde0f333502055c6913fc91e9c\" target=\"_blank\" title=\"https://gist.github.com/luxbock/853bdcdde0f333502055c6913fc91e9c\">https://gist.github.com/luxbock/853bdcdde0f333502055c6913fc91e9c</a></p>",
        "id": 133561165,
        "sender_full_name": "Olli",
        "timestamp": 1536397834
    },
    {
        "content": "<p>You can't make progress without some classical axiom.</p>",
        "id": 133561182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536397917
    },
    {
        "content": "<p>please provide a minimum <em>working</em> example (MWE).</p>",
        "id": 133561221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536397965
    },
    {
        "content": "<p>Most directly, <code>classical.by_contradiction</code></p>",
        "id": 133561226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536397987
    },
    {
        "content": "<p>Or, wait. Also what Kenny said. Where did <code>a</code> come from?</p>",
        "id": 133561272,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536398068
    },
    {
        "content": "<p>sorry, I'll edit to include the full context and also my attempt with <code>by_contradiction</code> where I got stuck</p>",
        "id": 133561286,
        "sender_full_name": "Olli",
        "timestamp": 1536398110
    },
    {
        "content": "<p>please provide a <em>minimum</em> working example (MWE).</p>",
        "id": 133561341,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536398202
    },
    {
        "content": "<p><a href=\"https://gist.github.com/luxbock/853bdcdde0f333502055c6913fc91e9c\" target=\"_blank\" title=\"https://gist.github.com/luxbock/853bdcdde0f333502055c6913fc91e9c\">https://gist.github.com/luxbock/853bdcdde0f333502055c6913fc91e9c</a> updated</p>",
        "id": 133561389,
        "sender_full_name": "Olli",
        "timestamp": 1536398290
    },
    {
        "content": "<p>I don't think that's what you want to prove.</p>",
        "id": 133561447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536398403
    },
    {
        "content": "<p>This <code>variable a : α</code> isn't doing what you want--now you have to prove <code>p a</code> for <em>every</em> <code>a</code></p>",
        "id": 133561512,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536398534
    },
    {
        "content": "<p>this is one of the exercises from here:<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html</a></p>",
        "id": 133561518,
        "sender_full_name": "Olli",
        "timestamp": 1536398568
    },
    {
        "content": "<p>so my attempt is clearly wrong (it does not work after all), but I don't know how to make progress beyond <code>by_contradiction (λ ha, _)</code></p>",
        "id": 133561524,
        "sender_full_name": "Olli",
        "timestamp": 1536398617
    },
    {
        "content": "<p>I don't know how to go about getting a <code>p a</code> from what I have:</p>\n<div class=\"codehilite\"><pre><span></span>nanpx : (∀ (x : α), p x → false) → false,\nhnpa : ¬p a\n⊢ false\n</pre></div>",
        "id": 133561578,
        "sender_full_name": "Olli",
        "timestamp": 1536398688
    },
    {
        "content": "<blockquote>\n<p>Notice that the declaration <code>variable a : α</code> amounts to the assumption that there is at least one element of type <code>α</code>. This assumption is needed in the <strong>second</strong> example, as well as in the <strong>last two</strong>.</p>\n</blockquote>",
        "id": 133561580,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536398693
    },
    {
        "content": "<p>your example is neither the second nor the last two</p>",
        "id": 133561587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536398727
    },
    {
        "content": "<p>You can never get <code>p a</code>, because <code>a</code> is an arbitrary member of <code>α</code>, and it might not be one for which <code>p</code> holds.</p>",
        "id": 133561594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536398752
    },
    {
        "content": "<p>So line 11 <code>suffices hpa : p a, from ...</code> is already the wrong way to go.</p>",
        "id": 133561638,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536398814
    },
    {
        "content": "<p>The way to do this is to use <code>by_contradiction</code> at the top level--suppose <code>¬ (∃ x, p x)</code>, then what?</p>",
        "id": 133561691,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536398898
    },
    {
        "content": "<p>thanks, I'll try to see where backtracking to beginning gets me. although now that <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  commented about the <code>variable</code> declaration, I'm a little bit confused about if I need to change anything outside this example</p>",
        "id": 133561703,
        "sender_full_name": "Olli",
        "timestamp": 1536398987
    },
    {
        "content": "<p>oh I think I understand what you mean, I don't need the <code>variable</code> declaration for this particular example</p>",
        "id": 133561756,
        "sender_full_name": "Olli",
        "timestamp": 1536399035
    },
    {
        "content": "<p>I just copy/pasted the exercises from the page and I'm filling in the <code>sorry</code>'s</p>",
        "id": 133561761,
        "sender_full_name": "Olli",
        "timestamp": 1536399056
    },
    {
        "content": "<p>actually that can't be the case, so yeah I am confused about what you meant <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 133561824,
        "sender_full_name": "Olli",
        "timestamp": 1536399215
    },
    {
        "content": "<p>You don't need <code>variable a : α</code></p>",
        "id": 133561866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536399272
    },
    {
        "content": "<p>I think I need it, because <code>p</code> uses it</p>",
        "id": 133561876,
        "sender_full_name": "Olli",
        "timestamp": 1536399349
    },
    {
        "content": "<p>oh sorry, I now realize what you meant</p>",
        "id": 133561917,
        "sender_full_name": "Olli",
        "timestamp": 1536399377
    },
    {
        "content": "<p>got it, thanks for the help</p>",
        "id": 133562068,
        "sender_full_name": "Olli",
        "timestamp": 1536399764
    },
    {
        "content": "<p>I'm doing the same exercise atm!<br>\nI found some disparities in mathlib's intuitionist and classical namespaces, namely in intuitionist we have this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">not_forall</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">imp_symm</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">nx</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nx</span><span class=\"bp\">.</span><span class=\"n\">imp_symm</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"n\">not_forall_of_exists_not</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">not_forall_not</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">not_exists</span><span class=\"bp\">;</span>\n<span class=\"n\">exact</span> <span class=\"n\">not_iff_comm</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">not_exists</span>\n</pre></div>\n\n\n<p>but in classical only this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">not_forall</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_forall</span>\n</pre></div>\n\n\n<p>So from <code>classical.not_forall.mp h</code> with <code>h: ¬ ∀ x, ¬ p x</code> we get a double negation. Now, I know that <code>¬¬p ↔ p</code> is easy to prove from classical axioms, but despite how common its usage seems to be, there is no theorem for it built into the library. Is there some reason why double-negation is redundant, or should I make a PR to add it?</p>",
        "id": 133587708,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1536452875
    },
    {
        "content": "<p>lean and mathlib are pretty huge, it would surprise me if <code>¬¬p ↔ p</code> were not there already.</p>",
        "id": 133587798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536453017
    },
    {
        "content": "<p>The idea is that you should use the \"intuitionist\" theorem and use <code>classical.dec</code> to fulfill the decidability assumptions</p>",
        "id": 133587800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536453039
    },
    {
        "content": "<p>(aka <code>classical.prop_decidable</code>)</p>",
        "id": 133587811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536453071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <code>#find</code> tells me that there are versions for <code>decidable p</code>, but not for generic propositions in classical reasoning</p>",
        "id": 133587813,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1536453102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> oh i see, so i should use all the <code>decidable</code> stuff with classical reasoning and then that one axiom to make it work? Ok</p>",
        "id": 133587853,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1536453133
    },
    {
        "content": "<p>This is why you often see <code>local attribute [instance] classical.prop_decidable</code> at the top of files that do classical reasoning</p>",
        "id": 133587871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536453210
    },
    {
        "content": "<p>I've taken to using <code>local attribute [instance, priority 1] classical.prop_decidable</code></p>",
        "id": 133587881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536453242
    },
    {
        "content": "<p>because I ran into situations where this local attribute clobbered some decidability result which type class inference had given me and I ended up with typeclass problems.</p>",
        "id": 133587918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536453281
    },
    {
        "content": "<p>is <code>priority 0</code> problematic?</p>",
        "id": 133587936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536453359
    },
    {
        "content": "<p>I see, this attribute is indeed used in <a href=\"https://github.com/leanprover/lean/blob/master/library/init/classical.lean#L90\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/classical.lean#L90\"><code>classical.lean</code></a></p>",
        "id": 133588002,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1536453458
    },
    {
        "content": "<blockquote>\n<p>is <code>priority 0</code> problematic?</p>\n</blockquote>\n<p>my bad, I just went back to the file where some undergrads were having trouble and indeed I fixed it with <code>priority 0</code></p>",
        "id": 133588287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536454198
    },
    {
        "content": "<p>is it possible to solve the barber paradox exercise without using <code>classical</code>?https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html</p>",
        "id": 133703971,
        "sender_full_name": "Olli",
        "timestamp": 1536631985
    },
    {
        "content": "<p>yes</p>",
        "id": 133704194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536632385
    },
    {
        "content": "<p>can I have a hint? this is what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">saa</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">nsaa</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 133704251,
        "sender_full_name": "Olli",
        "timestamp": 1536632447
    },
    {
        "content": "<p>hint: solve exercise 3.7.2</p>",
        "id": 133704259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536632467
    },
    {
        "content": "<p>also your problem statement isn't quite right for the barber paradox</p>",
        "id": 133704266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536632513
    },
    {
        "content": "<p>thanks, looks like I actually overlooked 3.7.2, so I'll go back to that and try to figure it out from there (and also fix what you mentioned)</p>",
        "id": 133704322,
        "sender_full_name": "Olli",
        "timestamp": 1536632595
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {α} (b : α) (r : α → α → Prop)\n  (H : ∀ x : α, r b x ↔ ¬ r x x) : false := sorry\n</pre></div>",
        "id": 133704328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536632622
    },
    {
        "content": "<blockquote>\n<p>hint: solve exercise 3.7.2</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, Your hint here helped me. Thanks again!</p>",
        "id": 180192076,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1573172970
    },
    {
        "content": "<p>For any folks who come back to this thread by searching for \"barber\"...</p>\n<p>In 4.6.3 (the barber paradox) we're given the following to start:</p>\n<div class=\"codehilite\"><pre><span></span>h : ∀ x : men, shaves barber x ↔ ¬ shaves x x\n</pre></div>\n\n\n<p>But I kept thinking, what can I apply this to??? We'll, <code>barber</code> is a <code>men</code> so... this is valid:</p>\n<div class=\"codehilite\"><pre><span></span>h barber\n</pre></div>\n\n\n<p>It gives us a value of type:</p>\n<div class=\"codehilite\"><pre><span></span>shaves barber barber ↔ ¬shaves barber barber\n</pre></div>\n\n\n<p>And for the rest, as <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> mentions, consider 3.7.2.</p>",
        "id": 180192387,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1573173278
    }
]