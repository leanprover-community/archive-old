[
    {
        "content": "<p>Couldn't find a say to eliminate <code>x : X</code> into <code>false</code> given <code>#X = 0</code>. <code>library_search</code>/<code>suggest</code> aren't helping much, have I missed something in the docs?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pempty</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">κ</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- How do I eliminate `x`?</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206719085,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597250633
    },
    {
        "content": "<p>Looks like it may be missing. See the proof of <code>mk_emptyc_iff</code></p>",
        "id": 206719775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597250916
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">cardinal</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n   <span class=\"n\">ne_zero_iff_nonempty</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 206719813,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597250931
    },
    {
        "content": "<p>ahh it's phrased in terms of ≠</p>",
        "id": 206719876,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597250960
    },
    {
        "content": "<p>heh, <code>ne_zero_iff_nonempty</code></p>",
        "id": 206723693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597252879
    },
    {
        "content": "<p>looks like someone missed a trick</p>",
        "id": 206723703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597252886
    },
    {
        "content": "<p>Oh! The issue is that nobody knows the canonical way to say a type is empty! I vote for <code>X -&gt; false</code> FWIW</p>",
        "id": 206723757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597252916
    },
    {
        "content": "<p>Why not rename <code>pempty</code> to <code>false</code> and use it everywhere? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p>It would seem a bit weird initially but, if Lean can infer the sort correctly most cases, it should work great.</p>",
        "id": 206724784,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597253312
    },
    {
        "content": "<p>it can't though</p>",
        "id": 206727095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597254450
    },
    {
        "content": "<p>the reason why none of the p* definitions are used by default is because it makes universe inference less reliable than it normally is</p>",
        "id": 206727206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597254493
    }
]