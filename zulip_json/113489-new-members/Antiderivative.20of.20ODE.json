[
    {
        "content": "<p>I've been working on a lean file where I prove the antiderivative for a bunch of functions, <a href=\"#narrow/stream/113488-general/topic/Antiderivative.20in.20Lean\">here is the topic </a>, and I'm at the point where I want to do analytical solutions to ODEs. I wanted to start with the simple case of y' = y, but I found that the general solution algorithm that the other antiderivative proofs followed isn't enough for this. Any suggestions are appreciated. </p>\n<p>Here is the set-up that I had for y' = y</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">anti_deriv_self</span>\n<span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">real.exp</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 288811261,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1657203080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"474115\">@Max Bobbin</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_deriv</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">anti_deriv_self</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">real.exp</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">has_deriv_at_mul_const</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">neg.exp.mul</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">ring_nf</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">ring_nf</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- need another variant of MVT working with right endpoints</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">constant_of_has_deriv_right_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_deriv_within_at</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at.continuous_within_at</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set.right_mem_Icc</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">congr_arg</span> <span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">real.exp_add</span><span class=\"o\">],</span>\n    <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288825312,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657209017
    },
    {
        "content": "<p>The tool here is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/constant_of_has_deriv_right_zero\">docs#constant_of_has_deriv_right_zero</a>, that a function with zero derivative is constant.  But this exercise reveals that some variants of that theorem are missing from the library.  There should be a version where the conclusion is equality with the right rather than left endpoint of the interval (needed for the case <code>x ≤ 0</code>), and there should be a version assuming <code>has_deriv_at</code> rather than <code>continuous_within_at</code> + <code>has_deriv_within_at</code>.  Feel free to add these to the library!</p>",
        "id": 288825771,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657209193
    },
    {
        "content": "<p>Here's the most commonly used special case, which should be its own lemma and which would clean up the proof above quite a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">constant_of_has_deriv_right_zero'</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 288826573,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657209552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Thank you! This is helpful! I will use this and update this thread with what I achieve</p>",
        "id": 288843691,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1657217066
    },
    {
        "content": "<p>what does the \"@\" symbol do for the proof?</p>",
        "id": 289129551,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1657495613
    },
    {
        "content": "<p>Makes all arguments explicit</p>",
        "id": 289129563,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657495666
    },
    {
        "content": "<p>Ah ok, thank you!</p>",
        "id": 289129607,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1657495708
    }
]