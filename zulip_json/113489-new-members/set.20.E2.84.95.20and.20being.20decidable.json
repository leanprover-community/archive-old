[
    {
        "content": "<p>I want to be able to say \"either x is in K or not, so we split up into cases\".<br>\nHere's a MWE of the obstacle:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span><span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))(</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">K</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 269207542,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643083655
    },
    {
        "content": "<p>Depending on what you're doing, you can have it take an additional argument <code>[decidable_pred (∈ K)]</code>.</p>",
        "id": 269207745,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643083917
    },
    {
        "content": "<p>If this is inside a proof and you don't care about decidability, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#classical\">tactic#classical</a> to introduce the instances that come from the axiom of choice</p>",
        "id": 269207813,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643083960
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  I got the first suggestion to work. Any more detail on the second suggestion?</p>",
        "id": 269207936,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643084142
    },
    {
        "content": "<p>If you're in a tactic proof, you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now every proposition has a `decidable` instance</span>\n  <span class=\"n\">rest</span><span class=\"bp\">-</span><span class=\"n\">of</span><span class=\"bp\">-</span><span class=\"n\">proof</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269208105,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643084295
    },
    {
        "content": "<p>Is there a way when I'm not in tactic mode as well? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 269208196,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643084437
    },
    {
        "content": "<p>I suppose you can jump in and out of tactic mode with <code>by classical; exact ...expression...</code></p>",
        "id": 269208723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643085063
    },
    {
        "content": "<p>Though there are other things you can do here, too. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.by_cases\">docs#classical.by_cases</a> might be useful, though written as <code>@classical.by_cases (x \\in K) _ (case1) (case2)</code></p>",
        "id": 269208741,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643085104
    },
    {
        "content": "<p>You don't need the <code>@</code> if you give each argument to each case a type, like you do in your MWE</p>",
        "id": 269208792,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643085132
    },
    {
        "content": "<p>Ah... does the <code>@</code> do something special here?</p>",
        "id": 269208793,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643085132
    },
    {
        "content": "<p>It causes the two implicit arguments to become explicit</p>",
        "id": 269208811,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643085143
    },
    {
        "content": "<p>Oh, sorry, I didn't notice <code>classical.by_cases</code> was only for <code>Prop</code>-valued things.</p>",
        "id": 269208840,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643085192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347475\">@Bjørn Kjos-Hanssen</span> Maybe this is duplicating something in the library and I didn't need to write it, but here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">classical.by_cases'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">h1</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">h2</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 269208946,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643085351
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">classical.by_cases'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">h1</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">h2</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span><span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n<span class=\"n\">classical.by_cases'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))(</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">K</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 269209007,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643085402
    },
    {
        "content": "<p>And this is what that looks like when <code>p</code> is implicit, too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">classical.by_cases'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">h1</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">h2</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span><span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n<span class=\"n\">classical.by_cases'</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))(</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">K</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 269209124,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643085562
    },
    {
        "content": "<p>You may also want to try <code>open_locale classical</code></p>",
        "id": 269209514,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643086170
    },
    {
        "content": "<p>And you probably want to use <code>if</code> instead of <code>(em (x ∈ K)).by_cases</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">K</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 269210502,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643087390
    },
    {
        "content": "<p>Thanks both, for the thorough answers <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span></p>",
        "id": 269211737,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643088788
    },
    {
        "content": "<p>This is probably obvious but if I use <code>exists.elim</code> to get my hands on such an <code>f</code>, how would I now derive <code>f y = 0</code> if I have a proof of <code>y \\in K</code> available?</p>",
        "id": 269347439,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643157512
    },
    {
        "content": "<p>Say \"if h : y in K ... then _ else _\"</p>",
        "id": 269347727,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643157753
    },
    {
        "content": "<p>Which is nice syntax for the underlying dependent if then else called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dite\">docs#dite</a></p>",
        "id": 269347749,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643157772
    },
    {
        "content": "<p>Ah, I misunderstood. exists.elim isn't dependent, you lose that property. You retain it if you use exists.some though, with exists.some_spec holding the property</p>",
        "id": 269347883,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643157863
    },
    {
        "content": "<p>I think I'm just forgetting some basic: if we have (in pseudocode)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>and we also have a proof <code>h:p a</code> then how do we prove that <code>f a = y</code>?</p>",
        "id": 269348194,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643158093
    },
    {
        "content": "<p><code>by rw [if_pos h]</code></p>",
        "id": 269348228,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643158139
    },
    {
        "content": "<p>You're also implying that at some point you got an <code>a</code>. So:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ite_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269348335,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643158206
    },
    {
        "content": "<p>Probably, term mode <code>if_pos h</code> will work, since it will be definitionally true</p>",
        "id": 269348369,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643158251
    },
    {
        "content": "<p>Sorry, actually it's more like I need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">y</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">z</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>in other words the output of <code>f</code> depends on what the proof <code>h</code> is... and then want to use <code>h</code> to prove <code>f a = y h</code>.</p>",
        "id": 269348754,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643158522
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/dif_pos\">docs#dif_pos</a></p>",
        "id": 269348850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643158590
    },
    {
        "content": "<p>Fantastic... although <code>dif_pos</code> seems like a highly unintuitive name here <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 269349006,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643158724
    },
    {
        "content": "<p>ite -&gt; if_pos, dite -&gt; dif_pos</p>",
        "id": 269349667,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643159202
    },
    {
        "content": "<p>where <code>d</code> is for dependent</p>",
        "id": 269349697,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643159225
    }
]