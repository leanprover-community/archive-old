[
    {
        "content": "<p>Here's a MWE: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">pp1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()}}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}}</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Golf away! (This came up in the middle of some category theory which I'm hoping to make into a kata)</p>",
        "id": 197082611,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589149721
    },
    {
        "content": "<p><code>dec_trivial</code> should work but doesn't seem to</p>",
        "id": 197083348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150534
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n\n\n<p>doesn't either.</p>",
        "id": 197083359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150560
    },
    {
        "content": "<p>that instance is classical - does that affect things?</p>",
        "id": 197083411,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589150678
    },
    {
        "content": "<p>they don't work because <code>set X</code> doesn't have decidable equality</p>",
        "id": 197083412,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589150684
    },
    {
        "content": "<p>You need decidable equality I think?</p>",
        "id": 197083414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150687
    },
    {
        "content": "<p>Then why doesn't dec_trivial work for Bhavik's lemma?</p>",
        "id": 197083421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150715
    },
    {
        "content": "<p>that doesn't sound right though</p>",
        "id": 197083423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150717
    },
    {
        "content": "<p>the statement <code>x = \\empty</code> is undecidable</p>",
        "id": 197083424,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589150718
    },
    {
        "content": "<p><code>example (X : Type) [decidable_eq X] [fintype X] : fintype (set X) := by apply_instance</code> works</p>",
        "id": 197083429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150734
    },
    {
        "content": "<p>because <code>x</code> can be the set of counter-examples to Riemann's hypothesis</p>",
        "id": 197083430,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589150737
    },
    {
        "content": "<p>You should not need decidable equality to produce this set, it's just <code>powerset fintype.univ</code></p>",
        "id": 197083435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150753
    },
    {
        "content": "<p>Aah, but maybe it doesn't have decidable equality!</p>",
        "id": 197083477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150769
    },
    {
        "content": "<p>I'm totally okay with noncomputable/classical proofs for this, by the way</p>",
        "id": 197083483,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589150790
    },
    {
        "content": "<p><code>example (X : Type) [decidable_eq X] [fintype X] : decidable_eq (set X) := by apply_instance -- fails</code></p>",
        "id": 197083485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150792
    },
    {
        "content": "<p>The only requirement of <code>fintype</code> is that you have a constructible list of elements that are all (classically) provably exhaustive and distinct from each other</p>",
        "id": 197083490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150821
    },
    {
        "content": "<p>so <code>set (set unit)</code> might not be a fintype after all :-) in constructiveland</p>",
        "id": 197083491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589150822
    },
    {
        "content": "<p>exactly</p>",
        "id": 197083500,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589150872
    },
    {
        "content": "<p>An instance of <code>fintype (set (set unit))</code> is <code>&lt;{univ, empty}, &lt;classical proof&gt;&gt;</code></p>",
        "id": 197083502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150876
    },
    {
        "content": "<p>in <code>data.fintype</code> the instance <code>set.fintype</code> is given:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n</code></pre></div>",
        "id": 197083539,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589150894
    },
    {
        "content": "<p>I see, if that's the proof then that explains it</p>",
        "id": 197083544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150926
    },
    {
        "content": "<p>there is another proof that avoids the assumption</p>",
        "id": 197083546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589150939
    },
    {
        "content": "<p>Mario's instance above has one too many <code>set</code>s.</p>",
        "id": 197083716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589151242
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">⟨</span><span class=\"n\">coe</span><span class=\"o\">,</span> <span class=\"n\">to_set_injective</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subset_univ</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩⟩</span>\n</code></pre></div>",
        "id": 197083782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589151438
    },
    {
        "content": "<p>which is at least enough to prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"c1\">-- 4</span>\n</code></pre></div>\n\n\n<p>(which indeed shows that I don't have enough <code>set</code>s in my instance)</p>",
        "id": 197083836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589151566
    },
    {
        "content": "<p>I have a solution up to this sorry</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}})</span> <span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()}}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}}</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>(I tried using mario's fintype instance to convince dec_trivial to do it but that didn't work)</p>",
        "id": 197085181,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589153302
    },
    {
        "content": "<p>You should be able to use the fintype instance to do this, although some rewriting is necessary</p>",
        "id": 197085270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589153396
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">finset_equiv_set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">coe</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_coe</span><span class=\"o\">],</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">coe_to_finset</span> <span class=\"bp\">_⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finset_congr</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">finset</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map_eq_image</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image_image</span><span class=\"o\">],</span> <span class=\"n\">convert</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image_id</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map_eq_image</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image_image</span><span class=\"o\">],</span> <span class=\"n\">convert</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image_id</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_symm_apply</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pp1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()}}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec_eq</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert_eq</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">union_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coe_to_finset</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">finset_congr</span> <span class=\"o\">(</span><span class=\"n\">finset_equiv_set</span> <span class=\"n\">unit</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">bijective</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">finset_congr</span> <span class=\"o\">(</span><span class=\"n\">finset_equiv_set</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">coe_empty</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">coe_singleton</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">coe_insert</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">coe_inj</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map_singleton</span> <span class=\"o\">(</span><span class=\"n\">finset_equiv_set</span> <span class=\"n\">unit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map_insert</span> <span class=\"o\">(</span><span class=\"n\">finset_equiv_set</span> <span class=\"n\">unit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197086005,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589154157
    },
    {
        "content": "<p>I almost died writing this</p>",
        "id": 197086006,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589154161
    },
    {
        "content": "<p>I guess this is obsoleted by kenny's submission, but I just finished and don't <em>want</em> to chuck it in the wastebin</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">pp0_aux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">punit_eq</span> <span class=\"n\">x</span> <span class=\"o\">(),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pp0</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{()}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">swap</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">suffices</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">nonempty_of_mem</span> <span class=\"n\">h2</span><span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_empty_eq</span><span class=\"o\">,</span> <span class=\"n\">forall_prop_of_false</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n<span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">pp0_aux</span><span class=\"o\">,},</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"n\">x_1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hy</span><span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">some_mem</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">pp0_aux</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">,</span>\n<span class=\"n\">rwa</span> <span class=\"err\">←</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pp1_aux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}})</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()}}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}}</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">by_cases</span> <span class=\"err\">∅</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n<span class=\"n\">by_cases</span> <span class=\"o\">{()}</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n<span class=\"n\">rotate</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">rotate</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">rotate</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n<span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">hx_1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span> <span class=\"n\">x_1</span> <span class=\"n\">hx_1</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hx</span><span class=\"o\">},</span>\n<span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">finish</span><span class=\"o\">}},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pp1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()}}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}},</span>\n<span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">pp0</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n<span class=\"n\">apply</span> <span class=\"n\">pp1_aux</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197086134,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589154325
    },
    {
        "content": "<p>is there a trick to copying long code blocks out of a zulip message? I always find myself fussing with the mouse for like twenty seconds<br>\nEDIT: the trick is to press the \"view source\" button, that gives you a focus window in which you can ctrl+a to select all</p>",
        "id": 197086202,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589154416
    },
    {
        "content": "<p>Here's what you can accomplish by abusing defeq given the fintype instance:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()}}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"bp\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"bp\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"o\">()),</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">])</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">[</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">])</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197086364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589154670
    },
    {
        "content": "<p>unkown identifier <code>mem_univ</code>? is it missing <code>open finset</code> or something?</p>",
        "id": 197086435,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589154785
    },
    {
        "content": "<p>for some reason even this (the second apply_instance) fails for me</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">⟨</span><span class=\"n\">coe</span><span class=\"o\">,</span> <span class=\"n\">to_set_injective</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subset_univ</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩⟩</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()}}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197086769,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589155248
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()}}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"o\">{()}}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()}}</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{{()},</span> <span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">singleton</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert_comm</span> <span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197086835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589155330
    },
    {
        "content": "<p>If you have both fintype instances then you might have trouble</p>",
        "id": 197086845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589155355
    },
    {
        "content": "<p>I modified <code>data.fintype.basic</code> to replace the original instance</p>",
        "id": 197086850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589155370
    },
    {
        "content": "<p>mm interesting</p>",
        "id": 197086859,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589155415
    },
    {
        "content": "<p>For this trick to work you need to know exactly how everything is defined so that you can get the <code>change</code> line right</p>",
        "id": 197086924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589155447
    }
]