[
    {
        "content": "<p>Hi, not sure if anyone has any experience with the lean server, but I've run into some strange behavior. Essentially, when I send sync or info requests, I'll get an empty response back that looks like \"{\"response\":\"ok\",\"seq_num\":113}'\".  The only thing I am able to get working is a sync request, and only by sending the file contents directly, rather than just a file name, in the sync request, and to make some small permutation in the file (adding a trivial line), although maybe this is expected behavior as synching the same file should be idempotent. However, I am hoping for more granular output via the info command and I'm running out of ideas.</p>",
        "id": 246025109,
        "sender_full_name": "Andrew Elsey",
        "timestamp": 1626298592
    },
    {
        "content": "<p>Sorry for the trivial questions and ideas:  </p>\n<ul>\n<li>You are running the server asynchronously right, i.e. you are continuously reading all the responses from the server and not just the first response?  </li>\n<li>It also might help to look at <a href=\"https://leanprover-community.github.io/lean-web-editor/\">https://leanprover-community.github.io/lean-web-editor/</a> and compare their traffic with yours.  You can see their traffic by going to the question mark, selecting \"Log server messages to console\", and then opening up the javascript console.  </li>\n<li>You may help to post a minimal working example including all the back and forth communication.</li>\n</ul>",
        "id": 246034054,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626304591
    },
    {
        "content": "<p>Also, yes, re-syncing a file you didn't modify won't have the same response as syncing a file you modified.  I forget the details off hand.  You may want to use (or look at the code for) <a href=\"https://github.com/leanprover-community/lean-client-python/tree/refactor-commands-api\">https://github.com/leanprover-community/lean-client-python/tree/refactor-commands-api</a> (I sent you to a properly working branch as the master branch is broken).  Use the trio server.</p>",
        "id": 246034287,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626304830
    },
    {
        "content": "<p>That tool takes care of some of those subtleties .</p>",
        "id": 246034325,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626304872
    },
    {
        "content": "<p>Also, finally, don't forget to check if there are any messages in the traffic.  Those may indicate errors.</p>",
        "id": 246034432,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626304970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20Server.20Returning.20Empty.20Responses.3F/near/246034287\">said</a>:</p>\n<blockquote>\n<p>Also, yes, re-syncing a file you didn't modify won't have the same response as syncing a file you modified.  I forget the details off hand.  You may want to use (or look at the code for) <a href=\"https://github.com/leanprover-community/lean-client-python/tree/refactor-commands-api\">https://github.com/leanprover-community/lean-client-python/tree/refactor-commands-api</a> (I sent you to a properly working branch as the master branch is broken).  Use the trio server.</p>\n</blockquote>\n<p>I'm actually using a hacked version of your code (thank you a ton)!   I'll try adapting your updated trio server code/commands file.  That might do the trick.</p>",
        "id": 246035156,
        "sender_full_name": "Andrew Elsey",
        "timestamp": 1626305597
    },
    {
        "content": "<p>Didn't seem to work :(. Not sure if it this is helpful for you, but I did run into a few bugs: <a href=\"/user_uploads/3121/CI0Cr2WPbxxz6nlgtaBctSXH/image.png\">image.png</a> <br>\nEssentially, in the commands file, json.dumps turns the line and column properties into strings instead of integers, but the server is expecting numbers.<br>\nAlso, looks like the server's seq_num varies from the seq_num maintained by the server, so I had to change a few lines: <a href=\"/user_uploads/3121/WM8rrrTBr2qFjLnjkuAOTIxp/image.png\">image.png</a> <a href=\"/user_uploads/3121/ZjJSvYpa4HTvjiQpX6OEznEO/image.png\">image.png</a> <br>\nI'll keep playing around with it - probably doing something wrong. Thanks again.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/CI0Cr2WPbxxz6nlgtaBctSXH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/CI0Cr2WPbxxz6nlgtaBctSXH/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WM8rrrTBr2qFjLnjkuAOTIxp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/WM8rrrTBr2qFjLnjkuAOTIxp/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZjJSvYpa4HTvjiQpX6OEznEO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ZjJSvYpa4HTvjiQpX6OEznEO/image.png\"></a></div>",
        "id": 246040903,
        "sender_full_name": "Andrew Elsey",
        "timestamp": 1626311160
    },
    {
        "content": "<p>Thanks.  I’ll look into the bugs.</p>",
        "id": 246041387,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626311876
    },
    {
        "content": "<p>If you can isolate the problem in the lean server, you may want to post the bug in general to get more visibility.  I don’t know who maintains it.  Otherwise, again a minimal working example with the json traffic would help.  The lean Python server has two debug parameters which print the traffic.</p>",
        "id": 246041526,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626312055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20Server.20Returning.20Empty.20Responses.3F/near/246034287\">said</a>:</p>\n<blockquote>\n<p>I forget the details off hand.  You may want to use (or look at the code for) <a href=\"https://github.com/leanprover-community/lean-client-python/tree/refactor-commands-api\">https://github.com/leanprover-community/lean-client-python/tree/refactor-commands-api</a> (I sent you to a properly working branch as the master branch is broken).  Use the trio server.</p>\n</blockquote>\n<p>I completely lost track of what happens there. Are you waiting for me to hit a merge button?</p>",
        "id": 246062978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626336167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Sorry.  I haven't been doing a good job at keeping on track of it myself.  Basically, yes I'd like someone (probably you or <span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span>), when they have time, to look over <a href=\"https://github.com/leanprover-community/lean-client-python/pull/19\">https://github.com/leanprover-community/lean-client-python/pull/19</a>.  If you like it (and it works) you can merge it.  Now, I thought it worked fine last I checked it, but <span class=\"user-mention\" data-user-id=\"301362\">@Andrew Elsey</span> claims there is a bug.  Maybe I'm misunderstanding, but it seems this error would have been quite noticeable.  I find this surprising since it would be a pretty glaring error, but maybe either Lean has changed or I made a big mistake.  Unfortunately, I'm leaving today for a one week vacation.  If there is stuff that needs to be fixed, I can address it when I get back.</p>",
        "id": 246211256,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626434880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301362\">@Andrew Elsey</span> I'm not sure I understand your bugs or your changes (for example), but regardless, the new PR changes a lot of the code you pointed out.  I would try that out by using the trio server in the branch <code>refactor-commands-api</code>.  I just tested that branch on the newest version of Lean 3.31.0 and I didn't see any obvious problems.  Also all the unit tests pass.</p>",
        "id": 246272961,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626466529
    },
    {
        "content": "<p>Of course, if you encounter problems still, feel free to make an issue or PR.</p>",
        "id": 246273120,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626466615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Given that is seems to work fine, if you have time to look over the PR and merge it (if you are happy with it), I would real appreciate it.  It would be good to have a working version of this project.</p>",
        "id": 246273174,
        "sender_full_name": "Jason Rute",
        "timestamp": 1626466642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20Server.20Returning.20Empty.20Responses.3F/near/246272961\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"301362\">Andrew Elsey</span> I'm not sure I understand your bugs or your changes (for example), but regardless, the new PR changes a lot of the code you pointed out.  I would try that out by using the trio server in the branch <code>refactor-commands-api</code>.  I just tested that branch on the newest version of Lean 3.31.0 and I didn't see any obvious problems.  Also all the unit tests pass.</p>\n</blockquote>\n<p>Yes, I was using your newer branch when I ran into the issues (although the new branch worked way better - repeated sync calls seemed to freeze the client on the main branch, even if the file has been edited). Maybe it's just related to my environment/python installation. Either way, I apologize if I wasted your time. I was able to get everything I needed for my solution working, although it did seem like the API, probably not your code base, is a little buggy. Things like having to make certain calls in a a certain order, having to make some info requests at a different column than it should be, etc. I ended up just wrapping every expression I wanted to query for in \"((\"expr\":_))\" which appears to let you make an info request at the first parenthesis uniformly. At any rate, thank you again for everything.</p>",
        "id": 246477881,
        "sender_full_name": "Andrew Elsey",
        "timestamp": 1626712086
    }
]