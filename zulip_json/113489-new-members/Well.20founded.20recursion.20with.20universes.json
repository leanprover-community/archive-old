[
    {
        "content": "<p>I am attempting to prove the Spauge-Grundy theorem which I am stating as </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">Sprague_Grundy</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">impartial</span><span class=\"o\">],</span> <span class=\"n\">inhabited</span> <span class=\"o\">{</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">//</span> <span class=\"n\">G</span> <span class=\"bp\">≈</span> <span class=\"n\">nim</span> <span class=\"n\">O</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>In order to prove this I need to induct on G using the <code>pgame.pgame_wf_tac</code> tactic and using the theorem on <code>G.move_left i</code> for some left move <code>i</code> but I am getting an error about universe levels which I think is due to the subsequent games being of type <code>pgame.{u+1}</code>. How can I make a more flexible universe variable?<br>\nMy attempted proof and related definitions is here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">nonmoves</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">O</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nonmoves_nonempty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">,</span> <span class=\"n\">O</span> <span class=\"err\">∈</span> <span class=\"n\">nonmoves</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">principal_seg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span><span class=\"bp\">.</span><span class=\"n\">top</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">down</span> <span class=\"o\">:=</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">principal_seg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">principal_seg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n        <span class=\"n\">use</span> <span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">principal_seg_coe</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hcontra</span> <span class=\"o\">:=</span> <span class=\"n\">down</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lt_iff_le_and_ne</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hcontra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">principal_seg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span><span class=\"bp\">.</span><span class=\"n\">top</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Sprague_Grundy</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">impartial</span><span class=\"o\">],</span> <span class=\"n\">inhabited</span> <span class=\"o\">{</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">//</span> <span class=\"n\">G</span> <span class=\"bp\">≈</span> <span class=\"n\">nim</span> <span class=\"n\">O</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">classical</span><span class=\"o\">,</span>\n    <span class=\"n\">introI</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Sprague_Grundy</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n    <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">nonmoves</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">omin</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nonmoves_nonempty</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- exact ordinal.omin.{u+1} (nonmoves M) (nonmoves_nonempty M)</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206400549,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1596988707
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, or a branch to look at?</p>",
        "id": 206421590,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597024793
    },
    {
        "content": "<p>Without catching on what you've been doing, it's hard to say. The fact that <code>G.impartial</code> is a typeclass strikes me as unlikely to be a good choice, however!</p>",
        "id": 206421647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597024832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I have made a GitHub repository at <a href=\"https://github.com/foxthomson/impartial\">https://github.com/foxthomson/impartial</a>. The problem is in src/nim.lean.</p>",
        "id": 206446883,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597055274
    },
    {
        "content": "<p>Why isn't your theorem statement simply</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">Sprague_Grundy</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">impartial</span><span class=\"o\">],</span> <span class=\"n\">inhabited</span> <span class=\"o\">{</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">//</span> <span class=\"n\">G</span> <span class=\"bp\">≈</span> <span class=\"n\">nim</span> <span class=\"n\">O</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>with a single universe level? I think the issue is in your definition of <code>nim</code>.</p>",
        "id": 206447406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597055728
    },
    {
        "content": "<p>As currently stated, the theorem is false.</p>",
        "id": 206447648,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597055930
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">nim</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span>\n<span class=\"bp\">|</span> <span class=\"n\">O₁</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"o\">{</span> <span class=\"n\">O₂</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">//</span> <span class=\"n\">O₂</span> <span class=\"bp\">&lt;</span> <span class=\"n\">O₁</span> <span class=\"o\">},</span>\n</code></pre></div>\n\n\n<p>this construction is tempting, but it blows up the universe level unnecessarily.</p>",
        "id": 206447678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597055983
    },
    {
        "content": "<p>If <code>O</code> is <code>ordinal.{u}</code> then ordinals less than <code>O</code> are in the universe <code>u</code>. This means that <code>nim O</code> is in the universe <code>u+1</code>.</p>",
        "id": 206447693,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597056001
    },
    {
        "content": "<p>Right, which is wrong.</p>",
        "id": 206447739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597056009
    },
    {
        "content": "<p>How come?</p>",
        "id": 206447768,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597056039
    },
    {
        "content": "<p>If <code>O : ordinal.{u}</code> then <code>O</code> is the order type of some type in <code>Type u</code>, and that's the correct universe level to be in</p>",
        "id": 206447773,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597056049
    },
    {
        "content": "<p><code>{ O₂ : ordinal // O₂ &lt; O₁ }</code> has the same order type but it's in <code>Type (u+1)</code></p>",
        "id": 206447806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597056078
    },
    {
        "content": "<p>So I should try to get the order type out of the quotient?</p>",
        "id": 206447824,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597056110
    },
    {
        "content": "<p>Yeah, if you can define <code>nim</code> directly as a <code>game</code>, you could try to use <code>lift</code>, otherwise use <code>quot.out</code> in some form.</p>",
        "id": 206447888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597056161
    },
    {
        "content": "<p>Thank you, I will try</p>",
        "id": 206447933,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597056214
    },
    {
        "content": "<p>Another thing you could maybe do is have <code>nim</code> take a well-ordered type, rather than an ordinal</p>",
        "id": 206448168,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597056455
    },
    {
        "content": "<p>I have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> which does not depend on <code>nim</code> at all</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">ordinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">pgame</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">nth_rewrite</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pgame</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≈</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pgame</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">impartial</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">G</span> <span class=\"bp\">≈</span> <span class=\"bp\">-</span><span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">pgame_wf_tac</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">impartial_def</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">impartial</span> <span class=\"bp\">↔</span> <span class=\"n\">G</span> <span class=\"bp\">≈</span> <span class=\"bp\">-</span><span class=\"n\">G</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_right</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>   <span class=\"n\">intro</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold1</span> <span class=\"n\">impartial</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>   <span class=\"n\">intro</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold1</span> <span class=\"n\">impartial</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">impartial_move_left_impartial</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">impartial</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">impartial</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">impartial_def</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nonmoves</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">O</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nonmoves_nonempty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">,</span> <span class=\"n\">O</span> <span class=\"err\">∈</span> <span class=\"n\">nonmoves</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">principal_seg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span><span class=\"bp\">.</span><span class=\"n\">top</span><span class=\"o\">,</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">down</span> <span class=\"o\">:=</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">principal_seg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">principal_seg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n        <span class=\"n\">use</span> <span class=\"n\">M</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">principal_seg_coe</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hcontra</span> <span class=\"o\">:=</span> <span class=\"n\">down</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lt_iff_le_and_ne</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hcontra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"n\">principal_seg</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span><span class=\"bp\">.</span><span class=\"n\">top</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Grundy_value</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">impartial</span><span class=\"o\">],</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">introI</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Grundy_value</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">move_left</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">omin</span> <span class=\"o\">(</span><span class=\"n\">nonmoves</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonmoves_nonempty</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">pgame</span>\n</code></pre></div>\n\n\n<p>I am getting an error as <code>M</code> in <code>Grundy_value</code> is of the form <code>G.left_moves -&gt; ordinal.{u+1}</code> so <code>nonmoves M</code> is a set of <code>ordinal.{u+2}</code> a universe too big. I think I am loking for a way to write <code>ordinal.{2*u}</code></p>",
        "id": 206462263,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597067380
    },
    {
        "content": "<p>Actually I think it is due to <code>Grundy_value</code> not stepping down a universe when it is used recursively, Lean has understood <code>M</code> as a function from <code>G.left_moves</code> to <code>ordinal.{u+1}</code> when I want it to be sent to <code>ordinal.{u}</code></p>",
        "id": 206463914,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597068288
    },
    {
        "content": "<p>Well you wrote <code>Π (G : pgame.{u}) [G.impartial], ordinal.{u+1}</code>--it should take values in <code>ordinal.{u}</code></p>",
        "id": 206464017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068347
    },
    {
        "content": "<p>Which should work as <code>G.move_left i</code> is a member of <code>pgame.{u-1}</code></p>",
        "id": 206464018,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597068348
    },
    {
        "content": "<p>As the type of <code>Grundy_value</code> I mean</p>",
        "id": 206464070,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068366
    },
    {
        "content": "<p>I want it to take values in the universe <code>u</code> understood as a variable so I can call it with each universe a level down</p>",
        "id": 206464181,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597068436
    },
    {
        "content": "<p>You can't do recursion with varying universe levels, but in any case, the Grundy value of a game is supposed to be an ordinal in the same universe as the game</p>",
        "id": 206464234,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068478
    },
    {
        "content": "<p>for example an \"ordinary\" game is one that lives in universe level 0, and its Grundy value is an ordinary ordinal which also lives in universe level 0</p>",
        "id": 206464328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068512
    },
    {
        "content": "<p>But if I have shown that all ordinary games have a Grundy value shouldn't I be able to access their Grundy value viewed as an ordinary ordinal when talking about universe 1 games?</p>",
        "id": 206464576,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597068616
    },
    {
        "content": "<p>Lean doesn't work that way</p>",
        "id": 206464617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068634
    },
    {
        "content": "<p>I agree in normal math you could do it</p>",
        "id": 206464654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068660
    },
    {
        "content": "<p>Is there any known tricks to get around this?</p>",
        "id": 206464663,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597068665
    },
    {
        "content": "<p>I claim it's impossible to actually have this problem in Lean</p>",
        "id": 206464678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068677
    },
    {
        "content": "<p>actually I'm not really sure whether that is true</p>",
        "id": 206464737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068710
    },
    {
        "content": "<p>but if you have this problem then something went wrong earlier</p>",
        "id": 206464758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068720
    },
    {
        "content": "<p>Why would you need this?</p>",
        "id": 206465352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597068992
    },
    {
        "content": "<p>The S-G theorem requires <code>nonmoves</code> to be able to find the mex. This requires <code>nonmoves</code> to be nonempty so <code>nonmoves</code> has to be defined as a set of <code>ordinal.{u+1}</code> otherwise we could feed it the identity function on <code>ordinal.{u}</code> and it would be empty.</p>",
        "id": 206465396,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597069017
    },
    {
        "content": "<p>I think <code>nonmoves</code> also has the wrong result universe level, it should be <code>set ordinal.{u}</code>.</p>",
        "id": 206465448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597069044
    },
    {
        "content": "<p>This means that the Grundy value has to be strictly universe higher than the Grundy value of all subsequent games</p>",
        "id": 206465525,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597069082
    },
    {
        "content": "<p>There's no way to index all of <code>ordinal.{u}</code> with a <code>Type u</code>-sized family--but there is a theorem to be proved here!</p>",
        "id": 206465558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597069090
    },
    {
        "content": "<p>No, you can't do it that way in Lean (and you wouldn't do it that way in math either)</p>",
        "id": 206465578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597069103
    },
    {
        "content": "<p>Only one universe is needed</p>",
        "id": 206465626,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597069126
    },
    {
        "content": "<p>The classical way to describe the situation would be: to an impartial game we assign the least ordinal which is not the value of any option of the game; such an ordinal exists because ordinals form a proper class but the options of the game only form a set.</p>",
        "id": 206465747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597069196
    },
    {
        "content": "<p>Oh, so saying alpha is type u means that nonmoves is nonempty without jumping up a universe</p>",
        "id": 206465805,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1597069210
    },
    {
        "content": "<p>I think there's a theorem to this effect somewhere in <code>set_theory.ordinal</code> or <code>set_theory.cardinal</code></p>",
        "id": 206466090,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597069362
    },
    {
        "content": "<p>I tried to make an API for this sort of construction, but I wasn't able to make anything sufficiently general to cover all the use cases. But you can get a type with the order type of the ordinal using <code>quot.out</code>, and use that</p>",
        "id": 206502032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597087300
    },
    {
        "content": "<p><code>o.out.α</code> has the right size</p>",
        "id": 206502165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597087402
    }
]