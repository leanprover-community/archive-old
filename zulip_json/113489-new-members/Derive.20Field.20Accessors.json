[
    {
        "content": "<p>If I have ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>... and  then define a wrapper </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">s.a</span> <span class=\"bp\">+</span> <span class=\"n\">s.b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>... then is there a way for <code>W</code> to inherit accessors to the fields of <code>s</code>, so that I can just write <code>w.a</code> and <code>w.b</code> (<code>w : W</code>)?</p>",
        "id": 228951820,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614950676
    },
    {
        "content": "<p>Does something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">W</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">w.s.a</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">W</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">w.a</span>\n</code></pre></div>\n<p>work?</p>",
        "id": 228957196,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1614952775
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">W</span> <span class=\"kd\">extends</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">w.a</span>\n</code></pre></div>",
        "id": 228957280,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1614952803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Derive.20Field.20Accessors/near/228957280\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">W</span> <span class=\"kd\">extends</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">w.a</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I still want <code>W</code> to have the field <code>s</code>.</p>",
        "id": 228958194,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614953077
    },
    {
        "content": "<p>Then <span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span>'s solution will work best.</p>",
        "id": 228958556,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1614953199
    },
    {
        "content": "<p>I just noticed that a reverse approach might work well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">W</span> <span class=\"kd\">extends</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">W.s</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">w.a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">w.b</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 228958881,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614953304
    },
    {
        "content": "<p>Or just <code>def W.s (w : W) : S := w.to_S</code></p>",
        "id": 228959417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614953503
    },
    {
        "content": "<p>Since <code>extends X</code> generates a <code>to_X</code> field for you</p>",
        "id": 228959451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614953518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Derive.20Field.20Accessors/near/228959451\">said</a>:</p>\n<blockquote>\n<p>Since <code>extends X</code> generates a <code>to_X</code> field for you</p>\n</blockquote>\n<p>Oh perfect!</p>",
        "id": 228959927,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614953673
    }
]