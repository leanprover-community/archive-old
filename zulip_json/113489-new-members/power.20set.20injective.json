[
    {
        "content": "<p>Bedtime, but before I sign off, allow me to leave this question here. How would I best go about the following lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Turn it into a statement about cardinal numbers and the power function there? Or is that too big of a hammer?</p>",
        "id": 267802850,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642030325
    },
    {
        "content": "<p>Note that that's a def not a lemma, as the result is an equiv which is data</p>",
        "id": 267803254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642030553
    },
    {
        "content": "<p>I think this isn't provable<br>\n<a href=\"https://mathoverflow.net/questions/67473/equality-of-cardinality-of-power-set\">https://mathoverflow.net/questions/67473/equality-of-cardinality-of-power-set</a></p>",
        "id": 267803599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642030763
    },
    {
        "content": "<p>If you have <code>[fintype A] [fintype B]</code> is there an choice-free algorithm to construct such an equiv?</p>",
        "id": 267804000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642031041
    },
    {
        "content": "<p>Hmm, ok, so the reason why in my Isabelle development I went this way only for finite <code>A</code> and <code>B</code> was _not_ due to Isabelle somehow. Thanks for reminding me :-)<br>\nSo I’ll restrict that helper to finite sets and do my main prove separately for infinite sets; that’s fine.</p>",
        "id": 267804164,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642031134
    },
    {
        "content": "<p>Ah, that's in the comments on that mathoverflow question too (with answer no)</p>",
        "id": 267804172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642031138
    },
    {
        "content": "<p>With <code>fintype</code> restrictions, the definition becomes trivial:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv_of_equiv_powerset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">fintype.card_eq</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">strict_mono_pow</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267851721,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642071084
    },
    {
        "content": "<p>From the mathoverflow post, apparently <a href=\"https://www.sciencedirect.com/science/article/pii/S0001870885710341\">\"Producing New Bijections from Old\"</a> makes the claim it is impossible to make that computably.</p>",
        "id": 267853617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642072015
    },
    {
        "content": "<p>i find that somewhat sensible; i find it surprising that A2 equiv B2 leads you to a computable A equiv B, however</p>",
        "id": 267857929,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642074651
    },
    {
        "content": "<p>Also, isn't the \"canonical\" way to write the powerset of <code>A</code> <code>set A</code>?</p>",
        "id": 267857949,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642074666
    },
    {
        "content": "<p><code>A → bool</code> is the type of sets with decidable membership</p>",
        "id": 267863312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642077898
    }
]