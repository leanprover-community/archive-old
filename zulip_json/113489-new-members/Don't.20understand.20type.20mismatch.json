[
    {
        "content": "<p>In the example below, the approach I want to take is to rewrite the sum to separate out the zero's using finset.sum_erase_add, but I'm getting a type mismatch. I tried using @, but that gives an even more confusing type mismatch. Any pointers? (Or alternative routes to prove this example)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc.basic</span>\n\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m.support.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">zero_ne_one_fin2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">fin.zero_eq_one_iff</span><span class=\"o\">,</span> <span class=\"n\">nat.one_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sum_pair</span> <span class=\"n\">zero_ne_one_fin2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">finset.sum_insert_of_eq_zero_if_not_mem</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">m.support</span> <span class=\"mi\">0</span> <span class=\"n\">m</span> <span class=\"n\">nat.add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">fin.decidable_eq</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp.not_mem_support_iff.mp</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n    <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">factoid</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">∈</span> <span class=\"o\">({(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">refine</span> <span class=\"n\">set.mem_insert</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"c1\">--rw ← @finset.sum_erase_add ℕ (fin 2) nat.add_comm_monoid (fin.decidable_eq 2) {0, 1} m 0 factoid,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sum_erase_add</span> <span class=\"o\">{(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))}</span> <span class=\"n\">m</span> <span class=\"n\">factoid</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- type mismatch at application</span>\n    <span class=\"c1\">-- {0, 1}.sum_erase_add ⇑m factoid</span>\n    <span class=\"c1\">-- term</span>\n    <span class=\"c1\">-- factoid</span>\n    <span class=\"c1\">-- has type</span>\n    <span class=\"c1\">-- 0 ∈ {0, 1}</span>\n    <span class=\"c1\">-- but is expected to have type</span>\n    <span class=\"c1\">-- ?m_1 ∈ {0, 1}</span>\n\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292255131,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659793135
    },
    {
        "content": "<p>I think the issue is this: <code>finset</code> and <code>set</code> are unrelated types. Your <code>factoid</code> is a statement about a <code>set</code> but <code>finset.sum_erase_add</code> wants to eat various things about <code>finset</code>s so it will choke on <code>factoid</code>.</p>",
        "id": 292256178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659794505
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">factoid</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset.mem_insert</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sum_erase_add</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">factoid</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 292256235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659794547
    },
    {
        "content": "<p>Ah, I get it now. Thanks a lot:)</p>",
        "id": 292256356,
        "sender_full_name": "Pim Otte",
        "timestamp": 1659794724
    },
    {
        "content": "<p>You might also want to solve this via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_two\">docs#fin.sum_univ_two</a></p>",
        "id": 292319864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659878897
    }
]