[
    {
        "content": "<p>Is there a way to avoid having to write <code>.to_mwe</code> here? I feel like it should be obvious that we want <code>.to_mwe</code> so we shouldn't have to say it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">mwe</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"bp\">→</span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe_lemma</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">mwe</span><span class=\"o\">):</span> <span class=\"n\">x.f</span> <span class=\"bp\">=</span> <span class=\"n\">x.f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- imagine the proof was very long</span>\n<span class=\"kd\">structure</span> <span class=\"n\">mwe'</span> <span class=\"kd\">extends</span> <span class=\"n\">mwe</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"bp\">→</span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe_lemma'</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">mwe'</span><span class=\"o\">):</span> <span class=\"n\">x.f</span> <span class=\"bp\">=</span> <span class=\"n\">x.f</span> <span class=\"o\">:=</span> <span class=\"n\">mwe_lemma</span> <span class=\"n\">x.to_mwe</span>\n</code></pre></div>",
        "id": 292642338,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1660073015
    },
    {
        "content": "<p>in these cases we usually write <code>to_mwe</code> as an instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe\">docs#has_coe</a>, see for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.has_coe\">docs#units.has_coe</a></p>",
        "id": 292643824,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660073605
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> . Following your answer I got this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">my_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">mwe'</span> <span class=\"n\">mwe</span><span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">mwe'</span><span class=\"o\">,</span> <span class=\"n\">M.to_mwe</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mwe_lemma'</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">mwe'</span><span class=\"o\">):</span> <span class=\"n\">x.f</span> <span class=\"bp\">=</span> <span class=\"n\">x.f</span> <span class=\"o\">:=</span> <span class=\"n\">mwe_lemma</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 292668225,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1660084349
    }
]