[
    {
        "content": "<p>Hi there, I’m a math student. Last months I’ve been learning Lean being a participant of the Barcelona Lean Seminar. In this seminar we have focused our work in topological spaces with Lean and I’ve done some lemes about separation axioms.<br>\nI’d like to ask for permission to push to non-master branches of mathlib. I’d like to do my first PR with those lemmas.<br>\ncarloscaralps<br>\nThanks!</p>",
        "id": 234477049,
        "sender_full_name": "Carlos Caralps",
        "timestamp": 1618396862
    },
    {
        "content": "<p>Your github userid is <code>carloscaralps</code>? Nice stuff! Is this being run by Marc?</p>",
        "id": 234477216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618396950
    },
    {
        "content": "<p>I sent you an invite, it should appear at <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 234477344,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1618397027
    },
    {
        "content": "<p>Yes, my userid is carloscaralps and  <span class=\"user-mention\" data-user-id=\"254058\">@Marc Masdeu</span> is running the seminar</p>",
        "id": 234477595,
        "sender_full_name": "Carlos Caralps",
        "timestamp": 1618397147
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 234477751,
        "sender_full_name": "Carlos Caralps",
        "timestamp": 1618397224
    },
    {
        "content": "<p>Great! I did some stuff with topological spaces with my students a couple of months ago: <a href=\"https://xenaproject.wordpress.com/2021/02/10/formalising-mathematics-workshop-4/\">https://xenaproject.wordpress.com/2021/02/10/formalising-mathematics-workshop-4/</a></p>",
        "id": 234478318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618397517
    },
    {
        "content": "<p>Kevin, we are aware of your TCC workshops, the blog posts are extremely useful (at least to me). We did some basics (up to compacity and separation, you can see it at <a href=\"http://github.com/mmasdeu/barcelonaleanseminar\">github.com/mmasdeu/barcelonaleanseminar</a>), and one goal is to make the Topology Game. Right now, we decided to stop building topological spaces from scratch (we gave up when trying to prove that the Moebius band defined as a quotient of a square is homeomorphic to the strip as a subspace of R3), and move on to adapting all that we have to the Game.</p>",
        "id": 234479098,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1618397956
    },
    {
        "content": "<p>Thanks for the link!</p>",
        "id": 234479936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618398377
    },
    {
        "content": "<p>I can believe there are missing lemmas about the zoo of separation conditions in mathlib. However I'm a bit worried that the proof you will have won't blend nicely with mathlib if you didn't use filters all over the place.</p>",
        "id": 234502801,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618408581
    },
    {
        "content": "<p>I would like to get into contributing to mathlib, could I get permission to push to a non-master branch? My username is <code>joneugster</code>.</p>\n<p>I thought my first PR could be small contributions about fraction rings, like <code>instance fraction_ring.char_zero [h: char_zero R]: char_zero (fraction_ring R)</code> as they should be very quick to review.</p>",
        "id": 239890223,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621707184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> Voila:  <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 239890741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621707734
    },
    {
        "content": "<p>thank you!</p>",
        "id": 239890990,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621708032
    },
    {
        "content": "<p>Is it better to discuss mathlib PRs here on Zulip (i.e. file sturcture, generality) or to make a PR get feedback and refactor it afterwards?</p>",
        "id": 240021264,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621845170
    },
    {
        "content": "<p>If you're new to the PR process then there will be no harm in discussing potential PR's here.</p>",
        "id": 240021355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621845217
    },
    {
        "content": "<p>But there is also no harm in making the PR and then starting a thread about it in <a class=\"stream\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews\">#PR reviews</a> . However if the PR costs hours of your time and then is instantly met with a \"oh no we can't do it like that at all, for the following technical reason\" then this would be a bit grim</p>",
        "id": 240021459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621845271
    },
    {
        "content": "<p>The #PR reviews stream is also extremely useful if you don't get comments on your PR... Sometimes the queue exceeds our ability to shepherd it along, but lots of us are compulsively helpful here on zulip. :-)</p>",
        "id": 240028536,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621849529
    },
    {
        "content": "<p>ok so I have a few questions about starting with mathlib PRs. I would like mathlib to know automatically that the characteristics of the <code>fraction_ring R</code> of an integral domain is the same as the char. of <code>R</code>. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">fraction_ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">char_p</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]:</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">char_zero</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">char_zero</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">char_zero</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">char_p.char_p_to_char_zero</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The main ingredient is that the algebra map <code>R →+* fraction_ring R</code> is injective for an integral domain, which is <code>(fraction_map.injective (fraction_ring.of R))</code></p>\n<ul>\n<li>\n<p>I could see this be stated in different generalities:<br>\n    1) as above<br>\n    2) have the injectivity as an instance for the <code>fraction_ring</code> case and state the above for commutative rings/algebras with this injectivity assumption.<br>\n    3) go into the definition of a <code>fraction_ring</code> (i.e. look at <code>localization.r</code>) and prove it there.</p>\n</li>\n<li>\n<p>I could also see multiple places to locate this:<br>\n    1) a new file <code>algebra/char_p/localization.lean</code><br>\n    2) in <code>ring_theory/localization.lean</code> (but seems silly to import <code>char_p</code> there)<br>\n    3) <code>ring_theory/localization.lean</code> is about 1700 lines long, the last 30 thereof defining <code>fraction_ring</code>, at which point does it make sense to split this up into <code>ring_theory/localization/basic.lean</code> and <code>ring_theory/localization/fraction_ring.lean</code>?</p>\n</li>\n</ul>\n<p>Any recommendations?</p>",
        "id": 240029332,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621849981
    },
    {
        "content": "<p>I don't know this part of the library well, but I'll just say one thing: while splitting up large files (particularly where this significantly reduces imports to one or more chunks) is a good and valuable thing to do, it's often best to do it as a separate PR, either before or after the \"content\" PR, as it's much easier to review the content if we don't have to wade through the \"just moving stuff\" diffs.</p>",
        "id": 240030190,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621850507
    },
    {
        "content": "<p>Perhaps if this is your first PR it's safest to start off with using a new file, and then we'll remind you to move parts (or perhaps all) to other homes.</p>",
        "id": 240030282,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621850558
    },
    {
        "content": "<p>Certainly don't go with 2) --- adding new imports to already big files is a pain.</p>",
        "id": 240030320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621850582
    },
    {
        "content": "<p>Hello <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>, I have being working on formalizing the thomaes function with help from the Xena Discord, and along the way I think I have some lemmas worth PRing to mathlib.  </p>\n<p>I have been following this guide <a href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A\">https://www.youtube.com/watch?v=Bnc8w9lxe8A</a>, and am here to request  credentials to push a branch.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bnc8w9lxe8A\" href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A\"><img src=\"https://uploads.zulipusercontent.net/ae6a5158c3c3f73f7cadb724ecaee86e98129753/68747470733a2f2f692e7974696d672e636f6d2f76692f426e633877396c786538412f64656661756c742e6a7067\"></a></div><p>Here is my GitHub account <a href=\"https://github.com/FrickHazard\">https://github.com/FrickHazard</a>, cheers and thank you.</p>",
        "id": 248792252,
        "sender_full_name": "Ender Doe",
        "timestamp": 1628461883
    },
    {
        "content": "<p>Invite sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 248792313,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1628461944
    },
    {
        "content": "<p>Hi ! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <br>\nI'm working on formalizing some algebraic number theory, and I have a few lemmas I'd like to PR to mathlib. Would it be possible to get PR access ? My GitHub username is <code>Paul-Lez</code>.<br>\nThanks a lot !</p>",
        "id": 248993871,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1628609096
    },
    {
        "content": "<p>Hi! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I tried to give you access, but I got an error 500. Maybe you already got the invite before GitHub broke?</p>",
        "id": 248994545,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628609425
    },
    {
        "content": "<p>I'll have a look. Where can I find invitations I have received on GitHub ?</p>",
        "id": 248994802,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1628609542
    },
    {
        "content": "<p>In your notifications I believe: <a href=\"https://github.com/notifications\">https://github.com/notifications</a></p>",
        "id": 248994848,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628609572
    },
    {
        "content": "<p>What areas of algebraic number theory are you interested in? We are currently working on merging a proof of <a href=\"https://github.com/leanprover-community/mathlib/tree/dedekind-domain-dev\">the finiteness of the class number</a> in a number ring.</p>",
        "id": 248995067,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628609680
    },
    {
        "content": "<p>Oh ok ! Well I haven't received any invite.</p>",
        "id": 248995099,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1628609695
    },
    {
        "content": "<p>I'm also having issues with github right now, so probably its a global thing?</p>",
        "id": 248995264,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628609757
    },
    {
        "content": "<p>Just tried for a third time, looks like I can't make it work :(</p>",
        "id": 248995371,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628609791
    },
    {
        "content": "<p><a href=\"https://www.githubstatus.com/\">https://www.githubstatus.com/</a></p>",
        "id": 248995428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628609822
    },
    {
        "content": "<p>Oh yeah, <a href=\"https://www.githubstatus.com/\">https://www.githubstatus.com/</a> is reporting a lot of issues</p>",
        "id": 248995458,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628609840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/github.20access/near/248995067\">said</a>:</p>\n<blockquote>\n<p>What areas of algebraic number theory are you interested in? We are currently working on merging a proof of <a href=\"https://github.com/leanprover-community/mathlib/tree/dedekind-domain-dev\">the finiteness of the class number</a> in a number ring.</p>\n</blockquote>\n<p>I'm working on formalizing Dedekind's theorem on factoring ideals <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span>  in the ring of integers of a number field (under <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>'s supervision). It's great that you've already done so much !</p>",
        "id": 248995465,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1628609843
    },
    {
        "content": "<p>Oh, that would be a great addition!</p>",
        "id": 248995781,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628609989
    },
    {
        "content": "<p>(Did another of the <span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> already try giving Paul-Lez access?)</p>",
        "id": 248995923,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628610032
    },
    {
        "content": "<p>I think I managed to send an invitation just now: <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a> <span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span></p>",
        "id": 249004137,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1628613903
    },
    {
        "content": "<p>That worked, thanks a lot !</p>",
        "id": 249005015,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1628614270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span> A useful theorem to have would be proving that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">L/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a finite extension of number fields and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is a prime of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">O</mi><mi>K</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}_K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><msub><mi mathvariant=\"script\">O</mi><mi>L</mi></msub></mrow><annotation encoding=\"application/x-tex\">P\\mathcal{O}_L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> factors as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>I</mi><mo>=</mo><mn>1</mn></mrow><mi>g</mi></msubsup><msubsup><mi>Q</mi><mi>i</mi><msub><mi>e</mi><mi>i</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">\\prod_{I=1}^gQ_i^{e_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029000000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.746292em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.1449000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>e</mi><mi>i</mi></msub><msub><mi>f</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><mi>L</mi><mo>:</mo><mi>K</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_ie_if_i=[L:K].</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">]</span><span class=\"mord\">.</span></span></span></span></p>",
        "id": 249073316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628664118
    },
    {
        "content": "<p>A while back, you mentioned this could be obtained as a corollary of the result : <br>\n<span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Discord.20server/near/244806969\">said</a>:</p>\n<blockquote>\n<p>Here is something I would very much like to have in Lean: if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">L/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a finite extension of global fields and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is a prime of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> which splits as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mi>i</mi></msub><msubsup><mi>Q</mi><mi>i</mi><msub><mi>e</mi><mi>i</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">\\prod_iQ_i^{e_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.746292em;\"><span style=\"top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.1449000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.276864em;\"><span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mi>P</mi></msub><msub><mo>⊗</mo><mi>K</mi></msub><mi>L</mi><mo>=</mo><msub><mo>⨁</mo><mi>i</mi></msub><msub><mi>L</mi><msub><mi>Q</mi><mi>i</mi></msub></msub></mrow><annotation encoding=\"application/x-tex\">K_P\\otimes_KL=\\bigoplus_iL_{Q_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨁</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> for some value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span></span></span></span> (probably <code>≃+*</code>).</p>\n</blockquote>\n<p>I'd be happy to work on it once I'm done with Dedekind's theorem. Do you have any references where I could find the proof ?</p>",
        "id": 249076660,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1628667215
    },
    {
        "content": "<p>My post-doc Maria is thinking about adeles in Lean and she is going to need this kind of thing too, but this stream probably isn't the best place to talk about technicalities (it's about GitHub access). My instinct with global fields by the way is to not attempt to unify the definition and work with number fields and function fields separately. The proof I know of the completion result is in Cassels-Froelich.</p>",
        "id": 249077400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628667853
    }
]