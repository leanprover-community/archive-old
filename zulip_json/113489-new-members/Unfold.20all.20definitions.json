[
    {
        "content": "<p>I'm spending much of my time figuring out which definition is reducible and can be unfolded. Often I just want to unfold everything that can be unfolded until I need \"cases\" to continue unfolding more definitions.<br>\nIs there a tactic that unfolds all definitions that can be unfolded (but not more than <code>n</code> to fix termination issues)?</p>",
        "id": 218210625,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606652787
    },
    {
        "content": "<p><code>simp!</code></p>",
        "id": 218210636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606652812
    },
    {
        "content": "<p>at least, that's my understanding of what that does</p>",
        "id": 218210645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606652839
    },
    {
        "content": "<p>simp! does not seem to work for me... It just fails.</p>",
        "id": 218210691,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606652888
    },
    {
        "content": "<p>do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 218210860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606653192
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">f3</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f2</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">f4</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f3</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">):</span> <span class=\"n\">f4</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">f4</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">f3</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">f2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">f1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218210872,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606653208
    },
    {
        "content": "<p>I'm looking for a better way to prove <code>f</code> than just rewriting all the definitions. <code>finish</code> does the job, but in my actual scenario, finish cannot close the goal, so it fails</p>",
        "id": 218210920,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606653253
    },
    {
        "content": "<p>simp! and simp fails directly</p>",
        "id": 218210930,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606653275
    },
    {
        "content": "<p><code>refl</code>?</p>",
        "id": 218211064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606653483
    },
    {
        "content": "<p>Does work here, but not in my case. Better mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">f1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">f3</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">f2</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">f4</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">f3</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">):</span> <span class=\"n\">f4</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f4</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f3</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f2</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218211103,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606653591
    },
    {
        "content": "<p>The ! seems to like equation compiler definitions specifically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">f3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f2</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">f4</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f3</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">):</span> <span class=\"n\">f4</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 218211150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606653644
    },
    {
        "content": "<p>I think the recommendation is just <code>simp [f1,f2,f3,f4],</code> or <code>local attribute [simp] f1 f2 f3 f4</code> then <code>simp</code></p>",
        "id": 218211204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606653730
    },
    {
        "content": "<p>If you make definitions then you're responsible for making the API to make those definitions usable, right? Isn't that the philosophy? Isn't what's happening here that eg f2 is made with no API so anything that mentions it directly or indirectly is going to be hard to use. Shouldn't one be training <code>simp</code> here or something?</p>",
        "id": 218212329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606655736
    },
    {
        "content": "<p>What do you mean with API? I'm quite new to lean ;) How would one make fn more usable? Do you mean putting <code>attribute [simp]</code> to it?</p>",
        "id": 218212399,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606655843
    },
    {
        "content": "<p>I agree with Kevin but, in this case, you can also use (with mathlib) <code>conv_lhs { whnf }</code> to reduce all the definitions away</p>",
        "id": 218212402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606655861
    },
    {
        "content": "<p>I mean that if you look at any definition in mathlib, say the cardinality of a finite set, then after one definition there are 20 theorems which enable you to use the definition without having to unfold it.</p>",
        "id": 218212507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606656013
    },
    {
        "content": "<p>Those theorems are the API, or the interface, to the object. It's like when we define addition in the natural number game and then prove associativity and commutativity and about four other things. Then you can tag stuff with <code>simp</code> and get the simplifier to do all the dirty work for you</p>",
        "id": 218212539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606656117
    },
    {
        "content": "<p>Generally if you have to unfold more than one layer of definitions in a given theorem then you don't have enough API theorems</p>",
        "id": 218212584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606656139
    },
    {
        "content": "<p>Kenny has impressed upon me the principle that if you're unfolding a definition, you're doing it wrong, unless you're making the API directly after the definition</p>",
        "id": 218212614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606656201
    },
    {
        "content": "<p>for example, in your mwe before proving <code>f4 x = x</code> we would first prove <code>f1 x = x</code>, <code>f2 x = x</code> and <code>f3 x = x</code>; that way in each theorem we only have one function to unfold</p>",
        "id": 218212623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606656226
    },
    {
        "content": "<p>I see. In my case, I often have to unfold <code>_match_n</code> and custom map functions (I'm doing program verification - I somehow feel that program verification usually has less depth than math, but one has to deal with a lot more of definitions)</p>",
        "id": 218212668,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606656262
    },
    {
        "content": "<p>In program verification you should probably just mark all your definitions as <code>@[simp] def ...</code></p>",
        "id": 218212681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606656305
    },
    {
        "content": "<p>There's a reason that hardly anyone uses multisets and yet data.multiset is (or at least was) thousands of lines long -- this stuff is used in the definition of finite sets and it's all API.</p>",
        "id": 218212686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606656312
    },
    {
        "content": "<p>:D</p>",
        "id": 218212687,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606656313
    },
    {
        "content": "<p>at least for definitions by pattern matching, that's pretty much always what you want. For definitions not by pattern matching you may want to be more controlled, but these definitions are more rare, stuff like the definition of a hoare triple</p>",
        "id": 218212750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606656387
    },
    {
        "content": "<p>thank you for all your input! I think it might really help me if I try to provide more \"trivial\" lemmas for low-level stuff that just make simplification easier. I guess efficient usage of simp is a real art to learn.</p>",
        "id": 218212866,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606656602
    }
]