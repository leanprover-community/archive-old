[
    {
        "content": "<p>I got a bit rusty: how do I prove something like this (supposing it says what I want to say)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">inducing</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>?</p>",
        "id": 220514750,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1608461892
    },
    {
        "content": "<p>One direction is going to be continuity of <code>prod.mk</code></p>",
        "id": 220515850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608463491
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inducing</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">continuous_const.prod_mk</span> <span class=\"n\">continuous_id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_induced</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)⟩,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">is_open_induced</span> <span class=\"o\">(</span><span class=\"n\">is_open_univ.prod</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220516201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608464012
    },
    {
        "content": "<p>Ok thanks! I was trying this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">constant_induces_top</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">t.induced</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">inducing</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">prod.mk</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">prod.topological_space</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">induced_inf</span><span class=\"o\">,</span> <span class=\"n\">induced_compose</span><span class=\"o\">,</span> <span class=\"n\">function.comp</span><span class=\"o\">,</span> <span class=\"n\">constant_induces_top</span><span class=\"o\">,</span> <span class=\"n\">top_inf_eq</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">induced_id</span><span class=\"o\">],</span> <span class=\"o\">}⟩</span>\n</code></pre></div>\n<p>but the last rw does not work... do you know why? (I missed a bit when I first pasted it, sorry)</p>",
        "id": 220516807,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1608465115
    },
    {
        "content": "<p>Also what is a smart way to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">constant_induces_top</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">t.induced</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>without going back to definitions?</p>",
        "id": 220518490,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1608467833
    },
    {
        "content": "<p>It's equivalent to the statement with <code>&gt;=</code>, which is equivalent to <code>λ y : Y, x</code> being continuous w.r.t. <code>⊤</code> (or any topology), which is <code>continuous_const</code></p>",
        "id": 220518596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608468034
    },
    {
        "content": "<p>Ok thanks. Is the name <code>constant_induces_top</code> appropriate?</p>",
        "id": 220519356,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1608469452
    },
    {
        "content": "<p>Also my proof above works if I add this lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">induced_id'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">t.induced</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">induced_id</span>\n</code></pre></div>\n<p>What should I do? Should this new lemma go into mathlib or should I report that <code>id</code> is not working properly?</p>",
        "id": 220519437,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1608469576
    },
    {
        "content": "<p><code>id</code> isn't reducible so there is no surprise here</p>",
        "id": 220519627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608469872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Products.20induces.20topology.20on.20fibers/near/220519356\">said</a>:</p>\n<blockquote>\n<p>Ok thanks. Is the name <code>constant_induces_top</code> appropriate?</p>\n</blockquote>\n<p>I think we would call it something more like <code>induced_const</code></p>",
        "id": 220519708,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608470000
    },
    {
        "content": "<p>Ok should we change the statement of <code>induced_id</code>? Or what solution do you propose?</p>",
        "id": 220519715,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1608470025
    },
    {
        "content": "<p>I don't really think any action is needed</p>",
        "id": 220519793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608470119
    },
    {
        "content": "<p>You could finish with <code>exact induced_id.symm</code></p>",
        "id": 220519798,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608470130
    },
    {
        "content": "<p>Certainly adding a lemma would be better than changing an existing lemma, but I'm not sure if it will ever see real use</p>",
        "id": 220519848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608470171
    },
    {
        "content": "<p>I'm not really sure if there is a reason that <code>function.comp</code> is reducible but not <code>id</code>... it is a bit confusing</p>",
        "id": 220519930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608470379
    }
]