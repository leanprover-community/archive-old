[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">greater</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">g_iff_exists_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">greater</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">greater</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ge_iff_exists_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ne_from_not_eq</span><span class=\"o\">,</span>\n\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h_left</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h_right</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n        <span class=\"n\">cases</span> <span class=\"n\">h_left</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n\n        <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n\n        <span class=\"n\">sorry</span>\n    <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>After I use <code>by_contradiction</code> I have the following tactic state: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">h_right</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">u</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>\n\n\n<p>So how to I use a_1 to conclude that u = 0. And how do I substitute this into hu to show a = b. And then how to I show a = b and h_right gives me false?</p>",
        "id": 191408532,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584900686
    },
    {
        "content": "<p>Your example is difficult to replicate. Can you try <code>push_neg at a_1</code> and see what you get?</p>",
        "id": 191409297,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584901802
    },
    {
        "content": "<p>This is my tactic state afterwards:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h_right</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>",
        "id": 191409375,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584901893
    },
    {
        "content": "<p>Then what? Does a_1 now mean u = 0, or do I have to do something else for Lean to understand this?</p>",
        "id": 191409448,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584901960
    },
    {
        "content": "<p>You should be able to get <code>u=0</code> now.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191409479,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584902038
    },
    {
        "content": "<p>And then how to I substitute u = 0 into hu? Would hu and h_right = false after the substitution?</p>",
        "id": 191409558,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584902138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"272522\">@Dev-Indra</span> if you want efficient help, you should post a MWE: one code block containing everything needed to replicate your problem (including import lines) and not more.</p>",
        "id": 191409677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584902282
    },
    {
        "content": "<p>If <code>H : u = 0</code> you can write <code>subst H</code> to replace all occurrences of <code>u</code> with <code>0</code>, or you can rewrite specific hypotheses <code>h1</code>, <code>h2</code>, <code>h3</code> using <code>rw H at h1 h2 h3</code>.</p>",
        "id": 191409707,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584902302
    },
    {
        "content": "<p>This allows people to copy-paste your code and immediately see the problem.</p>",
        "id": 191409714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584902317
    },
    {
        "content": "<p>it also allows people to respond with fully formed examples as responses, so that you don't have to guess about things like where to put the <code>subst H</code> or what punctuation to put around it</p>",
        "id": 191409799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584902420
    },
    {
        "content": "<p>So here is my code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"c1\">--Important theorems adapted from the Natural Number Game------------------------------</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">ge_iff_exists_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_iff_exists_add</span><span class=\"o\">,</span>  <span class=\"c1\">-- Ok, maybe this theorem was a little bit silly :)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">greater</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">g_iff_exists_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">greater</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">greater</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ge_iff_exists_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ne_from_not_eq</span><span class=\"o\">,</span>\n\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h_left</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h_right</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n        <span class=\"n\">cases</span> <span class=\"n\">h_left</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n\n        <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n\n        <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n\n        <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hu_left</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">hu_left</span><span class=\"o\">,</span>\n\n        <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">wrong</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n\n        <span class=\"n\">sorry</span>\n\n    <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191409850,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584902514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272522\">Dev-Indra</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20Something.20is.20False/near/191409558\" title=\"#narrow/stream/113489-new-members/topic/Proving.20Something.20is.20False/near/191409558\">said</a>:</p>\n<blockquote>\n<p>And then how to I substitute u = 0 into hu? Would hu and h_right = false after the substitution?</p>\n</blockquote>\n<p>For this kind of tasks, it is a good idea to go through the Natural Numbers Game.</p>",
        "id": 191409894,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584902534
    },
    {
        "content": "<p>Here is my tactic state: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h_right</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">h_right</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>\n\n\n<p>Is there a way to take the disjunction of hu and h_right?</p>",
        "id": 191410385,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584903110
    },
    {
        "content": "<p><code>exact h_right hu</code></p>",
        "id": 191410550,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584903297
    },
    {
        "content": "<p>and finally is there a theorem that states p and not p implies false? If so, what is the theorem name?</p>",
        "id": 191410551,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584903297
    },
    {
        "content": "<p>if <code>hnp : not p</code> and <code>hp : p</code> then <code>hnp hp : false</code></p>",
        "id": 191410575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584903340
    },
    {
        "content": "<p>because <code>not p</code> is defined to be <code>p -&gt; false</code></p>",
        "id": 191410584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584903358
    },
    {
        "content": "<p>You need to learn about negation in the foundations used by Lean.</p>",
        "id": 191410638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584903388
    },
    {
        "content": "<p>The following is probably what you wanted to do (although it's not the optimal road). You can read what library_search says and put it instead of library_search.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">--Important theorems adapted from the Natural Number Game------------------------------</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">ge_iff_exists_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_iff_exists_add</span> <span class=\"c1\">-- this is only defining an alias to le_iff_exists_add</span>\n\n<span class=\"n\">def</span> <span class=\"n\">greater</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">g_iff_exists_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">greater</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">greater</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ge_iff_exists_add</span><span class=\"o\">,</span>\n  <span class=\"c1\">--rw ne_from_not_eq, -- this line is useless</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h_right</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">],</span>\n    <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">interval_cases</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu_left</span><span class=\"o\">,</span> <span class=\"n\">hu_right</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu_left</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- linarith would finish here</span>\n    <span class=\"k\">assume</span> <span class=\"n\">wrong</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">wrong</span> <span class=\"n\">at</span> <span class=\"n\">hu_left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191410944,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584903802
    }
]