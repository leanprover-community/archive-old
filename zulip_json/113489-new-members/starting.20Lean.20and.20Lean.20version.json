[
    {
        "content": "<p>Hi,</p>\n<p>I am new to Lean but not to formal methods. I am working on a library for reasoning about artificial neural networks. Should I be using Lean3? Should I use Lean4? Should I use both in parallel? If I want to maintain and use 3 and 4 on the same system, what is the cleanest way to do that on an Ubuntu machine? </p>\n<p>Someone, please advise me on the most sensible way to use Lean given that my goal is to publish a Lean library that I hope will be used by others.</p>\n<p>Thanks for your attention,</p>\n<p>Martin</p>",
        "id": 304223150,
        "sender_full_name": "Martin Harrison",
        "timestamp": 1665852297
    },
    {
        "content": "<p>Will the library contain a working implementation?</p>",
        "id": 304223803,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1665852718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111433\">Alistair Tucker</span> <a href=\"#narrow/stream/113489-new-members/topic/starting.20Lean.20and.20Lean.20version/near/304223803\">said</a>:</p>\n<blockquote>\n<p>Will the library contain a working implementation?</p>\n</blockquote>\n<p>What is a \"working implementation\"?</p>",
        "id": 304224141,
        "sender_full_name": "Martin Harrison",
        "timestamp": 1665852926
    },
    {
        "content": "<p>I suspect the answer to your question is Lean 3. If you wanted to begin by programming a working implementation of an ANN, perhaps one could make a case for Lean 4.</p>",
        "id": 304225996,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1665854137
    },
    {
        "content": "<p>I want to start by reading in an ONNX file and parsing it, creating the objects defined therein. I need to be able to evaluate on an input the model defined in the ONNX file, but also to prove things about general input-output relations of the model.</p>\n<p>What is it exactly that might make the case for Lean 4? Trying to understand - thanks!</p>",
        "id": 304227643,
        "sender_full_name": "Martin Harrison",
        "timestamp": 1665855124
    },
    {
        "content": "<p>So Lean 4 is going to be great for doing things like reading files, manipulating IEEE <code>Float</code>s and interfacing with external libraries. (Disclaimer: I haven't done any of those things myself.) When it comes to proving things about your programs I can think of a couple of issues you face. The first is that <code>Float</code>s aren't <code>Real</code>s. The <code>Real</code>s are noncomputable  but have all the nice theoretical properties and a wealth of facts about them in the community library mathlib. You may want to resolve this issue by making your functions polymorphic; your proofs will apply to the <code>Real</code> version but you can use the <code>Float</code> version to get numbers out.  The second issue is that mathlib doesn't yet work with Lean 4. That situation should be changing soon-ish (within months).</p>",
        "id": 304237216,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1665862404
    },
    {
        "content": "<p>Great, that makes sense, plus you addressed my very next question! It will be important to prove things about behavior on actual <code>Float</code> values. That is frustrating but encouraging news about mathlib - where can I track that and is there anything that a beginner can do to hasten it?</p>\n<p>Also, is it the case that Lean 3 cannot even read in files or merely that Lean 4 will be better for that sort of thing?</p>\n<p>Thanks!</p>",
        "id": 304237853,
        "sender_full_name": "Martin Harrison",
        "timestamp": 1665862962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416965\">Martin Harrison</span> <a href=\"#narrow/stream/113489-new-members/topic/starting.20Lean.20and.20Lean.20version/near/304237853\">said</a>:</p>\n<blockquote>\n<p>Great, that makes sense, plus you addressed my very next question! It will be important to prove things about behavior on actual <code>Float</code> values. That is frustrating but encouraging news about mathlib - where can I track that and is there anything that a beginner can do to hasten it?</p>\n<p>Also, is it the case that Lean 3 cannot even read in files or merely that Lean 4 will be better for that sort of thing?</p>\n<p>Thanks!</p>\n</blockquote>\n<p>Surely some subset of the established results pertaining to <code>Real</code>s also apply to <code>Float</code>? Is it precious few? None at all? I appreciate the difference, but where can I take stock of what is available?</p>\n<p>I am looking <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/real/cau_seq_completion.lean\">here</a> for starters - is this the basis for <code>Real</code>?</p>",
        "id": 304240266,
        "sender_full_name": "Martin Harrison",
        "timestamp": 1665864927
    },
    {
        "content": "<p>We now have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/interval\">docs#interval</a> and I am currently writing the arithmetic operations on them</p>",
        "id": 304241004,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665865532
    },
    {
        "content": "<p>Then we can define dyadic numbers in a computationally nice way.</p>",
        "id": 304241240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665865712
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span><br>\nDo you know anything about reading in files? Like, could I read in a JSON and parse it with existing tools or would that take a lot of extra work?</p>",
        "id": 304250816,
        "sender_full_name": "Martin Harrison",
        "timestamp": 1665874651
    },
    {
        "content": "<p>That I have no idea! I am only interested in floats because they are an application of intervals!</p>",
        "id": 304252280,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665876035
    },
    {
        "content": "<p>I appreciate your candor.</p>",
        "id": 304252591,
        "sender_full_name": "Arfur Schloppenhowler",
        "timestamp": 1665876437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416965\">@Martin Harrison</span> This might help: <a href=\"https://agentultra.github.io/lean-4-hackers/\">https://agentultra.github.io/lean-4-hackers/</a></p>",
        "id": 304255397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665879570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/starting.20Lean.20and.20Lean.20version/near/304255397\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"416965\">Martin Harrison</span> This might help: <a href=\"https://agentultra.github.io/lean-4-hackers/\">https://agentultra.github.io/lean-4-hackers/</a></p>\n</blockquote>\n<p>Killer, thanks!</p>",
        "id": 304255482,
        "sender_full_name": "Arfur Schloppenhowler",
        "timestamp": 1665879643
    },
    {
        "content": "<p>Reading json with lean 3 is very possible, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/json.parse\">docs#json.parse</a> and likely something in the <code>io</code> namespace to read files</p>",
        "id": 304256957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665881343
    },
    {
        "content": "<p>There are no problems maintaining and using both lean 3 and 4 on an Ubuntu machine, I have this setup and it just works out of the box. For me the big difference between lean 3 and lean 4 is: do you want access to a million lines of lemmas in pure mathematics?</p>",
        "id": 304286070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665912798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416965\">Arfur Schloppenhowler</span> <a href=\"#narrow/stream/113489-new-members/topic/starting.20Lean.20and.20Lean.20version/near/304223150\">said</a>:</p>\n<blockquote>\n<p>I am working on a library for reasoning about artificial neural networks.</p>\n</blockquote>\n<p>I would also point you to <a href=\"https://github.com/IBM/FormalML\">FormalML</a>.  It is in Coq and not Lean, but it might provide some inspiration or collaboration opportunities.</p>",
        "id": 304326350,
        "sender_full_name": "Jason Rute",
        "timestamp": 1665937730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/starting.20Lean.20and.20Lean.20version/near/304326350\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"416965\">Arfur Schloppenhowler</span> <a href=\"#narrow/stream/113489-new-members/topic/starting.20Lean.20and.20Lean.20version/near/304223150\">said</a>:</p>\n<blockquote>\n<p>I am working on a library for reasoning about artificial neural networks.</p>\n</blockquote>\n<p>I would also point you to <a href=\"https://github.com/IBM/FormalML\">FormalML</a>.  It is in Coq and not Lean, but it might provide some inspiration or collaboration opportunities.</p>\n</blockquote>\n<p>Thanks, this is much appreciated! <span aria-label=\"meat\" class=\"emoji emoji-1f356\" role=\"img\" title=\"meat\">:meat:</span> <span aria-label=\"cut of meat\" class=\"emoji emoji-1f969\" role=\"img\" title=\"cut of meat\">:cut_of_meat:</span> </p>\n<p>I have used Coq but did not know about that project and will definitely try it out.</p>",
        "id": 304328897,
        "sender_full_name": "Arfur Schloppenhowler",
        "timestamp": 1665939317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416965\">@Arfur Schloppenhowler</span> There is also <a href=\"https://github.com/dselsam/certigrad\">Certigrad</a>, but it looks like it hasn't been touched in quite a while.</p>",
        "id": 304394223,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1665990615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> Does Certigrad have a future?</p>",
        "id": 304394297,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1665990648
    },
    {
        "content": "<p>Interesting approach to a different problem, almost certainly will help to study it. Thank you, bonus meats for keeping it Lean-based <span aria-label=\"meat\" class=\"emoji emoji-1f356\" role=\"img\" title=\"meat\">:meat:</span><span aria-label=\"meat\" class=\"emoji emoji-1f356\" role=\"img\" title=\"meat\">:meat:</span><span aria-label=\"meat\" class=\"emoji emoji-1f356\" role=\"img\" title=\"meat\">:meat:</span></p>",
        "id": 304503592,
        "sender_full_name": "Arfur Schloppenhowler",
        "timestamp": 1666023753
    },
    {
        "content": "<p>I'm working on <a href=\"https://github.com/lecopivo/SciLean\">SciLean</a> which is partially inspired by Certigrad.  However, my main focus is on usability then performance and only then on verification. So it might be useful only as an inspiration.</p>",
        "id": 304528308,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666031019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Very cool! Do you read in any data from disk with SciLean?</p>",
        "id": 304551519,
        "sender_full_name": "Arfur Schloppenhowler",
        "timestamp": 1666038365
    },
    {
        "content": "<p>No, so far I didn't read any data from files.</p>",
        "id": 304571584,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1666045996
    }
]