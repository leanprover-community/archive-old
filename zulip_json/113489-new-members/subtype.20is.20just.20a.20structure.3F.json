[
    {
        "content": "<p>I realized I can replicate subtype-functionality using  a structure with two fields. Is there some advantage that subtypes offer which I am missing out on?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">predicate</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">predicate</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">predicate</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 227649438,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1614191842
    },
    {
        "content": "<p>It's just notation on top of a structure</p>",
        "id": 227649596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614191893
    },
    {
        "content": "<p>Thanks. Followup question: I can get back the predicate by referencing <code>A.property</code>  by somehow I can't do this with <code>B.property</code>?</p>",
        "id": 227649970,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1614192026
    },
    {
        "content": "<p>I tried <code>(a : A).property</code> and <code>(b : B).property</code> and in that case both seem to work fine.</p>",
        "id": 227650092,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1614192070
    },
    {
        "content": "<p><code>subtype.property</code></p>",
        "id": 227650215,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614192118
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.prop\">docs#subtype.prop</a> is often syntactically the better form</p>",
        "id": 227651400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614192575
    },
    {
        "content": "<p>If using subtypes, you can show <code>subtype p = subtype q</code> if <code>p iff q</code>. Presumably the same type equality can't be achieved with two separate structures?</p>",
        "id": 227651646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614192672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Do you mean the following lemma, or do you mean an equality between <code>my_subtype</code> and <code>subtype</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">my_subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_if_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">my_subtype</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">my_subtype</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 227652766,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1614193103
    },
    {
        "content": "<p>The latter</p>",
        "id": 227653014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614193203
    },
    {
        "content": "<p>But that's a demo of the thing that I was saying was possible</p>",
        "id": 227653103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614193222
    },
    {
        "content": "<p>Ok, I'm pretty sure the latter is unprovable. (Depending on the model, it'll either be true or false.)</p>",
        "id": 227653372,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1614193325
    },
    {
        "content": "<p>I think it amounts to saying that two types are equal if they have the same recursive?</p>",
        "id": 227653444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614193358
    },
    {
        "content": "<p>Which sounds like it would have to be axiomatic like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/funext\">docs#funext</a></p>",
        "id": 227653512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614193388
    },
    {
        "content": "<p>Oh, but funext isn't an axiom!</p>",
        "id": 227655405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614194142
    }
]