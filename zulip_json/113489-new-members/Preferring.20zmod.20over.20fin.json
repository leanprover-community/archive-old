[
    {
        "content": "<p>A lot of recent threads have been about some of the missing API in <code>fin</code>. Would <code>zmod</code> be a better choice for some things? For example, if I want to talk about the <code>minor</code> of a <code>matrix (fin (n + 1)) (fin (n + 1)) R</code>, or by dropping a row and column via <code>succ_above</code>, would this be easier if I just chose to use <code>zmod</code>? <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 206873747,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597353945
    },
    {
        "content": "<p>but the matrix API doesn't support <code>zmod</code> right</p>",
        "id": 206874463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597354318
    },
    {
        "content": "<p>What part of the API?</p>",
        "id": 206874656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597354417
    },
    {
        "content": "<p>The API certainly don't assume <code>fin n</code> is used.</p>",
        "id": 206874667,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597354430
    },
    {
        "content": "<p><code>matrix/notation</code> does.</p>",
        "id": 206875002,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597354606
    },
    {
        "content": "<p>Do you mean the notation to enter explicit matrices?</p>",
        "id": 206875054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597354645
    },
    {
        "content": "<p>That's too concrete for me...</p>",
        "id": 206875161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597354702
    },
    {
        "content": "<p>Do you have maps from <code>zmod n \\to zmod (n + 1)</code> (like <code>cast_succ</code>, <code>succ_above</code>, <code>pred_above</code>)? I'm sure you could define them but I doubt they exist as they seem much more natural for <code>fin</code>, of course one could argue that this is just an API issue but: having maps between <code>zmod n</code> and <code>zmod m</code> that aren't group morphisms seems odd.</p>",
        "id": 206875560,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597355012
    },
    {
        "content": "<p>I don't see how using <code>zmod</code> could be preferable (unless in a situation where indexing by <code>zmod</code> makes sense for some mathematical reason)</p>",
        "id": 206875636,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597355068
    },
    {
        "content": "<p>If people want to formalize more CS, then expressing a matrix with directly indexable types that have the equivalent of <code>pred</code> and <code>succ</code> is very useful for proofs of dynamic programming, for example.</p>",
        "id": 206875688,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597355115
    },
    {
        "content": "<p>So it's a preference to making <code>fin</code> have a more filled out API than switching to <code>zmod</code>, in general?</p>",
        "id": 206875719,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597355158
    },
    {
        "content": "<p>It seems to me that you are in a worse state, not a better one, if you want to compute the minors of an n+1 x n+1 matrix and you are using zmod. The key thing you need here is the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>δ</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\delta^{n+1,i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> from fin n to fin (n+1) which omits i, and that is surely something which <code>fin n</code> should have. These maps are important for simplicial homology and simplicial sets and simplicial everything.</p>",
        "id": 206883498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597361109
    },
    {
        "content": "<p>Yes, that is <code>fin.succ_above</code>.</p>",
        "id": 206883613,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597361226
    },
    {
        "content": "<p>Then given that this exists for fin n but surely doesn't exist for zmod, surely using fin n is better?</p>",
        "id": 206883735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597361367
    }
]