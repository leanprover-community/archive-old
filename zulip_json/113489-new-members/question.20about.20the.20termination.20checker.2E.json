[
    {
        "content": "<p>Hello, <br>\nAny ideas on how to guide the termination checker into accepting this definition? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Stage</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span>\n <span class=\"bp\">|</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span>\n<span class=\"kn\">open</span> <span class=\"n\">Stage</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CodeRep</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"n\">Stage</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">CodeRep</span> <span class=\"n\">A</span> <span class=\"n\">s0</span>\n</code></pre></div>\n<p>I tried <code>using_well_founded</code>, but didn't get the job done.</p>",
        "id": 219663083,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1607721277
    },
    {
        "content": "<p>The best online resource is <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">this</a>, but if that doesn't work then usually someone comes around here and sorts things out :-)</p>",
        "id": 219669127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607724753
    },
    {
        "content": "<p>You can pull <code>A</code> out of the pattern match and stick it before the colon</p>",
        "id": 219669329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607724918
    },
    {
        "content": "<p>I read that online resource myself, and came up with this monster:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span> <span class=\"kd\">inductive</span> <span class=\"n\">Stage</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span>\n <span class=\"bp\">|</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span>\n<span class=\"kn\">open</span> <span class=\"n\">Stage</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">Stage</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"n\">s0</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CodeRep</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"n\">Stage</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">thing</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">s0</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;</span> <span class=\"n\">thing</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">s1</span><span class=\"o\">⟩,</span>\n   <span class=\"k\">from</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"n\">CodeRep</span> <span class=\"n\">A</span> <span class=\"n\">s0</span>\n <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">thing</span><span class=\"o\">⟩]}</span>\n</code></pre></div>\n<p>but it's my first time, and I'm sure one can do a lot better.</p>",
        "id": 219669639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607725191
    },
    {
        "content": "<p>Another way is to make an auxiliary def using nat so that lean can prove the wf relation itself</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Stage</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span>\n <span class=\"bp\">|</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span>\n<span class=\"kn\">open</span> <span class=\"n\">Stage</span>\n<span class=\"kd\">def</span> <span class=\"n\">CodeRep_aux</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"bp\">→</span>  <span class=\"n\">ℕ</span>  <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">CodeRep_aux</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">CodeRep</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"n\">Stage</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">CodeRep_aux</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">CodeRep_aux</span> <span class=\"n\">A</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 219669838,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607725325
    },
    {
        "content": "<p>Using Eric's idea I cleaned up my version a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Stage</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span>\n <span class=\"bp\">|</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span>\n<span class=\"kn\">open</span> <span class=\"n\">Stage</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CodeRep</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n <span class=\"bp\">|</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">thing</span> <span class=\"n\">s0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">thing</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n         <span class=\"n\">CodeRep</span> <span class=\"n\">s0</span>\n <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">thing</span><span class=\"o\">⟩]}</span>\n</code></pre></div>",
        "id": 219669883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607725359
    },
    {
        "content": "<p>But really I think what we need is a derive handler for ordering, so we can do<br>\n<code>@[derive linear_order]</code> in front of Stage (Haskell has something like this i think, <code>deriving Ord</code>)</p>",
        "id": 219669919,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607725410
    },
    {
        "content": "<p>This would automatically put a nice lt relation on a finite type like this which you could use in the well founded proof as  the relation (the default is sizeof which is not actually well founded for this type)</p>",
        "id": 219670011,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607725483
    },
    {
        "content": "<p>I don't think this is a good default</p>",
        "id": 219694648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607756558
    },
    {
        "content": "<p>the structural order makes more sense as a default order because it's not sensitive to order of constructors</p>",
        "id": 219694685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607756620
    },
    {
        "content": "<p>by the way, the <code>derive fintype</code> handler is very near to defining this order (if it used lists instead of finsets it would generate this order)</p>",
        "id": 219694749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607756742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/question.20about.20the.20termination.20checker.2E/near/219669883\">said</a>:</p>\n<blockquote>\n<p>Using Eric's idea I cleaned up my version a bit:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Stage</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span>\n <span class=\"bp\">|</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span>\n<span class=\"kn\">open</span> <span class=\"n\">Stage</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CodeRep</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stage</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">s0</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n <span class=\"bp\">|</span> <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">thing</span> <span class=\"n\">s0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">thing</span> <span class=\"n\">s1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n         <span class=\"n\">CodeRep</span> <span class=\"n\">s0</span>\n <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">thing</span><span class=\"o\">⟩]}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you.. I used this and it works for me.</p>",
        "id": 219721457,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1607798612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/question.20about.20the.20termination.20checker.2E/near/219669919\">said</a>:</p>\n<blockquote>\n<p>But really I think what we need is a derive handler for ordering, so we can do<br>\n<code>@[derive linear_order]</code> in front of Stage (Haskell has something like this i think, <code>deriving Ord</code>)</p>\n</blockquote>\n<p>Can you give me more direction to learn about the derive handler? Where can I read more about it?</p>",
        "id": 219721534,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1607798706
    },
    {
        "content": "<p>I too would like to know more about <code>derive</code>: see <a href=\"https://github.com/leanprover-community/mathlib/issues/3533\">#3533</a>.</p>",
        "id": 219723014,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607800835
    },
    {
        "content": "<p>I'm not sure about writing the documentation ATM, but a quick pointer: <code>derive_fintype</code> is a simple example of a derive handler. The tactic gets a goal <code>|- my_class T</code> where <code>T</code> is an inductive type, and you can prove it however you like</p>",
        "id": 219727381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607806436
    }
]