[
    {
        "content": "<p><em>I'm using Lean 4 nightly 2022-01-04.</em></p>\n<p>I don't understand the generated induction hypothesis in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">List.forall₂</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">forall₂</span> <span class=\"n\">R</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">forall₂</span> <span class=\"n\">R</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">forall₂</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">l₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"c1\">-- This theorem is supposed to be used in the induction's `cons` case below,</span>\n<span class=\"c1\">-- to show that the lists' heads are equal.</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">same_equiv_eq</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">equiv</span> <span class=\"n\">c</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">equiv</span> <span class=\"n\">c</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">g₁</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">i</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span> <span class=\"n\">i</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span> <span class=\"n\">i</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hs₁</span> <span class=\"o\">:</span> <span class=\"n\">g₁</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hs₂</span> <span class=\"o\">:</span> <span class=\"n\">g₂</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hs₁</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hs₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span>\n  <span class=\"n\">case</span> <span class=\"n\">h.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">h.cons</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The goal state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h₁</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">h₂</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n<span class=\"n\">hs₁</span> <span class=\"o\">:</span> <span class=\"n\">g₁</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span>\n<span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n<span class=\"n\">hs₂</span> <span class=\"o\">:</span> <span class=\"n\">g₂</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">Char</span>\n<span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span>\n<span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">tl</span> <span class=\"bp\">→</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"n\">tl</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"n\">tl</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span>\n<span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">s₁</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">s₂</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span>\n</code></pre></div>\n<p>I can't use <code>hi</code> since  it requires <code>f i = tl</code>, which isn't true by <code>hc</code>.<br>\nBut I don't understand where this condition is coming from.</p>",
        "id": 267043595,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1641463495
    },
    {
        "content": "<p>You probably need a <code>generalizing</code> clause in the <code>induction</code></p>",
        "id": 267045169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641464608
    },
    {
        "content": "<p>The <code>f i = tl</code> assumption is related to the <code>hc : f i = c</code> assumption you introduced. Try <code>generalize : f i = c</code> instead</p>",
        "id": 267045356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641464719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Problem.20with.20induction.20hypothesis/near/267045356\">said</a>:</p>\n<blockquote>\n<p>The <code>f i = tl</code> assumption is related to the <code>hc : f i = c</code> assumption you introduced. Try <code>generalize : f i = c</code> instead</p>\n</blockquote>\n<p>Do you mean like this?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">g₁</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">i</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span> <span class=\"n\">i</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span> <span class=\"n\">i</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span>\n  <span class=\"n\">case</span> <span class=\"n\">h.nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">h.cons</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hi</span>\n</code></pre></div>\n<p>Because in that case the <code>cons</code> case is trivial as <code>hi : g₁ i = g₂ i</code> but the <code>nil</code> case doesn't reflect the nil-ness at all.</p>",
        "id": 267051789,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1641469484
    },
    {
        "content": "<p>Oh, it looks like lean 4 <code>generalize</code> does not incorporate the behavior of mathlib's <code>generalize_hyp</code>. The <code>generalize</code> line is supposed to replace <code>f i</code> in the context. Without it, you can still do it with <code>rw</code> like you were doing before, plus <code>clear</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">List.forall₂</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">g₁</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"n\">i</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span> <span class=\"n\">i</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span> <span class=\"n\">i</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hs₁</span> <span class=\"o\">:</span> <span class=\"n\">g₁</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hs₂</span> <span class=\"o\">:</span> <span class=\"n\">g₂</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hs₁</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hs₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hc</span> <span class=\"n\">hs₁</span> <span class=\"n\">hs₂</span>\n  <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"n\">generalizing</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">)</span>\n  <span class=\"n\">case</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">h.cons</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The parentheses around induction are due to a precedence bug, cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 267146666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641525280
    }
]