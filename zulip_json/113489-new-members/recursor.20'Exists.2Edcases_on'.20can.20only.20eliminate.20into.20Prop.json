[
    {
        "content": "<p>I already got this error in the past and I do not understand what causes it and how to fix it. Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.module</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.tower</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_conjugate</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exist_i</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">S</span> <span class=\"n\">ℂ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℝ</span> <span class=\"n\">S</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">conj</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">S</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">algebra_map</span> <span class=\"n\">S</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">S</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">complex.I</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iso_sc</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℝ</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">S</span> <span class=\"n\">ℂ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℝ</span> <span class=\"n\">S</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">conj</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">S</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">algebra_map</span> <span class=\"n\">S</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span> <span class=\"bp\">≃+*</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exist_i</span> <span class=\"n\">h</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 301905782,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1664699463
    },
    {
        "content": "<p>The short and inaccurate explanation is that there could be multiple <code>s</code> with <code>(algebra_map S ℂ) s = complex.I</code>, and then which one do you want to pick in the definition of <code>iso_sc</code>?</p>",
        "id": 301908649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1664701659
    },
    {
        "content": "<p>Your goal is not a Prop so some tactics don't work properly (you shouldn't be in tactic mode at all really). Use <code>exists.some</code> instead.</p>",
        "id": 301909758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1664702514
    },
    {
        "content": "<p>essentially this is because all terms of a <code>Prop</code> are defeq to each other; for example, for  <code>∃ n : nat, true</code>, both 0 and 1 work, so what should Lean choose? Even with a unique existence, this isn't enough for Lean to find out, as in certain cases it couldn't compute what it is! (For example, consider  <code>∃! o : real, is_champernownes_constant o</code>...)</p>",
        "id": 301915445,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1664706018
    }
]