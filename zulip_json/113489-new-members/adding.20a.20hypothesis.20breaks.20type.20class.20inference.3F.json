[
    {
        "content": "<p>What am I doing wrong here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">linear_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 199309746,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590938404
    },
    {
        "content": "<p><code>integral_domain</code> extends <code>comm_ring</code></p>",
        "id": 199309813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590938604
    },
    {
        "content": "<p>so your new integral domain instance defines new multiplications and additions on <code>R</code> that has no relation to the previous instance</p>",
        "id": 199309831,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590938619
    },
    {
        "content": "<p>so <code>M</code> is not a module over <code>R</code> with the new operations</p>",
        "id": 199309834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590938628
    },
    {
        "content": "<p>Thanks. So a solution, for example, might be to declare a new variable <code>N</code> with <code>R</code>-module instance <em>after</em> the <code>integral_domain</code> instance declaration on <code>R</code>?</p>",
        "id": 199309885,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590938720
    },
    {
        "content": "<p>Yes that works</p>",
        "id": 199309903,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590938754
    },
    {
        "content": "<p>Better hide the previous <code>variables</code> in a <code>section</code>. Otherwise your lemmas will have unused argument <code>[comm_ring R]</code>.</p>",
        "id": 199310085,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590939082
    }
]