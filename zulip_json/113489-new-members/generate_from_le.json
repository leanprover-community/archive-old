[
    {
        "content": "<p>I'm trying to understand the basics of <a href=\"https://github.com/leanprover-community/mathlib/blob/16ef29135dfe41fba018ef7005909c279bee45f5/src/measure_theory/measurable_space.lean#L302-L307\">generate_from_le</a>. I don't get what's happening in this step. First of all, what does<code>m.measurable_set' t</code> say, in English?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">generate_from_le'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set'</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">generate_from</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- don't know how to synthesize placeholder</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">-- Ω : Type,</span>\n<span class=\"c1\">-- _inst_1 : measurable_space Ω,</span>\n<span class=\"c1\">-- s : set (set Ω),</span>\n<span class=\"c1\">-- m : measurable_space Ω,</span>\n<span class=\"c1\">-- h : ∀ (t : set Ω), t ∈ s → m.measurable_set' t,</span>\n<span class=\"c1\">-- t : set Ω</span>\n<span class=\"c1\">-- ⊢ (generate_from s).measurable_set' t ≤ m.measurable_set' t</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">generate_from_le'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set'</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">generate_from</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- don't know how to synthesize placeholder</span>\n<span class=\"c1\">-- context:</span>\n<span class=\"c1\">-- Ω : Type,</span>\n<span class=\"c1\">-- _inst_1 : measurable_space Ω,</span>\n<span class=\"c1\">-- s : set (set Ω),</span>\n<span class=\"c1\">-- m : measurable_space Ω,</span>\n<span class=\"c1\">-- h : ∀ (t : set Ω), t ∈ s → m.measurable_set' t,</span>\n<span class=\"c1\">-- t : set Ω,</span>\n<span class=\"c1\">-- ht : (generate_from s).measurable_set' t</span>\n<span class=\"c1\">-- ⊢ m.measurable_set' t</span>\n</code></pre></div>",
        "id": 229544444,
        "sender_full_name": "Iocta",
        "timestamp": 1615320509
    },
    {
        "content": "<p>First of all, what does<code>m.measurable_set' t</code> say, in English? I think it means <code>m</code> is a sigma algebra and <code>m.measurable_set' t</code> is its set.</p>",
        "id": 229545210,
        "sender_full_name": "Iocta",
        "timestamp": 1615320772
    },
    {
        "content": "<p>But then how does adding an argument take \"please show the sigma algebra <code>generate_from s</code>'s set <code>t</code> is a subset of the sigma algebra <code>m</code>'s set -- the same <code>t</code>\" to \"please show <code>m</code> is a sigma algebra with set <code>t</code>\" (if that's what's happening)?</p>",
        "id": 229545661,
        "sender_full_name": "Iocta",
        "timestamp": 1615320945
    },
    {
        "content": "<p>The type of <code>t</code> is <code>set \\Omega</code>. <code>m.measurable_set' t</code> means that  <code>t</code> is a measurable subset of the space <code>m</code>. <code>generate_from_le</code> is saying that  if <code>s</code> is a collection of measurable subsets of <code>m</code>, then the sigma algebra generated by <code>s</code> is less than or equal to the sigma algebra on <code>m</code>.</p>",
        "id": 229546416,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1615321266
    },
    {
        "content": "<p>How does adding the <code>ht</code> argument transform the \"less than or equal\" goal into the <code>m.measurable_set' t</code> goal?</p>",
        "id": 229547338,
        "sender_full_name": "Iocta",
        "timestamp": 1615321608
    },
    {
        "content": "<p>Proving that <code>(generate_from s).measurable_set' t ≤ m.measurable_set' t</code> is defeq to proving that <code>(generate_from s).measurable_set' t</code> implies <code>m.measurable_set' t</code></p>",
        "id": 229548783,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1615322124
    },
    {
        "content": "<p>How can I see that?</p>",
        "id": 229549008,
        "sender_full_name": "Iocta",
        "timestamp": 1615322197
    },
    {
        "content": "<p>I think what lean is doing is that its treating <code>m.measurable_set' t</code> as a collection of sets of <code>\\Omega</code>, i.e. it has type <code>set (set \\Omega)</code>. Then lean looks at the <code>\\le</code> symbol and tries to find an instance of a partial order on sets, which exists. Then lean realizes that you're trying to prove that the thing on the left is a subset of the thing on the right.</p>",
        "id": 229549301,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1615322318
    },
    {
        "content": "<p>is <a href=\"https://github.com/leanprover-community/mathlib/blob/16ef29135dfe41fba018ef7005909c279bee45f5/src/measure_theory/measurable_space.lean#L278\">https://github.com/leanprover-community/mathlib/blob/16ef29135dfe41fba018ef7005909c279bee45f5/src/measure_theory/measurable_space.lean#L278</a> relevant?</p>",
        "id": 229549402,
        "sender_full_name": "Iocta",
        "timestamp": 1615322358
    },
    {
        "content": "<p>And proving that <code>a \\subset b</code> unfolds to <code>x \\in a</code> implies <code>x in b</code>.</p>",
        "id": 229549437,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1615322379
    },
    {
        "content": "<p>Well yes, but that's not what you want I think. You're trying to find the partial order that defines what <code>m₁.measurable_set' ≤ m₂.measurable_set'</code> means.</p>",
        "id": 229549609,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1615322427
    },
    {
        "content": "<p>Nevermind, what I've said is inaccurate. I think the gist of what I said is probably the right idea, but it might not be a partial order on sets. It should be directly related to lattices?</p>",
        "id": 229550143,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1615322609
    },
    {
        "content": "<p>You could try going into tactic mode and doing <code>unfold (\\le)</code> instead of <code>intro ht</code> and see if it unfolds to a implication</p>",
        "id": 229550494,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1615322742
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">generate_from_le'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set'</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">generate_from</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">has_le.le</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">preorder.le</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">partial_order.le</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">semilattice_inf.le</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">lattice.le</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">linear_order.le</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">partial_order.le</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">order_bot.le</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">bounded_lattice.le</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">bounded_distrib_lattice.le</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n<span class=\"c1\">-- 1 goal</span>\n<span class=\"c1\">-- Ω: Type</span>\n<span class=\"c1\">-- _inst_1: measurable_space Ω</span>\n<span class=\"c1\">-- s: set (set Ω)</span>\n<span class=\"c1\">-- m: measurable_space Ω</span>\n<span class=\"c1\">-- h: ∀ (t : set Ω), has_mem.mem t s → m.measurable_set' t</span>\n<span class=\"c1\">-- t: set Ω</span>\n<span class=\"c1\">-- ⊢ (generate_from s).measurable_set' t → m.measurable_set' t</span>\n</code></pre></div>",
        "id": 229551037,
        "sender_full_name": "Iocta",
        "timestamp": 1615322924
    },
    {
        "content": "<p>What is the tactic version of this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">generate_from_le</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set'</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">generate_from</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">generate_measurable</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">ht.rec_on</span> <span class=\"n\">h</span>\n  <span class=\"o\">(</span><span class=\"n\">measurable_set_empty</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">measurable_set_compl</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">measurable_set_Union</span> <span class=\"n\">m</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">generate_from_le'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set'</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">generate_from</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">he</span> <span class=\"n\">hf</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span>    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"n\">hb</span><span class=\"o\">,</span>  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_set_empty</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">measurable_set_compl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229600175,
        "sender_full_name": "Iocta",
        "timestamp": 1615349199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> you can just fill in the remaining arguments, right?</p>",
        "id": 229600295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615349292
    },
    {
        "content": "<p>Or otherwise, use <code>assumption</code>, if you want lean to figure them out for you</p>",
        "id": 229600313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615349306
    },
    {
        "content": "<p>Replacing <code>sorry</code> with <code>assumption</code> doesn't satisfy lean, maybe I don't understand what you mean.</p>",
        "id": 229600865,
        "sender_full_name": "Iocta",
        "timestamp": 1615349738
    },
    {
        "content": "<p>What does your goal look like?</p>",
        "id": 229601212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615350056
    },
    {
        "content": "<p>If you give me something that I can copy-paste into an empty lean file, I can take a look [see <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>]</p>",
        "id": 229601271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615350080
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure_space</span> <span class=\"n\">classical</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variable</span> <span class=\"bp\">Ω</span>   <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">measurable_space</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">generate_from_le'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set'</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">generate_from</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">he</span> <span class=\"n\">hf</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span>    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"n\">hb</span><span class=\"o\">,</span>  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_set_empty</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">measurable_set_compl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229601382,
        "sender_full_name": "Iocta",
        "timestamp": 1615350186
    },
    {
        "content": "<p>the term version is <a href=\"https://github.com/leanprover-community/mathlib/blob/16ef29135dfe41fba018ef7005909c279bee45f5/src/measure_theory/measurable_space.lean#L302\">https://github.com/leanprover-community/mathlib/blob/16ef29135dfe41fba018ef7005909c279bee45f5/src/measure_theory/measurable_space.lean#L302</a></p>",
        "id": 229601414,
        "sender_full_name": "Iocta",
        "timestamp": 1615350217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> the problem was that <code>cases</code> is too crude of a tactic for this job. <code>induction</code> works better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">generate_from_le'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set'</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">generate_from</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_set_empty</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_set_compl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_set_Union</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229602171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615350868
    },
    {
        "content": "<p>I see, thanks</p>",
        "id": 229604159,
        "sender_full_name": "Iocta",
        "timestamp": 1615352698
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/blob/16ef29135dfe41fba018ef7005909c279bee45f5/src/measure_theory/measurable_space.lean#L302\">measurable_space.lean</a> we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"c1\">-- at top level</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span> <span class=\"c1\">-- in a lemma</span>\n</code></pre></div>\n<p>what is the difference between these two uses of <code>measurable_space</code>?</p>",
        "id": 229737100,
        "sender_full_name": "Iocta",
        "timestamp": 1615407866
    },
    {
        "content": "<p>You'd use concrete instances when you are reasoning about the collection of all measurable space structures on a type, and type class inference if you just want to fix one measurable space structure once and for all and then do some measure theory.</p>",
        "id": 229807319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615448563
    },
    {
        "content": "<p>What does it mean that they're both used on the same variable <code>α</code> in that file?</p>",
        "id": 229809189,
        "sender_full_name": "Iocta",
        "timestamp": 1615449703
    },
    {
        "content": "<p>I don't think they are both in scope at the same time</p>",
        "id": 229811357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615450969
    },
    {
        "content": "<p>the <code>[measurable_space A]</code> is in a section that ends before the lemma you see</p>",
        "id": 229811396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615450996
    }
]