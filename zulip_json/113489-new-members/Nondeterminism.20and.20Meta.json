[
    {
        "content": "<p>Hi all, <br>\nI'm working on translating as much as I can of Winskel's <em>Formal Semantics of Programming Languages</em> into Lean, and of course there is trouble with representing while loops as recursive functions. I know that the <em>Hitchhiker's guide</em> uses  inductive predicates to get around this, but I'm wondering if their are any other workarounds?  I can get Lean to type-check my function with the <code>meta</code> keyword, but I haven't been able to find documentation references for what this does. What am I losing by using <code>meta</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">imperative</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Loc</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">string</span>\n<span class=\"kn\">variables</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Loc</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Aexp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">Loc</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span>\n\n<span class=\"n\">def</span> <span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Loc</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">Aexp</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">has_one</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">Aexp</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">has_add</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">Aexp</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">has_sub</span> <span class=\"o\">:</span> <span class=\"n\">has_sub</span> <span class=\"n\">Aexp</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">has_mul</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">Aexp</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">aexp_eval</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">loc</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">aexp_eval</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">aexp_eval</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">sub</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">aexp_eval</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">aexp_eval</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Aexp</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">aexp_eval</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">aexp_eval</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">aexp_eval</span> <span class=\"n\">σ</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">aexp_reduce</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">σ</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"bp\">`</span> <span class=\"err\">↠</span> <span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">aexp_reduce</span> <span class=\"n\">σ</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">aexp_equiv</span> <span class=\"o\">:</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"err\">↠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"err\">↠</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">a₁</span> <span class=\"bp\">`</span> <span class=\"err\">∼</span> <span class=\"bp\">`</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"n\">aexp_equiv</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Bexp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Bexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Bexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Bexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">lte</span> <span class=\"o\">:</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Bexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">Bexp</span> <span class=\"bp\">→</span> <span class=\"n\">Bexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"n\">Bexp</span> <span class=\"bp\">→</span> <span class=\"n\">Bexp</span> <span class=\"bp\">→</span> <span class=\"n\">Bexp</span>\n<span class=\"bp\">|</span> <span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"n\">Bexp</span> <span class=\"bp\">→</span> <span class=\"n\">Bexp</span> <span class=\"bp\">→</span> <span class=\"n\">Bexp</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bexp_eval</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bexp</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bexp</span><span class=\"bp\">.</span><span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bexp</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Bexp</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span><span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Bexp</span><span class=\"bp\">.</span><span class=\"n\">lte</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span><span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"bp\">≤</span> <span class=\"bp\">⟨</span><span class=\"n\">a₂</span><span class=\"o\">,</span><span class=\"n\">σ</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Bexp</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bexp_eval</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"k\">then</span> <span class=\"n\">ff</span> <span class=\"k\">else</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Bexp</span><span class=\"bp\">.</span><span class=\"n\">conj</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">band</span> <span class=\"o\">(</span><span class=\"n\">bexp_eval</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bexp_eval</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Bexp</span><span class=\"bp\">.</span><span class=\"n\">disj</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bor</span> <span class=\"o\">(</span><span class=\"n\">bexp_eval</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bexp_eval</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">bexp_eval</span> <span class=\"n\">σ</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Com</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">skip</span> <span class=\"o\">:</span> <span class=\"n\">Com</span>\n<span class=\"bp\">|</span> <span class=\"n\">assign</span> <span class=\"o\">:</span> <span class=\"n\">Loc</span> <span class=\"bp\">→</span> <span class=\"n\">Aexp</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span>\n<span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span>\n<span class=\"bp\">|</span> <span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">Bexp</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span>\n<span class=\"bp\">|</span> <span class=\"n\">while</span> <span class=\"o\">:</span> <span class=\"n\">Bexp</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">Com</span>\n<span class=\"kn\">notation</span> <span class=\"n\">c₁</span> <span class=\"bp\">`;;`</span> <span class=\"n\">c₂</span> <span class=\"o\">:=</span> <span class=\"n\">Com</span><span class=\"bp\">.</span><span class=\"n\">seq</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span>\n\n<span class=\"n\">def</span> <span class=\"n\">asgn</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Loc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">m</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"n\">σ</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">X</span> <span class=\"bp\">`&lt;-`</span> <span class=\"n\">m</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">asgn</span> <span class=\"n\">σ</span> <span class=\"n\">m</span> <span class=\"n\">X</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">execute</span> <span class=\"o\">:</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">state</span>\n<span class=\"bp\">|</span> <span class=\"n\">Com</span><span class=\"bp\">.</span><span class=\"n\">skip</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">σ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Com</span><span class=\"bp\">.</span><span class=\"n\">assign</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"err\">←</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">σ</span><span class=\"bp\">⟩</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">;;</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">σ&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">execute</span> <span class=\"n\">c₁</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n                                 <span class=\"n\">execute</span> <span class=\"n\">c₂</span> <span class=\"n\">σ&#39;</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Com</span><span class=\"bp\">.</span><span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"k\">with</span>\n                        <span class=\"bp\">|</span><span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">execute</span> <span class=\"n\">c₁</span> <span class=\"n\">σ</span>\n                        <span class=\"bp\">|</span><span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">execute</span> <span class=\"n\">c₂</span> <span class=\"n\">σ</span>\n                        <span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Com</span><span class=\"bp\">.</span><span class=\"n\">while</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"k\">with</span>\n                     <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span>\n                     <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">σ&#39;</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">execute</span> <span class=\"n\">c</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n                              <span class=\"n\">execute</span> <span class=\"o\">(</span><span class=\"n\">Com</span><span class=\"bp\">.</span><span class=\"n\">while</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">σ&#39;</span>\n                     <span class=\"kn\">end</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">σ</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">execute</span> <span class=\"n\">c</span> <span class=\"n\">σ</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">com_reduce</span> <span class=\"o\">:</span> <span class=\"n\">Com</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">execute</span> <span class=\"n\">c</span> <span class=\"n\">σ₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">σ₂</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">imperative</span>\n</code></pre></div>",
        "id": 209193699,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1599336069
    },
    {
        "content": "<p><code>meta</code> means \"don't check if the recursion terminates\"</p>",
        "id": 209194091,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599336685
    },
    {
        "content": "<p>Everything that is <code>meta</code> is outside the theory and is untrusted.  Non-meta definitions and lemmas cannot refer to ones that are meta.  Types of <code>meta</code> definitions can't be interpreted as being theorems:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">ohno</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">ohno</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>I'm not sure whether or not <code>meta</code> lemmas are sound -- I at least couldn't give this last definition as a <code>meta lemma</code> rather than a <code>meta def</code>.</p>\n<p>I think <code>meta</code> is supposed to refer to metaprogramming -- programs that write programs, tactic blocks for example.  It is OK if metaprograms aren't completely correct in the sense that the programs they generate will be checked for type correctness by the Lean kernel.</p>",
        "id": 209194783,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599338017
    },
    {
        "content": "<p>Indeed, it's easy to prove <code>false</code> inside <code>meta</code>. (It might have been better if there had been several distinct keywords here, separately allowing, e.g. unbounded recursion, and access to metaprogramming, etc, but in Lean 3 they are all lumped together as <code>meta</code>.)</p>",
        "id": 209209022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599367228
    },
    {
        "content": "<p>In lean 4 they have been separated, into <code>unsafe</code> and <code>partial</code>. <code>partial</code> gives you unbounded recursion and <code>unsafe</code> gives you metaprogramming primitives and other non-pure functions</p>",
        "id": 209209837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599368942
    },
    {
        "content": "<p>you can prove false with either one, though</p>",
        "id": 209209846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599368977
    }
]