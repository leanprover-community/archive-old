[
    {
        "content": "<p>Using the doc I managed to define a  simple  value type </p>\n<div class=\"codehilite\"><pre><span></span>inductive value : Type\n| VBoolean : bool -&gt; value\n| VInteger : int -&gt; value\n| VString : string -&gt; value\n| VSequence : list value -&gt; value\n| VNone : value\n</pre></div>\n\n\n<p>and  a boolean equality on it (by mutually defining <code>val_eqb</code> and <code>val_list_eqb</code>). Now I'm trying to prove some facts about it (my ultimate goal would be to provide an instance of <code>decidable_eq</code>), but I'm struggling to define mutual lemmas. So far I tried:</p>\n<div class=\"codehilite\"><pre><span></span>mutual theorem val_eqb_eq, val_list_eqb_eq\nwith val_eqb_eq: ∀ v0 v1, val_eqb v0 v1 = tt ↔ v0 = v1  :=\nbegin\nsorry,\nend\nwith val_list_eqb_eq : ∀ l0 l1, val_list_eqb l0 l1 = tt ↔ l0 = l1\n</pre></div>\n\n\n<p>which has several issues:<br>\n<code>invalid equations, must be followed by a command, '.', 'with', doc-string or EOF</code> on the <code>:=</code> and <code>invalid mutual declaration, 'val_list_eqb_eq' expected</code> on the <code>end</code>.</p>\n<p>I can't find much on <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#mutual-recursion\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#mutual-recursion\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#mutual-recursion</a>, but maybe there are other resources ?</p>",
        "id": 177515778,
        "sender_full_name": "Vincent Siles",
        "timestamp": 1570452835
    },
    {
        "content": "<p>I think you have to use pattern matching notation in mutual declarations, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"kn\">theorem</span> <span class=\"n\">val_eqb_eq</span><span class=\"o\">,</span> <span class=\"n\">val_list_eqb_eq</span>\n<span class=\"k\">with</span> <span class=\"n\">val_eqb_eq</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v0</span> <span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">val_eqb</span> <span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">↔</span> <span class=\"n\">v0</span> <span class=\"bp\">=</span> <span class=\"n\">v1</span>\n<span class=\"bp\">|</span> <span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"k\">with</span> <span class=\"n\">val_list_eqb_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l0</span> <span class=\"n\">l1</span><span class=\"o\">,</span> <span class=\"n\">val_list_eqb</span> <span class=\"n\">l0</span> <span class=\"n\">l1</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">↔</span> <span class=\"n\">l0</span> <span class=\"bp\">=</span> <span class=\"n\">l1</span>\n<span class=\"bp\">|</span> <span class=\"n\">l0</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>But note that nested inductives (<code>VSequence : list value -&gt; value</code>) are not one of the strong points of Lean 3. There's limited support for this and you'll get frustrated quickly.</p>",
        "id": 177520026,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570455754
    },
    {
        "content": "<p>Damned... and I was thinking I could get away from Coq for that reason :D Thanks for the insight</p>",
        "id": 177521188,
        "sender_full_name": "Vincent Siles",
        "timestamp": 1570456502
    },
    {
        "content": "<p>My advice would be to avoid the <code>mutual</code> keyword entirely, and roll your own \"all-at-once\" object defined recursively, then define projectors pulling out the bits you want.</p>",
        "id": 177574877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570495819
    },
    {
        "content": "<p>I tried something like that, but I found that it was as annoying as doing it in Coq, so I'll stick with what I know for the moment</p>",
        "id": 177588666,
        "sender_full_name": "Vincent Siles",
        "timestamp": 1570517816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243322\">@Vincent Siles</span>  Lean implements nested inductives using regular inductives, and you can roll your own without too much difficulty. We're working on a more general framework for nested inductives, but lean's built in inductives have a decent behavior as is</p>",
        "id": 177589538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570518987
    },
    {
        "content": "<p>Lean's built in compilation for nested inductives is... half baked</p>",
        "id": 177589624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570519123
    },
    {
        "content": "<p>I'll definitenly check it out, but right now I have some time constraints, so I'll stick to what I know :p</p>",
        "id": 177589698,
        "sender_full_name": "Vincent Siles",
        "timestamp": 1570519228
    },
    {
        "content": "<p>In the case of the <code>value</code> type, I don't even see why a nested inductive is necessary. Can't you just do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">VBoolean</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">VInteger</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">VString</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">VNil</span> <span class=\"o\">:</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">VCons</span> <span class=\"o\">:</span> <span class=\"n\">value</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">value</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">VNone</span> <span class=\"o\">:</span> <span class=\"n\">value</span>\n</pre></div>",
        "id": 177589700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570519240
    },
    {
        "content": "<p>It's less easy, I can't directly reuse the <code>list</code> library . What you propose is the usual solution to deal with nested. But you loose all benefits of actual lists</p>",
        "id": 177589725,
        "sender_full_name": "Vincent Siles",
        "timestamp": 1570519314
    },
    {
        "content": "<p>you won't really be able to reuse the list library anyway, because you will have lots of induction constraints</p>",
        "id": 177589777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570519351
    },
    {
        "content": "<p>unless you are using it nonrecursively, in which case it's easy to build an isomorphism</p>",
        "id": 177589788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570519372
    },
    {
        "content": "<p>indeed. That's my current solution with Coq</p>",
        "id": 177589806,
        "sender_full_name": "Vincent Siles",
        "timestamp": 1570519402
    },
    {
        "content": "<p>(the isomorphism / coercion)</p>",
        "id": 177589813,
        "sender_full_name": "Vincent Siles",
        "timestamp": 1570519413
    },
    {
        "content": "<p>I think that no matter how you cut it it won't be as nice as a true nested inductive because it's not <em>really</em> a list constructor, it's only a shim over the basic inductive. If you are willing to put <code>meta</code> it will act like the \"real thing\"</p>",
        "id": 177589877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570519507
    },
    {
        "content": "<p>I don't know about <code>meta</code>. I'll read about it when I'll arrive at the office, thanks</p>",
        "id": 177589948,
        "sender_full_name": "Vincent Siles",
        "timestamp": 1570519588
    },
    {
        "content": "<p>This basically means \"I don't care about proving things, pretend this is Haskell\". It lifts the well foundedness restrictions on recursion and basically all constraints on inductives (positivity, nestedness, etc), meaning that the logic becomes unsound but it still has an operational semantics and you can use it like a programming language</p>",
        "id": 177590074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570519709
    },
    {
        "content": "<p>That's a really nice way of thinking about <code>meta</code> -- it should be called <code>haskell</code>.</p>",
        "id": 177597262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570527175
    }
]