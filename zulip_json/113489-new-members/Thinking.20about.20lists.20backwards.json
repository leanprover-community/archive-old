[
    {
        "content": "<p>I have a simple question, and then a follow up philosophy question.</p>\n<p>If I have a list, and a statement that it is not empty, is there an existing mechanism for extracting all but the last element (the equivalent of python's <code>mylist[:-1]</code>.  In particular, one that is \"supported\" in terms of lemmas about its length etc.</p>\n<p>My philosophical question is how to deal with the back of lists.  Since lists are defined inductively \"from the front\", it is easy to talk about their heads, tails and such forth.  It seems less simple to talk about their last element and the preceding sublist.  How should one treat the back of a list, or operations done to the back?  Should one reverse the list and then talk about the reversed head and then reverse again if necessary?  Is it possible to _neatly_ do the opposite to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>i.e. something along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 174694384,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1567405909
    },
    {
        "content": "<p>There are a few variants on <code>last</code> available, but I guess <code>init</code> was not defined, or I missed it in the initial pass (although <code>inits</code> is there)</p>",
        "id": 174694727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567406306
    },
    {
        "content": "<p>It is of course easy to define</p>",
        "id": 174694732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567406324
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">init</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>    <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">init</span> <span class=\"n\">l</span>\n</pre></div>\n\n\n<p>But to answer your second question, lean will certainly not let things be as nice if you want to manipulate lists from the right end. Besides the fact that both <code>init</code> and <code>last</code> are O(n) while <code>head</code> and <code>tail</code> are O(1), you can't use them in pattern matching. If you want to use pattern matching to decompose a list from the right, I suggest reversing it and then pattern matching.</p>",
        "id": 174694891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567406525
    },
    {
        "content": "<p>Right.  That is sort of what I thought.  Thanks.</p>",
        "id": 174694979,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1567406722
    },
    {
        "content": "<p>Ah, no I've found <code>init</code> in the library.  It doesn't have much more than a definition that I can see though.</p>",
        "id": 174695389,
        "sender_full_name": "Robert Spencer",
        "timestamp": 1567407358
    },
    {
        "content": "<p>There's also <code>list.reverse_rec_on</code> (might be called something slightly different)</p>",
        "id": 174696076,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567408355
    }
]