[
    {
        "content": "<p>In the following example I introduce a class <code>my_pointed_space</code>  and then extend it to a class <code>singular_space</code>. Later on I would like to coerce a <code>singular_space</code> to a <code>my_pointed_space</code>. Should this not happen automatically due to the keyword <code>extends</code>? MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">my_pointed_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">singular_space</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">my_pointed_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">extra_property</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">my_pointed_space.a</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">my_pointed_space</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">my_pointed_space</span> <span class=\"n\">β</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">compatibility</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span><span class=\"o\">(</span><span class=\"n\">X.a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Y.a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">inj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">singular_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">my_pointed_space</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">my_map</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n</code></pre></div>",
        "id": 290969813,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1658878847
    },
    {
        "content": "<p>does it work if you do <code>X.to_my_pointed_space</code>?</p>",
        "id": 290969953,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658878985
    },
    {
        "content": "<p>I haven't tested it, but you want to declare it something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">my_map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">my_pointed_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">my_pointed_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">compatibility</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">my_pointed_space.a</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">my_pointed_space.a</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 290970081,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658879108
    },
    {
        "content": "<p>\"coerce\" has a very specific meaning in Lean, and this is probably not what you want.</p>",
        "id": 290970085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658879111
    },
    {
        "content": "<p>Kyle, I suspect the problem is that there are many ways to point a given type!</p>",
        "id": 290970104,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658879143
    },
    {
        "content": "<p>The purpose of classes is that you're going to rely on typeclass inference to obtain structures in an implicit way.</p>",
        "id": 290970107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658879146
    },
    {
        "content": "<p>Btw,<code>my_pointed_space</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Pointed\">docs#Pointed</a></p>",
        "id": 290970165,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658879165
    },
    {
        "content": "<p>And <code>my_map</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Pointed.hom\">docs#Pointed.hom</a></p>",
        "id": 290970213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658879210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/extends.20coercion/near/290970104\">said</a>:</p>\n<blockquote>\n<p>Kyle, I suspect the problem is that there are many ways to point a given type!</p>\n</blockquote>\n<p>If you're <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>'ing it, sure, but I think the proximal problem is about using classes correctly</p>",
        "id": 290970236,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658879235
    },
    {
        "content": "<p>Once you've got that <code>my_map</code>, then I expect something like this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">singular_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">my_pointed_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">my_map</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 290970327,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658879325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> to get your version to work I needed to change it to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">my_map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">my_pointed_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">my_pointed_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">compatibility</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">my_pointed_space.a</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">my_pointed_space.a</span> <span class=\"n\">β</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 290970874,
        "sender_full_name": "David Renshaw",
        "timestamp": 1658879847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> Ok, that means the types didn't come out the way I expected them to on <code>my_pointed_space</code>. The idiomatic way to write it then is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">my_map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">my_pointed_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">my_pointed_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">compatibility</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">my_pointed_space.a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">my_pointed_space.a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 290973296,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658882110
    },
    {
        "content": "<p>I think the way to get my original version to work is to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">my_pointed_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which causes <code>my_pointed_space.a</code> to take an explicit argument.</p>",
        "id": 290973380,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658882195
    },
    {
        "content": "<p>I believe what's going on is that Lean sees that alpha is inferrable from the return type so it makes it implicit by default.</p>",
        "id": 290973407,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658882227
    },
    {
        "content": "<p>Thanks a lot for your answers. Indeed my problem was that I was not using classes correctly.</p>",
        "id": 291150193,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1658993956
    }
]