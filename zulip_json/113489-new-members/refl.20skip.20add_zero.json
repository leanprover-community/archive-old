[
    {
        "content": "<p>On the level 2 of addition world for exemple refl skip add_zero two times and do refl itself can someone explain me why ? <a href=\"/user_uploads/3121/pe5gAEHIsoNVAFTPms_4Jrtb/qdqdqdz.PNG\">qdqdqdz.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pe5gAEHIsoNVAFTPms_4Jrtb/qdqdqdz.PNG\" title=\"qdqdqdz.PNG\"><img src=\"/user_uploads/3121/pe5gAEHIsoNVAFTPms_4Jrtb/qdqdqdz.PNG\"></a></div>",
        "id": 250174933,
        "sender_full_name": "Sailor",
        "timestamp": 1629494934
    },
    {
        "content": "<p>Because although I don't explain this issue in the game, add_zero is true by definition so you can use <code>refl</code> to prove it</p>",
        "id": 250176701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629496094
    },
    {
        "content": "<p>Thanks ;)</p>",
        "id": 250177473,
        "sender_full_name": "Sailor",
        "timestamp": 1629496696
    },
    {
        "content": "<p>And how do i know what is true by definition ?</p>",
        "id": 250177501,
        "sender_full_name": "Sailor",
        "timestamp": 1629496721
    },
    {
        "content": "<p>Well, you can try <code>exact rfl</code> and see when it works ;)</p>",
        "id": 250177789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629496901
    },
    {
        "content": "<p>For the NNG, you're not meant to worry about the definitions since there are enough theorems to handle everything, but you can pull back the curtain by looking at the source code: <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/add.lean#L10\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/mynat/add.lean#L10</a></p>",
        "id": 250177975,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629497039
    },
    {
        "content": "<p>That amounts to the following definition for addition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n<span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(matching the NNG parenthesis convention)</p>",
        "id": 250178095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629497122
    },
    {
        "content": "<p>Ok thanks another question how can i tell lean to use a theorem on a succ d for exemple ?</p>",
        "id": 250178129,
        "sender_full_name": "Sailor",
        "timestamp": 1629497160
    },
    {
        "content": "<p>In other words, what <code>refl</code> does is automatically apply <code>add_zero</code> and <code>add_succ</code> wherever it is able to, and then it checks they're the same.</p>",
        "id": 250178141,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629497163
    },
    {
        "content": "<p>like in this situation<br>\n<a href=\"/user_uploads/3121/B49HMo6nqfehgVmefg2R38LQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/B49HMo6nqfehgVmefg2R38LQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/B49HMo6nqfehgVmefg2R38LQ/image.png\"></a></div>",
        "id": 250178211,
        "sender_full_name": "Sailor",
        "timestamp": 1629497204
    },
    {
        "content": "<p>because when i want to assoc it assoc the left hand side</p>",
        "id": 250178285,
        "sender_full_name": "Sailor",
        "timestamp": 1629497273
    },
    {
        "content": "<p>and i want to specify add_assoc a succ d</p>",
        "id": 250178333,
        "sender_full_name": "Sailor",
        "timestamp": 1629497292
    },
    {
        "content": "<p>put parentheses around <code>succ d</code></p>",
        "id": 250178338,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629497300
    },
    {
        "content": "<p>so <code>rw add_assoc a (succ d)</code></p>",
        "id": 250178346,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629497312
    },
    {
        "content": "<p>Is this in the doc ?</p>",
        "id": 250178351,
        "sender_full_name": "Sailor",
        "timestamp": 1629497317
    },
    {
        "content": "<p>instead of bothering you</p>",
        "id": 250178359,
        "sender_full_name": "Sailor",
        "timestamp": 1629497326
    },
    {
        "content": "<p>the \"real\" parenthesis convention is that <code>(f a b c)</code> means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(a,b,c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 250178385,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629497342
    },
    {
        "content": "<p>Oh ok i'm a little confused that this is not rigorously defined in the beginning as im just \"guessing\" from my programming experience</p>",
        "id": 250178553,
        "sender_full_name": "Sailor",
        "timestamp": 1629497493
    },
    {
        "content": "<p>Also, when there is an operator, like <code>succ a + b + succ d</code>, this means (in normal math notation) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">succ</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>b</mi><mo>+</mo><mi mathvariant=\"normal\">succ</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{succ}(a) + b + \\operatorname{succ}(d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">succ</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">succ</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 250178572,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629497514
    },
    {
        "content": "<p>I see right</p>",
        "id": 250178687,
        "sender_full_name": "Sailor",
        "timestamp": 1629497585
    },
    {
        "content": "<p>I think the NNG walks a fine line between giving you just enough to be able to complete the tasks and giving you an information overload.  It's fine coming here for clarification <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 250178740,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629497631
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 250178996,
        "sender_full_name": "Sailor",
        "timestamp": 1629497805
    },
    {
        "content": "<p>(re deleted comment, I completely understand, that tends to be my modus operandi, too.)</p>",
        "id": 250179122,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629497891
    },
    {
        "content": "<p>But if your fine with it its ok ahah</p>",
        "id": 250179198,
        "sender_full_name": "Sailor",
        "timestamp": 1629497964
    }
]