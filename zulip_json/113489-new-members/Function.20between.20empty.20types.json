[
    {
        "content": "<p>How to remove <code>sorry</code> in this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kn\">variable</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span>  <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207687577,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598045770
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kn\">variable</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"n\">include</span> <span class=\"n\">ha</span>\n<span class=\"kn\">example</span>  <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207687718,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598045901
    },
    {
        "content": "<p>In general, <code>false.elim</code> is a way to produce anything from a proof of false.</p>",
        "id": 207687733,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598045918
    },
    {
        "content": "<p>And given <code>a : A</code>, together with your <code>ha</code>, you can produce a proof of false as in the above code.</p>",
        "id": 207687784,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598045991
    },
    {
        "content": "<p>Brilliant, thank you.</p>",
        "id": 207687953,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598046107
    },
    {
        "content": "<p>One thing to note: You need to include the <code>include ha</code> for otherwise it would not be in the context of the example.</p>",
        "id": 207688079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598046196
    },
    {
        "content": "<p>And you don't really need <code>hb</code>, at least for this example.</p>",
        "id": 207688105,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598046215
    },
    {
        "content": "<p>Makes sense, you can always produce the function from the empty type to anything</p>",
        "id": 207688209,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598046265
    },
    {
        "content": "<p>There was some discussion a while back about making a standard definition for \"this is an empty type\", did that ever converge? If I recall correctly the leading contender was <code>def is_empty (A : Type*) := A \\to false</code>.</p>",
        "id": 207688281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598046337
    },
    {
        "content": "<p>Or something like that.</p>",
        "id": 207688386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598046394
    },
    {
        "content": "<p>There is <code>empty</code> defined as an inductive type without constructors</p>",
        "id": 207688431,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598046438
    },
    {
        "content": "<p>But I was struggling with the <code>\\not nonempty</code> construction</p>",
        "id": 207688452,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598046466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kn\">variable</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n\n<span class=\"n\">include</span> <span class=\"n\">h</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 207688752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598046713
    },
    {
        "content": "<p>And in case you actually need the \"not nonempty\" version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 207689176,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598047002
    },
    {
        "content": "<p>Very nice, thank you.</p>",
        "id": 207689738,
        "sender_full_name": "Sebastián Galkin",
        "timestamp": 1598047407
    }
]