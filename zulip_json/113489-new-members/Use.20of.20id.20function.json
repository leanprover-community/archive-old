[
    {
        "content": "<p>Is there some interesting use of id function used in most of the proof terms? Some below examples that I ran suggest that we are using id function where we might do away with it. Can anybody help in this regard?<br>\n<code>#check λ (a b : ℤ) (h : a ≠ b), id (λ (hab : a - b = 0), h (int.eq_of_sub_eq_zero hab)) --∀ (a b : ℤ), a ≠ b → a - b = 0 → false</code><br>\n<code>#check λ (a b : ℤ) (h : a ≠ b), λ (hab : a - b = 0), h (int.eq_of_sub_eq_zero hab) --∀ (a b : ℤ), a ≠ b → a - b = 0 → false</code></p>\n<p><code>#check λ x, x + 1 --ℕ -&gt; ℕ </code><br>\n<code>#check λ x, id (x + 1) --ℕ -&gt; ℕ </code></p>",
        "id": 276395991,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1648067584
    },
    {
        "content": "<p>This has to do with the typechecking algorithm. Remove them and suddenly your proof might not typecheck. I'll leave someone more knowledgeable than me explain deeper.</p>",
        "id": 276396214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648067666
    },
    {
        "content": "<p>Here's an example of where <code>id</code> makes a difference:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">mynat</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span>         <span class=\"c1\">-- one : ℕ</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span>      <span class=\"c1\">-- one : mynat</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">mynat</span> <span class=\"n\">one</span><span class=\"o\">)</span>       <span class=\"c1\">-- one : mynat</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">nat</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"c1\">-- one : ℕ</span>\n</code></pre></div>",
        "id": 276406091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648072600
    },
    {
        "content": "<p>The secret is that <code>id one</code> there is really <code>@id mynat one</code>, which means that <code>mynat</code> actually appears in the expression. <code>(_ : mynat)</code> is only a hint to the elaborator, it doesn't end up in the resulting expression.</p>",
        "id": 276406151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648072640
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> for the interesting points.</p>",
        "id": 276433609,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1648099101
    }
]