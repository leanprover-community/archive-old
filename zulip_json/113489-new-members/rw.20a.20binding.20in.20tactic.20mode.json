[
    {
        "content": "<p>How do I tell lean to replace a value with its binding? It seems like neither unfold nor rewrite work here.  </p>\n<p>Degenerate example for the sake of the mwe. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n  <span class=\"c1\">--how do I do this?</span>\n  <span class=\"n\">sorry</span><span class=\"o\">},</span>\n<span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203472203,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1594361049
    },
    {
        "content": "<p><code>have</code> forgets definition, so you're out of luck</p>",
        "id": 203472234,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594361107
    },
    {
        "content": "<p>You want to use <code>let</code> instead of <code>have</code> to set the value of <code>x</code>.</p>",
        "id": 203472237,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594361115
    },
    {
        "content": "<p>you might want to use <code>generalize</code></p>",
        "id": 203472239,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594361122
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203472302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594361174
    },
    {
        "content": "<p><code>tt</code> is a term not a type, so <code>example : tt</code> is a bit weird. I suspect lean is coercing it to <code>true</code>, which is a type</p>",
        "id": 203510200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594389900
    }
]