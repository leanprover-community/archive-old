[
    {
        "content": "<p>Hi, this may be a case of me trying to do something the wrong way. Currently working on my own with some category theory, I have come up with a definition of a limit as being a final cone, where final is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">final_object</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span><span class=\"n\">Cat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"n\">Cat</span><span class=\"o\">),</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">⟶</span><span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The above requires me when showing that something is a limit to show that any two morphisms between a cone and a limit are equal. This then seems to decompose into showing that both the object morphisms are equal and that both have equal proofs of the relevant diagrams being commutative. </p>\n<p>The latter is the real proof, since I guess proof irrelevance should give the other for free in some way.</p>\n<p>However, I would like to be able to do in general is directly perform this decomposition, and more generally decompose equality of terms of a structure into equality of the \"components\". If one of the component equalities is trivial, I would still like to resolve it directly.</p>\n<p>Is there any way to do this? If not for structures generally, is there any way to do it for structures than one can think of as just being (dependent) tuples in some sense? </p>\n<p>I have tried using \"ext\", and while it appears to do this, it actually goes somewhat further than I would like (and seems to have in several cases dropped goals entirely, requiring me to use recover to fix the arcane \"meta-variable\" errors). It also seems to run more slowly than seems necessary, perhaps because it is doing more than I want it to.</p>",
        "id": 308255627,
        "sender_full_name": "Will Fourie",
        "timestamp": 1667741737
    },
    {
        "content": "<p>Have you tried <code>ext : some_small_natural_number</code>? <code>ext : 2</code> will try applying two extensionality lemmas.</p>",
        "id": 308256585,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667742257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20equality.20of.20two.20terms.20in.20a.20structure/near/308256585\">said</a>:</p>\n<blockquote>\n<p>Have you tried <code>ext : some_small_natural_number</code>? <code>ext : 2</code> will try applying two extensionality lemmas.</p>\n</blockquote>\n<p>Interesting, that does not help. Even setting it to ext  : 2 still automatically seems to decide that the proof term does not matter and still results in leftover meta-variables at the end. I have probably set up my definitions in some way that causes this behaviour. Setting it to 1 doesn't really do anything. <br>\n.</p>",
        "id": 308257395,
        "sender_full_name": "Will Fourie",
        "timestamp": 1667742710
    },
    {
        "content": "<p>On further inspection and \"sorry\"ing, it looks like cases may actually be the culprit. </p>\n<p>When I use ext:2, it gives me an element of (in this case) a coproduct's object and requires me to show that applying the two object morphisms to it gives the same result. </p>\n<p>However, when I apply cases to x so that I can look at the case where x came from the left object or the right object, this introduces the metavariables problem. It is even less clear to me why this is happening, but I guess I was a bit too harsh on ext!</p>",
        "id": 308257969,
        "sender_full_name": "Will Fourie",
        "timestamp": 1667743081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"547993\">Will Fourie</span> has marked this topic as resolved.</p>",
        "id": 308258489,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667743368
    },
    {
        "content": "<p>If you want to work with mathlib there are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.cone.is_limit_equiv_is_terminal\">docs#category_theory.limits.cone.is_limit_equiv_is_terminal</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.is_terminal_equiv_unique\">docs#category_theory.limits.is_terminal_equiv_unique</a>.</p>\n<blockquote>\n<p>This then seems to decompose into showing that both the object morphisms are equal and that both have equal proofs of the relevant diagrams being commutative.<br>\nThe latter is the real proof, since I guess proof irrelevance should give the other for free in some way.</p>\n</blockquote>\n<p>I think proof irrelevance gives the latter for free, and the former is the real proof?</p>",
        "id": 308443811,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667844248
    }
]