[
    {
        "content": "<p><code>Exists</code> isn't built in, but defined in core.  The definition is equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exists</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">Exists</span>\n</code></pre></div>\n<p>This is the same as the definition of <code>sigma</code> (or <code>psigma</code>), except for the extra <code>: Prop</code> at the end.</p>\n<p>Because <code>Exists</code> lives in <code>Prop</code> ... this causes it to have some weird definition, where it's not a dependent product type like the sigmas, and you can't extract the witness (first argument to constructor) or second argument to the constructor, whose type might include the value of the witness.</p>\n<p>How does that work under the covers?  Are there special rules for inductive types that live in <code>Prop</code> to enforce the \"there's only zero or one object of this type\"?  Something about an eliminator? Do inductive types in <code>Prop</code> essentially not have any internal structure?</p>\n<p>Also, I thought the type hierarchy had to be strictly increasing, in the sense that any type that depends on <code>Sort u</code> must live in a <code>Sort</code> bigger than <code>u</code>, to avoid Russel's paradox?  Do the restrictions on inductive types living in <code>Prop</code> avoid this?</p>",
        "id": 292805660,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1660154849
    },
    {
        "content": "<p>I'm not the person to answer this question for you, but there are two pieces of information that might be useful:</p>\n<ol>\n<li>Lean has <em>subsingleton elimination</em> which is how certain specific things (like equality) can eliminate from <code>Prop</code> into higher universes.</li>\n<li>Universe levels for Π-types use <code>imax</code> not <code>max</code>, which basically means a Π-type over a <code>Prop</code> is still a <code>Prop</code>, whereas a Π-type over something in universe <code>Type u</code> ends up in <code>Type (u + 1)</code>.</li>\n<li>This I think doesn't give rise to Girard's paradox (type theory equivalent of Russell's paradox) because in general (except for subsingleton types) you can't eliminate from <code>Prop</code> into higher universes.</li>\n</ol>\n<p>Note: like I said, I'm not the right person to answer this question, so it's possible I've got something wrong in what I said above.</p>",
        "id": 292816743,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660158836
    },
    {
        "content": "<p>Nice explanations! Some addenda:</p>\n<p>The two paragraphs above prior to <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html?highlight=singleton#mutual-and-nested-inductive-types\">Section 7.9, TPIL</a> talks about subsingleton elimination (called \"singleton elimination\" there):</p>\n<blockquote>\n<p>There is an exception to this last rule: we are allowed to eliminate from an inductively defined Prop to an arbitrary Sort when there is only one constructor and each constructor argument is either in Prop or an index. The intuition is that in this case the elimination does not make use of any information that is not already given by the mere fact that the type of argument is inhabited. This special case is known as singleton elimination.</p>\n</blockquote>\n<p>Another prominent example of Prop that allows large elimination is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/acc\">docs#acc</a>, which allows well-founded recursive definitions. <code>Exists</code> on the other hand doesn't admit large elimination and that's why you can't define the first projection. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some\">docs#classical.some</a> is sort of a right inverse to <a href=\"http://Exists.mk\">Exists.mk</a>, but it's not an eliminator and doesn't satisfy the computation rule.</p>\n<p>The universe level of an inductive type is explained in Section 7.8 just above this, and for Pi types also in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html?highlight=imax\">Section 4.1</a> (search for imax). This behavior of Pi type for Props is what makes Prop impredicative.</p>\n<p>See also <a href=\"https://lean-forward.github.io/logical-verification/2018/41_notes.html\">Some notes</a> that covers the same topics and also mentions Girard's paradox.</p>",
        "id": 292844969,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660171951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348963\">Martin C. Martin</span> <a href=\"#narrow/stream/113489-new-members/topic/Existential.20quantifier.20and.20first.20projection/near/292805660\">said</a>:</p>\n<blockquote>\n<p>Also, I thought the type hierarchy had to be strictly increasing, in the sense that any type that depends on <code>Sort u</code> must live in a <code>Sort</code> bigger than <code>u</code>, to avoid Russel's paradox?  Do the restrictions on inductive types living in <code>Prop</code> avoid this?</p>\n</blockquote>\n<p>This is called predicativity, and <code>Prop</code> is an <em>impredicative</em> universe. This is a very strong axiomatic assumption (it pumps the consistency strength from primitive recursive arithmetic all the way up to ZFC + some inaccessible cardinals), but conversely it is necessary for doing \"real math\" in lean. It is not inconsistent, at least as long as <code>Prop</code> is also proof irrelevant and understood to have no internal structure like you say, just \"true\" and \"false\"</p>",
        "id": 292869316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660195854
    }
]