[
    {
        "content": "<p>I'm defining a subset of the Cartesian product of two types, specifically: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">graph</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>(<code>f</code> is a function, <code>x</code> has not been separately defined) What's the right notation for this (the ordered pairs, and also the set builder itself)?</p>",
        "id": 136077221,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539903215
    },
    {
        "content": "<p>what do you mean by \"right notation\"?</p>",
        "id": 136077285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539903273
    },
    {
        "content": "<p>A notation that works in Lean.</p>",
        "id": 136077288,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539903282
    },
    {
        "content": "<p>do you mean <code>set (X × Y)</code>?</p>",
        "id": 136077300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539903291
    },
    {
        "content": "<p>oh</p>",
        "id": 136077303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539903299
    },
    {
        "content": "<p>No, I mean for the ordered pairs.</p>",
        "id": 136077304,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539903301
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">graph</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 136077370,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539903378
    },
    {
        "content": "<p>Ah.</p>",
        "id": 136077386,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539903437
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 136077387,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539903440
    },
    {
        "content": "<p>It's kind of annoying that you can't write <code>{⟨x,y⟩ : X × Y | y = f x}</code></p>",
        "id": 136077411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539903480
    },
    {
        "content": "<p>you can't define that in ZFC either</p>",
        "id": 136077469,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539903517
    },
    {
        "content": "<p>you need to use specification and an existential</p>",
        "id": 136077470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539903523
    },
    {
        "content": "<p>I guess you could use <code>set.image</code> or <code>set.range</code>, whatever it's called</p>",
        "id": 136077487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539903569
    },
    {
        "content": "<p><code>def graph' : set (X × Y) := set.range (λ x, ⟨x,f x⟩) </code></p>",
        "id": 136077650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539903778
    },
    {
        "content": "<p>(after <code>import data.set.basic</code>)</p>",
        "id": 136077661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539903798
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">graph</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"err\">⨆</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">{(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)}</span>\n</pre></div>",
        "id": 136077723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539903878
    },
    {
        "content": "<p>What's <code>⨆</code>?</p>",
        "id": 136077827,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539904032
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graph</span>  <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graph&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"bp\">=</span> <span class=\"n\">graph&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 136077886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904083
    },
    {
        "content": "<p><code>set X</code> is a complete lattice</p>",
        "id": 136077894,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539904106
    },
    {
        "content": "<p>Abhi: <code>⨆</code> is notation so you can start with <code>#print notation ⨆</code></p>",
        "id": 136077913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904139
    },
    {
        "content": "<p>but if you don't want to go down the lattice rabbithole you could try my homework :-)</p>",
        "id": 136077923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904156
    },
    {
        "content": "<p>I'd be able to do the homework myself if I knew how to prove <code>A = B iff B = A</code> :-/</p>",
        "id": 136077997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904278
    },
    {
        "content": "<p><code>eq.symm</code> only goes one way</p>",
        "id": 136077999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904287
    },
    {
        "content": "<p>eq_comm</p>",
        "id": 136078000,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539904292
    },
    {
        "content": "<p>I'm not sure how to interpret the results of #print notation. All I get is <code>'⨆':1024 binders ',':0 (scoped 0) := #0</code> What's a binder?</p>",
        "id": 136078007,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539904316
    },
    {
        "content": "<p>oh oops</p>",
        "id": 136078057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904350
    },
    {
        "content": "<p>yes that is impossible to interpret</p>",
        "id": 136078060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904364
    },
    {
        "content": "<p>A binder is something like forall or exists or lambda I think</p>",
        "id": 136078085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904397
    },
    {
        "content": "<p>Kenny is using <code>⨆</code> in the same sort of way that one would use those things.</p>",
        "id": 136078094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904422
    },
    {
        "content": "<p>Yeah, I can tell it's something like forall, but I'm not sure what the difference is.</p>",
        "id": 136078137,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539904454
    },
    {
        "content": "<p>I think you can click on the sup to go to definition</p>",
        "id": 136078141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539904463
    },
    {
        "content": "<p>I get \"no definition found\"</p>",
        "id": 136078143,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539904483
    },
    {
        "content": "<p>It's the analogue of <code>\\bigcup</code> for lattices</p>",
        "id": 136078144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539904484
    },
    {
        "content": "<p>It's in <code>order/complete_lattice.lean</code></p>",
        "id": 136078146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904496
    },
    {
        "content": "<p><code>notation </code>⨆<code> binders </code>, <code> r:(scoped f, supr f) := r</code></p>",
        "id": 136078149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904498
    },
    {
        "content": "<p>I taught Abhi about bigcup today in lectures :-)</p>",
        "id": 136078169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904545
    },
    {
        "content": "<p>Glad to see my lectures are coming in handy in his day to day life</p>",
        "id": 136078211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904568
    },
    {
        "content": "<p>\"day to day life\"</p>",
        "id": 136078237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539904650
    },
    {
        "content": "<p>I don't understand that notation line at all. I think notation in Lean is somehow evil; most of it is fine and then there are some weird hacks which I don't get at all. The key point is <code>supr</code> somehow, and then everything else is some notation mantra I guess</p>",
        "id": 136078244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904665
    },
    {
        "content": "<p><code>def supr [complete_lattice α] (s : ι → α) : α := Sup {a : α | ∃i : ι, a = s i}</code></p>",
        "id": 136078294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904695
    },
    {
        "content": "<p>so <code>supr s</code> is the supremum of the range of <code>s</code></p>",
        "id": 136078339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539904755
    },
    {
        "content": "<p>Btw I'm trying <code>def p1 (g : graph) : X := g.1</code> based on the earlier definition of <code>graph</code>, but it doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kn\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kn\">constant</span>\n  <span class=\"n\">g</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">⁇</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">graph</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">p1</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>I guess part of the problem is that <code>G</code> is not a type -- I tried coercing it as <code>↑G</code>, but that just produces more errors.</p>",
        "id": 136078511,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539904943
    },
    {
        "content": "<p>I think the bigger problem is Lean doesn't know what you want to take the graph of</p>",
        "id": 136078535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539905002
    },
    {
        "content": "<p>I can't make sense of that definition</p>",
        "id": 136078541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539905025
    },
    {
        "content": "<p>I would make <code>f</code> an explicit argument and then pass it in <code>p1</code></p>",
        "id": 136078543,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539905032
    },
    {
        "content": "<p>what does <code>g : graph</code> mean?</p>",
        "id": 136078594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539905068
    },
    {
        "content": "<p>it's not a type</p>",
        "id": 136078596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539905073
    },
    {
        "content": "<blockquote>\n<p>what does <code>g : graph</code> mean?</p>\n</blockquote>\n<p>Yeah, I realise that, but I want to show (separately from the definition) it's a bijection from <code>graph</code> to <code>X</code>.</p>",
        "id": 136078618,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539905129
    },
    {
        "content": "<blockquote>\n<p>I would make <code>f</code> an explicit argument and then pass it in <code>p1</code></p>\n</blockquote>\n<p>Indeed that removes the first error. How, though?</p>",
        "id": 136078677,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539905177
    },
    {
        "content": "<p>Keep in mind that <code>graph f</code>is not a type either, it's a set</p>",
        "id": 136078690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539905213
    },
    {
        "content": "<p>lean knows to coerce from a set to a type, but maybe you want the subtype instead?</p>",
        "id": 136078699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539905237
    },
    {
        "content": "<p>a set is a term not a Type Abhi. Did you come to my lecture today?</p>",
        "id": 136078706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539905246
    },
    {
        "content": "<blockquote>\n<p>a set is a term not a Type Abhi. Did you come to my lecture today?</p>\n</blockquote>\n<p>I realise that -- but how else would I later show it to be a bijection from graph to X?</p>",
        "id": 136078759,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539905293
    },
    {
        "content": "<p>If <code>X</code> is a type and <code>p : X -&gt; Prop</code> then in Lean there are two very different ways to express what in set theory is just \"the subset of X consisting of elements <code>a</code> for which <code>p a</code> is true\"</p>",
        "id": 136078760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539905300
    },
    {
        "content": "<p>it did took me some time to figure out that Kevin wants us to prove that the two big big functions <code>graph</code> and <code>graph'</code> are equal</p>",
        "id": 136078763,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539905311
    },
    {
        "content": "<p>so you should start with <code>ext X Y f</code></p>",
        "id": 136078770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539905323
    },
    {
        "content": "<p>One is the set <code>{x : X | p x}</code> and one is the subtype <code>{x : X // p x}</code></p>",
        "id": 136078772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539905327
    },
    {
        "content": "<p>I am in the middle of showing my <code>graph</code> is Kenny's <code>supr</code> thing</p>",
        "id": 136078800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539905385
    },
    {
        "content": "<p>I bet <code>example : graph = graph' :=</code> isn't what Kevin wanted us to prove</p>",
        "id": 136078861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539905417
    },
    {
        "content": "<p>I proved that using <code>eq.comm</code></p>",
        "id": 136078867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539905430
    },
    {
        "content": "<p><code>example : graph X Y f = graph' X Y f :=</code></p>",
        "id": 136078880,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539905456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graph</span>  <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graph&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graph&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">⨆</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">{(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"bp\">=</span> <span class=\"n\">graph&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"bp\">=</span> <span class=\"n\">graph&#39;&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I did them both :-)</p>",
        "id": 136079017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539905660
    },
    {
        "content": "<p>I am not proud of the second one though.</p>",
        "id": 136079020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539905680
    },
    {
        "content": "<p>Re:the bijection, I <em>can</em> write <code>def p1 (g : graph f) := g.1</code>(still defining <code>graph</code> as a set because subtype gives me even more errors), but then <code>p1</code> for some reason has the wrong type. Apparently <code>g.1</code> isn't processed correctly (it still has type <code>X × Y</code> and not <code>X</code>).</p>",
        "id": 136079102,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539905792
    },
    {
        "content": "<p>that has to do with the fact that it is a subtype</p>",
        "id": 136079129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539905868
    },
    {
        "content": "<p><code>g</code> is a pair of an element of <code>X x Y</code> and a proof that this element satisfies <code>z.2 = f z.1</code></p>",
        "id": 136079183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539905903
    },
    {
        "content": "<p>Is the notation for ordered pairs different for subtypes?</p>",
        "id": 136079184,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539905903
    },
    {
        "content": "<p>so the X value is <code>g.1.1</code></p>",
        "id": 136079190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539905919
    },
    {
        "content": "<p>That works, but I don't get why.</p>",
        "id": 136079202,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539905953
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 136079207,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539905966
    },
    {
        "content": "<p>or <code>g.val.fst</code></p>",
        "id": 136079216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539905987
    },
    {
        "content": "<p>Ok, I get the argument, but I'm not sure why it's defined that way (to include a proof).</p>",
        "id": 136079275,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539906036
    },
    {
        "content": "<p>If you didn't have to provide a proof when constructing a value of the subtype, then it would just be the same as the entire original type.</p>",
        "id": 136079360,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539906215
    },
    {
        "content": "<p>Why does the same convention not apply to sets?</p>",
        "id": 136079477,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539906370
    },
    {
        "content": "<p>I don't really understand the question. A set is not a type; perhaps that's the answer</p>",
        "id": 136079571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539906580
    }
]