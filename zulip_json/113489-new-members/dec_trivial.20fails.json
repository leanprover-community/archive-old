[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"err\">$</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"c1\">-- 1</span>\n</pre></div>",
        "id": 136806175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540932763
    },
    {
        "content": "<p>Why does <code>dec_trivial</code> fail?</p>",
        "id": 136806191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540932776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 136806337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540932921
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- succeeds</span>\n</pre></div>",
        "id": 136807285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540933760
    },
    {
        "content": "<p>ok so the problem boils down to this</p>",
        "id": 136807385,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540933846
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 136807389,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540933849
    },
    {
        "content": "<p>Looks like it goes <code>nat.sqrt -&gt; nat.size -&gt; nat.binary_rec</code> and <code>binary_rec</code> reduces very slowly, so <code>dec_trivial</code> gives up</p>",
        "id": 136807651,
        "sender_full_name": "Scott Olson",
        "timestamp": 1540934133
    },
    {
        "content": "<p>From <code>data.nat.sqrt</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">size</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>      <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">sqrt_aux</span> <span class=\"o\">(</span><span class=\"n\">shiftl</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">div2</span> <span class=\"n\">s</span><span class=\"o\">)))</span> <span class=\"mi\">0</span> <span class=\"n\">n</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- 1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- ℕ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">sqrt_aux</span> <span class=\"o\">(</span><span class=\"n\">shiftl</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">div2</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- works?</span>\n</pre></div>",
        "id": 136807739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540934175
    },
    {
        "content": "<p>Yes Scott has seen the right path -- <code>example : size 1 = 1 := dec_trivial</code> fails</p>",
        "id": 136807780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540934231
    },
    {
        "content": "<p>I get failure for the <code>sqrt_aux</code> line</p>",
        "id": 136807877,
        "sender_full_name": "Scott Olson",
        "timestamp": 1540934361
    },
    {
        "content": "<p>Did you open nat?</p>",
        "id": 136807887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540934373
    },
    {
        "content": "<p>Yes</p>",
        "id": 136807888,
        "sender_full_name": "Scott Olson",
        "timestamp": 1540934376
    },
    {
        "content": "<p>hmm</p>",
        "id": 136808002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540934461
    },
    {
        "content": "<p>this is troublesome</p>",
        "id": 136808015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540934473
    },
    {
        "content": "<p>because we can't change <code>nat.binary_rec</code></p>",
        "id": 136808032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540934503
    },
    {
        "content": "<p>well maybe we can write <code>nat.binary_rec'</code> just like we do other functions</p>",
        "id": 136808036,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540934512
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">binary_rec</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">binary_rec</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Maybe you can add some sort of decidability instance for <code>size</code>?</p>",
        "id": 136808291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540934757
    },
    {
        "content": "<p>I don't think you need to go down as far as <code>binary_rec</code>.</p>",
        "id": 136808370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540934832
    },
    {
        "content": "<p>I don't see how we can just add decidability instance.</p>",
        "id": 136808446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540934900
    },
    {
        "content": "<p>You know more about decidability than me.</p>",
        "id": 136808451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540934919
    },
    {
        "content": "<p><code>decidable (size a = b)</code>?</p>",
        "id": 136808459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540934928
    },
    {
        "content": "<p>that wouldn't be useful</p>",
        "id": 136808465,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540934935
    },
    {
        "content": "<p>because I can have another function that calls <code>size</code></p>",
        "id": 136808470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540934945
    },
    {
        "content": "<p>Or \"computability\" or something? I have no idea how these things work.</p>",
        "id": 136808471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540934945
    },
    {
        "content": "<p>I don't see any other solution than rewriting some functions in the chain, but maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> would have some idea</p>",
        "id": 136808498,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540934983
    },
    {
        "content": "<p>So what's going on here? You need to make sure that the...kernel? VM? can compute <code>size a</code>?</p>",
        "id": 136808581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540935034
    },
    {
        "content": "<p>I don't really understand how <code>a = b</code> can fail to be proved by <code>dec_trivial</code> (if a and b are explicit computable nats). Equality on nat is decidable, so whatever runs <code>dec_trivial</code> just has to work out what <code>a</code> and <code>b</code> are and then check that they're equal.</p>",
        "id": 136808629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540935104
    },
    {
        "content": "<p>and any nat in Lean is reducible to succ succ ... succ zero</p>",
        "id": 136808676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540935131
    },
    {
        "content": "<p>Aah I understand more about the problem now. <code>#reduce size 1</code> is a deterministic timeout.</p>",
        "id": 136808918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540935448
    },
    {
        "content": "<p>and then a segfault ;-)</p>",
        "id": 136808927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540935462
    },
    {
        "content": "<p>[ten seconds later]</p>",
        "id": 136809025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540935560
    },
    {
        "content": "<p>Yeah, my understanding is <code>dec_trivial</code> should never fail on closed terms, but it gives up when reduction takes too long</p>",
        "id": 136809162,
        "sender_full_name": "Scott Olson",
        "timestamp": 1540935692
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">binary_rec</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">binary_rec</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kn\">end</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">binary_rec</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kn\">end</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 136809269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540935830
    },
    {
        "content": "<p>That does seem a bit... artificial. I wish I knew more about how the reductions worked</p>",
        "id": 136809462,
        "sender_full_name": "Scott Olson",
        "timestamp": 1540936030
    },
    {
        "content": "<p>But I can confirm <code>#reduce binary_rec 0 (λ_ _, succ) 1</code> times out but <code>#reduce</code> on the goal after <code>unfold binary_rec</code> (copy/pasted out with <code>set_option pp.proofs true</code> and <code>set_option pp.implicit true</code>) does give you <code>1</code></p>",
        "id": 136809536,
        "sender_full_name": "Scott Olson",
        "timestamp": 1540936091
    },
    {
        "content": "<p>This is because proofs are irreducible by default. I think there is an option for this, I forget the name</p>",
        "id": 136814397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540941630
    },
    {
        "content": "<p>It is almost never necessary to reduce a proof during evaluation, but well founded definitions require recursion on proofs of wellfoundedness</p>",
        "id": 136814432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540941706
    },
    {
        "content": "<p>then what should we do?</p>",
        "id": 136814666,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540941990
    },
    {
        "content": "<p>give up? This definition is not intended for kernel reduction</p>",
        "id": 136815767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540943644
    },
    {
        "content": "<p>If you need to calculate these things, you can either use the definition, or if we need larger scale computation we can add another <code>norm_num</code> add-on for this (I really need to make it extensible via annotation...)</p>",
        "id": 136815862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540943771
    }
]