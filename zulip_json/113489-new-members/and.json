[
    {
        "content": "<p>How do you take two hypotheses and combine them into one with an <code>∧</code>?</p>",
        "id": 245603314,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1626004294
    },
    {
        "content": "<p>And taking the other approach, is there a reason the <code>have</code> does not work in the last line?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_refl</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dvd_antisymm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_gcd_iff</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245603682,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1626004899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422315\">Thomas Laraia</span> <a href=\"#narrow/stream/113489-new-members/topic/and/near/245603314\">said</a>:</p>\n<blockquote>\n<p>How do you take two hypotheses and combine them into one with an <code>∧</code>?</p>\n</blockquote>\n<p>You can use the constructor for <code>and</code>, which is called <code>and.intro</code>, or you can just use the pointy brackets \"general constructor for a structure\" construction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"n\">and.intro</span> <span class=\"n\">hP</span> <span class=\"n\">hQ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 245604159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626005618
    },
    {
        "content": "<p>Thomas, it will be easier to help you if you provide more context. You should read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. It happens that I recognized an exercise from my tutorials, so I can help you anyway, but it would easier to say so, with a precise reference to the exercise (they are numbered precisely for this purpose).</p>",
        "id": 245604249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626005759
    },
    {
        "content": "<p>Note also that you don't need the answer to this question to do the exercise (but you'll need to know at some point of course).</p>",
        "id": 245604299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626005793
    },
    {
        "content": "<p>Let's move to your second question now, the <code>have</code> error.</p>",
        "id": 245604304,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626005813
    },
    {
        "content": "<p>Reading error messages is tricky but very important. The error message says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">dvd_gcd_iff</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∣</span> <span class=\"bp\">?</span><span class=\"n\">m_2.gcd</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∣</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">∧</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∣</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>",
        "id": 245604321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626005848
    },
    {
        "content": "<p>Lean expect a function here because you ask it to apply <code>dvd_gcd_iff</code>to <code>a</code>, <code>b</code> and <code>a</code>.</p>",
        "id": 245604371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626005890
    },
    {
        "content": "<p>While <code>dvd_gcd_iff</code> is not a function (here function is meant in the dependent type theory sense, which includes a proof of a forall or imply  statement), it's an equivalence.</p>",
        "id": 245604397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626005966
    },
    {
        "content": "<p>It's an equivalence between statements that feature mysterious <code>?m_1</code>, <code>?m_2</code>, <code>?m_3</code>. It means those are implicit arguments that Lean will try to infer automatically. This is nice from Lean, but the downside is it won't let you provide those arguments explicitly unless you really insist.</p>",
        "id": 245604461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626006041
    },
    {
        "content": "<p>You can check all this by writing <code>#check dvd_gcd_iff</code> above the exercise.</p>",
        "id": 245604473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626006071
    },
    {
        "content": "<p>This indeed doesn't show the argument. So you can ask Lean to see them anyway with <code>#check @dvd_gcd_iff</code></p>",
        "id": 245604486,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626006121
    },
    {
        "content": "<p>Note the curly braces around the argument in the answer (and also when this lemma is explained before the exercise). This is what marks arguments as implicit.</p>",
        "id": 245604541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626006170
    },
    {
        "content": "<p>This <code>@</code> trick saying \"I want to provide all arguments, please don't try to help\" also works inside proofs, so you can fix your last line by using <code>@dvd_gcd_iff</code> there as well. Needless to say, this is not the expected solution. You don't need to know any of this at this stage, but it will become necessary at some point.</p>",
        "id": 245604629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626006285
    },
    {
        "content": "<p>For something which is half way between the expected solution and your idea, you can try: <code>have d : a ∣ a.gcd b ↔ a ∣ a ∧ a ∣ b := dvd_gcd_iff,</code>. This is give you a proof script that is easier to read and will use the fact that those implicit arguments can be inferred from the statement.</p>",
        "id": 245604728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626006454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Perfect, thank you for the detailed explanation and for linking the minimal working examples page, I'll make sure I do this in the future.</p>",
        "id": 245605681,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1626007971
    }
]