[
    {
        "content": "<p>The following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> fails to build:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I'm not exactly sure what the issue is - the VS code plugin makes it look like Lean is figuring out that <code>y</code> ought to be a <code>subtype p</code>, so <code>y.val = y.val</code> should be a valid <code>Prop</code>?</p>",
        "id": 207031829,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597513895
    },
    {
        "content": "<p>It's a timing thing. Lean can't figure out that <code>y</code> has type <code>subtype p</code> until after it has read <code>y.val</code>, which doesn't even make it past name resolution if we don't know the type of <code>y</code>. If you use <code>subtype.val y = y.val</code> then it will work</p>",
        "id": 207033578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597516602
    },
    {
        "content": "<p>Okay, got there. While <code>multiset.mem</code> has type <code>α → multiset α → Prop</code>, <code>has_mem.mem</code> in general has type <code>α → γ → Prop</code>, so merely having <code>y ∈ s</code> isn't enough to infer <code>y : subtype p</code> even having <code>s : multiset (subtype p)</code>.</p>",
        "id": 207042043,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597529631
    },
    {
        "content": "<p>It feels like <code>has_mem</code> in some sense should be smarter? Don't really know enough to say how or properly clarify what that even really means though :p</p>",
        "id": 207042146,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597529730
    },
    {
        "content": "<p>It does, actually, the first argument of <code>has_mem</code> is an <code>out_param</code> so this absolutely works to determine the type of <code>y</code>. The problem is that it doesn't come soon enough; projection notation specifically requires typing infornation very early because we don't even know which function is being called when we see <code>y.val</code>, and the type of this function (or if it's even a function, as opposed to a constant <code>y.val</code> in namespace <code>y</code>) can affect type class inference and everything else. Basically we can't even start type class inference until we have some basic idea of what we're dealing with, and inferring the type of <code>y</code> from the <code>has_mem</code> instance is too late.</p>",
        "id": 207042574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597530459
    },
    {
        "content": "<p>Hmm, so we need to fully determine the type of the proposition before we can perform type class inference, and since that determination would require type class inference, it fails? That makes sense, though I don't feel particularly up to learning enough about the dependencies involved to fully understand it myself just yet...</p>",
        "id": 207043539,
        "sender_full_name": "Iain Monro",
        "timestamp": 1597532124
    },
    {
        "content": "<p>In this case you can use type ascriptions instead of .val anyway, right?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207061808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597567031
    }
]