[
    {
        "content": "<p>I know there is a way to get a more elaborate error message  but I have forgotten what it is.   I have the following error that is <br>\nmysterious to me.   It complains about the type of \"a\" but I don't see anything wrong.  It is complaining at <br>\nthis input line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"k\">have</span> <span class=\"n\">h50</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">USC</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∈</span> <span class=\"n\">USC</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∩</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"bp\">Λ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n<p>and here is the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">M</span>\n<span class=\"n\">mn</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝔽</span>\n<span class=\"n\">h4copy</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">exp</span> <span class=\"n\">M</span> <span class=\"n\">n</span>\n<span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"n\">USC</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span>\n<span class=\"n\">h6</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span>\n<span class=\"n\">h7</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">USC</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">USC</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">USC</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"n\">USC</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">h21</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">⊆</span> <span class=\"n\">USC</span> <span class=\"n\">b</span>\n<span class=\"n\">h22</span><span class=\"o\">:</span> <span class=\"n\">USC</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∪</span> <span class=\"n\">USC</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">union</span> <span class=\"n\">x</span>\n<span class=\"n\">h9</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">union</span> <span class=\"n\">x</span>\n<span class=\"n\">line789</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">USC</span> <span class=\"n\">a</span>\n<span class=\"n\">h20</span><span class=\"o\">:</span> <span class=\"n\">USC</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span>\n<span class=\"n\">h23</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">USC</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">exp</span> <span class=\"n\">M</span> <span class=\"n\">m</span>\n<span class=\"n\">h24</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">USC</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span>\n<span class=\"n\">bFinite</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span>\n<span class=\"n\">xFinite</span><span class=\"o\">:</span> <span class=\"n\">USC</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span>\n<span class=\"n\">h40</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">USC</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">FINITE</span> <span class=\"n\">M</span>\n<span class=\"n\">All</span> <span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">inf7.lean</span><span class=\"o\">:</span><span class=\"mi\">1163</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">USC</span> <span class=\"n\">a</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">USC</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 212486625,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1602018811
    },
    {
        "content": "<p>aha, this is the <code>a</code> bug</p>",
        "id": 212486844,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602018922
    },
    {
        "content": "<p>pick literally any other variable name</p>",
        "id": 212486858,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602018927
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/437\">https://github.com/leanprover-community/lean/issues/437</a></p>",
        "id": 212486860,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602018927
    },
    {
        "content": "<blockquote>\n<p>The famous <code>a</code> bug doesn't need a description, we have all met it.</p>\n</blockquote>",
        "id": 212486894,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602018943
    },
    {
        "content": "<p>we hope that this will be fixed in lean 3.5.37...</p>",
        "id": 212487026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602019009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/getting.20more.20information.20on.20an.20error/near/212486858\">said</a>:</p>\n<blockquote>\n<p>pick literally any other variable name</p>\n</blockquote>\n<p>It's probably also a good idea to avoid <code>_x</code> just in case</p>",
        "id": 212487047,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602019022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> What happened to your PR to turn this into the <code>_x</code> bug?</p>",
        "id": 212497012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602025779
    },
    {
        "content": "<p>Unfortunately it triggered a separate issue <a href=\"https://github.com/leanprover-community/lean/issues/447\">lean#447</a>, and then it wasn't clear to me how to proceed</p>",
        "id": 212613202,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602101510
    },
    {
        "content": "<p>Call it <code>x_</code> instead?</p>",
        "id": 212622179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602106445
    }
]