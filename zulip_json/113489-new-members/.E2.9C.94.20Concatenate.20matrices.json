[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">Callum Cassidy-Nolan</span> <a href=\"#narrow/stream/113489-new-members/topic/Concatenate.20matrices/near/279430959\">said</a>:</p>\n<blockquote>\n<p>I didn't see the method for that, but if you need to implement it you can use this idea:<br>\n<a href=\"https://i.imgur.com/nspxD5K.jpg\">https://i.imgur.com/nspxD5K.jpg</a></p>\n</blockquote>\n<p>Ah that's smart, I'll try to implement that as an exercise!</p>",
        "id": 279450577,
        "sender_full_name": "Aron Erben",
        "timestamp": 1650393233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Concatenate.20matrices/near/279433388\">said</a>:</p>\n<blockquote>\n<p>Or a more general way:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.equiv.fin</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix.append_cols</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n₂</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">⊕</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">sum.elim</span> <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₁</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"bp\">+</span> <span class=\"n\">p₂</span><span class=\"o\">))</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X₁.append_cols</span> <span class=\"n\">X₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">minor</span> <span class=\"n\">id</span> <span class=\"n\">fin_sum_fin_equiv.symm</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Perfect, thank you, this is what I was looking for, but I'm a bit surprised there is no easier way to do it (besides the <code>from_blocks</code>, which takes 4 matrices)!</p>",
        "id": 279450703,
        "sender_full_name": "Aron Erben",
        "timestamp": 1650393300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460930\">Aron Erben</span> has marked this topic as resolved.</p>",
        "id": 279450721,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650393307
    }
]