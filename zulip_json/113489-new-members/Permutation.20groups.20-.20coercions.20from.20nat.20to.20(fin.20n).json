[
    {
        "content": "<p>Imagine the context is <code>(n:ℕ) [hn:5 ≤ n]</code> and you want to introduce basic cycles in the finite permutation group <code>equiv.perm (fin n)</code> on <code>fin n</code>, using the notation <code>c[…]</code> introduced in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/concrete_cycle\">docs#concrete_cycle</a>. What would you type ?<br>\n If I type something like <code>c[0,1,2]</code>,  what I get is (of course) an object in <code>equiv.perm ℕ</code>, which is not what I want.</p>",
        "id": 261610230,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1637051515
    },
    {
        "content": "<p><code>&lt;=</code> is not a class and so <code>[hn : 5  &lt;= n]</code> will not put <code>5 &lt;= n</code> into the typeclass system (because it won't ever go in there)</p>",
        "id": 261610689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637051836
    },
    {
        "content": "<p>But the answer to your question is to use \"type ascriptions\" (I think this is what they're called). Either you don't write <code>0</code>, you write <code>(0 : fin 5)</code>, or you write <code>(c[0,1,2] : equiv.perm (fin 5))</code>.</p>",
        "id": 261610868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637051948
    },
    {
        "content": "<p>Thanks. Now, this works if I enter</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">c₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">))),</span>\n</code></pre></div>\n<p>but not at all if I enter</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">c₂</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))),</span>\n</code></pre></div>\n<p>for a reason I can well understand: Lean cannot prove <code>[0,1,2].nodup</code> meaning that if <code>5 &lt;= n</code>, then the cycle (list) <code>[0,1,2]</code> has no duplicates. I could try to prove this, but what puzzles me even more is that it refuses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">c₃</span> <span class=\"o\">:=</span> <span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))),</span>\n</code></pre></div>\n<p>complaining that it cannot prove <code>has_one (fin n)</code>.</p>",
        "id": 261612089,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1637052896
    },
    {
        "content": "<p><code>fin 0</code> doesn't have a <code>one</code></p>",
        "id": 261612294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637053023
    },
    {
        "content": "<p>I see. I can get the following workaround. Since I have <code>5 &lt;= n</code>, I have 5 distinct elements in <code>fin n</code>. <br>\nIs there a standard way I can get 5 such elements and name them, say <code>a,b,c,d,e</code> ?  Does this requires tactic programming ?</p>",
        "id": 261613896,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1637053882
    },
    {
        "content": "<p>I think that will quickly get messy. You need a concise way of expressing that the elements are all pairwise unequal. And a concise way of using that assumption when you need it.</p>",
        "id": 261614206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637054095
    },
    {
        "content": "<p>I didn't test it, but what happens if you replace <code>n</code> by <code>n+5</code> in your example?</p>",
        "id": 261614249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637054129
    },
    {
        "content": "<p>Then Lean might figure out without help that <code>[0,1,2,3,4].nodup</code> holds.</p>",
        "id": 261614265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637054150
    },
    {
        "content": "<p>This is marvelous ! <br>\nAnd exactly in line with a similar comment of <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> on the <em>Euler's product formula</em> thread. Thank you ! <a href=\"#narrow/stream/113489-new-members/topic/Proof.20of.20Euler's.20product.20formula.20for.20totient/near/261388726\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Proof.20of.20Euler's.20product.20formula.20for.20totient/near/261388726</a></p>",
        "id": 261614503,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1637054336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> You can convert <code>5 ≤ n</code> into <code>∃ k, n = k + 5</code> using something like <code>nat.exists_eq_add_of_le</code>.</p>",
        "id": 261614880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637054560
    },
    {
        "content": "<p>So you can do <code>obtain ⟨k, rfl⟩ := nat.exists_eq_add_of_le h5</code> (where <code>h5</code> is the name of the <code>5 ≤ n</code> assumption)</p>",
        "id": 261614955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637054615
    },
    {
        "content": "<p>This overlaps with something I was thinking about yesterday... Should we replace <code>instance fin.has_zero : has_zero (fin n.succ)</code> with <code>instance : fin.has_zero [fact (0 &lt; n)] : has_zero (fin n)</code>?</p>",
        "id": 261622431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637059296
    },
    {
        "content": "<p>We have the fact instance globally as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_pos''\">docs#succ_pos''</a></p>",
        "id": 261622475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637059322
    },
    {
        "content": "<p>I guess we can't replace it as the instance is in core while the fact is not, but we can add another instance and the two will be defeq</p>",
        "id": 261625012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637060707
    }
]