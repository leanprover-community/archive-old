[
    {
        "content": "<p>What's the right way to invoke <code>Inf</code> on a <code>set int</code> when I know it is nonempty and <code>bdd_below</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hbs</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">bsbdd</span> <span class=\"o\">:</span> <span class=\"n\">bdd_below</span> <span class=\"n\">bs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mem_lower_bounds</span><span class=\"o\">,</span> <span class=\"n\">hbs</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">and_imp</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">xpos</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xpos.le</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">bsnonempty</span> <span class=\"o\">:</span> <span class=\"n\">bs.nonempty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">xpos</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">bs</span><span class=\"o\">),</span> <span class=\"c1\">-- fails here</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245757764,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626128486
    },
    {
        "content": "<p>Wait for Floris' PR?</p>",
        "id": 245758035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626128663
    },
    {
        "content": "<p>Which one is that?</p>",
        "id": 245758237,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626128819
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8149\">#8149</a></p>",
        "id": 245758274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626128856
    },
    {
        "content": "<p>I fixed some whitespace and was rewarded with a deterministic timeout</p>",
        "id": 245758350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626128895
    },
    {
        "content": "<p>OK, at least that PR taught me something new, which I can use in the meantime:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hbs</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">lb</span><span class=\"o\">,</span> <span class=\"n\">hlb</span><span class=\"o\">,</span> <span class=\"n\">hlb'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">int.exists_least_of_bdd</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">hz.right.le</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">xpos</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hlb</span> <span class=\"n\">hlb'</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">lb</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hlb.right</span><span class=\"o\">,</span> <span class=\"n\">hlb.left</span><span class=\"o\">,</span> <span class=\"n\">hlb'</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">cpos</span> <span class=\"n\">hc</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">_</span> <span class=\"n\">hlb.left</span> <span class=\"n\">hlb.right</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlb'</span> <span class=\"n\">_</span> <span class=\"n\">hc</span> <span class=\"n\">cpos</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245759679,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626129969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I've hit that timeout before, in that exact lemma. I've tried to break it up into pieces, but have failed. It really abuses defeq across quotients.</p>",
        "id": 245759756,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626130064
    }
]