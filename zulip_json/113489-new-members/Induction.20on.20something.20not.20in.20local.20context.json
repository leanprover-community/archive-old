[
    {
        "content": "<p>Let us suppose I have two predicates <code>a : polynomial ℤ → Prop</code> and <code>b: polynomial ℤ → Prop</code> and I want to prove that <code>a</code> implies <code>b</code>, so the lemma would be <code>lemma example (p : polynomial ℤ) : a p → b p</code>. How can I write a proof of something like this by induction on <code>p.nat_degree</code>? I mean, <code>p.nat_degree</code> does not appear in <code>a</code> or in <code>b</code>, so <code>induction p.nat_degree</code> does not work. </p>\n<p>Something better is <code>cases hd : p.nat_degree with d</code>, it gives two goal, when <code>p.nat_degree = 0</code> and <code>p.nat_degree = d + 1</code>, but there is no induction hypothesis regarding <code>a → b</code>. I see the reason: formally speaking, what I want to prove by induction is <code>lemma example (p : polynomial ℤ) (d : ℕ) (hd : d = p.nat_degree) : a p → b p</code>, but it very strange to state the theorem this way. So what is the best way of doing it? I tried to play with <code>set d := p.nat_degree with hd</code> and <code>revert hd</code> but it didn't worked.</p>\n<p>Thanks!</p>",
        "id": 214432288,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1603551943
    },
    {
        "content": "<p>What generally happens is that I suggest writing something like your <code>example</code> as an auxiliary lemma and then applying it to <code>d = _</code> and <code>hd = rfl</code>, and then Mario points out that the <code>blah</code> tactic does exactly this automatically, but I can never remember what <code>blah</code> is.</p>",
        "id": 214432434,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603552092
    },
    {
        "content": "<p>Indeed my real question is what tactic does it automatically, I guess there is one :D</p>",
        "id": 214432452,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1603552141
    },
    {
        "content": "<p>It should be some variation on <code>induction</code> and <code>generalizing</code> though, so since you now understand exactly what tactic state you want to see after the tactic, you can experiment until you find it.</p>",
        "id": 214432465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603552163
    },
    {
        "content": "<p>Ah, <code>generalize' hd : p.nat_degree = d</code> produces the hypothesis I want, then it suffices <code>revert hd</code>.</p>",
        "id": 214432646,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1603552430
    },
    {
        "content": "<p>If you use <code>induction d</code> next then I bet you can skip <code>revert</code> even.</p>",
        "id": 214432699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603552462
    },
    {
        "content": "<p>Yes! (I need strong induction, so I think I have to use <code>revert</code>, but it doesn't matter.)</p>",
        "id": 214432815,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1603552618
    },
    {
        "content": "<p>See the first line of the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_equiv_fun_basis/src\">src#continuous_equiv_fun_basis</a></p>",
        "id": 214435579,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603556213
    },
    {
        "content": "<p><code>unfreezingI</code> is needed to unfreeze <code>[fintype ι]</code> instance; probably not required in your case.</p>",
        "id": 214435665,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603556315
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#induction\">tactic#induction</a> says:</p>\n<blockquote>\n<p><code>induction h : t</code> will introduce an equality of the form <code>h : t = C x y</code>, asserting that the input term is equal to the current constructor case, to the context.</p>\n</blockquote>",
        "id": 214435682,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603556346
    }
]