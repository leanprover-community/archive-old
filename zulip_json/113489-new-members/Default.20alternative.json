[
    {
        "content": "<p>I want to define a map which takes certain values on a set of a type and takes garbage values on the complementary of the set. Is there a way to do this without requiring the target type to be inhabited and sending terms in the complementary of the set on the <code>default</code> term? I'd like to do this without requiring additional type classes</p>",
        "id": 245937196,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1626255103
    },
    {
        "content": "<p>What if the set and the target type are both empty?</p>",
        "id": 245938781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626256178
    },
    {
        "content": "<p>You're right, sorry, I missed an important detail. I am in the following situation: the domain is inhabited iff the codomain is.</p>",
        "id": 245939504,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1626256702
    },
    {
        "content": "<p>The domain is the base space of a vector bundle and the codomain is the total space</p>",
        "id": 245939552,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1626256738
    },
    {
        "content": "<p>You can always use <code>if nonempty domain then (assume x, sorry) else false.elim sorry</code> as your (noncomputable) implementation</p>",
        "id": 245939587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626256772
    },
    {
        "content": "<p>What is the difference between <code>inhabited</code> and <code>nonempty</code>?</p>",
        "id": 245941296,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1626257991
    },
    {
        "content": "<p>The former is in <code>Type u</code>, the latter is in <code>Prop</code></p>",
        "id": 245941500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626258130
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ite\">docs#ite</a> requires a prop</p>",
        "id": 245941563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626258184
    },
    {
        "content": "<p>Ok thanks!</p>",
        "id": 245941604,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1626258228
    },
    {
        "content": "<p>I can see there is <code>nonempty_of_inhabited</code> but is there any <code>inhabited_of_nonempty</code>?</p>",
        "id": 245943461,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1626259592
    },
    {
        "content": "<p>Theres <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#inhabit\">tactic#inhabit</a></p>",
        "id": 245944104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626260117
    },
    {
        "content": "<p>But also, it's very rare to need what you're asking for. If you have <code>h: nonempty T</code> instead of <code>h : inhabited T</code>, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.choice\">docs#classical.choice</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/default\">docs#default</a>.</p>",
        "id": 245944146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626260157
    },
    {
        "content": "<p>Ok thanks! Also it tells me that it cannot synthesize an instance for <code>decidable (nonempty B)</code> <code>B</code> is just a Type. Is this normal?</p>",
        "id": 245944355,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1626260294
    },
    {
        "content": "<p>I guess I'll need to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n</code></pre></div>",
        "id": 245949354,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1626263652
    },
    {
        "content": "<p>Exactly, or you can write <code>open_locale classical</code> to do so in one line.</p>",
        "id": 245950583,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626264416
    },
    {
        "content": "<p>Some more details: The reason we distinguish between <code>inhabited X</code> and <code>nonempty X</code> is that the former is strictly stronger intuitionistically: a term in <code>inhabited X</code> points to a specific element of <code>X</code>, while a term in <code>nonempty X</code> shows that it is contradictory to assume there are no elements of <code>X</code> at all. So going from <code>inhabited X</code> to <code>X</code> is easy, while going from <code>nonempty X</code> to <code>X</code> is not computable.</p>\n<p>For example, for the type <code>X</code> of all <code>x : ℕ</code> such that either <code>x = 0</code> and the Riemann hypothesis doesn't hold, or <code>x = 1</code> and the Riemann hypothesis holds, it's very difficult to give an example of <code>X</code>, while it's easy to show that <code>X</code> cannot be empty.</p>",
        "id": 245950956,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626264709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Default.20alternative/near/245944355\">said</a>:</p>\n<blockquote>\n<p>Ok thanks! Also it tells me that it cannot synthesize an instance for <code>decidable (nonempty B)</code> <code>B</code> is just a Type. Is this normal?</p>\n</blockquote>\n<p>Yes, <code>nonempty</code> is not in general decidable. Consider for example the type <code>X</code> containing all valid proofs of the Riemann hypothesis. Determining whether this type is empty is at least as hard as proving or disproving RH.</p>",
        "id": 245951096,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626264802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  thank you very much for this explanation</p>",
        "id": 245998519,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1626286505
    }
]