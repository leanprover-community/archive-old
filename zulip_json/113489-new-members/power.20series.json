[
    {
        "content": "<p>Another stupid question please: what's the best way deal with a function defined by a power series? For example, if I want to access the power series of exp, is something like this available somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">expPowerSer</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span>  <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">complex.exp</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">ε</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">:</span><span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">complex.abs</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">-</span> <span class=\"o\">((</span><span class=\"n\">finset.range</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat.fact</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">)))</span><span class=\"bp\">&lt;</span><span class=\"n\">ε</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"c1\">--    by library_search,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211183676,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600978244
    },
    {
        "content": "<p>At the moment, exp in particular is defined by power series, but in an ad-hoc way, that has not been connected yet to the general theory of power series.</p>",
        "id": 211183751,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600978285
    },
    {
        "content": "<p>Specifically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The Cauchy sequence consisting of partial sums of the Taylor series of</span>\n<span class=\"sd\">the complex exponential function -/</span>\n<span class=\"kd\">@[pp_nodot]</span> <span class=\"kd\">def</span> <span class=\"n\">exp'</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cau_seq</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex.abs</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">nat.fact</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">is_cau_exp</span> <span class=\"n\">z</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- The complex exponential function, defined via its Taylor series -/</span>\n<span class=\"kd\">@[pp_nodot]</span> <span class=\"kd\">def</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">lim</span> <span class=\"o\">(</span><span class=\"n\">exp'</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 211183785,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600978301
    },
    {
        "content": "<p>But \"someday\", everything will be neatly deduced from the general theory in<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/analytic/basic.html\">https://leanprover-community.github.io/mathlib_docs/analysis/analytic/basic.html</a></p>",
        "id": 211183882,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600978345
    },
    {
        "content": "<p>Yes, I saw that that's how it's defined. But then how do I actually access the power series if trying to prove something. E.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">expBnd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211184574,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600978727
    },
    {
        "content": "<p>The \"human\" proof is of course that the tail is |x^2/2+x^3/3!+...| &lt; |x|^2+|x|^3+...&lt; 1/4+1/8+... = 1/2. What's a good way of executing such a thing in Lean?...</p>",
        "id": 211184861,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600978880
    },
    {
        "content": "<p>Here is a related existing mathlib proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">abs_exp_sub_one_sub_id_le</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">m.fact</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat.fact</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exp_bound</span> <span class=\"n\">hx</span> <span class=\"n\">dec_trivial</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pow_two_nonneg</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 211185010,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600978958
    },
    {
        "content": "<p>I think that we talk about \"some day\" too much. Let's discuss how to actually do it.</p>",
        "id": 211185202,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600979069
    },
    {
        "content": "<p>I know that I've started this discussion months ago...</p>",
        "id": 211185296,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600979122
    },
    {
        "content": "<p>First, we have power series in algebra and in <code>analysis/analytic</code>.</p>",
        "id": 211185345,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600979147
    },
    {
        "content": "<p>Thanks, that's what I was looking for! (I think... we'll see if it works for what I need...)</p>",
        "id": 211185357,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600979156
    },
    {
        "content": "<p>If we want a theory of one-variable analytic functions, the first step would be to define</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_multilinear_map\">docs#continuous_multilinear_map</a> that computes the product of its arguments;</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series\">docs#formal_multilinear_series</a> from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_series\">docs#power_series</a>; this should be at least an <code>alg_hom</code>;</li>\n<li>relate <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.radius\">docs#formal_multilinear_series.radius</a> to the coefficients of the original <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_series\">docs#power_series</a>;</li>\n<li>define, e.g., <code>power_series.exp : power_series \\Q</code> and prove some properties of this formal series;</li>\n<li>redefine <code>exp</code> as the sum of the corresponding <code>formal_multilinear_series</code>.</li>\n</ul>",
        "id": 211186238,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600979605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Which items do we already have? I know that we have a lot of theory about general analytic functions, so this is not included in the list.</p>",
        "id": 211186383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600979675
    },
    {
        "content": "<p>For the first point, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The canonical continuous multilinear map on `𝕜^ι`, associating to `m` the product of all the</span>\n<span class=\"sd\">`m i` (multiplied by a fixed reference element `z` in the target module) -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mk_pi_field</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">E₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous_multilinear_map</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">E₂</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 211186618,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1600979814
    },
    {
        "content": "<p>But indeed all the glue specializing the general framework of analytic functions to one dimension (analogous to what we have for <code>fderiv</code>/ <code>deriv</code>) is completely missing.</p>",
        "id": 211186768,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1600979895
    },
    {
        "content": "<p>As far as I understand, we also miss a framework for finite dimensional analytic functions (i.e., starting with <code>mv_power_series</code>).</p>",
        "id": 211187014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600980042
    },
    {
        "content": "<p>I think that <code>mk_pi_field</code> should be generalized to a <code>normed_algebra</code>.</p>",
        "id": 211187039,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600980064
    },
    {
        "content": "<p>Ok I'm still stuck on the first line: ∑ m in range 2, x ^ m / m.fact.<br>\nIt doesn't know what \"∑\" is. I looked at the source code (<a href=\"https://github.com/leanprover-community/mathlib/blob/02ca5e2/src/data/complex/exponential.lean\">https://github.com/leanprover-community/mathlib/blob/02ca5e2/src/data/complex/exponential.lean</a>) and the symbol is used on line 90 without being defined. How do I get Lean to allow it? Thanks!</p>",
        "id": 211187534,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600980367
    },
    {
        "content": "<p>This is a localized notation; you need <code>open_locale big_operators</code> to make it available.</p>",
        "id": 211188146,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600980704
    },
    {
        "content": "<p>It comes from <code>import algebra.big_operators</code> which is likely transitively imported</p>",
        "id": 211188149,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600980705
    },
    {
        "content": "<p>And to have access to the symbol, have <code>open_locale big_operators</code> after your imports</p>",
        "id": 211188177,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600980721
    },
    {
        "content": "<p>Note that it is the \"sum\" symbol, not \"sigma\"; I double checked, you use the correct symbol.</p>",
        "id": 211188281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600980775
    }
]