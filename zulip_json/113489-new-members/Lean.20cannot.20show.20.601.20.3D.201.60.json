[
    {
        "content": "<p>There is a weird bug where Lean cannot understand that <code>1 = 1</code>. I'm somewhat aware that this is has something to do with Lean not inferring the correct instances... I think? Anyways, what is the best way to debug things of type <code>a = a</code>? There are several more of these in my half-done proof. <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">vieta</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">has_coe_poly</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">monomial</span> <span class=\"mi\">0</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">powerset_len_zero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">powerset_len</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">∅</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_poly_from_roots</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"n\">k</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">A</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">powerset_len</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.nat_zero_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">le_zero_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_sub</span><span class=\"o\">,</span> <span class=\"n\">forall_eq</span><span class=\"o\">,</span> <span class=\"n\">range_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod_empty</span><span class=\"o\">,</span> <span class=\"n\">coeff_one_zero</span><span class=\"o\">,</span> <span class=\"n\">powerset_len_zero</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">sum_singleton</span><span class=\"o\">,</span> <span class=\"n\">prod_empty</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- 1 = 1 ???</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">vieta</span>\n</code></pre></div>",
        "id": 221744192,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609922089
    },
    {
        "content": "<p>By adding the assumptions <code>comm_ring</code> and <code>integral_domain</code>you've inadvertently put two ring structures on the same type, this is not good and will lead to all sorts of problems like this, try removing the comm_ring assumption, as it is implied by integral domain</p>",
        "id": 221744344,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609922223
    },
    {
        "content": "<p>you can also find out that the <code>1</code> comes from different ring structures by clicking enough things in the infoview.</p>",
        "id": 221744415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609922283
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 221744473,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609922359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> there are different ways of defining new instances in lean/mathlib. We have instances of the form:</p>\n<ul>\n<li><code>R</code> is a ring</li>\n<li><code>R</code> is an integral domain</li>\n<li><code>G</code> is a group</li>\n<li><code>K</code> is a field</li>\n</ul>\n<p>but also instances of the form</p>\n<ul>\n<li><code>topological_group G</code>, which mean: assume that in the context there is <code>[topological_space G]</code> and <code>[group G]</code>, and then <code>[topological_group G]</code> will assert that these two assumptions play well together: addition and inverse are continuous</li>\n</ul>",
        "id": 221744497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609922397
    },
    {
        "content": "<p>So in the latter case, you will write <code>[topological_space G] [group G] [topological_group G]</code> and this will <em>not</em> put two different group structures on <code>G</code>.</p>",
        "id": 221744554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609922433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  Hmm... I don't see any difference when clicking through. Is there some second layer of meta-data I should be able to see?</p>",
        "id": 221744577,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609922464
    },
    {
        "content": "<p>But in the former case, writing <code>[ring R]</code> and <code>[integral_domain R]</code> will put two ring structures on <code>R</code> that have <em>nothing</em> to do with each other. In particular, you can't prove <code>1 = 1</code>.</p>",
        "id": 221744585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609922472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20cannot.20show.20.601.20.3D.201.60/near/221744415\">said</a>:</p>\n<blockquote>\n<p>you can also find out that the <code>1</code> comes from different ring structures by clicking enough things in the infoview.</p>\n</blockquote>\n<p>You have to click quite a bit, but it works!</p>\n<p><a href=\"/user_uploads/3121/dxAvmlC0h0BqnCbu0XCP3YYV/Screen-Shot-2021-01-06-at-3.39.56-AM.png\">Screen-Shot-2021-01-06-at-3.39.56-AM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dxAvmlC0h0BqnCbu0XCP3YYV/Screen-Shot-2021-01-06-at-3.39.56-AM.png\" title=\"Screen-Shot-2021-01-06-at-3.39.56-AM.png\"><img src=\"/user_uploads/3121/dxAvmlC0h0BqnCbu0XCP3YYV/Screen-Shot-2021-01-06-at-3.39.56-AM.png\"></a></div><p><a href=\"/user_uploads/3121/J8aP-B5vAC07jDDt0dI25fM8/Screen-Shot-2021-01-06-at-3.40.32-AM.png\">Screen-Shot-2021-01-06-at-3.40.32-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/J8aP-B5vAC07jDDt0dI25fM8/Screen-Shot-2021-01-06-at-3.40.32-AM.png\" title=\"Screen-Shot-2021-01-06-at-3.40.32-AM.png\"><img src=\"/user_uploads/3121/J8aP-B5vAC07jDDt0dI25fM8/Screen-Shot-2021-01-06-at-3.40.32-AM.png\"></a></div>",
        "id": 221744592,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609922481
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ceWL5qFIEMTfzu7-jP0EppVf/2021-01-06-9.png\">2021-01-06-9.png</a> <a href=\"/user_uploads/3121/SYpUs3FiQrl5XZDyvxyAW9G1/2021-01-06-8.png\">2021-01-06-8.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ceWL5qFIEMTfzu7-jP0EppVf/2021-01-06-9.png\" title=\"2021-01-06-9.png\"><img src=\"/user_uploads/3121/ceWL5qFIEMTfzu7-jP0EppVf/2021-01-06-9.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SYpUs3FiQrl5XZDyvxyAW9G1/2021-01-06-8.png\" title=\"2021-01-06-8.png\"><img src=\"/user_uploads/3121/SYpUs3FiQrl5XZDyvxyAW9G1/2021-01-06-8.png\"></a></div>",
        "id": 221744603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609922501
    },
    {
        "content": "<p>Ah ok. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thanks for the explanation. I suspected it might have something to do with instances. Is there any way to check if instances play well together?</p>",
        "id": 221744791,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609922666
    },
    {
        "content": "<p>you'll have to check their definitions</p>",
        "id": 221744822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609922702
    },
    {
        "content": "<p>you'll notice that <code>integral_domain</code> uses <code>extends comm_ring</code>, whereas <code>topological_group</code> has assumptions <code>[topological_space G]</code> before the colon.</p>",
        "id": 221744848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609922742
    },
    {
        "content": "<p>Ok, that makes sense, thanks!</p>",
        "id": 221744924,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609922800
    },
    {
        "content": "<p>I'm afraid that right now you have to look these things up yourself, and we see this sort of mistake often made by beginners, because they are in no position to figure it out themselves and we're not doing very well at documenting/explaining it right now. Sorry.</p>",
        "id": 221746756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609924361
    },
    {
        "content": "<p>or you can try removing the <code>comm_ring</code> instance and see if Lean complains about it.</p>",
        "id": 221746817,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609924428
    },
    {
        "content": "<p>If you run the <code>congr</code> tactic on your <code>1=1</code> goal, I think it would have revealed the problem and saved you the clicks</p>",
        "id": 221747028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609924595
    },
    {
        "content": "<p>but that assumes you know about the <code>congr</code> tactic... <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 221747485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609925010
    }
]