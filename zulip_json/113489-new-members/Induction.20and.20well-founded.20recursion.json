[
    {
        "content": "<p>'minimum' working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ε_NFA</span> <span class=\"o\">(</span><span class=\"n\">alphabet</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">alphabet_fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">alphabet</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">state_fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">state</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">state_dec</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">state</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">alphabet</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">accept_states</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">state</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ε_NFA</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">dec</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">M.state_dec</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fin₁</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">M.alphabet_fintype</span>\n<span class=\"kd\">instance</span> <span class=\"n\">fin₂</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">M.state</span> <span class=\"o\">:=</span> <span class=\"n\">M.state_fintype</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">step_set'</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">Ss</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">finset.bind</span> <span class=\"n\">Ss</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M.step</span> <span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ε_closure_set</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span> <span class=\"bp\">→</span> <span class=\"n\">M.state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">Ss</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">Ss</span><span class=\"o\">),</span> <span class=\"n\">ε_closure_set</span> <span class=\"n\">Ss</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">Ss</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">ε_closure_set</span> <span class=\"n\">Ss</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">∈</span> <span class=\"n\">M.step</span> <span class=\"n\">S</span> <span class=\"n\">option.none</span> <span class=\"bp\">→</span> <span class=\"n\">ε_closure_set</span> <span class=\"n\">Ss</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ε_NFA_has_well_founded</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">S₁</span> <span class=\"n\">S₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">S₁</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S₂</span><span class=\"bp\">ᶜ</span><span class=\"o\">),</span>\n  <span class=\"n\">wf</span> <span class=\"o\">:=</span> <span class=\"n\">inv_image.wf</span> <span class=\"n\">_</span> <span class=\"n\">finset.lt_wf</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sub_of_compl</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">T</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">⊆</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ε_closure</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"n\">S'</span> <span class=\"bp\">=</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">S</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"o\">:</span> <span class=\"n\">S'</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ε_closure</span> <span class=\"n\">S'</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M.state</span><span class=\"o\">),</span> <span class=\"n\">M.ε_closure_set</span> <span class=\"n\">S</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">M.ε_closure</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ε_closure</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">S</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">S</span> <span class=\"n\">t'</span> <span class=\"n\">t</span> <span class=\"n\">ht'</span> <span class=\"n\">ht</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"k\">let</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded.r</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n      <span class=\"n\">apply</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">),</span> <span class=\"c1\">-- failed to prove recursive application</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ε_NFA</span>\n</code></pre></div>\n\n<p>At the <code>apply MWE</code> line I am getting a well-founded recursion problem, how come I do not get this in the definition of <code>ε_closure</code> and how do I fix this? I have been able to prove the other direction without the error.</p>",
        "id": 213333362,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1602700547
    },
    {
        "content": "<p>I have just realized that I have reused <code>S</code> as a variable name.</p>",
        "id": 213334834,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1602701291
    },
    {
        "content": "<p>I think the problem boils down to a situation like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">MWE'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">MWE'</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>How can I show that <code>m&lt;n</code>.</p>",
        "id": 213335794,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1602701724
    },
    {
        "content": "<p>In your second case, don't you need to use the induction hypothesis <code>ih</code> instead of trying to apply <code>MWE'</code> manually?</p>",
        "id": 213342491,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1602705266
    },
    {
        "content": "<p>In the first case, you seem to be trying to use an induction hypothesis in the base case</p>",
        "id": 213342581,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1602705311
    },
    {
        "content": "<p>As <code>epsilon_closure</code> is recursively defined and <code>epsilon_closure_set</code> is inductively defined I am using two forms of induction, the error is happening in the base case generated by the <code>induction</code> tactic on <code>epsilon_closure_set</code> but it occurs in the 'inductive hypothesis' generated by the <code>split_ifs</code> tactic.</p>",
        "id": 213343481,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1602705781
    },
    {
        "content": "<p><code>MWE'</code> is a silly proof to illustrate the problem, there is no need to define <code>h</code> but I should be able to, and I need something like that for my original problem.</p>",
        "id": 213343707,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1602705886
    },
    {
        "content": "<p>The way to write proofs like that is to declare the recursion structure up front in the equations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">MWE'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">MWE'</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213358695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602714945
    },
    {
        "content": "<p>The problem with your original MWE is that there is a shadowed variable in the middle, you are referencing the wrong <code>S</code></p>",
        "id": 213359285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602715312
    },
    {
        "content": "<p>You have two conflicting inductions in this proof</p>",
        "id": 213359518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602715446
    },
    {
        "content": "<p>aha, the issue is that <code>ε_closure_set</code> unnecessarily takes <code>Ss</code> as an index to the inductive family, so it is allowed to vary in the induction and then you lose track of the original <code>S</code>. Use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ε_closure_set</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ε_NFA</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ss</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M.state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M.state</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">Ss</span><span class=\"o\">),</span> <span class=\"n\">ε_closure_set</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">ε_closure_set</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">∈</span> <span class=\"n\">M.step</span> <span class=\"n\">S</span> <span class=\"n\">option.none</span> <span class=\"bp\">→</span> <span class=\"n\">ε_closure_set</span> <span class=\"n\">T</span>\n</code></pre></div>\n\n<p>and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">t'</span> <span class=\"n\">t</span> <span class=\"n\">ht'</span> <span class=\"n\">ht</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"k\">let</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded.r</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n      <span class=\"n\">apply</span> <span class=\"n\">MWE</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">∪</span> <span class=\"n\">M.step_set'</span> <span class=\"n\">S</span> <span class=\"n\">none</span><span class=\"o\">),</span> <span class=\"c1\">-- works</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213359948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602715745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267202\">@Fox Thomson</span></p>",
        "id": 213359964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602715757
    }
]