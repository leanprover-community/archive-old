[
    {
        "content": "<p>I'm in the middle of working on a PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/6671\">#6671</a>). I want to use / refer to recent changes that were made in another PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6753\">#6753</a>. </p>\n<ol>\n<li>How do I conveniently update my copy of mathlib in my own PR? (In this particular case I could just manually copy the file changed in the other PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6753\">#6753</a>, but I'm sure this is not how one is supposed to do it).</li>\n<li>How do I make sure updating my local mathlib copy in the PR is not eventually regarded as part of the submission of my own PR? (There is no overlap in the files touched by the two PRs.)?</li>\n</ol>",
        "id": 230987936,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616141318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> do you have <code>leanproject</code> installed?</p>",
        "id": 230987979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616141371
    },
    {
        "content": "<p>yes</p>",
        "id": 230987989,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616141379
    },
    {
        "content": "<p>great</p>",
        "id": 230987992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616141383
    },
    {
        "content": "<p>So you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">master</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">up</span>\n<span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">branch_jakob</span>\n<span class=\"n\">git</span> <span class=\"n\">merge</span> <span class=\"n\">master</span>\n</code></pre></div>",
        "id": 230988074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616141428
    },
    {
        "content": "<p>That will merge the newest version of <code>master</code> into your branch, and on the branch you will then have <code>olean</code>s from <code>master</code>. So you need to <code>leanproject build</code> to get oleans for you branch</p>",
        "id": 230988132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616141484
    },
    {
        "content": "<p>But if you change just 1 or 2 files, that is usually quite fast</p>",
        "id": 230988139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616141499
    },
    {
        "content": "<p>Git will take care of doing something sensible (when there is no overlap) so you don't have to worry about Q2</p>",
        "id": 230988204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616141530
    },
    {
        "content": "<p>If there is overlap, git will tell you during the <code>git merge master</code>, and ask you to resolve the conflicts.</p>",
        "id": 230988226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616141547
    },
    {
        "content": "<p>Now, if you have two branches, say <code>exp_char</code> and <code>sep_degree</code>, then you first do this process for <code>exp_char</code>, and then afterwards you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">sep_degree</span>\n<span class=\"n\">git</span> <span class=\"n\">merge</span> <span class=\"n\">exp_char</span>\n<span class=\"n\">git</span> <span class=\"n\">push</span>\n</code></pre></div>",
        "id": 230988270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616141600
    },
    {
        "content": "<p>And that will make the 2nd PR incorporate all the changes made to PR 1</p>",
        "id": 230988286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616141618
    },
    {
        "content": "<p>Works great, thanks! (Might be part of that tiny tutorial...)</p>",
        "id": 230989247,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616142335
    },
    {
        "content": "<p>If you make a pull request for the 2nd branch before the 1st branch's pull request has been merged, you'll also need to remember to note this in the pull request summary. (Read the template, it shows the format for describing dependent PRs.) (And then be patient... :-)</p>",
        "id": 231016991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616158196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> What does \"<code>leanproject up</code>\" do? Is that essentially the same as <code>git pull</code> (which is what I have been using at that point when merging)?</p>",
        "id": 231187781,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1616295084
    },
    {
        "content": "<p>Might depend on whether you're working in mathlib or in your own repo with mathlib as a dependency. If in your own repo it might well update the mathlib dependency to the latest mathlib and possibly download oleans too. What does <code>leanproject --help</code> say?</p>",
        "id": 231201602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616314384
    },
    {
        "content": "<p>I generally work in mathlib. <code>leanproject --help</code> says \"Upgrade mathlib (as a dependency or as the main...\" for the command <code>upgrade-mathlib</code>.</p>",
        "id": 231201935,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1616314900
    },
    {
        "content": "<p>I never use the command when I'm working on mathlib, for me this is a command to bump mathlib when it's a dependency</p>",
        "id": 231202000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616315004
    },
    {
        "content": "<p>If you have master checked out then I could imagine it would be the same as git pull followed by leanproject get-cache but you can easily find out by experimenting</p>",
        "id": 231202067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616315098
    },
    {
        "content": "<p>Okay thanks! Was just curious to learn a new/potentially better way of doing things.</p>",
        "id": 231206309,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1616320975
    },
    {
        "content": "<p>That's somewhat annoying <code>--help</code> behavior (which obviously isn't leanproject's fault, I think it's a bad <code>click</code> default IIRC)</p>",
        "id": 231223018,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616340775
    },
    {
        "content": "<p>But here's the code (and full docstring): <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/leanproject.py#L103\">https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/leanproject.py#L103</a> which calls <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/lib.py#L537-L540\">https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/lib.py#L537-L540</a></p>",
        "id": 231223042,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616340790
    },
    {
        "content": "<p>so it does appear it does slightly different things depending on if you're working on mathlib or not -- for mathlib it looks like it should just run <code>git pull</code> for the current branch and then fetch oleans. For not-mathlib it looks like it should discard local changes to mathlib as a dependency, then run <code>leanpkg upgrade</code> (which will update all dependencies, including mathlib), then fetch oleans for mathlib. And then thirdly if you run this outside a project repo it looks like it will upgrade a user-wide (i.e. non-project specific) mathlib install.</p>",
        "id": 231223059,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616340811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/Including.20updates.20from.20recent.20PR/near/231223018\">said</a>:</p>\n<blockquote>\n<p>That's somewhat annoying <code>--help</code> behavior (which obviously isn't leanproject's fault, I think it's a bad <code>click</code> default IIRC)</p>\n</blockquote>\n<p>What is the annoying <code>--help</code> behavior? Truncating the help message? You can get the full version using <code>leanproject upgrade-mathlib --help</code>. About general remarks concerning <code>click</code>, note that I've very careful to separate the leanproject library from the client. One goal was to allow building more tools on top of the library, but the other was making sure we could change the client part in case we can find something better than <code>click</code> (or someone has courage to write custom code).</p>",
        "id": 231241155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1616360817
    },
    {
        "content": "<p>Yeah, truncating <code>--help</code> without running it on the subcommand (I think it should just wrap and cut off at some much longer length even when you run it on the top level command) -- and FWIW I wasn't questioning the click choice, it's the best of the options, I just don't like this behavior. (And if I haven't said so before I find leanproject in general quite reasonably written!)</p>",
        "id": 231241772,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616361508
    },
    {
        "content": "<p>Perhaps the help text could be changed so that it cuts off at a more reasonable point?</p>",
        "id": 231242036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616361832
    },
    {
        "content": "<p>Feel free to PR changes to any help message.</p>",
        "id": 231242235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1616362035
    },
    {
        "content": "<p>does the cutoff point depend on the terminal width?</p>",
        "id": 231242304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616362099
    },
    {
        "content": "<p><a href=\"https://github.com/ansible-community/molecule/pull/2768/files#diff-2517335dce22ba8b2a7f7afd8ea59cad2997aa523b1c981031c22965b86b3856R221\">https://github.com/ansible-community/molecule/pull/2768/files#diff-2517335dce22ba8b2a7f7afd8ea59cad2997aa523b1c981031c22965b86b3856R221</a></p>",
        "id": 231242391,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616362206
    },
    {
        "content": "<p>this is how you disable that behavior IIRC</p>",
        "id": 231242395,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616362212
    },
    {
        "content": "<p>(if I get some cycles and someone else doesn't get to it first I can get to that at some point)</p>",
        "id": 231242467,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616362313
    },
    {
        "content": "<p>It looks like the existing text is just barely over the limit (78-ish characters?). You could drop a word and bring it under that</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>  upgrade-mathlib    Upgrade mathlib (as a dependency or the main project).\n</code></pre></div>",
        "id": 231242521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616362339
    }
]