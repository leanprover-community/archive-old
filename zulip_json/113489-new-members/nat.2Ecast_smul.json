[
    {
        "content": "<p>I tried to find a proof for <code>(n:ℝ) • x = n • x</code> but failed. I wrote a proof myself. <br>\nShould I PR this? </p>\n<div class=\"codehilite\"><pre><span></span>import algebra.module\n\nvariables {α : Type*} {β : Type*} [semiring α] [add_comm_monoid β] [semimodule α β]\n\nnamespace nat\n\n@[simp, elim_cast] lemma cast_smul (b : β) : ∀n:ℕ, (n:α) • b = n • b\n| 0 := by simp\n| (n + 1) := by simp [add_smul, cast_smul]\n\nend nat\n</pre></div>",
        "id": 173024842,
        "sender_full_name": "Joe",
        "timestamp": 1565617814
    },
    {
        "content": "<p>looks good to me</p>",
        "id": 173025727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565618518
    },
    {
        "content": "<p>what is the smul on the right? Is that the one from group_power?</p>",
        "id": 173025863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565618622
    },
    {
        "content": "<p>The one on the left is from <code>semimodule</code></p>",
        "id": 173025959,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565618674
    },
    {
        "content": "<p>For the one on the right I think any <code>add_comm_monoid</code> gets a <code>semimodule nat</code> instance--that name sounds plausible</p>",
        "id": 173026142,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565618777
    },
    {
        "content": "<p>do we have a <code>semimodule nat B</code> instance? The group_power file defines a <code>has_scalar</code> instance directly</p>",
        "id": 173026207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565618838
    },
    {
        "content": "<p>but it may have upgraded it to a semimodule for an appropriate structure on B</p>",
        "id": 173026261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565618873
    },
    {
        "content": "<p>I wonder whether this should really be a simp lemma. In the sensitivity conjecture formalization we specifically needed the one on the left, and it was already slightly nonobvious how to write it</p>",
        "id": 173026264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565618875
    },
    {
        "content": "<p>Ah, I don't know whether that <code>semimodule nat</code> instance actually exists in mathlib</p>",
        "id": 173026381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565618931
    },
    {
        "content": "<p>I think these are usually simp lemmas; the cast tactic is supposed to handle \"fighting simp\" in these sorts of cases</p>",
        "id": 173026414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565618959
    },
    {
        "content": "<p>I found <code>add_comm_monoid.semimodule</code> in the library. It shows <code>semimodule ℕ β</code>.<br>\nSo maybe it is useful to add another <code>cast_smul</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">cast_smul&#39;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">n</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>where <code>add_monoid.smul</code>is the smul from group_power file.</p>",
        "id": 173028213,
        "sender_full_name": "Joe",
        "timestamp": 1565620175
    }
]