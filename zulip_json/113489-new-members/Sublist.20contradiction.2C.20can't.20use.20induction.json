[
    {
        "content": "<p>Why does <code>induction</code> leave an unprovable goal here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cons_ne_sublist</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span> <span class=\"c1\">-- what happened here?</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cons_ne_sublist'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩,</span>\n  <span class=\"c1\">-- only 2 cases as expected</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289607920,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657812762
    },
    {
        "content": "<p><code>induction'</code> seems ok here</p>",
        "id": 289608706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657813171
    },
    {
        "content": "<p><code>cases</code> also works fine</p>",
        "id": 289608894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657813245
    },
    {
        "content": "<p><code>induction'</code> has the first goal as unprovable I think</p>",
        "id": 289609161,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657813366
    },
    {
        "content": "<p>seems <code>induction</code> forgets to check whether <code>slnil</code> is actually  a possible introduction... yikes. <code>rintro &lt;&gt;</code> has some extra <code>no_confusion</code> stuff</p>",
        "id": 289610205,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657813851
    },
    {
        "content": "<p>is this posdsible to write with the  equation compiler? I've been trying and failing at that</p>",
        "id": 289610521,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657813998
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cons_ne_sublist</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>shows an even more obvious nonsense</p>",
        "id": 289610665,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657814054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Sublist.20contradiction.2C.20can't.20use.20induction/near/289609161\">said</a>:</p>\n<blockquote>\n<p><code>induction'</code> has the first goal as unprovable I think</p>\n</blockquote>\n<p>The goal is provable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cons_ne_sublist</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.antisymm</span> <span class=\"o\">(</span><span class=\"n\">list.sublist_of_cons_sublist</span> <span class=\"o\">(</span><span class=\"n\">list.sublist_cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">list.length</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">list.length</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_right_inj</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289612291,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657814788
    },
    {
        "content": "<p>Of course, this is silly because proving the first goal requires proving the original statement, so induction is not the right path here. But the point is that the goal is indeed provable.</p>",
        "id": 289612823,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1657815039
    },
    {
        "content": "<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cons_not_sublist</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">cons_ne_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.antisymm</span> <span class=\"o\">(</span><span class=\"n\">sublist_cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289619842,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657818295
    },
    {
        "content": "<p>Where the magic is in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.eq_of_sublist_of_length_eq/src\">src#list.eq_of_sublist_of_length_eq</a></p>",
        "id": 289619886,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657818314
    }
]