[
    {
        "content": "<p>I understand what set constructor notation is doing, but I can't figure out where it is defined so I can't figure out what definition to tell lean to unfold. I know how to find definitions of simple notation like <code>#print notation *</code> but I don't know how to do it for complicated notation like the set constructor notation. So where is set constructor notation defined/how can I unfold it?</p>",
        "id": 197796904,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589637571
    },
    {
        "content": "<p>I totally agree that this is annoying and frustrating. I went through a phase of trying to understand what Lean was by unfolding everything in sight and set notation, and stuff like there exists and inf stuff are very hard to see through: they are just some \"scoped something\". But in the set case you can just <code>set_option pp.notation false</code> and find out what's going on. It's something like <code>set_of</code> that you're looking for.</p>",
        "id": 197796995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589637686
    },
    {
        "content": "<p>Thanks! Your answer implies that I usually shouldn't have to unfold stuff to prove something, is there a better way to show something like: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>without <code>unfold set_of</code>?</p>",
        "id": 197797169,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589637884
    },
    {
        "content": "<p>In some sense your goal should never be that, because it's not in canonical form</p>",
        "id": 197797845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589638912
    },
    {
        "content": "<p>If I found myself in that state I would probably first do <code>show x \\in A \\and x \\in B = x \\in B and x \\in A</code> to get things back into some kind of normality, and then use the <code>ext</code> tactic.</p>",
        "id": 197797980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589639057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300684\">@Keefer Rowan</span> How did you end up with that goal?</p>",
        "id": 197797988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589639076
    },
    {
        "content": "<p>I think that 1 or 2 lines before it, you should have written <code>ext x</code>.</p>",
        "id": 197798004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589639092
    },
    {
        "content": "<p>Here again there are two kinds of approaches depending on whether or not you want to exploit your knowledge of the definition of <code>{ | }</code>:</p>\n<ol>\n<li>Using that knowledge:</li>\n</ol>\n<ul>\n<li>You could compute mentally that the goal is really just <code>x ∈ A ∧ x ∈ B = x ∈ B ∧ x ∈ A</code>. So use <code>change x ∈ A ∧ x ∈ B = x ∈ B ∧ x ∈ A</code> to make that the new goal.</li>\n<li>Alternatively, you can see that the new goal is going to be closed by something like <code>and.comm</code> (this might be phrased in terms of iff, though, not sure) so just apply that directly.</li>\n</ul>\n<ol start=\"2\">\n<li>Not using that knowledge:</li>\n</ol>\n<ul>\n<li>find some lemma that rewrites <code>{a | p a} x</code> to <code>p x</code>.</li>\n</ul>\n<p>In this case (and also in the <code>compl</code> one earlier) it's better to just do 1, since the definition of this notation is so basic.</p>",
        "id": 197798012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589639098
    },
    {
        "content": "<p>There are 100 ways to say everything in Lean, and a proper subset of them are \"canonical\". If you stick to the canonical ways then the <code>simp</code> tactic will be of much more help to you.</p>",
        "id": 197798028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589639132
    },
    {
        "content": "<p>You learn the canonical ways by looking at statements of lemmas in the library</p>",
        "id": 197798081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589639172
    },
    {
        "content": "<p><code>show</code> and <code>change</code> do the same thing, by the way</p>",
        "id": 197798097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589639206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  This is where I was:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">inter_comm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">has_inter</span><span class=\"bp\">.</span><span class=\"n\">inter</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(BTW: I know this is almost certainly already in the library)</p>\n<p>Also <code>ext x</code> gives an \"unknown identifier\". I'm working with very basic imports, so maybe isn't imported.</p>",
        "id": 197801101,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589643273
    },
    {
        "content": "<p>I think I see what's going on though, you're saying that if I prove the theorem by set extensionality, I won't run into this state. What do I need to import to get <code>ext</code>? I was able to prove <code>theorem setext {α : Type u} (A B : set α) : (∀ (x : α), x ∈ A ↔ x ∈ B) → A = B</code>, which allows me to do this, but I should probably be using the proper tactic.</p>",
        "id": 197801352,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589643629
    },
    {
        "content": "<p>Yeah, <code>ext</code> is a mathlib tactic. You would have to use <code>apply set.ext</code> instead. <a href=\"https://github.com/leanprover-community/mathlib/blob/4b71428/src/data/set/basic.lean#L446\">Here's the proof in mathlib</a>.</p>",
        "id": 197801365,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589643674
    },
    {
        "content": "<p>Oh hmm, <a href=\"https://github.com/leanprover-community/mathlib/blob/4b71428/src/data/set/basic.lean#L130\"><code>set.ext</code> is proved in mathlib</a> too.</p>",
        "id": 197802342,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589644946
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">inter_comm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"err\">∩</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_inter_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">and_comm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>In this proof nothing ever leaves the canonical form.</p>",
        "id": 197803359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589646528
    }
]