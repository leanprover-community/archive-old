[
    {
        "content": "<p>Hi! I'm trying to coerce a nonnegative real to a ennreal using a coercion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">((⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> invalid type ascription, term has type</span>\n<span class=\"cm\">  {r // 0 ≤ r}</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ℝ≥0∞</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I have no clue why the third <code>#check</code> doesn't work</p>",
        "id": 248953703,
        "sender_full_name": "Jason KY.",
        "timestamp": 1628584865
    },
    {
        "content": "<p>If you put two type ascriptions in a row with nothing else lean sometimes just ignores the first one, so its trying to interpret <code>⟨b, hb⟩</code> as a <code>ℝ≥0∞</code>, you can force lean to do what you intend by adding a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/id\">docs#id</a> as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"n\">id</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but what the actual fix is depends on what you are trying to do.</p>",
        "id": 248958817,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628588850
    },
    {
        "content": "<p>I would like to address the comment from here: <a href=\"https://github.com/leanprover-community/mathlib/pull/8597#discussion_r685779359\">https://github.com/leanprover-community/mathlib/pull/8597#discussion_r685779359</a> though I don't know if its worth using <code>id</code> just to force a coercion instead of using <code>some</code> since they are all defeq</p>",
        "id": 248959867,
        "sender_full_name": "Jason KY.",
        "timestamp": 1628589500
    },
    {
        "content": "<p>Looks a bit funny but making the coe explicitly works, and looks like it gives the right definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span>\n<span class=\"k\">#print</span> <span class=\"n\">t</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 248962660,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1628591478
    },
    {
        "content": "<p>When you write <code>((⟨b, hb⟩ : ℝ≥0) : ℝ≥0∞)</code>, Lean verifies that <code>⟨b, hb⟩</code> has type defeq to <code>nnreal</code> but continues to treat it as <code>{r // 0 ≤ r}</code>. There are a few workarounds: (1) add <code>id</code>; (2) use <code>@coe nnreal ennreal</code> so that Lean expects an <code>nnreal</code> when it parses <code>⟨b, hb⟩</code>; (3) use <code>show nnreal, from ⟨b, hb⟩</code>.</p>",
        "id": 249147842,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628706005
    },
    {
        "content": "<p>(3) and (1) are the same IIRC</p>",
        "id": 249180025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628722489
    },
    {
        "content": "<p>2 is best in lemma statements</p>",
        "id": 249180077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628722545
    }
]