[
    {
        "content": "<p>An unfamiliar error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kd\">structure</span> <span class=\"n\">value</span> <span class=\"o\">{</span><span class=\"bp\">...</span><span class=\"o\">},</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">known</span><span class=\"o\">(</span><span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">qualified</span> <span class=\"kd\">structure</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span> <span class=\"n\">struct_id</span> <span class=\"bp\">.</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I don't think I can easily make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. This might have to do with clashing class names, I've defined my own <code>group</code> and am trying to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">to_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">_root_.group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">group.op</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">group.assoc'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">group.e</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">group.e_op'</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">group.op_e'</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">group.inv</span><span class=\"o\">,</span>\n  <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">group.op</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">group.inv</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n  <span class=\"n\">div_eq_mul_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">group.inv_op'</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 232523552,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617154901
    },
    {
        "content": "<p>Does it in fact work if you do what it says? -- i.e. <code>{ _root_.group G . mul := group.op, blabla }</code>?</p>",
        "id": 232527491,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617158139
    },
    {
        "content": "<p>I'm pretty sure I've seen that error before but I'm sure in much simpler poking than whatever you're up to</p>",
        "id": 232527552,
        "sender_full_name": "Julian Berman",
        "timestamp": 1617158180
    }
]