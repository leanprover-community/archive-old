[
    {
        "content": "<p>I'm working with a complex type family:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">....</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">TType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">BlockList</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">CBlock</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">SwitchBody</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">CExpr</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">CStatement</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TType</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">:</span> <span class=\"n\">TType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">EmpCBlock</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">SeqCBlock</span>  <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars''</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars'</span> <span class=\"n\">vars''</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars''</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">NestedScope</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"n\">inner_vars</span> <span class=\"n\">inner_vars'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">VarStore</span> <span class=\"n\">inner_vars</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">inner_vars</span> <span class=\"bp\">∪</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inner_vars'</span> <span class=\"bp\">∪</span> <span class=\"n\">vars</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">CCase</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CDefault</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">CFunctionCall</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">f_id</span> <span class=\"o\">:</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">f_id</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CId</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"bp\">∈</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CLit</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Scope</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars_outer</span> <span class=\"n\">vars_inner</span> <span class=\"n\">vars_inner'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ret_vars</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">VarStore</span> <span class=\"o\">(</span><span class=\"n\">vars_inner</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">tofinset</span> <span class=\"n\">ret_vars</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">vars_inner</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">tofinset</span> <span class=\"n\">ret_vars</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">vars_inner'</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">tofinset</span> <span class=\"n\">ret_vars</span><span class=\"o\">)))</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars_outer</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">CBlock</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Function definitions already parsed into FTContext.</span>\n<span class=\"bp\">|</span> <span class=\"n\">CVariableDeclarationAss</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">new_vars</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n      <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">tofinset</span> <span class=\"n\">new_vars</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"n\">CVariableDeclaration</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">new_vars</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n      <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">tofinset</span> <span class=\"n\">new_vars</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"n\">CAssignment</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">tofinset</span> <span class=\"n\">ids</span> <span class=\"bp\">⊆</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CIf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CExpressionStatement</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CSwitch</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CFor</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"n\">vars'</span> <span class=\"n\">vars''</span> <span class=\"n\">vars'''</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars'</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars'</span> <span class=\"n\">vars''</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars''</span> <span class=\"n\">vars'''</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CBreak</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CContinue</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CLeave</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ForCheckCond</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ForExecBody</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Skip</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm getting some rather confusing pattern matching behaviour that I do not know how to get around.<br>\nWhen I define the function <code>is_evaluated</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_evaluated</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TType</span><span class=\"o\">},</span> <span class=\"n\">Yulℂ</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EmpCBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>               <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NestedScope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">blklst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_evaluated</span> <span class=\"n\">blklst</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CLit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CId</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Scope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">cstmnt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">cstmnt</span> <span class=\"o\">:=</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nodup</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nodup</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">})</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Lean gives me the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">exhaustive</span> <span class=\"k\">match</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">cases</span> <span class=\"n\">are</span> <span class=\"n\">missing</span><span class=\"o\">:</span>\n<span class=\"n\">is_evaluated</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nodup</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nodup</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">})</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Note that this pattern match is _exactly_ the last pattern match of this function. I'm not sure how to approach fixing this any advice is much appreciated :)</p>",
        "id": 263667188,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638574442
    },
    {
        "content": "<p>argh... I already told you in another thread, programming language semantics is incredibly messy to deal with <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> hey but I have a trick!</p>",
        "id": 263671871,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638578532
    },
    {
        "content": "<p>enter tactic mode</p>",
        "id": 263671875,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638578538
    },
    {
        "content": "<p>instead of defining is_evaluated using pattern matching, try using := begin ... end instead</p>",
        "id": 263671896,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638578575
    },
    {
        "content": "<p>then, inside the begin ... end block, type <code>intros</code> then <code>cases</code> on a variable</p>",
        "id": 263671933,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638578621
    },
    {
        "content": "<p>that variable will split into multiple variants and you can deal with each of them individually</p>",
        "id": 263671943,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638578641
    },
    {
        "content": "<p>the equation compiler is sometimes weird lol</p>",
        "id": 263671983,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638578657
    },
    {
        "content": "<p>basically the rule of thumb is if the equation compiler does something weird, enter tactic mode, if tactic mode does something weird, use the equation compiler <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 263672049,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638578760
    },
    {
        "content": "<p><del>if you have nowhere to go, use recursors directly I guess but I've never had to do that</del></p>",
        "id": 263672653,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638579389
    },
    {
        "content": "<p>What does the error look like if you set <code>set_option pp.all true</code>?</p>",
        "id": 263694917,
        "sender_full_name": "Chris B",
        "timestamp": 1638609620
    },
    {
        "content": "<p>Thanks! I gave that a try and got:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">exhaustive</span> <span class=\"k\">match</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">cases</span> <span class=\"n\">are</span> <span class=\"n\">missing</span><span class=\"o\">:</span>\n<span class=\"n\">is_evaluated</span> <span class=\"o\">(</span><span class=\"n\">TType.CStatement</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Identifier</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Identifier</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>So I then tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_evaluated</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TType</span><span class=\"o\">},</span> <span class=\"n\">Yulℂ</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EmpCBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>               <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NestedScope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">blklst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_evaluated</span> <span class=\"n\">blklst</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CLit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CId</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Scope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">cstmnt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">cstmnt</span> <span class=\"o\">:=</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"n\">is_evaluated</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"n\">false</span>\n</code></pre></div>\n<p>But I then get <code>ill-formed match/equation expression</code> on the first line of the pattern match... However, I can't see why that is... (Note that I have insert <code>open TType</code> right after the definition of <code>TType</code>)</p>",
        "id": 263730063,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638650106
    },
    {
        "content": "<p>The last case shouldn't have <code>is_evaluated</code> on the left.</p>",
        "id": 263730976,
        "sender_full_name": "Chris B",
        "timestamp": 1638651466
    },
    {
        "content": "<p>Apologies! Sorry I copy and pasted the match suggested by the error message without paying enough attention!<br>\nNow</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_evaluated</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TType</span><span class=\"o\">},</span> <span class=\"n\">Yulℂ</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EmpCBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>               <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NestedScope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">blklst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_evaluated</span> <span class=\"n\">blklst</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CLit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CId</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Scope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">cstmnt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">cstmnt</span> <span class=\"o\">:=</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">exhaustive</span> <span class=\"k\">match</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">cases</span> <span class=\"n\">are</span> <span class=\"n\">missing</span><span class=\"o\">:</span>\n<span class=\"n\">is_evaluated</span> <span class=\"o\">(</span><span class=\"n\">TType.CStatement</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Identifier</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Identifier</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>while also reporting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">error</span><span class=\"o\">,</span> <span class=\"n\">equation</span> <span class=\"bp\">#</span><span class=\"mi\">10</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">used</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">compilation</span> <span class=\"o\">(</span><span class=\"n\">possible</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">delete</span> <span class=\"n\">equation</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>on the last line of the match, so same situation as before.</p>",
        "id": 263731796,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638652640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> I gave that a try, while it works, the generated equations are extremely large and quite difficult to use practically in proofs it seems... Thanks :)</p>",
        "id": 263731897,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638652701
    },
    {
        "content": "<p>It's hard to troubleshoot without the whole thing being available; assuming <code>Identifier</code> is actually being inferred in the one you're writing (you can try <code>@finset.mk.{0} Identifier _ _</code>), one other thing you can do it make the last arm a wildcard <code>_</code> to get it to typecheck and try to observe the definition to see how it's different from what you were trying to write.</p>",
        "id": 263732243,
        "sender_full_name": "Chris B",
        "timestamp": 1638653111
    },
    {
        "content": "<p>Apologies, <code>Identifier</code> is simply a <code>string</code> :)</p>\n<p>I tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Identifier</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>which resulted in the same situation. However, I was surprised that when I initially did:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Identifier</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Identifier</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I got the same errors as before, but also:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">pattern</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">Identifier'</span> <span class=\"n\">already</span> <span class=\"n\">appeared</span> <span class=\"k\">in</span> <span class=\"n\">this</span> <span class=\"n\">pattern</span>\n</code></pre></div>\n<p>Which indicates that Lean seems to be interpreting this as a binding rather than a pattern?</p>",
        "id": 263732736,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638653654
    },
    {
        "content": "<p>Is Identifier in a namespace?</p>",
        "id": 263732831,
        "sender_full_name": "Chris B",
        "timestamp": 1638653768
    },
    {
        "content": "<p>It is yes, it's used a number of times in this file, including in the definition of the <code>Yulℂ</code> type family :)</p>",
        "id": 263732869,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638653868
    },
    {
        "content": "<p>If the namespace isn't open in the segment in which you write is_evaluated (unsure based on the example) you'll have to address <code>Identifier</code> by its full name.</p>",
        "id": 263733041,
        "sender_full_name": "Chris B",
        "timestamp": 1638654038
    },
    {
        "content": "<p>This same issue occurs if I use the (equivalent) pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">string</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">string</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>and I imagine that <code>string</code> is in scope by default from core.</p>",
        "id": 263733300,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638654459
    },
    {
        "content": "<p>and, in fact, also occurs if I move the definition of Identifier into this file (so that it is definitely in the current namespace).</p>",
        "id": 263733367,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638654544
    },
    {
        "content": "<p>I took the pretty-printer's bait. You've stumped me; you might want to post the full code somewhere since it seems difficult to resolve by eyeballing it.</p>",
        "id": 263733830,
        "sender_full_name": "Chris B",
        "timestamp": 1638655125
    },
    {
        "content": "<p>So, the only other relevant code is the preamble of the file and the definition of <code>is_skip</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.vector</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.fin.ops</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.list.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">UInt256_max</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">256</span>\n<span class=\"kd\">def</span> <span class=\"n\">UInt256</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">UInt256_max</span>\n<span class=\"kd\">def</span> <span class=\"n\">Literal</span> <span class=\"o\">:=</span> <span class=\"n\">UInt256</span>\n<span class=\"kd\">def</span> <span class=\"n\">Identifier</span> <span class=\"o\">:=</span> <span class=\"n\">string</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_lt_uint256_max</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">UInt256_max</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">nat.eq_zero_or_pos</span> <span class=\"n\">UInt256_max</span><span class=\"o\">),</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">literal_zero</span> <span class=\"o\">:</span> <span class=\"n\">Literal</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fin.mk</span> <span class=\"mi\">0</span> <span class=\"n\">zero_lt_uint256_max</span>\n\n<span class=\"kd\">set_option</span> <span class=\"kd\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">100</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FTContext</span> <span class=\"o\">:=</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">emp</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">VarStore</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Identifier</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Literal</span>\n<span class=\"kd\">def</span> <span class=\"n\">empStore</span> <span class=\"o\">:</span> <span class=\"n\">VarStore</span> <span class=\"bp\">∅</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">i_in_emp</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">i_in_emp</span> <span class=\"o\">(</span><span class=\"n\">finset.not_mem_empty</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tofinset'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">finset</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">vec</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">hs_un</span> <span class=\"n\">vec</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.has_union</span> <span class=\"n\">α</span> <span class=\"n\">hs_un</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">union</span>\n  <span class=\"k\">in</span> <span class=\"n\">union</span> <span class=\"o\">(</span><span class=\"n\">singleton</span> <span class=\"o\">(</span><span class=\"n\">vec.head</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tofinset'</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"n\">hs_un</span> <span class=\"o\">(</span><span class=\"n\">vec.tail</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tofinset</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">α_eq_dec</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"n\">tofinset'</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">vector.of_fn</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">BlockList</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">CBlock</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">SwitchBody</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">CExpr</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">CStatement</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TType</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">:</span> <span class=\"n\">TType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">EmpCBlock</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">SeqCBlock</span>  <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars''</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars'</span> <span class=\"n\">vars''</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars''</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">NestedScope</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"n\">inner_vars</span> <span class=\"n\">inner_vars'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">VarStore</span> <span class=\"n\">inner_vars</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">inner_vars</span> <span class=\"bp\">∪</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inner_vars'</span> <span class=\"bp\">∪</span> <span class=\"n\">vars</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">CCase</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CDefault</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">CFunctionCall</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">f_id</span> <span class=\"o\">:</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"n\">f_id</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CId</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">id</span> <span class=\"bp\">∈</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CLit</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Literal</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Scope</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars_outer</span> <span class=\"n\">vars_inner</span> <span class=\"n\">vars_inner'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ret_vars</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">VarStore</span> <span class=\"o\">(</span><span class=\"n\">vars_inner</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">tofinset</span> <span class=\"n\">ret_vars</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">vars_inner</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">tofinset</span> <span class=\"n\">ret_vars</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">vars_inner'</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">tofinset</span> <span class=\"n\">ret_vars</span><span class=\"o\">)))</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars_outer</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">CBlock</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Function definitions already parsed into FTContext.</span>\n<span class=\"bp\">|</span> <span class=\"n\">CVariableDeclarationAss</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">new_vars</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n      <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">tofinset</span> <span class=\"n\">new_vars</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"n\">CVariableDeclaration</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">new_vars</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n      <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">tofinset</span> <span class=\"n\">new_vars</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"n\">CAssignment</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">tofinset</span> <span class=\"n\">ids</span> <span class=\"bp\">⊆</span> <span class=\"n\">vars</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CIf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CExpressionStatement</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CSwitch</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CFor</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"n\">vars'</span> <span class=\"n\">vars''</span> <span class=\"n\">vars'''</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars'</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars'</span> <span class=\"n\">vars''</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars''</span> <span class=\"n\">vars'''</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CBreak</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CContinue</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">CLeave</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ForCheckCond</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ForExecBody</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Skip</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- ForCheckCond, ForExecbody and Skip not in Yul specification, added for small step semantics.</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Yulℂ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_skip</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"n\">vars'</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">},</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars'</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Skip</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CVariableDeclarationAss</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CVariableDeclaration</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CAssignment</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CIf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CExpressionStatement</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CSwitch</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CFor</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CBreak</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CContinue</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CLeave</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ForCheckCond</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ForExecBody</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_evaluated</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TType</span><span class=\"o\">},</span> <span class=\"n\">Yulℂ</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EmpCBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>               <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NestedScope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">blklst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_evaluated</span> <span class=\"n\">blklst</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CLit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CId</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Scope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">cstmnt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">cstmnt</span> <span class=\"o\">:=</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Identifier</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Identifier</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 263734125,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638655360
    },
    {
        "content": "<p>I'm getting a segfault on the recursive case, but this doesn't show any errors for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_evaluated</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TType</span><span class=\"o\">},</span> <span class=\"n\">Yulℂ</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EmpCBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>               <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"c1\">--| (CBlock _ _) (NestedScope _ _ _ _ _ blklst) := is_evaluated blklst</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CLit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CId</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Scope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">cstmnt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">cstmnt</span> <span class=\"o\">:=</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n</code></pre></div>\n<p>The dependent match for the <code>NestedScope</code> case shouldn't work as written anyway since <code>blklst</code> isn't going to be the same as <code>t</code>. That said the segfault is a mystery. I'm on 3.24 which is old-ish, so it may be fixed in newer versions.</p>",
        "id": 263735747,
        "sender_full_name": "Chris B",
        "timestamp": 1638657557
    },
    {
        "content": "<p>I'm on 3.34 myself. Will try and see if this works with a more recent version of lean 3 :)</p>\n<p>I'm not sure I follow you? The recursive call to <code>is_evaluated</code> is well-typed. As you point out, lean will infer a different value of <code>t</code>, the implicit argument, but I don't see why that would be a problem?</p>",
        "id": 263736187,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638658209
    },
    {
        "content": "<p>The inference wasn't working in 3.24, I'm sure they just improved the dependent pattern matching in the interim. I'm trying it on 3.35.1 and getting the same error you are. I think this might just a bug in the dependent pattern matching that's somehow caused by the <code>NestedScope</code> case.</p>",
        "id": 263736660,
        "sender_full_name": "Chris B",
        "timestamp": 1638658865
    },
    {
        "content": "<p>You're right, it seems to be the case that this recursive case is causing the problem. I guess I can get around this by explicitly matching on the <code>EmpCBlock</code> constructor in the <code>CBlock</code> case. Will give it a try.</p>\n<p>Re: this potential bug, I will try and generate a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, would it be best to raise this as an issue on GitHub?</p>",
        "id": 263736771,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638659030
    },
    {
        "content": "<p>Hmmm, no success, I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_evaluated</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TType</span><span class=\"o\">},</span> <span class=\"n\">Yulℂ</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">EmpCBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>               <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NestedScope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">EmpCBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NestedScope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CLit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CId</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Scope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">cstmnt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">cstmnt</span> <span class=\"o\">:=</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n</code></pre></div>\n<p>and got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">trace.eqn_compiler.elim_match</span> <span class=\"n\">true'</span> <span class=\"n\">for</span> <span class=\"n\">additional</span> <span class=\"n\">details</span><span class=\"o\">)</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">cases</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">unsupported</span> <span class=\"n\">equality</span> <span class=\"n\">between</span> <span class=\"n\">type</span> <span class=\"n\">and</span> <span class=\"n\">constructor</span> <span class=\"n\">indices</span>\n<span class=\"o\">(</span><span class=\"n\">only</span> <span class=\"n\">equalities</span> <span class=\"n\">between</span> <span class=\"n\">constructors</span> <span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span> <span class=\"kd\">variables</span> <span class=\"n\">are</span> <span class=\"n\">supported</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"n\">cases</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">indices</span><span class=\"o\">):</span>\n<span class=\"n\">quot.lift</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n       <span class=\"n\">quotient.lift</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">l₁.union</span> <span class=\"n\">l₂</span><span class=\"o\">))</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">t_ᾰ_1.val</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span>\n    <span class=\"n\">ᾰ_inner_vars'.val</span> <span class=\"bp\">=</span>\n  <span class=\"n\">quot.lift</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span>\n       <span class=\"n\">quotient.lift</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Identifier</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">l₁.union</span> <span class=\"n\">l₂</span><span class=\"o\">))</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">t_ᾰ_1.val</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span>\n    <span class=\"n\">ᾰ_inner_vars.val</span>\n</code></pre></div>\n<p>I tried setting <code>set_option trace.eqn_compiler.elim_match true</code> and the resulting message is gigantic...</p>",
        "id": 263736934,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638659237
    },
    {
        "content": "<p>Yeah, the leanprover-community lean3 repo still handles issues and PRs.</p>",
        "id": 263736935,
        "sender_full_name": "Chris B",
        "timestamp": 1638659237
    },
    {
        "content": "<p>Super, will give that a try! :)</p>",
        "id": 263737000,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638659329
    },
    {
        "content": "<p>Was able to get it working by defining an auxiliary function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_empcblock</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">FTContext</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">vars</span> <span class=\"n\">vars'</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Identifier</span><span class=\"o\">},</span> <span class=\"n\">Yulℂ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"n\">vars'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">EmpCBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_evaluated</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TType</span><span class=\"o\">},</span> <span class=\"n\">Yulℂ</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">blklst</span> <span class=\"o\">:=</span> <span class=\"n\">is_empcblock</span> <span class=\"n\">blklst</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CBlock</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NestedScope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">blklst</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_empcblock</span> <span class=\"n\">blklst</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">SwitchBody</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CLit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CId</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Scope</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">cstmnt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CExpr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">cstmnt</span> <span class=\"o\">:=</span> <span class=\"n\">is_skip</span> <span class=\"n\">cstmnt</span>\n</code></pre></div>\n<p>Nonetheless, I will try and generate an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> as soon possible, as I see no reason the original should not have worked.</p>\n<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> Thanks so much for all your help :)</p>",
        "id": 263737248,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638659695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453259\">Julian Sutherland</span> <a href=\"#narrow/stream/113489-new-members/topic/Unexpected.20pattern.20matching.20behaviour/near/263731897\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> I gave that a try, while it works, the generated equations are extremely large and quite difficult to use practically in proofs it seems... Thanks :)</p>\n</blockquote>\n<p>for the record, there is a way to make the generated equations easier to deal with. you should prove lemmas that correspond to the cases that you normally state while pattern matching and to prove these lemmas, you can use squeeze_simp and possibly some induction and for the most part, lean can simplify the humongous expression on its own. take a look at this tiny example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum_of_1_to_n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">n_n</span> <span class=\"bp\">+</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">base_case</span> <span class=\"o\">:</span> <span class=\"n\">sum_of_1_to_n</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_of_1_to_n</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_zero</span><span class=\"o\">],</span> <span class=\"c1\">-- generated by squeeze_simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">induction_hypothesis</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sum_of_1_to_n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum_of_1_to_n</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_of_1_to_n</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_add_one</span><span class=\"o\">],</span> <span class=\"c1\">-- generated by squeeze_simp</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum_of_1_to_n</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_add_one</span><span class=\"o\">],</span> <span class=\"c1\">-- generated by squeeze_simp</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>squeeze_simp is quite helpful actually</p>",
        "id": 263748203,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638677430
    },
    {
        "content": "<p>and here's a nontrivial example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">word_size_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"n\">i32</span>\n<span class=\"bp\">|</span> <span class=\"n\">i64</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">integer_expression_t</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">coerce</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"n\">word_size'</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">load</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size_t.i32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">subtract</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">multiply</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">divide</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">mod</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">bitwise_and</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">bitwise_or</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">bitwise_xor</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n<span class=\"bp\">|</span> <span class=\"n\">bitwise_not</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evaluate</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span> <span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"o\">},</span> <span class=\"n\">integer_expression_t</span> <span class=\"n\">word_size</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih_a</span> <span class=\"bp\">+</span> <span class=\"n\">x_ih_b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih_a</span> <span class=\"bp\">+</span> <span class=\"n\">x_ih_b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih_a</span> <span class=\"bp\">+</span> <span class=\"n\">x_ih_b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih_a</span> <span class=\"bp\">+</span> <span class=\"n\">x_ih_b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih_a</span> <span class=\"bp\">+</span> <span class=\"n\">x_ih_b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih_a</span> <span class=\"bp\">+</span> <span class=\"n\">x_ih_b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih_a</span> <span class=\"bp\">+</span> <span class=\"n\">x_ih_b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih_a</span> <span class=\"bp\">+</span> <span class=\"n\">x_ih_b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x_ih</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.const</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">word_size'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.coerce</span> <span class=\"n\">word_size</span> <span class=\"n\">word_size'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.load</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.add</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">evaluate</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.subtract</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">evaluate</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a6</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.multiply</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">evaluate</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a7</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.divide</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">evaluate</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a8</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.mod</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">evaluate</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a9</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.bitwise_and</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">evaluate</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a10</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.bitwise_or</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">evaluate</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a11</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.bitwise_xor</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">evaluate</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a12</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integer_expression_t.bitwise_not</span> <span class=\"n\">word_size</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">evaluate</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">evaluate</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263748879,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638678637
    },
    {
        "content": "<p>you should do this whenever the equation compiler acts up</p>",
        "id": 263748900,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638678705
    }
]