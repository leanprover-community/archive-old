[
    {
        "content": "<p>I am trying to prove <code>{x | A x} = compl {x | ¬A x}</code> without matlib (core library only). However I am not capable of using <code>mem_set_of_eq</code> correctly in conjunction with ¬A and the rewrite tactic. I appreciate any help.</p>\n<p>Since the definitions of <code>compl</code> et al have been removed from the core library in the <a href=\"https://github.com/leanprover-community/lean/commit/ab343ab4edc491dbd02bed7b70295a0bb88be06f\">last commit</a> (I don't know, if by accident or intent), I have to implement my own. Also, I like to implement the extensionality axiom by myself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">constant</span> <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Pred</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Set</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Pred</span>\n<span class=\"kd\">variables</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Set</span>\n<span class=\"kd\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">not.not_iff</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">A</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">set_eq.intro</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">set_eq.elim</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compl</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t₁</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Pred</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">},</span>\n  <span class=\"k\">show</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span> <span class=\"n\">set_eq.intro</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n\n  <span class=\"k\">show</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n      <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↔</span>   <span class=\"n\">A</span> <span class=\"n\">x</span>                       <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬¬</span><span class=\"n\">A</span> <span class=\"n\">x</span>                       <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not.not_iff</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">¬¬</span><span class=\"n\">A</span> <span class=\"n\">z</span><span class=\"o\">}</span>             <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">})}</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←@</span><span class=\"n\">mem_set_of_eq</span> <span class=\"bp\">Ω</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"bp\">∘</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"c1\">-- this does not work!</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"bp\">∉</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}}</span>    <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span>        <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I have no idea, how to correctly call <code>mem_set_of_eq</code>. I tried<br>\n<code>rw ←@mem_set_of_eq Ω _ (¬A)</code><br>\n<code>rw ←@mem_set_of_eq Ω _ (λ x : Ω, ¬A x)</code><br>\n<code>rw ←@mem_set_of_eq Ω _ (not ∘ A)</code><br>\nand all different kinds of other approaches.<br>\n<code>(not ∘ A)</code> at least has the correct type. But it says that it cannot find an instance of the pattern <code>(not ∘ A) ?m_1</code>.</p>\n<p>Any help is appreciated.</p>",
        "id": 297182234,
        "sender_full_name": "Michael Palm",
        "timestamp": 1662365265
    },
    {
        "content": "<p><code>by refl</code> works fine.</p>",
        "id": 297183064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662365657
    },
    {
        "content": "<p><code>rw</code> works up to syntactic equality not definitional equality, so it can't see through things like <code>∘</code>.</p>",
        "id": 297183295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662365749
    },
    {
        "content": "<p>Many other tactics work up to definitional equality (for example <code>example : Pred = Set := rfl</code> works fine) but for rewrite you need a syntactic match.</p>",
        "id": 297183457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662365816
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n      <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↔</span>   <span class=\"n\">A</span> <span class=\"n\">x</span>                       <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬¬</span><span class=\"n\">A</span> <span class=\"n\">x</span>                       <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not.not_iff</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span>        <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 297183630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662365889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thank you for your answer and the great content you provide. I have read your explanations on the different kinds of equality <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_B/equality.html\">here</a>. However I would like to explicitly state all the syntactic transformations which are necessary in the proof. How can I do that?<br>\nUsing <code>refl</code> hides the necessary syntactic transformations.</p>",
        "id": 297215567,
        "sender_full_name": "Michael Palm",
        "timestamp": 1662379768
    },
    {
        "content": "<p>You can add a lemma (whose proof is <code>rfl</code>) saying <code>x∈{y | A y} ↔   A x</code>, and then rewrite that.</p>",
        "id": 297215929,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662379913
    },
    {
        "content": "<p>In mathlib there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of\">docs#set.mem_set_of</a></p>",
        "id": 297216044,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662379946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  I am trying to use <code>mem_set_of_eq</code> from the <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/data/set.lean\">core lib</a> (Line 24), which seems to be exactly what you propose? But I keep failing using it.</p>",
        "id": 297217120,
        "sender_full_name": "Michael Palm",
        "timestamp": 1662380316
    },
    {
        "content": "<p>Just a tip: you can write <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of_eq\">docs#set.mem_set_of_eq</a> (docs # set.mem_set_of_eq without spaces) and you get a link to the lemma you want.</p>",
        "id": 297217235,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662380365
    },
    {
        "content": "<p>In <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of_eq\">docs#set.mem_set_of_eq</a> there is <code>=</code> instead of <code>↔</code>, maybe that's the problem.</p>",
        "id": 297217528,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662380481
    },
    {
        "content": "<p>You can try to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq.to_iff\">docs#eq.to_iff</a>, that is also in core.</p>",
        "id": 297218109,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662380700
    },
    {
        "content": "<p>Here's one way to do it with conv:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n\n<span class=\"kd\">constant</span> <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Pred</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Set</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Pred</span>\n<span class=\"kd\">variables</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Set</span>\n<span class=\"kd\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">not.not_iff</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">A</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">set_eq.intro</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">set_eq.elim</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compl</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t₁</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Pred</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">},</span>\n  <span class=\"k\">show</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span> <span class=\"n\">set_eq.intro</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n\n  <span class=\"k\">show</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n      <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">↔</span>   <span class=\"n\">A</span> <span class=\"n\">x</span>                       <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬¬</span><span class=\"n\">A</span> <span class=\"n\">x</span>                       <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">not.not_iff</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">¬¬</span><span class=\"n\">A</span> <span class=\"n\">z</span><span class=\"o\">}</span>             <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">})}</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_set_of_eq</span> <span class=\"o\">}</span> <span class=\"c1\">-- this does not work!</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">}</span>        <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 297218188,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662380728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> This is nice. Thank you. This is very helpful. I have not known <code>conv</code> before. But why is that necessary? What is the <code>p : Ω → Prop</code> that <code>mem_set_of_eq</code> has inferred here?  <code>¬A</code> and <code>¬A _</code> obviously do not work.</p>",
        "id": 297221889,
        "sender_full_name": "Michael Palm",
        "timestamp": 1662382356
    },
    {
        "content": "<p>The issue isn't that rw isn't inferring the right argument (as you saw you could force the arguments with the @ symbol), it is because rewrite doesn't work \"under binders\", for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"c1\">--fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>here there are a few ways around the issue</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"k\">#print</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 297222916,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662382803
    },
    {
        "content": "<p>Using simp with the right arguments would probably also work in your case too</p>",
        "id": 297223029,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662382846
    },
    {
        "content": "<p>We also have a nice doc page on conv mode if you havent seen it already: <a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>",
        "id": 297223133,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1662382901
    },
    {
        "content": "<p>Thanks! That's exactly the piece of information I needed!</p>",
        "id": 297223343,
        "sender_full_name": "Michael Palm",
        "timestamp": 1662382983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"528193\">@Michael Palm</span> not sure if someone mentioned this already but you can also use <code>simp_rw</code>, which acts like <code>rw</code> except it <em>can</em> work under binders</p>",
        "id": 297276368,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1662410588
    },
    {
        "content": "<p>Hello! I have an Apple M1 laptop and I am trying to install LEAN following the instructions of <a href=\"https://leanprover-community.github.io/install/macos.html\">https://leanprover-community.github.io/install/macos.html</a> </p>\n<p>Unfortunately, I made the mistake of  first trying the Intel instructions <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <br>\nWhen I tryed to follow the M1 instructions it gets stucked at point 3.   Can someone help?</p>\n<p>More info, following the instructions just mean copy-paste in the terminal window all commands from the instructions. I do not know what they actually mean. More concretely:</p>\n<p>1.1) I copy-paste at the terminal \"xcode-select --install\" at terminal. It says \"error: tools are already installed\"<br>\n1.2) I copy-paste at the terminal \"softwareupdate --install-rosetta\", agree, and then the console says \"install of Rosetta 2 finished succesfully\"<br>\n2.1) I copy-paste at the terminal \"arch -x86_64 zsh\", it doesn't say anything at all<br>\n3.1) I copy-paste at the terminal \" /bin/bash -c \"$(curl -fsSL <a href=\"https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh\">https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh</a>)\" \"<br>\n3.1.1) I introduce at the terminal my administrator password. The terminal says \"this script will install blablabla... please RETURN/ENTER to continuo or any other key to abort\"<br>\n3.1.2) I press RETURN<br>\n3.1.3) The terminal does its thing for a while (says \"Downloading and installing Homebrew... blablabla...\"  and then gets stucked while showing<br>\n\"error: Not a valid ref: refs/remotes/origin/master<br>\nfatal: ambiguous argument 'refs/remotes/origin/master': unknown revision or path not in the working tree.<br>\nUse '--' to separate paths from revisions, like this:<br>\n'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'<br>\n\"</p>\n<p>Any help?</p>",
        "id": 297342748,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1662460863
    },
    {
        "content": "<p>Wait, the problem was myself for not waiting enough. It now says \"Installation successful\" </p>\n<p>4.1) I copy paste at the terminal <br>\n\" /usr/local/bin/brew install elan-init mathlibtools<br>\nelan toolchain install stable <br>\nelan default stable  \"<br>\nthe terminal answers <br>\n\"Running <code>brew update --auto-update</code>...<br>\nfatal: Could not resolve HEAD to a revision<br>\nWarning: No available formula with the name \"elan-init\".<br>\n==&gt; Searching for similarly named formulae...<br>\nError: No similarly named formulae found.<br>\n==&gt; Searching for a previously deleted formula (in the last month)...<br>\nError: No previously deleted formula found.<br>\n==&gt; Searching taps on GitHub...<br>\nError: No formulae found in taps.<br>\nzsh: command not found: elan<br>\nzsh: command not found: elan<br>\n\"<br>\n4.2) I copy paste only the first line. It returns<br>\n\"Warning: No available formula with the name \"elan-init\".<br>\n==&gt; Searching for similarly named formulae...<br>\nError: No similarly named formulae found.<br>\n==&gt; Searching for a previously deleted formula (in the last month)...<br>\nError: No previously deleted formula found.<br>\n==&gt; Searching taps on GitHub...<br>\nError: No formulae found in taps.\"</p>\n<p>4.2) I copy paste the second line \"elan toolchain install stable\". The terminal does nothing</p>\n<p>4.3) I copy paste the third line \"elan default stable \" it returns, \"zsh: command not found: elan\"</p>\n<p>I think this is broken now. In any case I continue</p>\n<p>5) I copy paste \"brew install --cask visual-studio-code &amp;&amp; code --install-extension jroesch.lean\". It returns</p>\n<p>\"==&gt; Downloading <a href=\"https://update.code.visualstudio.com/1.71.0/darwin/stable\">https://update.code.visualstudio.com/1.71.0/darwin/stable</a><br>\n==&gt; Downloading from <a href=\"https://az764295.vo.msecnd.net/stable/784b0177c56c607789f96\">https://az764295.vo.msecnd.net/stable/784b0177c56c607789f96</a><br>\n######################################################################## 100.0%<br>\n==&gt; Installing Cask visual-studio-code<br>\n==&gt; Moving App 'Visual Studio <a href=\"http://Code.app\">Code.app</a>' to '/Applications/Visual Studio <a href=\"http://Code.app\">Code.app</a><br>\n==&gt; Linking Binary 'code' to '/usr/local/bin/code'<br>\n<span aria-label=\"beer\" class=\"emoji emoji-1f37a\" role=\"img\" title=\"beer\">:beer:</span>  visual-studio-code was successfully installed!<br>\nInstalling extensions...<br>\nInstalling extension 'jroesch.lean'...<br>\n(node:18998) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.<br>\n(Use <code>Electron --trace-deprecation ...</code> to show where the warning was created)<br>\nExtension 'jroesch.lean' v0.16.54 was successfully installed.\"</p>\n<p>Am I finished? Is it correctly installed? <br>\nI don't think so. I dont find LEAN anywhere in my laptop</p>",
        "id": 297344240,
        "sender_full_name": "Alberto Navarro Garmendia",
        "timestamp": 1662461637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20mem_set_of_eq.20with.20.20.C2.ACA/near/297276368\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"528193\">Michael Palm</span> not sure if someone mentioned this already but you can also use <code>simp_rw</code>, which acts like <code>rw</code> except it <em>can</em> work under binders</p>\n</blockquote>\n<p>Though <code>simp_rw</code> has the occasionally undesirable (though mostly desirable) behaviour that it will repeat things until they stabilize, which <code>rw</code> won't do. Which occasionally leaves one in an odd position.</p>",
        "id": 297395949,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662474046
    },
    {
        "content": "<p><code>simp only [lemma] {single_pass := tt}</code> avoids that</p>",
        "id": 297523186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662528209
    },
    {
        "content": "<p>Oh that's cool, didn't know that was a thing.</p>",
        "id": 299187714,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663342889
    },
    {
        "content": "<p>What is the difference between <code>simp_rw</code> and <code>simp only</code>?</p>",
        "id": 299187800,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663342918
    },
    {
        "content": "<p>nobody knows :-) I think sometimes one works and the other doesn't? They both in theory do the same thing. Chris Hughes once told me that he didn't understand why <code>simp_rw</code> was even added to mathlib, given that <code>simp only</code> was already there.</p>",
        "id": 299220234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663353431
    },
    {
        "content": "<p>The former is implemented in terms of the latter</p>",
        "id": 299243889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663363735
    },
    {
        "content": "<p>Weird... the docs say:</p>\n<blockquote>\n<p>For example, neither <code>simp</code> nor <code>rw</code> can solve the following, but <code>simp_rw</code> can:</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">set.image_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">set.subset_def</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But if you replace <code>simp_rw</code> with <code>simp</code>, it still works fine. Maybe <code>simp</code> used to be weaker?</p>",
        "id": 299254079,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663369737
    },
    {
        "content": "<p>well, this is the PR where it was added (and it has a Zulip link for context), so if anyone's actually curious, the answer is here: <a href=\"https://github.com/leanprover-community/mathlib/pull/1900\">https://github.com/leanprover-community/mathlib/pull/1900</a></p>",
        "id": 299254280,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663369892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you were there when <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> came up with it! \"nobody knows :-)\" lol</p>",
        "id": 299254521,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663370048
    },
    {
        "content": "<p>in your defense it was 2.5 years ago</p>",
        "id": 299254689,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663370172
    },
    {
        "content": "<p><code>simp_rw</code> actually has the advantage that it does its re-writes in order and you can click midway through to see how far it gets (like <code>rw</code>). That is something I do find useful sometimes, to work out how a simplification is happening.</p>",
        "id": 299527967,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663578730
    }
]