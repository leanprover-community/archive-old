[
    {
        "content": "<p>I am having trouble in unravelling definitions. The definition of val_ring K is { x : K | 0 ≤ v x } . I want to show</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">α</span>\n</code></pre></div>\n\n\n<p>How do I show this? Unfold does not seem to work. <br>\nAny help is appreciated. Thank you!</p>",
        "id": 202212063,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593304654
    },
    {
        "content": "<p>Does <code>\\alpha.2</code> work?</p>",
        "id": 202212225,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593304975
    },
    {
        "content": "<p>No..</p>",
        "id": 202212279,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593305056
    },
    {
        "content": "<p>it should</p>",
        "id": 202212395,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593305279
    },
    {
        "content": "<p>Is it a problem with the coersion on alpha? Did you define the restriction of v to the valuation ring?</p>",
        "id": 202212448,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593305369
    },
    {
        "content": "<p>What is the error?</p>",
        "id": 202212450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593305378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Definitions/near/202212448\">said</a>:</p>\n<blockquote>\n<p>Is it a problem with the coersion on alpha? Did you define the restriction of v to the valuation ring?</p>\n</blockquote>\n<p>No, I did not</p>",
        "id": 202212452,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593305396
    },
    {
        "content": "<p>Can you share an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 202212453,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593305398
    },
    {
        "content": "<p>Sorry I'm wrong. I guess the coersion goes back to K so it should work</p>",
        "id": 202212503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593305418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Definitions/near/202212450\">said</a>:</p>\n<blockquote>\n<p>What is the error?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kn\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kn\">constant</span>\n  <span class=\"err\">⁇</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 202212514,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593305454
    },
    {
        "content": "<p>I'm skeptical.</p>",
        "id": 202212521,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593305494
    },
    {
        "content": "<p>Does <code>change _ ≤ v \\alpha.1</code> change the goal?</p>",
        "id": 202212618,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593305649
    },
    {
        "content": "<p>Typo sorry</p>",
        "id": 202212621,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593305659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Definitions/near/202212453\">said</a>:</p>\n<blockquote>\n<p>Can you share an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">val_ring</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">unit_iff_val_zero</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">is_unit</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">rintros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_unit_iff_exists_inv</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">((</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">val_one_is_zero</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_eq_zero_iff&#39;</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">f_left</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">discrete_valuation_field</span>\n</code></pre></div>",
        "id": 202212627,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593305683
    },
    {
        "content": "<p>I am trying to prove the second to last sorry.</p>",
        "id": 202212639,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593305717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Definitions/near/202212618\">said</a>:</p>\n<blockquote>\n<p>Does <code>change _ ≤ v \\alpha.1</code> change the goal?</p>\n</blockquote>\n<p>It does, yes.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">α</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</code></pre></div>",
        "id": 202212694,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593305827
    },
    {
        "content": "<p>I get various other errors. For example there is a <code>,</code> missing.</p>",
        "id": 202212695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593305838
    },
    {
        "content": "<p>Ok so exact alpha.2 should work</p>",
        "id": 202212698,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593305846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Definitions/near/202212698\">said</a>:</p>\n<blockquote>\n<p>Ok so exact alpha.2 should work</p>\n</blockquote>\n<p>Yes it does!</p>",
        "id": 202212744,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593305920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Definitions/near/202212695\">said</a>:</p>\n<blockquote>\n<p>I get various other errors. For example there is a <code>,</code> missing.</p>\n</blockquote>\n<p>Apologies, must have been a typing mistake.</p>",
        "id": 202212751,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593305956
    },
    {
        "content": "<p>Then it would have worked originally too (before <code>change</code> or anything).</p>",
        "id": 202212800,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593306017
    },
    {
        "content": "<p>I got a little confused, I did not know I have to put exact. Apologies.</p>",
        "id": 202212815,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593306082
    },
    {
        "content": "<p>What does \\alpha.2 do?</p>",
        "id": 202212968,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593306366
    },
    {
        "content": "<p>Alpha is in the subtype associated to the set, so alpha.2 is the proof that alpha.1 is in the set</p>",
        "id": 202212973,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593306418
    },
    {
        "content": "<p>The coersion on alpha in your goal was the map sending alpha to alpha.1, so the goal was exactly alpha.2</p>",
        "id": 202212989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593306478
    },
    {
        "content": "<p>Oh alright, that makes sense. Thank you!</p>",
        "id": 202213098,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593306609
    },
    {
        "content": "<p>No problem. In case it comes up later, it's worthwhile to mention that another name for alpha.1 is alpha.val and another name for alpha.2 is alpha.prop. I would take a look at how subtype is defined.</p>",
        "id": 202213869,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593308013
    },
    {
        "content": "<p>Sorry for the possible silly question. In Haskell, definitions using pattern matching can have <strong>guards</strong> and the <strong>where</strong> clause for local declarations. Does Lean have something similar? If not, do we lose anything or these can be somehow emulated without any loss of expressivity?</p>",
        "id": 205022738,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1595713309
    },
    {
        "content": "<p>No, lean doesn't have guards. You can mimic them using <code>if then else</code></p>",
        "id": 205023165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595714073
    },
    {
        "content": "<p>Even if the equation compiler supported guards they would have to be compiled to <code>if then else</code> anyway</p>",
        "id": 205023185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595714118
    },
    {
        "content": "<p>Thanks. I am assuming that local declarations are not available too, right? But this is clearly a convenience.</p>",
        "id": 205023314,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1595714324
    },
    {
        "content": "<p>That's <code>let</code>?</p>",
        "id": 205023338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595714380
    },
    {
        "content": "<p>lean doesn't have <code>where</code> aka <code>let</code> written backwards</p>",
        "id": 205023409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595714429
    },
    {
        "content": "<p>Ah, yes. I just didn't figure out how the syntax of let could be used in combination with the pattern matching during function definitions. I will try again. thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> !</p>",
        "id": 205023614,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1595714767
    }
]