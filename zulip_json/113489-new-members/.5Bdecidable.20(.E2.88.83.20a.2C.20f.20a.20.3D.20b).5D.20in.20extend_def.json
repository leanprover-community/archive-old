[
    {
        "content": "<p>I'm struggling to understand this pull request from a few months ago: <a href=\"https://github.com/leanprover-community/mathlib/pull/6488\">https://github.com/leanprover-community/mathlib/pull/6488</a>, which adds a <code>[decidable (∃ a, f a = b)]</code> parameter to the <code>extend_def</code> lemma.</p>\n<p>Why is that desirable? Doesn't that make the lemma more difficult to use, because now you might need to additionally come up with the typeclass instance?</p>",
        "id": 247256269,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627330769
    },
    {
        "content": "<p>No, because type class inference will find the instance for you</p>",
        "id": 247256537,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1627330910
    },
    {
        "content": "<p>what do we gain by adding the parameter?</p>",
        "id": 247256977,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627331117
    },
    {
        "content": "<p>You can rw backwards, regardless of what instance allowed you to even state the if then else</p>",
        "id": 247257161,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627331209
    },
    {
        "content": "<p>(I'm asking because I'm trying to translate this lemma in to Lean 4, and without that parameter it's a lot easier to prove.)</p>",
        "id": 247257193,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627331225
    },
    {
        "content": "<p>How does inclusion of an additional hypothesis make it harder to prove?</p>",
        "id": 247257335,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627331304
    },
    {
        "content": "<p>It's <code>rfl</code> without that hypothesis.</p>",
        "id": 247257415,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627331351
    },
    {
        "content": "<p>And I have been unable to find a proof yet with that hypothesis.</p>",
        "id": 247257434,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627331363
    },
    {
        "content": "<p>hm... maybe I should try to control which <code>Decidable</code> instance <code>ite</code> is using...</p>",
        "id": 247257940,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627331640
    },
    {
        "content": "<p>What's the error you get when your proof term is \"by exact rfl\"?</p>",
        "id": 247258505,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627331922
    },
    {
        "content": "<p>does <code>convert</code> exist for lean4?</p>",
        "id": 247258758,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627332052
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">extend</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">e'</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">extend</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">e'</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">extend</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">e'</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">e'</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 247258762,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627332056
    },
    {
        "content": "<p>The point is that before that change, that was a lemma about <code>@ite (classical.decidable _)</code>, but with it it's now a lemma about all <code>@ite</code>s</p>",
        "id": 247258949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627332147
    },
    {
        "content": "<p>I don't think there's a <code>convert</code> yet.</p>",
        "id": 247258951,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627332149
    },
    {
        "content": "<p>Is there a congr?</p>",
        "id": 247258966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627332156
    },
    {
        "content": "<p>The core of the lean 3 proof is the <code>subsingleton (decidable p)</code> instance, which congr know how to apply</p>",
        "id": 247259023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627332186
    },
    {
        "content": "<p>I don't think there is a <code>congr</code> tactic yet either.</p>",
        "id": 247259024,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627332187
    },
    {
        "content": "<p>Does lean 4 know that all <code>decidable p</code> instances are equal, which is maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable.subsingleton\">docs#decidable.subsingleton</a> in lean 3</p>",
        "id": 247259147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627332240
    },
    {
        "content": "<blockquote>\n<p>The point is that before that change, that was a lemma about <code>@ite (classical.decidable _)</code>, but with it it's now a lemma about all <code>@ite</code>s </p>\n</blockquote>\n<p>Should I expect this distinction to show up in the type signature when I do <code>#print extend_def</code>?</p>",
        "id": 247259262,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627332281
    },
    {
        "content": "<p>Only with <code>set_option pp.implicit true</code> or whatever the lean4 spelling is</p>",
        "id": 247259302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627332300
    },
    {
        "content": "<p>classical.decidable shouldn't ever appear in a lemma statement (unless it's an intermediate step to stating the better version of the lemma)</p>",
        "id": 247259349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627332319
    },
    {
        "content": "<p>I'm trying to understand it in in Lean 3 too, so right now I'm doing <code>#print</code> there.</p>",
        "id": 247259368,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627332327
    },
    {
        "content": "<p>Updated with the full lean3 command</p>",
        "id": 247259520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627332399
    },
    {
        "content": "<p>ah, indeed I do see the difference (other than just the <code>[decidable (∃ a, f a = b)]</code> hypothesis) when I set <code>pp.all</code> (or <code>pp.implicit</code>) to true.</p>",
        "id": 247259705,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627332487
    },
    {
        "content": "<p>that's sneaky :)</p>",
        "id": 247259712,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627332494
    },
    {
        "content": "<p>So apparently <code>classical.prop_decidable</code> does some kind of implicit coercion.</p>",
        "id": 247259850,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627332591
    },
    {
        "content": "<p>or I suppose this is exactly what the </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"n\">classical.prop_decidable</span>\n</code></pre></div>\n<p>line does?</p>",
        "id": 247260313,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627332807
    },
    {
        "content": "<p>implicitly wraps all propositions in <code>classical.prop_decidable</code>?</p>",
        "id": 247260347,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627332824
    },
    {
        "content": "<p>i'm confused what you mean by implicit coercion; <code>ite</code> requires decidability of the prop (as an instance), <code>classical.prop_decidable</code> gives that instance. the change was done so you could reverse-rw the <code>ite</code> if your ∃ is decidable, because that isn't the definition</p>",
        "id": 247263704,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627333837
    },
    {
        "content": "<p>By \"implicit coercion\" I mean that without the new hypothesis, the return type looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extend</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">e'</span> <span class=\"n\">b</span> <span class=\"bp\">=</span>\n    <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">e'</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but is secretly actually</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">extend</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">e'</span> <span class=\"n\">b</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">dite</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical.prop_decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">classical.some</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">e'</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 247265514,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627334620
    },
    {
        "content": "<p>ah, I see it's just adding <code>@</code> everywhere</p>",
        "id": 247265622,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627334660
    },
    {
        "content": "<p>ok, I think understand better now</p>",
        "id": 247265651,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627334673
    },
    {
        "content": "<p>there's no new concept I need to learn here. This is just about choosing which typeclass instance gets used.</p>",
        "id": 247265720,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627334705
    },
    {
        "content": "<p>I was worried about some kind of extra implicit magic inserting constuctors/function calls, but I see now that it all fits within typeclass resolution.</p>",
        "id": 247265870,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627334788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.5Bdecidable.20.28.E2.88.83.20a.2C.20f.20a.20.3D.20b.29.5D.20in.20extend_def/near/247259147\">said</a>:</p>\n<blockquote>\n<p>Does lean 4 know that all <code>decidable p</code> instances are equal, which is maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable.subsingleton\">docs#decidable.subsingleton</a> in lean 3</p>\n</blockquote>\n<p>aha! This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">extend_def</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">extend</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">e'</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">e'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">hd</span><span class=\"o\">]</span>\n     <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 247281433,
        "sender_full_name": "David Renshaw",
        "timestamp": 1627346969
    }
]