[
    {
        "content": "<p>Hello again ! Yesterday I discovered the \"Formalizing 100 theorem\" challenge. Browsing the list, I was surprised to see that no proof was made in Lean of the divergence of the Harmonic Series. I'm glad to say it is now done ! The first two lemmas have been stated and proved by <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> in #new_members &gt; sequence_limit_lemmas and I will PR-them to Mathlib as he thinks they should be there. Let me know if you have any ideas about making this shorter, other ways to approach the problem, etc...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span> <span class=\"n\">set</span> <span class=\"n\">topological_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"c1\">-- These two lemmas have been stated and proved by Patrick Massot, and they should soon be PR-ed to mahlib</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_supr_of_bdd</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbdd</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"err\">$</span> <span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"err\">‚®Ü</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tendsto_order</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eventually_at_top</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">exists_lt_of_lt_csupr</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hN</span> <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">univ_mem_sets&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_csupr</span> <span class=\"n\">hbdd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_of_monotone</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span><span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">tendsto_at_top</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_at_top_sets</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_bdd_above_iff</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">hN</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">‚ü®</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hN</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- Now the theorem in itself</span>\n\n<span class=\"n\">def</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">harmonic_not_tendsto_real</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"o\">(</span><span class=\"n\">tendsto</span> <span class=\"n\">harmonic</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">‚â§</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span> <span class=\"n\">le_sub_iff_add_le</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_add_sum_Ico</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n        <span class=\"n\">change</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">‚â§</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)),</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n                <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n                    <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">div_eq_mul_one_div</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span>\n                    <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">div_mul_eq_div_mul_one_div</span><span class=\"o\">,</span> <span class=\"n\">div_self</span><span class=\"o\">],</span>\n                <span class=\"n\">simp</span><span class=\"o\">,</span>\n                <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n            <span class=\"o\">}),</span>\n            <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_le_sum</span><span class=\"o\">,</span>\n            <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">one_div_le_one_div</span><span class=\"o\">,</span>\n            <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n            <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n            <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">rwa</span> <span class=\"n\">add_le_add_iff_left</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">ge_of_tendsto</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">harmonic</span> <span class=\"err\">‚àò</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">at_top</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">at_top_ne_bot</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"bp\">-</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n        <span class=\"n\">apply</span> <span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n            <span class=\"n\">apply</span> <span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">tendsto_at_top</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n            <span class=\"n\">intros</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n            <span class=\"n\">use</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n            <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">linarith</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">eventually_at_top</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n        <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)),</span>\n        <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">harmonic_tendsto_at_top</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">harmonic</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">harmonic</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">harmonic</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_le_sum_of_subset_of_nonneg</span><span class=\"o\">,</span>\n        <span class=\"n\">rwa</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range_subset</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">one_div_pos_of_pos</span><span class=\"o\">,</span>\n        <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">harmonic</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n        <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">harmonic_not_tendsto_real</span> <span class=\"o\">(</span><span class=\"n\">supr</span> <span class=\"n\">harmonic</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tendsto_at_top_supr_of_bdd</span> <span class=\"n\">this</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span> <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">tendsto_at_top_of_monotone</span> <span class=\"n\">this</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 201651652,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592855100
    },
    {
        "content": "<p>I think all of this should go into mathlib</p>",
        "id": 201651855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592855182
    },
    {
        "content": "<p>Nice work!</p>",
        "id": 201651883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592855193
    },
    {
        "content": "<p>Quick feedback (for mathlib submission):</p>\n<ul>\n<li>indent by 2 spaces</li>\n<li>closing brace <code>}</code> on same line as last tactic in the block</li>\n<li>don't use <code>simp</code> halfway a proof. Use <code>squeeze_simp</code> to get a <code>simp only</code> version</li>\n<li>if you <code>open_locale big_operators</code> then you can write <code>\\sum i in finset.range n, blabla i</code> for nice notation.</li>\n</ul>",
        "id": 201652128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592855324
    },
    {
        "content": "<p>Thanks ! I can't find a situation where it would help proving something else though, so should it really go into mathlib ?</p>",
        "id": 201652191,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592855366
    },
    {
        "content": "<p>I feel you can get a slightly slicker proof, avoiding all arguments by contradiction, by noting that <code>harmonic (2^n) \\geq n/2</code> (you have proved this) and therefore <code>harmonic (2^n)</code> tends to infinity (as it is bounded below by a sequence tending to infinity -- I hope we have this!). And then, for a monotone sequence, having a subsequence tending to infinity implies convergence to infinity (I hope we have this also). But what you did is great!</p>",
        "id": 201652246,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592855401
    },
    {
        "content": "<p>This is so important that it should definitely go into mathlib!</p>",
        "id": 201652371,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592855460
    },
    {
        "content": "<p>Oh yeah using 2^n is smart, I'm going to try it. Thanks for the feedback !</p>",
        "id": 201652802,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592855702
    },
    {
        "content": "<p>Why don't you use <code>begin</code> and <code>end</code>?</p>",
        "id": 201652988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592855820
    },
    {
        "content": "<p>You can <code>open finset</code> and use stuff like <code>(Ico n (2*n)).sum ...</code>.</p>",
        "id": 201653023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592855846
    },
    {
        "content": "<p>or <code>def harmonic (n : ‚Ñï) : ‚Ñù := (range n).sum (Œª k, 1/(k + 1 : ‚Ñù))</code></p>",
        "id": 201653065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592855874
    },
    {
        "content": "<p>But using the <code>big_operators</code> sum notation, of course :)</p>",
        "id": 201653148,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592855896
    },
    {
        "content": "<p>As explained in <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201652128\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201652128</a></p>",
        "id": 201653198,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592855928
    },
    {
        "content": "<p>Yes, even better.</p>",
        "id": 201653200,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592855931
    },
    {
        "content": "<p>Oh, I missed Johan's message.</p>",
        "id": 201653234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592855948
    },
    {
        "content": "<p>You'll get maximal readability by using advice from both.</p>",
        "id": 201653269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592855967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201652988\">said</a>:</p>\n<blockquote>\n<p>Why don't you use <code>begin</code> and <code>end</code>?</p>\n</blockquote>\n<p>C++ part of me wants {} around blocks, so I like the <code>by</code> syntax. But I can change it of course</p>",
        "id": 201653433,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592856043
    },
    {
        "content": "<p>You should work on the LaTeX part of you :-)</p>",
        "id": 201653482,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592856081
    },
    {
        "content": "<p>Channel your inner Pascal programmer <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 201653488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592856083
    },
    {
        "content": "<p>If this gets in mathlib, do you think I should make <code>‚àÄ n : ‚Ñï, 0 &lt; n ‚Üí 1/2 ‚â§ harmonic (2*n) - harmonic n</code> a lemma by itself ? Or keep it as a <code>have</code> ?</p>",
        "id": 201655495,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592857129
    },
    {
        "content": "<p>Aside: we don't have the Cauchy condensation test for series convergence, do we - in fact I couldn't really find <em>anything</em> about the convergence of series, although my mathlib-fu is still not good</p>",
        "id": 201655671,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1592857230
    },
    {
        "content": "<p>Yes, I've already said we should develop some basics of convergence of series.</p>",
        "id": 201655857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592857317
    },
    {
        "content": "<p>My understanding is this -- someone goes \"let's prove theorems about convergence of series\" and then someone else goes \"oh this is all just a special case of some lemma about filter\" so we prove everything about filters but nobody has specialized them to series yet</p>",
        "id": 201656965,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592857817
    },
    {
        "content": "<p>We have a bunch on infinite sums, but almost nothing specialized to the case where the infinite sum is indexed by <code>‚Ñï</code>. See <code>topology/algebra/infinite_sum.lean</code>.</p>",
        "id": 201657229,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592857935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201655495\">said</a>:</p>\n<blockquote>\n<p>If this gets in mathlib, do you think I should make <code>‚àÄ n : ‚Ñï, 0 &lt; n ‚Üí 1/2 ‚â§ harmonic (2*n) - harmonic n</code> a lemma by itself ? Or keep it as a <code>have</code> ?</p>\n</blockquote>\n<p>I would say have it as a separate lemma.</p>",
        "id": 201657310,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592857979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>  Of course I agree with S√©bastien that you should directly prove that <code>harmonic</code> goes to infinity. But I made a compression pass on your proof (without changing the proof on paper) because I think you could learn various tricks by studying the differences with your proof. You need to replace the top import with <code>analysis.specific_limits</code>. Then you can do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">‚àë</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">harmonic_not_tendsto_real</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"o\">(</span><span class=\"n\">tendsto</span> <span class=\"n\">harmonic</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">‚â§</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">‚â§</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"err\">‚àë</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">sum_range_add_sum_Ico</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">this</span><span class=\"o\">,</span>  <span class=\"n\">add_le_add_iff_left</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"err\">‚àë</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">Ico</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">],</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_cast</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">],</span>\n      <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sum_le_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">one_div_le_one_div</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Ico</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"err\">·∂†</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">harmonic</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n    <span class=\"n\">eventually_at_top</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">‚ü®</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">key</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">harmonic</span> <span class=\"err\">‚àò</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">ge_of_tendsto</span> <span class=\"n\">at_top_ne_bot</span> <span class=\"n\">this</span> <span class=\"n\">ineq</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"err\">$</span> <span class=\"n\">tendsto_at_top_mul_left</span> <span class=\"n\">two_pos</span> <span class=\"n\">tendsto_id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sub</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201658845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592858816
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a> to learn about any tactic that you don't know yet.</p>",
        "id": 201658987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592858895
    },
    {
        "content": "<p>is the non-terminal <code>field_simp</code> ok?</p>",
        "id": 201659193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592859002
    },
    {
        "content": "<p>I think so, this tactic is really meant as a preprocessing step.</p>",
        "id": 201659357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592859112
    },
    {
        "content": "<p>I've slightly edited the proof to adhere strictly to the idiomatic <code> field_simp, ring</code>.</p>",
        "id": 201659715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592859323
    },
    {
        "content": "<p>isn't every <code>field</code> a <code>ring</code>? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 201660265,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592859611
    },
    {
        "content": "<p><code>field_simp, ring</code> made me as happy in 2020 as <code>ring</code> made me in 2018/9.</p>",
        "id": 201661417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592860230
    },
    {
        "content": "<p>Is there a problem with writing <code>have := ...</code> without explicitly writing the goal ?</p>",
        "id": 201661945,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592860512
    },
    {
        "content": "<p>only readability problems</p>",
        "id": 201661963,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592860528
    },
    {
        "content": "<p>Ok</p>",
        "id": 201661972,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592860536
    },
    {
        "content": "<p>I replaced that because you wrote <code>change ... at this</code> right after this line. So I only combined two of your lines into one.</p>",
        "id": 201662335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592860687
    },
    {
        "content": "<p>Oh indeed</p>",
        "id": 201662629,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592860846
    },
    {
        "content": "<p>What is <code>$</code> ?</p>",
        "id": 201663667,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592861444
    },
    {
        "content": "<p><code>X $ Y</code> is the same as <code>X (Y)</code></p>",
        "id": 201663699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592861464
    },
    {
        "content": "<p>Oooooooooooh this is great</p>",
        "id": 201663735,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592861486
    },
    {
        "content": "<p>it's just a super-low-priority notation</p>",
        "id": 201663740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592861490
    },
    {
        "content": "<p><code>#print notation $</code></p>",
        "id": 201663752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592861499
    },
    {
        "content": "<p>I was starting to get bored of lisp-like parenthesizing</p>",
        "id": 201663814,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592861525
    },
    {
        "content": "<p>the <code>1</code> and <code>0</code> just indicate that it gets evaluated last, and when it gets evaluated Lean discovers that it doesn't do anything :-)</p>",
        "id": 201663820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592861531
    },
    {
        "content": "<p>I read about it in learnyouahaskell</p>",
        "id": 201663865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592861556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201663820\">said</a>:</p>\n<blockquote>\n<p>the <code>1</code> and <code>0</code> just indicate that it gets evaluated last, and when it gets evaluated Lean discovers that it doesn't do anything :-)</p>\n</blockquote>\n<p>Smart</p>",
        "id": 201663896,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592861572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201652246\">said</a>:</p>\n<blockquote>\n<p>I feel you can get a slightly slicker proof, avoiding all arguments by contradiction, by noting that <code>harmonic (2^n) \\geq n/2</code> (you have proved this) and therefore <code>harmonic (2^n)</code> tends to infinity (as it is bounded below by a sequence tending to infinity -- I hope we have this!). And then, for a monotone sequence, having a subsequence tending to infinity implies convergence to infinity (I hope we have this also). But what you did is great!</p>\n</blockquote>\n<p>Well, I I'd be done if I had found those two lemmas... If they exist, they are well hidden. I'll continue to search tomorrow, and if they don't exist I'll prove them, it doesn't seem <em>that</em> difficult</p>",
        "id": 201669486,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592865338
    },
    {
        "content": "<p>For readability you might like to factor out more steps into lemmas. Essentially any top level <code>have</code> statement in a long proof is a good candidate for extraction.</p>",
        "id": 201676042,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592870972
    },
    {
        "content": "<p>e.g. things like  <code>mono harmonic</code> should certainly be their own lemmas.</p>",
        "id": 201676108,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592871017
    },
    {
        "content": "<p>Does it make sense to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- the sequence</span>\n<span class=\"n\">def</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">series</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">sequence</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"err\">\\</span><span class=\"n\">sum</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sequence</span> <span class=\"n\">i</span>\n\n<span class=\"c1\">-- the series</span>\n<span class=\"n\">def</span> <span class=\"n\">harmonic_series</span> <span class=\"o\">:=</span> <span class=\"n\">series</span> <span class=\"n\">harmonic</span>\n</code></pre></div>",
        "id": 201678084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592873170
    },
    {
        "content": "<p>Then we can prove things about <code>1 + (1/2)^2 + (1/3)^2 + ...</code> later as things about <code>series (square \\circ harmonic)</code>.</p>",
        "id": 201678106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592873214
    },
    {
        "content": "<p>How about <code>(n : \\Z)</code> so that one can have alternating harmonic? Or should alternating_series be a separate sum?</p>",
        "id": 201678406,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592873568
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">alternating</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">series</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">series</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 201678500,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592873686
    },
    {
        "content": "<p>You don't want to abuse <code>1/0 = 0</code>? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 201678620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592873855
    },
    {
        "content": "<p>Note that <code>alternating</code> could be done for any <code>add_comm_group A</code></p>",
        "id": 201678693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592873937
    },
    {
        "content": "<p>Well it would mess with what <code>alternating harmonic</code> would converge to.</p>",
        "id": 201678701,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592873947
    },
    {
        "content": "<p>If you replace the <code>*</code> with a <code>\\bu[\\Z]</code></p>",
        "id": 201678704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592873952
    },
    {
        "content": "<p>/me doesn't know that standard indexing convention for standard series</p>",
        "id": 201678730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592874001
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">alternating</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">series</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"err\">\\</span><span class=\"n\">bu</span><span class=\"o\">[</span><span class=\"err\">\\</span><span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"n\">series</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 201678792,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592874042
    },
    {
        "content": "<p>The indexing convention is whatever makes the result cleanest. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>‚àë</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">‚àû</mi></msubsup><mfrac><mn>1</mn><msup><mi>n</mi><mn>2</mn></msup></mfrac><mo>=</mo><msup><mi>œÄ</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=1}^\\infty\\frac1{n^2}=\\pi^2/6</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">‚àë</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">œÄ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">6</span></span></span></span> but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>‚àë</mo><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">‚àû</mi></msubsup><msup><mi>a</mi><mi>n</mi></msup><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>‚àí</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=0}^\\infty a^n=1/(1-a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">‚àë</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">‚àû</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">‚àí</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 201679678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592875184
    },
    {
        "content": "<p>You can start the first sum at <code>0</code> as well, right? Or am I misunderstanding when to abuse <code>1/0 = 0</code>?</p>",
        "id": 201682289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592878751
    },
    {
        "content": "<p>Oh I thought you meant standard in maths</p>",
        "id": 201683086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592880028
    },
    {
        "content": "<p>I don't see a problem with starting the sum at 0 in lean as long as it's still true</p>",
        "id": 201683093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592880055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201669486\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201652246\">said</a>:</p>\n<blockquote>\n<p>I feel you can get a slightly slicker proof, avoiding all arguments by contradiction, by noting that <code>harmonic (2^n) \\geq n/2</code> (you have proved this) and therefore <code>harmonic (2^n)</code> tends to infinity (as it is bounded below by a sequence tending to infinity -- I hope we have this!). And then, for a monotone sequence, having a subsequence tending to infinity implies convergence to infinity (I hope we have this also). But what you did is great!</p>\n</blockquote>\n<p>Well, I I'd be done if I had found those two lemmas... If they exist, they are well hidden. I'll continue to search tomorrow, and if they don't exist I'll prove them, it doesn't seem <em>that</em> difficult</p>\n</blockquote>\n<p>The first one is definitely there, it's <code>tendsto_at_top_mono</code>. I wouldn't bet on finding the second one.</p>",
        "id": 201692799,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592895450
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">unbounded_of_tensto_at_top</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_top_order</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"bp\">‚ü®</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tendsto_at_top</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">no_top</span> <span class=\"n\">M</span> <span class=\"k\">with</span> <span class=\"n\">M&#39;</span> <span class=\"n\">hMM&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">mem_at_top_sets</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n  <span class=\"n\">M</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"n\">hMM&#39;</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ha</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">‚â§</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">hM</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_of_monotone_of_subseq</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_top_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">‚àò</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_at_top_of_monotone</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"err\">$</span> <span class=\"n\">u</span> <span class=\"err\">‚àò</span> <span class=\"n\">œÜ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">bdd_above</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">range_comp_subset_range</span> <span class=\"n\">œÜ</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">unbounded_of_tensto_at_top</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>while writing this I also noticed I had a couple of copy-paste typos in yesterday's lemmas (unnecessary <code>[topological_space Œ±] [order_topology Œ±]</code> in lemmas that don't use any topology, only the order).</p>",
        "id": 201693382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592895990
    },
    {
        "content": "<p>Big thanks to everyone for your help and advice ! I was also thinking of defining series in general as <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> proposed, but I thought a more generic and complete had to exist in mathlib. If this isn't the case, it would indeed be interesting to define it ! </p>\n<p>I have to admit I didn't think this project would get to mathlib, so making it clean and user-friendly wasn't my primary goal, but now I feel this is even more rewarding than the challenge in itself ! I'll finish the shorter proof with <code>2^n</code> and then I'll work on organizing everything, breaking into lemmas, etc...</p>",
        "id": 201716901,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592914381
    },
    {
        "content": "<p>Well, I'll actually have to pause lean for a few days after that, cause I'm supposed to prepare an unofficial CS \"lecture\" for my colleagues <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 201718392,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592915410
    },
    {
        "content": "<p>With Patrick's lemmas in <code>not_yet_in_lib</code>, this is where I am now : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">not_yet_in_lib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span> <span class=\"n\">finset</span> <span class=\"n\">set</span> <span class=\"n\">topological_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">def</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span>\n<span class=\"err\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mono_harmonic</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">harmonic</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">harmonic</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sum_le_sum_of_subset_of_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">range_subset</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">one_div_pos_of_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">half_le_harmonic_double_sub_harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">‚â§</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">‚â§</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"err\">‚àë</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">sum_range_add_sum_Ico</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">this</span><span class=\"o\">,</span>  <span class=\"n\">add_le_add_iff_left</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"err\">‚àë</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">Ico</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">],</span>\n      <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n      <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sum_le_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">one_div_le_one_div</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Ico</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">harmonic_two_pow_ge_id_div_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">harmonic</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div_eq_inv</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">,</span> <span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">zero_div</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">,</span> <span class=\"n\">sum_singleton</span><span class=\"o\">,</span> <span class=\"n\">inv_one</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">range_one</span><span class=\"o\">],</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">‚â§</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">half_le_harmonic_double_sub_harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_pos</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">}),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">field_simp</span><span class=\"o\">}),</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">harmonic_two_pow_ge_id_div_two&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">harmonic_two_pow_ge_id_div_two</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">harmonic_tendsto_at_top</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">harmonic</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">,</span> <span class=\"k\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">tendsto_at_top_of_monotone_of_subseq</span> <span class=\"n\">mono_harmonic</span> <span class=\"n\">this</span><span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_at_top_mono</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">harmonic_two_pow_ge_id_div_two&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_at_top_div</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_coe_nat_real_at_top_at_top</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201720035,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592916365
    },
    {
        "content": "<p>If I recall correctly, the tutorial project has a lemma about subsequences that tend to infinity</p>",
        "id": 201737057,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592924300
    },
    {
        "content": "<p>Seems like I remembered somewhat right, but they are in the opposite direction: <a href=\"https://github.com/leanprover-community/tutorials/blob/13efdfcc7879582710bb541c1b691d8e2b65fec9/src/solutions/09_limits_final.lean#L217\">https://github.com/leanprover-community/tutorials/blob/13efdfcc7879582710bb541c1b691d8e2b65fec9/src/solutions/09_limits_final.lean#L217</a></p>",
        "id": 201741752,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592926295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201737057\">said</a>:</p>\n<blockquote>\n<p>If I recall correctly, the tutorial project has a lemma about subsequences that tend to infinity</p>\n</blockquote>\n<p>Indeed, all these lemmas are easy to prove for the specific case of <code>N -&gt; R</code>with epsilon-delta limits (I did indeed prove everything in this tutorial since it is more or less the same content as the course I took  with Patrick Massot). But I wanted to use mathlib as much as possible to avoid unnecessary dependencies</p>",
        "id": 201743071,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592926866
    },
    {
        "content": "<p>Indeed, everything in the tutorial is too specialized.</p>",
        "id": 201743142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592926902
    },
    {
        "content": "<p>I also need to find time to remove the mess in <a href=\"https://github.com/leanprover-community/tutorials/blob/13efdfcc7879582710bb541c1b691d8e2b65fec9/src/solutions/tuto_lib.lean\">tuto_lib</a> now that Bolzano-Weirstrass is in mathlib.</p>",
        "id": 201744931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592927689
    },
    {
        "content": "<p>There is even more mess there that I remembered. I shouldn't draw attention to this file.</p>",
        "id": 201745006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592927733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201692799\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201669486\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/201652246\">said</a>:</p>\n<blockquote>\n<p>I feel you can get a slightly slicker proof, avoiding all arguments by contradiction, by noting that <code>harmonic (2^n) \\geq n/2</code> (you have proved this) and therefore <code>harmonic (2^n)</code> tends to infinity (as it is bounded below by a sequence tending to infinity -- I hope we have this!). And then, for a monotone sequence, having a subsequence tending to infinity implies convergence to infinity (I hope we have this also). But what you did is great!</p>\n</blockquote>\n<p>Well, I I'd be done if I had found those two lemmas... If they exist, they are well hidden. I'll continue to search tomorrow, and if they don't exist I'll prove them, it doesn't seem <em>that</em> difficult</p>\n</blockquote>\n<p>The first one is definitely there, it's <code>tendsto_at_top_mono</code>. I wouldn't bet on finding the second one.</p>\n</blockquote>\n<p>The fun thing is : I had seen this lemma. I just hadn't thought what I was searching was a certain function being monotonous</p>",
        "id": 201782296,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592945983
    },
    {
        "content": "<p>Ok so I'm reviving this topic cause this will be my first ever commit to mathlib, and I'm a bit nervous <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> To sum up, I currently have the following lemmas (and their proofs, which I didn't wrote here for readability as I assume they'll be reviewed later anyway, but you can find them at <a href=\"https://gitlab.com/Someody42/harmonic\">https://gitlab.com/Someody42/harmonic</a> ) : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">--Patrick&#39;s lemmas</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_supr_of_bdd</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbdd</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"err\">$</span> <span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"o\">(</span><span class=\"err\">‚®Ü</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_of_monotone</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span><span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">unbounded_of_tensto_at_top</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_top_order</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_of_monotone_of_subseq</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_top_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">‚àò</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- My lemmas</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_either_of_monotone</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"bp\">‚à®</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span>\n<span class=\"err\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mono_harmonic</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">harmonic</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">half_le_harmonic_double_sub_harmonic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">‚â§</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">harmonic</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">harmonic_two_pow_ge_id_div_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">harmonic_two_pow_ge_id_div_two&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">harmonic</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">harmonic_tendsto_at_top</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">harmonic</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>My questions are :</p>\n<ul>\n<li>Do all of these lemmas have their place in mathlib ?</li>\n<li>I was thinking of putting the \"generic\" ones in <code>topology/order.lean</code> as Patrick advised for the first two, do they all fit there ?</li>\n<li>Maybe there could be a better name than <code>tendsto_either_of_monotone</code> ?</li>\n<li>Where should I put the <code>harmonic</code> stuff ? I was thinking of <code>analysis/specific_limits</code> but maybe not all of the intermediary lemmas fit here ?</li>\n<li>Should I make two separates PR, one for generic lemmas and the other for harmonic series ?</li>\n<li>Do I need to write some doc ?</li>\n</ul>\n<p>Thanks in advance ! Sorry for asking so many things, I want to do things right <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 202333551,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593447681
    },
    {
        "content": "<p>Q1: yes</p>",
        "id": 202334433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593447970
    },
    {
        "content": "<p>Please don't write <code>i.succ</code>. For <code>simp</code> it's a lot better if you use <code>i+1</code>.</p>",
        "id": 202334583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593448043
    },
    {
        "content": "<p>Oh okay</p>",
        "id": 202334616,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593448055
    },
    {
        "content": "<p>If it's &lt; 100 lines, put everything in 1 PR. Otherwise splitting makes sense.</p>",
        "id": 202334664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593448078
    },
    {
        "content": "<blockquote>\n<p>Do I need to write some doc ?</p>\n</blockquote>\n<p>Definitions need docstrings. Otherwise, this won't need to many docs.</p>",
        "id": 202334750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593448110
    },
    {
        "content": "<p>I would rename <code>harmonic</code> to <code>harmonic_series</code>, I think. But it's a minor point.</p>",
        "id": 202334844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593448152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> Let me know if you want guidance on the <code>git</code> side of creating a PR.</p>",
        "id": 202335225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593448309
    },
    {
        "content": "<p>Put in <code>topology/order.lean</code> only things that involve a topology.</p>",
        "id": 202335423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593448383
    },
    {
        "content": "<p>The other ones can go in the file defining  <code>at_top</code>.</p>",
        "id": 202335519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593448426
    },
    {
        "content": "<p><code>unbounded_of_tensto_at_top</code> misses a \"d\"</p>",
        "id": 202335636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593448470
    },
    {
        "content": "<p>maybe <code>tendsto_of_monotone</code> is enough for <code>tendsto_either_of_monotone</code>.</p>",
        "id": 202335723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593448516
    },
    {
        "content": "<p>Why did you put a prime at <code>harmonic_tendsto_at_top'</code>?</p>",
        "id": 202335822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593448562
    },
    {
        "content": "<p>That's a mistake</p>",
        "id": 202335878,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593448585
    },
    {
        "content": "<p>It's because I kept other versions of the proof in the same file</p>",
        "id": 202335929,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593448607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/202335225\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> Let me know if you want guidance on the <code>git</code> side of creating a PR.</p>\n</blockquote>\n<p>Patrick gave me write access to non-master branch, so if I understand well I just have to follow the steps here : <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> ?</p>",
        "id": 202336314,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593448800
    },
    {
        "content": "<p>Yup, that sounds good</p>",
        "id": 202336621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593448929
    },
    {
        "content": "<p>Can I make the two PRs without creating two local branches ?</p>",
        "id": 202336939,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593449083
    },
    {
        "content": "<p>Nope</p>",
        "id": 202337005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593449113
    },
    {
        "content": "<p>So create a big PR</p>",
        "id": 202337041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593449129
    },
    {
        "content": "<p>Okay</p>",
        "id": 202337122,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593449171
    },
    {
        "content": "<p>And then you can do</p>\n<div class=\"codehilite\"><pre><span></span><code>git checkout -b harmonic-preparations\ngit checkout harmonic-main-branch -- src/topology/foobar.lean\n...\ngit commit -am <span class=\"s2\">&quot;feat(*): preparations for divergence of harmonic series&quot;</span>\ngit push\n<span class=\"c1\"># create another PR</span>\n</code></pre></div>",
        "id": 202337159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593449207
    },
    {
        "content": "<p>If you want to create a smaller first PR</p>",
        "id": 202337190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593449220
    },
    {
        "content": "<p>Is there any logic in the way we order things in a file ?</p>",
        "id": 202340077,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593450523
    },
    {
        "content": "<p>First come first serve?</p>",
        "id": 202341005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593450922
    },
    {
        "content": "<p>But we try to put things that belong together close together</p>",
        "id": 202341125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593450940
    },
    {
        "content": "<p>And sometimes we turn a file upside down and inside out, when it becomes too messy.</p>",
        "id": 202341168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593450959
    },
    {
        "content": "<p>Some files have module docs like: <code>/-! ### lemmas about foo -/</code> that group related lemmas together.</p>",
        "id": 202341308,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593451014
    },
    {
        "content": "<p>Oh just realised I meant <code>topology/algebra/ordered</code> not <code>topology/order</code></p>",
        "id": 202341750,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593451222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/202341308\">said</a>:</p>\n<blockquote>\n<p>Some files have module docs like: <code>/-! ### lemmas about foo -/</code> that group related lemmas together.</p>\n</blockquote>\n<p>Note that you new line breaks before and after the title.</p>",
        "id": 202346445,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593453541
    },
    {
        "content": "<p>Yes, that's recommended. Although if everything fits on one line then it's strictly not necessary.</p>",
        "id": 202347682,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593454150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Harmonic.20Series.20Divergence/near/202337159\">said</a>:</p>\n<blockquote>\n<p>And then you can do</p>\n<div class=\"codehilite\"><pre><span></span><code>git checkout -b harmonic-preparations\ngit checkout harmonic-main-branch -- src/topology/foobar.lean\n...\ngit commit -am <span class=\"s2\">&quot;feat(*): preparations for divergence of harmonic series&quot;</span>\ngit push\n<span class=\"c1\"># create another PR</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Hmmmmm I think I misunderstood something here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> In which order was I supposed to do the operations ?</p>",
        "id": 202370158,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593466019
    },
    {
        "content": "<p>I mean : should I do all modifications first and then checkout ? Or just the modifications I want to put in the first PR ?</p>",
        "id": 202370494,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593466243
    },
    {
        "content": "<p>Johan is complicating things, one PR will be fine.</p>",
        "id": 202370808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593466433
    },
    {
        "content": "<p>Just to be sure : is there any part of Mathlib dedicated to series ? <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> mentioned <code>topology.algebra.infinite_sums</code> but that doesn't seem to be what I'm searching for.</p>",
        "id": 202483900,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593545621
    },
    {
        "content": "<p>The natural place in mathlib would probably be <code>analysis/specific_limits</code>.</p>",
        "id": 202484763,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593546018
    },
    {
        "content": "<p>Oh yeah, but at the moment is there anything done ? Because <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> suggested me to extend the result to p-series by proving Cauchy Condensation Test, and I didn't know if there were any infrastructure I should base on top of</p>",
        "id": 202485123,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593546187
    },
    {
        "content": "<p>I don't think there is anything else specifically on series. It might be time to start a new file in this direction.</p>",
        "id": 202485273,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593546251
    },
    {
        "content": "<p>Yes, this was discussed before. We have <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/infinite_sum.html\">many things</a> about sumable families of elements of a topological additive monoid, but nothing about series. Of course we can already write partial sums and speak about their limits, but I think we need a dedicated set of lemmas, including convergence criteria (there are many more common criteria than Cauchy condensation).</p>",
        "id": 202500397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593554200
    },
    {
        "content": "<p>One slightly painful question is whether we should impose the source type. It is tempting to use series whose general term is indexed by natural numbers, but sometimes it's much more natural to have something slightly smaller or bigger. I would say any source type that has a reasonable <code>at_top</code> filter should be supported. Also convergence should probably be expressed for an arbitrary filter on the target, but then we run into the issue that we want to call diverging a series which converges to <code>at_top</code> on the target...</p>",
        "id": 202500752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593554408
    },
    {
        "content": "<p>Hmmmm not sure about being well placed to make these design choices then. But if someone wants to setup basic definitions, I think I'll be able to prove a decent amount of things</p>",
        "id": 202506563,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1593558729
    },
    {
        "content": "<p>Sure, I wasn't writing this specifically for you. I hope that S√©bastien and Yury will comment on this (we should probably move this to the math stream) and then we can write the definitions and let everybody contribute lemmas.</p>",
        "id": 202507156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593559253
    }
]