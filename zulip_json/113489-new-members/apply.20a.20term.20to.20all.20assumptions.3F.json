[
    {
        "content": "<p>The following is a working proof, but it's slightly verbose to have to apply <code>` to </code>hfa, hfb, nng<code> separately. Is it possible to just say: \"apply </code>x` to all assumptions\"?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">fn_ub</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"o\">:</span> <span class=\"n\">fn_ub</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nng</span> <span class=\"o\">:</span> <span class=\"n\">fn_lb</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nna</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fn_ub</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">fn_ub</span> <span class=\"n\">fn_lb</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:=</span> <span class=\"n\">hfa</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:=</span> <span class=\"n\">hfb</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:=</span> <span class=\"n\">nng</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">nlinarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204629584,
        "sender_full_name": "Chris M",
        "timestamp": 1595392360
    },
    {
        "content": "<p>This doesn't exactly answer your question, but you can do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">fn_ub</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"o\">:</span> <span class=\"n\">fn_ub</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nng</span> <span class=\"o\">:</span> <span class=\"n\">fn_lb</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nna</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fn_ub</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">fn_ub</span> <span class=\"n\">fn_lb</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">nlinarith</span> <span class=\"o\">[</span><span class=\"n\">hfa</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hfb</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nng</span> <span class=\"n\">x</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>to avoid typing have a lot</p>",
        "id": 204630147,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595393320
    },
    {
        "content": "<p>Yeah that's good but not exactly what I was after.<br>\nIn fact, it would be nice to <em>replace</em> <code>hfa, hfb, nng</code> with <code>hfa x, hfb x, nng x</code> respectively, so that one has a cleaner goal state.</p>",
        "id": 204630211,
        "sender_full_name": "Chris M",
        "timestamp": 1595393422
    },
    {
        "content": "<p>For that you can use <code>specialize</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hfa</span> <span class=\"o\">:</span> <span class=\"n\">fn_ub</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfb</span> <span class=\"o\">:</span> <span class=\"n\">fn_ub</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">nng</span> <span class=\"o\">:</span> <span class=\"n\">fn_lb</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nna</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fn_ub</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">fn_ub</span> <span class=\"n\">fn_lb</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hfa</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hfb</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">nng</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204630231,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595393469
    }
]