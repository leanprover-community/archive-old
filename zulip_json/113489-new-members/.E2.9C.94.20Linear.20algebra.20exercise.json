[
    {
        "content": "<p>Welcome! Who are you working with in symplectic geometry?</p>",
        "id": 277841989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649146655
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_isotropic_iff_restrict_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_isotropic</span> <span class=\"n\">B</span> <span class=\"n\">N</span> <span class=\"bp\">↔</span> <span class=\"n\">B.restrict</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bilin_form.ext_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hy</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277841994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649146659
    },
    {
        "content": "<p>This looks much smoother thanks! And great another symplectic fellow <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> My advisor is Paul Biran and I am working on organizing Lagrangian submanifolds in cobordism groups in the setting of Liouville manifolds. So mostly I am spending my time understanding parts of the GPS papers.</p>",
        "id": 277842934,
        "sender_full_name": "Valentin Bosshard",
        "timestamp": 1649147231
    },
    {
        "content": "<p>For learning purposes: Is it possible to extract a hypothesis <code>x∈ N</code> from <code>x : ↥N</code> or not?</p>",
        "id": 277843121,
        "sender_full_name": "Valentin Bosshard",
        "timestamp": 1649147335
    },
    {
        "content": "<p>Seems like it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- Try this: exact subtype.mem x</span>\n</code></pre></div>",
        "id": 277843767,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1649147719
    },
    {
        "content": "<p>To be honest that kind of proof is clearly on the annoying side of formalized mathematics: it's only unpacking information and repacking it in a very slightly different way.</p>",
        "id": 277846334,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649149152
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">x.property</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Better:</span>\n  <span class=\"k\">let</span> <span class=\"n\">x''</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"c1\">-- here Lean inserts a coercion map</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x''</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">x.property</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277846655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649149306
    },
    {
        "content": "<p>About symplectic geometry: don't expect we'll have Fukaya categories in Lean soon, but we'll get there eventually.</p>",
        "id": 277846764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649149347
    },
    {
        "content": "<p>This helps a lot. Thanks. I can imagine that there is a long way to go to have Fukaya categories but the thought of it happening one day is very exciting</p>",
        "id": 277847461,
        "sender_full_name": "Valentin Bosshard",
        "timestamp": 1649149693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372333\">Valentin Bosshard</span> has marked this topic as resolved.</p>",
        "id": 277847517,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649149721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372333\">@Valentin Bosshard</span> you can read <a href=\"https://leanprover-community.github.io/theories/sets.html\">here</a> about the difference between subtypes and subsets.</p>",
        "id": 277853682,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649153015
    }
]