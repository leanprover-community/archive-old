[
    {
        "content": "<p>In ND, the implication can be introduced with zero hypotheses being canceled, right? How to make this operation in Lean?  In tactic mode, I am in the current stage:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"err\">⊢</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 208769817,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599010101
    },
    {
        "content": "<p>Hum, in tactic I solved with </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208769875,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599010167
    },
    {
        "content": "<p>Tactic mode given your first example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">pA</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 208769939,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599010203
    },
    {
        "content": "<p>yes, I am now trying to make it in term mode...</p>",
        "id": 208769982,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599010249
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">pB</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">pA</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">pB</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 208770159,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599010441
    },
    {
        "content": "<p>Keep in mind that \\not P is the same as P -&gt; false. So in term mode you can start with \\lam hb, ... and you'll see that the goal is <code>false</code>. You only have one thing in context which can be used, which is <code>h</code>, etc.</p>",
        "id": 208770207,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599010468
    },
    {
        "content": "<p>Thank you, the <code>trick</code> part was <code>λ (pA : A), pB</code></p>",
        "id": 208770314,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599010582
    },
    {
        "content": "<p>You can also </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208770366,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599010637
    },
    {
        "content": "<p>For simple tactic steps like these, the show_term will give something decipherable.</p>",
        "id": 208770389,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599010682
    },
    {
        "content": "<p>show_term is not working for me... maybe it is from mathlib?</p>",
        "id": 208770450,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599010736
    },
    {
        "content": "<p>Yes, it is</p>",
        "id": 208770481,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599010787
    },
    {
        "content": "<p>yes, I found its definition! Thank you</p>",
        "id": 208770483,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599010790
    },
    {
        "content": "<p>Just as an amusement, another term mode proof that uses SKI combinators:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>though I had to change their definitions in <code>core.lean</code> to use <code>Sort</code> rather than <code>Type</code>.  It's obviously better because it's <del>pointless</del> I mean point-free. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 208780513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599023345
    }
]