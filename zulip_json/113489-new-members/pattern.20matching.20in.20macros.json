[
    {
        "content": "<p>Hello! I was trying to extend the example given <a href=\"https://leanprover.github.io/lean4/doc/syntax_example.html\">here</a>, to include arbitrary sequences of balanced sequences (e.g. {}{}{}). The modified code is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Dyck</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Dyck</span> <span class=\"bp\">→</span> <span class=\"n\">Dyck</span>\n  <span class=\"bp\">|</span> <span class=\"n\">round</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span> <span class=\"bp\">→</span> <span class=\"n\">Dyck</span>\n  <span class=\"bp\">|</span> <span class=\"n\">curly</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span> <span class=\"bp\">→</span> <span class=\"n\">Dyck</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">brack</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"end\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">brack</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">brack</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"n\">brack</span> <span class=\"s2\">\"-\"</span> <span class=\"n\">brack</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[Dyck| \"</span> <span class=\"n\">brack</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"kd\">end</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.leaf</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.round</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">}])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.curly</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"bp\">-$</span><span class=\"n\">c</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">])</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.seq</span> <span class=\"n\">brackseq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.seq</span> <span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">brackseq</span><span class=\"o\">))</span>\n     <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.seq</span> <span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">]</span>\n                       <span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">]</span>\n                       <span class=\"n\">List.nil</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>However, the <code>match ...</code> line gives the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n</code></pre></div>\n<p>Is this the right way to pattern match on a macro expansion?</p>",
        "id": 283291799,
        "sender_full_name": "Abhinav Menon",
        "timestamp": 1653298039
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"502283\">@Jatin Agarwala</span></p>",
        "id": 283292409,
        "sender_full_name": "Abhinav Menon",
        "timestamp": 1653298401
    },
    {
        "content": "<p>Here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Dyck</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Dyck</span> <span class=\"bp\">→</span> <span class=\"n\">Dyck</span>\n  <span class=\"bp\">|</span> <span class=\"n\">round</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span> <span class=\"bp\">→</span> <span class=\"n\">Dyck</span>\n  <span class=\"bp\">|</span> <span class=\"n\">curly</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span> <span class=\"bp\">→</span> <span class=\"n\">Dyck</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">Dyck</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">brack</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"end\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">brack</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">brack</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n<span class=\"n\">syntax</span> <span class=\"n\">brack</span> <span class=\"s2\">\"-\"</span> <span class=\"n\">brack</span> <span class=\"o\">:</span> <span class=\"n\">brack</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"`[Dyck| \"</span> <span class=\"n\">brack</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"kd\">end</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.leaf</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.round</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">}])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.curly</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"bp\">-$</span><span class=\"n\">c</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.seq</span> <span class=\"n\">brackseq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.seq</span> <span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">brackseq</span><span class=\"o\">))</span>\n     <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.seq</span> <span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">]</span>\n                       <span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">]</span>\n                       <span class=\"n\">List.nil</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 283299786,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653302737
    },
    {
        "content": "<p>You might want the dollar symbol before <code>brackseq</code> on this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.seq</span> <span class=\"bp\">$</span><span class=\"n\">brackseq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Dyck.seq</span> <span class=\"o\">(</span><span class=\"n\">List.cons</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Dyck</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">brackseq</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Also notice that the code above compiles, but you haven't defined a syntax for sequences of brackets (you probably know this since you literally matched with <code>`(Dyck.seq brackseq)</code>)</p>",
        "id": 283300661,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653303321
    }
]