[
    {
        "content": "<p>This is maybe a silly question but I'm stuck. I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sub_Q'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span>      <span class=\"o\">[]</span>     <span class=\"o\">:=</span> <span class=\"n\">P</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"n\">Q</span>      <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">sub_Q'</span> <span class=\"n\">t</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">xxx</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub_Q'</span> <span class=\"o\">[]</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>How do I prove <code>xxx </code>? It's true by definition. I've tried <code>rfl</code>, <code>refl</code>, <code>unfold sub_Q'</code>, and <code>dsimp [sub_Q']</code>, none of which work. I thought <code>relf</code> would work because of the computation thing.</p>",
        "id": 211101483,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1600935657
    },
    {
        "content": "<p>What's the <code>P</code> doing in your hyps?</p>",
        "id": 211101600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600935733
    },
    {
        "content": "<p>It part of a larger lemma, I really want to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">wtf</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sub_Q'</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">P.length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211101718,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1600935840
    },
    {
        "content": "<p>Removing the <code>P</code> in the example doesn't help :(</p>",
        "id": 211101850,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1600935919
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">xxx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">sub_Q'</span> <span class=\"o\">[]</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 211101876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600935945
    },
    {
        "content": "<p>I dunno why lean isn't being smarter so that rfl works right away.</p>",
        "id": 211101938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600935972
    },
    {
        "content": "<p>Yeah, I though it'd just work. Thanks for the solution.</p>",
        "id": 211102336,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1600936298
    },
    {
        "content": "<p>If you do <code>#print prefix sub_Q'</code>, you will see the computation rules:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sub_Q'.equations._eqn_1</span> <span class=\"o\">:</span> <span class=\"n\">sub_Q'</span> <span class=\"n\">list.nil</span> <span class=\"n\">list.nil</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span>\n<span class=\"n\">sub_Q'.equations._eqn_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">sub_Q'</span> <span class=\"n\">list.nil</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span>\n<span class=\"n\">sub_Q'.equations._eqn_3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">sub_Q'</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">list.nil</span> <span class=\"bp\">=</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span>\n<span class=\"n\">sub_Q'.equations._eqn_4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">sub_Q'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">sub_Q'</span> <span class=\"n\">t</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 211102768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600936584
    },
    {
        "content": "<p>since you did cases on the second input when defining the function, there is no computational rule where the second input is not destructed</p>",
        "id": 211102846,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600936642
    },
    {
        "content": "<p>Ohhhh.... I see thanks. :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">xxx</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub_Q'</span> <span class=\"o\">[]</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211103448,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1600937062
    },
    {
        "content": "<p>This is a standard equation compiler gotcha but it's difficult to know where to flag the issue</p>",
        "id": 211103600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600937171
    }
]