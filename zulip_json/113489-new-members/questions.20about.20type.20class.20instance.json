[
    {
        "content": "<p>I'm trying to do two things.</p>\n<ol>\n<li>Define a structure containing, say, <code>(ι : Type*)</code>, but also requiring <code>nontrivial ι</code>, perhaps by type class inference rather than explicit proof. E.g.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">my_struct</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">nontriv_ι</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>In a proof, I need to provide a term for the type <code>Π₀ i : ι, M i</code>. When I construct this term using an object of <code>my_struct</code>, Lean fails to see <code>nontriv_ι</code> when synthesising the <code>nontrivial ι</code> for the <code>dfinsupp</code>. How can I help Lean see the type class instance provided by <code>nontriv_ι</code>? Lean keeps saying \"failed to synthesise type class instance\".</li>\n</ol>",
        "id": 243484979,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624350020
    },
    {
        "content": "<p>The square brackets in the definition do not make it an instance. Try <code>attribute [instance] my_struct.nontriv_ι</code> after the definition and see if this fixes things.</p>",
        "id": 243485072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624350103
    },
    {
        "content": "<p>I think for this specific example <code>#lint</code> will complain the instance is dangerous / impossible, but that might just be because you over-minimized the example</p>",
        "id": 243486602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624351078
    }
]