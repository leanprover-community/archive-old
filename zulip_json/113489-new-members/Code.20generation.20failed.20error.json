[
    {
        "content": "<p>I'm trying to work with sequences that use the quadratic formula recursively. When I try to have a simple function like below, I get a <code>code generation failed, VM does not have code for 'classical.indefinite_description'</code> error and haven't been able to find anything on why this is happening. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">pn</span> <span class=\"bp\">-</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">pn</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">qn</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 199057187,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1590688400
    },
    {
        "content": "<p>Reals in Lean are the actual mathematical definition of the reals, they're not floats or any computable definition. This means you can only prove theorems about them, but not compute with them.</p>",
        "id": 199057449,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590688526
    },
    {
        "content": "<p>If you hadn't written <code>noncomputable theory</code> you'd have to put <code>noncomputable</code> before <code>f</code>, and that would be a clue</p>",
        "id": 199057585,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590688583
    },
    {
        "content": "<p>Removing the <code>noncomputable theory</code> I get <code>f' is noncomputable, it depends on 'real.division_ring'</code>. Does that mean this just isn't something lean can do?</p>\n<p>More context:  I'd like to show that a sequence formed by recursively applying functions similar to this eventually produces a complex result. Is that just not something mathlib can support yet?</p>",
        "id": 199060872,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1590689927
    },
    {
        "content": "<p>You could definitely formalize such a theorem about that sequence in Lean. You just can't use <code>#eval</code> on any functions that use <code>real</code> s.</p>",
        "id": 199061971,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590690287
    },
    {
        "content": "<p>Eval is a very specific thing, if you just want lean to simplify and tell you the answer in a proved manner one can do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">conv_lhs</span><span class=\"o\">{</span>\n<span class=\"n\">norm_num</span><span class=\"o\">,},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>of course 1 is not the answer, but after norm_num lean has simplified the expression.</p>",
        "id": 199063394,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590690874
    },
    {
        "content": "<p>to try to cut to the core of the confusion:<br>\nhow do you expect Lean to do what you've asked? like what algorithm do you expect it to run?<br>\n(also I'm guessing you meant to write <code>def f (pn qn : ℝ) : ℝ := (- pn - real.sqrt (pn^2 - 4*qn))/2</code> in your first message? test your code when you post a question!)</p>",
        "id": 199109044,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590720748
    }
]