[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">A.det</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I think the following is a very basic fact in linear algebra. Is this proved in matlib? Lib search does not return a result.</p>",
        "id": 244393717,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625043013
    },
    {
        "content": "<p>If it's not then you could probably prove it by letting B be the inverse and showing det(A)det(B)=1. It is probably only a couple of lines. And if it's not there you could make a PR :-)</p>",
        "id": 244394006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625043196
    },
    {
        "content": "<p>Can you use something like <code>is_unit_det_of_left_inverse</code>?</p>",
        "id": 244394030,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1625043225
    },
    {
        "content": "<p>Yes! I think I am going to add it.</p>",
        "id": 244394038,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625043232
    },
    {
        "content": "<p>The above is a reply to Kevin.</p>",
        "id": 244394098,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625043249
    },
    {
        "content": "<p>Or  perhaps <code>is_unit_iff_is_unit_det</code></p>",
        "id": 244394140,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1625043278
    },
    {
        "content": "<p>Nice! Chris' suggestions should make this painless.</p>",
        "id": 244394188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625043318
    },
    {
        "content": "<p>Cool!</p>",
        "id": 244394217,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625043342
    },
    {
        "content": "<p>I am preparing a file about things relevant to some matrices operations. perhaps can add some stuff</p>",
        "id": 244394510,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625043502
    },
    {
        "content": "<p>I have some explict GLn stuff if you are interested.</p>",
        "id": 244394731,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1625043625
    },
    {
        "content": "<p>Thanks! I will ask you for help if I need.</p>",
        "id": 244394837,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625043717
    },
    {
        "content": "<p>Another important thing, is matrix similarity defined in matlib?</p>",
        "id": 244394941,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625043759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> I think in cases like this, it's better to write <code>is_unit A</code> instead of <code>[invertible A]</code>.</p>",
        "id": 244395190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625043916
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/invertible.html\">https://leanprover-community.github.io/mathlib_docs/algebra/invertible.html</a> for a (maybe a bit short) explanation.</p>",
        "id": 244395202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625043927
    },
    {
        "content": "<p><code>[invertible x]</code> is mostly intended for saying: I have a random ring, but please assume that 2 has an inverse.</p>",
        "id": 244395276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625043964
    },
    {
        "content": "<p>For generic invertible elements, it's better to use either <code>units R</code> or <code>is_unit r</code>, for <code>r : R</code></p>",
        "id": 244395391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625044043
    },
    {
        "content": "<p>The difference is not mathematical, of course.</p>",
        "id": 244395418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625044064
    },
    {
        "content": "<p>It has to do with type class inference, and other implementation details.</p>",
        "id": 244395435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625044079
    },
    {
        "content": "<p>Thanks for your suggestion Johan, the built-in lemmas about matrix inverse use <code>is_unit A.det</code>. <br>\n<code>is_unit A</code> would be fine to me. <code>is_unit A.det</code> just seems a little bit tedious and indirect. I just want to build a little bridge between it and <code>[invertible A]</code>.</p>",
        "id": 244396813,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625044953
    },
    {
        "content": "<p>The library research also does not return a result for this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">J</span> <span class=\"n\">J</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⬝</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>Hasn't this been established? anything related?</p>",
        "id": 244398567,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625045978
    },
    {
        "content": "<p>Try having a look at the <code>nonsingular_inverse.lean</code> file. Its where I found most of these things.</p>",
        "id": 244398813,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1625046134
    },
    {
        "content": "<p>It seems that I need to add a few more little bridges.</p>",
        "id": 244399415,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1625046461
    },
    {
        "content": "<p>You might like to take a look at my formalization of an intro to group theory course. <a href=\"https://github.com/pechersky/e222/blob/master/src/lecture01.lean\">https://github.com/pechersky/e222/blob/master/src/lecture01.lean</a></p>",
        "id": 244422243,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625059270
    },
    {
        "content": "<p>That file shows a lot of the ways mathlib can be used to work with elementary results about GLn</p>",
        "id": 244422294,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625059304
    }
]