[
    {
        "content": "<p>When one needs to do an induction on an object that depends on many things, how to have the induction hypothesis be made variable ?</p>\n<p>The context is the following :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and I want to prove a proposition for all <code>s : finset X</code> by induction on <code>s</code> or on its cardinality. However, the inductive step, if <code>s = a :: t</code>, needs to replace <code>M</code> and <code>X</code> (by <code>stabilizer M a</code> and <code>X</code> by <code>X \\ {a}</code>, about which I have the required <code>mul_action</code>).</p>\n<p>The problem is that  applying <code>finset.induction_on</code> furnishes an induction hypothesis that has not modified <code>M</code> and <code>X</code>, so is useless. </p>\n<p>I can of course introduce an auxiliary integer <code>n</code>, with hypothesis <code>s.card = n</code>, and doing induction on <code>n</code>, but then, in the induction step, I need to rewrite myself <code>s</code> as <code>a :: t</code>, etc.</p>",
        "id": 283177015,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1653144258
    },
    {
        "content": "<p>It sounds like the real proof is either (1) induction on <code>n = s.card</code>, with induction hypothesis quantifying over all groups and actions, as you suggest, or (2) induction on <code>s : finset X</code>, but then quantifying over all subgroups <code>M'</code> of <code>M</code> and subsets <code>X'</code> of <code>X</code> with <code>M'</code> acting on <code>X'</code>, and <code>s</code> contained in <code>X'</code>, etc</p>",
        "id": 283177187,
        "sender_full_name": "Reid Barton",
        "timestamp": 1653144492
    },
    {
        "content": "<p>If you are mostly concerned with the manual labor you have to do in the proof to get here you can also define your own induction principle that sets this environment up and tell the <code>induction</code> tactic to use that instead.</p>",
        "id": 283177217,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1653144554
    },
    {
        "content": "<p>What's the statement that includes <code>s</code>?</p>",
        "id": 283178435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653146068
    },
    {
        "content": "<p>Did you try <code>induction...generalizing M X</code>?</p>",
        "id": 283183312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653152889
    },
    {
        "content": "<p>I doubt that's going to work when the type of <code>s</code> depends on <code>X</code></p>",
        "id": 283186878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653158032
    },
    {
        "content": "<p>I found myself needing something similar earlier today: I wanted to prove something about all objects of a given type by complete induction on the \"height\" of those objects (with the height being an element of <code>ℕ</code>). I ended up abstracting out what I needed to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">height_induction_gen</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">ht</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ht</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">ht</span> <span class=\"n\">J</span> <span class=\"n\">using</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ind_hyp</span> <span class=\"n\">generalizing</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">K</span> <span class=\"n\">ht_lt_ht</span><span class=\"o\">,</span> <span class=\"n\">ind_hyp</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"n\">ht_lt_ht</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and then using a specialisation <code>height_induction</code> of that in an <code>induction J using height_induction</code> statement in my main proof. I dare say there's a better way, though. (I'm very much still learning Lean.)</p>",
        "id": 283187701,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1653159269
    },
    {
        "content": "<p>The kind of statement I wanted to prove is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">index_of_fixing_subgroup_of_multiply_pretransitive</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n     <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">fixing_subgroup</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">index</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"n\">s.card</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(possibly replacing the finset <code>s</code> by a set).</p>",
        "id": 283189290,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1653161359
    },
    {
        "content": "<p>But your inductive step involved alphas of smaller size, right? So you should be able to generalise X and M using tricks like the one Mark is demonstrating. Their alpha is your triple X,M,alpha</p>",
        "id": 283190555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653163267
    },
    {
        "content": "<p>Right, but there are also the instances that M is a group and X a mul_action, and I don't know how to write it up.<br>\nI started with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">lemma</span> <span class=\"n\">induction_on_finset_mul_action</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)(</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">sub_mul_action_of_stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n    <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub_mul_action_of_stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">G</span> <span class=\"n\">X</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">```</span>\n<span class=\"n\">but</span> <span class=\"n\">some</span> <span class=\"n\">type</span> <span class=\"n\">inference</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">work.</span>\n</code></pre></div>",
        "id": 283195740,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1653171206
    },
    {
        "content": "<p>You need the <code>by exactI</code> trick for <code>∀ [group G] [mul_action G X],</code> to work</p>",
        "id": 283196181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653171866
    },
    {
        "content": "<p>That is, <code>∀ [group G], by exactI ∀ [mul_action G X],</code></p>",
        "id": 283196249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653171967
    },
    {
        "content": "<p>Typeclasses after the colon don't get put into the typeclass system so you have to put them there manually, typically with an <code>I</code> tactic.</p>",
        "id": 283198350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653175456
    },
    {
        "content": "<p>It seems that I now need to add an exactI whenever I use something that refers to an instance…</p>",
        "id": 284061618,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1653599321
    },
    {
        "content": "<p>thankfully all this will be gone(tm) in lean4</p>",
        "id": 284062110,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653599613
    },
    {
        "content": "<p>And even this is a nightmare : I can't do <code>rw</code> anymore, I get strange error messages that <code>rw</code> or <code>refine</code>are unknown…</p>",
        "id": 284065299,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1653601387
    },
    {
        "content": "<p>Just in case a good soul passes nearby, and although this is not a MWE at all, here is the kind of stuff I wrote.<br>\nThe <code>rw [by exactI…</code> does not work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">jordan0</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hGα</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">is_preprimitive</span> <span class=\"n\">G</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hsn</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hsn'</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n.succ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hs_trans</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">is_pretransitive</span> <span class=\"o\">(</span><span class=\"n\">fixing_subgroup</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub_mul_action_of_fixing_subgroup</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)),</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">is_multiply_pretransitive</span> <span class=\"o\">(</span><span class=\"n\">subgroup.normal_closure</span> <span class=\"o\">(</span><span class=\"n\">fixing_subgroup</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hrec</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Initialization : n = 0</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- s = {a}</span>\n    <span class=\"n\">intros</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">G</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"n\">hsn</span> <span class=\"n\">hsn'</span> <span class=\"n\">hs_trans</span><span class=\"o\">,</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">hG_eq</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">hG.to_is_pretransitive.exists_smul_eq</span><span class=\"o\">,</span>\n\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hsa</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">card_eq_one_iff_is_singleton</span> <span class=\"n\">s</span> <span class=\"n\">hsn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hsa</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">hG'</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">is_multiply_pretransitive</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- up to here Lean stays silent, although I cannot be sure he's doing what I expect,</span>\n<span class=\"c1\">-- but on that point, it definitely complains.</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">stabilizer.is_multiply_pretransitive</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">hG.to_is_pretransitive</span><span class=\"o\">],</span>\n\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">is_pretransitive_iff_is_one_pretransitive</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- is_pretransitive (stabilizer G a) (sub_mul_action_of_stabilizer G α a),</span>\n      <span class=\"n\">refine</span> <span class=\"n\">is_pretransitive_of_bihom</span>\n        <span class=\"o\">(</span><span class=\"n\">sub_mul_action_of_fixing_subgroup_of_singleton_bihom</span> <span class=\"n\">G</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">function.bijective.surjective</span>\n          <span class=\"o\">(</span><span class=\"n\">sub_mul_action_of_fixing_subgroup_of_singleton_bihom_bijective</span> <span class=\"n\">G</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n        <span class=\"n\">hs_trans</span><span class=\"o\">,</span>\n\n\n    <span class=\"k\">let</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">fixing_subgroup</span> <span class=\"n\">G</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- stabilizer G a = fixing_subgroup G ({a} : set α),</span>\n      <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">ext</span> <span class=\"n\">g</span><span class=\"o\">,</span>  <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mem_fixing_subgroup_iff</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hg</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">set.mem_singleton</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mem_fixing_subgroup_iff</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">set.mem_singleton_iff.mp</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">hg</span> <span class=\"o\">},</span>\n\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n\n    <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">refine</span> <span class=\"n\">jordan0_init</span> <span class=\"n\">G</span> <span class=\"n\">hG</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_of_eq_of_lt</span> <span class=\"n\">_</span> <span class=\"n\">hsn'</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_pretransitive_iff_is_one_pretransitive</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">stabilizer.is_multiply_pretransitive</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"n\">hG.to_is_pretransitive</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hG'</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n<span class=\"o\">{</span>\n  <span class=\"c1\">-- Induction step</span>\n\n\n\n    <span class=\"gr\">sorry</span>\n<span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284065626,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1653601575
    },
    {
        "content": "<p>Does the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#resetI\">tactic#resetI</a> tactic help at all?</p>",
        "id": 284065902,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653601752
    },
    {
        "content": "<p>When you're in a tactic block, using <code>resetI</code> tells lean to consider all the things that you have in context that could be considered as instances, to actually be considered as instances.</p>",
        "id": 284066073,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653601876
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#introsI\">tactic#introsI</a> when you're introducing an instance</p>",
        "id": 284066351,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653602081
    },
    {
        "content": "<p>That does <code>resetI</code> for you under the hood.</p>",
        "id": 284066357,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653602086
    },
    {
        "content": "<p>You don't need it here, but <code>unfreezingI { induction n with n hrec }</code> is something that is useful if somehow there were instances whose types depend on <code>n</code>. It also effectively does <code>resetI</code> while also unfreezing the local instances -- for efficiency local instances are \"frozen\" in Lean 3.</p>",
        "id": 284066591,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653602250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/113489-new-members/topic/Complicated.20induction/near/284065299\">said</a>:</p>\n<blockquote>\n<p>And even this is a nightmare : I can't do <code>rw</code> anymore, I get strange error messages that <code>rw</code> or <code>refine</code>are unknown…</p>\n</blockquote>\n<p>Probably you've made a syntax error.</p>",
        "id": 284241673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653761831
    },
    {
        "content": "<p>Why the heck are you putting all those typeclasses after the colon? Why not put them all before the colon? I can't get anything to work, I don't know what <code>is_preprimitive</code> is.</p>",
        "id": 284241744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653761925
    },
    {
        "content": "<p>My guess is they're before the colon because Antoine wasn't aware of <code>unfreezingI {induction n generalizing G ... }</code></p>",
        "id": 284243416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653764419
    },
    {
        "content": "<p>Well, I managed to do the induction by hand, but this may deserve a general lemma.<br>\nI had to put some <code>exactI</code> in the statement, but after that, <code>introsI</code> did the job! Phew! (See <a href=\"https://github.com/leanprover-community/mathlib/tree/acl-Wielandt\">branch#acl-Wielandt</a>)</p>",
        "id": 284407796,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1653946378
    },
    {
        "content": "<p>Can you link to a specific line in that branch?</p>",
        "id": 284410830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653950046
    },
    {
        "content": "<p>lol 9000 lines :-) Antoine it will start rotting if you're not careful. They change the definition of groups occasionally, remember?</p>",
        "id": 284417090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653958545
    },
    {
        "content": "<p>For example : <a href=\"https://github.com/leanprover-community/mathlib/blob/3804896f0d9de686a81005b5928371da5ec598d3/acl-sandbox/group_theory/multiple_trans_specific.lean#L1120\">https://github.com/leanprover-community/mathlib/blob/3804896f0d9de686a81005b5928371da5ec598d3/acl-sandbox/group_theory/multiple_trans_specific.lean#L1120</a></p>",
        "id": 284432429,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1653978354
    },
    {
        "content": "<p>Now that the proof works, I need to tidy everything up and push PRs. <br>\nThis will require : uniform naming of lemmas, cleaner APIs,  but in the next days, I have some works to grade…</p>",
        "id": 284432532,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1653978436
    },
    {
        "content": "<p>.</p>",
        "id": 284776994,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1654190517
    },
    {
        "content": "<p>I have a situation that looks like this, where I want to do induction on dimension:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module.finite.basic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>After lots of searching and trial and error I figured out I can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">h_dim</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">module.rank</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"n\">using</span> <span class=\"n\">nat.rec_on</span>\n  <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">V</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>Is this the correct way? I can't find this <code>induction h : something</code> type of thing in the tactics docs.</p>",
        "id": 286484151,
        "sender_full_name": "Bart Michels",
        "timestamp": 1655469990
    },
    {
        "content": "<p>Also, is it true that Lean will always figure out it needs to <code>generalize</code> everything that depends on <code>V</code> as well (here, <code>f</code>) ? Edit: ok surely.</p>",
        "id": 286484161,
        "sender_full_name": "Bart Michels",
        "timestamp": 1655469997
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#induction\">tactic#induction</a> mentioned \"induction h : t will introduce an equality of the form h : t = C x y, asserting that the input term is equal to the current constructor case, to the context.\" but not so much why that would be useful</p>",
        "id": 286484444,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1655470166
    }
]