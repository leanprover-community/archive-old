[
    {
        "content": "<p>How do I call this function?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 207500636,
        "sender_full_name": "Iocta",
        "timestamp": 1597912890
    },
    {
        "content": "<p>aha, langle/rangle</p>",
        "id": 207501015,
        "sender_full_name": "Iocta",
        "timestamp": 1597913132
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">×</span> <span class=\"n\">int</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span> <span class=\"o\">,</span><span class=\"mi\">2</span> <span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 207501098,
        "sender_full_name": "Iocta",
        "timestamp": 1597913165
    },
    {
        "content": "<p><code>\\langle</code> / <code>\\&lt;</code> and <code>\\rangle</code> / <code>\\&gt;</code> work for all inductive types with one constructor, but <code>×</code> has special syntax support in Lean so you can write tuples \"naturally\":</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207502126,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1597913914
    }
]