[
    {
        "content": "<p>I am trying to use maps from <code>fin n</code> to represent dependently typed tuples. I am not sure whether this is good idea, but in any case, I got stuck at writing the following function, which should split a tuple of length <code>(n + m)</code> into one of length <code>n</code> and one of length <code>m</code>. The problem is, the tuples being dependent, I can't get the types to match. Any solutions to this? (I would also be happy with a recommendation on a better way to work with depend tuples, if that's the case).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">finsplit</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin.cast_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    α : Π {n : ℕ}, fin n → Type,</span>\n<span class=\"cm\">    n m : ℕ,</span>\n<span class=\"cm\">    f : Π (i : fin (n + m)), α i,</span>\n<span class=\"cm\">    i : fin n,</span>\n<span class=\"cm\">    j : fin (n + m) := ⇑(fin.cast_le _) i,</span>\n<span class=\"cm\">    this : α j := f j</span>\n<span class=\"cm\">    ⊢ α i</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"c1\">--this should be the result, but of course, the types don't match</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235469065,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618991605
    },
    {
        "content": "<p>In a way <a href=\"https://leanprover-community.github.io/mathlib_docs/find/d_array\">docs#d_array</a> is such a dependent tuple, but I don't think this function is in its API</p>",
        "id": 235469261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618991716
    },
    {
        "content": "<p>Does lean even accept the type of that definition?</p>",
        "id": 235469411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618991802
    },
    {
        "content": "<p>I get no complaints regarding the type signature. Why wouldn't it accept it?</p>",
        "id": 235470041,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618992127
    },
    {
        "content": "<p><code>d_array</code> seems to have a pretty good API for fixed <code>n</code>, indeed not so much to relate tuples of different lengths. I think it's still better than to start from scratch.</p>",
        "id": 235470341,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618992288
    },
    {
        "content": "<p>Because <code>\\a</code> is defined as indexed by <code>fin (n+m)</code> but you index it with <code>fin n</code></p>",
        "id": 235470355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618992299
    },
    {
        "content": "<p>Consider the tuples where the i'th item is a <code>vector unit i</code></p>",
        "id": 235470507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618992367
    },
    {
        "content": "<p>But those will be different <code>\\alpha</code>s, because it also takes an implicit natural argument. So the first is <code>@\\a (n +m) ...</code> and the second is <code>@\\a n</code>.</p>",
        "id": 235470652,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618992439
    },
    {
        "content": "<p>But you don't have anything to make those compatible</p>",
        "id": 235470828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618992514
    },
    {
        "content": "<p>You need <code>@\\a (n + m) 0 = @\\a n 0</code> and <code>@\\a (n + m) n = @\\a m 0</code> etc for your definition to be possible</p>",
        "id": 235470989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618992604
    },
    {
        "content": "<p>(but your explanation is correct for why there is not a type error after all)</p>",
        "id": 235471026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618992623
    },
    {
        "content": "<p>Yeah, that's true, I didn't realize that. Thanks</p>",
        "id": 235472041,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618993190
    }
]