[
    {
        "content": "<p>I've started trying to write down this quasi-isometry stuff that I want to attack. The first step, I thought, is probably to write down some properties of metric spaces. I've hit some roadblocks, and thought it could be useful to get some feedback.<br>\nHere is the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.ordered.compact</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.emetric_space</span>\n\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">function</span> <span class=\"n\">set</span> <span class=\"n\">fintype</span> <span class=\"n\">function</span> <span class=\"n\">emetric_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">space</span>\n\n  <span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_locally_finite</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">emetric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_uniformly_locally_finite_with</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">is_locally_finite</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"o\">((</span><span class=\"n\">emetric.ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_uniformly_locally_finite</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_uniformly_locally_finite_with</span> <span class=\"n\">α</span> <span class=\"n\">k</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_connected_with</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n        <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">fin.mk</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span>\n        <span class=\"n\">w</span>  <span class=\"o\">(</span><span class=\"n\">fin.mk</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span><span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"bp\">∧</span>   <span class=\"c1\">-- not sure how to make that clean</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span> <span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"bp\">|</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_geodesic_with</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n        <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">fin.mk</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span>\n        <span class=\"n\">w</span>  <span class=\"o\">(</span><span class=\"n\">fin.mk</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span><span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"bp\">∧</span>   <span class=\"c1\">-- lol</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span> <span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">|</span> <span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">space</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">subset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_dense_in_with</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">⦃</span><span class=\"n\">y</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_dense_with</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">is_coarsely_dense_in_with</span> <span class=\"n\">ε</span> <span class=\"n\">s</span> <span class=\"n\">s</span><span class=\"c1\">-- (set.univ α) TODO !!! replace s by set.univ α in such a way that it typechecks</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_dense_in</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">is_coarsely_dense_in_with</span> <span class=\"n\">ε</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_dense</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">is_coarsely_dense_with</span> <span class=\"n\">ε</span> <span class=\"n\">s</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_net</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_coarsely_dense</span> <span class=\"n\">s</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_separated_with</span>  <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">⦃</span><span class=\"n\">y</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"n\">δ</span>\n  <span class=\"c1\">-- We take &gt; δ to get a better \"duality\" between coarsely separated and dense</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_separated</span>  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">,</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span>  <span class=\"n\">is_coarsely_separated_with</span> <span class=\"n\">δ</span> <span class=\"n\">s</span>\n  <span class=\"c1\">-- We need to assume δ&gt;0 because δ=0 would just imply that s (with induced metric) is an emetric space</span>\n  <span class=\"c1\">-- rather than a pseudo-emetric space</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_separated_net_in_with</span>  <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">is_coarsely_separated_with</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">is_coarsely_dense_in_with</span> <span class=\"n\">ε</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_separated_net_with</span>  <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">is_coarsely_separated_with</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">is_coarsely_dense_with</span> <span class=\"n\">ε</span> <span class=\"n\">s</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_separated_net_in</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">is_coarsely_separated</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">is_coarsely_dense_in</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">is_coarsely_separated_net</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">is_coarsely_separated</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">is_coarsely_dense</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n\n\n  <span class=\"c1\">-- Facts related to density</span>\n  <span class=\"kn\">namespace</span> <span class=\"n\">is_coarsely_dense_in_with</span>\n\n    <span class=\"kd\">lemma</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">is_coarsely_dense_in_with</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"n\">s</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">xs</span><span class=\"o\">,},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,}</span>\n    <span class=\"kd\">end</span>\n\n    <span class=\"kd\">lemma</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">ε'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n      <span class=\"n\">is_coarsely_dense_in_with</span> <span class=\"n\">ε</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"bp\">→</span>  <span class=\"n\">is_coarsely_dense_in_with</span> <span class=\"n\">ε'</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span>\n      <span class=\"n\">is_coarsely_dense_in_with</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"n\">ε'</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">t</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rintros</span> <span class=\"n\">r_in_s</span> <span class=\"n\">s_in_t</span><span class=\"o\">,</span>\n      <span class=\"n\">rintros</span> <span class=\"n\">z</span> <span class=\"n\">zt</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">s_in_t</span> <span class=\"n\">zt</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">ys</span><span class=\"o\">,</span><span class=\"n\">yd</span><span class=\"o\">⟩</span> <span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">r_in_s</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xr</span><span class=\"o\">,</span><span class=\"n\">xd</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">xr</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"k\">calc</span> <span class=\"n\">edist</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">z</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist_triangle</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n                   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>           <span class=\"bp\">+</span> <span class=\"n\">ε'</span>        <span class=\"o\">:</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--  by linarith [xd,yd] -- sorry -- best way here?</span>\n      <span class=\"o\">}</span>\n    <span class=\"kd\">end</span>\n\n    <span class=\"kd\">lemma</span> <span class=\"n\">weaken</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">ε'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">}</span> <span class=\"o\">:</span>\n      <span class=\"n\">is_coarsely_dense_in_with</span> <span class=\"n\">ε</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span>  <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">s'</span> <span class=\"bp\">→</span>  <span class=\"n\">t'</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">→</span>  <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"n\">ε'</span> <span class=\"bp\">→</span>\n      <span class=\"n\">is_coarsely_dense_in_with</span> <span class=\"n\">ε'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">s_in_t</span> <span class=\"n\">s_sub_s'</span> <span class=\"n\">t'_sub_t</span> <span class=\"n\">ε_le_ε'</span> <span class=\"o\">,</span>\n      <span class=\"n\">rintros</span> <span class=\"n\">z</span> <span class=\"n\">zt'</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">zt</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">t'_sub_t</span> <span class=\"n\">zt'</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">s_in_t</span> <span class=\"n\">zt</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xgood</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">xgood</span> <span class=\"k\">with</span> <span class=\"n\">xs</span> <span class=\"n\">xd</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">xs'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s_sub_s'</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">xs'</span><span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"k\">calc</span> <span class=\"n\">edist</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>  <span class=\"o\">:</span> <span class=\"n\">xd</span>\n                   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">ε'</span> <span class=\"o\">:</span> <span class=\"n\">ennreal.coe_le_coe.mpr</span> <span class=\"n\">ε_le_ε'</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n\n\n    <span class=\"kd\">end</span>\n\n  <span class=\"kd\">end</span> <span class=\"n\">is_coarsely_dense_in_with</span>\n\n  <span class=\"kn\">namespace</span> <span class=\"n\">coarsely_separated_net</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">is_max_coarsely_separated_in_with</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">is_coarsely_separated_with</span> <span class=\"n\">δ</span> <span class=\"n\">s</span>  <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">→</span>  <span class=\"n\">is_coarsely_separated_with</span> <span class=\"n\">δ</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n\n    <span class=\"kd\">lemma</span> <span class=\"n\">max_coarsely_separated_in_is_net</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">is_max_coarsely_separated_in_with</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">is_coarsely_separated_net_in_with</span> <span class=\"n\">δ</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"n\">S</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">s_sub_S</span><span class=\"o\">,</span> <span class=\"n\">s_sep</span><span class=\"o\">,</span> <span class=\"n\">s_max</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">s_sep</span><span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">xS</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">s.insert</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">x_notin_s</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n          <span class=\"n\">by_contradiction</span> <span class=\"n\">x_in_s</span><span class=\"o\">,</span>\n          <span class=\"c1\">-- and then?</span>\n          <span class=\"k\">have</span> <span class=\"n\">lol</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">H</span> <span class=\"n\">x_in_s</span><span class=\"o\">,</span>\n          <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- and then?</span>\n\n        <span class=\"o\">},</span> <span class=\"c1\">-- use h telling us that x is far from all elements of s</span>\n        <span class=\"k\">have</span> <span class=\"n\">s_sub_t</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">subset_insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">s_ne_t</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">t</span> <span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">ne_insert_of_not_mem</span> <span class=\"n\">s</span> <span class=\"n\">x_notin_s</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">t_sub_S</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">insert_subset.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">xS</span><span class=\"o\">,</span> <span class=\"n\">s_sub_S</span><span class=\"o\">⟩,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_coarsely_separated_with</span> <span class=\"n\">δ</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">xt</span><span class=\"o\">,</span>\n          <span class=\"n\">rintros</span> <span class=\"n\">y</span> <span class=\"n\">yt</span><span class=\"o\">,</span>\n\n          <span class=\"c1\">-- apply forall_insert_of_forall,</span>\n          <span class=\"c1\">-- actually need set.forall_insert_of_forall</span>\n          <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"n\">s_ne_t</span> <span class=\"o\">(</span><span class=\"n\">s_max</span> <span class=\"n\">t</span> <span class=\"n\">s_sub_t</span> <span class=\"n\">t_sub_S</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n      <span class=\"o\">}</span>\n    <span class=\"kd\">end</span>\n\n    <span class=\"kd\">lemma</span> <span class=\"n\">exists_max_coarsely_separated_in_with</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_max_coarsely_separated_in_with</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"n\">S</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span> <span class=\"c1\">-- Zorn</span>\n    <span class=\"kd\">end</span>\n\n    <span class=\"kd\">lemma</span> <span class=\"n\">exists_coarsely_separated_net_in_with</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_coarsely_separated_net_in_with</span> <span class=\"n\">δ</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"n\">S</span>\n    <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">exists_max_coarsely_separated_in_with</span> <span class=\"n\">δ</span> <span class=\"n\">S</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s_sub_S</span><span class=\"o\">,</span> <span class=\"n\">s_sep</span><span class=\"o\">,</span> <span class=\"n\">s_max_sep</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">use</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">s_sub_S</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">max_coarsely_separated_in_is_net</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"n\">S</span> <span class=\"o\">⟨</span><span class=\"n\">s_sub_S</span><span class=\"o\">,</span> <span class=\"n\">s_sep</span><span class=\"o\">,</span> <span class=\"n\">s_max_sep</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"kd\">end</span>\n  <span class=\"kd\">end</span> <span class=\"n\">coarsely_separated_net</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subset</span>\n</code></pre></div>\n<p>There are a few <code>sorry</code>s that I'd be glad to get help on. Also, since I'd eventually like to have it merged, any more consequent critics/discussion would be welcome. I can also describe my further plans!</p>",
        "id": 270344171,
        "sender_full_name": "bottine",
        "timestamp": 1643786841
    },
    {
        "content": "<p>I don't know anything about metric spaces. But I do know that mathlib heavily relies on filters, and I expect that a bunch of these concepts that you are defining would have to be connected to the filter library so that these developments play well together.</p>\n<blockquote>\n<p>Also, since I'd eventually like to have it merged, any more consequent critics/discussion would be welcome.</p>\n</blockquote>\n<p>Minor stylistic issue: we don't indent declarations inside sections/namespaces. So the word <code>def</code> or <code>lemma</code> always appears flush left. (There are some very old files in mathlib that don't do this. We should fix that.)</p>",
        "id": 270345176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643787727
    },
    {
        "content": "<p><code>Minor stylistic issue: we don't indent declarations inside sections/namespaces. So the word def or lemma always appears flush left. (There are some very old files in mathlib that don't do this. We should fix that.)</code> Noted!</p>",
        "id": 270345317,
        "sender_full_name": "bottine",
        "timestamp": 1643787866
    },
    {
        "content": "<p>Concerning filters, I'm not really sure: As far as I know/see it, these coarse notions on metric spaces don't have much topological content to them… but maybe I'm misled here</p>",
        "id": 270345386,
        "sender_full_name": "bottine",
        "timestamp": 1643787950
    },
    {
        "content": "<p>You should also prove all the different implications between these notions. And take advantage of dot-notation in the names.<br>\nIf you prove <code>is_foo → is_bar</code>, then call the lemma <code>is_foo.is_bar</code>. Because then you can use it as follows: if you have an assumption <code>h : is_foo</code> somewhere, and you want <code>is_bar</code>, you can simply write <code>h.is_bar</code>.</p>",
        "id": 270345736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643788241
    },
    {
        "content": "<p>Should trivial implications also be proved? As in, if I define a property extending another one, the \"weakening\" deserves a lemma? Similarly, I don't know how many variations on a definition should be provided (say being dense <em>relative to</em> instead of just being dense, or the <code>_with</code> versions, etc). In a sense, I feel like it can be a waste to define every single minor variation and implication, if I don't know that I will use them.</p>",
        "id": 270346177,
        "sender_full_name": "bottine",
        "timestamp": 1643788563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">bottine</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/270346177\">said</a>:</p>\n<blockquote>\n<p>Should trivial implications also be proved? As in, if I define a property extending another one, the \"weakening\" deserves a lemma?</p>\n</blockquote>\n<p>Library users will thank you if you do that for them.</p>",
        "id": 270346302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643788659
    },
    {
        "content": "<p>If you look at things like <code>continuous</code> you will see that there are variations <code>continuous_at</code>, <code>continuous_within</code> and same for <code>deriv</code> etc... And systematic ways of passing from one to the other. It takes a bit of effort to set this up, but afterwards it is pleasant to use.</p>",
        "id": 270346405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643788737
    },
    {
        "content": "<p>There are some things that make sense for any topological spaces in this. There are also many things that make sense in any uniform space but I'm not sure this is worth the trouble. I will help you clean this but I don't have time right now. Please make sure you follow the <a href=\"https://leanprover-community.github.io/contribute/style.html\">style guide</a> and repost your code.</p>",
        "id": 270351582,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643792032
    },
    {
        "content": "<p>The right generality are not uniform spaces, but <em>coarse</em> spaces. <br>\nCoarse structures (like the ones induces by metric spaces) are \"dual\" to uniform spaces: this measn that rather than being filters thet are \"cofilters\", so to speak. One can go about it by defining them via the \"cocoarse filter\" instead: in the metric case, these are the set of subsets of X times X whose complements have bounded diameter. I actually defined that a while ago if you think it's good to take that approach.</p>",
        "id": 270351708,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1643792099
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.lift</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.subset_properties</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.rewrite_search.frontend</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">uniformity</span> <span class=\"n\">topological_space</span> <span class=\"n\">big_operators</span> <span class=\"n\">filter</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">eqn_compiler.zeta</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coid_rel</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">p.1</span> <span class=\"bp\">≠</span> <span class=\"n\">p.2</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">nmem_coid_rel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">@</span><span class=\"n\">coid_rel</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">coid_rel_subset</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">coid_rel</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subset_def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">forall_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">contrapose</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,},</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">not_diag</span> <span class=\"n\">b</span> <span class=\"n\">in_s</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">not_diag</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">in_s</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">co_of_coid_id_rel</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coid_rel</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">id_rel</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coid_rel</span> <span class=\"n\">id_rel</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The composition of corelations -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cocomp_rel</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">r₁</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">r₂</span><span class=\"o\">}</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">\"infix ` □ `:55 := cocomp_rel\"</span> <span class=\"k\">in</span> <span class=\"n\">coarse</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mem_cocomp_rel</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">r₁</span> <span class=\"bp\">□</span> <span class=\"n\">r₂</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">r₁</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">not_mem_cocomp_rel</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">r₁</span> <span class=\"bp\">□</span> <span class=\"n\">r₂</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">r₁</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">r₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">not_in_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">not_in_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">not_in_comp</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">either_r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">r₁</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">r₂</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">or_iff_not_imp_left.mpr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">exists_in_neither</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">exists_in_neither</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">not_or_distrib.mpr</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">co_of_cocomp_eq_comp_of_co</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">□</span> <span class=\"n\">r₂</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">r₁</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">○</span> <span class=\"n\">r₂</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iff.rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">not_comp_iff_cocomp_of_co</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">○</span> <span class=\"n\">r₂</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">r₁</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">□</span> <span class=\"n\">r₂</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">compl_inj_iff.mp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">boolean_algebra.to_core</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"c1\">-- why is this needed?</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">swap_coid_rel</span> <span class=\"o\">:</span> <span class=\"n\">prod.swap</span> <span class=\"bp\">''</span> <span class=\"n\">coid_rel</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">coid_rel</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.ext</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">image_swap_eq_preimage_swap</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">monotone_cocomp_rel</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">□</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">monotone</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">cocomp_rel</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">h</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hf</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hg</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n\n\n<span class=\"kd\">@[mono]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cocomp_rel_mono</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">⊆</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">□</span> <span class=\"n\">k</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">□</span> <span class=\"n\">g</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">cocomp_rel</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_mk_nmem_cocomp_rel</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">□</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coid_cocomp_rel</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">coid_rel</span> <span class=\"bp\">□</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">compl_inj_iff.mp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">co_of_cocomp_eq_comp_of_co</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cocomp_rel_assoc</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">□</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">□</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">□</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">□</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">compl_inj_iff.mp</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">co_of_cocomp_eq_comp_of_co</span><span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">comp_rel_assoc</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subset_cocomp_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">coid_rel</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">□</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"n\">xy_in</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">xy_in</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">xy_in</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">coarse_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cocoarse</span>   <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">corefl</span>     <span class=\"o\">:</span> <span class=\"n\">cocoarse</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓟</span> <span class=\"n\">coid_rel</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">symm</span>       <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">prod.swap</span> <span class=\"n\">cocoarse</span> <span class=\"n\">cocoarse</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cocomp</span>       <span class=\"o\">:</span> <span class=\"n\">cocoarse</span> <span class=\"bp\">≤</span> <span class=\"n\">cocoarse.lift'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">□</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coarse_space.mk'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">corefl</span> <span class=\"o\">:</span> <span class=\"n\">coid_rel</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">prod.swap</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cocomp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">□</span> <span class=\"n\">r</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coarse_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">ru</span><span class=\"o\">,</span> <span class=\"n\">mem_of_superset</span> <span class=\"n\">corefl</span> <span class=\"n\">ru</span><span class=\"o\">,</span> <span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_lift'_sets</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">hcomp</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">□</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">cocomp</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mem_of_superset</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hcomp</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">monotone_cocomp_rel</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coarse_space.eq</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"o\">:</span> <span class=\"n\">coarse_space</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">u₁.cocoarse</span> <span class=\"bp\">=</span> <span class=\"n\">u₂.cocoarse</span> <span class=\"bp\">→</span> <span class=\"n\">u₁</span> <span class=\"bp\">=</span> <span class=\"n\">u₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>  <span class=\"o\">⟨</span><span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">coarse_space</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">coarse_space</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">coarse_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cocoarse</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">coarse_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">coarse_space.cocoarse</span> <span class=\"n\">α</span> <span class=\"n\">s</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation `𝓒'` := cocoarse\"</span> <span class=\"k\">in</span> <span class=\"n\">cocoarse</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">coarse</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">coarse_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">compl</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">𝓒'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation `𝓒` := coarse\"</span> <span class=\"k\">in</span> <span class=\"n\">cocoarse</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_coarse</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓒</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓒'</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h_h_left</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">simpa</span><span class=\"o\">,},</span>\n  <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"n\">simpa</span><span class=\"o\">,}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cocoarse_le_corefl</span> <span class=\"o\">:</span> <span class=\"bp\">𝓒'</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓟</span> <span class=\"n\">coid_rel</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">coarse_space.corefl</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">corefl_mem_cocoarse</span> <span class=\"o\">:</span>\n  <span class=\"n\">coid_rel</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓒'</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">coarse_space.corefl</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_cocoarse_of_eq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓒'</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"n\">coid_rel</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">corefl_mem_cocoarse</span><span class=\"o\">},</span>\n  <span class=\"n\">simpa</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">symm_le_cocoarse</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.swap</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓒'</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">𝓒'</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coarse_space.symm</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cocoarse_le_cocomp</span> <span class=\"o\">:</span> <span class=\"bp\">𝓒'</span> <span class=\"n\">α</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">𝓒'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">□</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coarse_space.cocomp</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto_swap_cocoarse</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.swap</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓒'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓒'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">symm_le_cocoarse</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cocomp_mem_cocoarse_sets</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓒'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">□</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓒'</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cocoarse_le_cocomp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_lift'_sets</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,},</span>\n  <span class=\"o\">{</span><span class=\"n\">refine</span> <span class=\"n\">monotone_cocomp_rel</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,}</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">coarse_space</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_cocoarse_dist'</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">r</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"bp\">|</span><span class=\"n\">r</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">},</span>  <span class=\"bp\">𝓟</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_binfi_of_directed</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">directed_on</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">𝓟</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p.fst</span> <span class=\"n\">p.snd</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span><span class=\"n\">o</span> <span class=\"n\">ge</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">r₁</span> <span class=\"n\">h₁</span> <span class=\"n\">r₂</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">max</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">show</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subset_def</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">use</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">contrapose</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n\n<span class=\"kd\">instance</span> <span class=\"n\">coarse_of_bounded_space</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">coarse_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cocoarse</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">r</span><span class=\"bp\">∈</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"bp\">|</span><span class=\"n\">r</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"bp\">𝓟</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">)),</span>\n  <span class=\"n\">corefl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">lm</span> <span class=\"o\">:</span> <span class=\"bp\">𝓟</span> <span class=\"o\">({</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p.fst</span> <span class=\"n\">p.snd</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝓟</span> <span class=\"n\">coid_rel</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">principal_le_iff</span><span class=\"o\">],</span>\n      <span class=\"n\">intros</span> <span class=\"n\">V</span> <span class=\"n\">hV</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_principal</span> <span class=\"n\">at</span> <span class=\"n\">hV</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">subset.trans</span> <span class=\"n\">_</span> <span class=\"n\">hV</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">nmem_coid_rel</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_eq</span><span class=\"o\">],</span>\n      <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"n\">dist_ne_zero</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">trans</span> <span class=\"n\">_</span> <span class=\"n\">lm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">filter.le_def</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span> <span class=\"n\">mem_cocoarse_dist'</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">zero_le_one</span><span class=\"o\">,</span> <span class=\"n\">prod.forall</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_eq</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">compl_subset_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">in_s</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">in_s</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">mem_map</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_cocoarse_dist'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">forall_swap</span><span class=\"o\">,</span>\n      <span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">dist_comm</span><span class=\"o\">},</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">cocomp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">filter.mem_lift'_sets</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"n\">s</span> <span class=\"bp\">□</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">monotone_cocomp_rel</span> <span class=\"n\">monotone_id</span> <span class=\"n\">monotone_id</span><span class=\"o\">},</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cocomp_subset</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">comp_subset</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">○</span> <span class=\"n\">t</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">compl_subset_compl</span><span class=\"o\">,</span> <span class=\"n\">simpa</span><span class=\"o\">,},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_cocoarse_dist'</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r_ge_0</span><span class=\"o\">,</span> <span class=\"n\">t_has_diam</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">two_r_ge_0</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">two_r_ge_0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">p</span> <span class=\"n\">in_compl_s</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">comp_subset</span> <span class=\"n\">in_compl_s</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">xz_in_compl_t</span><span class=\"o\">,</span> <span class=\"n\">zy_in_compl_t</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">p.fst</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">dist</span> <span class=\"n\">z</span> <span class=\"n\">p.snd</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">t_has_diam</span> <span class=\"n\">xz_in_compl_t</span><span class=\"o\">,</span> <span class=\"n\">t_has_diam</span> <span class=\"n\">zy_in_compl_t</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">p.1</span> <span class=\"n\">z</span> <span class=\"n\">p.2</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cocoarse</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_cocoarse_dist</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓒'</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">unfold_prod</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">unfold_prod</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mem_cocoarse_dist'</span><span class=\"o\">],</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_coarse_dist</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓒</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_coarse</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_cocoarse_dist</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cocoarse_basis_dist</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">𝓒'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"bp\">&gt;</span> <span class=\"n\">r</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter.has_basis_iff</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_cocoarse_dist</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">compl_t_bounded_by_r</span><span class=\"o\">⟩,</span> <span class=\"n\">use</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">compl_subset_compl</span><span class=\"o\">,</span> <span class=\"n\">subset_def</span><span class=\"o\">],</span>\n    <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r_ge_0</span><span class=\"o\">,</span> <span class=\"n\">coball_subset_t</span><span class=\"o\">⟩,</span> <span class=\"n\">use</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">compl_subset_compl</span><span class=\"o\">,</span> <span class=\"n\">subset_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">coball_subset_t</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mem_compl_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270351918,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1643792203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Great, thanks! Shall I repost here?</p>",
        "id": 270352079,
        "sender_full_name": "bottine",
        "timestamp": 1643792301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"465995\">@Daniel Roca González</span> Interesting… do you have literature on the subject? Also, Does this greater generality make my code redundant? how do you see both fitting together? I'm somewhat wary of \"generality creep\", and would rather have something basic up and running than chasing the best interface, though it's probably also better not to rush towards the first construction I stumble upon.</p>",
        "id": 270352339,
        "sender_full_name": "bottine",
        "timestamp": 1643792437
    },
    {
        "content": "<p>(I'd particularly appreciate literature on this duality with uniform spaces.)</p>",
        "id": 270352835,
        "sender_full_name": "bottine",
        "timestamp": 1643792692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461830\">@bottine</span> is this work just for a project you're doing to learn Lean or are you thinking of ultimately PRing things to mathlib?</p>",
        "id": 270355371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643793985
    },
    {
        "content": "<p>I'd hope to PR, eventually, if I manage to write PR-able code. This current code is a mix of learning the basics and trying to set up grounds for doing GGT.</p>",
        "id": 270355931,
        "sender_full_name": "bottine",
        "timestamp": 1643794259
    },
    {
        "content": "<p>I think we should try to prove a couple of things with both the low-tech version and the fancy version and see whether this makes any difference. If the fancy version is harder to use then we should definitely stick to the low-tech one. In the case of uniform spaces many metric proofs are actually easier in the fancy setup, because it gets rid of irrelevant stuff.</p>",
        "id": 270360881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643796813
    },
    {
        "content": "<p>You should also make sure <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> is aware of your efforts. He formalized a lot of metric geometry in Isabelle (including Gromov hyperbolicity).</p>",
        "id": 270363887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643798361
    },
    {
        "content": "<p>Yes, I am subscribed to this thread :-)</p>",
        "id": 270364260,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643798569
    },
    {
        "content": "<p>OK, I'm slowly cleaning up the <code>space.lean, coarse_lipschitz.lean, coarse_antilipschitz.lean</code> files here: <a href=\"https://github.com/bottine/mathlib/tree/quasi_isometry/src/topology/metric_space/coarse\">https://github.com/bottine/mathlib/tree/quasi_isometry/src/topology/metric_space/coarse</a> . The plan is to have everything needed to easily show the equivalence between the different definitions of quasi-isometries.</p>",
        "id": 270816273,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644052876
    },
    {
        "content": "<p>Did you read the style guide? It would help discussing interesting things if you could fix indentation, braces, dangling colon-equal etc.</p>",
        "id": 270817579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644054953
    },
    {
        "content": "<p>I've also been doing a skeleton for the abstract coarse space version and proven that metric spaces are coarse. (A \"coarse space\" is an abstract definition of a space with a notion of sets of bounded diameter).</p>",
        "id": 270818750,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644056635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/270817579\">said</a>:</p>\n<blockquote>\n<p>Did you read the style guide? It would help discussing interesting things if you could fix indentation, braces, dangling colon-equal etc.</p>\n</blockquote>\n<p>I did. I meant to ping you once things are clean but to share my progress in the meantime. Sorry for the confusion!</p>",
        "id": 270818933,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644056889
    },
    {
        "content": "<p>One way to talk about quasiisometries would be as follows: in general a coarse equivalence is not QI, but a coarse equivalence between geodesic spaces is, but most coarse spaces are coarse equivalent to a geodesic space, so we get QI equivalences for free. The problem is that the proof of this may be out of reach (we need topological versions of graphs).</p>",
        "id": 270818953,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644056945
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/coarse_structure_ggt/src/topology/coarse\">https://github.com/leanprover-community/mathlib/tree/coarse_structure_ggt/src/topology/coarse</a></p>",
        "id": 270818957,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644056958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"465995\">@Daniel Roca González</span> Re. \"a coarse equivalence between geodesic space is [QI]\": If that is because the \"coarse control functions\" between your spaces are then necessarily affine, then I guess you don't need geodesicity, but just that any distance is realized by a \"coarse walk\", no?</p>",
        "id": 270819100,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644057223
    },
    {
        "content": "<p>If by a \"coarse walk\" you mean a QI path from A to B, then yes I think so. If you mean a coarse map from A to B then maybe not.</p>",
        "id": 270819298,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644057498
    },
    {
        "content": "<p>I mean that there exists some K&gt;0 such that for any two points x,y in the space at distance d, there exists a sequence of something like d/K points each at distance at most  K from their predecessor/successor, starting with x, and ending with y.</p>",
        "id": 270819384,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644057635
    },
    {
        "content": "<p>Yes, I'm pretty sure that's the same as being QI to a geodesic space, not coarse equivalent.<br>\nA coarse map is a map which is proper and bornologous, which in a metric space means:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">metric.coarse_proper_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coarse.proper</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">emetric.diam</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span> <span class=\"bp\">→</span> <span class=\"n\">emetric.diam</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">metric.bornologous_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coarse.bornologous</span> <span class=\"n\">f</span>\n  <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 270819558,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644057894
    },
    {
        "content": "<p>yeah, I think that would make things easier, you're right. I'll see if it's actually enough.</p>",
        "id": 270819950,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644058476
    },
    {
        "content": "<p>Well, if the principal goal is GGT, then it's reasonable to work with the assumption that all spaces are coarsely geodesic/graphs/whatever, so I wouldn't reject the idea of dropping the pedestrian approach I tried.</p>",
        "id": 270819987,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644058543
    },
    {
        "content": "<p>yes, that sounds good. I'll try to prove that being coarsely geodesic is enough.</p>",
        "id": 270820247,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644058826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what do you think of the definition of coarsely geodesic in Rémis branch? Can it be simplified in some way? It's quite convoluted, but I can't see how to simplify it...<br>\n<a href=\"https://github.com/bottine/mathlib/blob/quasi_isometry/src/topology/metric_space/coarse/space.lean\">https://github.com/bottine/mathlib/blob/quasi_isometry/src/topology/metric_space/coarse/space.lean</a></p>",
        "id": 270820340,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644058932
    },
    {
        "content": "<p>Re the definition I used: I think it would be cleaner to say that \\alpha is coarsely geodesic if there exists <code>(K,L,k,l)</code> such that for any pair of points x y, there exists a <code>(K,L,k,l)</code> quasi-isometric embedding from a path graph to the space with end points  x and y. This is closest to \"coarsifying\" the strict definition I guess.</p>",
        "id": 270820538,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644059298
    },
    {
        "content": "<p>But I thought it might make more sense to have a definition without needing to define quasi-isometric embeddings first.</p>",
        "id": 270820547,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644059330
    },
    {
        "content": "<p>No, I do think the definition should use QI embeddings</p>",
        "id": 270823166,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644062854
    },
    {
        "content": "<p>Rémi, you need to learn about </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fin.last</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"bp\">$</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270827812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644068841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I tried to follow most of the guidelines wrt alignment:  <a href=\"https://github.com/bottine/mathlib/blob/quasi_isometry/src/topology/metric_space/coarse/\">https://github.com/bottine/mathlib/blob/quasi_isometry/src/topology/metric_space/coarse/</a> (see only files <code>spaces.lean</code>, and <code>coarse_(anti)lipschitz.lean</code>, but haven't documented the code).</p>",
        "id": 270884887,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644146658
    },
    {
        "content": "<p>If possible, I'd like some feedback on the following:</p>\n<ul>\n<li>The definition of <code>is_uniformly_locally_finite_with</code> doesn't type-check, and I'm not sure how to make it do: how do I tell <code>.card</code> that I really have a finset?</li>\n<li>Generally, how do I decide on having <code>_with</code> variants or not, and how do I deal with the doubling of code this entails?</li>\n<li>In <code>max_coarsely_separated_in_is_net</code>, I haven't yet managed to finish the proof, if someone wants to fill it in!</li>\n<li>Same for the <code>exists_max_coarsely_separated_in_with</code>.</li>\n<li>In files <code>coarsely_(anti)lipschitz.lean</code>, I have plenty of proofs by calculations that are relatively trivial, but filling in the steps is often tedious and results in long terms. Am I doing something wrong? It essentially all follows from monotonicity of all functions involved.</li>\n<li>How to cleanly deal with implicit arguments coherently?</li>\n<li>Similarly, is there a way to deal with coercion more efficiently than I do?</li>\n</ul>\n<p>And then, I'll want to define quasi-isometric embeddings and quasi-isometries. I think I now have close to all lemmas necessary to show that all reasonable definitions are equivalent. Is there any preference of which definition to use?</p>\n<p>To be honest, this code feels very messy, and I'm not sure how to make it properly organized.</p>",
        "id": 270885194,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644147114
    },
    {
        "content": "<p>For you first question, you can use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pseudo_emetric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_locally_finite</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fintype_ball</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">is_locally_finite.fintype_ball</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_uniformly_locally_finite_with</span> <span class=\"o\">[</span><span class=\"n\">is_locally_finite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"n\">r</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">is_uniformly_locally_finite</span> <span class=\"o\">[</span><span class=\"n\">is_locally_finite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_uniformly_locally_finite_with</span> <span class=\"n\">α</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 270892699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644157654
    },
    {
        "content": "<p>But really <code>is_locally_finite</code> is a strange name since your definition doesn't seem to be equivalent to local finiteness as a topological space.</p>",
        "id": 270892770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644157727
    },
    {
        "content": "<p>The natural definition would have an existential quantifier on the radius, so that the definition says that every point has some finite neighborhood.</p>",
        "id": 270892798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644157794
    },
    {
        "content": "<p>An easy solution if you insist on using this definition is to rename it <code>finite_balls_space</code> or something like this.</p>",
        "id": 270892886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644157869
    },
    {
        "content": "<p>In topology the natural definition is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">loc_finite_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">has_basis</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">loc_finite_space_of_bases</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">loc_finite_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_has_basis</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">pi</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem</span> <span class=\"n\">pi</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"n\">pi</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">U</span> <span class=\"o\">⟨</span><span class=\"n\">U_in</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_iff.mp</span> <span class=\"n\">U_in</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pi</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pi</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 270892894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644157882
    },
    {
        "content": "<p>About <code>_with</code> variants, it really depends on whether you need this in math. There is no Lean-only answer.</p>",
        "id": 270892988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644157988
    },
    {
        "content": "<p>I also did your missing proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_coarsely_separated_with</span> <span class=\"n\">δ</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ys</span><span class=\"o\">),</span>\n     <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n     <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">hzy</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">ys</span> <span class=\"o\">},</span>\n     <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hzy</span><span class=\"o\">,</span>\n       <span class=\"n\">rw</span> <span class=\"n\">edist_comm</span><span class=\"o\">,</span>\n       <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">zs</span> <span class=\"o\">},</span>\n     <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">s_sep</span> <span class=\"n\">zs</span> <span class=\"n\">ys</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 270893399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644158619
    },
    {
        "content": "<p>I exhausted my time budget, I'll return to this later if nobody else beats me to it.</p>",
        "id": 270893470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644158761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/270892770\">said</a>:</p>\n<blockquote>\n<p>But really <code>is_locally_finite</code> is a strange name since your definition doesn't seem to be equivalent to local finiteness as a topological space.</p>\n</blockquote>\n<p>Indeed, I see now that the naming is not ideal. The problem is that in the case of arbitrary metric space, the definition of \"finite balls\" is not as clear as in the case of graphs, for which this is the same as \"locally finite\".</p>",
        "id": 270893701,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644159070
    },
    {
        "content": "<p>And thanks for your time and the snippet :)</p>",
        "id": 270893856,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644159305
    },
    {
        "content": "<p>Also, please stop taking common names in the root namespace <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\nI swear I had no clue what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite\">docs#locally_finite</a> was about before I went to see the docs.</p>",
        "id": 270894732,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644160504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461830\">@Rémi Bottinelli</span> for locally compact metric spaces (which are the ones we'll be interested in) your definition should be equal to the usual topological one: you can use compact sets instead of balls in the locally compact case</p>",
        "id": 270895198,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644161161
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite\">docs#locally_finite</a> is a genuinely different thing, since it's a property for families of sets, not of spaces.</p>",
        "id": 270895242,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644161190
    },
    {
        "content": "<p>Yeah of course. I'm mentioning it for the name, not for the meaning.</p>",
        "id": 270895521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644161639
    },
    {
        "content": "<p>People would have probably been quite upset if I called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite_order\">docs#locally_finite_order</a> <code>locally_finite</code>.</p>",
        "id": 270895566,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644161665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/270894732\">said</a>:</p>\n<blockquote>\n<p>Also, please stop taking common names in the root namespace <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\nI swear I had no clue what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite\">docs#locally_finite</a> was about before I went to see the docs.</p>\n</blockquote>\n<p>Mmh, is that an actual problem? I thought the folder hierarchy induced its own  namespacing, making it OK</p>",
        "id": 270895684,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644161872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"465995\">@Daniel Roca González</span> I'm not sure what you're aiming at. In \"your definition <em>should</em> be\", are you saying that whatever definition we take for \"locally finite\", we want it to agree with the topological definition ? I think this is already the case if the space is locally compact: any ball can be covered by finitely many balls of a given radius, hence is finite, so we're good. Are we?</p>",
        "id": 270895990,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644162270
    },
    {
        "content": "<p>The folder heierachy is more just for organising things, it has no effect on namespace.<br>\nThe sort of issue we encounter is if you have a bunch of things imported because you are working on, say, manifolds which have a lot of prerequisites. We need to be able to write things unambiguously<br>\nFor instance what should <code>locally_finite G</code> mean for some topogical group?<br>\nIt could mean that <code>G</code> is locally finite as a topological space, or it could mean that <code>G</code> is locally finite as a group.<br>\nThe way we solve this is with explicit <code>namespace</code>s in the code. So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">topological_space</span>\n<span class=\"kd\">def</span> <span class=\"n\">locally_finite</span> <span class=\"bp\">...</span>\n<span class=\"kd\">end</span> <span class=\"n\">topological_space</span>\n</code></pre></div>\n<p>means that <code>locally_finite</code> defined there is really called <code>topological_space.locally_finite</code> if someone then wants to work on topology they <code>open topological_space</code> and then <code>locally_finite</code> refers only to that notion.</p>\n<p>The folder structure has no effect on namespaces though</p>",
        "id": 270896015,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644162322
    },
    {
        "content": "<p>Ah, I see, thanks for the explanation!</p>",
        "id": 270896126,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644162478
    },
    {
        "content": "<p>But, say, I define \"coarse lipschitz\" maps at some point: <code>coarse_lipschitz</code>. I presume those fit in the root namespace because the name is pretty unambiguous, or should everything be namespaced, essentially?</p>",
        "id": 270896186,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644162557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461830\">@Rémi Bottinelli</span> yes, that's what I want to say: I don't think  it should have a different name, because in all cases we're interested in it's equivalent</p>",
        "id": 270896251,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644162609
    },
    {
        "content": "<p>rather, if we want to phrase it in a different way, we should use an iff lemma in the setting we want: see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.continuous_iff\">docs#metric.continuous_iff</a> for an example of something like this</p>",
        "id": 270896278,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644162667
    },
    {
        "content": "<p>And re namespaces: shall I just wrap it all in a <code>namespace coarse … end coarse</code> namespace? Does having this namespace mean I could/should drop the \"coarse\"/\"coarsely\" adjectives in my names?</p>",
        "id": 270896423,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644162855
    },
    {
        "content": "<p>I personally prefer more descriptive names over namespaces.</p>",
        "id": 270896651,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644163195
    },
    {
        "content": "<p>[o/t: I don't know if thumbsup is the proper \"ack\" emoji/reaction, or if it's interpreted here as approbation]</p>",
        "id": 270896818,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644163301
    },
    {
        "content": "<p>I usually use it to mean \"I agree\"</p>",
        "id": 270896991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644163513
    },
    {
        "content": "<p>ah, mmh, then maybe I shall use the octopus, whatever this one means :)</p>",
        "id": 270897088,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644163644
    },
    {
        "content": "<p>The topology library got a pass on namespacing to some extent by being first (and by being important) but there are some names in it (like <code>embedding</code> maybe?) that should probably be namespaced</p>",
        "id": 270898587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644165737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/270897088\">said</a>:</p>\n<blockquote>\n<p>ah, mmh, then maybe I shall use the octopus, whatever this one means <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p><a href=\"#narrow/stream/113489-new-members/topic/octopus/near/199551941\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/octopus/near/199551941</a> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 270898871,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644166151
    },
    {
        "content": "<p>I'm back with a bit of time. I'm reading a bit more the space file. Note that mathlib's tradition is that stupid lemmas can have obfuscated proofs so you can write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_coarsely_dense_with_in</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 270909941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644179266
    },
    {
        "content": "<p>Then the next proofs can be compressed without loosing any readability:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">ε'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">r_in_s</span> <span class=\"o\">:</span> <span class=\"n\">is_coarsely_dense_with_in</span> <span class=\"n\">ε</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s_in_t</span> <span class=\"o\">:</span> <span class=\"n\">is_coarsely_dense_with_in</span> <span class=\"n\">ε'</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_coarsely_dense_with_in</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"n\">ε'</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">z</span> <span class=\"n\">zt</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">s_in_t</span> <span class=\"n\">zt</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">ys</span><span class=\"o\">,</span><span class=\"n\">yd</span><span class=\"o\">⟩</span> <span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">r_in_s</span> <span class=\"n\">ys</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xr</span><span class=\"o\">,</span><span class=\"n\">xd</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xr</span><span class=\"o\">],</span>\n  <span class=\"k\">calc</span> <span class=\"n\">edist</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">edist_triangle</span> <span class=\"n\">z</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">ε'</span>          <span class=\"bp\">+</span> <span class=\"n\">ε</span>    <span class=\"o\">:</span> <span class=\"n\">add_le_add</span> <span class=\"n\">yd</span> <span class=\"n\">xd</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"bp\">+</span> <span class=\"n\">ε'</span>             <span class=\"o\">:</span> <span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">weaken</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">ε'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">s_in_t</span> <span class=\"o\">:</span> <span class=\"n\">is_coarsely_dense_with_in</span> <span class=\"n\">ε</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s_sub_s'</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'_sub_t</span> <span class=\"o\">:</span> <span class=\"n\">t'</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_le_ε'</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"n\">ε'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_coarsely_dense_with_in</span> <span class=\"n\">ε'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">z</span> <span class=\"n\">zt'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">zt</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">t'_sub_t</span> <span class=\"n\">zt'</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">s_in_t</span> <span class=\"n\">zt</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xd</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">xs'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s_sub_s'</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs'</span><span class=\"o\">],</span>\n  <span class=\"k\">calc</span> <span class=\"n\">edist</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>  <span class=\"o\">:</span> <span class=\"n\">xd</span>\n             <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">ε'</span> <span class=\"o\">:</span> <span class=\"n\">ennreal.coe_le_coe.mpr</span> <span class=\"n\">ε_le_ε'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270909990,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644179293
    },
    {
        "content": "<p>If you want to rather improve readability then you can add type ascriptions and use <code>obtain</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">weaken</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">ε'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">s_in_t</span> <span class=\"o\">:</span> <span class=\"n\">is_coarsely_dense_with_in</span> <span class=\"n\">ε</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s_sub_s'</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'_sub_t</span> <span class=\"o\">:</span> <span class=\"n\">t'</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε_le_ε'</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"n\">ε'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_coarsely_dense_with_in</span> <span class=\"n\">ε'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zt'</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">t'</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">zt</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">t'_sub_t</span> <span class=\"n\">zt'</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">xd</span> <span class=\"o\">:</span> <span class=\"n\">edist</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">s_in_t</span> <span class=\"n\">zt</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">xs'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s_sub_s'</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs'</span><span class=\"o\">],</span>\n  <span class=\"k\">calc</span> <span class=\"n\">edist</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>  <span class=\"o\">:</span> <span class=\"n\">xd</span>\n             <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">ε'</span> <span class=\"o\">:</span> <span class=\"n\">ennreal.coe_le_coe.mpr</span> <span class=\"n\">ε_le_ε'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270910074,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644179416
    },
    {
        "content": "<p>Things like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">s_sep</span><span class=\"o\">},</span>\n</code></pre></div>\n<p>in <code>max_coarsely_separated_in_is_net</code> costs one level of indent for very little gain. You can use <code>refine ⟨s_sep, _⟩</code></p>",
        "id": 270910173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644179569
    },
    {
        "content": "<p>The lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">x_notin_s</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span> <span class=\"n\">by_contradiction</span> <span class=\"n\">x_in_s</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>prove that you are not quite yet used to how negation is handled in Lean. And I really with <code>by_contradiction</code> would refuse to do that. By <em>definition</em>, <code>x ∉ s</code> means <code>x ∈ s → false</code>. So your first line should be <code>intro x_in_s</code>.</p>",
        "id": 270910263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644179702
    },
    {
        "content": "<p>The proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₀</span> <span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">are_close_with</span> <span class=\"n\">K</span> <span class=\"n\">f₀</span> <span class=\"n\">f₁</span> <span class=\"bp\">→</span>  <span class=\"n\">are_close_with</span> <span class=\"n\">K</span> <span class=\"n\">f₁</span> <span class=\"n\">f₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">acw</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">acw</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">edist_comm</span> <span class=\"o\">(</span><span class=\"n\">f₀</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">acw</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₀</span> <span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">are_close_with</span> <span class=\"n\">K</span> <span class=\"n\">f₀</span> <span class=\"n\">f₁</span> <span class=\"bp\">→</span> <span class=\"n\">are_close_with</span> <span class=\"n\">K</span> <span class=\"n\">f₁</span> <span class=\"n\">f₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">acw</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">edist_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">acw</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270910454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644179954
    },
    {
        "content": "<p>For</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">are_close_with</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">are_close_with</span> <span class=\"n\">L</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">are_close_with</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">+</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">edist</span> <span class=\"n\">y</span> <span class=\"n\">w</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">edist_triangle</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">K</span>        <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">L</span>        <span class=\"o\">:</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">+</span> <span class=\"n\">L</span><span class=\"o\">)</span>              <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>it is enough and more readable to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">are_close_with</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">are_close_with</span> <span class=\"n\">L</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">are_close_with</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">+</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">calc</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edist_triangle</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span>        <span class=\"bp\">+</span> <span class=\"n\">L</span>        <span class=\"o\">:</span> <span class=\"n\">add_le_add</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270910550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644180062
    },
    {
        "content": "<p>Did you know that lambda can destructure stuff as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">symm</span>  <span class=\"o\">(</span><span class=\"n\">f₀</span> <span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">are_close</span> <span class=\"n\">f₀</span> <span class=\"n\">f₁</span> <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"n\">are_close</span> <span class=\"n\">f₁</span> <span class=\"n\">f₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">K₀</span><span class=\"o\">,</span><span class=\"n\">cw₀</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">K₀</span><span class=\"o\">,</span><span class=\"n\">are_close_with.symm</span> <span class=\"n\">cw₀</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 270910632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644180156
    },
    {
        "content": "<p>Beware it can't do the <code>rfl</code> magic of <code>rintro</code></p>",
        "id": 270910647,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644180178
    },
    {
        "content": "<p>I hope you can learn stuff from some compression.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">close_composites_of_dense</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cdw</span> <span class=\"o\">:</span> <span class=\"n\">is_coarsely_dense_with</span> <span class=\"n\">ε</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">retract</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">subtype</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">are_close_with</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">retract</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">are_close_with</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">retract</span> <span class=\"bp\">∘</span> <span class=\"n\">coe</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"c1\">-- First we restate `cdw` in terms the axiom of choice likes:</span>\n  <span class=\"k\">have</span> <span class=\"n\">cdw'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">cdw</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">yd</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">ys</span><span class=\"o\">⟩,</span> <span class=\"n\">yd</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">choose</span> <span class=\"n\">ret</span> <span class=\"n\">good</span> <span class=\"n\">using</span> <span class=\"n\">cdw'</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">ret</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">edist_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">good</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270910882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644180483
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">range_of_coarse_identity</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">close</span> <span class=\"o\">:</span> <span class=\"n\">are_close_with</span> <span class=\"n\">C</span> <span class=\"n\">id</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_coarsely_dense_with</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_range_self</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">close</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 270910943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644180572
    },
    {
        "content": "<p>I'm moving to the coarse_lipschitz file. You should learn about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_rfl\">docs#le_rfl</a> which is a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_refl\">docs#le_refl</a> with an implicit argument</p>",
        "id": 270911111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644180758
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iff_range_restriction_is</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"n\">coarse_lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">coarse_lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">range_factorization</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">clw</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"c1\">--rw range_factorization_coe,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">subtype.edist_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">range_factorization_coe</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">range_factorization_coe</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">clw</span><span class=\"o\">,},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">clw</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">range_factorization_coe</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">range_factorization_coe</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">subtype.edist_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">clw</span><span class=\"o\">,},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>could be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iff_range_restriction_is</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"n\">coarse_lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">coarse_lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">range_factorization</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coarse_lipschitz_with</span><span class=\"o\">,</span> <span class=\"n\">subtype.edist_eq</span><span class=\"o\">,</span> <span class=\"n\">range_factorization_coe</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 270911336,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644181016
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_coarse_lipschitz_images</span>\n  <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">clf</span> <span class=\"o\">:</span> <span class=\"n\">coarse_lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">cdiw</span> <span class=\"o\">:</span> <span class=\"n\">is_coarsely_dense_with_in</span> <span class=\"n\">ε</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_coarsely_dense_with_in</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xt</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">cdiw</span> <span class=\"n\">xt</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">yd</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">ys</span><span class=\"o\">],</span>\n  <span class=\"k\">calc</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span>  <span class=\"o\">:</span> <span class=\"n\">clf</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n                        <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span>      <span class=\"o\">:</span> <span class=\"n\">le_add_mul</span> <span class=\"n\">le_rfl</span> <span class=\"n\">le_rfl</span> <span class=\"n\">yd</span>\n                        <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">+</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>      <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270911433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644181165
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iff_range_restriction_is</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>  <span class=\"o\">:</span>\n  <span class=\"n\">coarse_lipschitz</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">coarse_lipschitz</span> <span class=\"o\">(</span><span class=\"n\">range_factorization</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">clwf</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coarse_lipschitz_with.iff_range_restriction_is</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">clwf</span><span class=\"o\">⟩,</span>\n <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">clwf</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coarse_lipschitz_with.iff_range_restriction_is</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">clwf</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 270911571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644181265
    },
    {
        "content": "<p>I'm not sure what to say about painful computation. The main issue here is the classic issue that linarith doesn't handle nnreal and ennreal. But you can still simplify a bit as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">comp</span>\n  <span class=\"o\">{</span><span class=\"n\">Kf</span> <span class=\"n\">Lf</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">clf</span> <span class=\"o\">:</span> <span class=\"n\">coarse_lipschitz_with</span> <span class=\"n\">Kf</span> <span class=\"n\">Lf</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">Kg</span> <span class=\"n\">Lg</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">clg</span> <span class=\"o\">:</span> <span class=\"n\">coarse_lipschitz_with</span> <span class=\"n\">Kg</span> <span class=\"n\">Lg</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coarse_lipschitz_with</span> <span class=\"o\">(</span><span class=\"n\">Kg</span> <span class=\"bp\">*</span> <span class=\"n\">Kf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Lg</span> <span class=\"bp\">+</span> <span class=\"n\">Kg</span> <span class=\"bp\">*</span> <span class=\"n\">Lf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">calc</span>\n<span class=\"n\">edist</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Lg</span> <span class=\"bp\">+</span> <span class=\"n\">Kg</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">clg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n                           <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">Lg</span> <span class=\"bp\">+</span> <span class=\"n\">Kg</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Lf</span> <span class=\"bp\">+</span> <span class=\"n\">Kf</span> <span class=\"bp\">*</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_add_mul</span> <span class=\"n\">le_rfl</span> <span class=\"n\">le_rfl</span> <span class=\"o\">(</span><span class=\"n\">clf</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n                           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Lg</span> <span class=\"bp\">+</span> <span class=\"n\">Kg</span> <span class=\"bp\">*</span> <span class=\"n\">Lf</span> <span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Kg</span> <span class=\"bp\">*</span> <span class=\"n\">Kf</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n                           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 270911704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644181438
    },
    {
        "content": "<p>Woah, thanks a lot!</p>",
        "id": 270936659,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644214080
    },
    {
        "content": "<p>Note there is no mathematical content to all those modifications. I've blindly applied usual Lean tricks. I couldn't tell what this is all about, I didn't read any statement.</p>",
        "id": 270939187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644216862
    },
    {
        "content": "<p>I assume I should mostly read pieces of mathlib to get more of these tricks/literacy?</p>",
        "id": 270940278,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644217855
    },
    {
        "content": "<p>You should just keep writing code and then other people will look at it and tell you tricks. At least, that's what I did. I found mathlib impossible to read and very intimidating as a learner.</p>",
        "id": 270940520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644218124
    },
    {
        "content": "<p>Works for me :)</p>",
        "id": 270940540,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644218152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/270911571\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iff_range_restriction_is</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>  <span class=\"o\">:</span>\n  <span class=\"n\">coarse_lipschitz</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">coarse_lipschitz</span> <span class=\"o\">(</span><span class=\"n\">range_factorization</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">clwf</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coarse_lipschitz_with.iff_range_restriction_is</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">clwf</span><span class=\"o\">⟩,</span>\n <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">clwf</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coarse_lipschitz_with.iff_range_restriction_is</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">clwf</span><span class=\"o\">⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Any reason this is not <code>by simpa only [coarse_lipschitz_with.iff_range_restriction_is]</code> beside variety for pedagogical purposes ?</p>",
        "id": 270941992,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644219614
    },
    {
        "content": "<p>(I say <code>simpa</code> because <code>simp</code> doesn't seem to work)</p>",
        "id": 270942175,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644219788
    },
    {
        "content": "<p>I bet the longer proof compiles much quicker. It's swings and roundabouts probably (some advantages, some disadvantages). The longer proof doesn't fire up the tactic framework at all.</p>",
        "id": 270942732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644220256
    },
    {
        "content": "<p>I assume there is a kind of proof refinement process, where you start with \"whatever you came up with that typechecks\" and then refine the code until you get something striking a balance between readable, robust and efficient.</p>",
        "id": 270942911,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644220413
    },
    {
        "content": "<p>I think that when it comes to mathlib, robust is at the top of the list, and readable at the bottom (although not everyone likes the latter decision)</p>",
        "id": 270943523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644220818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/270940278\">said</a>:</p>\n<blockquote>\n<p>I assume I should mostly read pieces of mathlib to get more of these tricks/literacy?</p>\n</blockquote>\n<p>I hope you will already learn a lot by carefully comparing what you originally wrote with my version. This is much more efficient than reading efficient proofs that you didn't try to write yourself. This is precisely the reason why I did this yesterday.</p>",
        "id": 270943528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644220819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/270941992\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/270911571\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">iff_range_restriction_is</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>  <span class=\"o\">:</span>\n  <span class=\"n\">coarse_lipschitz</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">coarse_lipschitz</span> <span class=\"o\">(</span><span class=\"n\">range_factorization</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">clwf</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coarse_lipschitz_with.iff_range_restriction_is</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">clwf</span><span class=\"o\">⟩,</span>\n <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">clwf</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coarse_lipschitz_with.iff_range_restriction_is</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">clwf</span><span class=\"o\">⟩</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Any reason this is not <code>by simpa only [coarse_lipschitz_with.iff_range_restriction_is]</code> beside variety for pedagogical purposes ?</p>\n</blockquote>\n<p>No, in that case I simply noticed your proof wasn't a real tactic proof (no <code>rw</code> or <code>simp</code>) so it could be turned into a proof term. And also the proof sounded like something you wouldn't bother mentioning on paper so it was eligible for obfuscation.</p>",
        "id": 270943669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644220910
    },
    {
        "content": "<p>I am constantly doing this (golfing code) with students too -- they show me some code and I reply with some code which is much more compressed and often does the same thing in the same way. It's miserable having to write 40 lines doing something which looks trivial in math land, but if you only have to write 5 lines then you feel a lot better about it</p>",
        "id": 270943729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644220930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/270942175\">said</a>:</p>\n<blockquote>\n<p>(I say <code>simpa</code> because <code>simp</code> doesn't seem to work)</p>\n</blockquote>\n<p>That's presumably because <code>simpa</code> tries reflexivity after doing its work. There was a recent conversation about that where Mario, the author of <code>simpa</code>, was very surprised to learn that everybody was abusing this property, hence completely blurring the intended semantics of <code>simpa</code></p>",
        "id": 270943777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644220988
    },
    {
        "content": "<p>OK, I'll try and attack the third file <code>coarse_antilipschitz.lean</code> with these new tricks. I think you gave me plenty enough to munch on, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , thanks!</p>",
        "id": 270943902,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644221070
    },
    {
        "content": "<p>Note also that you'll quickly learn how to smell proof inefficiency. There were many proofs in you file where I could see without reading anything carefully that they were wasting a lot of lines doing nothing.</p>",
        "id": 270943929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644221089
    },
    {
        "content": "<p>Patrick you should mark some of my student projects!</p>",
        "id": 270944475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644221492
    },
    {
        "content": "<p>Have have have have have refl</p>",
        "id": 270944486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644221505
    },
    {
        "content": "<p><a href=\"https://github.com/bottine/mathlib/blob/31bfb8e72f8a1579ff5ea99b755dc5df42960b07/src/topology/metric_space/coarse/coarse_antilipschitz.lean#L335\">https://github.com/bottine/mathlib/blob/31bfb8e72f8a1579ff5ea99b755dc5df42960b07/src/topology/metric_space/coarse/coarse_antilipschitz.lean#L335</a></p>",
        "id": 270972877,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644238207
    },
    {
        "content": "<p>I'm having a \"technical\" problem here: the term <code>dense</code> has type <code>is_coarsely_dense_with_in L (range f) (univ)</code> and I want to return something of type <code>is_coarsely_dense_with L (range f)</code>, which by definition is just is_coarsely_dense_with_in L (range f) (univ)`. I would have thought this is a \"defeq\" and lean would figure this out, but it seems not. What am I doing wrong?</p>",
        "id": 270973072,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644238319
    },
    {
        "content": "<p>I don't see how that's defeq. <code>true → p</code> is not defeq to <code>p</code>. You probably want to write the lemma <code>whatever_in_univ_iff</code> (and the other direction <code>whatever.whatever_in</code>). See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone_on_univ\">docs#monotone_on_univ</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone.monotone_on\">docs#monotone.monotone_on</a>.</p>",
        "id": 270974141,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644238855
    },
    {
        "content": "<p>mmh, maybe my question was misguided and I wasn't understanding the error… let me see</p>",
        "id": 270975137,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644239354
    },
    {
        "content": "<p>yeah, I think the errors comes from somewhere else. Thanks for the pointers though!</p>",
        "id": 270975374,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644239496
    },
    {
        "content": "<p>hah, the culprit was A COMMA, I'm ashamed!</p>",
        "id": 271084535,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644299751
    },
    {
        "content": "<p>Classic!</p>",
        "id": 271094419,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1644308835
    },
    {
        "content": "<p>great day: I managed to use Zorn's lemma successfully!</p>",
        "id": 271579134,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644587538
    },
    {
        "content": "<p>it wasn't even <em>that</em> hard</p>",
        "id": 271579464,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644587697
    },
    {
        "content": "<p>OK, what would a good unit for a PR be? I'm close to having one notion of quasi-isometry formalised (quasi-isometric embedding with dense range). In my opinion, assuming the code were clean, this would be a good \"semi-atomic\" PR, since it defines the basic notions on a space plus one \"useful\" notion: quasi-isometries (along with it being an equivalence relation).</p>\n<p>The WIP code is <a href=\"https://github.com/bottine/mathlib/blob/quasi_isometry/src/topology/metric_space/coarse/quasi_isometry.lean\">here</a>.</p>\n<p>Some questions:</p>\n<ul>\n<li>\n<p>There are multiple reasonable definitions of a quasi-isometry: should one define them all with descriptive names, and show equivalence? Which one should be the canonical one? For now I have chosen one, and am just planning on having fun with unicode arrows to distinguish them.<br>\n  I think that with the tools defined in my code, showing all equivalences will not be much work, but is it worth it?</p>\n</li>\n<li>\n<p>I'm unsure about when to define <code>structure</code>s vs properties: Should we have predicates saying that <em>this</em> function is a quasi-isometry, or bundle it somewhere? Similarly, iiuc, equivalence relations follow the <code>refl,symm,trans</code> nomenclature, while \"arrows\" follow something like <code>self,inv,comp</code>, is that a good rule to go by, in that if an arrow can be inverted, but non-canonically, one should not use <code>inv</code>.</p>\n</li>\n<li>At <a href=\"https://github.com/bottine/mathlib/blob/e1241ebc7574c4a7aed96433fc98d6ed1180efbc/src/topology/metric_space/coarse/quasi_isometry.lean#L208\">some point</a>, I need to use that \"being close\" for maps is a congruence relation when all (or sufficiently many) maps are coarsely Lipschitz. I feel like using simplifications rules properly and tagging the congruence properties of \"closeness\" would make things easy to write. The problem is that I think I would need to define a type of \"lipschitz maps\" on which these congruence rules hold, but it seems a bit heavy to define a new class just for this…</li>\n</ul>",
        "id": 271678259,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644655625
    },
    {
        "content": "<p>Re \"good unit for a PR\": what you describe sounds reasonable. And the file you link to is currently 237 lines, which also seems a good size.<br>\nI can't really comment on your other questions atm.</p>",
        "id": 271679833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644658038
    },
    {
        "content": "<p>For quasi-isometry, you should choose one definition, and write lemma proving it is equivalent to other definitions when you need it. Compare with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous\">docs#continuous</a> and then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_iff_continuous_at\">docs#continuous_iff_continuous_at</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_iff_is_closed\">docs#continuous_iff_is_closed</a>.</p>",
        "id": 271680195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644658626
    },
    {
        "content": "<p>The question about bundling is more subtle. It depends how you'll want to use them. Do you primarily want to be able to say that some pre-existing function is a quasi-isom or manipulate the set of quasi-isometries? If unsure then you can start unbundled and then later introduce bundled one. In topology (in mathlib) continuous functions are unbundled almost everywhere, but we do have bundled ones when we want to discuss topologies on spaces of continuous functions. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> may have a preprint for you to read.</p>",
        "id": 271680339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644658824
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/2202.01629\">https://arxiv.org/abs/2202.01629</a></p>",
        "id": 271680354,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644658870
    },
    {
        "content": "<p>Thanks Yaël! I didn't know there was a public version</p>",
        "id": 271680367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644658899
    },
    {
        "content": "<p>Anne thought I might like the gory details <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 271680412,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644658926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> you should post a link to the abstract not the pdf -- at least this is what ArXiv tells everyone (I think there's even a Twitter bot now which nags people about this). The pdfs sometimes get tidied up and the links break; they're then regenerated when someone clicks from the abstract page</p>",
        "id": 271680515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644659135
    },
    {
        "content": "<p>Oh okay!</p>",
        "id": 271680559,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644659170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/271679833\">said</a>:</p>\n<blockquote>\n<p>Re \"good unit for a PR\": what you describe sounds reasonable. And the file you link to is currently 237 lines, which also seems a good size.<br>\nI can't really comment on your other questions atm.</p>\n</blockquote>\n<p>Note that this file uses content of each of <code>space.lean</code> (which I guess should be renamed to <code>basics</code>) and <code>coarse_(anti)lipschitz.lean</code>, so that the whole of it is way larger than 237 lines (not deep content, though).</p>",
        "id": 271681726,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644661155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Coarse.20notions.20on.20metric.20spaces.3A.20Review.2BHelp/near/271680339\">said</a>:</p>\n<blockquote>\n<p>The question about bundling is more subtle. It depends how you'll want to use them. Do you primarily want to be able to say that some pre-existing function is a quasi-isom or manipulate the set of quasi-isometries? If unsure then you can start unbundled and then later introduce bundled one. In topology (in mathlib) continuous functions are unbundled almost everywhere, but we do have bundled ones when we want to discuss topologies on spaces of continuous functions. <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> may have a preprint for you to read.</p>\n</blockquote>\n<p>Noted. Honestly, I don't really have a clear picture on how I plan to use those definitions exactly… I guess it's when you need to actually use them that you know which way is better.</p>",
        "id": 271681953,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644661473
    },
    {
        "content": "<p>RE that paper: doesn't lean4 use a different mechanism for dealing with those, which makes /something/ linear time rather than exponential in lean3 ?</p>",
        "id": 271682361,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644662201
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/2001.04301\">https://arxiv.org/abs/2001.04301</a></p>",
        "id": 271682917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644663165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461830\">@Rémi Bottinelli</span> the answer is that PRs of 100 lines are the sort of thing which is preferred, so if your code needs big imports but you have things working then you have evidence that your definitions are usable, so start PRing them in 50-150 line chunks and be prepared for reviews of the form \"I believe this definition should be changed (and this will break your code)\"; hopefully you have enough evidence to rebut them now. Be warned that the PR process is arduous because the maintainers have <em>extremely</em> high and exacting standards about mathlib's code, an approach which makes it harder to get stuff in mathlib but which has served the community extremely well.</p>",
        "id": 271687504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644670279
    },
    {
        "content": "<p>OK, that makes sense, thanks! I'll take some time to let things settle down, clean the code some more, and then have a look at the PR procedure guide.</p>",
        "id": 271688450,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644671747
    },
    {
        "content": "<p>Can I already ask for \"write access to non-master branches of the mathlib repository\" ? my github handle is <code>bottine</code>.</p>",
        "id": 271688719,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644672142
    },
    {
        "content": "<p>done</p>",
        "id": 271688818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644672305
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 271688878,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644672363
    },
    {
        "content": "<p>Now you have no excuse not to start :-)</p>",
        "id": 271689035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644672662
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12010\">https://github.com/leanprover-community/mathlib/pull/12010</a></p>",
        "id": 271735847,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644742502
    },
    {
        "content": "<p>here goes: I hope it's all reasonably OK</p>",
        "id": 271735855,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644742523
    },
    {
        "content": "<p>It's well over 150 lines (three times as long :-( ) so you might have real problems getting anyone to review it. Can't you just PR the first third somehow?</p>",
        "id": 271736070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644742858
    },
    {
        "content": "<p>three times as long is a no-go? I probably can, but then it's very low content-wise. I assume this should be made as an update to this specific PR ?</p>",
        "id": 271736148,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644742944
    },
    {
        "content": "<p>Also, you have many lines over 100 characters. You'll need to wrap them for style.</p>",
        "id": 271736167,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644742995
    },
    {
        "content": "<p>Yeah, it's the comments: my reasoning was that since there would anyway be something to change, I might as well cut the comments in the end.</p>",
        "id": 271736236,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644743074
    },
    {
        "content": "<p>It's really not that hard to keep your comments well trimmed if you're on VScode with the 100  characters guide on.</p>",
        "id": 271736247,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644743110
    },
    {
        "content": "<p>You're introducing <em>many</em> new definitions, some of which you're not using at all. I'd suggest concentrating on fewer and developing more API about them.</p>",
        "id": 271736253,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644743129
    },
    {
        "content": "<p>For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_antichain\">docs#is_antichain</a> is a really simple notion but I still managed to write 100 lines about it.</p>",
        "id": 271736305,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644743177
    },
    {
        "content": "<p>But more API means getting past the 150 lines \"soft limit\" too, no?</p>",
        "id": 271736319,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644743220
    },
    {
        "content": "<p>That's why you should introduce less definitions <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 271736345,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644743274
    },
    {
        "content": "<p>No joke, you have 20 new definitions and one new typeclass. A typical PR adds maybe 3 or 4 of them simultaneously at most.</p>",
        "id": 271736410,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644743350
    },
    {
        "content": "<p>I'm unsure now: should I retract the PR, or just update it according to the feedback I get? I don't want to push bad stuff and get people sick too fast</p>",
        "id": 271736418,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644743376
    },
    {
        "content": "<p>People don't review large PRs because they have 15 minutes for reviews in their spare time and think \"golly I'm not looking at that one\". Definitions are really hard to get right and need expert opinions. A long PR with lots of new definitions is asking for trouble. Everyone puts it off and then it starts rotting.</p>",
        "id": 271736419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644743391
    },
    {
        "content": "<p>First, remove all definitions for which you proved no lemma. We definitely won't take those.</p>",
        "id": 271736474,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644743439
    },
    {
        "content": "<p>Second, if there are many left, remove some according to your common sense and keep them for a second PR.</p>",
        "id": 271736491,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644743476
    },
    {
        "content": "<p>Yeah close the PR and make a smaller one with &lt;= 150 lines of non comment code and ideally &lt;= 100. Also take a look at what the linters say -- nobody will review until your file compiles and lints, and 100+ character lines will stop it linting. The PR process is very hard. There are currently over 300 PRs in progress and it's really important to keep things super-easy for the maintainers especially if you're a new contributer whose code will need some attention</p>",
        "id": 271736553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644743555
    },
    {
        "content": "<p>I'm not sure the PR itself needs closing. Changes can be done in place. You can always move the surplus stuff to another branch.</p>",
        "id": 271736569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644743609
    },
    {
        "content": "<p>Mmh… Well, I closed it just before you replied, so I guess I'll leave it closed now that it's done. In any case I got some very actionable feedback, which is nice :)</p>",
        "id": 271736637,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644743717
    },
    {
        "content": "<p>Thanks to the both of you, and back to the drawing board.</p>",
        "id": 271736691,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644743796
    },
    {
        "content": "<p>Every definition comes with a cost. Every definition wraps up something in extra wrapping and lean has to figure out whether to unwrap the wrapping or not, and this is hard. Every definition makes terms bigger and more complicated, and this is bad. So every definition has to come with an API which tells lean and users how to use the definition. If you can possibly get away without making a definition, don't make it. If you are making a definition then you need to surround it with theorems. Definitions are costly</p>",
        "id": 271736701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644743852
    },
    {
        "content": "<p>Does that mean that whenever you have a definition, say of the form <code>lipschitz_with \\eps</code>,  and a non-qualified version <code>lipschitz := \\exists \\eps lipschitz_with \\eps</code>, you should stick to one variant if you don't have a good reason to use both?</p>",
        "id": 271742284,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644752973
    },
    {
        "content": "<p>Exactly</p>",
        "id": 271742341,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644753060
    },
    {
        "content": "<p>OK, then there is a lot to cut down already!</p>",
        "id": 271742357,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644753105
    },
    {
        "content": "<p>OK, <a href=\"https://github.com/leanprover-community/mathlib/blob/0947633c8d15da65a87f5cc49813b70cb07a683c/src/topology/metric_space/coarse/basic.lean\">I've shortened it</a> to around 150 lines without comments, and a bit more than 200 with comments. I'll let it sit for a while since I may be rushing things.</p>",
        "id": 271746009,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644758752
    },
    {
        "content": "<p>Thinking about it all, I have a few more \"theoretical\" questions, if you people don't mind:</p>\n<ul>\n<li>RE \"definition sparsity\": I naturally tend to make a lot of definitions, e.g. just as forms of alias, and to be able to name things. For instance, in the old version of the code, I had a <code>def is_max_blah</code>, which I now inlined in the two functions using it.  You might argue that if there is only two places where it's used, this is proof that it doesn't need a <code>def</code>, but at the same time I find it makes things less transparent. So, is there a way to use such \"thin\" definitions?  Does this \"definition sparsity\" rule stem from an engineering rationale (mathlib being so big a project that some hard rules have to be taken in order to keep things manageable ) ?</li>\n<li><strong>Branches:</strong> I see that every time I push to my branch on the mathlib repo, things get rebuilt, which might indicate that these branches are not meant for quick and dirty development. Is that the case?</li>\n</ul>",
        "id": 271792081,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644824131
    },
    {
        "content": "<p>You can always use local notations as a thin definition.</p>",
        "id": 271792792,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644824857
    },
    {
        "content": "<p>About branches, you can use the building power. That's part of the community infrastructure. Specifically the machines are paid by the <a href=\"https://leanprover-community.github.io/blog/posts/hoskinson-center-announced/\">Hoskinson center</a>. It's a bit silly to push every three lines, but you can use this infrastructure when you modify a file which is low in the hierarchy and triggers a lot of rebuild.</p>",
        "id": 271792900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644824983
    },
    {
        "content": "<p>Noted, thanks!</p>",
        "id": 271793656,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644825646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>   In your opinion, how should I deal with <a href=\"https://github.com/leanprover-community/mathlib/blob/0947633c8d15da65a87f5cc49813b70cb07a683c/src/topology/metric_space/coarse/basic.lean#L136\">this definition</a>, for instance?</p>",
        "id": 271794973,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644826711
    },
    {
        "content": "<p>I'm using it to have a nice \"bundled\" object to reason about when using Zorn.</p>",
        "id": 271795125,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644826859
    },
    {
        "content": "<p>I think this definition should be internal to the proof.</p>",
        "id": 271799397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644829519
    },
    {
        "content": "<p>Indeed, it makes things much more transparent, and allows some shortening: <a href=\"https://github.com/leanprover-community/mathlib/blob/quasi_isometry/src/topology/metric_space/coarse/basic.lean\">https://github.com/leanprover-community/mathlib/blob/quasi_isometry/src/topology/metric_space/coarse/basic.lean</a> .</p>",
        "id": 271808165,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644834629
    },
    {
        "content": "<p>In the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/rcases.html#tactic.rcases\">doc entry for <code>rcases</code></a>, there is a part about extracting a witness to the equality with <code>some name</code>, but I'm not sure how it works. What syntax should I use?</p>",
        "id": 271811507,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644836596
    },
    {
        "content": "<p>That's for the non-interactive <code>rcases</code> tactic.  The interactive syntax is over at <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">tactic#rcases</a>, see the second-to-last paragraph (<code>rcases h : e with PAT</code>)</p>",
        "id": 271812100,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644836931
    },
    {
        "content": "<p>Oh, ups, thanks for clearing that up!</p>",
        "id": 271812260,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644837028
    },
    {
        "content": "<p>I reopened the PR: hope it's more appropriate now :)</p>",
        "id": 271930044,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1644904064
    }
]