[
    {
        "content": "<p>Dear All,</p>\n<p>I want to prove the lemma below, <del>stating essentially</del> which is an easy consequence of the fact that the map <code>rev_at</code> is monotone decreasing.  If I formulated it correctly, it says the following.  Given a finite subset <code>s</code> of <code>ℕ</code>, the \"reflected\" set, formed of the elements <code>(max s) - e</code> as <code>e ∈ s</code>, has as maximum the \"reflection\" of the minimum <code>(max s) - (min s)</code>.</p>\n<p>I found <code>monotone</code>, but I think that it is only non-decreasing.  Note that, due to how subtraction works, every natural number above <code>max s</code> squashes to <code>0</code>: this is not a problem, since I never evaluate at those naturals.</p>\n<p>Thanks!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">min_max</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max&#39;</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">max&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">max&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">max&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">min&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209483766,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599639937
    },
    {
        "content": "<p>I think there's a simpler way to state that a map is monotone decreasing</p>",
        "id": 209484063,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599640143
    },
    {
        "content": "<p>I'd be happy to know how to do it!  I tried looking for it, but could not find it...</p>",
        "id": 209484107,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599640202
    },
    {
        "content": "<p><code>x &lt;= y -&gt; f y &lt;= f x</code>?</p>",
        "id": 209484165,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599640224
    },
    {
        "content": "<p>(I found a lot of lemmas with maxs, mins, sups,... for monotone non-decreasing maps, but I could not find monotone non-increasing lemmas</p>",
        "id": 209484202,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599640256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/monotone.20decreasing.20.60.60.60.E2.84.95.20.E2.86.92.20.E2.84.95.60.60.60/near/209484165\">said</a>:</p>\n<blockquote>\n<p><code>x &lt;= y -&gt; f y &lt;= f x</code>?</p>\n</blockquote>\n<p>The map <code>rev_at</code> satisfies this condition.  Is there then a lemma saying what I want?</p>",
        "id": 209484259,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599640297
    },
    {
        "content": "<p>I'm just objecting your statement that <code>min_max</code> is the right way to say that a map is monotone decreasing</p>",
        "id": 209484349,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599640335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/monotone.20decreasing.20.60.60.60.E2.84.95.20.E2.86.92.20.E2.84.95.60.60.60/near/209484349\">said</a>:</p>\n<blockquote>\n<p>I'm just objecting your statement that <code>min_max</code> is the right way to say that a map is monotone decreasing</p>\n</blockquote>\n<p>Ah, I see!  I had meant that my lemma is an immediate consequence of the fact that <code>rev_at</code> is monotone non-increasing!  Sorry!  I will correct it.</p>",
        "id": 209484416,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599640388
    },
    {
        "content": "<p>then generalize the lemma and remove <code>rev_at</code></p>",
        "id": 209484446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599640419
    },
    {
        "content": "<p>Ok, how do I introduce the hypothesis that a map N-&gt;N is monotone non-increasing?  The lemma that I stated already exists for monotone non-increasing maps and I would like to use something that is already available, if possible</p>",
        "id": 209484633,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599640542
    },
    {
        "content": "<p>just say that <code>x &lt;= y -&gt; f y &lt;= f x</code></p>",
        "id": 209484726,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599640589
    },
    {
        "content": "<p>also generalize the domain and codomain</p>",
        "id": 209484735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599640594
    },
    {
        "content": "<p>Is this what you had in mind?  The lemma that I want follows easily from the statement below.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mon</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">min_max</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mf</span> <span class=\"o\">:</span> <span class=\"n\">mon</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max&#39;</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">hs</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">min&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209485906,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599641328
    },
    {
        "content": "<p>But I still cannot find this last statement in mathlib...</p>",
        "id": 209485938,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599641360
    },
    {
        "content": "<p>yeah now you can prove it</p>",
        "id": 209486600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599641837
    },
    {
        "content": "<p>you don't need decidable for <code>mon</code></p>",
        "id": 209486631,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599641851
    },
    {
        "content": "<p>also make it <code>\\{{x y : \\a\\}}</code></p>",
        "id": 209486658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599641872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/monotone.20decreasing.20.60.60.60.E2.84.95.20.E2.86.92.20.E2.84.95.60.60.60/near/209486658\">said</a>:</p>\n<blockquote>\n<p>also make it <code>\\{{x y : \\a\\}}</code></p>\n</blockquote>\n<p>What does this mean?</p>",
        "id": 209486751,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599641911
    },
    {
        "content": "<p>It's something in between <code>{x y}</code> and <code>(x y)</code></p>",
        "id": 209486816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599641968
    },
    {
        "content": "<p>The thing is... if you use <code>(x y)</code>, then you have to write them down all the time, when you use your lemma</p>",
        "id": 209486951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599642052
    },
    {
        "content": "<p>With <code>{x y}</code> and <code>{{x y}}</code> you tell Lean that you want it to figure them out itself.</p>",
        "id": 209486984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599642075
    },
    {
        "content": "<p>But the difference between the two is how greedy Lean is when trying to do this.</p>",
        "id": 209487005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599642093
    },
    {
        "content": "<p>ok, i knew one curly bracket, but not two</p>",
        "id": 209487007,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599642094
    },
    {
        "content": "<p>i see, thanks!</p>",
        "id": 209487021,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599642103
    },
    {
        "content": "<p>With <code>{x y}</code> it will try to figure out <code>x</code> and <code>y</code> as soon as possible.</p>",
        "id": 209487030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599642110
    },
    {
        "content": "<p>But with <code>{{x y}}</code> it will leave them as part of the expression, until you start filling in arguments that come after them.</p>",
        "id": 209487102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599642143
    },
    {
        "content": "<p>so, I should try to prove this lemma, then?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">mon</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">min_max_mon</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mf</span> <span class=\"o\">:</span> <span class=\"n\">mon</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">max&#39;</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">hs</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">min&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209487104,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599642143
    },
    {
        "content": "<p>make <code>hs</code> explicit</p>",
        "id": 209487141,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599642182
    },
    {
        "content": "<p>and also <code>mf</code></p>",
        "id": 209487154,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599642193
    },
    {
        "content": "<p>and also use more newlines</p>",
        "id": 209487233,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599642245
    },
    {
        "content": "<p>wow we can copy codes now?</p>",
        "id": 209487314,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599642313
    },
    {
        "content": "<p>also indentation is 2 spaces not 1</p>",
        "id": 209487329,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599642328
    },
    {
        "content": "<p>also <code>\\{{x</code> not <code>\\{{ x</code></p>",
        "id": 209487349,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599642344
    },
    {
        "content": "<p>(I have been updating the code above, so your statements do not seem to make sense!)</p>",
        "id": 209487352,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599642346
    },
    {
        "content": "<p>also <code>hs.image f</code></p>",
        "id": 209487534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599642463
    },
    {
        "content": "<p>I cannot believe how many issues there were with my coding grammar...</p>",
        "id": 209487750,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599642596
    },
    {
        "content": "<p><code>by exact</code> can go</p>",
        "id": 209487854,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599642652
    },
    {
        "content": "<p>One question: using <code>{α β : Type*}</code> can the universes of <code>α</code> and <code>β</code> be different?<br>\nA: Yes.</p>",
        "id": 209487864,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599642659
    },
    {
        "content": "<p>what does the goal say?</p>",
        "id": 209487909,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599642692
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">:</span> <span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">:</span> <span class=\"n\">decidable_linear_order</span> <span class=\"n\">β</span>\n<span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span>\n<span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"n\">mf</span><span class=\"o\">:</span> <span class=\"n\">mon</span> <span class=\"n\">f</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209487925,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599642710
    },
    {
        "content": "<p>good, thanks!</p>",
        "id": 209487943,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599642720
    },
    {
        "content": "<p>In case anyone is keeping track, below is a solution to my question!<br>\nThanks for <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> for helping me!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mon</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">min_max_mon</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mf</span> <span class=\"o\">:</span> <span class=\"n\">mon</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">max&#39;</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">min&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">max&#39;_le</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">hs</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">min&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mem_image</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span> <span class=\"n\">b</span> <span class=\"o\">,</span> <span class=\"n\">bs</span> <span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mf</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">min&#39;_le</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_max&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">min&#39;_mem</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">min_max</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max&#39;</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">max&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">max&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">rev_at</span> <span class=\"o\">(</span><span class=\"n\">max&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">min&#39;</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">min_max_mon</span> <span class=\"n\">hs</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">rev_at</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209503995,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599654705
    },
    {
        "content": "<p>we should really have <code>finset.forall_mem_image</code></p>",
        "id": 209504619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599655140
    },
    {
        "content": "<p>like <code>list.forall_mem_map</code> iirc</p>",
        "id": 209504633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599655149
    }
]