[
    {
        "content": "<p>Trying to get a better feel for how theorems are represented in Lean.<br>\nIf I have a theorem like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">probably_not_useful</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">ag</span><span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Doing <code>#check @probably_not_useful</code> shows <code>∀ {α : Type u_1} [ag : add_group α] {a b : α}, a = 0 → b = 0 → a + b = 0</code>. What would be the equivalent code for writing such a function 'the long way'?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">the_long_way</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">ag</span><span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 246536914,
        "sender_full_name": "Josh",
        "timestamp": 1626746305
    },
    {
        "content": "<p>Do you mean \"in term mode\"? (as opposed to tactic mode)</p>",
        "id": 246537193,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746554
    },
    {
        "content": "<p>I believe so, I'm not entirely familiar with the terminology.</p>",
        "id": 246537217,
        "sender_full_name": "Josh",
        "timestamp": 1626746591
    },
    {
        "content": "<p>(Changing <code>theorem</code> to <code>def</code> was as mistake, I think.)</p>",
        "id": 246537221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746594
    },
    {
        "content": "<p>Alright, I thought that <code>theorem</code> meant the use of tactics</p>",
        "id": 246537233,
        "sender_full_name": "Josh",
        "timestamp": 1626746620
    },
    {
        "content": "<p>No. <code>theorem</code> is for propositions, <code>def</code> is for definitions (/constructions)</p>",
        "id": 246537290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746660
    },
    {
        "content": "<p>The difference is that <code>theorem</code> will be checked \"in parallel\", while Lean already continues on to later lines. This is possible because of proof irrelevance.</p>",
        "id": 246537310,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746695
    },
    {
        "content": "<p>But doesn't the first code snippet create a function on propositions, not a proposition itself?</p>",
        "id": 246537337,
        "sender_full_name": "Josh",
        "timestamp": 1626746709
    },
    {
        "content": "<p>You might be confused here because often beginners are advised to not use tactics in definitions (i.e. when constructing data).</p>",
        "id": 246537347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746726
    },
    {
        "content": "<p>Hmm... an implication between propositions (which is the same thing as a function between propositions) is itself a proposition.</p>",
        "id": 246537375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746755
    },
    {
        "content": "<p>(I'm not sure if you've internalised the idea yet that when we represent propositions in type theory, implication is the same thing as a function.)</p>",
        "id": 246537440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746806
    },
    {
        "content": "<p>Also, check <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>: you should add <code>import algebra.group</code> or something similar to your code snippet, so others can copy and paste directly into Lean.</p>",
        "id": 246537463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746845
    },
    {
        "content": "<p>I think I have internalized that. A theorem is the same thing as a function from the assumptions to the conclusion.</p>",
        "id": 246537471,
        "sender_full_name": "Josh",
        "timestamp": 1626746855
    },
    {
        "content": "<p>The code is working for me without any imports, I found <code>add_group</code> in the standard Lean library</p>",
        "id": 246537528,
        "sender_full_name": "Josh",
        "timestamp": 1626746898
    },
    {
        "content": "<p>You can always see what the term mode proof produced by tactics was using <code>#print</code> instead of <code>#check</code>. In this case it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">probably_not_useful</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ag</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ag</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">h₁</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n    <span class=\"o\">((</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">h₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n       <span class=\"o\">((</span><span class=\"n\">id</span>\n           <span class=\"o\">(((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">ᾰ</span> <span class=\"bp\">=</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">),</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">eq</span> <span class=\"n\">e_1</span><span class=\"o\">)</span> <span class=\"n\">e_2</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n               <span class=\"mi\">0</span>\n               <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n               <span class=\"mi\">0</span>\n               <span class=\"mi\">0</span>\n               <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n              <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">eq_self_iff_true</span> <span class=\"mi\">0</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n          <span class=\"n\">trivial</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 246537540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746912
    },
    {
        "content": "<p>Oh! You may be using a really ancient version of Lean. Which Lean do you have?</p>",
        "id": 246537559,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746934
    },
    {
        "content": "<p>3.4.2</p>",
        "id": 246537576,
        "sender_full_name": "Josh",
        "timestamp": 1626746947
    },
    {
        "content": "<p>Ah, that is ancient.</p>",
        "id": 246537584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746953
    },
    {
        "content": "<p>hm, alright.</p>",
        "id": 246537595,
        "sender_full_name": "Josh",
        "timestamp": 1626746958
    },
    {
        "content": "<p>But that command is super helpful, I'll play around with it to get a better understanding.</p>",
        "id": 246537607,
        "sender_full_name": "Josh",
        "timestamp": 1626746975
    },
    {
        "content": "<p>You likely want to throw out whatever you installed, and visit <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">https://leanprover-community.github.io/get_started.html#regular-install</a></p>",
        "id": 246537610,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746984
    },
    {
        "content": "<p>Have you started reading one of the tutorials?</p>",
        "id": 246537620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626746994
    },
    {
        "content": "<p><code>#print</code> is always going to produce disgusting term mode proofs if you're using <code>rw</code> and <code>simp</code> in your proof. Not really for human consumption. :-)</p>",
        "id": 246537684,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626747033
    },
    {
        "content": "<p>Yeah, I had followed that and started working with the Tutorials and Mathematics In Lean projects. Being curious about how everything works under the hood, I got stuck trying to see the connection between tactic proofs and the rest of the language.</p>",
        "id": 246537785,
        "sender_full_name": "Josh",
        "timestamp": 1626747142
    },
    {
        "content": "<p>You might enjoy <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> then; it goes a bit more into the type theory than those tutorials.</p>",
        "id": 246537817,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626747205
    },
    {
        "content": "<p>Cool, I'll check it out!</p>",
        "id": 246537832,
        "sender_full_name": "Josh",
        "timestamp": 1626747232
    },
    {
        "content": "<p>Looks like I had installed lean awhile ago and just needed to run <code>elan update</code></p>",
        "id": 246537980,
        "sender_full_name": "Josh",
        "timestamp": 1626747389
    }
]