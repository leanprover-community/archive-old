[
    {
        "content": "<p>in JavaScript there is this pretty tool called prettier that prettifies my code. is there an equivalent tool for Lean? and also is there a Lean linter to catch some style errors?</p>",
        "id": 225954559,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1613026871
    },
    {
        "content": "<p>for example i want to ban all uses of <code>theorem</code> in my Lean code because <code>theorem</code> sounds pompous</p>",
        "id": 225954576,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1613026913
    },
    {
        "content": "<p>or forbid non terminal simp</p>",
        "id": 225954640,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1613026975
    },
    {
        "content": "<p>We don't have a code formatter. There are a bunch of linters in mathlib, but not for non-terminal simp.</p>",
        "id": 225954783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613027131
    },
    {
        "content": "<p>They do catch unused hypotheses or bad simp lemmas, and things like that</p>",
        "id": 225954793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613027145
    },
    {
        "content": "<p>I don't understand enough about linters to know whether they would be capable of checking for nonterminal simps. Isn't there some sort of limitation as to what they can do? Some nonterminal simps are ok, eg I think <code>simp, ring</code> is ok for closing a goal because even if <code>simp</code>gets smarter it's highly unlikely to break a <code>ring</code> proof which worked before</p>",
        "id": 225960994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613032738
    },
    {
        "content": "<p>It has been a while so this may have been fixed, but my understanding is that linters can only access the output of a tactic, not the tactic script itself. So finding nonterminal simps is basically undoable (in Lean 3).</p>",
        "id": 225978848,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1613044080
    },
    {
        "content": "<p>Writing a Lean formatter in Lean will be difficult too for the same reason.</p>",
        "id": 225978942,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1613044134
    },
    {
        "content": "<p>This should be doable in Lean 4, though!</p>",
        "id": 226005490,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613056662
    },
    {
        "content": "<p>There is an old thread about how there isn't a formatter for Lean. Is this still true? If not, does the Lean parser produce a parse tree (sometimes called a concrete syntax tree) with whitespace still present that could be used to make one?</p>",
        "id": 299268394,
        "sender_full_name": "Josiah Eldon Bills",
        "timestamp": 1663384992
    },
    {
        "content": "<p>We are working on this for Lean 4, the plan is that eventually the standard Lean 4 PrettyPrinter will be able to print our a standartized, formatted version of any Lean code there is, but right now that is still quite a bit away from what it can do.</p>",
        "id": 299335567,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663428404
    }
]