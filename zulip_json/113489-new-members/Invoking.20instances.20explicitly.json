[
    {
        "content": "<p>For some integral domain F, I have a hypothesis  <code>char_zero F</code>. I would like to infer <code>char_p F 0</code> using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">char_p.of_char_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>If I write <code>apply  char_p.of_char_zero </code>etc., it does not work. I guess this is because that fact is declared as an <code>instance</code>, not a <code>lemma</code>. How do I invoke this instance explicitly in order to gain a new hypothesis <code>char_p F 0</code> in this case?</p>",
        "id": 228680017,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614810385
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 228680307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614810520
    },
    {
        "content": "<p>Have you done</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span> <span class=\"n\">of_char_zero</span> <span class=\"n\">your_hypothesis</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 228680502,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614810605
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 228680528,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614810613
    },
    {
        "content": "<p>So the typeclass system will find the instance automatically.</p>",
        "id": 228680622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614810661
    },
    {
        "content": "<p>Here's a little game you can play to see that this actually works inside a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">this_is_a_thing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228681007,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614810845
    },
    {
        "content": "<p>The idea is that \"the system\" (the type class inference system) is supposed to deal with all the terms of type <code>X</code> if <code>X</code> is a so-called \"class\". It is doing this all the time -- if you write <code>[ring R]</code> and then want to use <code>add_zero</code> to prove <code>r + 0 = r</code>, for some <code>r : R</code>, Lean has a problem, because <code>#check @add_zero</code> shows this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>In other words, <code>add_zero</code> is a theorem which applies to all <code>add_monoid</code>s. But <code>R</code> is a ring, which to Lean means that there is a term <code>_inst_1 : ring R</code> which is known to the type class system. However the type class system also knows that every <code>ring</code> is an <code>add_monoid</code>, as can be checked like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>so the lemma applies automatically, because the type class system does the job of finding the correct term of type <code>add_monoid R</code> which <code>add_zero</code> needs as an input.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">add_zero</span> <span class=\"n\">r</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>",
        "id": 228681221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614810943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">char_zero</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">char_zero</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">hq.2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- here I want to apply char_p.of_char_zero to hyp,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(I know the assumption hq with the <code>true \\and </code> is a bit stupid. If I remove the <code>true \\and </code> bit, then <code>apply char_p.of_char_zero,</code>precisely works, but if I generate the hypothesis <code>hyp</code> in the middle of the proof it won't work.</p>",
        "id": 228681475,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614811067
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">char_zero</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hq.2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228681771,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614811206
    },
    {
        "content": "<p>The <code>fooI</code> instances let you introduce instances to the typeclass system inside a tactic block.</p>",
        "id": 228681845,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614811245
    },
    {
        "content": "<p><code>char_zero</code> is a class, but you didn't put it in square brackets before the colon, so the type class inference system ignored it. The usual way to get something into the system is square brackets before the colon, and <code>haveI</code> is a way to add things in the middle of a proof. Another useful one is <code>resetI</code> which adds all the instances of the classes which are hypotheses.</p>",
        "id": 228682045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614811347
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">char_zero</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hq</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"c1\">-- now `h2 : char_zero F` is an assumption</span>\n  <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"c1\">-- now it's in the type class system</span>\n  <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228682146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614811418
    },
    {
        "content": "<p>OK, learned another thing -- thank you all!</p>",
        "id": 228682170,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614811433
    },
    {
        "content": "<p>The issue you originally faced was that <code>[char_zero F]</code> was a required instance in <code>char_p.of_char_zero</code>, and you didn't have that in context. If you want to do things fully explicitly, you can do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">char_zero</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">claim</span> <span class=\"o\">:=</span> <span class=\"n\">hq.2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">char_p.of_char_zero</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">hq.2</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228682299,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614811479
    },
    {
        "content": "<p>Type class inference took me a long time to master. A lot of the examples in the docs are pretty non-mathematical. This is the reason I mentioned the <code>ring</code> example. Another example is notation: <code>instance has_add X := ⟨foo⟩</code> makes <code>x + y</code> mean <code>foo x y</code>, because <code>+</code> is notation for <code>has_add.add</code>, and if you <code>#check @has_add.add</code> you'll see that it asks the type class inference system for a term of type <code>has_add X</code>, which the <code>instance</code> has put there.</p>",
        "id": 228682546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614811603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> : yes, if you are going to expand the Mathematics in Lean documentary, please do include such explanations.</p>",
        "id": 228683011,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614811811
    },
    {
        "content": "<p>I didn't know the <code>haveI</code> (nor <code>resetI</code>), and it also doesn't seem to be discussed in the Theorem Proving in Lean doc.</p>",
        "id": 228683320,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614811977
    },
    {
        "content": "<p>No, these things are well-kept secrets ;-) They are part of mathlib and were introduced after TPIL was written.</p>",
        "id": 228683371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614812004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> do you know about the tactic documentation here? <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a></p>",
        "id": 228683420,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614812033
    },
    {
        "content": "<p>Just keep asking here if you are not sure about anything -- you see that four people had responded to your question within ten minutes of you asking.</p>",
        "id": 228683485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614812049
    },
    {
        "content": "<p>Yes, I am grateful for all your immediate help -- absolutely stellar! Do you guys never sleep? :) <br>\n<span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> , I stumbled over it once, but didn't realize its importance yet. I will try to digest it then; thanks again.</p>",
        "id": 228683850,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614812211
    },
    {
        "content": "<p>Some of us are in the western hemisphere :) I don't know why all these people in Europe are still awake! <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 228683950,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614812264
    },
    {
        "content": "<p>I'm preparing my lecture on quotients in Lean for tomorrow!</p>",
        "id": 228684077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614812315
    },
    {
        "content": "<p>I see that the problem is already solved, but <span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> how did you end up with <code>hq : true ∧ char_zero F</code>? Because that's not supposed to happen <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 228719996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614835767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Invoking.20instances.20explicitly/near/228682045\">said</a>:</p>\n<blockquote>\n<p><code>char_zero</code> is a class, but you didn't put it in square brackets before the colon, so the type class inference system ignored it.</p>\n</blockquote>\n<p>Technically this explanation is wrong. The kind of brackets you use in a <code>def</code> or statement matters only when <em>using</em> it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">char_zero</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The way Lean picks up instance assumptions when elaborating the part right of the colon (and what is in the system at the beginning of the proof) seems to be simply looping through the context and looking for type classes, but not looking inside inductive constructors like Jakob's and.</p>",
        "id": 228730288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614844149
    },
    {
        "content": "<p>Aah yes, I've been confused by this before. Thanks!</p>",
        "id": 228731440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614845088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> : Yes, sure, this was a bit silly; this was just in order to have a minimal example. In the real situation I had a conjunction like <code>p = 1 \\and char_zero F</code>, in the process of writing down some basic lemmas about the exponential characteristic.</p>",
        "id": 228746649,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614852892
    },
    {
        "content": "<p>Ok, understood. But whenever possible you should try to split such conjunctions into two separate hypotheses. Then you can feed <code>[char_zero F]</code> to TC.</p>",
        "id": 228746915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614853023
    }
]