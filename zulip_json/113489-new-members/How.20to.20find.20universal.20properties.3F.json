[
    {
        "content": "<p>I am familiarizing myself with <code>category_theory</code> part of library. I am lost on how to find various universal properties of categorical constructions. For example, the universal property of kernel:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.abelian</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">zero_object</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">K'</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"n\">K'</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span><span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">K'</span> <span class=\"bp\">≅</span> <span class=\"n\">kernel</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">u.hom</span> <span class=\"bp\">≫</span> <span class=\"n\">kernel.ι</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263282517,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1638362146
    },
    {
        "content": "<p>Your <code>K'</code> isn't going to be isomorphic to the kernel in general. You need more conditions for that.</p>",
        "id": 263282854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638362319
    },
    {
        "content": "<p>But you can get a morphism</p>",
        "id": 263282876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638362329
    },
    {
        "content": "<p>There should be a <code>kernel.lift</code></p>",
        "id": 263282906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638362347
    },
    {
        "content": "<p>I thought this is the universal property of kernels. I copied it from Wikipedia.</p>",
        "id": 263286566,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1638364116
    },
    {
        "content": "<p>It's usually a good idea to have a look at the file where the construction is defined, in this case <a href=\"https://tqft.net/mathlib/category_theory/limits/shapes/kernels\">file#category_theory/limits/shapes/kernels</a>. The docstring at the top explains the API.</p>\n<p>What you posted can be called \"the universal property of kernels\" (except as Johan pointed out, <code>K' ≅ kernel f</code> should read <code>K' ⟶ kernel f</code>), but note that there are usually a couple different equivalent ways of stating a universal property. Mathlib's kernel API is divided into more components: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.kernel.lift\">docs#category_theory.limits.kernel.lift</a> will give you the function <code>u</code>, <code>kernel.lift_ι</code> gives you its defining property, and I believe there should be an instance saying that <code>kernel.ι</code> is mono which gives you uniqueness.</p>",
        "id": 263288049,
        "sender_full_name": "David Wärn",
        "timestamp": 1638364715
    }
]