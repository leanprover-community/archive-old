[
    {
        "content": "<p>I have been confused for <em>weeks</em> about why, when I open a Lean file in VS Code, it can't find any of its imports, even though there is a <code>leanpkg.path</code> file in the directory and Lean compiles the file just fine on the command line.</p>\n<p>I just figured out, finally, that for some reason, when you \"open a file\" in VS Code, it invokes lean in some way that apparently prevents it from looking at the <code>leanpkg.path</code> file.  In order for lean to behave normally in VS Code (i.e. the way it does on the command line), you have to first \"open folder\" and then click on the file you want to open inside the folder display.</p>\n<p>This is <em>extremely</em> unintuitive for me.  When I open a file in a text editor, I expect to be able to edit it in the same way regardless of how I happened to open it.  Why does VS Code even have an \"open file\" option, if it doesn't open the file in a useful way?  What exactly does this command do differently, and what is the use case for when someone would want that?</p>\n<p>At least, it would be helpful to have some big red warnings about this in the Lean documentation.  Now that I go back I see that the page on <a href=\"https://leanprover-community.github.io/install/project.html\">Lean projects</a> indeed instructs me to use \"Open folder\"; but it doesn't give any indication that opening a file in this way is different from opening it with \"Open file\", so I naturally assumed that it didn't matter.</p>",
        "id": 303755564,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665634006
    },
    {
        "content": "<p>Even though I've been aware that I need to use \"open folder\" for 4 years, I have no idea what the underlying reason is. I would also like to know the answer to this question.</p>",
        "id": 303760248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665638734
    },
    {
        "content": "<p>VSCode has a notion of \"workspaces\" which are essentially defined by the folder that you open. The server is run from that directory, and it looks for <code>leanpkg.path</code> in that directory and its parents</p>",
        "id": 303760719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665639138
    },
    {
        "content": "<p>if you open a random file unrelated to the workspace root, it will not be able to find the root file and won't be able to resolve imports</p>",
        "id": 303760772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665639195
    },
    {
        "content": "<p>Wouldn't it make more sense for the server to always be run from the directory where the file is?</p>",
        "id": 303761891,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665640150
    },
    {
        "content": "<p>And if I just open a file, without having opened any folder, what could the workspace root possibly be <em>other</em> than the folder where the file is?</p>",
        "id": 303761927,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665640191
    },
    {
        "content": "<p>my understanding is that this is considered a niche use case. I believe lean 4 is even less willing to play along with non-project loose files</p>",
        "id": 303762489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665640635
    },
    {
        "content": "<p>honestly I can't think of very many programming languages that do</p>",
        "id": 303762610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665640700
    },
    {
        "content": "<p>But my file <em>is</em> in a project; there is a <code>leanpkg.path</code> file in its directory.  How am I supposed to guess that I have to tell VS Code to \"open the project\" rather than simply opening the file I want to work on?</p>",
        "id": 303763928,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665641637
    },
    {
        "content": "<p>I haven't used VS Code before, but I have programmed in many programming languages using Emacs, and in none of them did I ever have to do anything to edit a file, even one belonging to a \"project\", other than simply  open that file.</p>",
        "id": 303764012,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665641689
    },
    {
        "content": "<p>The reasoning I <em>think</em> at this point is just that no one has tweaked the root dir discovery in the VSCode Lean plugin to work the way you suggest -- in neovim it indeed works the way you mentioned (not sure about lean-mode). I think a PR to fix this for VSCode was welcome last time it was discussed, but I couldn't figure out the right VSCode APIs when I looked and gave up</p>",
        "id": 303770285,
        "sender_full_name": "Julian Berman",
        "timestamp": 1665645431
    },
    {
        "content": "<p>Really that behavior of VSCode is a shame. I thought we added a warning message a long time ago. Did I dream that up?</p>",
        "id": 303801312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665658311
    },
    {
        "content": "<p>There are warning messages -- e.g. on the community website, in the URL which appears to the user when an import fails.</p>",
        "id": 303801557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665658424
    },
    {
        "content": "<p>I didn't dream the existence of <a href=\"https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/leanpkg.ts#L97-L100\">https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/leanpkg.ts#L97-L100</a></p>",
        "id": 303802060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665658669
    },
    {
        "content": "<p>Is it no longer working?</p>",
        "id": 303802067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665658675
    },
    {
        "content": "<p>Maybe this is a bad side effect of having both the Lean3 and Lean4 VSCode extensions installed. Mike, do you have both extensions installed?</p>",
        "id": 303802264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665658762
    },
    {
        "content": "<p>wooah now i am super-confused: if I use VS Code to open a random file in mathlib or lean-liquid then imports work?! The only difference is that the blue line at the bottom is now purple.</p>",
        "id": 303802658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665658914
    },
    {
        "content": "<p><del>that's</del> purple line is just vscode's default behaviour when a folder isn't open, afaik</p>",
        "id": 303803365,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665659179
    },
    {
        "content": "<p>\"that\" := \"bottom line is purple\" or \"imports now work\"?</p>",
        "id": 303803444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665659216
    },
    {
        "content": "<p>bottom line is purple</p>",
        "id": 303803480,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1665659235
    },
    {
        "content": "<p>I have only the Lean 3 extension installed.</p>",
        "id": 303865938,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665675765
    },
    {
        "content": "<p>The suggestion at <a href=\"https://leanprover-community.github.io/file-not-found.html\">https://leanprover-community.github.io/file-not-found.html</a> is indeed what finally clued me into what was going on.  You can certainly argue that I should have noticed it sooner.  But I do think this is <em>so</em> counterintuitive that if it's really unfixable, the warning messages should be big and red on the front page about how to set up VS Code.</p>",
        "id": 303866554,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665675938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/On.20the.20necessity.20of.20.22open.20folder.22/near/303802060\">said</a>:</p>\n<blockquote>\n<p>I didn't dream the existence of <a href=\"https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/leanpkg.ts#L97-L100\">https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/leanpkg.ts#L97-L100</a></p>\n</blockquote>\n<p>If I'm reading that code correctly, it just walks up through the parent directories of the workspace root looking for a <code>leanpkg.path</code>, and if it finds one, prompts the user to open that parent directory instead.  I don't know what the workspace root is if I \"open a file\" directly, but if it's set to something arbitrary like <code>/</code> or <code>$HOME</code>, it's not going to find the correct directory that way.</p>",
        "id": 303867300,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665676152
    },
    {
        "content": "<p>Probably it should walk the parents of the open file instead?</p>",
        "id": 303879201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665679384
    },
    {
        "content": "<p>I think the current behavior is because we have one global lean server per vscode window, and so therefore we need the workspace to agree on a single lean version, by putting <code>leanpkg.toml</code> in the root</p>",
        "id": 303879641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665679516
    },
    {
        "content": "<p>A related task would be to make the refactor described at <a href=\"https://github.com/microsoft/vscode/wiki/Adopting-Multi-Root-Workspace-APIs\">https://github.com/microsoft/vscode/wiki/Adopting-Multi-Root-Workspace-APIs</a></p>",
        "id": 303880208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665679677
    },
    {
        "content": "<p>Thanks Eric, that makes a lot of sense for why the behavior is the way it is.  In an ideal world, I would have expected that each bare file would have its own lean server, run from the location of that file.  But maybe that's not practical.</p>\n<p>Would it be possible to entirely forbid opening bare lean files in VS Code at all?</p>",
        "id": 303895692,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665684787
    },
    {
        "content": "<p>I don't think it's possible to forbid VScode from opening a single file.</p>",
        "id": 303896216,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665684973
    },
    {
        "content": "<p>But could the Lean extension refuse to run on a single file?</p>",
        "id": 303896415,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665685051
    },
    {
        "content": "<p>Yeah that's probably possible, but I don't know enough about the internals. </p>\n<p>Anyway, one thing I do know for sure is that in emacs you can open a lean file and the package will figure out the root of the project dir.</p>",
        "id": 303896543,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665685090
    },
    {
        "content": "<p>Yeah -- obviously, since Emacs doesn't even have a notion of \"open a folder\".</p>",
        "id": 303896629,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665685136
    },
    {
        "content": "<p>right.</p>",
        "id": 303896649,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1665685147
    },
    {
        "content": "<p>It's not hard to look at the location of a file and walk up the directory tree until you find a <code>leanpkg.path</code>.</p>",
        "id": 303896668,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665685155
    },
    {
        "content": "<blockquote>\n<p>In an ideal world, I would have expected that each bare file would have its own lean server, run from the location of that file. But maybe that's not practical.</p>\n</blockquote>\n<p>Each new <em>window</em> does get its own Lean server. Editing a foundational file can be very slow when a leaf file (that depends on it) is open within the same window, due to the server compiling everything in between, so I usually just \"duplicate workspace\" which will open a new window.</p>",
        "id": 303933059,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665699378
    },
    {
        "content": "<p>That's a great example of why I don't like the \"continuous compilation\" design.  It's cute when it's speedy, but when things get slow it is really annoying.</p>",
        "id": 304070487,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665764572
    },
    {
        "content": "<p>I heard that Lean 4 doesn't do that.</p>",
        "id": 304072417,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665765139
    },
    {
        "content": "<p>Doesn't do what?</p>",
        "id": 304074811,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665765857
    },
    {
        "content": "<p>Lean 4 doesn't automatically propagate changes you made to other files to your current file.  You have to manually refresh file dependencies in order to do this.<br>\nLean 4 still does continuous compilation.<br>\nI agree that continuous compilation is annoying when it is slow, and I would have liked the Coq-style \"step through proof\" in certain long proofs. Lean 4 does support caching of intermediate goal states, so the continuous compilation should recompile a lot fewer steps each time.</p>",
        "id": 304075685,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665766130
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285841776\">This</a> is where I heard that Lean 4 behaves differently, but I probably don't actually understand how it really behaves. With Lean 3 you can already select among six options (checking nothing / visible lines / visible lines and above / visible files / open files / project files) in VSCode, but none seems to help with the lagging issue when editing foundational file with a leaf file open. I assume if I select \"checking nothing\" then nothing will be compiled, but the <a href=\"#narrow/stream/113488-general/topic/VSCode.20regularly.20glitching.2C.20to.20the.20point.20on.20unusability/near/273470651\">dependencies are still being resolved</a> after each keystroke? That seems to be the key factor in the lagging problem. Does Lean 4 behave differently in this aspect?</p>\n<blockquote>\n<p>Lean 4 doesn't automatically propagate changes you made to other files to your current file. You have to manually refresh file dependencies in order to do this.</p>\n</blockquote>\n<p>Does that mean Lean 4 will still use the list of open files to determine what to compile, but won't update dependency after each keystroke? Once you make an edit to the foundational file it will just compile up to / including all open files, and when you switch to the leaf file and refresh dependencies then you can immediately used what's compiled in the background?</p>",
        "id": 304082843,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665768509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/On.20the.20necessity.20of.20.22open.20folder.22/near/304082843\">said</a>:</p>\n<blockquote>\n<p>With Lean 3 you can already select among six options (checking nothing / visible lines / visible lines and above / visible files / open files / project files) in VSCode</p>\n</blockquote>\n<p>That's useful to know.  Where are options like this documented?</p>",
        "id": 304083430,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665768710
    },
    {
        "content": "<blockquote>\n<p>Where are options like this documented?</p>\n</blockquote>\n<p>I wonder too! I found <a href=\"https://github.com/leanprover/vscode-lean/blob/master/package.json#L264\">this</a> and <a href=\"https://leanprover-community.github.io/tips_and_tricks.html#the-exit-command-and-\">this</a> by Google search</p>",
        "id": 304085462,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665769437
    },
    {
        "content": "<p>It's also a useful trick that when working on a proof you can use <code>sorry</code> to prevent Lean from checking the rest of the proof (if there are multiple goals you need <code>repeat {sorry}</code>, and you can also sorry out blocks of codes enclosed by <code>{}</code> using <code>sorry { ... }</code>, when you don't want Lean to recheck a portion of proof you already completed.</p>",
        "id": 304085883,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665769569
    },
    {
        "content": "<p>The options are also (briefly) documented here: <a href=\"https://github.com/leanprover/vscode-lean#server-settings\">https://github.com/leanprover/vscode-lean#server-settings</a></p>",
        "id": 304086164,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1665769687
    }
]