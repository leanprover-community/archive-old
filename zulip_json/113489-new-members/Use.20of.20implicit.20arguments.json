[
    {
        "content": "<p>Something I'm finding slightly annoying is the fact that mathlib makes arguments \"as implicit as possible\", so when I am applying a lemma I very often have to <code>@</code> the function just so that I can tell Lean what I'm trying to prove. Sometimes it ends up that I can remove the <code>@</code> again when I've constructed a call, but often I have an inline <code>by linarith</code> or similar as an argument, and when I remove the <code>@</code> Lean stops being able to infer the types correctly.</p>\n<p>The example I'm looking at right now is <code>finset.single_le_sum</code>, which has an argument \"for all x, <code>f x</code> is positive\"; and Lean can't infer <code>f</code>. (Lean can infer the <code>finset.range (n + 1)</code> in my real example because it's sufficiently constrained by the thing I've replaced with <code>by sorry</code>; but it can't infer the function <code>choose (2 * n + 1)</code>.)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">commute</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">choose_middle_le_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">single_le_sum</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">),</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Do people usually just extract the <code>(λ x _, by linarith)</code> into its own term with a specific named type? That gives Lean enough to infer the function, but it's kind of verbose.</p>\n<p>Agda makes this a non-issue by allowing you to specify just a named subset of the implicit arguments, rather than underscoring them all out; but a mathlib-level solution would be to make the argument <code>f</code> explicit, so that a consumer who had a term in hand could just underscore it out at the cost of two characters, while a consumer who wanted to construct it by tactic would be able to supply it at a saving of a full line.</p>",
        "id": 198571331,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590305888
    },
    {
        "content": "<p>thanks for providing an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 198571355,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590305981
    },
    {
        "content": "<p>but this works in both tactic and term mode:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">commute</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">choose_middle_le_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">single_le_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span><span class=\"o\">),</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n    <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">single_le_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span><span class=\"o\">),</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198571428,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590306122
    },
    {
        "content": "<p>so maybe this time it isn't minimal?</p>",
        "id": 198571457,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590306135
    },
    {
        "content": "<p>I'm so confused - I must have done something stupid</p>",
        "id": 198571573,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590306392
    },
    {
        "content": "<p>because that definitely does work</p>",
        "id": 198571574,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590306399
    },
    {
        "content": "<p>maybe it <em>is</em> minimal, but not an example <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 198577318,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590316799
    },
    {
        "content": "<p>I do find myself being annoyed by this sometimes. There are no hard and fast rules, I think sometimes we could do with a few more explicit arguments. I don't think there's much wrong with a show or a have though either.</p>",
        "id": 198597880,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590350948
    }
]