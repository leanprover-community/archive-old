[
    {
        "content": "<p>Hi all,</p>\n<p>I'm new here and having a lot of fun with Lean, working through some of the lectures and exercises from this summer's workshop and hopefully working towards a point where I can confidently attempt my own contributions. One small frustration is that while the low-level step-by-step of theorem proving is very intuitive, calling on the more powerful tactics can feel like appealing for divine intervention, and I often find myself just throwing a variety of tactics at a situation to see if anything sticks. I assume this gets better with practice.</p>\n<p>I want to ask a more specific question: why does <code>simpa</code> seem to be more powerful than <code>simp</code>? The documentation sort of implies that to be useful, <code>simpa</code> needs either a <code>using</code> expression or a hypothesis <code>this</code> to be useful, but I have found myself in situations where <code>simp</code> doesn't do anything and plain <code>simpa</code> closes the goal immediately. Looking in particular at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">elim_comp_inl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→.</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→.</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f.elim</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">inl</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n</code></pre></div>\n\n<p>towards the end of <code>structure.lean</code>, in the exercises about coproducts of pointed types: <code>ext, simpa</code> proves the lemma immediately, but  with <code>ext, simp</code>, <code>simp</code> fails to simplify (as does <code>simp at *</code>, so it can't just be that <code>simpa</code> is trying to simplify the hypotheses). How can I understand this?</p>",
        "id": 212840488,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602257246
    },
    {
        "content": "<p><code>simpa</code> is essentially <code>simp</code> followed by <code>assumption'</code>, if I understand correctly.</p>",
        "id": 212841072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602257540
    },
    {
        "content": "<p>What's the tactic state before <code>simp</code>/<code>simpa</code>?</p>",
        "id": 212841183,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602257595
    },
    {
        "content": "<p>Can you tell me what you mean by \"tactic state\"?</p>",
        "id": 212841229,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602257622
    },
    {
        "content": "<p>What does the goal window say before using the tactic?</p>",
        "id": 212841328,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602257658
    },
    {
        "content": "<p>(You should be able to just copy + paste.)</p>",
        "id": 212841347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602257669
    },
    {
        "content": "<p>Ah I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">pointed_type</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">pointed_type</span>\n<span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">pointed_type</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→.</span> <span class=\"n\">C</span>\n<span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→.</span> <span class=\"n\">C</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">A</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">f.elim</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">inl</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 212841388,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602257687
    },
    {
        "content": "<p>(BTW, hi! I like your paper on exodromy!)</p>",
        "id": 212841460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602257727
    },
    {
        "content": "<p>Hi, thanks!</p>",
        "id": 212841482,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602257738
    },
    {
        "content": "<p>Can you send a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 212841626,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602257805
    },
    {
        "content": "<p>I can try</p>",
        "id": 212841701,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602257852
    },
    {
        "content": "<p>Not sure how to go about it because if I formulate the corresponding statement for plain types rather than pointed, <code>simp</code> does work. But if you have the exercises repo from the workshop (<code>leanproject get lftcm2020</code>), and open the relevant solutions file  (<code>solutions/wednesday/structures.lean</code>), it's on line 639 - the proof can be replaced by <code>ext, simpa</code> but not <code>ext, simp</code>.</p>",
        "id": 212850859,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602262673
    },
    {
        "content": "<p>If you do <code>show_term {simpa}</code> you'll see that all it ends up doing is <code>eq.refl</code> to close the goal, I'm not sure why though.<br>\nSo the proof could just be <code>refl</code> in this instance.</p>",
        "id": 212853654,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602264248
    },
    {
        "content": "<p>Oh interesting! I didn't know about <code>show_term</code>. That should demystify tactics a lot for me</p>",
        "id": 212853914,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602264398
    },
    {
        "content": "<p>Looking at the code for <code>simpa</code>, it looks like it calls <code>trivial</code> which calls <code>refl</code>. So what's actually going on is that <code>simpa</code> doesn't actually do any simplifaction, and it's just the <code>refl</code> that kills the goal. <code>simp</code> alone fails because no simplification is done.</p>",
        "id": 212860301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602268047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348873\">Saul Glasman</span> <a href=\"#narrow/stream/113489-new-members/topic/.60simp.60.20vs.20.60simpa.60/near/212850859\">said</a>:</p>\n<blockquote>\n<p>Not sure how to go about it because if I formulate the corresponding statement for plain types rather than pointed, <code>simp</code> does work. But if you have the exercises repo from the workshop (<code>leanproject get lftcm2020</code>), and open the relevant solutions file  (<code>solutions/wednesday/structures.lean</code>), it's on line 639 - the proof can be replaced by <code>ext, simpa</code> but not <code>ext, simp</code>.</p>\n</blockquote>\n<p>This is a common misunderstanding of <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>'s. What you need to do is to give stubbed definitions for everything in the theorem statement, which generally takes &lt; 10 lines even for theorems relying on lots of things. Alternatively you can actually minimize the example, simplifying things while retaining the error, but mileage may vary depending on the bug in question</p>",
        "id": 212892456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602292523
    }
]