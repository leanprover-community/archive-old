[
    {
        "content": "<p>I don't have a mwe because my question depends on quite a few definitions and I couldn't isolate it so far, but I think it's more of a general question, so I hope it's fine. I printed the axioms used by one of my proofs, and to my surpise I saw <code>quot.sound</code> listed. <br>\nThen, by commenting out everything, I concluded that it is due to a <code>simp only [dite_eq_ite]</code>. I can't understand why this happens, since <code>dite_eq_ite</code> is proved just by <code>rfl</code> (or maybe this doesn't have anything to do it). In any case, how can I understand why <code>quot.sound</code> is used by simp?</p>",
        "id": 234548049,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618423990
    },
    {
        "content": "<p>And more generally, is there a more detailed way to track where the axioms of your proof, as listed by <code>#print axioms ...</code> come from?</p>",
        "id": 234548220,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618424053
    },
    {
        "content": "<p><code>#print axioms dite_eq_ite -- no axioms</code> -- so your diagnosis is not correct and it's really hard to help you without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. Just post a large amount of code, maybe as a gist or whatever.</p>",
        "id": 234548747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618424260
    },
    {
        "content": "<p>simp  could be applying function extensionality <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#function-extensionality\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#function-extensionality</a></p>",
        "id": 234549617,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1618424582
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can't persuade <code>simp only</code> to do this :-/</p>",
        "id": 234549967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618424733
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">funext</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@[_ext_lemma_core, ext list.cons.{0} ext_param_type (sum.inr.{0 0} (option.{0} name) (option.{0} name) (option.some.{0} name (name.mk_numeral (unsigned.of_nat' (has_zero.zero.{0} nat nat.has_zero)) name.anonymous))) (list.cons.{0} ext_param_type (sum.inr.{0 0} (option.{0} name) (option.{0} name) (option.some.{0} name (name.mk_string \"thunk\" name.anonymous))) (list.nil.{0} ext_param_type)), intro!]</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>It's outputs like that which remind me how little I know.</p>",
        "id": 234550179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618424820
    },
    {
        "content": "<p>Ok, so I managed to reduce it to this (I don't think the decidability proof is relevant, but who knows, I included it nevertheless).<br>\nThe proof I'm interested in is <code>and_contr</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">prime</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">implication</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">conjunction</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">formula</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`‚üπ`</span> <span class=\"o\">:</span> <span class=\"mi\">45</span> <span class=\"o\">:=</span> <span class=\"n\">implication</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`‚ãÄ`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">conjunction</span>\n\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mwc</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span> <span class=\"bp\">√ó</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prime</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚ãÄ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A.mwc.1</span> <span class=\"bp\">√ó</span> <span class=\"n\">B.mwc.1</span><span class=\"o\">,</span> <span class=\"n\">A.mwc.2</span> <span class=\"bp\">√ó</span> <span class=\"n\">B.mwc.2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚üπ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">A.mwc.1</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">B.mwc.2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A.mwc.2</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"o\">((</span><span class=\"n\">A.mwc.1</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">B.mwc.1</span><span class=\"o\">)),</span> <span class=\"n\">A.mwc.1</span> <span class=\"bp\">√ó</span> <span class=\"n\">B.mwc.2</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">@[reducible, simp]</span>\n<span class=\"kd\">def</span> <span class=\"bp\">ùïé</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">,</span> <span class=\"n\">A.mwc.fst</span>\n<span class=\"kd\">@[reducible, simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">‚ÑÇ</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">,</span> <span class=\"n\">A.mwc.snd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dia</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">,</span> <span class=\"n\">A.</span><span class=\"bp\">ùïé</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A.‚ÑÇ</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚ãÄ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A.dia</span> <span class=\"n\">x.fst</span> <span class=\"n\">y.fst</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">B.dia</span> <span class=\"n\">x.snd</span> <span class=\"n\">y.snd</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚üπ</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A.dia</span> <span class=\"n\">y.fst</span> <span class=\"o\">(</span><span class=\"n\">x.fst</span> <span class=\"n\">y.fst</span> <span class=\"n\">y.snd</span><span class=\"o\">))</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">B.dia</span> <span class=\"o\">(</span><span class=\"n\">x.snd</span> <span class=\"n\">y.fst</span><span class=\"o\">)</span> <span class=\"n\">y.snd</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"n\">dia.decidable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A.</span><span class=\"bp\">ùïé</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A.‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"bp\">$</span> <span class=\"n\">A.dia</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">prime</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">conjunction</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">ihA</span> <span class=\"n\">ihB</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dia</span><span class=\"o\">],</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">ihA</span> <span class=\"n\">x.fst</span> <span class=\"n\">y.fst</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">ihB</span> <span class=\"n\">x.snd</span> <span class=\"n\">y.snd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">and.decidable</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ihA</span> <span class=\"n\">ihB</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">implication</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">ihA</span> <span class=\"n\">ihB</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dia</span><span class=\"o\">],</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">ihA</span> <span class=\"n\">y.fst</span> <span class=\"o\">(</span><span class=\"n\">x.fst</span> <span class=\"n\">y.fst</span> <span class=\"n\">y.snd</span><span class=\"o\">),</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">ihB</span> <span class=\"o\">(</span><span class=\"n\">x.snd</span> <span class=\"n\">y.fst</span><span class=\"o\">)</span> <span class=\"n\">y.snd</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">implies.decidable</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ihA</span> <span class=\"n\">ihB</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">sound</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">A.</span><span class=\"bp\">ùïé</span>  <span class=\"bp\">//</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">‚ÑÇ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A.dia</span> <span class=\"n\">t</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">and_contr</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">formula</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sound</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚üπ</span> <span class=\"n\">A</span> <span class=\"bp\">‚ãÄ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">subtype.mk</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">prod.mk</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A.dia</span> <span class=\"n\">x</span> <span class=\"n\">y.fst</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">y.snd</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">y.fst</span><span class=\"o\">,</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">})</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dia</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mwc</span><span class=\"o\">,</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">A.dia</span> <span class=\"n\">y.fst</span> <span class=\"n\">y.snd.fst</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">‚ü©,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">if_false</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">and_contr</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">formula</span>\n</code></pre></div>",
        "id": 234550771,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618425036
    },
    {
        "content": "<p>Using <code>dsimp</code> instead eliminates the use</p>",
        "id": 234551473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618425315
    },
    {
        "content": "<p>the reason <code>simp</code> uses <code>quot.sound</code> is because it is used in the proof of <code>funext</code> which is needed for <code>simp</code> to \"rewrite under binders\"</p>",
        "id": 234551559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618425356
    },
    {
        "content": "<p><code>dsimp</code> just needs lambda to respect defeq which doesn't require funext</p>",
        "id": 234551667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618425382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/simp.20.5Bdite_eq_ite.5D.20introduces.20quot.2Esound/near/234550179\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">funext</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@[_ext_lemma_core, ext list.cons.{0} ext_param_type (sum.inr.{0 0} (option.{0} name) (option.{0} name) (option.some.{0} name (name.mk_numeral (unsigned.of_nat' (has_zero.zero.{0} nat nat.has_zero)) name.anonymous))) (list.cons.{0} ext_param_type (sum.inr.{0 0} (option.{0} name) (option.{0} name) (option.some.{0} name (name.mk_string \"thunk\" name.anonymous))) (list.nil.{0} ext_param_type)), intro!]</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>It's outputs like that which remind me how little I know.</p>\n</blockquote>\n<p>Note that that mostly looks terrible only because lean doesn't use the pretty printer to show expressions in attributes like it should</p>",
        "id": 234551914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618425494
    },
    {
        "content": "<p>I see, thanks for the clarifications!</p>",
        "id": 234553126,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618426037
    }
]