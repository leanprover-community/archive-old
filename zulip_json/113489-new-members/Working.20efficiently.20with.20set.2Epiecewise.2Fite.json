[
    {
        "content": "<p>While trying to do some analysis I realized that piecewise functions are quite important. For example, you might have a function defined on R \\ {0}, which is continuous at 0 with limit y. You then need to define a function g as f(x) when x != 0 and y when x = 0 to be able to prove <code>continuous_at g 0</code> or <code>continuous  g</code>.<br>\nAn explicit example of this kind of situation would be the following: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">has_inv.inv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">real.sin</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">set.piecewise</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"mi\">1</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">metric.continuous_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">dist</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">set.piecewise</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">real.sin</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n                                 <span class=\"bp\">-</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">real.sin</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>When resolving this kind of situation I can end up with a goal that insolves several <code>ite</code> with possibly each different functions and propositions of the form <code>\"variable\" \\in \"set\"</code>. I'm not looking for a way to solve this explicit problem above, but how to efficiently deal with many <code>ite</code> in this kind of situation.<br>\nI have found the theorems <code>ite_eq_iff</code> and <code>ite_apply</code>, which would allow me to deal with the situations above, but in more complicated situations they feel a bit inefficient and complicated to apply.<br>\nCould it be possible to have a method which allows you to split an expression involving n ite with n different variables directly into 2^n cases?</p>",
        "id": 214419806,
        "sender_full_name": "Golol",
        "timestamp": 1603535029
    },
    {
        "content": "<p>that would be <code>split_ifs</code></p>",
        "id": 214419998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603535290
    },
    {
        "content": "<p>but I think you should not do this kind of big case split unless you have to</p>",
        "id": 214420008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603535314
    },
    {
        "content": "<p>In this case, what you want is a theorem that says that a <code>set.piecewise</code> is continuous if the two branches agree on the frontier of the if-predicate; this is called the pasting lemma and I'm pretty sure mathlib has it already</p>",
        "id": 214420087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603535411
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_if\">docs#continuous_if</a></p>",
        "id": 214420104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603535455
    },
    {
        "content": "<p>actually I think you need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_if'\">docs#continuous_if'</a> since the original function is not continuous on the whole domain</p>",
        "id": 214420348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603535870
    },
    {
        "content": "<p>Thanks, split_ifs is exactly what I was looking for! The theorems <code>continuous_if</code> and <code>continuous_if'</code> are great too but damn, these names do make them hard to find if you're looking for something with \"ite\" or \"piecewise\" in the name.</p>",
        "id": 214420656,
        "sender_full_name": "Golol",
        "timestamp": 1603536306
    },
    {
        "content": "<p>it's usually referred to as <code>if</code>, except in a few (very popular) lemmas in core</p>",
        "id": 214420823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603536561
    },
    {
        "content": "<p>part of the reason for the ugly <code>ite</code> name is that <code>if</code> is a keyword</p>",
        "id": 214420835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603536602
    },
    {
        "content": "<p>Oh I see, the \"if\" in \"continuous_if\" refers to the presence of \"ite\", not \"-&gt; continuous ...\".</p>",
        "id": 214421077,
        "sender_full_name": "Golol",
        "timestamp": 1603536911
    },
    {
        "content": "<p>no, that's always <code>of</code></p>",
        "id": 214421473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603537410
    },
    {
        "content": "<p>or occasionally <code>imp</code> in logic files</p>",
        "id": 214421520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603537444
    },
    {
        "content": "<p>I think what's missing here is a punctured-neighbourhood lemma for continuity: a function is continuous if and only if for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>, as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> tends to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> but without being equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> tends to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(c)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span>.  I'm not sure whether we have this!  <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> or <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> might know.  It should be formulated using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_within\">docs#nhds_within</a>.  Then you will only have two cases.</p>",
        "id": 214432276,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603551911
    },
    {
        "content": "<p>If we don't have it, it would be a very useful addition ...</p>",
        "id": 214432289,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603551946
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_within_at_diff_self\">docs#continuous_within_at_diff_self</a> what you're looking for ?</p>",
        "id": 214433439,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1603553423
    },
    {
        "content": "<p>Yes, perfect, thank you!  If <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_at_diff_self\">docs#continuous_at_diff_self</a> exists, that would be even better for <span class=\"user-mention\" data-user-id=\"243838\">@Golol</span>'s purposes.</p>",
        "id": 214433526,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603553526
    },
    {
        "content": "<p>No, it doesn't exist.  But Golol, you can apply the lemma Anatole linked, just using <code>univ</code> as the set <code>s</code>.</p>",
        "id": 214433547,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603553590
    },
    {
        "content": "<p>Also, as you're working on R which is ordered, you might want to know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_at_iff_continuous_left'_right'\">docs#continuous_at_iff_continuous_left'_right'</a> which is similar</p>",
        "id": 214434630,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1603555051
    }
]