[
    {
        "content": "<p>I'm working with multiple big mutually defined inductive types (I'm trying to formalize a language with up to 7 different syntactic sorts). This works okay, but when I try to define corresponding recursive functions, Lean informs me that it has <code>failed to prove recursive application is decreasing, well founded relation</code>. Here is a smaller counterexample:</p>\n<div class=\"codehilite\"><pre><span></span>inductive N : Type\n| Z : N\n| S : N -&gt; N\n\nmutual def f1, f2, f3\nwith f1 : N -&gt; N\n| N.Z := N.Z\n| (N.S n) := f2 n\nwith f2 : N -&gt; N\n| N.Z := N.Z\n| (N.S n) := f3 n\nwith f3 : N -&gt; N\n| N.Z := N.Z\n| (N.S n) := f1 n\n</pre></div>\n\n\n<p>From the error message, I see that it tries to do lexicographic ordering, however this obviously fails. Is there a simple workaround? Thanks in advance!</p>",
        "id": 175225264,
        "sender_full_name": "Matija Pretnar",
        "timestamp": 1568020108
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md</a></p>",
        "id": 175225628,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1568020484
    },
    {
        "content": "<p>I guess I am in the third case, where I need to define my own well-founded relation. The document suggests</p>\n<blockquote>\n<p>The easiest way to define a well founded relation is using a function to the natural numbers.</p>\n</blockquote>\n<p>This indeed solves the example above, but for my bigger example, the obvious candidate is the size of the term. However, for this I need to define 3+ mutually recursive functions, again causing the error above. What am I missing? I attach the full example. <a href=\"user_uploads/3121/MQKdjTD4HaM7RsrtQ5-zpE0h/syntax.lean\" target=\"_blank\" title=\"user_uploads/3121/MQKdjTD4HaM7RsrtQ5-zpE0h/syntax.lean\">syntax.lean</a></p>",
        "id": 175226092,
        "sender_full_name": "Matija Pretnar",
        "timestamp": 1568021031
    },
    {
        "content": "<p>Generally speaking, <code>mutual def</code> is pretty fragile, and things often go wrong. You're usually best off working out how to roll your own mutual definition (e.g. defining first <code>f123 : N \\to N \\times N \\times N</code>, then later defining <code>f1</code>, <code>f2</code>, and <code>f3</code> as projections).</p>",
        "id": 175226899,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568021871
    },
    {
        "content": "<p>Thank you for the advice, but unfortunately, it does not generalize to my case. I guess the simple example I gave was misleading. What I have are say mutually recursive types <code>T1</code>, <code>T2</code> and <code>T3</code> and I need to define functions <code>size1 : T1 \\to N</code>, <code>size2 : T2 \\to N</code>, <code>size3 : T3 \\to N</code> (as a first step in getting a well-founded relation). I tried avoiding <code>mutual def</code> by defining a single function <code>size : T1 \\oplus T2 \\oplus T3 \\to N</code>, but I get the same error.</p>",
        "id": 175227768,
        "sender_full_name": "Matija Pretnar",
        "timestamp": 1568022751
    },
    {
        "content": "<p>If it was me, I would try defining <code>size : T1 \\times T2 \\times T3 \\to N \\times N \\times N</code>, and then convincing lean that that is well-founded.</p>",
        "id": 175228944,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568023994
    },
    {
        "content": "<p>Is there a better way of defining this function aside from listing all the possible 8 x 10 x 2 = 160 cases? I guess one can be smart with auxiliary functions, but probably that again leads to the well-foundedness issues?</p>",
        "id": 175231707,
        "sender_full_name": "Matija Pretnar",
        "timestamp": 1568027201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239275\">@Matija Pretnar</span>  Yes, the declaration is slightly more ugly than three separate functions, but you do not need any more cases than you would have otherwise.</p>",
        "id": 175232735,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568028418
    },
    {
        "content": "<p>Just use a <code>match</code> statement to break off how to generate the three separate outputs</p>",
        "id": 175232751,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568028441
    },
    {
        "content": "<p>Like, a match for each of <code>T1</code>, <code>T2</code>, and <code>T3</code> (or however many there actually are).</p>",
        "id": 175232779,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568028462
    },
    {
        "content": "<p>Definitely there should be no duplication like you proposed.</p>",
        "id": 175232796,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568028475
    },
    {
        "content": "<p>Most of the time, for me anyway, writing everything like this just works out of the box.</p>",
        "id": 175232849,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568028504
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md</a><br>\nis where you have to go to fix further problems you then have</p>",
        "id": 175232859,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568028534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> Many thanks! You had me scared there for a moment <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> Do you by any chance have an example lying around so I can adapt it to my case?</p>",
        "id": 175234413,
        "sender_full_name": "Matija Pretnar",
        "timestamp": 1568030206
    },
    {
        "content": "<p>Sorry, not really. Here is sort-of an example:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/1274/files#diff-5d76d023ea3a78d10ca04f9fa501e572R187\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1274/files#diff-5d76d023ea3a78d10ca04f9fa501e572R187\">https://github.com/leanprover-community/mathlib/pull/1274/files#diff-5d76d023ea3a78d10ca04f9fa501e572R187</a><br>\nIdeally <code>le</code> and <code>lt</code> would be defined mutually, but you can see in that case that they are defined together. A <code>using_well_founded</code> at the end there is in fact required to make things actually work, but this seems about the easiest way forward, for example.</p>",
        "id": 175234790,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1568030436
    },
    {
        "content": "<p>I'll give it a try, thanks again!</p>",
        "id": 175235146,
        "sender_full_name": "Matija Pretnar",
        "timestamp": 1568030849
    },
    {
        "content": "<p>I have played around with it a bit and I would guess that the problem is in the fact that the type <code>A + B + C</code> is actually <code>A + (B + C)</code> (and the same problem probably persists with products?). As such, if you have <code>b : B</code> and <code>cons b : A</code> if you put them in the sum they become  <code>sum.inr (sum.inl b)</code> and <code>sum.inl (cons b)</code>, both having <code>.sizeof</code> (which is the default ordering it tries to use as far as I can tell) of 2 despite <code>b</code> being a subterm of <code>cons b</code>. </p>\n<p>Example: </p>\n<div class=\"codehilite\"><pre><span></span>mutual inductive A, B, C\nwith A : Type u\n| base : A\n| cons : C → A\nwith B : Type u\n| cons : A → B\nwith C : Type u\n| cons : B → C\n\nmutual def adepth, bdepth, cdepth\nwith adepth : A → ℕ\n| A.base := 1\n| (A.cons c) := 1 + cdepth c\nwith bdepth : B → ℕ\n| (B.cons a) := 1 + adepth a\nwith cdepth : C → ℕ\n| (C.cons b) := 1 + bdepth b\n</pre></div>\n\n\n<p>The above code complains that it cant prove <code>2 &lt; 2</code> in the case <code>| (A.cons c) := 1 + cdepth c </code>.<br>\nThis can then be kinda fixed by introducing a new type <code>t(riple)sum</code>.</p>\n<div class=\"codehilite\"><pre><span></span>inductive tsum\n| first : A → tsum\n| second : B → tsum\n| third : C → tsum\n\ndef depth : tsum → ℕ\n| (tsum.first A.base) := 1\n| (tsum.first (A.cons c)) := 1 + depth (tsum.third c)\n| (tsum.second (B.cons a)) := 1 + depth (tsum.first a)\n| (tsum.third (C.cons b)) := 1 + depth (tsum.second b)\n</pre></div>\n\n\n<p>and the code seems to work for now.</p>\n<p>But could one perhaps construct a better <code>sizeof</code> function for a specific sumtype?<br>\nSo something like</p>\n<div class=\"codehilite\"><pre><span></span>def correct_size :  A+B+C → ℕ\n| (sum.inl a) := A.sizeof a\n| (sum.inr (sum.inl b)) := B.sizeof b\n| (sum.inr (sum.inr c)) := C.sizeof c\n</pre></div>\n\n\n<p>and then use this as the measure? I have failed to find a way to insert this into the <code>using_well_founded</code> even with the help of<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md</a></p>\n<p>If I made any kind of wrong assumptions or conclusions please let me know.</p>",
        "id": 175267393,
        "sender_full_name": "Žiga Lukšič",
        "timestamp": 1568052305
    },
    {
        "content": "<p><code>correct_size</code> is not correct, because you are depending on the sizeof instance of A which is broken (you have to use <code>correct_size</code> to define it, meaning that this function is mutually recursive with a typeclass instance)</p>",
        "id": 175311494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568098605
    },
    {
        "content": "<p>The best way to solve this issue is to rewrite the mutual inductive as a regular inductive and use plain induction</p>",
        "id": 175311563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568098722
    }
]