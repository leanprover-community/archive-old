[
    {
        "content": "<p>I'm modeling a program execution, with a list of named variables of different types. Below is an almost-working MWE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">datatype</span>\n <span class=\"bp\">|</span> <span class=\"n\">is_nat</span> <span class=\"o\">:</span> <span class=\"n\">datatype</span>\n <span class=\"bp\">|</span> <span class=\"n\">is_bool</span> <span class=\"o\">:</span> <span class=\"n\">datatype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">datatype</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dt_map</span> <span class=\"o\">:</span> <span class=\"n\">datatype</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">is_nat</span>  <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n <span class=\"bp\">|</span> <span class=\"n\">is_bool</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span>\n\n<span class=\"n\">def</span> <span class=\"n\">variable_list</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">dt</span><span class=\"o\">:</span> <span class=\"n\">datatype</span><span class=\"o\">,</span> <span class=\"n\">dt_map</span> <span class=\"n\">dt</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">examplelist</span> <span class=\"o\">:</span> <span class=\"n\">variable_list</span> <span class=\"o\">:=</span> <span class=\"o\">[(</span><span class=\"s2\">&quot;b&quot;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">is_bool</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n                                    <span class=\"o\">(</span><span class=\"s2\">&quot;i&quot;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">is_nat</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n                                    <span class=\"o\">(</span><span class=\"s2\">&quot;j&quot;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">is_nat</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">)]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">get_variable</span><span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">t_key</span><span class=\"o\">:</span> <span class=\"n\">datatype</span><span class=\"o\">},</span>\n                  <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">variable_list</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">dt_map</span> <span class=\"n\">t_key</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n <span class=\"bp\">|</span> <span class=\"n\">dtype</span> <span class=\"n\">key</span> <span class=\"o\">((</span><span class=\"n\">key&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">dtype&#39;</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"n\">key&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">dtype</span><span class=\"bp\">=</span><span class=\"n\">dtype&#39;</span>\n    <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">val</span>   <span class=\"c1\">-- ERROR, has type (dt_map dtype&#39;) expected (dt_map dtype)</span>\n    <span class=\"k\">else</span> <span class=\"bp\">@</span><span class=\"n\">get_variable</span> <span class=\"n\">dtype</span> <span class=\"n\">key</span> <span class=\"n\">t</span>\n</code></pre></div>\n\n\n<p>The issue is that type inference doesn't know that two things are equal (which are certainly equal, by hypothesis). Is there a way to signal this to Lean (or incorporate a proof that uses <code>hyp</code>)?</p>",
        "id": 203582639,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594447110
    },
    {
        "content": "<p>You have to rewrite the type using the hypothesis somehow.  I'm not too good with that in term mode, but this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">get_variable</span><span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">{</span><span class=\"n\">t_key</span><span class=\"o\">:</span> <span class=\"n\">datatype</span><span class=\"o\">},</span>\n                  <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">variable_list</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">dt_map</span> <span class=\"n\">t_key</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n <span class=\"bp\">|</span> <span class=\"n\">dtype</span> <span class=\"n\">key</span> <span class=\"o\">((</span><span class=\"n\">key&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">dtype&#39;</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"n\">key&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">dtype</span><span class=\"bp\">=</span><span class=\"n\">dtype&#39;</span>\n    <span class=\"k\">then</span> <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">hyp</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n    <span class=\"k\">else</span> <span class=\"bp\">@</span><span class=\"n\">get_variable</span> <span class=\"n\">dtype</span> <span class=\"n\">key</span> <span class=\"n\">t</span>\n</code></pre></div>\n\n\n<p>Note: there was a bug in the first equation, since <code>nil</code> was being interpreted as a variable name rather than the constructor for the empty list.</p>",
        "id": 203582951,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594447764
    },
    {
        "content": "<p>I don't know how idiomatic it is, but you can replace the <code>begin ... end</code> block in that with <code>eq.rec (some val) hyp.2.symm</code>.</p>",
        "id": 203583366,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594448656
    },
    {
        "content": "<p>thank you, makes sense!  (and thanks for finding that bug)</p>",
        "id": 203583527,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594449113
    },
    {
        "content": "<p>this is what we call dependent equality hell</p>",
        "id": 203583699,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594449467
    },
    {
        "content": "<p>I would suggest encapsulating the cast into a function like so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">as_type</span> <span class=\"o\">{</span><span class=\"n\">dt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">dt_map</span> <span class=\"n\">dt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dt&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">dt_map</span> <span class=\"n\">dt&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dt</span> <span class=\"bp\">=</span> <span class=\"n\">dt&#39;</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"n\">def</span> <span class=\"n\">get_variable</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">t_key</span><span class=\"o\">:</span> <span class=\"n\">datatype</span><span class=\"o\">},</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">variable_list</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">dt_map</span> <span class=\"n\">t_key</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"n\">dtype</span> <span class=\"n\">key</span> <span class=\"o\">((</span><span class=\"n\">key&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">dtype&#39;</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"bp\">=</span> <span class=\"n\">key&#39;</span> <span class=\"k\">then</span> <span class=\"n\">as_type</span> <span class=\"n\">val</span> <span class=\"bp\">_</span> <span class=\"k\">else</span> <span class=\"bp\">@</span><span class=\"n\">get_variable</span> <span class=\"n\">dtype</span> <span class=\"n\">key</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 203586406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594454637
    },
    {
        "content": "<p>Alternatively, using <code>alist</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">alist</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">datatype</span>\n <span class=\"bp\">|</span> <span class=\"n\">is_nat</span> <span class=\"o\">:</span> <span class=\"n\">datatype</span>\n <span class=\"bp\">|</span> <span class=\"n\">is_bool</span> <span class=\"o\">:</span> <span class=\"n\">datatype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">datatype</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dt_map</span> <span class=\"o\">:</span> <span class=\"n\">datatype</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">is_nat</span>  <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n <span class=\"bp\">|</span> <span class=\"n\">is_bool</span> <span class=\"o\">:=</span> <span class=\"n\">bool</span>\n\n<span class=\"n\">def</span> <span class=\"n\">variable_list</span> <span class=\"o\">:=</span> <span class=\"n\">alist</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"err\">Σ</span> <span class=\"n\">dt</span><span class=\"o\">:</span> <span class=\"n\">datatype</span><span class=\"o\">,</span> <span class=\"n\">dt_map</span> <span class=\"n\">dt</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">examplelist</span> <span class=\"o\">:</span> <span class=\"n\">variable_list</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">to_alist</span> <span class=\"o\">[</span>\n  <span class=\"bp\">⟨</span><span class=\"s2\">&quot;b&quot;</span><span class=\"o\">,</span> <span class=\"n\">is_bool</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span><span class=\"s2\">&quot;i&quot;</span><span class=\"o\">,</span> <span class=\"n\">is_nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span><span class=\"s2\">&quot;j&quot;</span><span class=\"o\">,</span> <span class=\"n\">is_nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">as_type</span> <span class=\"o\">{</span><span class=\"n\">dt</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">dt_map</span> <span class=\"n\">dt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dt&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">dt_map</span> <span class=\"n\">dt&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dt</span> <span class=\"bp\">=</span> <span class=\"n\">dt&#39;</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"n\">def</span> <span class=\"n\">get_variable</span> <span class=\"o\">{</span><span class=\"n\">t_key</span><span class=\"o\">:</span> <span class=\"n\">datatype</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">variable_list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">dt_map</span> <span class=\"n\">t_key</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"bp\">⟨</span><span class=\"n\">dt</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"bp\">⟩</span> <span class=\"err\">←</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">lookup</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">as_type</span> <span class=\"n\">val</span> <span class=\"n\">t_key</span>\n</code></pre></div>",
        "id": 203586543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594454916
    },
    {
        "content": "<p>Note that Mario's first snippet changes the meaning of the function in the case that the environment contains multiple variables with the same name but different types.</p>",
        "id": 203591274,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594464520
    },
    {
        "content": "<p>If you're modeling an untyped language (e.g. Python) then I suspect you would be happier with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk_nat</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">value</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk_bool</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">value</span>\n</code></pre></div>\n\n\n<p>and have an environment mapping variables names to <code>value</code>s.</p>",
        "id": 203591345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594464638
    },
    {
        "content": "<p>If you're really modeling a language where name lookup is type-dependent then how about using a separate environment for each type?</p>",
        "id": 203591412,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594464755
    },
    {
        "content": "<p>Thanks! I didn't know about <code>alist</code> and it seems perfect for this application. </p>\n<p>I'm modeling a strongly/statically typed language (Golang) and basing my initial efforts on this repo (<a href=\"https://github.com/coq-community/hoare-tut/\">https://github.com/coq-community/hoare-tut/</a> -  haven't found any comparable resource  in Lean)  which requires  the language model to implement the following </p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">Parameter</span> <span class=\"n\">Var</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span>\n  <span class=\"n\">Parameter</span> <span class=\"n\">Expr</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span>\n  <span class=\"n\">Parameter</span> <span class=\"n\">Env</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span>\n  <span class=\"n\">Parameter</span> <span class=\"n\">upd</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span><span class=\"bp\">.</span>\n  <span class=\"n\">Parameter</span> <span class=\"kn\">eval</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Env</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span><span class=\"bp\">.</span>\n</code></pre></div>\n\n\n<p>And I'm modifying  <code>eval</code> to return <code>option A</code> to allow modeling a compiler error for undefined variable reference. I suspect Mario's snippet has the right behavior for <code>Env</code>  in this case (if a program requests a variable by name but is expecting a different type, this should be an error).</p>",
        "id": 203611901,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594498975
    }
]