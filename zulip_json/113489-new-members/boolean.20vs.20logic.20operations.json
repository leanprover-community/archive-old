[
    {
        "content": "<p>Lean 3 has \"∨\" for props and \"||\" for bools (also \"/\\\" vs \"&amp;&amp;\", \"tt\" vs \"true\" and \"ff\" vs \"false\"). What is <code>¬</code> for bools? Apparently I can mix these operators/consts as I like and lean casts them, but the cast operator scares me when I see it in the goal view. What do you recommend here? It seems like I cannot use <code>true</code>  in pattern matching, which supports my idea for not mixing props and bools.</p>",
        "id": 217934821,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606335842
    },
    {
        "content": "<p><code>!</code></p>",
        "id": 217934927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606335885
    },
    {
        "content": "<p>I would indeed advice to avoid the casting as much as possible</p>",
        "id": 217934971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606335917
    },
    {
        "content": "<p>Lean says \"invalid expression\" when I use \"!\"</p>",
        "id": 217934977,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606335923
    },
    {
        "content": "<p>Hmm, I admit that I never use it.</p>",
        "id": 217934995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606335936
    },
    {
        "content": "<p><code>bnot</code> is the name of the function.</p>",
        "id": 217935008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606335943
    },
    {
        "content": "<p>The notation needs an import, off the top of my head I don't know what.</p>",
        "id": 217935100,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606335974
    },
    {
        "content": "<p>mathlib <code>data.bool</code> suffices.</p>",
        "id": 217935137,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606335988
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.bool</span> <span class=\"c1\">-- apparently</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">!</span><span class=\"n\">b</span>\n</code></pre></div>",
        "id": 217935147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606335994
    },
    {
        "content": "<p>thanks, import data.bool does it!</p>",
        "id": 217935196,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606336027
    },
    {
        "content": "<p>it is rather counterintuitive that &amp;&amp; and || are in global scope, but ! is not</p>",
        "id": 217935270,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606336075
    },
    {
        "content": "<p>Once upon a time <code>!</code> was built in syntax for something different. It probably never made its way to core Lean after that syntax was removed.</p>",
        "id": 217935655,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606336294
    },
    {
        "content": "<p>What is <code>-&gt;</code> for bools? I couldn't find it last time I looked</p>",
        "id": 217936980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606337034
    },
    {
        "content": "<p><code>!a || b</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 217938009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606337645
    }
]