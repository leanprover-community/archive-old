[
    {
        "content": "<p>If I have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"n\">range</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"n\">range</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n</pre></div>\n\n\n<p>So lean clearly knows that this fact is true. How can I get lean to give me a proof of (something of the type) <code>{0,1,2}  ⊆ range 4</code> that I can then feed into some other function that takes that as a hypothesis? [Was this what <code>esimp</code> did in lean 2?]</p>",
        "id": 134343915,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1537485008
    },
    {
        "content": "<p>My guess is that dec_trivial will work</p>",
        "id": 134344507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485726
    },
    {
        "content": "<p>you can't push a random Prop into bool, it has to be decidable. And if it's decidable then <code>dec_trivial</code> should decide it</p>",
        "id": 134344516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485752
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">XYZ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"n\">range</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 134344547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485819
    },
    {
        "content": "<p>1 year ago I would have just assumed it was magic</p>",
        "id": 134344589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485843
    },
    {
        "content": "<p>My eyes have been opened this year to how mathematics actually works</p>",
        "id": 134344595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485856
    },
    {
        "content": "<p>Great, that does make a lot of sense in hindsight. I've been using <code>dec_trivial</code> as a hammer for nat things without really thinking about what it does.</p>",
        "id": 134344599,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1537485862
    },
    {
        "content": "<p>I also found a good explanation of why the reals don't have decidable equality</p>",
        "id": 134344634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485925
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/a/44933/1384\" target=\"_blank\" title=\"https://mathoverflow.net/a/44933/1384\">https://mathoverflow.net/a/44933/1384</a></p>",
        "id": 134344685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485971
    },
    {
        "content": "<p>Those two real numbers have been verified to be equal to 20000 decimal places, but because there is no algorithm for checking equality of real numbers, you can't use <code>dec_trivial</code> to prove it</p>",
        "id": 134344694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537486005
    },
    {
        "content": "<p>Of course, from the way the claim is worded it's clear that everyone thinks it's true, like the RH is true. Physicists are happy with \"equal to 100 decimals =&gt; equal\"</p>",
        "id": 134344904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537486222
    },
    {
        "content": "<p>Are they computable reals though? Is the limit of a real Cauchy sequence computable?</p>",
        "id": 134386256,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537544957
    },
    {
        "content": "<p>not every.</p>",
        "id": 134386498,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537545212
    },
    {
        "content": "<p>Yes, both those expressions are computable. Basically anything you can write down with a formula composing the usual constructions on reals is computable. The main exception is if you are writing something self referential or making explicit references to turing machines or other turing complete notions, and most math doesn't touch this.</p>",
        "id": 134388931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537547812
    },
    {
        "content": "<p>But comparing computable numbers is also undecidable</p>",
        "id": 134388942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537547828
    }
]