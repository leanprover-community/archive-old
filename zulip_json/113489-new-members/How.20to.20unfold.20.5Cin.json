[
    {
        "content": "<p>I'm trying to prove this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mem_filter</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">pred</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">∧</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I don't know which tactic to use to break open the ∈ propositions.</p>",
        "id": 200889844,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592228390
    },
    {
        "content": "<p><code>dsimp [(∈)]</code></p>",
        "id": 200889984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592228473
    },
    {
        "content": "<p>but almost certainly this isn't actually what you want to do</p>",
        "id": 200890002,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592228482
    },
    {
        "content": "<p>Thanks for both answers</p>",
        "id": 200890241,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592228619
    },
    {
        "content": "<p>the theorem is called <code>list.mem_filter</code> and it is a <code>simp</code> lemma. I found it like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mem_filter</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">pred</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">∧</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">squeeze_simp</span> <span class=\"n\">at</span> <span class=\"n\">hmem</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200893621,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592230120
    },
    {
        "content": "<p><code>set.mem_set_of_eq</code> can also be useful</p>",
        "id": 200931215,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592247758
    },
    {
        "content": "<p>Thanks. The output I get from this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">squeeze</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mem_filter</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">pred</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">∧</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">squeeze_simp</span> <span class=\"n\">at</span> <span class=\"n\">hmem</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>is \"simplify tactic failed to simplify\". Do I need something else?</p>",
        "id": 200932269,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592248370
    },
    {
        "content": "<p>sorry for not including my imports. You'll need whatever file <code>list.mem_filter</code> is defined in, since it's only added to <code>simp</code> once it's defined</p>",
        "id": 200932476,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592248459
    },
    {
        "content": "<p>which should be data.list.basic</p>",
        "id": 200932507,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592248478
    },
    {
        "content": "<p>so this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mem_filter</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">pred</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">∧</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">squeeze_simp</span> <span class=\"n\">at</span> <span class=\"n\">hmem</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200932603,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592248540
    },
    {
        "content": "<p>and so does this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mem_filter</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">pred</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">∧</span> <span class=\"n\">pred</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">squeeze_simp</span> <span class=\"n\">at</span> <span class=\"n\">hmem</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200932675,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592248574
    },
    {
        "content": "<p>I personally always work with <code>import tactic</code>, rather than importing only the tactics I need; I think there's no downside to this unless you're working on contributions to mathlib, where you have to be more aware of the dependency graph</p>",
        "id": 200932733,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592248624
    },
    {
        "content": "<p>ok. thanks again! is there somewhere i can read about this?</p>",
        "id": 200932781,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592248661
    },
    {
        "content": "<p>read about what?</p>",
        "id": 200932925,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592248748
    },
    {
        "content": "<p>the docs page for data.list.basic? <a href=\"https://leanprover-community.github.io/mathlib_docs/data/list/basic.html\">https://leanprover-community.github.io/mathlib_docs/data/list/basic.html</a></p>",
        "id": 200932949,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592248767
    },
    {
        "content": "<p>i meant, what should I have read, to know that <code>import tactic</code> exists!</p>",
        "id": 200933159,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592248905
    },
    {
        "content": "<p>the language reference doesn't mention <code>import</code></p>",
        "id": 200933188,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592248920
    },
    {
        "content": "<p>—that I could see, I didn't read the whole thing</p>",
        "id": 200933236,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592248930
    },
    {
        "content": "<p>This is one of the things you pick up on the chat :-)</p>",
        "id": 200933849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592249274
    },
    {
        "content": "<p>did you do any tutorials? there should be lots of files in the tutorials that start with <code>import tactic</code>?</p>",
        "id": 200934688,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592249693
    },
    {
        "content": "<p>Whether or not <code>import tactic</code> is useful to you is very much subject-dependent. There are people here who are writing little implementations of theories who don't need any tactics at all other than those in core; there are people who actively don't want to import mathlib; there are undergraduate mathematicians who are just completely lost without <code>ring</code> and <code>linarith</code> and are encouraged by me to switch on classical logic and import all tactics on line 1.</p>",
        "id": 200934966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592249843
    },
    {
        "content": "<p>So far I've just read _Theorem Proving In Lean_, worked its examples, and done the Natural Numbers Game, dipped into the reference manual, and noodled around in lean/library/init a bit</p>",
        "id": 200951245,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592258297
    },
    {
        "content": "<p>Well the next step is to think of some formalisation project and to get going :-) I did 50 1st year maths undergraduate level questions next (which happened to be the 50 questions I was setting my own undergraduates), got stuck 40 times and asked here ;-)</p>",
        "id": 200951345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592258385
    },
    {
        "content": "<p>if you want more reading, Mathematics in lean <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> probably has things interesting to you</p>",
        "id": 200951410,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592258404
    },
    {
        "content": "<p>reading the archives on zulip is also pretty effective, you can pick up \"folklore<br>\n knowledge\" that hasn't made its way into polished tutorials</p>",
        "id": 200951454,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592258452
    },
    {
        "content": "<p>Given that Patrick, Jeremy and I are all rapidly approaching the end of term/semester, hopefully MIL will have even more interesting things soon.</p>",
        "id": 200951470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592258462
    },
    {
        "content": "<p>yeah, MIL is next for me, but <code>leanprover get tutorials</code> also beckons</p>",
        "id": 200951937,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592258838
    },
    {
        "content": "<p>you probably mean <code>leanproject get tutorials</code></p>",
        "id": 200952309,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592259110
    },
    {
        "content": "<p>yes</p>",
        "id": 201026426,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592319003
    }
]