[
    {
        "content": "<p>How do I read:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">lean</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">eqn_compiler.elim_match</span><span class=\"o\">]</span> <span class=\"n\">depth</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">match</span> <span class=\"n\">_match</span> <span class=\"o\">:</span> <span class=\"n\">board</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ι</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">_a</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.start_board</span>\n  <span class=\"o\">(</span><span class=\"bp\">⁇</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⁇</span>\n  <span class=\"o\">(</span><span class=\"n\">_x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.boards</span> <span class=\"o\">(</span><span class=\"bp\">⁇</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_a</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">eqn_compiler.elim_match</span><span class=\"o\">]</span> <span class=\"n\">compilation</span> <span class=\"n\">failed</span> <span class=\"n\">at</span>\n<span class=\"k\">match</span> <span class=\"n\">_match</span> <span class=\"o\">:</span> <span class=\"n\">board</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ι</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">_a</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.start_board</span>\n  <span class=\"o\">(</span><span class=\"bp\">⁇</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⁇</span>\n  <span class=\"o\">(</span><span class=\"n\">_x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.boards</span> <span class=\"o\">(</span><span class=\"bp\">⁇</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_a</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>which is coming out of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">end_board</span> <span class=\"o\">:</span> <span class=\"n\">board</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ι</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">s.start_board</span><span class=\"o\">,</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.boards</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">o</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>for <code>o</code> a natural number. I'm sure I'm doing multiple things wrong there but yeah can't interpret that error message. <code>_a</code> is some element of the type it's trying to ensure I've covered in the match expression?</p>",
        "id": 212226223,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601822850
    },
    {
        "content": "<p>(One of the basic things I'm doing wrong I'm sure is I can't figure out how to get <code>n - 1</code> as an element of <code>fin n</code>, so if that's related yeah let me know.)</p>",
        "id": 212226274,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601822903
    },
    {
        "content": "<p>I think you will want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.last\">docs#fin.last</a></p>",
        "id": 212226344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601823027
    },
    {
        "content": "<p>ugh I looked all over <a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/data/fin/basic.html#fin\">https://leanprover-community.github.io/mathlib_docs/core/init/data/fin/basic.html#fin</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/data/fin/ops.html\">https://leanprover-community.github.io/mathlib_docs/core/init/data/fin/ops.html</a> and was wondering why there was so little there :/ -- thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 212226365,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601823076
    },
    {
        "content": "<p>Hrm that gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">lean</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"n\">o</span>\n</code></pre></div>\n\n<p>though -- there's something that shows those are equivalent I assume?</p>",
        "id": 212226430,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601823223
    },
    {
        "content": "<p>OK <code>fin.cast</code> maybe...</p>",
        "id": 212226492,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601823315
    },
    {
        "content": "<p>I don't understand what <code>o</code> is but you should use the <code>n</code> you get out in the <code>n+1</code> case, never <code>o-1</code>.</p>",
        "id": 212226562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601823440
    },
    {
        "content": "<p><code>o</code> is <code>variables (o : ℕ)</code> and I want the largest element of <code>fin o</code> (as an element of <code>fin o</code>)</p>",
        "id": 212226618,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601823517
    },
    {
        "content": "<p>In your <code>_</code> case, you throw away the information you need to do this</p>",
        "id": 212226700,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601823610
    },
    {
        "content": "<p>So use <code>(o' + 1)</code> or something instead</p>",
        "id": 212226706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601823623
    },
    {
        "content": "<p>Sorry, I thought I understood what you were saying, but still getting errors from things not having the right type.</p>\n<p>I changed it to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">end_board</span> <span class=\"o\">:</span> <span class=\"n\">board</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">ι</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">s.start_board</span>\n<span class=\"bp\">|</span> <span class=\"n\">o'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">s.boards</span> <span class=\"n\">o'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>but I still get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">lean</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">s.boards</span> <span class=\"n\">o'</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">o'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"n\">o</span>\n</code></pre></div>\n\n<p>and neither adding <code>: fin o</code> to the left or right side of <code>o'</code> seems to satisfy the type checker</p>",
        "id": 212227156,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601824390
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">foo</span> <span class=\"bp\">.</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"n\">elements</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"s2\">\"bla\"</span><span class=\"o\">,</span> <span class=\"s2\">\"bla\"</span><span class=\"o\">]}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">last</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">f.default</span>\n<span class=\"bp\">|</span> <span class=\"n\">o'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">f.elements</span> <span class=\"n\">o'</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>\n\n<p>I think that's a self-contained example of my confuzzledness.</p>",
        "id": 212227570,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601825105
    },
    {
        "content": "<p>(no, sorry, that's giving me a different error about actually declaring <code>f</code>... never mind I guess, will keep trying to figure it out.).</p>",
        "id": 212227693,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601825316
    },
    {
        "content": "<p>You should still use <code>fin.last</code> as well.</p>",
        "id": 212227697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601825330
    },
    {
        "content": "<p>I'm still not understanding how you're telling me I should use them together, apologies. I updated the self-contained example, which now does produce a similar error for me -- namely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">lean</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">o'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"n\">o</span>\n</code></pre></div>\n\n<p>Am I now basically supposed to tell Lean <code>fin o' + 1</code> and <code>fin o</code> are equivalent or have I completely misunderstood the suggestions?</p>",
        "id": 212240010,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601843154
    },
    {
        "content": "<p>I guess I figured out how to cheat... I used <code>fin (o + 1)</code> everywhere instead of <code>fin o</code>, and now I don't need <code>fin.last</code>, I can just index with <code>o</code>.</p>",
        "id": 212246899,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601854525
    },
    {
        "content": "<p>You should probably use <code>fin.last</code> anyway. <code>(\\u o).val</code> is not defeq to <code>o</code>, but <code>(fin.last o).val = o</code> is</p>",
        "id": 212247430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601855464
    },
    {
        "content": "<p>I can't figure out how to use <code>fin.last</code> for this -- I get the error above. Is there something clearly wrong I'm doing there?</p>",
        "id": 212247799,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601856081
    },
    {
        "content": "<p>Ah, yes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">last</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.default</span>\n<span class=\"bp\">|</span> <span class=\"n\">o'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.elements</span> <span class=\"o\">(</span><span class=\"n\">fin.last</span> <span class=\"n\">o'</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p><code>f</code> depends on <code>o</code>, so you have to match on them together</p>",
        "id": 212248193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601856753
    },
    {
        "content": "<p><em>aha</em> Thanks! My lack of functional programming knowledge bites me again I'm sure :/ -- very much appreciated.</p>",
        "id": 212248355,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601857040
    },
    {
        "content": "<p>heh, haskell wouldn't save you here, you really need dependent functional programming experience and that's hard to come by unless you're into agda or idris (or lean)</p>",
        "id": 212248549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601857372
    },
    {
        "content": "<p>Ah, hm -- well, either way when Lean errors at me I'm having a heck of a time deciphering what it means to tell me, so hopefully I can get some sort of intuition soon. This is like the 4th or 5th thing already that even when I see the solution I wouldn't have guessed was anything to do with the error message if you gave me all week.</p>",
        "id": 212248663,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601857632
    }
]