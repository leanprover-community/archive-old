[
    {
        "content": "<p>Hey, so I have this proof with a tactic that works for the number 5, and in theory it should work for 1000 which I need it to go up to. However, when I set the constant to above 30 or so, it pegs my CPU at 100% for a while and never terminates. Intuitively, I would only expect it to be using a small, linear amount of resources. But I am probably not understanding something about how it works. Is there some way I can profile this, figure out why it's slow, or is it fundamentally not going to work for some architectural reason?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">list.range</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">problem_predicate</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">5</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">},</span>\n\n  <span class=\"n\">unfold</span> <span class=\"n\">list.mem</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p><code>problem_predicate</code> is just some short expression that <code>norm_num</code> can resolve for any one number.</p>",
        "id": 211868877,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601527395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> it's this thread</p>",
        "id": 211874990,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535674
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum_of_squares</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">L.foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">problem_predicate</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"mi\">11</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">11</span> <span class=\"bp\">=</span> <span class=\"n\">sum_of_squares</span> <span class=\"o\">(</span><span class=\"n\">nat.digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 211875067,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535727
    },
    {
        "content": "<p>i want to prove <code>\\not problem_predicate n</code> for n in, say, 0...500</p>",
        "id": 211875089,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535749
    },
    {
        "content": "<p>for a single case, <code>norm_num</code> works fine</p>",
        "id": 211875100,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535759
    },
    {
        "content": "<p>I think it might be better to prove this, instead of computing it.</p>",
        "id": 211875126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601535782
    },
    {
        "content": "<p>there's no \"nice\" reason this is true, unfortunately</p>",
        "id": 211875146,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535796
    },
    {
        "content": "<p>Although it is of course nice if Lean could just bash through the 1000 cases.</p>",
        "id": 211875148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601535798
    },
    {
        "content": "<p>Oooh, ok</p>",
        "id": 211875155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601535805
    },
    {
        "content": "<p>I can cut it down and only pay attention to the multiples of 11, and make it only like 90 cases</p>",
        "id": 211875170,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535829
    },
    {
        "content": "<p>That sounds like a good improvement, right?</p>",
        "id": 211875197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601535844
    },
    {
        "content": "<p>yeah, but I still can't expand a fin_cases by 90x</p>",
        "id": 211875230,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535854
    },
    {
        "content": "<p>or even compile a 90-line file where each line is calling a norm_num</p>",
        "id": 211875237,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535864
    },
    {
        "content": "<p>Can you determine which part is slow?</p>",
        "id": 211875262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601535896
    },
    {
        "content": "<p>Is it the division, or computing the digits? Or the sum of squares?</p>",
        "id": 211875291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601535929
    },
    {
        "content": "<p>I don't know - is there a profiler?</p>",
        "id": 211875298,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535946
    },
    {
        "content": "<p>If computing the digits is slow, then you might just generate the lists.</p>",
        "id": 211875301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601535950
    },
    {
        "content": "<p>intuitively, I don't really understand why any of it would be slow</p>",
        "id": 211875308,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601535956
    },
    {
        "content": "<p>Yes... <code>set_option profiler true</code></p>",
        "id": 211875310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601535959
    },
    {
        "content": "<p>But it won't look inside <code>norm_num</code>. So you will have to cut it into steps yourself</p>",
        "id": 211875363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601535990
    },
    {
        "content": "<p>There is also <code>try_for</code> which might be helpful to impose some bounds on the running time of some tactics</p>",
        "id": 211875383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601536025
    },
    {
        "content": "<p>i see - well it's almost certainly inside norm_num, because i can write the whole loop as one <code>refine</code> plus one <code>norm_num</code></p>",
        "id": 211875392,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601536040
    },
    {
        "content": "<p>all right, well at least you weren't like ho ho you haven't heard of the *&amp;{/run fast/}&amp; operator? just enable that and it'll all work in one line</p>",
        "id": 211875471,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601536114
    },
    {
        "content": "<p>i am moderately reassured that the amount this is bugging me may be proportional to the fundamental difficulty</p>",
        "id": 211875487,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601536139
    },
    {
        "content": "<p>i'll try seeing if i can cut norm num into different steps here</p>",
        "id": 211875507,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601536166
    },
    {
        "content": "<p>Yup, it would be good to know which part of the computation is taking a lot of time</p>",
        "id": 211876116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601536716
    },
    {
        "content": "<p>Like, does can it do <code>nat.digits 10 345 = [3, 4, 5]</code> fast? Can it do 90 of such computations in 1 second?</p>",
        "id": 211876144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601536759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> Lean was not designed to compute, people have been concentrating on getting it to prove mathematical theorems whose proofs are pure thought arguments rather than brute force computations. Remember the definition of nat is via peano and this is an extremely inefficient way of working with naturals from a computational purpose -- but it's the best way for theorem proving</p>",
        "id": 211878201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601538591
    },
    {
        "content": "<p>It's not quite that bad!</p>",
        "id": 211878566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601538859
    },
    {
        "content": "<p>I don't think <code>norm_num</code> is the issue here to be honest. (nb: my mathlib is a few weeks old, so the example below probably doesn't check for you).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.digits</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum_of_squares</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">L.foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">problem_predicate</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span> <span class=\"k\">in</span>\n<span class=\"n\">x.length</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"mi\">11</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">sum_of_squares</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">11</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">problem_predicate</span> <span class=\"mi\">345</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">problem_predicate</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span> <span class=\"c1\">-- 240ms on my not very fast laptop</span>\n</code></pre></div>",
        "id": 211878823,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1601539087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> But <code>0.24s * 1000</code> is quite a bit</p>",
        "id": 211879005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601539247
    },
    {
        "content": "<p>And even <code>90 * 0.24</code> will time out</p>",
        "id": 211879033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601539267
    },
    {
        "content": "<p>Maybe it's worth it to break it down to separate lemmas for <code>0 &lt;= n &lt; 10</code>, <code>10 &lt;= n &lt; 20</code>, ... and then prove it that way. Something like this might help?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 211879491,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1601539558
    },
    {
        "content": "<p>Yes Scott's right, Lean is capable of doing computations -- but don't expect miracles.</p>",
        "id": 211879899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601539855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> I think KevinL said that even that didn't help</p>",
        "id": 211881185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601540802
    },
    {
        "content": "<p>yeah, the problem is just the large number of norm_nums. If I write a python program that completely unrolls the loop into 1000 different lemmas, lean has trouble compiling the resulting file. so just solving the case-expansion part isn't sufficient</p>",
        "id": 211881553,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601541044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> well, you know, i dont write IMO problems so don't blame me if some of them require brute force :P</p>",
        "id": 211881620,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601541085
    },
    {
        "content": "<p>i bet this is the sort of thing that will allegedly be better in lean 4</p>",
        "id": 211881797,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601541198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> but the competitors weren't supposed to brute force through 90 cases, right?</p>",
        "id": 211882049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601541362
    },
    {
        "content": "<p>So there must be more that you can prove here</p>",
        "id": 211882100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601541376
    },
    {
        "content": "<p>the solutions on art of problem solving suggest brute forcing it</p>",
        "id": 211882112,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601541388
    },
    {
        "content": "<p>you have what, an hour per problem? that's a whole minute to brute force, what's the sum of the squares of the digits of the number 550</p>",
        "id": 211882197,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601541450
    },
    {
        "content": "<p>plenty of time</p>",
        "id": 211882203,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601541452
    },
    {
        "content": "<p>That must be extremely boring to grade...</p>",
        "id": 211882280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601541485
    },
    {
        "content": "<p>well it was an early imo problem, there were only 39 contestants at the time</p>",
        "id": 211882355,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601541542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> maybe I missed something, but I think this is a proof. only need to assemble some pieces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">problem_predicate₁</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1210</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">121</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">problem_predicate₁</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">problem_predicate₁</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ne_of_lt</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">487</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">1210</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">121</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">add_le_add</span><span class=\"o\">,</span> <span class=\"n\">mul_le_mul</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">nat.zero_le</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat.mul_le_mul</span> <span class=\"n\">_</span> <span class=\"n\">ha1</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">problem_predicate₂</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">100</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"mi\">11</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">problem_predicate₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">problem_predicate₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">nat.lt_succ_iff</span> <span class=\"n\">at</span> <span class=\"n\">hab</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">nat.lt_succ_iff</span> <span class=\"n\">at</span> <span class=\"n\">hab</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_le</span> <span class=\"n\">ha2</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_le</span> <span class=\"n\">hb2</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">clear</span> <span class=\"n\">ha2</span> <span class=\"n\">hb2</span><span class=\"o\">,</span>\n  <span class=\"n\">zify</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int.coe_nat_sub</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_bit0</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_bit1</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_one</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">100</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ne_of_lt</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">57</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">100</span> <span class=\"bp\">+</span> <span class=\"mi\">100</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">57</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1452</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1210</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">121</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1452</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ring_exp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">aux</span><span class=\"o\">,</span> <span class=\"n\">add_le_add</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">mul_le_mul</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_nonneg</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">assumption_mod_cast</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_le_add</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">assumption_mod_cast</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ring_exp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211889289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601546611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> funnily enough I have written Olympiad problems (including IMO) and we really try to avoid giving students boring case bashes --certainly 100 cases is way too many.</p>",
        "id": 211894189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601550152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  yeah, I saw your name on there when I was looking through the IMO problems ;-) some of the older problems seem like they'd never make it by today's standards.</p>",
        "id": 211924959,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601564986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> what are <code>a</code> and <code>b</code> there - two of the three digits of the number?</p>",
        "id": 211926381,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601565461
    },
    {
        "content": "<p>yup the first and last</p>",
        "id": 211926410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601565474
    },
    {
        "content": "<p>hmm, i'm not really following what these predicates are. tools for doing a subsequent search? the answer is supposed to be 550 or 803, so that has to pop out somehow</p>",
        "id": 211928748,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601566365
    },
    {
        "content": "<p>for what it's worth, I got this working, by writing some explicit ways to simplify these expressions and passing them to norm_num so that the norm_num call doesn't take so long, and by splitting the <code>iterate</code> call up into chunks of size &lt;= 40.</p>",
        "id": 211946347,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601573792
    },
    {
        "content": "<p>What's supposed to be 550 or 803?</p>",
        "id": 211946439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601573833
    },
    {
        "content": "<p>the answers to the search over all 3-digit numbers</p>",
        "id": 211946581,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601573886
    },
    {
        "content": "<p>If you have a 3-digit number <code>axb</code> that is divisible by <code>11</code>, then <code>11</code> divides <code>a - x + b</code>. So there are two cases: <code>x = a + b</code> or <code>x + 11 = a + b</code>.</p>",
        "id": 211946636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601573912
    },
    {
        "content": "<p>In both these cases, I prove the claim.</p>",
        "id": 211946662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601573928
    },
    {
        "content": "<p>which claim are you proving here</p>",
        "id": 211946761,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601573985
    },
    {
        "content": "<p>Hmm, there must be a mistake in my formalization of the problem (-;</p>",
        "id": 211946853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601574022
    },
    {
        "content": "<p>it's kind of ridiculous how many theorems humans take for granted about \"three digit numbers\"</p>",
        "id": 211946982,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601574089
    },
    {
        "content": "<p>and, since three digit numbers are not particularly interesting for abstract mathematics, there isn't really a library of a zillion things about them</p>",
        "id": 211947032,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601574114
    },
    {
        "content": "<p>so i'm curious about your code - when you write something like <code>apply_rules [aux, add_le_add, le_refl, mul_le_mul, int.coe_nat_nonneg];</code></p>",
        "id": 211947117,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601574141
    },
    {
        "content": "<p>how do you know how to do that</p>",
        "id": 211947123,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601574144
    },
    {
        "content": "<p>are you already familiar with what <code>aux</code>, <code>add_le_add</code>, <code>le_refl</code>, all those things do, and you are just thinking hmm i'll apply these</p>",
        "id": 211947148,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601574165
    },
    {
        "content": "<p>I think the more interesting question is what the mistake is in my statement (-;</p>",
        "id": 211947154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601574168
    },
    {
        "content": "<p>well, the math problem is not a very interesting problem. the problem with these enormous case-by-case bashes is you forget a minus sign somewhere and then waste half an hour of calculation on nothing</p>",
        "id": 211947370,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601574276
    },
    {
        "content": "<p>Yup... that's (sort of) what happened</p>",
        "id": 211947680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601574434
    },
    {
        "content": "<p>in your code i see a bunch of different tactics i dont recognize. <code>apply_rules</code>, <code>obtain</code>, <code>replace</code>. I don't see these mentioned in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html</a> . Is there something else I can be reading about tactics?</p>",
        "id": 211948007,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601574595
    },
    {
        "content": "<p>the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">mathlib docs</a> are much more up to date than TPIL on mathlib tactics</p>",
        "id": 211948175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601574657
    },
    {
        "content": "<p>so is there a way to simplify an expression that just uses built in operators like <code>((18 + 1) * 11 % 10) ^ 2</code>, without having to call <code>norm_num</code>? I feel like that is sort of what Johan is doing with that <code>apply_rules [long, list, of, random, characters]</code>, but i'm not sure how i could construct by own such thing</p>",
        "id": 211949564,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601575286
    },
    {
        "content": "<p>That's literally what <code>norm_num</code> is designed for</p>",
        "id": 211950188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601575544
    },
    {
        "content": "<p>If it's a one off thing you should absolutely use <code>norm_num</code></p>",
        "id": 211950224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601575560
    },
    {
        "content": "<p>If you are doing it 900 times in a loop then you should preprocess the expression to make it easier to evaluate</p>",
        "id": 211950294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601575580
    },
    {
        "content": "<p>But the <code>apply_rules</code> line in Johan's proof is not something <code>norm_num</code> can do, but rather the monotonicity tactic</p>",
        "id": 211950563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601575704
    },
    {
        "content": "<p>because it has variables in it</p>",
        "id": 211950571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601575714
    },
    {
        "content": "<p>ok, thanks for explaining!</p>",
        "id": 211953200,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601576790
    }
]