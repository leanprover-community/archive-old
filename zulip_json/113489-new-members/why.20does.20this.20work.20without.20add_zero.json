[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"> rw add_zero b, -/</span> <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">rw add_zero (a+b),</span>\n<span class=\"cm\">refl,</span>\n\n<span class=\"cm\">end</span>\n</code></pre></div>\n<p>before the <code>refl</code> line it wants to prove <code>‚ä¢ a + b + 0 = a + (b + 0)</code> which assumes associativity ?</p>",
        "id": 228093941,
        "sender_full_name": "eax",
        "timestamp": 1614473135
    },
    {
        "content": "<p><code>(a + b) + 0 = a + b = a + (b + 0)</code> you don't need associativity.</p>",
        "id": 228095640,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1614475213
    },
    {
        "content": "<p>right, but isn't that what I'm doing with the first <code>add_zero</code> ?  How is lean proving this without it?</p>",
        "id": 228095674,
        "sender_full_name": "eax",
        "timestamp": 1614475300
    },
    {
        "content": "<p><code>n + 0</code> is defeq to <code>n</code>. Where are you using associativity?`</p>",
        "id": 228095732,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1614475357
    },
    {
        "content": "<p>You've defined <code>n + 0 = n</code> when defining addition</p>",
        "id": 228095739,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1614475387
    },
    {
        "content": "<p>You might find this blog post about definitional equality helpful: <a href=\"https://xenaproject.wordpress.com/2019/05/21/equality-part-1-definitional-equality/\">https://xenaproject.wordpress.com/2019/05/21/equality-part-1-definitional-equality/</a></p>",
        "id": 228095753,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614475404
    },
    {
        "content": "<p>I think I'm more confused about what lean is doing than about the proof itself.</p>",
        "id": 228095823,
        "sender_full_name": "eax",
        "timestamp": 1614475504
    },
    {
        "content": "<p>is <code>refl</code> going farther than \"the things on both sides of the <code>=</code> are identical?</p>",
        "id": 228095895,
        "sender_full_name": "eax",
        "timestamp": 1614475580
    },
    {
        "content": "<p>Yes, it's able to unfold definitions to a certain extent. Did you take a look at the blog post I linked yet?</p>",
        "id": 228095918,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614475626
    },
    {
        "content": "<p>I'm in middle of reading it now.</p>",
        "id": 228095930,
        "sender_full_name": "eax",
        "timestamp": 1614475652
    },
    {
        "content": "<p>this blog post makes a lot more sense. (I'm brand new to lean so somewhat clueless about what its all doing)</p>",
        "id": 228096065,
        "sender_full_name": "eax",
        "timestamp": 1614475824
    },
    {
        "content": "<p>it also explains that for e.g., <code>lemma one_mul (m : mynat) : 1 * m = m :=</code> I could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>instead of <code>\nrw mul_zero,\nrefl,</code><br>\nsince the former is true by definition</p>",
        "id": 228096090,
        "sender_full_name": "eax",
        "timestamp": 1614475877
    },
    {
        "content": "<p>Ah, I see what you were asking now. <code>refl</code> can close the goal without <code>rw</code> because it unfolds all of the <code>a + b + 0</code> and <code>a + (b + 0)</code> to <code>a + b</code>. oops.</p>",
        "id": 228096100,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1614475909
    },
    {
        "content": "<p>yeah. I was expecting to need to be a lot more explicit.</p>",
        "id": 228096155,
        "sender_full_name": "eax",
        "timestamp": 1614475935
    },
    {
        "content": "<p>Lean does a lot behind the scenes! Fortunately we usually don't need to worry too much about it. If you're curious, you can use the following options to have Lean log some output while it checks whether things are definitionally equal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.type_context.is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.type_context.is_def_eq_detail</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 228096236,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614476047
    },
    {
        "content": "<p>I'm playing this \"game\" <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game</a> but good to know for when/if I get this installed locally</p>",
        "id": 228096271,
        "sender_full_name": "eax",
        "timestamp": 1614476107
    },
    {
        "content": "<p>the download guide is here: <a href=\"https://leanprover-community.github.io/get_started.html\">https://leanprover-community.github.io/get_started.html</a></p>",
        "id": 228096336,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1614476183
    },
    {
        "content": "<p>You should also get familiar with the sidebar on <a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a>, all of the communities' resources are there</p>",
        "id": 228096364,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1614476254
    },
    {
        "content": "<p>yep! that's how I found this chat</p>",
        "id": 228096369,
        "sender_full_name": "eax",
        "timestamp": 1614476268
    },
    {
        "content": "<p>Oh yeah, I guess that was obvious <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 228096425,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1614476324
    },
    {
        "content": "<p>I don't talk about definitional equality at all in the natural number game because preliminary experiments with students showed that if the system randomly proved goals of the form X+0=X then the students would get confused, so I actually weakened the system somewhat and added <code>add_zero</code> without ever saying what its proof was -- I just claimed that it was an \"axiom\". The truth is that it's true by definition so you can prove it with <code>refl</code>. What I do not explain in NNG is that <code>refl</code> will prove definitional equalities, not just syntactic ones. For me as a mathematician, 0+X=X and X+0=X look pretty symmetric and I thought it was confusing if one proof was <code>zero_add</code> but the other was <code>refl</code>.</p>",
        "id": 228117663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614503439
    },
    {
        "content": "<p>The tradeoff is that the game hides what <code>refl</code> is actually doing. In fact, I was confused about why it was needed at all \"once lean gets to <code>X=X</code> why should i have to add the syntactic noise of <code>refl</code>?\"  that it's actually doing work that the game makes you do explicitly is useful to know<br>\nAs a computer scientist that understands (the basics of) term rewriting, 0+X=X and X+0=X  actually look very different to me and it doesn't shock me you'd have to solve them separately.</p>",
        "id": 228142203,
        "sender_full_name": "eax",
        "timestamp": 1614531634
    },
    {
        "content": "<p>In real Lean <code>rw</code> tries <code>refl</code> when it's done, so if you do the levels in real Lean then some of them finish much earlier than you would expect. If you're a programmer this is good, if you're a mathematician playing NNG this is apparently confusing.</p>",
        "id": 228142262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614531704
    },
    {
        "content": "<p>This is what students were telling me, at least. \"I hadn't finished the proof, how come it says I'm done?\"</p>",
        "id": 228142312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614531727
    },
    {
        "content": "<p>\"well, if you think about it, <code>a * 1 = 0 + a</code> is definitional\" isn't a good answer</p>",
        "id": 228142336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614531763
    },
    {
        "content": "<p>couldn't that be solved by enabling tracing?</p>",
        "id": 228142345,
        "sender_full_name": "eax",
        "timestamp": 1614531774
    },
    {
        "content": "<p>I'm talking about mathematicians here. They don't use braces, thy don't use traces, they don't even look at the error box</p>",
        "id": 228142386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614531808
    },
    {
        "content": "<p>haha fair enough.</p>",
        "id": 228142404,
        "sender_full_name": "eax",
        "timestamp": 1614531830
    },
    {
        "content": "<p>A goal of <code>a * 1 = 0 + a</code> magically disappearing will not be explained by traces, this assertion is as trivial to a mathematician as <code>1 * a = 0 + a</code> and <code>1 * a = a + 0</code> etc</p>",
        "id": 228142478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614531856
    },
    {
        "content": "<p>the fact that one of these is definitional and the others aren't is not actually mathematics, it is an implementation detail.</p>",
        "id": 228142498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614531881
    },
    {
        "content": "<p>there is certainly a tradeoff between making this conceptually simple to either CS and Math people</p>",
        "id": 228142565,
        "sender_full_name": "eax",
        "timestamp": 1614531961
    },
    {
        "content": "<p>I was explicitly targetting math people</p>",
        "id": 228142618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614531975
    },
    {
        "content": "<p>because that's the underlying problem</p>",
        "id": 228142621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614531985
    },
    {
        "content": "<p>They teach this stuff in the CS department at Imperial, but nobody has heard of it in the maths department</p>",
        "id": 228142635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614532001
    },
    {
        "content": "<p>fair enough and understand the goal; my CS undergrad didn't go near this stuff so its been fun to learn/play the game.</p>",
        "id": 228142674,
        "sender_full_name": "eax",
        "timestamp": 1614532069
    }
]