[
    {
        "content": "<p>How come the third of these lemmas requires explicitly pushing the negation? (If the answer is just \"because it does\" that's fine enough)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">all_thingies_then_false</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">eq_bot_iff</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">all_thingies_not</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">eq_bot_iff</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">no_thingies</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">push_neg</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">eq_bot_iff</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>I ask mainly because I originally wrote out the third being sure it'd exist somewhere, but then <code>suggest</code> / <code>library_search</code> didn't find it, till I figured I should just rejigger.</p>",
        "id": 214612837,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736054
    },
    {
        "content": "<p><code>not exists</code> is not <em>definitionally</em> equal to <code>forall not</code>.</p>",
        "id": 214613087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736167
    },
    {
        "content": "<p>and the corresponding lemma just doesn't exist in mathlib?</p>",
        "id": 214613120,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736182
    },
    {
        "content": "<p>(one using not exists)</p>",
        "id": 214613140,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736192
    },
    {
        "content": "<p>Certainly the lemma that not exists is equivalent to forall not will be in mathlib</p>",
        "id": 214613228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736235
    },
    {
        "content": "<p>Yeah sorry I mean the corresponding lemma to <code>eq_bot_iff</code> I guess</p>",
        "id": 214613274,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736263
    },
    {
        "content": "<p>the forall not formulation is preferred</p>",
        "id": 214613279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603736266
    },
    {
        "content": "<p>Probably what I mean to ask is \"is there... yeah what MArio answered :)</p>",
        "id": 214613292,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736275
    },
    {
        "content": "<p>So if I want one or the other I should assume it's defined as a forall</p>",
        "id": 214613343,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736285
    },
    {
        "content": "<p>Cool, thanks!</p>",
        "id": 214613369,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736299
    },
    {
        "content": "<p>yeah, these are so-called \"idioms\" in mathlib</p>",
        "id": 214613380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603736304
    },
    {
        "content": "<p>like \"use x &lt; y over y &gt; x\"</p>",
        "id": 214613394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603736312
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 214613403,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736320
    },
    {
        "content": "<p>it keeps the number of needed lemmas down</p>",
        "id": 214613420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603736331
    },
    {
        "content": "<p>Makes sense.</p>",
        "id": 214613462,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736358
    },
    {
        "content": "<p><code>simp</code> converts not exists into forall not.</p>",
        "id": 214613492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736377
    },
    {
        "content": "<p>which means <code>by simp [eq_bot_iff]</code> should also prove the theorem</p>",
        "id": 214613592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603736410
    },
    {
        "content": "<p><code>simp</code> generally tries to put things into \"mathlib normal form\". A great example is nonempty (rather than empty) -- there seemed to be about three ways to say that a set was non-empty in mathlib, and relatively recently it was decided to make <code>x.nonempty</code> the \"canonical form\" and then all the other occurrences were purged from mathlib lemmas other than the simp lemma which turns other ways of saying it into <code>x.nonempty</code></p>",
        "id": 214613752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736508
    },
    {
        "content": "<p>That's nice, I was pondering that (whether simp encodes the idioms)</p>",
        "id": 214613842,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736539
    },
    {
        "content": "<p>PS <code>by exact</code> cancels :-) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">all_thingies_then_false</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_bot_iff</span>\n</code></pre></div>",
        "id": 214614029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736638
    },
    {
        "content": "<p>Maybe I'll ask then why <code>library_search</code> doesn't call simp first (or at least call it if it fails)</p>",
        "id": 214614031,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736638
    },
    {
        "content": "<p>Tactics have very well-defined domains</p>",
        "id": 214614108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736661
    },
    {
        "content": "<p><code>library_search</code> looks for one lemma in the library which closes the goal immediately. That's its job.</p>",
        "id": 214614153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/push_neg/near/214614029\">said</a>:</p>\n<blockquote>\n<p>PS <code>by exact</code> cancels :-) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">all_thingies_then_false</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_bot_iff</span>\n</code></pre></div>\n\n</blockquote>\n<p>aha thanks! I tried \\&lt;eq_bot_iff\\&gt; and some other random syntax permutations, but not that one, appreciated</p>",
        "id": 214614169,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736688
    },
    {
        "content": "<p>it would be <em>way</em> too expensive to call <code>simp</code> on every lemma in the library</p>",
        "id": 214614200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603736705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/push_neg/near/214614153\">said</a>:</p>\n<blockquote>\n<p><code>library_search</code> looks for one lemma in the library which closes the goal immediately. That's its job.</p>\n</blockquote>\n<p>yeah fair enough then some other higher level tactic right?</p>",
        "id": 214614214,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736714
    },
    {
        "content": "<p>not on every lemma in the library, just on the goal</p>",
        "id": 214614227,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736723
    },
    {
        "content": "<p><code>{simp, library_search}</code> is one tactic</p>",
        "id": 214614240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736731
    },
    {
        "content": "<p>basically it didn't find <code>eq_bot_iff</code> because my thing was not in mathlib-normal form (and yeah I didn't think of running <code>simp</code> myself because I didn't know I wasn't in normal form)</p>",
        "id": 214614286,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736760
    },
    {
        "content": "<p>but I can commit to memory to run <code>{simp, library_search}</code> instead next time I'm \"stuck\" if that's a decent idea?</p>",
        "id": 214614363,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736779
    },
    {
        "content": "<p>non-terminal simps are evil</p>",
        "id": 214614418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736800
    },
    {
        "content": "<p>it's fine for <code>library_search</code> since it's not going into mathlib</p>",
        "id": 214614464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603736823
    },
    {
        "content": "<p>right and then <code>squeeze_simp</code> when it finds it etc., hopefully I'm starting to commit at least some of this mental algorithm :D</p>",
        "id": 214614476,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736827
    },
    {
        "content": "<p>PS <code>finset.eq_empty_iff_forall_not_mem</code> is a thing, which is far closer to what you want</p>",
        "id": 214614532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736858
    },
    {
        "content": "<p>once you know what lemma you want, you can better figure out how to make it applicable, whether <code>simp</code> or <code>rw</code> or <code>apply</code> is appropriate</p>",
        "id": 214614548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603736865
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">no_thingies</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.eq_empty_iff_forall_not_mem</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 214614621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/push_neg/near/214614621\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">no_thingies</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.eq_empty_iff_forall_not_mem</span><span class=\"o\">]</span>\n</code></pre></div>\n\n</blockquote>\n<p>aha, thank you! did you find that from just looking at <code>finset</code>'s file?</p>",
        "id": 214614645,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736907
    },
    {
        "content": "<p>(and/or knowing about it)</p>",
        "id": 214614672,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736917
    },
    {
        "content": "<p>none of those things</p>",
        "id": 214614691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736926
    },
    {
        "content": "<p>I found it by typing <code>eq_empty_iff</code> and pressing ctrl-space</p>",
        "id": 214614725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736947
    },
    {
        "content": "<p>because I was interested in seeing which lemmas started with <code>x = empty iff ...</code></p>",
        "id": 214614761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603736967
    },
    {
        "content": "<p>got it, yeah I don't think I know the naming conventions well enough yet to do that</p>",
        "id": 214614792,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603736988
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a></p>",
        "id": 214614810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603737002
    },
    {
        "content": "<p>thanks obviously each of these tips are super helpful</p>",
        "id": 214614911,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603737042
    },
    {
        "content": "<p>This is a really powerful way to find lemmas. I did it because <code>simp [eq_bot_iff]</code> doesn't work because Lean doesn't realise the definitional equalities (<code>simp</code> and <code>rw</code> work with syntactic equalities) so I wanted to find the same lemma but specifically for finsets.</p>",
        "id": 214615019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603737090
    },
    {
        "content": "<p>If <code>eq_bot_iff</code> is <code>x = \\bot \\iff ...</code> then it's not surprising that <code>eq_empty_iff</code> is what we want.</p>",
        "id": 214615169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603737147
    },
    {
        "content": "<p>well hooray, I successfully managed to find/use <code>option.eq_none_iff_forall_not_mem</code>just now in a similar situation when suggest + library_search were failing me, so some progress on me learning the naming conventions.</p>",
        "id": 214641871,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603751805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/push_neg/near/214614363\">said</a>:</p>\n<blockquote>\n<p>but I can commit to memory to run <code>{simp, library_search}</code> instead next time I'm \"stuck\" if that's a decent idea?</p>\n</blockquote>\n<p>You might try <code>hint</code>.</p>",
        "id": 214653970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1603763782
    },
    {
        "content": "<p>I have vague memories of you telling me that the last time I was stuck (and then following it up by saying <code>hint</code> sometimes says silly things)</p>",
        "id": 214654157,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603764063
    },
    {
        "content": "<p>But thanks probably good reminder, I forgot about <code>hint</code></p>",
        "id": 214654164,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603764074
    }
]