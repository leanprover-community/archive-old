[
    {
        "content": "<p>I want to write a function that given a proof that a property holds somewhere, returns a value where it holds.</p>\n<p>Knowing I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>I thought I'd be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">find</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I get <code>recursor 'Exists.dcases_on' can only eliminate into Prop</code>.</p>\n<p>Is there a way to implement what I want?</p>",
        "id": 265847960,
        "sender_full_name": "Dan Piponi",
        "timestamp": 1640204271
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists.some\">docs#Exists.some</a> what you're looking for?</p>",
        "id": 265848369,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640204516
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> . In general you can't do this computably, in which case <code>Exists.some</code> (=<code>classical.some</code>) is the right move. But in the <code>nat</code> case you can compute a result.</p>",
        "id": 265848634,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1640204663
    },
    {
        "content": "<p>I'm working in a classical context so thanks for the pointers to Exists.some which is what I need.</p>\n<p>What's the mechanism by which the compiler accepts my first example but not the second?</p>",
        "id": 265850762,
        "sender_full_name": "Dan Piponi",
        "timestamp": 1640205949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459093\">@Dan Piponi</span> The difference is the type of your goal. In the first case you're trying to prove a <code>Prop</code>, so Lean knows it doesn't need to care about computational content. In the second case you're constructing data, which it refuses.</p>",
        "id": 265850926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640206027
    },
    {
        "content": "<p>I guess that it would make sense that if you \"switch on\" classical mode, that the <code>match</code> should also work in the second case. But everybody just uses <code>Exists.some</code> instead.</p>",
        "id": 265850978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640206065
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2019/06/11/the-inverse-of-a-bijection/\">https://xenaproject.wordpress.com/2019/06/11/the-inverse-of-a-bijection/</a> is relevant here, maybe</p>",
        "id": 265851483,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1640206391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459093\">Dan Piponi</span> <a href=\"#narrow/stream/113489-new-members/topic/Finding.20where.20property.20holds/near/265850762\">said</a>:</p>\n<blockquote>\n<p>What's the mechanism by which the compiler accepts my first example but not the second?</p>\n</blockquote>\n<p>Related to what Johan said, I think about it in terms of proof irrelevance. Since all proofs of a proposition are considered to be equal, you're not allowed to use any internal details of a proof unless you're doing so in a context where those details don't matter (like when proving another proposition).</p>\n<p>With this example you give, it takes a proof of <code>∃ (n : ℕ), P n</code> and matches it against <code>Exists.intro x y</code>. What would it mean to return <code>x</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">find</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Suppose <code>Exists.intro x y</code> and <code>Exists.intro x' y'</code> were two proofs of  <code>∃ (n : ℕ), P n</code>.  By proof irrelevance, <code>Exists.intro x y = Exists.intro x' y'</code>, and then by applying <code>congr_arg find</code> to this equality, the obvious interpretation would give you <code>x = x'</code>. This can easily be a contradiction if <code>P</code> is true for more than one input.</p>",
        "id": 265854438,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640208187
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> function gets around this by always returning the least natural number that satisfies <code>P</code>, and the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists.some\">docs#Exists.some</a> function gets around this by always returning the fixed value chosen by the choice function <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.choice\">docs#classical.choice</a> (via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some\">docs#classical.some</a>)</p>",
        "id": 265854753,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640208344
    },
    {
        "content": "<p>Up to now I've been ignoring the mentions of sorts and universes in the list of type rules (eg. listed here <a href=\"https://leanprover.github.io/reference/expressions.html\">https://leanprover.github.io/reference/expressions.html</a>) Is it a rule about universes that causes the compiler to reject my code?</p>",
        "id": 265855179,
        "sender_full_name": "Dan Piponi",
        "timestamp": 1640208563
    },
    {
        "content": "<p>So, ignoring everything about computability, there's still the underlying issue of making sure you have something that's well-defined. Proof irrelevance is sort of like a quotient, and you're required to make sure a function from a <code>Prop</code> is well-defined by avoiding certain things (like using <code>match</code> on a proof if the goal is not a <code>Prop</code>).</p>",
        "id": 265855322,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640208635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459093\">@Dan Piponi</span> Yeah, the <code>Prop = Sort 0</code> universe is special. It has proof irrelevance and <code>propext</code>.</p>",
        "id": 265855512,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640208739
    },
    {
        "content": "<p>Thanks Kyle. Though I'm a mathematician by training I'm trying to understand this with my programmer hat on trying to figure out the rules for writing code that doesn't produce type errors.</p>",
        "id": 265856043,
        "sender_full_name": "Dan Piponi",
        "timestamp": 1640209041
    },
    {
        "content": "<p>We can check how <code>Exists</code> works by seeing what Lean generates from its definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exists'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exists'</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">Exists'</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Exists' : Π {α : Sort u}, (α → Prop) → Prop</span>\n<span class=\"cm\">Exists'.cases_on : ∀ {α : Sort u} {p : α → Prop} {motive : Prop}, Exists' p → (∀ (w : α), p w → motive) → motive</span>\n<span class=\"cm\">Exists'.dcases_on : ∀ {α : Sort u} {p : α → Prop} {motive : Exists' p → Prop} (n : Exists' p),</span>\n<span class=\"cm\">  (∀ (w : α) (h : p w), motive (Exists'.intro w h)) → motive n</span>\n<span class=\"cm\">Exists'.drec : ∀ {α : Sort u} {p : α → Prop} {motive : Exists' p → Prop},</span>\n<span class=\"cm\">  (∀ (w : α) (h : p w), motive (Exists'.intro w h)) → ∀ (n : Exists' p), motive n</span>\n<span class=\"cm\">Exists'.drec_on : ∀ {α : Sort u} {p : α → Prop} {motive : Exists' p → Prop} (n : Exists' p),</span>\n<span class=\"cm\">  (∀ (w : α) (h : p w), motive (Exists'.intro w h)) → motive n</span>\n<span class=\"cm\">Exists'.intro : ∀ {α : Sort u} {p : α → Prop} (w : α), p w → Exists' p</span>\n<span class=\"cm\">Exists'.rec : ∀ {α : Sort u} {p : α → Prop} {motive : Prop}, (∀ (w : α), p w → motive) → Exists' p → motive</span>\n<span class=\"cm\">Exists'.rec_on : ∀ {α : Sort u} {p : α → Prop} {motive : Prop}, Exists' p → (∀ (w : α), p w → motive) → motive</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>The key argument that determines what you can do with an inductive type is the \"motive\". For example, here's the one Lean was complaining about in your example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Exists'.dcases_on</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Exists'</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Exists'</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Exists'.intro</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>The <code>∀ (w : α) (h : p w), motive (Exists'.intro w h)</code> argument is what implements the idea of splitting up a proof into <code>w</code> and <code>p w</code>. Since the motive is only <code>Prop</code>-valued, this <code>dcases_on</code> is only allowed to prove some <code>Prop</code> given specific values that are able prove <code>Exists' p</code>.</p>",
        "id": 265856759,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640209445
    },
    {
        "content": "<p>Here's the non-<code>Prop</code> inductive type version of <code>Exists</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">sigma'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sigma'</span>\n</code></pre></div>\n<p>It actually remembers the <code>w</code>, in contrast to <code>Exists</code>.  It's got a <code>cases_on</code> with a motive that can take values in universes beyond <code>Prop</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sigma'.cases_on</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">sigma'</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">sigma'</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">w</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">sigma'.intro</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>This is reflected in the fact that you are allowed to destruct the values and actually make use of them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">find</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265857129,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640209732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459093\">@Dan Piponi</span> I found these types to be rather hard to read early on, and I apologize for not really explaining them, since they are rather complicated dependent types. (I'd found it useful just knowing  that this <code>motive</code> argument was an underlying difference, and that Lean's equation compiler relies on these generated definitions for inductive types when you write <code>match</code> expressions.)</p>",
        "id": 265857273,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640209818
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>! Up until you pointed out the <code>motive</code> thing it was looking to me like there were special rules in the language for differentiating <code>Prop</code> from <code>Type</code> but now I (think I) can see that it's the definition of <code>Exists'</code> that's special.</p>",
        "id": 265867560,
        "sender_full_name": "Dan Piponi",
        "timestamp": 1640216783
    },
    {
        "content": "<p>specifically, it is the type of <code>Exists'.rec</code>, as compared to <code>sigma'.rec</code></p>",
        "id": 265867930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640217152
    },
    {
        "content": "<p>And the reason for this difference <em>is</em> built in to lean, this is called \"small elimination\" of inductive types and it is specific to inductive types in <code>Prop</code></p>",
        "id": 265867985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640217210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Ah. \"Small elimination\" is a useful term I can google . Thanks!</p>",
        "id": 265874881,
        "sender_full_name": "Dan Piponi",
        "timestamp": 1640223503
    }
]