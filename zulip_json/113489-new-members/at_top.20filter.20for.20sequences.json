[
    {
        "content": "<p>Looking for the best/easiest way to get this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">sequences</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">tendsto</span> <span class=\"n\">s</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>In my particular application I can probably get around it, but solving this goal would be much better.</p>",
        "id": 204933388,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595606294
    },
    {
        "content": "<p>You could presumably just prove it by unfolding the definition and then inserting the neighborhood (L,infty) directly into the definition</p>",
        "id": 204940007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595609772
    },
    {
        "content": "<p>But there might be a general lemma about bounded implies not tendsto top</p>",
        "id": 204940106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595609824
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.unbounded_of_tendsto_at_top\">docs#filter.unbounded_of_tendsto_at_top</a> probably helps</p>",
        "id": 204941534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595610612
    },
    {
        "content": "<p>and lemmas around that</p>",
        "id": 204941657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595610687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/at_top.20filter.20for.20sequences/near/204941534\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.unbounded_of_tendsto_at_top\">docs#filter.unbounded_of_tendsto_at_top</a> probably helps</p>\n</blockquote>\n<p>This does, indeed! Somehow I missed it, although I was \"sure\" there needed to be something like that. I could use <code>tendsto_at_top_csupr</code> for the positive result, but this helps a lot. Thank you both! <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 204941989,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595610843
    },
    {
        "content": "<p>Another option (writing without testing):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">s</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">eventually</span> <span class=\"o\">(</span><span class=\"n\">eventually_ge_at_top</span> <span class=\"n\">L</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 204963776,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595623091
    }
]