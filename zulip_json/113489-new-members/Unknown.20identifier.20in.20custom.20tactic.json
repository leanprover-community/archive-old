[
    {
        "content": "<p>Hi, I'm having trouble with using some of my custom-built tactics. Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">my_skip</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">my_skip</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>lean complains that <code>n</code> is an unknown identifier in <code>my_skip n</code>, which seems a bit strange. Does anyone know why this is happening and how it can be fixed? Many thanks!</p>",
        "id": 260653453,
        "sender_full_name": "Matei Mandache",
        "timestamp": 1636376586
    },
    {
        "content": "<p>It needs to be in the right namespace. \"meta def tactic.interactive.my_skip\"</p>",
        "id": 260653707,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1636376725
    },
    {
        "content": "<p>I think <code>my_skip</code> needs to be in the <code>tactic.interactive</code> namespace</p>",
        "id": 260653712,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636376726
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.my_skip</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">my_skip</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's still coming up with the error</p>",
        "id": 260654995,
        "sender_full_name": "Matei Mandache",
        "timestamp": 1636377427
    },
    {
        "content": "<p>I don't think <code>tactic.interactive</code> was the issue. Because the initial error didn't complain that <code>my_skip</code> was unknown.</p>",
        "id": 260655666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636377801
    },
    {
        "content": "<p>But I might just be waffling. I don't really know the inner workings of the tactic framework</p>",
        "id": 260655773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636377850
    },
    {
        "content": "<p>An interactive tactic doesn't look like that, I don't think; it has to have some parser etc.</p>",
        "id": 260656688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636378377
    },
    {
        "content": "<p>My memory is that after <code>:=</code> you need something like <code> `[skip]</code> or something, but this is all explained in the tactic writing tutorial and videos</p>",
        "id": 260656752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636378417
    },
    {
        "content": "<p><code>meta def my_skip : tactic unit := tactic.interactive.skip</code> seems to work fine</p>",
        "id": 260656911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636378501
    },
    {
        "content": "<p>But if you want the n then you're going to have to parse it, and figure out the differences between names, exprs, pexprs etc I guess</p>",
        "id": 260657044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636378572
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.my_skip</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">trace</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">skip</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">my_skip</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260735705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636415341
    },
    {
        "content": "<p>Please watch Rob's videos on metaprogramming!</p>",
        "id": 260735714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636415351
    }
]