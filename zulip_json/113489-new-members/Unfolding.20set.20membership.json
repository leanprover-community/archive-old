[
    {
        "content": "<p>I'm checking out  the second challenge from here <a href=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/README.md\">https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/README.md</a><br>\nI'm still a little anxious about doing the proofs backwards, so I was trying to do it forwards, without apply. Unfolding a bunch of times gives<br>\n<code>a ∈ {b : ℝ | ∀ (s : ℝ), s ∈ upper_bounds S → b ≤ s}</code>,<br>\nis there a way to turn this directly into <code>∀ (s : ℝ), s ∈ upper_bounds S → a ≤ s</code>?</p>",
        "id": 201404711,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1592580242
    },
    {
        "content": "<p><code>dsimp</code>?</p>",
        "id": 201404776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592580262
    },
    {
        "content": "<p>If <code>dsimp</code> works then note that this shows that what you are looking at, and what you want to be looking at, are equal by definition. Hence, if you are not planning on using a tactic like <code>rw</code> or <code>simp</code>, you can just <em>pretend</em> that the goal says what you want it to say (because in some sense it already does).</p>",
        "id": 201404898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592580336
    },
    {
        "content": "<p>i.e. (assuming it's your goal) you might find that <code>intro s</code> just works anyway</p>",
        "id": 201404920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592580349
    },
    {
        "content": "<p>and indeed you might find that you can just delete all the <code>unfolds</code>, because they only change things up to definition.</p>",
        "id": 201405019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592580376
    },
    {
        "content": "<p>Ah that makes sense</p>",
        "id": 201405033,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1592580384
    },
    {
        "content": "<p><code>rw</code> and <code>simp</code> are more fussy, they like things to be right on the nose (\"syntactic equality\"). Tactics like <code>intro</code> and <code>exact</code> are more lenient.</p>",
        "id": 201405128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592580436
    },
    {
        "content": "<p>Great, that worked, thanks!</p>",
        "id": 201405310,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1592580521
    }
]