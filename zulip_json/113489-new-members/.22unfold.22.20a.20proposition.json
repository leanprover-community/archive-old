[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">r</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>According to Mathematics in Lean, in Lean <code>r ⊆ s</code> means <code> ∀ {x : α}, x ∈ s → x ∈ t</code>. But suppose I didn't know what the predicate <code>⊆</code> means, how can I know or check the meaning of it in Lean?<br>\nI.e. I know <code>r ⊆ s: Prop</code>, then how can I know the semantic meaning of r ⊆ s?</p>",
        "id": 240787329,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622431509
    },
    {
        "content": "<p>F12 jumps to definition? Although for notations this is unhelpful, because it will jump to the definition of the notation typeclass, probably something like <code>has_subset</code> in this case</p>",
        "id": 240791620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622436469
    },
    {
        "content": "<p><code>#print notation ⊆</code> tells you what the notation stands for.</p>",
        "id": 240795491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622441500
    },
    {
        "content": "<p><code>#print notation ⊆</code> prints </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_</span> <span class=\"bp\">`⊆`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">_</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">has_subset.subset</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>(I don't understand what <code>#1 #0  </code> means though)<br>\n\"Go to definition\" on <code>has_subset</code> gives me <code>class has_subset   (α : Type u) := (subset : α → α → Prop)</code>.<br>\nIt seems to me that what I found don't include much semantic meaning like <code>∀ {x : α}, x ∈ s → x ∈ t</code>.</p>",
        "id": 240799817,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622445599
    },
    {
        "content": "<p>Once I had discovered that the notation means <code>has_subset</code>, next I would work out how Lean is finding this typeclass for the type I'm looking at.</p>",
        "id": 240803342,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622447902
    },
    {
        "content": "<p>e.g., first verify it does actually find one:</p>",
        "id": 240803354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622447911
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 240803395,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622447943
    },
    {
        "content": "<p>then see what it finds, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 240803422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622447969
    },
    {
        "content": "<p>This prints <code>Try this: refine set.has_subset</code> in the message window, and if I click on \"Try this\" is replaces the <code>show_term</code> function with this value.</p>",
        "id": 240803710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622448131
    },
    {
        "content": "<p>Then you can use F12.</p>",
        "id": 240803716,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622448135
    },
    {
        "content": "<p>Which jumps to the definition you were looking for:</p>",
        "id": 240803745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622448160
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">subset</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s₂</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">set.subset</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 240803751,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622448163
    },
    {
        "content": "<p>Note that you can also use widgets in the goal window.</p>",
        "id": 240803935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622448328
    },
    {
        "content": "<p>Whenever you see a <code>⊆</code> in the goal window, just click on it. In the popup, one of the arguments (I guess the 2nd) will be the instance of <code>has_subset</code> that was found.</p>",
        "id": 240804022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622448370
    },
    {
        "content": "<p>Then click on that, and in the next popup, click on the button that looks a bit like <span aria-label=\"forward\" class=\"emoji emoji-21aa\" role=\"img\" title=\"forward\">:forward:</span> . It will take you to the definition of that instance.</p>",
        "id": 240804058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622448415
    },
    {
        "content": "<p>This isn't easy to describe, but Johan means: <a href=\"/user_uploads/3121/J8vX2yHMfx6D6M79NvTwLKER/subset.gif\">subset.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/J8vX2yHMfx6D6M79NvTwLKER/subset.gif\" title=\"subset.gif\"><img src=\"/user_uploads/3121/J8vX2yHMfx6D6M79NvTwLKER/subset.gif\"></a></div>",
        "id": 240804412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622448660
    },
    {
        "content": "<p>We should stick this GIF in the docs! :-)</p>",
        "id": 240804438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622448695
    },
    {
        "content": "<p>We should post that gif on the website</p>",
        "id": 240804439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622448696
    },
    {
        "content": "<p>I'd need to redo it more carefully because VScode is out of the capture at the end.</p>",
        "id": 240804499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622448727
    },
    {
        "content": "<p>Let me try again</p>",
        "id": 240804501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622448730
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/GoGN6hVXOmbY8UgffwVF9H9g/subset.gif\">subset.gif</a>  should be better</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GoGN6hVXOmbY8UgffwVF9H9g/subset.gif\" title=\"subset.gif\"><img src=\"/user_uploads/3121/GoGN6hVXOmbY8UgffwVF9H9g/subset.gif\"></a></div>",
        "id": 240804570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622448791
    },
    {
        "content": "<p>I guess <code>#widgets</code> could point to a page that explains these sorts of things</p>",
        "id": 240804776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622448947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/.22unfold.22.20a.20proposition/near/240804058\">said</a>:</p>\n<blockquote>\n<p>Then click on that, and in the next popup, click on the button that looks a bit like <span aria-label=\"forward\" class=\"emoji emoji-21aa\" role=\"img\" title=\"forward\">:forward:</span> . It will take you to the definition of that instance.</p>\n</blockquote>\n<p>Weird. I don't have a button like that.<br>\n<a href=\"/user_uploads/3121/KPd_wjKQ0s2EXC6UgWGB5sYe/image.png\">image.png</a> <br>\nWhat can I do to make that button appear?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KPd_wjKQ0s2EXC6UgWGB5sYe/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KPd_wjKQ0s2EXC6UgWGB5sYe/image.png\"></a></div>",
        "id": 240807938,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622451096
    },
    {
        "content": "<p>Hmmm, I guess you installed everything recently? Otherwise I would suggest updating the installation...</p>",
        "id": 240808145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622451237
    },
    {
        "content": "<p>Yes.. I did just install everything recently</p>",
        "id": 240808258,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622451316
    },
    {
        "content": "<p>Weird. Which installation instructions did you follow?</p>",
        "id": 240808409,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622451414
    },
    {
        "content": "<p>Maybe he didn't import anything from mathlib</p>",
        "id": 240808477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622451463
    },
    {
        "content": "<p>Does it work if you start your file with <code>import tactic</code>?</p>",
        "id": 240808508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622451480
    },
    {
        "content": "<p>The minimal import is probably <code>tactic.interactive_expr</code></p>",
        "id": 240808602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622451533
    },
    {
        "content": "<p>Cool. I solved this problem by importing something.<br>\nMany thanks to all of you!</p>",
        "id": 240809378,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622452053
    },
    {
        "content": "<p>I found another cool way of \"unfolding\" a predicate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_subset.subset</span><span class=\"o\">,</span> <span class=\"n\">set.subset</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Basically, I can unfold the meaning of a predicate notation by using <code>simp []</code>.</p>",
        "id": 240820037,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622459454
    }
]