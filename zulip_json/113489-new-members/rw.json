[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rewrite</span> <span class=\"n\">inf_comm</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Here <code>rw</code> only allows me to apply <code>inf_comm</code> to the LHS. Is there any convenient way to apply <code>inf_comm</code> to all the three instances of <code>c</code> (i.e. changing the goal to <code>c ⊓ (a ⊔ b) = (c ⊓ a) ⊔ (c ⊓ b)</code>?</p>",
        "id": 240704899,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622298561
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/nth_rewrite/default.html#tactic.interactive.nth_rewrite\">nth_rewrite</a> is a way</p>",
        "id": 240705554,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622299514
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"n\">inf_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"n\">inf_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">2</span> <span class=\"n\">inf_comm</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 240705565,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622299534
    },
    {
        "content": "<p>It allows you to rewrite the nth matching term in the goal</p>",
        "id": 240705624,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622299586
    },
    {
        "content": "<p>I'm not sure how to make it more concise here</p>",
        "id": 240705646,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622299638
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊔</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">⊔</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">inf_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The <code>@</code> syntax makes it possible to prescribe all the parameters to a lemma, even the implicit ones. Here, I am telling simp to rewrite using <code>inf_comm</code>, but only each time the second parameter to this <code>inf_comm</code> is <code>c</code>.</p>",
        "id": 240705735,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622299781
    },
    {
        "content": "<p>i wonder if there could be something like <code>ac_refl</code> that's <code>ac_exact</code> or something</p>",
        "id": 240705808,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622299865
    },
    {
        "content": "<p>a ridiculous hack that does actually work is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"n\">using</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">ac_refl</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 240705898,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622299980
    },
    {
        "content": "<p>oh, also <code>ac_change</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">ac_change</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>these are obviously very <code>comm</code>-specific though</p>",
        "id": 240706044,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622300177
    }
]