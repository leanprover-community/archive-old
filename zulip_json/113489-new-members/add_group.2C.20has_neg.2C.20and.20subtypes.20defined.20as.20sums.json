[
    {
        "content": "<p>Here's my MVE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">section</span>\n    <span class=\"c1\">-- these sorry&#39;s I have, but aren&#39;t relevant</span>\n    <span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"n\">def</span> <span class=\"n\">B</span><span class=\"err\">ᵣ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n    <span class=\"kn\">instance</span> <span class=\"n\">B</span><span class=\"err\">ᵣ</span><span class=\"bp\">_</span><span class=\"n\">has_neg</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n    <span class=\"c\">/-</span><span class=\"cm\"> an r-vector must be decomposable into r blades-/</span>\n    <span class=\"n\">def</span> <span class=\"n\">is_rvector</span>  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span><span class=\"o\">)),</span>\n        <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">bs</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n    <span class=\"c\">/-</span><span class=\"cm\"> the algebra of a single grade -/</span>\n    <span class=\"n\">def</span> <span class=\"n\">G</span><span class=\"err\">ᵣ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"n\">is_rvector</span> <span class=\"n\">r</span> <span class=\"n\">g</span><span class=\"o\">}</span>\n\n    <span class=\"c1\">-- I don&#39;t know how to obtain this without tediously expanding `list.sum` for every case.</span>\n    <span class=\"kn\">instance</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Is there a trivial way to create an <code>instance</code> <code>add_group (Gᵣ  r)</code>? I can prove the properties one by one, but I get the feeling that mathlib already has what I need if I define <code>is_rvector</code> in a clever way.</p>",
        "id": 202204432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593291086
    },
    {
        "content": "<p>To help ward off accidental XY problems here, my actual problem is</p>\n<blockquote>\n<p>given a subtype <code>Br</code> of <code>G</code> where <code>[has_neg Br]</code> and <code>[add_group G]</code>, how do I form the subtype <code>Gr</code> which is the smallest subgroup of <code>G</code> which contains all of <code>Br</code>?</p>\n</blockquote>",
        "id": 202205294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593292485
    },
    {
        "content": "<p>it might be better to work with sets instead of subtypes</p>",
        "id": 202205448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593292780
    },
    {
        "content": "<p>Is there any way to convert back an forth between the two?</p>",
        "id": 202205582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593293026
    },
    {
        "content": "<p>I think you've set me on the right track, thanks</p>",
        "id": 202205889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593293531
    },
    {
        "content": "<p>I think you're looking for this? <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/pointwise.html\">https://leanprover-community.github.io/mathlib_docs/algebra/pointwise.html</a></p>",
        "id": 202222886,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593326111
    },
    {
        "content": "<p>or maybe this <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/pi_instances.html\">https://leanprover-community.github.io/mathlib_docs/algebra/pi_instances.html</a></p>",
        "id": 202222891,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593326151
    },
    {
        "content": "<p>I ended up trying to use <code>add_subgroup.closure (set_of (Bᵣ r).property)</code></p>",
        "id": 202225131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593330732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I'm saying, in the first place don't have B_r be a subtype to begin with</p>",
        "id": 202225254,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593330964
    },
    {
        "content": "<p>I think I want it to be a subtype because I want to define functions over the objects in the set</p>",
        "id": 202225262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593330988
    },
    {
        "content": "<p>and having it be a set allows for this flexibility, because you can coerce a set into a subtype but not the other way round</p>",
        "id": 202225272,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331033
    },
    {
        "content": "<p>at least idiomatically</p>",
        "id": 202225273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331039
    },
    {
        "content": "<p>In that <code>↥</code> will be invoked automatically?</p>",
        "id": 202225279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593331068
    },
    {
        "content": "<p>yes</p>",
        "id": 202225282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593331075
    },
    {
        "content": "<p>and you can have additive closure of a set but not of a subtype</p>",
        "id": 202225332,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331138
    },
    {
        "content": "<p>at least idiomatically</p>",
        "id": 202225333,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331140
    },
    {
        "content": "<p>and you can perform set operations (intersections, unions, insertions, etc) on a set but not on a subtype</p>",
        "id": 202225339,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331170
    },
    {
        "content": "<p>at least idiomatically</p>",
        "id": 202225340,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331172
    },
    {
        "content": "<p>Thanks for the tips<br>\nI actually had both <code>Gᵣ_subgroup</code> and <code>Gᵣ (r : ℕ) := ↥(Gᵣ_subgroup r)</code>.<br>\nSounds like there is no need for the separate definitions</p>",
        "id": 202225342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593331184
    },
    {
        "content": "<p>and you don't need the second one</p>",
        "id": 202225418,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331240
    },
    {
        "content": "<p>aliases are not idiomatic because <code>rw</code> and <code>simp</code> and etc cannot see through it</p>",
        "id": 202225438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331265
    },
    {
        "content": "<p>A follow-up question - if I have <code>P := set_of p</code>, and can prove <code>∀ x : α, p x</code>, can I show <code>P = \\alpha</code>?</p>",
        "id": 202225446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593331277
    },
    {
        "content": "<p>which I sometimes find annoying as well -- why can't I just make aliases that everything can see through?</p>",
        "id": 202225458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331292
    },
    {
        "content": "<p><code>set_of</code> is also not idiomatic: use <code>{ x | P x }</code> instead</p>",
        "id": 202225470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331309
    },
    {
        "content": "<p><code>\\alpha</code> is not a set; you mean <code>set.univ</code></p>",
        "id": 202225481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331321
    },
    {
        "content": "<p>and you can prove that using lemmas about <code>set.univ</code></p>",
        "id": 202225523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331326
    },
    {
        "content": "<p>I think I was hoping to show type equality</p>",
        "id": 202225533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593331336
    },
    {
        "content": "<p>set equality is what you want</p>",
        "id": 202225542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593331348
    },
    {
        "content": "<p>type equality is not meaningful</p>",
        "id": 202225551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593331359
    },
    {
        "content": "<p>Perhaps I was misdirected by the codewars kata asking me to prove bool != nat into thinking that such a proof was common :)</p>",
        "id": 202225567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593331411
    },
    {
        "content": "<p>heh</p>",
        "id": 202225569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593331417
    },
    {
        "content": "<p>aha</p>",
        "id": 202225570,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331418
    },
    {
        "content": "<p>yeah we don't use type equalities</p>",
        "id": 202225575,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331433
    },
    {
        "content": "<p>we don't ask whether two types are equal</p>",
        "id": 202225595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331442
    },
    {
        "content": "<p>just like in ZFC you don't ask whether 37 is an element of the real number pi</p>",
        "id": 202225618,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331450
    },
    {
        "content": "<p>Alright, so lets's say I use <code>∀ x : α, p x</code> to prove <code>set_of p = set.univ</code>. Can I get a free <code>coe</code> from <code>\\alpha</code> to <code>P</code>?</p>",
        "id": 202225651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593331518
    },
    {
        "content": "<p>Not a coe but I believe there is an equiv for this</p>",
        "id": 202225661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593331554
    },
    {
        "content": "<p>equiv is a bijective coe?</p>",
        "id": 202225698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593331567
    },
    {
        "content": "<p>It's a bijection with computable inverse</p>",
        "id": 202225703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593331580
    },
    {
        "content": "<p>it is a function you have to apply</p>",
        "id": 202225710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593331602
    },
    {
        "content": "<p>The relevant function is usually called <code>cod_restrict</code></p>",
        "id": 202225721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593331627
    },
    {
        "content": "<p>it might be more helpful if you un <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> this further</p>",
        "id": 202225778,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593331708
    },
    {
        "content": "<p>ah yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.cod_restrict/src\">src#set.cod_restrict</a> in <code>data.set.function</code></p>",
        "id": 202225779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593331708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>: Not sure how to un-XY further without giving my full file... If you're willing to skim ~200 lines, then I'll give you a github link. If not, I'll keep exploring myself :)</p>",
        "id": 202225951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593332051
    },
    {
        "content": "<p>The line that feels awkward to me is: <a href=\"https://github.com/eric-wieser/lean-ga/blob/sets-of-blades/src/geometric_algebra/nursery/chisolm.lean#L209\">https://github.com/eric-wieser/lean-ga/blob/sets-of-blades/src/geometric_algebra/nursery/chisolm.lean#L209</a> (edit: fixed sorry, I must have just had a typo or something)</p>",
        "id": 202226028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593332255
    },
    {
        "content": "<p>I won't speak for kenny, but if I'm following a conversation and there's a link to a github file, I usually follow the link rather than unfollow the conversation</p>",
        "id": 202226030,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593332258
    },
    {
        "content": "<p>Simplified my issue a little bit - its really just a case of working out what's idiomatic and gets me the most for free - I was able to complete my proof</p>",
        "id": 202226362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593332818
    },
    {
        "content": "<p>i find the file kind of hard to read. is there a reason you don't write something more like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">vec_sym_prod_scalar</span><span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"err\">₊ᵥ</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">fₛ</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">²ᵥ</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">²ᵥ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">²ᵥ</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"err\">₊ᵥ</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">square_vec</span> <span class=\"n\">sym_prod_vec</span> <span class=\"n\">prod_vec</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"err\">ᵥ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">left_distrib</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">right_distrib</span><span class=\"o\">},</span>\n    <span class=\"n\">abel</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">vec_sq_scalar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"err\">²ᵥ</span> <span class=\"bp\">=</span> <span class=\"n\">fₛ</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">geometric_algebra</span><span class=\"bp\">.</span><span class=\"n\">vec_sq_scalar</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">vec_sq_scalar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202226445,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593332960
    },
    {
        "content": "<p>in my local copy of the master branch, typeclass inference can't find <code>has_add G₁</code></p>",
        "id": 202226490,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593333012
    },
    {
        "content": "<p>master branch of mathlib? Of that repo?</p>",
        "id": 202226494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593333054
    },
    {
        "content": "<p>of that repo</p>",
        "id": 202226497,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593333063
    },
    {
        "content": "<p>you linked to a branch called sets-of-blades, maybe it's fixed there. for some reason <code>git checkout origin/sets-of-blades</code> doesn't work for me</p>",
        "id": 202226500,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593333082
    },
    {
        "content": "<p>Master branch is not super relevant to my question, since all the stuff I added is on another branch</p>",
        "id": 202226501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593333093
    },
    {
        "content": "<p>I think <code>has_add G₁</code> is implied by <code>[vector_space G₀ G₁]</code>?</p>",
        "id": 202226516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593333122
    },
    {
        "content": "<p>even earlier, by <code>[add_comm_group G₁]</code></p>",
        "id": 202226550,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593333146
    },
    {
        "content": "<p>I didn't write that lemma (<span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>  did), so don't want to think too much about its style right now.</p>",
        "id": 202226573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593333210
    },
    {
        "content": "<p>ok i figured out my branch issues (i just nuked my local copy and did <code>leanproject get eric-wieser/lean-ga:sets-of-blades</code>)</p>",
        "id": 202226643,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593333357
    },
    {
        "content": "<p>Thanks for (offering to start) helping out!</p>",
        "id": 202226684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593333377
    },
    {
        "content": "<p>well i haven't offered anything useful yet :P</p>",
        "id": 202226705,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593333424
    },
    {
        "content": "<p>there's something I don't understand about the difference between tactic mode and term mode. The first lemma throws an error and the second one doesn't</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">vec_sym_prod_scalar2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"err\">₊ᵥ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">²ᵥ</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">²ᵥ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">²ᵥ</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"err\">₊ᵥ</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">vec_sym_prod_scalar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"err\">₊ᵥ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">²ᵥ</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">²ᵥ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">²ᵥ</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"err\">₊ᵥ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 202226968,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593333872
    },
    {
        "content": "<p>I ran into this too - it can't seem to infer the operators</p>",
        "id": 202226974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593333900
    },
    {
        "content": "<p>Putting <code>( ... : G)</code> around their use seemed to fix it for me</p>",
        "id": 202226980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593333913
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">def</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨-</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b&#39;</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hb</span> <span class=\"k\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"kn\">end</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n\n  <span class=\"kn\">instance</span> <span class=\"n\">has_neg</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202227095,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334115
    },
    {
        "content": "<p>this isn't idiomatic: you should instead show that <code>is_rblade r b</code> implies <code>is_rblade r (-b)</code></p>",
        "id": 202227099,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334139
    },
    {
        "content": "<p>And then derive <code>neg</code> from that proof?</p>",
        "id": 202227107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593334158
    },
    {
        "content": "<p>do you know where the floating <code>end</code> on line 216 of <a href=\"https://github.com/eric-wieser/lean-ga/blob/sets-of-blades/src/geometric_algebra/nursery/chisolm.lean#L209\">https://github.com/eric-wieser/lean-ga/blob/sets-of-blades/src/geometric_algebra/nursery/chisolm.lean#L209</a> comes from?</p>",
        "id": 202227166,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593334250
    },
    {
        "content": "<p><code>section</code></p>",
        "id": 202227173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593334265
    },
    {
        "content": "<p>thanks (anonymous sections seem obviously bad to me, but I guess you're trying not to think about that sort of thing right now)</p>",
        "id": 202227218,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593334337
    },
    {
        "content": "<p>also, your file has a lot of aliases, and I mean a whole lot. It is a shame that Lean cannot deal with aliases optimally, so the idiomatic thing to do is to stick with one way to write a certain thing and prove 37 lemmas about that way</p>",
        "id": 202227220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334351
    },
    {
        "content": "<p>for example, we have 3700 lemmas about multiplication and 0 about your <code>sym_prod</code> so maybe you shouldn't use <code>sym_prod</code></p>",
        "id": 202227222,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334380
    },
    {
        "content": "<p>Regarding <code>neg</code>, is this closer to idiomatic?</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">lemma</span> <span class=\"n\">neg_is_rblade</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">is_rblade</span> <span class=\"n\">r</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">is_rblade</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hb</span> <span class=\"k\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"kn\">end</span>\n  <span class=\"kn\">end</span>\n  <span class=\"n\">def</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨-</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">neg_is_rblade</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 202227280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593334455
    },
    {
        "content": "<p>yeah</p>",
        "id": 202227281,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334475
    },
    {
        "content": "<p>I'm confused, what do you suggest they do instead of use <code>sym_prod</code>?</p>",
        "id": 202227291,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593334506
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">sym_prod</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 202227305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334549
    },
    {
        "content": "<p>I suggest they forget about this definition</p>",
        "id": 202227307,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334555
    },
    {
        "content": "<p>oops I added <code>@[simp]</code> in my local version</p>",
        "id": 202227345,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334568
    },
    {
        "content": "<p>what do you mean by \"forget about\"?</p>",
        "id": 202227348,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593334596
    },
    {
        "content": "<p>do you mean add <code>@[simp]</code>?</p>",
        "id": 202227349,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593334605
    },
    {
        "content": "<p>I actually mean delete this definition, but maybe we could ask <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> about how that file could become more idiomatic</p>",
        "id": 202227355,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334640
    },
    {
        "content": "<p>that file = <a href=\"https://github.com/eric-wieser/lean-ga/blob/sets-of-blades/src/geometric_algebra/nursery/chisolm.lean\">https://github.com/eric-wieser/lean-ga/blob/sets-of-blades/src/geometric_algebra/nursery/chisolm.lean</a></p>",
        "id": 202227357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334653
    },
    {
        "content": "<p>is giving it @[reducible] similar to deleting it? or making it a notation?<br>\nI imagine the point is just that it's a pain to type out <code>a * b + b * a</code> when <code>a</code> and <code>b</code> are many characters long</p>",
        "id": 202227399,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593334704
    },
    {
        "content": "<p>hence \"it's a shame Lean can't handle aliases optimally\"</p>",
        "id": 202227455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334803
    },
    {
        "content": "<p>in my ideal world I would be able to write <code>sym_prod</code> in theorems and have it automatically convert to the long version when they store the theorem</p>",
        "id": 202227468,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334831
    },
    {
        "content": "<p>so people won't complain about my LHS not being in \"simp-normal\" form</p>",
        "id": 202227475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593334847
    },
    {
        "content": "<p>My suspicion is that we will not need <code>sym_prod</code> in its current form, only <code>sym_prod_vec</code>. The true symmetric product over G is much more complex, I think</p>",
        "id": 202227476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593334849
    },
    {
        "content": "<p>Another question about that file - I have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- r-vectors</span>\n<span class=\"n\">def</span> <span class=\"n\">G</span><span class=\"err\">ᵣ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">G</span><span class=\"err\">ᵣ</span>\n  <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"kn\">instance</span> <span class=\"n\">addgroup</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"err\">ᵣ</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span>\n<span class=\"kn\">end</span> <span class=\"n\">G</span><span class=\"err\">ᵣ</span>\n</code></pre></div>\n\n\n<p>Is the <code>add_comm_group</code> instance actually needed, or does lean already provide it? If the latter, can I write an assertion that I satisfy the type class?</p>",
        "id": 202227545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335018
    },
    {
        "content": "<p>if you tag the definition with <code>@[reducible]</code> then you will automatically have the instance</p>",
        "id": 202227590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593335077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> in my ideal world, writing <code>sym_prod a b</code> would be the <strong>same</strong> as writing <code>a * b + b * a</code> in <strong>all</strong> circumstances</p>",
        "id": 202227606,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593335112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, for the second part of the question, how can I check if I have the instance?</p>",
        "id": 202227615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335137
    },
    {
        "content": "<p><code>#check \\la r, (by instance : add_comm_group G\\_r r)</code> (be sure <strong>not</strong> to put this after a line that starts with <code>by</code>)</p>",
        "id": 202227656,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593335172
    },
    {
        "content": "<p>Is it idiomatic to leave checks in files as proof that the instances you intend to satisfy are satified?</p>",
        "id": 202227667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335218
    },
    {
        "content": "<p>no</p>",
        "id": 202227672,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593335241
    },
    {
        "content": "<p>it isn't a proof</p>",
        "id": 202227675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593335247
    },
    {
        "content": "<p>you don't need that line there to use the file</p>",
        "id": 202227679,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593335263
    },
    {
        "content": "<p>Right, but it acts as a unit test for the file</p>",
        "id": 202227681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335272
    },
    {
        "content": "<p>if you \"intend to satisfy the instance\" then there should be theorems that make use of it</p>",
        "id": 202227685,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593335280
    },
    {
        "content": "<p>we don't do unit tests</p>",
        "id": 202227721,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593335284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>: what about situations where I don't need it to satisfy any of my theorems, but users building upon my theorems do?</p>",
        "id": 202227728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335324
    },
    {
        "content": "<p>you don't need the <code>#check</code> line to have the instance</p>",
        "id": 202227733,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593335344
    },
    {
        "content": "<p>it's just there literally for you to check that the instance is there</p>",
        "id": 202227736,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593335353
    },
    {
        "content": "<p>No, but if I remove the instance by accident, how would I know?</p>",
        "id": 202227738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335356
    },
    {
        "content": "<p>then the theorems depending on that instance will complain to you</p>",
        "id": 202227747,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593335380
    },
    {
        "content": "<p>But they won't, they'd complain at someone else who wrote those theorems on a different machine. Who would then complain to me</p>",
        "id": 202227792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335405
    },
    {
        "content": "<p>\"All repo not PR'd into mathlib is lost\" -- Ancient Chinese Proverb</p>",
        "id": 202227800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593335439
    },
    {
        "content": "<p>you can declare the instance by <code>instance : add_comm_group G\\0 := by apply_instance</code>, is that what you want?</p>",
        "id": 202227804,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593335469
    },
    {
        "content": "<p>If you want <code>sym_prod a b</code> to be turned into <code>a * b + b * a</code> immediately, you can use a notation</p>",
        "id": 202227814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593335502
    },
    {
        "content": "<p>Yes, I think that's a nice compromise <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> , thanks. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, thanks for the advice.</p>",
        "id": 202227856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/add_group.2C.20has_neg.2C.20and.20subtypes.20defined.20as.20sums/near/202227804\">said</a>:</p>\n<blockquote>\n<p>you can declare the instance by <code>instance : add_comm_group G\\0 := by apply_instance</code>, is that what you want?</p>\n</blockquote>\n<p>Won't this result in two <code>add_comm_group</code> instances? If so, maybe for a test you should use <code>example</code> here instead.</p>",
        "id": 202227881,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593335641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> , that doesn't work, it seems to declare it with a name of <code>add_comm_group</code>.</p>",
        "id": 202227923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335661
    },
    {
        "content": "<p><code>example (r : ℕ) : add_comm_group (Gᵣ r) := by apply_instance</code> is what I was after!</p>",
        "id": 202227927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335695
    },
    {
        "content": "<p>It seems I don't need <code>@[reducible]</code>?</p>",
        "id": 202227985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335781
    },
    {
        "content": "<p>you don't need reducible where?</p>",
        "id": 202227990,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593335803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/add_group.2C.20has_neg.2C.20and.20subtypes.20defined.20as.20sums/near/202227590\">said</a>:</p>\n<blockquote>\n<p>if you tag the definition with <code>@[reducible]</code> then you will automatically have the instance</p>\n</blockquote>\n<p>On G\\_r</p>",
        "id": 202227998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335824
    },
    {
        "content": "<p>If the instance gets a bad name, you should give it a name manually</p>",
        "id": 202228057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593335899
    },
    {
        "content": "<p><code>instance G0.add_comm_group : add_comm_group G\\0 := by apply_instance</code></p>",
        "id": 202228070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593335916
    },
    {
        "content": "<p>My hope was that <code>instance</code> without a name would result in no name at all. But it sounds like if you need no name at all, <code>example</code> is the right keyword.</p>",
        "id": 202228077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593335949
    },
    {
        "content": "<p>Including this instance explicitly can speed up type class search, right?</p>",
        "id": 202228078,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593335952
    },
    {
        "content": "<p>no name just means it uses an automatic naming scheme which is wrong surprisingly often</p>",
        "id": 202228082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593335971
    },
    {
        "content": "<p><code>example</code> just throws away the declaration once it's been checked.</p>",
        "id": 202228087,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593335984
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202228199,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593336193
    },
    {
        "content": "<p>one example of bad aliasing in this file is <code>left_distrib</code>. everywhere it's used it can (and should) be replaced with the general <code>mul_add</code></p>",
        "id": 202228332,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593336471
    },
    {
        "content": "<p>Yeah, I noticed that too, just didn't want to do too much cleanup to start with.</p>",
        "id": 202228566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593336926
    },
    {
        "content": "<p>( <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> should probably look at this thread at some point )</p>",
        "id": 202228623,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593337046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/add_group.2C.20has_neg.2C.20and.20subtypes.20defined.20as.20sums/near/202227814\">said</a>:</p>\n<blockquote>\n<p>If you want <code>sym_prod a b</code> to be turned into <code>a * b + b * a</code> immediately, you can use a notation</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and I are trying out this new approach and it's working fine</p>",
        "id": 202237541,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593352248
    },
    {
        "content": "<p>and I'm left here wondering why don't we use this all over mathlib</p>",
        "id": 202237547,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593352257
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- make all the tactics work</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"c1\">-- Let&#39;s just use Lean&#39;s definition of the naturals and not worry</span>\n<span class=\"c1\">-- about what they are or how to make them.</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- Let&#39;s now experiment</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">experiment</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">An experiment where we try different definitions of the integers.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">int3</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`ℕ</span><span class=\"err\">²</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">natsquared</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">first</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">second</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n\n<span class=\"n\">def</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"err\">²</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">first</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">second</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">second</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">first</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_equiv</span> <span class=\"bp\">ℕ</span><span class=\"err\">²</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">r</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"err\">²</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- unfold it in your head</span>\n  <span class=\"n\">change</span> <span class=\"n\">first</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">second</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">second</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">first</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- if you delete the line above, the line below still works</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"err\">²</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_equiv</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"err\">²</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≈</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_equiv</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">equiv</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">trans</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"bp\">ℕ</span><span class=\"err\">²</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">natsquared</span>\n\n<span class=\"c1\">-- definition of int as quotient type</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`ℤ</span><span class=\"mi\">3</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">natsquared</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n\n<span class=\"c1\">-- theorem! It&#39;s a ring!</span>\n\n<span class=\"n\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"err\">⟦</span><span class=\"mi\">0</span><span class=\"err\">⟧</span>\n<span class=\"n\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"err\">⟦</span><span class=\"mi\">1</span><span class=\"err\">⟧</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">natsquared</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"err\">²</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">first</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">second</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">second</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">first</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on₂</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"err\">⟦</span><span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"err\">⟧</span><span class=\"o\">)</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">int3</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">experiment</span>\n</code></pre></div>",
        "id": 202237628,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593352369
    },
    {
        "content": "<p>here, no definition, only notation, and everything works fine</p>",
        "id": 202237633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593352381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> we should use this all over mathlib</p>",
        "id": 202237639,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593352391
    },
    {
        "content": "<p>oh except for one thing: zero and one and add are all definitions</p>",
        "id": 202237696,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593352472
    },
    {
        "content": "<p>I don't think we want <code>int3</code> to be a notation</p>",
        "id": 202237772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352652
    },
    {
        "content": "<p>or rather, <code>ℤ3</code> should be a notation for <code>def int3 := quotient natsquared.setoid\n</code></p>",
        "id": 202237784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352680
    },
    {
        "content": "<p>I don't see any problems with <code>ℕ²</code> being a (local) notation though</p>",
        "id": 202237833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352717
    },
    {
        "content": "<p>actually these should all probably be local notations</p>",
        "id": 202237840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352739
    },
    {
        "content": "<p>But notations are not a substitute for defs. They are like macros, they expand on the spot</p>",
        "id": 202237859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352779
    },
    {
        "content": "<p>that's usually <em>not</em> what you want</p>",
        "id": 202237866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352793
    },
    {
        "content": "<p>but that's what I'm complaining about</p>",
        "id": 202238093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593353138
    },
    {
        "content": "<p>I want them to behave completely the same</p>",
        "id": 202238097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593353153
    },
    {
        "content": "<p>I guess I'm being unreasonable</p>",
        "id": 202238106,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593353162
    },
    {
        "content": "<p>if everything were expanded every term would be huge right</p>",
        "id": 202238144,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593353188
    },
    {
        "content": "<p>like internally, even though pp gives a short term</p>",
        "id": 202238147,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593353200
    },
    {
        "content": "<p>even <code>pp</code> won't be able to provide small terms in most cases, I think</p>",
        "id": 202238906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593354444
    },
    {
        "content": "<p>But you've got the idea there - the whole point of definitions is so that term sizes don't grow exponentially as you move up in abstraction</p>",
        "id": 202238952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593354491
    },
    {
        "content": "<p>if you intend to give something an \"API\" then it should probably be a definition</p>",
        "id": 202238962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593354520
    },
    {
        "content": "<p>Just discovered this topic through @. Thanks for the code review and suggestions!</p>\n<p>The file is mostly a messy battlefield when I was fighting with how to proceed to the next line. There're many cleanups in order, and not cleaning them up is simply because of some historical reasons and random feelings about them:</p>\n<ol>\n<li>The proof would become much more readable if it's rewritten into what <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> suggested <a href=\"#narrow/stream/113489-new-members/topic/add_group.2C.20has_neg.2C.20and.20subtypes.20defined.20as.20sums/near/202226445\">here</a>,  I was just piecing the scalars together so I used elim to give the scalars names from the exists prop;</li>\n<li>anonymous sections are indeed bad, but if I have a lemma <code>c</code> in namespace <code>a</code> and section <code>b</code>, I can't help to think it as <code>a.b.c</code>  so I left <code>b</code> empty ;</li>\n<li>the  abuse of alias is partly an experiment to see how can I see through these noises when I prove things;</li>\n<li>partly because I need them in the process of writing some deleted code, take <code>sym_prod</code> for an example, initially, there was no <code>sym_prod_vec</code> and only <code>sym_prod</code> since I used coe instead of homes, and I can't just use notation because I need to specify the types to give Lean the hint to automatically add coes for me, see <a href=\"https://github.com/pygae/lean-ga/blob/cf736df9e327ba6822f3b95e996406ec2e87f470/src/geometric_algebra/nursery/basic.lean#L89\">https://github.com/pygae/lean-ga/blob/cf736df9e327ba6822f3b95e996406ec2e87f470/src/geometric_algebra/nursery/basic.lean#L89</a> </li>\n<li>the existence of <code>left_distrib</code> etc. is because I need to prove this trivial thing locally to verify the local environment, like parameters/variables are working, and I left them there because I wanted to present them locally, the same place they appear in the literature(showing that they are already included in the definition, without explicit appearances in the definition) and felt annoying to have to remember from which algebraic structure <code>left_distrib</code> came from.</li>\n</ol>",
        "id": 202425646,
        "sender_full_name": "Utensil Song",
        "timestamp": 1593518729
    },
    {
        "content": "<p>You don't need to remember the name of an algebraic structure to use <code>rw mul_add</code></p>",
        "id": 202426150,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593519067
    }
]