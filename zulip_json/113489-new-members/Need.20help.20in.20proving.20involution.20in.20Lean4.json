[
    {
        "content": "<p>so I have a function <code>nSwap</code> which takes a <code>List Int</code> and a swaps the first 2 elements so <code>x :: y :: rest</code> becomes <code>y :: x :: rest</code><br>\nI want to prove involution in lean for this function, how to define the theorem because there is also an argument for program counter which is passed to the function which doesn't really have any role in this proof. So I am not sure how to \"phrase\" the proof for lack of a better word</p>\n<p>the function <code>nSwap</code> is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">nSwap</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">([],</span> <span class=\"n\">pc</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">([</span><span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"n\">pc</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">pc</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>it returns a cartesian product too which might cause a problem in proof as well</p>",
        "id": 306922169,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667114550
    },
    {
        "content": "<p>here <code>Stack</code> is defined as <code>def Stack := List Int</code></p>",
        "id": 306922222,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667114601
    },
    {
        "content": "<p>And can you formalise what you want to prove?</p>",
        "id": 306922960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667115258
    },
    {
        "content": "<p>Oh I see -- that's the question? Why not state something about <code>(nswap s pc).1</code>?</p>",
        "id": 306923012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667115339
    },
    {
        "content": "<p>oh that's something I was looking for I am used to <code>fst</code>, yes that <code>.1</code> seems like what I was looking for</p>",
        "id": 306924154,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667116170
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 306924159,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667116176
    },
    {
        "content": "<p>I was able to formalise it : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">involution_nswap</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">nSwap</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">$</span> <span class=\"n\">nSwap</span> <span class=\"n\">s</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 306928875,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667119454
    },
    {
        "content": "<p><code>.fst</code> should also work. <code>.1</code> is a generic \"first field of this structure even if I don't know the name\" projection</p>",
        "id": 306929069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667119595
    },
    {
        "content": "<p>You can use dot / projection notation to shorten the formalisation a bit: <code>Prod.fst x</code> is the same as <code>x.fst</code> and also as <code>x.1</code> if <code>x : Prod A B</code>.</p>",
        "id": 306929139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667119676
    },
    {
        "content": "<p>yeah I saw <code>Prod.fst</code> by the vscode tooltip and then replaced it. It's a bad habit of mine to keep everything functional as much as possible to make sense for me. When I write the final proof I often replace that with the short notation. But I initially keep the semantics sane.</p>\n<p>Thanks for the pointers <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> but I don't know how to proceed further, <code>Prod.casesOn</code> seems like a function to eliminate cases</p>",
        "id": 306929795,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667120182
    },
    {
        "content": "<p>but yeah I am stuck after formalisation of the proof</p>",
        "id": 306930016,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667120296
    },
    {
        "content": "<p>Maybe I need something to break the <code>=</code> maybe something related to Eq</p>",
        "id": 306930135,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667120372
    },
    {
        "content": "<p>for Lists</p>",
        "id": 306930150,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667120383
    },
    {
        "content": "<p>is there a way to access stdlib, I cannot google or find it on lean4 (<a href=\"https://leanprover.github.io/\">https://leanprover.github.io/</a>) website</p>",
        "id": 306931043,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667120882
    },
    {
        "content": "<p>to understand what I should do I turned that proposition into a function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">nSwap</span> <span class=\"o\">(</span><span class=\"n\">nSwap</span> <span class=\"n\">s</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">stack_ex_1</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n\n  <span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"n\">stack_ex_1</span>\n</code></pre></div>\n<p>when I eval the function I am getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">stack_ex_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>what does this mean?</p>",
        "id": 306935271,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667123526
    },
    {
        "content": "<p>Also I can't seem to unfold : <code>unknown identifier 'unfold'</code><br>\ndo I need to import something?</p>",
        "id": 306935803,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667123922
    },
    {
        "content": "<p>Did you take a look at Theorem Proving In Lean? You should be able to prove your result by induction on s. There are lots of basic examples on how to prove theorems about inductive types in there. I don't think you'll need std4, which you can find on the lean GitHub site next to lean4</p>",
        "id": 306944655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667128808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557243\">@Shubham Kumar ðŸ¦€ (he/him)</span> You can do the proof with <code>cases</code> twice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Stack</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nSwap</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">([],</span> <span class=\"n\">pc</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">([</span><span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"n\">pc</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">pc</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">involution_nswap</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">nSwap</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">$</span> <span class=\"n\">nSwap</span> <span class=\"n\">s</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>That's using a structured style.</p>",
        "id": 306947697,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667130516
    },
    {
        "content": "<p>You can also give the proof as a functional program using <code>match</code>, following the cases of <code>nSwap</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">involution_nswap</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Prod.fst</span> <span class=\"o\">(</span><span class=\"n\">nSwap</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"bp\">$</span> <span class=\"n\">nSwap</span> <span class=\"n\">s</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 306947757,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667130572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar ðŸ¦€ (he/him)</span> <a href=\"#narrow/stream/113489-new-members/topic/Need.20help.20in.20proving.20involution.20in.20Lean4/near/306935271\">said</a>:</p>\n<blockquote>\n<p>when I eval the function I am getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span>\n  <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">stack_ex_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>what does this mean?</p>\n</blockquote>\n<p>The <code>Prop</code> type is sort of like <code>Bool</code>, and in fact there's a bijective function <code>Bool -&gt; Prop</code>, but there's not a general algorithm for the inverse function <code>Prop -&gt; Bool</code>. If there were, you could just <code>#eval riemann_hypothesis</code> and wait for the answer.</p>\n<p>The <code>Decidable</code> typeclass is essentially a way to partially evaluate this function, where for individual values of <code>p : Prop</code> you record whether it's true or false. When you write <code>#eval f stack_ex_1</code> I guess there's a Lean 4 feature that invokes this system to try to turn <code>f stack_ex_1</code> into a <code>Bool</code>. But, you haven't written a <code>Decidable</code> instance for this term, so you get the error.</p>",
        "id": 306948320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667130878
    },
    {
        "content": "<p>If you change the defintion to <code>abbrev Stack := List Int</code> and change <code>f</code> to return a <code>Bool</code> rather than a <code>Prop</code>, while being sure to use the <code>Bool</code>-valued equality, then you can get it to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">nSwap</span> <span class=\"o\">(</span><span class=\"n\">nSwap</span> <span class=\"n\">s</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">stack_ex_1</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"n\">stack_ex_1</span>\n<span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 306948559,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667131009
    }
]