[
    {
        "content": "<p>Consider the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"c1\">-- what do I do here?</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"mi\">3</span>\n<span class=\"k\">else</span>\n  <span class=\"mi\">4</span>\n</code></pre></div>\n<p>I need a proof of h in the function, but I'm not sure how to get it. Probably there is some approach to branch on the proposition other than 'if then else'?<br>\nI tried writing a 'begin end' block and using <code>cases' classical.em (n = 1)</code>, but that failes with <code>induction tactic failed, recursor 'or.dcases_on' can only eliminate into Prop</code></p>",
        "id": 261721388,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1637104314
    }
]