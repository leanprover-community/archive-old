[
    {
        "content": "<p>Why does this not work? Getting an error at <code>submodule.span k {v1, v2}</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283950917,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1653519674
    },
    {
        "content": "<p>you'll have to tag <code>{v1, v2}</code> with <code>set V</code></p>",
        "id": 283951355,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653519929
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">v1</span><span class=\"o\">,</span> <span class=\"n\">v2</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works. The reason is that <code>{v1,v2}</code> notation can mean a lot of things; you need to tell the elaborator you're talking about a subset of V.</p>",
        "id": 283951371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653519946
    },
    {
        "content": "<p>lean isn't very good at inferring <code>{a, b, ...}</code>'s type</p>",
        "id": 283951372,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653519947
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 283951543,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1653520080
    }
]