[
    {
        "content": "<p>This doesn't typecheck and I don't really get why:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">function.app</span> <span class=\"n\">subtype.val</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>It works if instead I define my own non-dependent version of <code>function.app</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.app'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">function.app'</span> <span class=\"n\">subtype.val</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>and then with <code>subtype.property</code> it's the other way around: it works with <code>app</code> but of course not with <code>app'</code>.</p>\n<p>How do I write a function <code>app_func</code> such that any application <code>f x</code> may be written as <code>app_func f x</code>?</p>",
        "id": 234209435,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618252878
    },
    {
        "content": "<p>And for context, maybe I should've asked this first, I was always bothered by the fact that <code>$</code> doesn't work in tactic mode without outer parentheses, and I was trying to define using <code>function.app</code> an infix notation like <code>$</code> but with a different precedence, so that it would work in tactic mode. Does something along these lines already exist?</p>",
        "id": 234211243,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618253671
    },
    {
        "content": "<p><code>def app_func (T) := @id T</code></p>",
        "id": 234214038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618254799
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.app\">docs#function.app</a> for reference</p>",
        "id": 234214154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618254846
    },
    {
        "content": "<p>Woah, there's some weird notation right next to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.app/src\">src#function.app</a></p>",
        "id": 234214483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618254982
    },
    {
        "content": "<p><code>(+) -[(*)]- (-)</code> is the function that computes the difference of the squares of its arguments (in a commutative ring)</p>",
        "id": 234214722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618255092
    },
    {
        "content": "<p>While <code>((+) on list.length)</code> is the function that adds the lengths of it's two list arguments</p>",
        "id": 234214981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618255227
    },
    {
        "content": "<p>I didn't realize I could think of <code>id</code> as a function of two argument, thanks, that's much more elegant than what I was trying.<br>\nNow I can have <code>infixr  $$ : 10 := id</code> and I can write things like  <code>let y := h $$ g $$ f x,</code> in tactic mode, it's great.</p>",
        "id": 234217307,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618256203
    },
    {
        "content": "<p><code>on</code> is used, e.g., in <code>pairwise ((≠) on f)</code></p>",
        "id": 234228882,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618261021
    }
]