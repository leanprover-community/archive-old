[
    {
        "content": "<p>This is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I extracted, how can I get across this problem?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.quadratic_reciprocity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">exist_p</span> <span class=\"o\">:=</span> <span class=\"n\">char_p.exists</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">exist_p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247077050,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627136462
    },
    {
        "content": "<p>the error message is <code>induction tactic failed, recursor 'Exists.dcases_on' can only eliminate into Prop</code></p>",
        "id": 247077067,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627136502
    },
    {
        "content": "<p>This example is too minimal</p>",
        "id": 247077755,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627137417
    },
    {
        "content": "<p>obviously, you should just use the <code>[field F]</code> hypothesis here</p>",
        "id": 247077765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627137435
    },
    {
        "content": "<p>The error message means: you can't do cases on an existential when you're trying to define data (like a <code>field</code> instance)</p>",
        "id": 247077776,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627137461
    },
    {
        "content": "<p>In this case though, a field has exactly one characteristic. So there must be something other than <code>char_p.exists</code> you can use to get it.</p>",
        "id": 247077855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627137560
    },
    {
        "content": "<p>The key problem is how I can extract a <code>char</code> for <code>F</code> in a definition constructing something.<br>\nThe thing can even be a graph</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">F</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">exist_p</span> <span class=\"o\">:=</span> <span class=\"n\">char_p.exists</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">exist_p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247078089,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627137859
    },
    {
        "content": "<p><code>cases</code> or <code>rcases</code> or <code>obtain</code> will report errors</p>",
        "id": 247078151,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627137964
    },
    {
        "content": "<p><code>char_p.exists</code> is the wrong thing to use here.</p>",
        "id": 247078214,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627138049
    },
    {
        "content": "<p>What you want is the characteristic of the field, not just knowing that it has some characteristic.</p>",
        "id": 247078221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627138073
    },
    {
        "content": "<p>What should be the right lemma to use then? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 247078466,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627138334
    },
    {
        "content": "<p>You don't want a lemma, you want a definition.</p>",
        "id": 247078502,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627138395
    },
    {
        "content": "<p>I would just read random files about fields until I found out what it is.</p>",
        "id": 247078508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627138403
    },
    {
        "content": "<p>Yeah, I want a <code>def</code> based on the <code>char</code> of <code>F</code>.</p>",
        "id": 247078585,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627138534
    },
    {
        "content": "<p>Also, it's usually not a good idea to make a definition using tactics unless you're careful about which tactics you use where.</p>",
        "id": 247079222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627139055
    },
    {
        "content": "<p>Because later you're presumably going to want to prove something about what you defined, and for that you will need to know what term was produced (and you probably don't want that term to start with something like <code>have exist_p := char_p.exists F, exist_p.rec (\\lam p, ...)</code>)</p>",
        "id": 247079369,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627139280
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_char\">docs#ring_char</a> to get the characteristic of a field (or even a possibly non associative semiring) as a natural number. I would also take a look at how it's implemented which should help with some of the questions you have above.</p>",
        "id": 247079747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627139724
    },
    {
        "content": "<p>The associated API should all have the form <code>ring_char.foo</code></p>",
        "id": 247079810,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627139776
    },
    {
        "content": "<p>in general, though, if you have a goal with typing judgement in <code>Type*</code> and you want to get the data out of an <code>Exists</code>, then you have to use <code>classical.some</code> and <code>classical.some_spec</code>; I've suggested a <code>obtain!</code> that lets you get round this error, but I haven't gotten round to coding it. The reason that you can even <code>obtain</code> on <code>âˆƒ</code> when you're making a <code>Prop</code> is because of proof irrelevance</p>",
        "id": 247080462,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627140653
    },
    {
        "content": "<p>It's also worth remarking that if you have a tactic mode goal whose type is <code>Type*</code> then you're probably doing something wrong anyway: goals should have type <code>Prop</code> in tactic mode.</p>",
        "id": 247080551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627140796
    },
    {
        "content": "<p>If it is to construct an instance of some class containing only several propositions, I don't see a problem with using tactics.</p>",
        "id": 247080721,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627141012
    },
    {
        "content": "<p><code>simple_graph</code> contains <code>adj</code>, which is data.</p>",
        "id": 247081095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627141561
    },
    {
        "content": "<p>If a class just contains propositions, then it will be a proposition itself.</p>",
        "id": 247081142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627141579
    },
    {
        "content": "<p>To make an instance of any structure (e.g. a class) I guess the standard way to do it is to use the usual constructor, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">sym</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>rather than launching into tactic mode with <code>begin</code>.</p>",
        "id": 247081224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627141697
    },
    {
        "content": "<p>Yeah, <code>simple_graph</code> is not an example for a class of props.</p>",
        "id": 247081231,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627141714
    },
    {
        "content": "<p><code>nontrivial</code> is an example</p>",
        "id": 247081299,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627141822
    },
    {
        "content": "<p>right, and it's a Prop, so you can use begin/end for that, but it would probably be wiser to use some structure constructor instead for example <code>âŸ¨begin ... endâŸ©</code></p>",
        "id": 247081342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627141922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20tactic.20failed/near/247081299\">said</a>:</p>\n<blockquote>\n<p><code>nontrivial</code> is an example</p>\n</blockquote>\n<p>Right but you wouldn't have gotten the original error about <code>Exists.dcases_on</code> if your goal was really a Prop. That's why I suggested the example was too minimized.</p>",
        "id": 247081388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627141953
    },
    {
        "content": "<p>Ah, I see, if the type of the structure is <code>:Prop</code> , the problem will not occur.</p>",
        "id": 247081668,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627142337
    },
    {
        "content": "<p>Exactly. <code>cases</code> and other related commands call the recursor for the structure in question, and if the structure only eliminates into <code>Prop</code> then you won't be able to use it in tactic mode if the goal isn't a Prop.</p>",
        "id": 247081779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627142429
    },
    {
        "content": "<p>I encountered this issue as I did not write <code>: Prop</code> is the structure declaration like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.quadratic_reciprocity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">struct1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prop1</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop2</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">F</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">struct1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">exist_p</span> <span class=\"o\">:=</span> <span class=\"n\">char_p.exists</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">exist_p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247081816,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627142481
    },
    {
        "content": "<p>For example <code>or.rec</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">or.rec</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">â†’</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">â†’</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">â†’</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">â†’</span> <span class=\"n\">a</span> <span class=\"bp\">âˆ¨</span> <span class=\"n\">b</span> <span class=\"bp\">â†’</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>and because <code>C : Prop</code> you won't be able to do cases on <code>h : a âˆ¨ b</code> if your goal is not a Prop.</p>",
        "id": 247081836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627142509
    },
    {
        "content": "<p>Yes, this <code>structure</code>/<code>class</code> defaulting to <code>Type</code> mistake is really easy to make.</p>",
        "id": 247081892,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627142554
    },
    {
        "content": "<p>One could argue that this is a bug in Lean. This sort of thing even makes its way into mathlib occasionally.</p>",
        "id": 247081929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627142617
    },
    {
        "content": "<p>technical sidenote but shouldn't singleton elimination kick in for <code>struct1</code>? or do I understand singleton elimination wrong</p>",
        "id": 247081987,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627142694
    },
    {
        "content": "<p>exists eliminates into Prop and this has nothing to do with subsingleton elimination. Lean cannot solve for C and that's the end of it, so the <code>cases</code> tactic doesn't work.</p>",
        "id": 247082007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627142738
    },
    {
        "content": "<p>As has already been observed, there are other ways around this, but they use other tactics.</p>",
        "id": 247082060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627142791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  Could you show how to use <code>classical.some</code> or <code>classical.some_spec</code> in the very first example?</p>",
        "id": 247082137,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627142892
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.quadratic_reciprocity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">exist_p</span> <span class=\"o\">:=</span> <span class=\"n\">char_p.exists</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some_spec</span> <span class=\"n\">exist_p</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- hp: char_p F (classical.some exist_p)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247082227,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627143043
    }
]