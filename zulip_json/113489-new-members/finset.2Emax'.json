[
    {
        "content": "<p>Given <code>import data.finset</code> and <code>variables (α β : Type) [decidable_linear_order β] (f : α → β) (s : finset α) (h : s.nonempty)</code><br>\nis there an easier way to write <code>finset.max' (s.image f) (finset.nonempty.image h f)</code>?</p>",
        "id": 206137720,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1596719180
    },
    {
        "content": "<p>Could <code>max'</code> be defined on <code>multiset</code> instead? and then simply lifted to <code>finset</code>?</p>",
        "id": 206138073,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1596719384
    },
    {
        "content": "<blockquote>\n<p>is there an easier way to write <code>finset.max' (s.image f) (finset.nonempty.image h f)</code>?</p>\n</blockquote>\n<p>Not really (currently), other than the shortening <code>(s.image f).max' (h.image f)</code>.</p>\n<blockquote>\n<p>Could <code>max'</code> be defined on <code>multiset</code> instead? and then simply lifted to <code>finset</code>?</p>\n</blockquote>\n<p>That would be possible. Would that help you though?</p>",
        "id": 206277287,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596817149
    },
    {
        "content": "<p>Thanks! What seemed awkward to me was having to compute the image, removing duplicates, before taking the max. If it were defined on multiset, I could write something like <code>(s.1.map f).max' (mem_map_of_mem' f h)</code> and avoid that step.</p>\n<p>For my purposes it would also be handy to have this work for <code>semilattice_sup</code> rather than <code>decidable_linear_order</code>. So I have been playing with defining a <code>sup'</code> which is to <code>sup</code> as <code>max'</code> is to <code>max</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">multiset</span>\n<span class=\"kn\">section</span> <span class=\"n\">sup&#39;</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sup_of_mem</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sup</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">some</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">le_sup</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_map_of_mem</span> <span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sup&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">some</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"err\">$</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sup_of_mem</span> <span class=\"n\">ha</span> <span class=\"k\">in</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_map_of_mem&#39;</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">sup&#39;</span>\n<span class=\"kn\">end</span> <span class=\"n\">multiset</span>\n</code></pre></div>\n\n\n<p>Now I have a choice. I could define <code>finset.sup'</code> using <code>multiset.sup'</code> like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n<span class=\"kn\">section</span> <span class=\"n\">sup&#39;</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sup&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sup&#39;</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem&#39;</span> <span class=\"n\">f</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sup&#39;_def</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sup&#39;</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sup&#39;</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem&#39;</span> <span class=\"n\">f</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">sup&#39;</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">max_min</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">max&#39;_eq_sup&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">sup&#39;</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">max_min</span>\n<span class=\"kn\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>\n\n\n<p>or I could define it using <code>finset.sup</code> like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n<span class=\"kn\">section</span> <span class=\"n\">sup&#39;</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sup_of_mem</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sup</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">le_sup</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sup&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sup_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hk</span> <span class=\"k\">in</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sup_def&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sup&#39;</span> <span class=\"n\">H</span> <span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">sup&#39;</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">sup&#39;</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">max_min</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">max&#39;_eq_sup&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">sup&#39;</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">max&#39;_eq_sup&#39;_id</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sup&#39;</span> <span class=\"n\">H</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">max_min</span>\n<span class=\"kn\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>",
        "id": 206314198,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1596837572
    },
    {
        "content": "<p>Basically by copying and pasting from <code>finset.max'</code>, I made a minimal API for <code>multiset.sup'</code> here <a href=\"https://github.com/leanprover-community/mathlib/compare/master...agjftucker:master#diff-38b2e2b9f83fc5c799388cc6931a902f\">https://github.com/leanprover-community/mathlib/compare/master...agjftucker:master#diff-38b2e2b9f83fc5c799388cc6931a902f</a>.<br>\nIt works for <code>semilattice_sup α</code>, unlike <code>finset.max'</code> which requires <code>decidable_linear_order</code> and, naturally, unlike <code>multiset.sup</code> or <code>finset.sup</code> which require <code>semilattice_sup_bot</code>. Moreover because it is in <code>multiset</code> rather than <code>finset</code> we can use <code>map</code> rather than <code>image</code> even when dealing with a function not provably injective, thus achieving the same goal without introducing a spurious computation.</p>",
        "id": 206495957,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1597084430
    },
    {
        "content": "<p>I claim that <code>multiset.sup'</code> is more general than <code>finset.max'</code> and also that it can act as a drop-in replacement. In my fork I have quite easily made the small number of changes required to get mathlib to typecheck with the definitions of<code>finset.max</code>, <code>min</code>, <code>max'</code> and <code>min'</code> removed. I think such a culling is at least worth thinking about because there is a <em>lot</em> going on in <code>finset</code> and often multiple ways of doing things. It hurts my head <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I have only adapted a fraction of the theorems from <code>finset.max'</code> so consider this no more than a proof of concept.</p>",
        "id": 206496154,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1597084520
    },
    {
        "content": "<p>hmm. in your world I have to do a coercion to my finset before getting the max out of it?</p>",
        "id": 206503455,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597088043
    },
    {
        "content": "<p>Well currently I think there is no coercion from <code>finset</code> to <code>multiset</code> so I have added a <code>.1</code> where necessary. It's a very small overhead, but to get rid of it one could either define that coercion (I guess?) or extend <code>sup'</code> to <code>finset</code> in one of the ways I outlined above.</p>",
        "id": 206509560,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1597091475
    },
    {
        "content": "<p>Ah, I think I understand now. You've proven theorems that are more general than the old theorems about <code>finset.max</code>.</p>",
        "id": 206519118,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597097097
    },
    {
        "content": "<p>Instead of \"using <code>multiset.sup</code> as a drop-in replacement for <code>finset.max</code>\", you should replace the proofs of the finset.max theorems with applications of the multiset.sup theorems.</p>",
        "id": 206519325,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597097280
    },
    {
        "content": "<p>one could probably write a metaprogram to generate parts of the finset API from parts of the multiset API.</p>",
        "id": 206519459,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597097395
    },
    {
        "content": "<p>Then you would be left with  a bunch of <code>max</code> definitions and theorems requiring <code>decidable_linear_order</code> when <code>semilattice_sup</code> would suffice. I thought that's what typeclass inference was for?</p>",
        "id": 206531155,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1597107875
    },
    {
        "content": "<p>To give you the second from the first automatically</p>",
        "id": 206531758,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1597108657
    },
    {
        "content": "<p>You could weaken the typeclass argument for finset.max without renaming it</p>",
        "id": 206551735,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597134917
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206561279,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1597142843
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206561491,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1597143016
    }
]