[
    {
        "content": "<p>I get the following type mismatch when I try this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">ground</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"n\">ctx</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">∈</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.eqn_compiler.elim_match</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subst</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">τ</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">auxiliary</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">subst._main'</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">ᾰ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">τ</span><span class=\"o\">),</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">ᾰ_ᾰ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 235871255,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1619195934
    },
    {
        "content": "<p>On the other hand, when I look at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I get the state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">subst</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">τ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">τ</span><span class=\"o\">,</span>\n<span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">,</span>\n<span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n<span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">τ</span> <span class=\"bp\">∈</span> <span class=\"n\">τ</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">τ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">τ</span>\n</code></pre></div>\n<p>which shows the type of <code>s</code> as being precisely the right type. So my question is, why is the mismatch happening here?</p>",
        "id": 235871503,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1619196027
    }
]