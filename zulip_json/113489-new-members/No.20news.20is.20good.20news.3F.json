[
    {
        "content": "<p>Kia ora! If Lean doesn't tell me off, then is my proof correct? I put the following (part of an answer to one of the TPiL4) in and Lean doesn't have any red anywhere. So I presume it is happy. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- This abstraction is for the implication</span>\n    <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"c1\">-- This abstraction is the ∀ abstraction</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"c1\">-- This abstraction is the ∀ abstraction</span>\n\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">And.intro</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I am used to the \"proof complete\" note from the Natural Number Game. So I am just wondering how I know when lean is happy? </p>\n<p>Thanks :)</p>",
        "id": 308505525,
        "sender_full_name": "Robert Culling",
        "timestamp": 1667872155
    },
    {
        "content": "<p>\"proof complete\" only appears when you are in tactic mode. As you are currently using proof terms, there won't be such a message. But if there are no error messages, then lean should be happy.</p>",
        "id": 308505759,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667872329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>  Thank you, Andrew. I see tactics is the next chapter, so I'll be onto that soon.</p>",
        "id": 308506311,
        "sender_full_name": "Robert Culling",
        "timestamp": 1667872814
    },
    {
        "content": "<p>This is lean 4, right? What happens if you put your cursor just to the right of the last character in the proof?</p>",
        "id": 308534410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667894535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> \"No info found\" in VS Code</p>",
        "id": 308541178,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667897632
    },
    {
        "content": "<p>If anyone want's their well-deserved \"goals accomplished\", you can artificially go into tactic mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- This abstraction is for the implication</span>\n    <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"c1\">-- This abstraction is the ∀ abstraction</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"c1\">-- This abstraction is the ∀ abstraction</span>\n\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">And.intro</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 308541323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667897685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  I know I will get to it in TPiL4, but can you please tell me how to artificially go into tactic mode?</p>",
        "id": 308876439,
        "sender_full_name": "Robert Culling",
        "timestamp": 1668029051
    },
    {
        "content": "<p>The <code>by exact</code> right after the <code>:=</code> in <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s example</p>",
        "id": 308877686,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668029559
    },
    {
        "content": "<p>It takes your term mode solution that typechecks and makes it a tactics mode exact solution that \"tada\"s.</p>",
        "id": 308879237,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668030146
    },
    {
        "content": "<p>Does the \"exact\" in \"by exact\" just prove the goal for me? It seems to me if I comment out my proof and just write \"by exact\", then Lean is still happy that all goals are accomplished. It gives me the party emoji - but not for my proof. </p>\n<p>Is there a way to get the party, goals accomplished, emoji for my proof? This one, for example. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.mp</span> <span class=\"n\">x</span>\n    <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.mpr</span> <span class=\"n\">x</span>\n    <span class=\"k\">have</span> <span class=\"n\">wnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">wp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"n\">wp</span>\n        <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">w</span> <span class=\"n\">wp</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">wnnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">np</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">z</span> <span class=\"n\">np</span>\n        <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">np</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n    <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">wnnp</span> <span class=\"n\">wnp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In answer to <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s comment above: if my cursor is next to the last character of the proof, the information window reads \"No info found.\"</p>",
        "id": 312977694,
        "sender_full_name": "Robert Culling",
        "timestamp": 1669777277
    },
    {
        "content": "<p>I'm not really familiar with lean 4 but writing <code>by exact</code> without a term won't just prove the goal, it generates an error but the error is hard to see because it appears a few lines below the proof.<br>\nI'm not really sure if  you can get \"goals accomplished\" to appear outside of tactic mode, but if you write <code>by exact</code> and don't comment out your proof it shows \"goals accomplished\" at the end<br>\nI think you can also write <code>#print axioms mytheorem</code> to check your proof, which will also tell you if your proof relies on <code>sorry</code></p>",
        "id": 312983485,
        "sender_full_name": "Niels Voss",
        "timestamp": 1669781790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"521331\">@Niels Voss</span>  thank you I will try the print command you suggest</p>",
        "id": 313137737,
        "sender_full_name": "Robert Culling",
        "timestamp": 1669836463
    },
    {
        "content": "<p>You can always check if your code is being checked by typing something that's clearly wrong, like \"dfjdfhjb\"</p>",
        "id": 313200500,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1669867609
    }
]