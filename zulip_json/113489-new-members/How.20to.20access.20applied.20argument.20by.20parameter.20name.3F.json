[
    {
        "content": "<p>In Lean 4 if you have a function or data constructor with a bunch of arguments having already been applied, is there a way to get the arguments. Without pattern matching. <br>\nHere is an example of what I'd like to be able to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"o\">:=</span> <span class=\"c1\">-- ...some implementation...</span>\n\n <span class=\"kd\">def</span> <span class=\"n\">withArgs</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span>\n<span class=\"k\">#eval</span> <span class=\"n\">withArgs.b</span>   <span class=\"c1\">-- 2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">withArgs.c</span>   <span class=\"c1\">-- 3</span>\n</code></pre></div>\n<p>I know the dot notation only works for structures. But is there other syntax that allows on to get the value that has been previously applied to a function or constructor? I know you can use pattern matching to do this but it would often be convenient to just use the name of the argument.</p>",
        "id": 298349626,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662977049
    },
    {
        "content": "<p>I doubt that this is possible. How would you even do this with pattern matching? Don't you need <code>f</code> to be a constructor of an inductive type for pattern matching?</p>",
        "id": 298350653,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662977334
    },
    {
        "content": "<p>Ok, assume that f is an constructor for an inductive type. Is there a way to access the arguments?</p>",
        "id": 298351006,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662977438
    },
    {
        "content": "<p>I don't think so, that is what structures are for. They are an inductive data type with a single constructor with all these projections defined automatically.</p>",
        "id": 298351334,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662977550
    },
    {
        "content": "<p>So then is there a way to easy transform a constructed value of an inductive type into a structure so you can access the fields? </p>\n<p>Also, related to this, when defining inductive type constructors I've have difficulty using pattern matching inside the constructor definition. I can't figure out the syntax for it. I guess that is really what is motivating the question.</p>\n<p>But also it would be nice to avoid the repetitiveness of having to write out the same pattern matching over and over in each constructor.</p>",
        "id": 298351533,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662977633
    },
    {
        "content": "<p>Can you give an example of what are you trying to do?</p>",
        "id": 298351819,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662977744
    },
    {
        "content": "<p>Well you can bundle all the parameters of a constructor to a structure. Would that help?</p>",
        "id": 298352137,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662977883
    },
    {
        "content": "<p>The constructor would accept only the structure.</p>",
        "id": 298352255,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662977926
    },
    {
        "content": "<p>Ahh the example is the other question you asked, right?</p>",
        "id": 298352568,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662978087
    },
    {
        "content": "<p>Ok, here is an example which doesn't work. I want to get the last argument applied to C1 inside C2. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"n\">C1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 298352631,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662978121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20access.20applied.20argument.20by.20parameter.20name.3F/near/298352137\">said</a>:</p>\n<blockquote>\n<p>Well you can bundle all the parameters of a constructor to a structure. Would that help?</p>\n</blockquote>\n<p>Yes, that would help. How do you do that?</p>",
        "id": 298352711,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662978145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20access.20applied.20argument.20by.20parameter.20name.3F/near/298352568\">said</a>:</p>\n<blockquote>\n<p>Ahh the example is the other question you asked, right?</p>\n</blockquote>\n<p>It is one possible solution to the <a href=\"#narrow/stream/113489-new-members/topic/Local.20definitions.20in.20mutual.20inductive.20type.20block\">other question I asked</a>. Although in that specific case I'd still prefer to do it with a local function definition so I can have a consistent interface between the different constructors of <code>Morph</code> and <code>Constraint</code>.</p>",
        "id": 298352864,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662978242
    },
    {
        "content": "<p>Not sure if I follow,  is the type of <code>C2</code> this <code>Foo 0 -&gt; Foo d</code>(what ever <code>d</code> is`)?</p>",
        "id": 298353510,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662978494
    },
    {
        "content": "<p>What would <code>C2 (C2 (C1 1 2 3 0))</code> be?</p>",
        "id": 298353649,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662978544
    },
    {
        "content": "<p>This example, is silly, but here the type of <code>C2</code> would be <code>(Foo n) -&gt; Foo n</code>. It's not valid because we haven't matched all the patterns for each constructor. This part of what I don't know how to do. Here <code>d</code> is the last argument to C1, which is of type Nat. </p>\n<p>It isn't essential that <code>d</code> be used in the type of C2. It could be fed into a subsequent arguement. Here it is fed into a non-inductive function f, to produce a value of type Bar. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>  <span class=\"o\">:=</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"n\">C1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">):</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>Sorry if this doesn't make sense. I'm very new to Lean. I'm probably trying to impose patterns from other languages on it. If there is a more paradigmatic way to do it I'd be interested to learn what it is.</p>",
        "id": 298354243,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662978798
    },
    {
        "content": "<p>Still what is the type of <code>C2</code> in this example, it is unclear to me?</p>",
        "id": 298354531,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662978941
    },
    {
        "content": "<p>I guess in the modified example, the type of <code>C2</code> would be <code>Foo -&gt; Bar -&gt; Foo</code>.</p>",
        "id": 298354739,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662979024
    },
    {
        "content": "<p>I think it would be better to explain what are you trying to do and then we can figure out how to write it in Lean.</p>",
        "id": 298354740,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662979024
    },
    {
        "content": "<blockquote>\n<p>I guess in the modified example, the type of <code>C2</code> would be <code>Foo -&gt; Bar -&gt; Foo</code>.</p>\n</blockquote>\n<p>Than again, it is unclear what would <code>C2 (C2 (C1 1 2 3 4) bar1) bar2)</code> mean as the outer <code>C2</code> is not getting result of <code>C1</code> in its first argument thus you do not know what <code>d</code> is.</p>",
        "id": 298355088,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662979173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20access.20applied.20argument.20by.20parameter.20name.3F/near/298354740\">said</a>:</p>\n<blockquote>\n<p>I think it would be better to explain what are you trying to do and then we can figure out how to write it in Lean.</p>\n</blockquote>\n<p>I'm trying to write a constructor C that pattern matches on fields from other constructors and then uses those values to define subsequent fields and/or the type of C.</p>",
        "id": 298355108,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662979178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20access.20applied.20argument.20by.20parameter.20name.3F/near/298355088\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I guess in the modified example, the type of <code>C2</code> would be <code>Foo -&gt; Bar -&gt; Foo</code>.</p>\n</blockquote>\n<p>Than again, it is unclear what would <code>C2 (C2 (C1 1 2 3 4) bar1) bar2)</code> mean as the outer <code>C2</code> is not getting result of <code>C1</code> in its first argument thus you do not know what <code>d</code> is.</p>\n</blockquote>\n<p>Right, so then you'd want do have a default case for what to do if you don't match C1.</p>",
        "id": 298355266,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662979228
    },
    {
        "content": "<blockquote>\n<p>I'm trying to write a constructor C that pattern matches on fields from other constructors and then uses those values to define subsequent fields and/or the type of C.</p>\n</blockquote>\n<p>And you are trying to do this because you want to achieve what?</p>",
        "id": 298356104,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662979594
    },
    {
        "content": "<p>Something like this does not work for you?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Data</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">data.d</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 298356934,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1662979891
    },
    {
        "content": "<p>The short answer is that you can't do that, this is known as an <a href=\"https://ncatlab.org/nlab/show/inductive-inductive+type\">inductive-inductive type</a> and it goes beyond the axiomatic strength of lean. But I suspect, like <span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> says, that this simply isn't the problem you actually want to solve (<a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>) and a reformulation has a better chance of being solved</p>",
        "id": 298357279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662980003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20access.20applied.20argument.20by.20parameter.20name.3F/near/298357279\">said</a>:</p>\n<blockquote>\n<p>The short answer is that you can't do that, this is known as an <a href=\"https://ncatlab.org/nlab/show/inductive-inductive+type\">inductive-inductive type</a> and it goes beyond the axiomatic strength of lean. But I suspect, like <span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> says, that this simply isn't the problem you actually want to solve (<a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>) and a reformulation has a better chance of being solved</p>\n</blockquote>\n<p>Thank you this helps. So what I was trying to do isn't supported. I'll indeed need to find a work around. Are there any code examples for defining things like composition with equational constraints, e.g., for strict monoidal n-categories.</p>",
        "id": 298360409,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662981307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20access.20applied.20argument.20by.20parameter.20name.3F/near/298356934\">said</a>:</p>\n<blockquote>\n<p>Something like this does not work for you?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Data</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Data</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">data.d</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I will have a think and see if can rework it into this pattern. One issue is that in my actual use case, the structure Data would contain components with types that are defined recursively.</p>",
        "id": 298360768,
        "sender_full_name": "Avi Craimer",
        "timestamp": 1662981449
    },
    {
        "content": "<p>Could you give a MWE?</p>",
        "id": 298361991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662982020
    },
    {
        "content": "<p>I'm not even sure what you want the system to produce</p>",
        "id": 298362070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662982064
    }
]