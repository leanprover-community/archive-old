[
    {
        "content": "<p>Hello! I am new to Lean; I finished the natural number game and going through the tutorials, and I had a small question. To practice more, I'd like to try formalizing my solutions to some first year elementary number theory problem sets; the problem sets define the integers as an ordered ring obeying the well-ordering principle. I was wondering: is there any quick way of creating a Lean project, importing the ring axioms, and declaring 'Z' to be an ordered ring with the well-ordering principle? I'm guessing that Z the ring is probably defined somewhere in mathlib, but I'd like to try following the problem sets I'm formalizing as closely as possible, and hence copy their definition of Z. It feels like a sort of silly question, but all the exercises I've done so far for Lean have been about proving things about types that were already defined, and so I'm not entirely sure how to define my own integer type. Thanks for anyone who can help!</p>",
        "id": 289385944,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657660185
    },
    {
        "content": "<p>I don't know if this is helpful, but the definition is here: <a href=\"https://github.com/leanprover-community/lean/blob/9d5adc6ab80d02bb2a0fd39a786aaeb1efd6fb01/library/init/data/int/basic.lean#L15\">https://github.com/leanprover-community/lean/blob/9d5adc6ab80d02bb2a0fd39a786aaeb1efd6fb01/library/init/data/int/basic.lean#L15</a></p>",
        "id": 289386339,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1657660396
    },
    {
        "content": "<p>Thanks, Mark! I think they give an inductive definition of natural numbers, and then go on to define integers, but I was wondering if there was a quick way to declare a type 'Z' with two binary operations +, * obeying the usual ring axioms, etc.</p>",
        "id": 289387753,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657661181
    },
    {
        "content": "<p>If all you want is the ring operations and you don't care about the order, then <br>\n<code>variables (myZ : Type) [comm_ring myZ]</code></p>",
        "id": 289388535,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1657661589
    },
    {
        "content": "<p>Thanks Bolton! I think I will go with this approach, but one more question: if I define <code>variables (myZ : Type) [ordered_ring myZ]</code>, how can I assert that myZ obeys the well-ordering principle? At the moment the only thought I have is to make it a theorem and say 'sorry,' but I'm guessing that's not how one adds axioms...</p>",
        "id": 289390423,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657662721
    },
    {
        "content": "<p>The principle is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order\">docs#conditionally_complete_linear_order</a></p>",
        "id": 289391440,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657663276
    },
    {
        "content": "<p>And lo, a proof that the Lean ints are so: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.conditionally_complete_linear_order\">docs#int.conditionally_complete_linear_order</a></p>",
        "id": 289391549,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657663334
    },
    {
        "content": "<p>in theory you could do <code>variables (myZ : Type*) [ordered_ring myZ] [wo : is_well_order myZ (&lt;)]</code> but it seems like that may be _too_ minimal</p>",
        "id": 289392515,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657663957
    },
    {
        "content": "<blockquote>\n<p>I'm guessing that's not how one adds axioms</p>\n</blockquote>\n<p>You can add axioms using the <code>axiom</code> keyword, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">well_ordered</span> <span class=\"o\">:</span> <span class=\"n\">is_well_order</span> <span class=\"n\">myZ</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289392868,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657664201
    },
    {
        "content": "<p>Thank you all for the suggestions! I think I've gotten things set up the way I wanted. It was very helpful!</p>",
        "id": 289396238,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657666584
    },
    {
        "content": "<p>Do you intend Z to be the integers (ℤ) or the natural numbers (ℕ)? If the former, it's not well-ordered under (&lt;); if the latter, it's not a comm_ring, only a comm_semiring.</p>",
        "id": 289399052,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657668743
    },
    {
        "content": "<p>Ah, Junyan, I was using 'well-ordered' to mean that every bounded below set has a least element, but I realize that's probably not how Lean uses it! Luckily I noticed that while formalizing, but thanks for mentioning it! (Thus I went with Yakov's suggestion.)</p>",
        "id": 289402417,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657671779
    },
    {
        "content": "<p>Sorry, one last worry I was having. I wanted to try cleaning up my terms, so I created a definition <code>definition minimum_of (S : set integers) (m : integers) := (m ∈ S) /\\ (forall s : integers, s ∈ S -&gt; m &lt;= s) </code> and then wanted to change my well ordering principle axiom to <code>axiom wop (S : set integers) :\n (∀ s : integers, s ∈ S -&gt; 0 &lt;= s) -&gt; (exists a : integers, minimum_of S a)</code> However, it seems that Lean does not like me asserting <code>minimum_of S a</code> -- it seems OK when I say <code>(hx : minimum_of S a) :  [some proposition]</code> but it is scared to have <code>minimum_of S a</code> be implied by something. Am I doing something wrong? How should I write this?</p>",
        "id": 289404875,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657674221
    },
    {
        "content": "<p>Can you post either or both of fully working code in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and the precise error you get? The exact error tells you important stuff! Right now my Lean can't get past <code>integers</code>.</p>",
        "id": 289408815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657678893
    },
    {
        "content": "<p>Sure!</p>",
        "id": 289447048,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657713396
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">integers</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_comm_ring</span> <span class=\"n\">integers</span><span class=\"o\">]</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">minimum_of</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">integers</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">integers</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">/\\</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">integers</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">wop</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">integers</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">integers</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">exists</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">integers</span><span class=\"o\">,</span> <span class=\"n\">minimum_of</span> <span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289447101,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657713430
    },
    {
        "content": "<p>Here is the relevant portion of code--I would like to declare the well-ordering principle as an axiom</p>",
        "id": 289447141,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657713454
    },
    {
        "content": "<p>I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ailed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">integers</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_ring</span> <span class=\"n\">integers</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">integers</span><span class=\"o\">,</span>\n<span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">integers</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">integers</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ordered_comm_ring</span> <span class=\"bp\">↥</span><span class=\"n\">S</span>\n<span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">60</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">minimum_of</span> <span class=\"bp\">↥</span><span class=\"n\">S</span> <span class=\"n\">a</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">integers</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"bp\">↥</span><span class=\"n\">S</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">laptop</span><span class=\"bp\">-</span><span class=\"n\">yp</span><span class=\"bp\">/</span><span class=\"n\">ross_lean</span><span class=\"bp\">/</span><span class=\"n\">ross_lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"n\">minimum_of</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 289447165,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657713472
    },
    {
        "content": "<p>At the moment I have just being using Lean's built-in <code>\\Z</code> to formalize the sets, but I'm imagining this problem reflects some misunderstanding on my end of how propositions work in Lean, so hopefully someone can set me straight if anyone realizes the problem quickly.</p>",
        "id": 289447408,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657713554
    },
    {
        "content": "<p>Needs to be <code>minimum_of integers S a</code></p>",
        "id": 289447427,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657713563
    },
    {
        "content": "<p>The error is about not passing an explicit argument</p>",
        "id": 289447534,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657713607
    },
    {
        "content": "<p>(which you declared in the variables statement)</p>",
        "id": 289447610,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657713642
    },
    {
        "content": "<p>Thank you so much, Ruben!</p>",
        "id": 289447636,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657713661
    },
    {
        "content": "<p>Changing that works!</p>",
        "id": 289447713,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657713714
    },
    {
        "content": "<p>My pleasure, it's nice to see someone with a simple enough issue that I can solve it every once in a while :)</p>",
        "id": 289448029,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1657713873
    },
    {
        "content": "<p>Also, the benefit to finally formalizing my well-ordering principle instead of using the Lean integers, is that I realize my well-ordering axiom is false as stated since I didn't posit my set be non-empty!</p>",
        "id": 289448588,
        "sender_full_name": "Michael Barz",
        "timestamp": 1657714125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247360\">Michael Barz</span> <a href=\"#narrow/stream/113489-new-members/topic/Creating.20the.20natural.20numbers/near/289447636\">said</a>:</p>\n<blockquote>\n<p>Thank you so much, Ruben!</p>\n</blockquote>\n<p>Note that your original question got no helpful responses other than \"ask a better question\" and your good question was answered within two minutes. There is a moral there -- not just for you! There is an art to asking good questions and the sooner someone learns it the quicker that person can learn :-)</p>",
        "id": 289462240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657720438
    }
]