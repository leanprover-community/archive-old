[
    {
        "content": "<p>Hello,</p>\n<p>I was messing around with <code>suggest</code> just now and I found that <code>zero_max</code> in <code>data.nat.basic</code> can be proved by <code>rfl</code>, i.e. the following code works for me:</p>\n<div class=\"codehilite\"><pre><span></span>lemma zero_max {m : nat} : max 0 m = m := rfl\n</pre></div>\n\n\n<p>But the proof of this lemma in my version of mathlib is</p>\n<div class=\"codehilite\"><pre><span></span>lemma zero_max {m : nat} : max 0 m = m :=\nmax_eq_right (zero_le _)\n</pre></div>\n\n\n<p>Should this be changed?</p>",
        "id": 178819700,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1571801447
    },
    {
        "content": "<p>yes</p>",
        "id": 178819812,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571801654
    },
    {
        "content": "<p>no</p>",
        "id": 178820255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571802552
    },
    {
        "content": "<p>refl proofs are more brittle. This adds an unneeded dependence on the fact that the decidable instance of <code>0 &lt;= m</code> reduces to true, as well as the fact that the definition of <code>max a b</code> is <code>if a &lt;= b then b else a</code> instead of <code>if b &lt;= a then a else b</code></p>",
        "id": 178820379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571802736
    },
    {
        "content": "<p>the given proof is insensitive to such details</p>",
        "id": 178820382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571802758
    },
    {
        "content": "<p>Oh... so <code>rfl</code> isn't always the best possible proof? That's really weird.</p>",
        "id": 178900295,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1571867392
    },
    {
        "content": "<p>another example of a theorem that can be proven by rfl but really shouldn't is <code>100 * 100 = 10000</code></p>",
        "id": 178901696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571868657
    },
    {
        "content": "<p>Is the reason that tactics can use binary reprs while kernel does unary, or something else?</p>",
        "id": 178903753,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1571870553
    },
    {
        "content": "<p>yes</p>",
        "id": 178905173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571871761
    },
    {
        "content": "<p>the kernel is forced to use the definition of <code>nat</code>, which is unary and horrible for computation</p>",
        "id": 178905200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571871792
    },
    {
        "content": "<p>I'm starting to come around to the idea that <code>rfl</code> is the worst possible proof. It's the ultimate \"Mathematician A: the proof is obvious. Mathematician B [several hours later]: yes, it is obvious.\"</p>",
        "id": 178913029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571880616
    },
    {
        "content": "<p>It says: well, if you go an unfold definitions, possibly all the way down to the beginnings, you will eventually see that these two things really are the same thing. No one likes to do that, and quite reasonably the kernel sometimes does a terrible job at it.</p>",
        "id": 178913053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571880685
    },
    {
        "content": "<p>I'm not convinced this is true in general. One can construct efficient decision procedures, in which case a proof by <code>rfl</code> does not have to carry out a long computation.</p>",
        "id": 178968733,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1571933654
    },
    {
        "content": "<p>There are proofs where <code>rfl</code> is the appropriate way to prove it. <code>dec_trivial</code> is like this, in that you are expected to be able to reduce a term of type <code>decidable p</code> to one of its constructors</p>",
        "id": 178975451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571937787
    },
    {
        "content": "<p>that doesn't mean it's the fastest proof though</p>",
        "id": 178975465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571937801
    },
    {
        "content": "<p>kernel reductions are constrained by a certain approach to the problem that relies on the definition of the inductive types. You have to really write things carefully if you want kernel reduction to not suck. Even using the equation compiler isn't a great idea because it generates huge terms that slow down reduction</p>",
        "id": 178975707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571937915
    },
    {
        "content": "<p>Is there a way to prove <code>100*100 = 10000</code> using binary instead of unary?</p>",
        "id": 179092082,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572040205
    },
    {
        "content": "<p><code>by norm_num</code></p>",
        "id": 179092907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572041026
    }
]