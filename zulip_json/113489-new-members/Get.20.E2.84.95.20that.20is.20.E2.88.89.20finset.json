[
    {
        "content": "<p>Given <code>f : finset ℕ</code>, how can one obtain an <code>x : ℕ</code> with <code>x ∉ f</code>?<br>\nSince <code>f</code> is finite, there must exists such an <code>x</code>, but I'm struggling to obtain one.<br>\nMy idea would be to get the maximal element <code>m</code> in <code>f</code> and then set <code>x := m + 1</code>. One could then prove that all elements in <code>f</code> have the property of being less than <code>m</code>, and since <code>x</code> does not, it can't be an element in <code>f</code>.<br>\nBut this seems pretty contrived to me.<br>\nIs there an easier way, that I'm overlooking?</p>",
        "id": 228584746,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614775544
    },
    {
        "content": "<p>Well, you'll have to use that <code>nat</code> is infinite.</p>",
        "id": 228584878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614775605
    },
    {
        "content": "<p>That's in <code>data.fintype.basic</code></p>",
        "id": 228585048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614775683
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.not_mem_range_self\">docs#finset.not_mem_range_self</a></p>",
        "id": 228585116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614775711
    },
    {
        "content": "<p>together with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.subset_range_sup_succ\">docs#finset.subset_range_sup_succ</a></p>",
        "id": 228585235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614775791
    },
    {
        "content": "<p>That should be a theorem about <code>infinite</code></p>",
        "id": 228586194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614776278
    },
    {
        "content": "<p>And it already exists: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infinite.exists_not_mem_finset\">docs#infinite.exists_not_mem_finset</a></p>",
        "id": 228586386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614776352
    },
    {
        "content": "<p>Ah dang it, I was almost done with the lemma :D</p>",
        "id": 228586432,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614776380
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 228586441,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614776388
    },
    {
        "content": "<p>It's pretty easy to prove by contrapositive, since otherwise <code>f</code> enumerates the type</p>",
        "id": 228586532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614776415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Get.20.E2.84.95.20that.20is.20.E2.88.89.20finset/near/228586532\">said</a>:</p>\n<blockquote>\n<p>It's pretty easy to prove by contrapositive, since otherwise <code>f</code> enumerates the type</p>\n</blockquote>\n<p>How would one prove that kind of thing?</p>",
        "id": 228586679,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614776474
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_not_mem_finset</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">not_forall.1</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_fintype</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 228586691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614776482
    },
    {
        "content": "<p><code>not_forall</code> is proving exists by contradiction, <code>not_fintype</code> is the definition of <code>infinite</code>, and the \"meat\" of the proof is literally the constructor for <code>fintype</code>, hence <code>⟨s, h⟩</code></p>",
        "id": 228586864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614776557
    },
    {
        "content": "<p>I have much to learn :D</p>",
        "id": 228587051,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614776644
    },
    {
        "content": "<p>That's what we call a proof that's not optimized for reading :)</p>\n<p>The thing I still missed after the explanation is that <code>fintype</code> is defined as \"there's a finset (<code>s</code>) that contains all the values of the type (<code>h</code>)\"</p>",
        "id": 228587742,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1614776951
    },
    {
        "content": "<p>I prefer the term \"slick proof\" :)</p>",
        "id": 228587842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614777002
    },
    {
        "content": "<p>The thing I like about slick proofs is that they are perfect for situations where the statement you're proving is mathematically trivial, because they say \"yes, our system and our library makes this a triviality just as it should be\", and furthermore it doesn't matter if the proof is obfuscated because the result is trivial so you will not learn anything mathematically from the proof anyway, hence it doesn't need to be read</p>",
        "id": 228589411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614777678
    }
]