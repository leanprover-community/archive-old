[
    {
        "content": "<p>I've tried to play with matrices, but apparently Lean does not know what a power of a matrix is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"n\">m</span>\n</code></pre></div>\n<p>Apparently, there is no instance of monoid (or ring, or probably many other things) for finite square matrices. How do I plug this gap?</p>",
        "id": 270906965,
        "sender_full_name": "Damien Thomine",
        "timestamp": 1644175599
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.ring\">docs#matrix.ring</a> so possibly all you need is to asssume <code>[decidable_eq n]</code> or run <code>open_locale classical</code> (both untested)</p>",
        "id": 270907424,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644176186
    },
    {
        "content": "<p>Right, you need to be able to decide equality of <code>n</code> to populate the diagonal of the identity matrix</p>",
        "id": 270914525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644185074
    },
    {
        "content": "<p>Thank you both, that fixed both problems (apply_instance does not work, but an explicit appeal to matrix.ring does, and the check also works).</p>",
        "id": 271067053,
        "sender_full_name": "Damien Thomine",
        "timestamp": 1644282146
    },
    {
        "content": "<p>There shouldn't be a comma after <code>apply_instance</code> is the only issue I see</p>",
        "id": 271067227,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644282282
    },
    {
        "content": "<p>This works without warnings/errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"n\">m</span>\n</code></pre></div>",
        "id": 271067293,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644282328
    }
]