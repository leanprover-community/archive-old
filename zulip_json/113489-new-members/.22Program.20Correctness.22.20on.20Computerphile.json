[
    {
        "content": "<p>Hey lean community :) Thanks for all your help over the last few weeks while I've been toying around with Lean+mathlib. Having a ton of fun while sitting inside.</p>\n<p>Wanted to share a fun little program I wrote inspired by Computerphile's latest video on \"Program Correctness\" <a href=\"https://www.youtube.com/watch?v=T_IINWzQhow\">https://www.youtube.com/watch?v=T_IINWzQhow</a>. They left a little to be desired in that they ended up using Quickcheck instead of formal methods, but I dusted off my IDE to work out a lil proof of the compiler mentioned in the video and wanted to share it: <a href=\"https://github.com/jdan/compiler.lean\">https://github.com/jdan/compiler.lean</a> Cheers</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"T_IINWzQhow\" href=\"https://www.youtube.com/watch?v=T_IINWzQhow\"><img src=\"https://i.ytimg.com/vi/T_IINWzQhow/default.jpg\"></a></div>",
        "id": 218215753,
        "sender_full_name": "Jordan Scales",
        "timestamp": 1606661306
    },
    {
        "content": "<p>If you tag <code>eval</code>, <code>exec</code> and <code>compile</code> with <code>@[simp]</code>, e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- evaluate an expression directly -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>(note also I changed <code>/-</code> to <code>/--</code>, to give the definition a docstring) then your proof of <code>exec_compile_concat</code> could be this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- compiled expressions only add to the stack when `exec`d -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">exec_compile_concat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"n\">instrs</span> <span class=\"n\">stack</span><span class=\"o\">,</span>\n  <span class=\"n\">exec</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">instrs</span><span class=\"o\">)</span> <span class=\"n\">stack</span> <span class=\"bp\">=</span> <span class=\"n\">exec</span> <span class=\"n\">instrs</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">stack</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">iha</span> <span class=\"n\">ihb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">iha</span><span class=\"o\">,</span> <span class=\"n\">ihb</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218216018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606661767
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- exec (compile e) = eval e -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eval_eq_exec_compile</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">exec</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">eval</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">exec_compile_concat</span> <span class=\"n\">e</span> <span class=\"o\">[]</span> <span class=\"o\">[],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218216041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606661846
    },
    {
        "content": "<p>Moving <code>e</code> to the left of the colon saves you an <code>intro</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- compiled expressions only add to the stack when `exec`d -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">exec_compile_concat</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">instrs</span> <span class=\"n\">stack</span><span class=\"o\">,</span>\n  <span class=\"n\">exec</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">instrs</span><span class=\"o\">)</span> <span class=\"n\">stack</span> <span class=\"bp\">=</span> <span class=\"n\">exec</span> <span class=\"n\">instrs</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">stack</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">iha</span> <span class=\"n\">ihb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">iha</span><span class=\"o\">,</span> <span class=\"n\">ihb</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">],</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- exec (compile e) = eval e -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eval_eq_exec_compile</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exec</span> <span class=\"o\">(</span><span class=\"n\">compile</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">eval</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">exec_compile_concat</span> <span class=\"n\">e</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 218216181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606662068
    },
    {
        "content": "<p>I had posted this in the comments, but I put a link in so it probably doesn't show:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">Val</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"kn\">open</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Op</span> <span class=\"bp\">|</span> <span class=\"n\">PUSH</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">ADD</span>\n<span class=\"kn\">open</span> <span class=\"n\">Op</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">Op</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">PUSH</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">comp</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">ADD</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exec</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Op</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">PUSH</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">exec</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ADD</span> <span class=\"o\">::</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">::</span><span class=\"n\">n</span><span class=\"o\">::</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">exec</span> <span class=\"n\">c</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">comp_correct'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">exec</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"n\">s₂</span> <span class=\"bp\">=</span> <span class=\"n\">exec</span> <span class=\"n\">s₁</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">s₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"bp\">*</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">comp_correct</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exec</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">eval</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">exec</span> <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"o\">[])</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"n\">exec</span> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"n\">eval</span> <span class=\"n\">e</span><span class=\"o\">],</span>\n<span class=\"k\">from</span> <span class=\"n\">comp_correct'</span> <span class=\"n\">e</span> <span class=\"o\">[]</span> <span class=\"o\">[],</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 218217170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606663766
    },
    {
        "content": "<p>Wow these are super helpful pointers, thank you :)</p>",
        "id": 218220033,
        "sender_full_name": "Jordan Scales",
        "timestamp": 1606668703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  I've never seen pattern matching in a theorem! But I like how this reads, where can I learn more about this syntax?</p>",
        "id": 218220356,
        "sender_full_name": "Jordan Scales",
        "timestamp": 1606669271
    },
    {
        "content": "<p>It's just the same as pattern matching to make regular values. Perhaps the \"dependent pattern matching\" section of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching\">TPIL</a> will help</p>",
        "id": 218220444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606669412
    },
    {
        "content": "<p>You might be interested in <span class=\"user-mention\" data-user-id=\"315830\">@Xi Wang</span>'s formalization of an arithmetic compiler (to a register machine) in mathlib's <code>archive/</code> <a href=\"https://github.com/leanprover-community/mathlib/blob/master/archive/arithcc.lean\">here</a>.</p>",
        "id": 218221478,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606671161
    },
    {
        "content": "<p>Awesome - thanks for sharing</p>",
        "id": 218221836,
        "sender_full_name": "Jordan Scales",
        "timestamp": 1606671830
    },
    {
        "content": "<p>Thе рrogram has small error. Hint: try to add substraction expression.</p>",
        "id": 219413576,
        "sender_full_name": "Дмитрий Лейкин",
        "timestamp": 1607555660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364458\">@Дмитрий Лейкин</span> Which program? (There are a few mentioned in this thread.)</p>",
        "id": 219413986,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607555942
    },
    {
        "content": "<p>@[simp] def compile : Expr -&gt; list Instr<br>\n| (Val n) := [PUSH n]<br>\n| (Add a b) := compile a ++ compile b ++ [ADD]</p>\n<p>@[simp] def exec : list Instr -&gt; list ℕ -&gt; list ℕ<br>\n| ((PUSH n) :: rest) s := exec rest (n :: s)<br>\n| (ADD :: rest) (a :: b :: s) := exec rest ((a + b) :: s)<br>\n| _ s := s<br>\nFor substraction maybe it must be <br>\n| (Substract a b) := compile b ++ compile a ++ [SUBSTRACT]<br>\nor maybe in exec must be b - a (not a- b). Now it works incidentally because + operation is commutative.</p>",
        "id": 219482502,
        "sender_full_name": "Дмитрий Лейкин",
        "timestamp": 1607612114
    }
]