[
    {
        "content": "<p>I have defined an intermediate field generated by a few elements like so: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">intermediate_field_generated_by</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n  <span class=\"n\">subfield.to_intermediate_field</span> <span class=\"o\">(</span><span class=\"n\">subfield.closure</span> <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"bp\">∪</span> <span class=\"n\">set.range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subfield.subset_closure</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>How can I use this to just extract the datum of the F-algebra (F is the small field here)? If I attempt to def something taking values in <code>algebra F</code> it does not work (and I see why from the definition of the structure <code>algebra</code>. Is there a structure that is adapted to this situation? Thanks!</p>",
        "id": 228079537,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614456167
    },
    {
        "content": "<p>Could you use <code>intermediate_field.adjoin</code> together with <code>intermediate_field.to_subalgebra</code>?</p>",
        "id": 228079583,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614456222
    },
    {
        "content": "<p>This gives you an <code>F</code>-subalgebra of <code>L</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">intermediate_field_generated_by</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">generators</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">F</span> <span class=\"n\">generators</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_subalgebra</span>\n</code></pre></div>",
        "id": 228079668,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614456345
    },
    {
        "content": "<p>Thanks, yes, this works! (I should check the mathlib more thoroughly!)</p>",
        "id": 228079673,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614456356
    },
    {
        "content": "<p>Great, although what exactly do you want when you say that you want the datum of the F-algebra?</p>",
        "id": 228079730,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614456382
    },
    {
        "content": "<p>Technically, <code>intermediate_field.adjoin F generators</code> is already an <code>F</code>-algebra</p>",
        "id": 228079738,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614456402
    },
    {
        "content": "<p>(meaning that there is an instance <code>[algebra F (intermediate_field.adjoin F generators)]</code>)</p>",
        "id": 228079759,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614456436
    },
    {
        "content": "<p>I want to apply it to prove statements such as <a href=\"https://stacks.math.columbia.edu/tag/09HC\">https://stacks.math.columbia.edu/tag/09HC</a>, so I need to adjoin elements. I was not aware that this structure is already there in mathlib.</p>",
        "id": 228079769,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614456471
    },
    {
        "content": "<p>I see. If you're doing stuff with separable extensions, you should be aware that the primitive element theorem is in mathlib, which can sometimes be used to avoid nasty induction arguments.</p>",
        "id": 228079877,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1614456578
    },
    {
        "content": "<p>+1</p>",
        "id": 228080412,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614457064
    }
]