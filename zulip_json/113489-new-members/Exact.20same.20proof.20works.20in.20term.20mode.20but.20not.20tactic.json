[
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">DUH</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">two_pos</span>\n</pre></div>\n\n\n<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">DUH</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">abs_of_pos</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">two_pos</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">DUH</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">two_pos</span><span class=\"o\">)</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">DUH</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">abs_of_pos</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">two_pos</span><span class=\"o\">)</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">DUH</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">abs_of_pos</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">two_pos</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">DUH</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">two_pos</span><span class=\"o\">)</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Why? What's going on?</p>",
        "id": 147838170,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542395119
    },
    {
        "content": "<p>Oh, and this works: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">DUH</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">exact</span> <span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">two_pos</span><span class=\"o\">)</span> <span class=\"kn\">end</span>\n</pre></div>",
        "id": 147838350,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542395269
    },
    {
        "content": "<p>I can understand there may be some \"metavariables make things weird\" explanation for <code>exact</code> working where <code>apply</code> doesn't, but I really don't get why the two rewrites have different results.</p>",
        "id": 147838487,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542395393
    },
    {
        "content": "<p>This all about elaboration</p>",
        "id": 147839688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542396447
    },
    {
        "content": "<p>The elaborator needs to guess the type of 2 in 2 &gt; 0 (which is the statement of <code>two_pos</code>). When it tries to do that too early this fails</p>",
        "id": 147839772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542396493
    },
    {
        "content": "<p>You could probably save all attempts by type ascribing this two_pos using <code>(two_pos : (2 : R) &gt; 0)</code></p>",
        "id": 147839801,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542396537
    },
    {
        "content": "<p>Ah yes, it seems <code>apply @abs_of_pos ℝ _ 2 (two_pos)</code> works too.</p>",
        "id": 147839856,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542396599
    },
    {
        "content": "<p>But how does that explain <code>exact</code> working where <code>apply</code> doesn't?</p>",
        "id": 147839979,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542396671
    },
    {
        "content": "<p>apply needs to guess how many pis the result type has</p>",
        "id": 147840032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542396714
    },
    {
        "content": "<p><code>apply x</code> is basically the same as <code>refine x _ _ _</code> where the number of underscores depends on the type of <code>x</code></p>",
        "id": 147840095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542396749
    },
    {
        "content": "<p>This means that when elaborating <code>x</code> we don't know what type it is yet, while with <code>refine</code> or <code>exact</code> we know the type of <code>x</code> is the type of the goal</p>",
        "id": 147840125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542396789
    },
    {
        "content": "<p>That makes sense. Thanks.</p>",
        "id": 147840325,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1542396919
    }
]