[
    {
        "content": "<p>Sorry for my english.</p>\n<p>I've placed questions in code. What is going on? Can anybody explain me?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">subst</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subst₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">subst</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">P</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n\n  <span class=\"c1\">-- why₁?</span>\n  <span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- it&#39;s ok</span>\n  <span class=\"c1\">--have p a = eq (f a) (f a), from rfl, -- it&#39;s not ok</span>\n\n  <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n\n  <span class=\"c1\">-- why₂?</span>\n  <span class=\"k\">have</span> <span class=\"bp\">@</span><span class=\"n\">subst</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">subst₂</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- have this, but:</span>\n  <span class=\"k\">show</span> <span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"bp\">@</span><span class=\"n\">subst</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">e</span> <span class=\"c1\">-- it&#39;s ok</span>\n  <span class=\"c1\">--show eq (f a) (f b), from subst₂ p h e -- it&#39;s not ok</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</pre></div>\n\n\n<p><a href=\"https://t.ly/NMwjx\" target=\"_blank\" title=\"https://t.ly/NMwjx\">This code on web editor</a></p>",
        "id": 186142304,
        "sender_full_name": "Anton Kalsin",
        "timestamp": 1579565080
    },
    {
        "content": "<p>Try the more modern web editor at <a href=\"https://leanprover-community.github.io/lean-web-editor/\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor/\">https://leanprover-community.github.io/lean-web-editor/</a> and see if anything changes?</p>",
        "id": 186142330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579565160
    },
    {
        "content": "<p>That's running 3.5.0c</p>",
        "id": 186142369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579565166
    },
    {
        "content": "<p>No changes</p>",
        "id": 186142460,
        "sender_full_name": "Anton Kalsin",
        "timestamp": 1579565332
    },
    {
        "content": "<p>For <code>why₁</code>, you need to use <code>let p : α → Prop := assume x, eq (f a) (f x),</code> instead of <code>have</code></p>",
        "id": 186142468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579565352
    },
    {
        "content": "<p>The difference is that with <code>let</code> lean will remember the definition and be able to unfold it later</p>",
        "id": 186142471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579565377
    },
    {
        "content": "<p>Thanks. It's work</p>",
        "id": 186142602,
        "sender_full_name": "Anton Kalsin",
        "timestamp": 1579565537
    },
    {
        "content": "<p>For <code>why₂</code>, the difference is that <code>subst₂</code> is not marked as <code>elab_as_eliminator</code>, so when it tries to figure out why <code>P b</code> in the type of <code>subst₂</code> should match with <code>eq (f a) (f b)</code> it guesses <code>P := eq (f a)</code> and <code>b := f b</code> and gets to nonsense</p>",
        "id": 186142621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579565609
    },
    {
        "content": "<p>If you use <code>@subst₂ ...</code> it should work</p>",
        "id": 186142630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579565639
    },
    {
        "content": "<p>Actually, for <code>elab_as_eliminator</code> to work <code>b</code> has to be explicit and provided</p>",
        "id": 186142696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579565724
    },
    {
        "content": "<p>so that it knows what to abstract</p>",
        "id": 186142700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579565736
    },
    {
        "content": "<p>Thanks. It's not clear for me now, but I'll read tutorial in more detail</p>",
        "id": 186143023,
        "sender_full_name": "Anton Kalsin",
        "timestamp": 1579566291
    },
    {
        "content": "<p>It's not really a theory thing, it has to do with how elaboration works. As long as you sprinkle enough <code>@</code> signs you can make it work</p>",
        "id": 186143237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579566683
    }
]