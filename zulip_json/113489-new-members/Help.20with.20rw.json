[
    {
        "content": "<p>Second day using lean, and a little confused.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">sub_self</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>which I found surprising. I'm following the tutorials, this came up as part of 01_equality_rewriting.lean example 0008. I'm sure there is workaround that doesn't use sub_self, I'm looking to understand why my expectation is wrong and learn more about how rw matches work.</p>",
        "id": 284914774,
        "sender_full_name": "Daniel Vainsencher",
        "timestamp": 1654280329
    },
    {
        "content": "<p><code>a+a*b-a*b</code> means <code>(a+a*b)-a*b</code>. There's actually no <code>a*b-a*b</code> in there <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> . You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_sub_assoc\">docs#add_sub_assoc</a> to get there.</p>",
        "id": 284915228,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654280437
    },
    {
        "content": "<p>Ah... thanks!</p>",
        "id": 284915455,
        "sender_full_name": "Daniel Vainsencher",
        "timestamp": 1654280499
    },
    {
        "content": "<p>Another question: in <a href=\"https://leanprover-community.github.io/extras/calc.html\">https://leanprover-community.github.io/extras/calc.html</a>, the example code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>does not work, I needed at least </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">calc</span> <span class=\"n\">A</span><span class=\"bp\">=</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span>   <span class=\"bp\">=</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span>   <span class=\"bp\">=</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>to get it to work. Is the example simply not precise or is something deeper going on?</p>",
        "id": 284916289,
        "sender_full_name": "Daniel Vainsencher",
        "timestamp": 1654280850
    },
    {
        "content": "<p>It's good to understand why <code>rw sub_self (a*b)</code> doesn't work here, but if you are wondering how can we possible do serious math if we have to write down all this associativity/commutativity/blahblah stuff, it's good to know that <code>ring</code> proves your result automatically.</p>",
        "id": 284916321,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654280869
    },
    {
        "content": "<p>The example is just not precise</p>",
        "id": 284916448,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1654280918
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> , the tutorial I'm doing does make that point.</p>",
        "id": 284916456,
        "sender_full_name": "Daniel Vainsencher",
        "timestamp": 1654280923
    },
    {
        "content": "<p>It has nothing to do with <code>begin</code>/<code>end</code>, it's missing variables</p>",
        "id": 284916571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1654280987
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">A</span><span class=\"bp\">=</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span>   <span class=\"bp\">=</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span>   <span class=\"bp\">=</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>will presumably work</p>",
        "id": 284916583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1654280996
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , that is helpful, that does work. I see that without the begin/end I also do not need the terminating <code>,</code>. Is there a syntax reference I should be looking at?</p>",
        "id": 284917874,
        "sender_full_name": "Daniel Vainsencher",
        "timestamp": 1654281651
    },
    {
        "content": "<p>You never need the trailing comma. It's just a quirk of the infoview that you need it to see the <code>Goals accomplished</code>.</p>",
        "id": 284917949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654281693
    },
    {
        "content": "<p>Is a PR fixing the calc doc to Patrick's version a good idea?</p>",
        "id": 284918556,
        "sender_full_name": "Daniel Vainsencher",
        "timestamp": 1654282032
    },
    {
        "content": "<p>Seems like a good idea to me</p>",
        "id": 284919320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654282466
    },
    {
        "content": "<p>It might be worth making the tactic version right after it look more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>as well. Or maybe also put it inside an <code>example</code> with a <code>begin</code>/<code>end</code> block to show how it might work? I'm not sure if the <code>have</code> is part of the tip or not.</p>",
        "id": 284919458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654282545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I am not as sure about the second example, it seems to assume context anyway, so I'm leaving that change off for now. Also changed wording some, PR at <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/268\">https://github.com/leanprover-community/leanprover-community.github.io/pull/268</a></p>",
        "id": 284986989,
        "sender_full_name": "Daniel Vainsencher",
        "timestamp": 1654358775
    }
]