[
    {
        "content": "<p>At <code>rw eq</code>, I have in scope <code>eq : i a1 h1 = i a2 h2</code> and I need to prove <code>j (i a1 h1) _ = j (i a2 h2) _</code>. This is \"obviously\" by <code>eq</code>, except that \"motive is not type correct\". Nevertheless, <code>cc</code> instead of <code>rw eq</code> does manage to close the goal. How did it do it?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_bij&#39;</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"err\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"err\">∈</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">prod_bij</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">left_inv</span> <span class=\"n\">a1</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">left_inv</span> <span class=\"n\">a2</span> <span class=\"n\">h2</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">eq</span><span class=\"o\">,},</span>\n  <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197832591,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589694936
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197832990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589695636
    },
    {
        "content": "<p>(Without trying <code>cc</code> myself here, I'm not sure. Have you tried <code>#print prod_bij'</code>, or replacing <code>cc</code> with <code>show_term { cc }</code>?)</p>",
        "id": 197833052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589695753
    },
    {
        "content": "<p>Oh, <code>show_term</code> is a thing - thanks. The output is utterly impenetrable, but I should probably expect that of any tactic</p>",
        "id": 197833203,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589696055
    },
    {
        "content": "<p>Were you objecting to the \"working\" or the \"minimal\" axes?</p>",
        "id": 197833205,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589696069
    },
    {
        "content": "<p>Both! Working as in define what alpha beta gamma are, and minimal so its easier to read.</p>",
        "id": 197833330,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589696296
    },
    {
        "content": "<p>In particular, from the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> link:</p>\n<blockquote>\n<p>Please make sure that your code snippet has:<br>\n -  correct imports; and<br>\n -  all the relevant definitions / theorems.</p>\n</blockquote>",
        "id": 197833393,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589696419
    },
    {
        "content": "<p>Oh, I am still not used to the fact that mathlib has lots of ambient variables floating around - it hadn't even occurred to me that this might not build, it's lifted verbatim out of a PR to <code>algebra/big_operators.lean</code>, sorry</p>",
        "id": 197833397,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589696427
    },
    {
        "content": "<p>And I made the terrible mistake of editing a file in mathlib and now the entire world is building again :(</p>",
        "id": 197833408,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589696472
    },
    {
        "content": "<p>The problem is that the type of <code>_</code> depends on the argument.</p>",
        "id": 197833409,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589696478
    },
    {
        "content": "<p>And you're trying to rewrite this argument.</p>",
        "id": 197833414,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589696492
    },
    {
        "content": "<p>Try <code>congr</code>.</p>",
        "id": 197833417,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589696497
    },
    {
        "content": "<p><code>simp only [eq]</code> works also.</p>",
        "id": 197833420,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589696507
    },
    {
        "content": "<p>Indeed I am, I was hoping the types would also be rewritten - but of course now you mention it, it'll only rewrite the goal, not the assumptions</p>",
        "id": 197833460,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589696540
    },
    {
        "content": "<p>memo to self: Agda's <code>rewrite</code> is nothing like <code>rw</code></p>",
        "id": 197833463,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589696553
    },
    {
        "content": "<p>Yes, if <code>simp</code> or <code>rw</code> fails, try the other one.</p>",
        "id": 197833469,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589696578
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 197833473,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589696585
    }
]