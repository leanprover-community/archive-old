[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constants</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">section</span> <span class=\"n\">testSection</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"k\">#print</span> <span class=\"n\">y</span>\n<span class=\"kd\">end</span> <span class=\"n\">testSection</span>\n</code></pre></div>\n<p>throws error says y has already been declared; but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constants</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">section</span> <span class=\"n\">testSection</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"k\">#print</span> <span class=\"n\">x</span>\n<span class=\"kd\">end</span> <span class=\"n\">testSection</span>\n</code></pre></div>\n<p>is fine, and x is shadowed.<br>\nWhy?</p>",
        "id": 259344833,
        "sender_full_name": "abaaba",
        "timestamp": 1635401926
    },
    {
        "content": "<p>Moreover, I don't understand why we need two different keywords; why not just use variables?</p>",
        "id": 259344933,
        "sender_full_name": "abaaba",
        "timestamp": 1635402069
    },
    {
        "content": "<p><code>constants</code> defines new axioms, which are like definitions or theorems but have no definition.  <code>variables</code> introduces arguments that Lean will automatically add in a definition or theorem.</p>\n<p>Unless you're studying new foundations for logic, you should avoid <code>constants</code>.</p>",
        "id": 259345125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635402284
    },
    {
        "content": "<p>Thanks for explanation. Then am I correct to say that (without considering <code>constants</code> keyword) Lean forbids variable shadowing?</p>",
        "id": 259345200,
        "sender_full_name": "abaaba",
        "timestamp": 1635402363
    },
    {
        "content": "<p>Lean prevents you from re-declaring <code>variables</code>, yes.  You can change properties of <code>variables</code>, though, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"c1\">-- now z is implicit</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and this change is scoped to the section.</p>",
        "id": 259345339,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635402529
    },
    {
        "content": "<p>I think a reason for this restriction is that it's unclear how shadowed variables would interact with dependent types.  For example, let's say you have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then shadow <code>α</code>.  Would <code>l</code> still be in the variables list?</p>",
        "id": 259345586,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635402801
    },
    {
        "content": "<p>makes sense for me to have variable shadowing disabled too . Wondering why shadowing of hypothesis is allowed in prove mode though ..</p>",
        "id": 259345658,
        "sender_full_name": "abaaba",
        "timestamp": 1635402879
    },
    {
        "content": "<p>It's usually a mistake accidentally reusing a name for <code>variables</code>, since the point of the feature is to let you carefully maintain what arguments will appear in the following definitions and theorems.  But Lean's ok with you shadowing lexical bindings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The hypotheses in tactic mode are similar.</p>",
        "id": 259345822,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635403072
    },
    {
        "content": "<p>sorry I'm not sure where is the shadowing in your example, I was referring to in tactic mode, two different hypothesis, both named 'h' can appear simutaneously though ...</p>",
        "id": 259345986,
        "sender_full_name": "abaaba",
        "timestamp": 1635403203
    },
    {
        "content": "<p>The shadowing is that <code>x</code> appears as an argument twice, so only the second one can be referred to.</p>",
        "id": 259346029,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635403244
    },
    {
        "content": "<p>This is in principle the same as what's going on in tactic mode.</p>",
        "id": 259346052,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635403273
    },
    {
        "content": "<p>ooh i see ....</p>",
        "id": 259346060,
        "sender_full_name": "abaaba",
        "timestamp": 1635403282
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 259346115,
        "sender_full_name": "abaaba",
        "timestamp": 1635403324
    },
    {
        "content": "<p>This shadowing's allowed too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>In the first example, the definition triggers including <code>x</code> as an argument.  The second, since it provides its own <code>x</code>, does not.</p>",
        "id": 259346156,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635403375
    },
    {
        "content": "<p>Just curious, is the old hypothesis lost in this form?</p>",
        "id": 259346176,
        "sender_full_name": "abaaba",
        "timestamp": 1635403403
    },
    {
        "content": "<p>What do you mean? Which thing are you referring to as the hypothesis?</p>",
        "id": 259346188,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635403434
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- foo : ℕ → ℕ</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo'</span>\n<span class=\"c1\">-- foo' : ℤ → ℤ</span>\n</code></pre></div>",
        "id": 259346249,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635403480
    },
    {
        "content": "<p>sorry, I mean is the old declaration inaccessible in the inner scope where second x is declared</p>",
        "id": 259346253,
        "sender_full_name": "abaaba",
        "timestamp": 1635403487
    },
    {
        "content": "<p>Do you mean the double <code>x</code> argument example?  According to this test</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>   <span class=\"kd\">end</span>\n</code></pre></div>\n<p>both <code>x</code>'s are there, but I'm not sure how you refer to the first one, if it's possible at all.</p>",
        "id": 259346391,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635403617
    },
    {
        "content": "<p>It seems like it should be possible in some way, since I think(?) that Lean uses de Bruijn encoding, meaning variables numerically refer to the nth binding back.</p>",
        "id": 259346507,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635403718
    },
    {
        "content": "<p>This is one way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">dedup</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259346564,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635403791
    },
    {
        "content": "<p>A test to see it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">foo'</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- 1</span>\n</code></pre></div>",
        "id": 259346645,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635403844
    },
    {
        "content": "<p>Indeed. Thanks!</p>",
        "id": 259346805,
        "sender_full_name": "abaaba",
        "timestamp": 1635403983
    }
]