[
    {
        "content": "<p>I'm stuck trying to figure out why this isn't working (specifically line 101, in the proof of lemma <code>modulus_card_of_exists</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.stream.init</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.infinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">stream</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">@[derive [decidable_eq, fintype]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">bit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>  <span class=\"o\">:</span> <span class=\"n\">bit</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span>   <span class=\"o\">:</span> <span class=\"n\">bit</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">bit</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">bit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cantor</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">stream</span> <span class=\"n\">bit</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">cantor</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eq_lt</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>   <span class=\"mi\">0</span>   <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">head</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">head</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">eq_lt</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">=⟦</span> <span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"bp\">`</span> <span class=\"bp\">⟧</span> <span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">eq_lt</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_lt_def</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=⟦</span> <span class=\"n\">n</span> <span class=\"bp\">⟧</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.not_lt_zero</span> <span class=\"n\">k</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_lt_succ_iff</span> <span class=\"n\">at</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hd</span> <span class=\"n\">k</span> <span class=\"n\">e</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">k.succ</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_lt_succ_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_modulus_of_uc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=⟦</span> <span class=\"n\">n</span> <span class=\"bp\">⟧</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">modulus_of_uc</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">is_modulus_of_uc</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">moduli_upward_closed</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">n_is_mod</span> <span class=\"o\">:</span> <span class=\"n\">is_modulus_of_uc</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">is_modulus_of_uc</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">m_gt_n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">eq_lt_m</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">eq_lt_n</span> <span class=\"o\">:</span> <span class=\"n\">eq_lt</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq_lt_def</span> <span class=\"n\">at</span> <span class=\"n\">eq_lt_m</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">k_lt_n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq_lt_m</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">k_lt_n.trans</span> <span class=\"n\">m_gt_n</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">n_is_mod</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">eq_lt_n</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"o\">(</span><span class=\"n\">modulus_of_uc</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.has_lt</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">no_max_order</span> <span class=\"o\">(</span><span class=\"n\">modulus_of_uc</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a_val</span><span class=\"o\">,</span> <span class=\"n\">a_is_mod</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">moduli_upward_closed</span> <span class=\"n\">a_is_mod</span> <span class=\"n\">a_val.succ</span> <span class=\"n\">a_val.lt_succ_self</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">a_val.succ</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subtype.mk_lt_mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">modulus_card_of_exists</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">cantor</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">is_modulus_of_uc</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"n\">modulus_of_uc</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ℵ₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">is_mod</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">#</span> <span class=\"o\">(</span><span class=\"n\">modulus_of_uc</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">cardinal.mk_subtype_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cardinal.mk_nat</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cardinal.infinite_iff.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">modulus_of_uc</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.preorder</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">modulus_of_uc</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">is_mod</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">no_max_order</span> <span class=\"o\">(</span><span class=\"n\">modulus_of_uc</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">no_max_order.infinite</span><span class=\"o\">,</span> <span class=\"c1\">-- why isn't this working?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 294498006,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1661045745
    },
    {
        "content": "<p>(Sorry for the long mwe, wasn't sure how to shorten it any further.)</p>",
        "id": 294498057,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1661045773
    },
    {
        "content": "<p>I would also appreciate any advice as to how to approach problems like this... I tried <code>set_option pp.implicit true</code> but that didn't provide me with enough information.</p>",
        "id": 294498150,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1661045913
    },
    {
        "content": "<p>this output is confusing (and I used <code>haveI</code> when introducing all of the class instances):</p>\n<p><a href=\"/user_uploads/3121/wsi7EX1oPIAdq3uTaVOs2NGM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wsi7EX1oPIAdq3uTaVOs2NGM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/wsi7EX1oPIAdq3uTaVOs2NGM/image.png\"></a></div>",
        "id": 294499491,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1661047621
    },
    {
        "content": "<p>the issue is that you used <code>haveI</code> - <code>letI</code> solves your issues her</p>",
        "id": 294499760,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661047930
    },
    {
        "content": "<p><code>haveI</code> forgets the definition of the instance, which is okay if they're a prop but not if they're not</p>",
        "id": 294499766,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661047959
    },
    {
        "content": "<p>ah, that makes total sense</p>",
        "id": 294499778,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1661047987
    },
    {
        "content": "<p>it's specifically the preorder, right?</p>",
        "id": 294499869,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1661048071
    },
    {
        "content": "<p>yeah, that fixes it... thanks!</p>",
        "id": 294499905,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1661048117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> has marked this topic as resolved.</p>",
        "id": 294499922,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661048133
    },
    {
        "content": "<p>Hello everyone! I 'm a mathematics student, and I think that lean is a great tool for my mathematical study.<br>\nHowever I encountered problems that I couldn't comprehend.<br>\nI had already installed Python(v3.9.1), Git(v2.33.0.windows.2), VS Code(v1.70.2),  and VSCode lean extension (lean-3.42.1) on Windows 10 system, and configured them according to the tutorial at <a href=\"https://leanprover-community.github.io/install/windows.html\">https://leanprover-community.github.io/install/windows.html</a>.<br>\nSince I couldn't find mathlib anywhere after finishing the tutorial, I downloaded mathlib by the command <br>\nleanproject get <a href=\"https://github.com/leanprover-community/mathlib.git\">https://github.com/leanprover-community/mathlib.git</a><br>\n<a href=\"/user_uploads/3121/1h83ty8NjLKFZbh_UVtKPSGP/image.png\">image.png</a> <br>\nI found that it's loading forever<br>\nLean is using my CPU and memory<br>\n<a href=\"/user_uploads/3121/Dbp9yRzytrjTCfEtTk8U7Yrp/image.png\">image.png</a><br>\nbut I waited for half an hour with no response.<br>\nHow can I solve it? Did I install mathlib correctly?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1h83ty8NjLKFZbh_UVtKPSGP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/1h83ty8NjLKFZbh_UVtKPSGP/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Dbp9yRzytrjTCfEtTk8U7Yrp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Dbp9yRzytrjTCfEtTk8U7Yrp/image.png\"></a></div>",
        "id": 294529805,
        "sender_full_name": "Zhang Ruichong",
        "timestamp": 1661078657
    }
]