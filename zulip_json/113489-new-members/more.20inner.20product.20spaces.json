[
    {
        "content": "<p>I was obliged to abandon the <code>real.inner_product_space</code> when I was finally able to upgrade mathlib.  A few hoops later, I am struggling to show what was straightforward before. </p>\n<p>First question: what is missing here so that the <code>#check inner x y</code> returns <code>?M_1</code> instead of  <code>𝕜</code> ? Is this nothing to worry about?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.is_R_or_C</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">classical</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">e₁</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">e₂</span><span class=\"bp\">`⟫`</span><span class=\"o\">:=</span> <span class=\"n\">inner</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"bp\">⟪</span> <span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₁</span> <span class=\"bp\">⟫</span>   <span class=\"c1\">-- returns ⟪e₁, e₁⟫ : ?M_1 ??</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">𝕜</span>\n<span class=\"k\">#check</span> <span class=\"n\">c</span>    <span class=\"c1\">--  c : 𝕜  , as expected</span>\n<span class=\"k\">#check</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"bp\">⟪</span> <span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₁</span> <span class=\"bp\">⟫</span>\n</code></pre></div>",
        "id": 212851910,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602263229
    },
    {
        "content": "<p>What happens if you either <code>include 𝕜</code>, or redefine your notation with <code>@inner</code> specifying the field <code>𝕜</code>?</p>",
        "id": 212855086,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1602265070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20inner.20product.20spaces/near/212855086\">said</a>:</p>\n<blockquote>\n<p>What happens if you either <code>include 𝕜</code>, or redefine your notation with <code>@inner</code> specifying the field <code>𝕜</code>?</p>\n</blockquote>\n<p>Not sure how either of those work. I put an include just before that check. No avail ...</p>\n<p>Is this the expected behaviour?</p>",
        "id": 212855568,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602265348
    },
    {
        "content": "<p>As Sébastien said, the problem probably stems from the line that defines the notation, because it doesn't specify over which field the inner product is taken, and very often Lean can't figure it out. I would try replacing it with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 212858118,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1602266779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20inner.20product.20spaces/near/212858118\">said</a>:</p>\n<blockquote>\n<p>As Sébastien said, the problem probably stems from the line that defines the notation, because it doesn't specify over which field the inner product is taken, and very often Lean can't figure it out. I would try replacing it with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n</blockquote>\n<p>Thanks. I have a couple more confusions ... unless that change has disappeared them :^)</p>",
        "id": 212859802,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602267767
    },
    {
        "content": "<p>How do I unravel the definition of inner product that I have managed to 'induce' on submodules? I include the code for this, and cannot move the demonstration that the inner product is 'what it is':</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">submodule_inner_product_space</span>  <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"n\">inner_product_space.of_core</span> <span class=\"o\">{</span>\n  <span class=\"n\">inner</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">v.1</span> <span class=\"o\">,</span><span class=\"n\">w.1</span><span class=\"bp\">⟫</span><span class=\"o\">,</span> <span class=\"c1\">-- ⟪(v:E) ,(w:E)⟫,</span>\n  <span class=\"n\">conj_sym</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inner_conj_sym</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">--λ _ _ , inner_conj_sym _ _ ,</span>\n  <span class=\"n\">nonneg_im</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inner_self_nonneg_im</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- λ _, inner_self_nonneg_im _ ,</span>\n  <span class=\"n\">nonneg_re</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">inner_self_nonneg</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- λ _, inner_self_nonneg ,</span>\n  <span class=\"n\">definite</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">inner_self_eq_zero.mp</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype.eq</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,},</span>\n  <span class=\"n\">add_left</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">inner_add_left</span><span class=\"o\">,},</span>\n  <span class=\"n\">smul_left</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">inner_smul_left</span><span class=\"o\">,}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n<p>this makes Lean happy enough, but now this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span><span class=\"n\">x.val</span><span class=\"o\">,</span><span class=\"n\">y.val</span><span class=\"bp\">⟫</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n<p>Indeed, how can I distinguish the one inner from the other, even?</p>",
        "id": 212861115,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602268520
    },
    {
        "content": "<p>Does <code>rfl</code> work as a proof?</p>",
        "id": 212861423,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602268697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20inner.20product.20spaces/near/212861423\">said</a>:</p>\n<blockquote>\n<p>Does <code>rfl</code> work as a proof?</p>\n</blockquote>\n<p>I tried, it seemed not to. Then read about <code>simpa</code> just now. That does it instantly. I would still like to know how to <code>unfold</code> (if that's the word) the <code>inner</code></p>\n<p><code>.. := rfl</code> works. Not in tactic mode ?</p>",
        "id": 212861637,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602268819
    },
    {
        "content": "<p>The tactic would be <code>refl</code></p>",
        "id": 212863281,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602269792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20inner.20product.20spaces/near/212863281\">said</a>:</p>\n<blockquote>\n<p>The tactic would be <code>refl</code></p>\n</blockquote>\n<p>Thanks ! How to trace how Lean is using the instance?</p>",
        "id": 212863726,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602270016
    },
    {
        "content": "<p>I'm not sure what the question means, but you should try to click on stuff in the info view.</p>",
        "id": 212865372,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602271091
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ZHNc8djl443RANVsYIjUAlGl/inner_product.gif\">inner_product.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZHNc8djl443RANVsYIjUAlGl/inner_product.gif\" title=\"inner_product.gif\"><img src=\"/user_uploads/3121/ZHNc8djl443RANVsYIjUAlGl/inner_product.gif\"></a></div>",
        "id": 212866142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602271630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20inner.20product.20spaces/near/212866142\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/ZHNc8djl443RANVsYIjUAlGl/inner_product.gif\">inner_product.gif</a></p>\n</blockquote>\n<p>brilliant!</p>",
        "id": 212877153,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602278479
    },
    {
        "content": "<p>I would just like to point out a pitfall before you go too far down this route: the analogue of what you're doing for inner product spaces has already been done for normed spaces (see <code>submodule.normed_space</code> in <code>analysis/normed_space/basic</code>). This means that you shouldn't be using <code>of_core</code> but rather the main definition, where you'll have to prove that the norm that is already there is compatible with the inner product. Using <code>of_core</code> you'll end up with two norm instances on the space, and that just leads to trouble.</p>",
        "id": 212889443,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1602288407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Frédéric Dupuis</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20inner.20product.20spaces/near/212889443\">said</a>:</p>\n<blockquote>\n<p>I would just like to point out a pitfall before you go too far down this route: the analogue of what you're doing for inner product spaces has already been done for normed spaces (see <code>submodule.normed_space</code> in <code>analysis/normed_space/basic</code>). This means that you shouldn't be using <code>of_core</code> but rather the main definition, where you'll have to prove that the norm that is already there is compatible with the inner product. Using <code>of_core</code> you'll end up with two norm instances on the space, and that just leads to trouble.</p>\n</blockquote>\n<p>I am particularly interested in the inner product. Normed space need not come with ...</p>",
        "id": 212971733,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602433778
    },
    {
        "content": "<p>You should not use <code>of_core</code> constructur.</p>",
        "id": 212972020,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602434269
    },
    {
        "content": "<p>Because this constructor will define <code>norm</code> for you, and this norm will not be defeq to the restriction of the norm on the ambient space.</p>",
        "id": 212972061,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602434307
    },
    {
        "content": "<p>Instead you should use the standard constructor and prove <code>norm_sq_eq_inner</code> reusing the same equality in the ambient space.</p>",
        "id": 212972085,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602434368
    },
    {
        "content": "<p>Probably we should add this warning to the docstring of the <code>of_core</code> constructor.</p>",
        "id": 212972142,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602434426
    },
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/mathlib/issues/4571\">#4571</a> a few hours ago with several small updates to the inner product code, I'll throw in the warning as well.</p>",
        "id": 212973924,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1602437481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/more.20inner.20product.20spaces/near/212972085\">said</a>:</p>\n<blockquote>\n<p>Instead you should use the standard constructor and prove <code>norm_sq_eq_inner</code> reusing the same equality in the ambient space.</p>\n</blockquote>\n<p>I will look this up: but for the record, which is the <code>standard constructor</code>?</p>",
        "id": 212975879,
        "sender_full_name": "Busiso Chisala",
        "timestamp": 1602440449
    },
    {
        "content": "<p>This just means directly defining an <code>inner_product_space</code> structure, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">submodule_inner_product_space</span>  <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n <span class=\"n\">norm_sq_eq_inner</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">conj_sym</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">nonneg_im</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">add_left</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">smul_left</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 212976134,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1602440863
    }
]