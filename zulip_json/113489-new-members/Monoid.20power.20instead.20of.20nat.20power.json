[
    {
        "content": "<p>How do I use monoid.has_pow instead of nat.has_pow ?<br>\nWhen I use ^ it defaults to nat.has_pow but I want monoid.has_pow,</p>",
        "id": 206516080,
        "sender_full_name": "Ben Nale",
        "timestamp": 1597095067
    },
    {
        "content": "<p>Here's a better question. How do we solve this problem once and for all? I am unclear about the best way forward -- this issue comes up again and again (came up on the discord last week, came up bigtime at LFTCM). If we redefine monoid.pow so that the step case is the same way around as nat.pow will that solve it? I tried editing nat.pow and then I realised I was editing core Lean :-/ Can we have some proposed solutions as to how to proceed?</p>\n<p><span class=\"user-mention\" data-user-id=\"312320\">@Ben Nale</span> you can just use <code>monoid.pow</code> explicitly instead of the <code>^</code> notation. Or use ^ but then apply some <code>pow_eq_pow</code> lemma which says that <code>nat.pow a b = monoid.pow a b</code></p>",
        "id": 206518255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597096492
    },
    {
        "content": "<p>delete <code>nat.has_pow</code></p>",
        "id": 206518757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597096864
    },
    {
        "content": "<p>the version in core can be called <code>nat.pow</code> with no notation, and you use that when you care about efficiency, otherwise <code>monoid.pow</code> will put a generic instance on it</p>",
        "id": 206518838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597096919
    },
    {
        "content": "<p>and eventually maybe we can find a way to get the VM to produce good code even for abstract implementations like <code>monoid.pow</code> on nat</p>",
        "id": 206518925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597096968
    },
    {
        "content": "<p>I am unclear how to delete nat.has_pow because this is in core. Do I just delete it, fix core, then wait until a new lean release and then observe that mathlib is broken? I am just unsure of the workflow here.</p>",
        "id": 206520207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597097938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> has an old PR <a href=\"https://github.com/leanprover-community/lean/issues/128\">lean#128</a> which attempts to delete <code>nat.has_pow</code> from core. I'm not sure whether with all the changes it's better to work off that or start from scratch.</p>",
        "id": 206520332,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597098048
    },
    {
        "content": "<p>I believe the pattern has been to make a PR to core (which involves fixing everything in core, probably not much), and then making fixes to mathlib in the feature branch for the upcoming version of lean</p>",
        "id": 206520341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597098057
    },
    {
        "content": "<p>I'm currently trying my hand at fixing this... wish me luck.</p>",
        "id": 208281332,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598565188
    },
    {
        "content": "<p>I learned that if you break <code>norm_num</code> and <code>ring</code> you get a <strong>lot</strong> of scary errors</p>",
        "id": 208286232,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598568855
    },
    {
        "content": "<p>Oh, is this something that should be addressed?</p>",
        "id": 208294017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598576351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Thanks so much. It was floating to the top of my todo list... I'm happy to skip it (-;</p>",
        "id": 208304418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598589295
    },
    {
        "content": "<p>I tried this job once and borked my Lean installation <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 208312912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598599615
    }
]