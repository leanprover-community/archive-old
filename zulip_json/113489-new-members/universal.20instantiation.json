[
    {
        "content": "<p>In the following context I would like to apply the universal instantiation to use the Modus Polens to prove the goal.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>What results after having applied these tactics is the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>After having chosen x as an arbitrary object it should be possible, I suppose, to use the universal instantiation with respect to the x's in the hypotheses. At the end the application of the Modus Ponens should close the goal. But I don't find a way to apply the universal instantiation.</p>",
        "id": 209269744,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599467543
    },
    {
        "content": "<p>The <code>apply</code> tactic takes a term of the form <code>a -&gt; b -&gt; ... -&gt; c</code> or of the form <code>∀ x y, a x y -&gt; b x -&gt; ... -&gt; c x y</code> and applies it to a goal of the form <code>c</code> or <code>c x y</code> respectively:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"c1\">-- Goal: ⊢ p x</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209270102,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599467816
    },
    {
        "content": "<p>In this case, because the goal is <code>q x</code> and <code>h1</code> has type <code>∀ a, p a -&gt; q a</code>, it tries to match <code>q x</code> with <code>q ?a</code>, deduces that <code>?a = x</code>, so it already fills in the first argument to <code>h1</code>.</p>",
        "id": 209270208,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599467905
    },
    {
        "content": "<p>You can also create a term applying <code>h1</code> to <code>x</code> manually:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1x</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- Goal: h1x : p x -&gt; q x ⊢ q x</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209270355,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599468022
    },
    {
        "content": "<p>or:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209278874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599473527
    },
    {
        "content": "<p>(which just wildly applies <code>apply</code> to everything that it can see until it wins :-)</p>",
        "id": 209278925,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599473573
    },
    {
        "content": "<p>@Anne Baanen, Scott Morrison.<br>\nThank you very much for your support. That worked pretty well. This time I preferred the have-tactic to prove the assumption step by step. Your hints were very helpful.</p>",
        "id": 209281523,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599475475
    },
    {
        "content": "<p>Just to remark that using <code>have</code> is the way that mathematicians have traditionally been taught to argue, but it's slower to do in lean, and if you don't tidy up after yourself you get a bunch of superfluous hypotheses in your context. You can solve the goal in two lines with <code>apply</code> and I guess in fact in one line using <code>exact</code>. It's advisable to get into practice killing easy goals quickly by learning how to reason on the goal</p>",
        "id": 209285087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599478124
    },
    {
        "content": "<p>Is it really slower?</p>",
        "id": 209285140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599478166
    },
    {
        "content": "<p>It takes more lines of code to write</p>",
        "id": 209285742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599478585
    },
    {
        "content": "<p>Especially if you clear them afterwards</p>",
        "id": 209285770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599478607
    }
]