[
    {
        "content": "<p>Hello,  i am a french student in mathematics and for fun  (and in order to practice) i am trying to build the real numbers with the quasi-morphisme construction.</p>",
        "id": 256851073,
        "sender_full_name": "yannis monbru",
        "timestamp": 1633766873
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.max\">docs#finset.max</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.max'\">docs#finset.max'</a>.</p>",
        "id": 256851678,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633767468
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> showing what you're trying to do to import, and explain the file layout?</p>",
        "id": 256851745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633767511
    },
    {
        "content": "<p>thank you for the link</p>\n<p>I just created a second file in the directory \"src\" and wrote \" import [name of my first file]\" wich didn't work and i see that lean is not aware of what i wrote on the other file </p>\n<p>the begining of the file is that:<br>\n/-<br>\nimport data.int.basic<br>\nimport tactic.linarith</p>\n<p>def q_morph (f:ℤ→ ℤ) := ∃ (M :ℤ) , ∀ n m,  (- M≤ f n + f m - f (n+m))∧(f n + f m - f (n+m)≤ M)</p>\n<p>def QM: set _ :={f:ℤ→ℤ | q_morph f }</p>\n<p>def egal (f:ℤ → ℤ ) (g:ℤ→ℤ):= q_morph (f - g) -/</p>\n<p>and then there are lemmas to prove that things behave like we would expect</p>",
        "id": 256852689,
        "sender_full_name": "yannis monbru",
        "timestamp": 1633768532
    },
    {
        "content": "<p>For the quotient question, you can start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">quasi_mph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">bound</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">quasi_mph</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">quasi_mph</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">q.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Let's restate the `map_mul' axiom in term of the coercion to function</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_mul</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quasi_mph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">q.bound</span> <span class=\"o\">:=</span>\n<span class=\"n\">q.map_mul'</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">quasi_mph</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">quasi_mph</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">euxodus_real</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">quasi_mph.setoid</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quasi_mph</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"n\">q</span><span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">euxodus_real</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 256852903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633768757
    },
    {
        "content": "<p>You also need to read <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 256852907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633768765
    },
    {
        "content": "<p>Do you have a <code>leanpkg.toml</code>? Did you open a file in VSCode, or the whole folder?</p>",
        "id": 256852919,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633768780
    },
    {
        "content": "<p>(You need one, and you need to open the folder containing <code>src</code>.)</p>",
        "id": 256852927,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633768790
    },
    {
        "content": "<p>About the file layout, we need to know what is the <code>src</code> folder you're talking about</p>",
        "id": 256852930,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633768796
    },
    {
        "content": "<p>Did you create a project using <code>leanproject new</code>?</p>",
        "id": 256852977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633768809
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/drw_B8dgQCIqaeJyx6KMknmr/yannis.gif\">yannis.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/drw_B8dgQCIqaeJyx6KMknmr/yannis.gif\" title=\"yannis.gif\"><img src=\"/user_uploads/3121/drw_B8dgQCIqaeJyx6KMknmr/yannis.gif\"></a></div>",
        "id": 256853131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633768968
    },
    {
        "content": "<p>Do not mind the <code>leanproject</code> bug that says it's looking for yannis olean instead of mathlib oleans</p>",
        "id": 256853221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633769058
    },
    {
        "content": "<p>i thought i did like that, but after redoing it like on your video, it now works. So i don't understand what hapened but the issue is now gone...</p>\n<p>thank you very much</p>",
        "id": 256853565,
        "sender_full_name": "yannis monbru",
        "timestamp": 1633769466
    },
    {
        "content": "<p>Also make sure to read <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#quotients</a> if you haven't read it yet.</p>",
        "id": 256853730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633769650
    },
    {
        "content": "<p>Also note that this construction has already been done if you need inspiration, although I can't find it anymore <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 256854358,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633770274
    },
    {
        "content": "<p>i saw on wikipedia  that it has been done by the projet  IsarMathLib, but is it in Lean?</p>",
        "id": 256854580,
        "sender_full_name": "yannis monbru",
        "timestamp": 1633770506
    },
    {
        "content": "<p>I remember so... but I might be mistaken. Can anyone else infirm/confirm?</p>",
        "id": 256854624,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633770583
    },
    {
        "content": "<p>There was <a href=\"https://github.com/Lix0120/eudoxus\">https://github.com/Lix0120/eudoxus</a> which seems pretty similar, though I don't know if they are exactly the same?</p>",
        "id": 256861389,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633777319
    },
    {
        "content": "<p>That's what I was thinking about! This is exactly the same.</p>",
        "id": 256863281,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633779246
    },
    {
        "content": "<p>hello, i have a question about lifting maps to with two agruments to the quotient</p>\n<p>is there a way to lift to arguments at the same time or do we need to lift in one argument and then in the other?</p>",
        "id": 257833630,
        "sender_full_name": "yannis monbru",
        "timestamp": 1634392539
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/data/quot.html#quot.lift%E2%82%82\">https://leanprover-community.github.io/mathlib_docs/data/quot.html#quot.lift%E2%82%82</a> what you want?</p>",
        "id": 257833873,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634392790
    },
    {
        "content": "<p>yes it is exactly that thank you</p>",
        "id": 257834055,
        "sender_full_name": "yannis monbru",
        "timestamp": 1634392918
    },
    {
        "content": "<p>Hello, is there a way to extract from a term \"\\exists M,.....\" a value of M in the same way that we exctrat a proof of A from a proof of \"A and B\".</p>\n<p>I am trying to define a new term of a structure and i need to give to lean a value of M and a proof that this M satisfy some conditions, but the actual value of M is dificult to know so i can't give it just by writing it's value.</p>\n<p>On the other hand i tryed to define my term between 'begin' and 'end' in order to be able to use rcase (\\exists M,...) but it seems not to work.</p>\n<p>thank you for your help</p>",
        "id": 258829997,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635004521
    },
    {
        "content": "<blockquote>\n<p>On the other hand i tryed to define my term between 'begin' and 'end' in order to be able to use rcase (\\exists M,...) but it seems not to work.</p>\n</blockquote>\n<p>can you show your code?</p>",
        "id": 258830003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635004561
    },
    {
        "content": "<p>Do you mean <code>obtain ⟨x, hx⟩ := h</code>, where <code>h : ∃ x,...</code>?</p>",
        "id": 258830064,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635004661
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">c_qm</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">quasi_mph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">quasi_mph</span><span class=\"o\">):</span> <span class=\"n\">quasi_mph</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">stab_c</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"n\">hM</span><span class=\"o\">⟩,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and the interpretor says nduction tactic failed, recursor 'Exists.dcases_on' can only eliminate into Prop</p>",
        "id": 258830150,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635004787
    },
    {
        "content": "<p>You almost got <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> right <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Put them on their own line.</p>",
        "id": 258830245,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635004823
    },
    {
        "content": "<p>That's because you can't get data out of an existential to define data (without the axiom of choice). You can only get data of an existential to prove a proposition.</p>",
        "id": 258830290,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635004881
    },
    {
        "content": "<p>(Those are backticks: `` Those are not '')</p>",
        "id": 258830298,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635004911
    },
    {
        "content": "<p>If you're French, the backticks are actually loose accents graves. You can find them on the key for 7.</p>",
        "id": 258830359,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635004947
    },
    {
        "content": "<p>Ah! You found them.</p>",
        "id": 258830363,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635004952
    },
    {
        "content": "<p>thank you for the tips</p>\n<p>is there a way to cheat, knowing that the value have an expression completly constructive?</p>",
        "id": 258830383,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635005016
    },
    {
        "content": "<p>The solution here is to either use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some\">docs#classical.some</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.some_spec\">docs#classical.some_spec</a>, or not hiding your data inside an existential in the first place.</p>",
        "id": 258830385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635005029
    },
    {
        "content": "<p>Yeah so in your case you want to define a function.</p>",
        "id": 258830428,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635005047
    },
    {
        "content": "<p>ok i will try to find an explicit value, than you</p>",
        "id": 258830615,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635005310
    },
    {
        "content": "<p>hello, i have a lot of calculation involving involving integer + and -  (like x-y= x- z+ -y+z) to prove to lean and the tacting ring (or ring_nf) seems to have problem with this kind of example, is there another tactic better suited for that job ?</p>\n<p>thank you</p>",
        "id": 258869382,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635068048
    },
    {
        "content": "<p><code>linarith</code></p>",
        "id": 258869400,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635068105
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/linarith/frontend.html\">https://leanprover-community.github.io/mathlib_docs/tactic/linarith/frontend.html</a></p>",
        "id": 258869404,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635068130
    },
    {
        "content": "<p>Do you really mean integer here? Do you have an example?</p>",
        "id": 258869466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635068238
    },
    {
        "content": "<p><code>ring</code> has no trouble doing <code>example (x y z : ℤ) : x - y = x - z + -y + z := by ring</code> (that would be a huge bug noticed a long time ago)</p>",
        "id": 258869548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635068348
    },
    {
        "content": "<p>no it is somme elements that have the type int but they are of the form f ( g(n)+g(m)) for example<br>\ni have an example but i am not shure it is realy readable</p>",
        "id": 258869617,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635068463
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 258869687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635068537
    },
    {
        "content": "<p>We can't help you without a mwe</p>",
        "id": 258869695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635068561
    },
    {
        "content": "<p><code>calc |f (g (n + m)) - f (g n + g m)| = |(f((g(n + m)) - f (g (n + m)-(g n+g m))- f (g n + g m))+(f (g (n + m)-g n-g m))|: by {ring,}</code></p>\n<p>to better read it it is of the form |x-y|=|x-z-y+z|</p>",
        "id": 258869783,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635068718
    },
    {
        "content": "<p>This is not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> -- what is the definition of <code>|</code>? Maybe <code>ring</code> can't see inside it. You could apply <code>congr_fun</code> first maybe? What are the domain and codomain of f, g etc? If you give us code which we can just cut and paste and which works (the point of a mwe) we can help.</p>",
        "id": 258869850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635068792
    },
    {
        "content": "<p>Otherwise we have to start guessing, and this wastes people's time</p>",
        "id": 258869927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635068953
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- some guessing</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258870074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635069159
    },
    {
        "content": "<p>sorry about that, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">variables</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"kd\">variables</span> <span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"bp\">→</span><span class=\"n\">ℤ</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ineg</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">+</span><span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">|&lt;=</span> <span class=\"mi\">42</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">|</span><span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n\n      <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n    <span class=\"bp\">...≤</span> <span class=\"mi\">42</span><span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258870217,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635069410
    },
    {
        "content": "<p>This doesn't solve your question but the correct thing to use here is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abs_sub_le\">docs#abs_sub_le</a>.</p>",
        "id": 258870292,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635069552
    },
    {
        "content": "<p>thank you for that</p>",
        "id": 258870570,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635069911
    },
    {
        "content": "<p>This code is not correct</p>",
        "id": 258870627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635069991
    },
    {
        "content": "<p>It has errors having nothing to do with ring</p>",
        "id": 258870630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635070012
    },
    {
        "content": "<p>Presumably parentheses are messed up</p>",
        "id": 258870713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635070111
    },
    {
        "content": "<p>yes i wrongly ad a ( by making the example it is corected now</p>",
        "id": 258870717,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635070124
    },
    {
        "content": "<p>I'm pretty sure this is still not what you intended to write</p>",
        "id": 258870781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635070209
    },
    {
        "content": "<p>Try additing the <code>generalize</code> lines to your code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ineg</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">+</span><span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">|&lt;=</span> <span class=\"mi\">42</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">|</span><span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n     <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n     <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n     <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n\n      <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n    <span class=\"bp\">...≤</span> <span class=\"mi\">42</span><span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258870791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635070229
    },
    {
        "content": "<p>yes indeed , i will think again on my example an see if did a mistake by wrinting my code (realy sorry if it is the case)</p>",
        "id": 258870977,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635070517
    },
    {
        "content": "<p>Still, <code>ring</code> can't guess what to do inside function applications. I'm not sure you can do much better than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ineg</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">+</span><span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">|&lt;=</span> <span class=\"mi\">42</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">-</span>\n                                          <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">...≤</span> <span class=\"mi\">42</span><span class=\"o\">:</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258870988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635070558
    },
    {
        "content": "<p>Do you know you can use the widgets to inspect the structure of a complicated term and make sure that it associates correctly?</p>",
        "id": 258871033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635070591
    },
    {
        "content": "<p>Simply make sur the info view is wide (otherwise there are bugs) and put your mouse over subexpressions, paying attention to highlighting</p>",
        "id": 258871043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635070625
    },
    {
        "content": "<p>in fact the problem was that i had an other calculation inside a function and thought it was not a problem so i removed it in the example , and doing that i completly mixed up the '(' and now ring is okay</p>\n<p>i will handle the inside as in your example</p>\n<p>thank you very much</p>",
        "id": 258871259,
        "sender_full_name": "yannis monbru",
        "timestamp": 1635070983
    },
    {
        "content": "<p>hello, I am trying to lift a predicate \"is positive\" : r-&gt;Prop to a quotient of r but i think that in order to use the constructor like quot.lift i need an equivalence relation on Prop to express the fact that two elements of r that are equivalents are positive at the same time but i don't know what it could be.<br>\nbut maybe there is a direct construction for this type of lifting, could you give me a solution</p>\n<p>thank you for your help</p>",
        "id": 260425375,
        "sender_full_name": "yannis monbru",
        "timestamp": 1636128228
    },
    {
        "content": "<p>In order to get a predicate on the quotient you need to know that if <code>x</code> and <code>y</code> are related then the propositions <code>is_positive x</code> and <code>is_positive y</code> are <em>equal</em>--but because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/propext\">docs#propext</a> that's the same as saying that they are equivalent (related by <code>iff</code>).</p>",
        "id": 260425851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636128418
    },
    {
        "content": "<p>ok thank you very much</p>",
        "id": 260425992,
        "sender_full_name": "yannis monbru",
        "timestamp": 1636128478
    },
    {
        "content": "<p>Hello,  i have  a formalisation of a commutavive ring  , (in fact i have fonctions add:R-&gt;R-&gt;R, ....., and proof of the axioms of a comutative ring) and i have some statement to prove that need calculations with the ring structure. Is there a way to handle these calculations with some features of ring ?</p>\n<p>thank you for your help</p>",
        "id": 261412386,
        "sender_full_name": "yannis monbru",
        "timestamp": 1636889105
    },
    {
        "content": "<p>There are tactics for calculations in rings such as <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#noncomm_ring\">tactic#noncomm_ring</a>, do those help?</p>",
        "id": 261412819,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636889764
    },
    {
        "content": "<p>This question is too vague, we can't help you. You should try to provide <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> or a link to a Lean project hosted on GitHub if building a mwe is too complicated.</p>",
        "id": 261413116,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636890199
    },
    {
        "content": "<p>yes i found the answer by reading this, i need to say to lean that i have a ring and not  stay with a list of statement.<br>\nthank you very much</p>",
        "id": 261413192,
        "sender_full_name": "yannis monbru",
        "timestamp": 1636890334
    }
]