[
    {
        "content": "<p>hello everyone! i'm trying to define the following inductive datatype: </p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">hewwo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">hewwo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n</blockquote>\n<p>where the intended type of <code>apply n f</code> is <code>hewwo →</code> ... <code>→ hewwo</code>, repeated <code>n + 1</code> times.</p>\n<p>I defined the following function:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">repeat_Pi</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">repeat_Pi</span> <span class=\"n\">n</span> <span class=\"n\">A</span>\n</pre></div>\n\n\n</blockquote>\n<p>but Lean complains that the following:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">hewwo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">hewwo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">repeat_Pi</span> <span class=\"n\">n</span> <span class=\"n\">hewwo</span>\n</pre></div>\n\n\n</blockquote>\n<p>(rightly) has an incorrect return type for <code>hewwo.apply</code>.</p>\n<p>Is there a way to get Lean to treat <code>repeat_Pi k A</code> as being equal to <code>A -&gt; ... -&gt; A</code>?</p>\n<p>(edit: got rid of <code>punit</code> and shifted indexing down by 1)</p>",
        "id": 134384020,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1537542697
    },
    {
        "content": "<p>Is it intended that in:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">repeat_Pi</span> <span class=\"n\">n</span> <span class=\"n\">A</span>\n</pre></div>\n\n\n<p>you ignore <code>A</code> that you get as a parameter?</p>",
        "id": 134400061,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537559209
    },
    {
        "content": "<p>Sorry, that doesn't fix the issue. </p>\n<p>You may need to reflect the repetition into the definition of <code>hewwo</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">hewwo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">hewwo</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">hewwo</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">hewwo</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134400214,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537559393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> I would just use the uncurried <code>\\Pi n, A n -&gt; (fin n -&gt; hewwo) -&gt; hewwo</code> instead.<br>\nI don't think you can do the thing you were trying to do.</p>",
        "id": 134403199,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537562261
    }
]