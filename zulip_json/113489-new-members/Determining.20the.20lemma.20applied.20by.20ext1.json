[
    {
        "content": "<p>I've a tactic-mode proof that uses <code>ext1</code>, and I'd like to know exactly which lemma was applied. Is there an easy way to find out?</p>",
        "id": 200761487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592046961
    },
    {
        "content": "<p>The specific transformation I'm trying to find is the one that simplifies the goal from<code>λ x, y = λ x, z</code> to <code>y = z</code></p>",
        "id": 200761562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592047074
    },
    {
        "content": "<p>you can <code>#print</code> a lemma to see the term</p>",
        "id": 200761678,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592047214
    },
    {
        "content": "<p>to answer the question directly, i think you're looking for the name <code>funext</code></p>",
        "id": 200761684,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592047249
    },
    {
        "content": "<p>But I don't know the lemma to print - <code>ext1</code> is picking a lemma for me, isn't it?</p>",
        "id": 200761688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592047258
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">show_term</span><span class=\"o\">{</span> <span class=\"n\">ext1</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200761694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592047265
    },
    {
        "content": "<p>Excellent, thanks!</p>",
        "id": 200761706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592047292
    },
    {
        "content": "<p>How do I go from that term-mode expression to a tactic-mode line I can replace ext1 with?</p>",
        "id": 200761757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592047390
    },
    {
        "content": "<p>are you asking the general question \"how i do enter a term into a tactic mode proof?\" I think the answer is <code>exact</code></p>",
        "id": 200761799,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592047457
    },
    {
        "content": "<p>That only works as the terminal step of a proof though, right?</p>",
        "id": 200761805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592047485
    },
    {
        "content": "<p>For now, I'm looking for a way to replace the tactic <code>ext1</code> with something more precise.</p>",
        "id": 200761810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592047508
    },
    {
        "content": "<p><code>apply funext</code> doesn't quite seem to be the same.</p>",
        "id": 200761813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592047519
    },
    {
        "content": "<p>Well here is the full term mode proof</p>",
        "id": 200761821,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592047538
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">ext</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">mwe</span>\n</code></pre></div>",
        "id": 200761823,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592047542
    },
    {
        "content": "<p>the output of the print is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 200761833,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592047562
    },
    {
        "content": "<p>the heart of the proof is the term <code>funext (λ (x : β), h)</code></p>",
        "id": 200761878,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592047613
    },
    {
        "content": "<p>I think in this particular case, I was looking for the answer</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">x_1</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>as the equivalent of what <code>ext1</code> was doing</p>",
        "id": 200761931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592047686
    },
    {
        "content": "<p>yes, I think the <code>#print</code> statement tells you that</p>",
        "id": 200761937,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592047740
    },
    {
        "content": "<p>Thanks for the help, anyway.</p>",
        "id": 200761989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592047802
    },
    {
        "content": "<p>there's no general algorithm for translating a term-mode proof into an \"idiomatic\" tactic proof</p>",
        "id": 200762020,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592047828
    },
    {
        "content": "<p>i think most people here only care about proofs up to an equivalence relation \"how fast does it run, how well can you understand what's happening by reading it, how robust is it to minor changes in the underlying libraries\"<br>\n(I might be missing something)</p>",
        "id": 200762087,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592047963
    },
    {
        "content": "<p>(so we have good tooling to answer those kinds of questions, and may not have good tooling to answer other kinds of questions about proofs)</p>",
        "id": 200762140,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592048045
    },
    {
        "content": "<p><code>show_term</code> will print terms with placeholders, so if it's it isn't the final step in a proof, you can use <code>refine ...</code>, replacing <code>...</code> with the output of <code>show_term</code>.</p>",
        "id": 200762746,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592049147
    },
    {
        "content": "<p>Of course, many tactics will produce proof terms that you would not want to copy and paste.</p>",
        "id": 200762747,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592049161
    },
    {
        "content": "<p>I'm finding some irritating behavior with <code>show_term</code>. I'd assumed that if I have a term like<br>\n<code>(begin show_term{ some, tactics, } end)</code>, then I can replace the whole thing with the output of show_term. In my case though, doing so gives an error</p>",
        "id": 200762916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592049460
    },
    {
        "content": "<p>well you don't want to place a raw term inside of your tactic script. is the problem that you can't make it work even with refine?</p>",
        "id": 200762975,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592049563
    },
    {
        "content": "<p>do you want to show an example?</p>",
        "id": 200762976,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592049569
    },
    {
        "content": "<p>oh, i see, you got to the end of the proof and show_term isn't giving you a complete proof</p>",
        "id": 200763036,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592049658
    },
    {
        "content": "<p>Yeah, was just constructing the MWE</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">σ</span> <span class=\"n\">c</span> <span class=\"n\">b</span>\n<span class=\"kn\">notation</span> <span class=\"n\">τ</span> <span class=\"err\">∘</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Prove that composition is associative -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">comp_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">associative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">comp</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b_1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">to_eq</span> <span class=\"err\">$</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n        <span class=\"o\">(</span><span class=\"k\">begin</span>\n            <span class=\"n\">show_term</span><span class=\"o\">{</span>\n                <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rxy</span><span class=\"o\">,</span> <span class=\"n\">syz</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">tzw</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">rxy</span> <span class=\"err\">$</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"err\">$</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">syz</span> <span class=\"n\">tzw</span><span class=\"o\">)</span>\n            <span class=\"o\">}</span>\n        <span class=\"kn\">end</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">begin</span>\n            <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rxy</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">syz</span><span class=\"o\">,</span> <span class=\"n\">tzw</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"err\">$</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">rxy</span> <span class=\"n\">syz</span><span class=\"o\">)</span> <span class=\"n\">tzw</span><span class=\"o\">)</span>\n        <span class=\"kn\">end</span><span class=\"o\">)</span>\n    <span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>If I replace the first <code>(begin ...  end)</code> with the result of the <code>show_term</code> within it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span><span class=\"o\">),</span>\n  <span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"n\">a_2</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2_h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">b_1</span><span class=\"o\">),</span>\n       <span class=\"n\">a_2_h</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_2_h_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tzw</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">b_1</span><span class=\"o\">),</span>\n            <span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"n\">a_2_h_left</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2_h_left_h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n                 <span class=\"n\">a_2_h_left_h</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">rxy</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">syz</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"bp\">⟨</span><span class=\"n\">rxy</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"bp\">⟨</span><span class=\"n\">syz</span><span class=\"o\">,</span> <span class=\"n\">tzw</span><span class=\"bp\">⟩⟩</span><span class=\"o\">))))</span>\n</code></pre></div>\n\n\n<p>I get the error</p>\n<div class=\"codehilite\"><pre><span></span><code>invalid &#39;Exists.dcases_on&#39; application, elaborator has special support for this kind of application (it is handled as an &quot;eliminator&quot;), but expected type must not contain metavariables\n</code></pre></div>",
        "id": 200763038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592049661
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200763093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592049726
    },
    {
        "content": "<p>This is taken from <a href=\"https://www.codewars.com/kata/5ea9b14c9b7bf50001b88e55/train/lean\">https://www.codewars.com/kata/5ea9b14c9b7bf50001b88e55/train/lean</a>, where I don't appear to have <code>rintros</code> available to me, so I was trying to work out the replacement.</p>",
        "id": 200763234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592050055
    },
    {
        "content": "<p><code>rintros</code> should work fine on codewars, as long as you have <code>import tactic</code></p>",
        "id": 200763285,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592050115
    },
    {
        "content": "<p>disclaimer: I personally have spent no time trying to build long term proofs<br>\nI think the way that people build long term proofs is with holes</p>",
        "id": 200763287,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592050121
    },
    {
        "content": "<p>codewars is running... lean community 3.11? with the last mathlib that was published before 3.12?</p>",
        "id": 200763294,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592050156
    },
    {
        "content": "<p><code>rintros</code> is a lot older than that I think</p>",
        "id": 200763298,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592050181
    },
    {
        "content": "<p>Whoops, typo as <code>import tactics</code>.</p>\n<p>Still, would like to understand what rintros is doing for me in that example</p>",
        "id": 200763342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592050208
    },
    {
        "content": "<p>But it's hard to do so when the supposed <code>show_term</code> replacement doesn't actually work</p>",
        "id": 200763348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592050244
    },
    {
        "content": "<p><code>rintros</code> is <code>intros, rcases</code><br>\n(so you can make the terms a little shorter and get to the truth more quickly by focusing in on the <code>rcases</code> part)</p>",
        "id": 200763349,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592050251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>rcases</code> is doing repeated <code>cases</code>. <code>cases</code> , even recursive <code>cases</code>, can be mimicked in term mode using <code>let &lt;x, y, z, ...&gt; = proof in proof</code></p>",
        "id": 200763887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592051157
    },
    {
        "content": "<p>Here's an even simpler reproduction of <code>show_term</code> failing:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">σ</span> <span class=\"n\">c</span> <span class=\"n\">b</span>\n<span class=\"kn\">notation</span> <span class=\"n\">τ</span> <span class=\"err\">∘</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">show_term_doesnt_work</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">begin</span>\n        <span class=\"n\">show_term</span><span class=\"o\">{</span>\n            <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rxy</span><span class=\"o\">,</span> <span class=\"n\">syz</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">tzw</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">rxy</span> <span class=\"err\">$</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"err\">$</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">syz</span> <span class=\"n\">tzw</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"kn\">end</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>The result of <code>show_term</code>is the same as above, but when you actually use the suggested term as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">σ</span> <span class=\"n\">c</span> <span class=\"n\">b</span>\n<span class=\"kn\">notation</span> <span class=\"n\">τ</span> <span class=\"err\">∘</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">show_term_doesnt_work</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span><span class=\"o\">),</span>\n      <span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"n\">a_2</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2_h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">b_1</span><span class=\"o\">),</span>\n           <span class=\"n\">a_2_h</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_2_h_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tzw</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">b_1</span><span class=\"o\">),</span>\n                <span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"n\">a_2_h_left</span>\n                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2_h_left_h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n                     <span class=\"n\">a_2_h_left_h</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">rxy</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">syz</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"bp\">⟨</span><span class=\"n\">rxy</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"bp\">⟨</span><span class=\"n\">syz</span><span class=\"o\">,</span> <span class=\"n\">tzw</span><span class=\"bp\">⟩⟩</span><span class=\"o\">)))))</span>\n</code></pre></div>\n\n\n<p>You get the same error as above,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"err\">&#39;</span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">dcases_on&#39;</span> <span class=\"n\">application</span><span class=\"o\">,</span> <span class=\"n\">elaborator</span> <span class=\"n\">has</span> <span class=\"n\">special</span> <span class=\"n\">support</span> <span class=\"n\">for</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">application</span> <span class=\"o\">(</span><span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">handled</span> <span class=\"n\">as</span> <span class=\"n\">an</span> <span class=\"s2\">&quot;eliminator&quot;</span><span class=\"o\">),</span> <span class=\"n\">but</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">must</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"n\">metavariables</span>\n</code></pre></div>",
        "id": 200764277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592051713
    },
    {
        "content": "<p>It's not that <code>show_term</code> is failing--it printed what I assume is the actual proof term; it's just that Lean can't actually re-elaborate it</p>",
        "id": 200764327,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051767
    },
    {
        "content": "<p>Can you explain why some terms can't be re-elaborated?</p>",
        "id": 200764339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592051811
    },
    {
        "content": "<p>Because the default is to hide implicit arguments like all the induction motives, but for whatever reason Lean can't re-infer them</p>",
        "id": 200764341,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051816
    },
    {
        "content": "<p>If you use <code>set_option pp.all true</code> then you would get a term more likely to round-trip</p>",
        "id": 200764350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051833
    },
    {
        "content": "<p>Thanks, that did the trick. It would be nice if <code>show_term</code> could only put in the information that lean needs to round-trip</p>",
        "id": 200764396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592051898
    },
    {
        "content": "<p>It's hard enough to consistently render a string that Lean will be able to re-elaborate, but by default it's trying to produce somthing vaguely human-readable as well and then the problem is basically impossible.</p>",
        "id": 200764407,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Determining.20the.20lemma.20applied.20by.20ext1/near/200764396\">said</a>:</p>\n<blockquote>\n<p>the information that lean needs to round-trip</p>\n</blockquote>\n<p>For this to be well-defined the elaboration has to have some kind of locality property which I'm not sure is true in practice.</p>",
        "id": 200764487,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592052060
    },
    {
        "content": "<p>In other words: could adding more information in a deep sub-term affect the elaboration of some outer part of the structure? I suspect so, and then the search space for this kind of thing would be huge.</p>",
        "id": 200764506,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592052101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I thought you just wanted to see the term to see which lemmas had been used? Making the pretty printer an inverse of the elaborator is a much harder problem</p>",
        "id": 200764941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592052779
    },
    {
        "content": "<p>Actually, I think the specific problem here is that lean is using projection notation for <code>elab_as_eliminator</code> functions</p>",
        "id": 200765008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052895
    },
    {
        "content": "<p>which basically never works</p>",
        "id": 200765015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052905
    },
    {
        "content": "<p>you can locally fix this by setting some option</p>",
        "id": 200765023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052920
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">σ</span> <span class=\"n\">c</span> <span class=\"n\">b</span>\n<span class=\"kn\">notation</span> <span class=\"n\">τ</span> <span class=\"err\">∘</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">structure_projections</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">begin</span>\n        <span class=\"n\">show_term</span><span class=\"o\">{</span>\n            <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rxy</span><span class=\"o\">,</span> <span class=\"n\">syz</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">tzw</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">rxy</span> <span class=\"err\">$</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"err\">$</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">syz</span> <span class=\"n\">tzw</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"kn\">end</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">b_1</span><span class=\"o\">),</span>\n  <span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"n\">a_2</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2_h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">b_1</span><span class=\"o\">),</span>\n       <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"n\">a_2_h</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_2_h_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∘</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a_1</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tzw</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">b_1</span><span class=\"o\">),</span>\n            <span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"n\">a_2_h_left</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2_h_left_h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n                 <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"n\">a_2_h_left_h</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">rxy</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">syz</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">y</span> <span class=\"bp\">⟨</span><span class=\"n\">rxy</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"bp\">⟨</span><span class=\"n\">syz</span><span class=\"o\">,</span> <span class=\"n\">tzw</span><span class=\"bp\">⟩⟩</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 200765118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592053031
    }
]