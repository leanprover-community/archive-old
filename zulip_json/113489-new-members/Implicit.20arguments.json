[
    {
        "content": "<p>I would like to use the lemma <code>continuous_linear_map.has_fderiv_within_at</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/fderiv.html#continuous_linear_map.has_fderiv_within_at\">docs</a>), which takes 5 implicit arguments, 5 type annotations, and one explicit argument.  I would also like to explicitly provide one of the implicit arguments (<code>x</code> in the docs).</p>\n<p>I gather that <code>@</code> is used to make implicit arguments explicit, although I am not familiar with the syntax.  Is there a way of using it which makes explicit only the one implicit argument I need, and not all the others?</p>",
        "id": 201430351,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1592594452
    },
    {
        "content": "<p>nope...</p>",
        "id": 201430368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592594471
    },
    {
        "content": "<p>There's <code>@@</code> which does something I've forgotten (but it will say in TPIL). It's vanishingly unlikely that it will solve your problem. I've heard that in other languages you can do things like <code>@@@f {thing_i_want_to_specify := this} ...</code> but not in Lean</p>",
        "id": 201430552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592594552
    },
    {
        "content": "<p>Not in Lean 3, but in Lean 4 yes I believe.</p>",
        "id": 201430615,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592594584
    },
    {
        "content": "<p>OK, so it will be messy.  What is the syntax exactly?  I cannot see how to provide the type annotations.</p>",
        "id": 201430673,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1592594623
    },
    {
        "content": "<p>Sebastien, you wrote this lemma <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span>  Is it easy to explain why <code>x</code> is implicit?</p>",
        "id": 201430752,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1592594668
    },
    {
        "content": "<p>Just underscores everywhere, and it will infer the types and instances from the <code>linear_map</code> you gave it</p>",
        "id": 201430910,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592594789
    },
    {
        "content": "<p>That's the standard style in the topology/analysis part of the library, initiated by Johannes Hölzl. The idea is that you will use it as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at_within_at</span> <span class=\"o\">(</span><span class=\"n\">complicated</span> <span class=\"n\">expression</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">complicated</span> <span class=\"n\">expression</span> <span class=\"n\">again</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">thing</span> <span class=\"n\">built</span> <span class=\"kn\">using</span> <span class=\"n\">the</span> <span class=\"n\">lemmas</span><span class=\"o\">,</span> <span class=\"n\">where</span> <span class=\"n\">x</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">inferred</span> <span class=\"k\">from</span> <span class=\"n\">the</span> <span class=\"n\">goal</span>\n</code></pre></div>\n\n\n<p>95% of the time, it is super-efficient. 5% of the time, you need the <code>@</code>-version and underscores.</p>",
        "id": 201431090,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592594896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> thank you, that's much better than I feared!</p>",
        "id": 201431313,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1592595036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I think I understand, the point is that only the definitions (eg <code>has_fderiv_within_at</code>), not the lemmas, include <code>x</code> explicitly?</p>",
        "id": 201431501,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1592595140
    },
    {
        "content": "<p>Yes, precisely.</p>",
        "id": 201432120,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592595562
    },
    {
        "content": "<p>Oh sorry Heather! Yes, it's just lots of underscores. I thought you were asking if they could be avoided. Search mathlib for <code>_ _ _ _</code> to see plenty of examples of this :-) I think the last time I looked the record was about 8</p>",
        "id": 201432576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592595861
    },
    {
        "content": "<p>somehow this reminds me of <a href=\"https://github.com/torvalds/linux/blob/v5.4/include/linux/rcupdate.h#L310\">https://github.com/torvalds/linux/blob/v5.4/include/linux/rcupdate.h#L310</a></p>",
        "id": 201433104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592596152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Implicit.20arguments/near/201432576\">said</a>:</p>\n<blockquote>\n<p>Oh sorry Heather! Yes, it's just lots of underscores. I thought you were asking if they could be avoided. Search mathlib for <code>_ _ _ _</code> to see plenty of examples of this :-) I think the last time I looked the record was about 8</p>\n</blockquote>\n<p>No, 11 :)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">is_add_group_hom_map</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_add_group_hom_extension</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">((</span><span class=\"n\">continuous_coe</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 201433475,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592596387
    },
    {
        "content": "<p>woohoo -- we beat Linux!</p>",
        "id": 201433614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592596478
    }
]