[
    {
        "content": "<p>My goal here is given a <code>set Prop</code>, let's say <code>{s1,s2,⋯,sn}</code> to create a <code>Prop</code> <code>s1 ∧ s2 ∧ ⋯ ∧ sn</code>, so to do this I wanted to use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finset.fold</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n        <span class=\"o\">[</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">is_commutative</span> <span class=\"n\">β</span> <span class=\"n\">op</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_associative</span> <span class=\"n\">β</span> <span class=\"n\">op</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>So as far as I understand, I need to make two instances for <code>is_commutative</code> and <code>is_associative</code> for the <code>and</code> operator. So I tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">my_and_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_commutative</span> <span class=\"kt\">Prop</span> <span class=\"n\">and</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">and.comm</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Where I got the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"o\">{</span><span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"n\">and.comm</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">}</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">and.comm</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∧</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">∧</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there any way which I can turn this <code>↔</code> into an equality? Or I won't be able to use <code>finset.fold</code>.</p>",
        "id": 229386197,
        "sender_full_name": "Joao Bregunci",
        "timestamp": 1615241876
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">my_and_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_commutative</span> <span class=\"kt\">Prop</span> <span class=\"n\">and</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and.comm</span><span class=\"o\">]⟩</span>\n</code></pre></div>",
        "id": 229386721,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615242019
    },
    {
        "content": "<p>Fantastic Bryan, sorry but can you shine a light on this lambda expression? This <code>rw [and.comm]</code> is creating the equality how?</p>",
        "id": 229387552,
        "sender_full_name": "Joao Bregunci",
        "timestamp": 1615242401
    },
    {
        "content": "<p>I'm not sure of all the details here, but the <code>by</code> keyword enters tactic mode, and then I use the <code>rw</code> tactic, which apparently is able to do some extra cleanup when rewriting with <code>and.comm</code>.</p>\n<p><strong>Edit</strong>: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#show_term\">tactic#show_term</a> shows the term that's created by the tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">my_and_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_commutative</span> <span class=\"kt\">Prop</span> <span class=\"n\">and</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and.comm</span><span class=\"o\">]}⟩</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Try this: exact (id (eq.rec (eq.refl ((a ∧ b) = (b ∧ a))) (propext and.comm))).mpr (eq.refl (b ∧ a))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 229387746,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615242488
    },
    {
        "content": "<p>Ah, I see, this is simpler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">my_and_comm</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_commutative</span> <span class=\"kt\">Prop</span> <span class=\"n\">and</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">propext</span> <span class=\"bp\">$</span> <span class=\"n\">and.comm</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>So <code>rw</code> (and <code>simp</code>) apply <code>propext</code> when necessary to close goals.</p>",
        "id": 229388377,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615242778
    },
    {
        "content": "<p>It turns out that <code>(∧)</code> (which is <code>and</code> but using its notation; this is the \"section\" of the operator, giving a function of two arguments) already has an <code>is_commutative</code> instance somehow through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inf_is_commutative\">docs#inf_is_commutative</a>.  I can't say I fully understand how this works.</p>",
        "id": 229401947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1615249898
    },
    {
        "content": "<p>Ah, I bet it's from the <code>boolean_algebra</code> structure on <code>Prop</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/boolean_algebra_Prop\">docs#boolean_algebra_Prop</a></p>",
        "id": 229402106,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615249999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"362285\">@Joao Bregunci</span> The simplest way to make a conjunction out of an arbitrary set of propositions, not necessarily even finite, is using forall: <code>\\forall p \\in s, p</code></p>",
        "id": 229424745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615268077
    },
    {
        "content": "<p>Thanks Mario, I was overcomplicating thinks, but I at least learned a few little things <code>:)</code>. I have  a tendency to always think like functional programming, so whenever I see a problem I try to put <code>map</code>, <code>fold</code>, <code>filter</code>, <code>zip</code> everywhere... This aspect of Lean, so far in most tutorials that I've seen, are a little bit disappointing to say, at least in my view.</p>",
        "id": 229481271,
        "sender_full_name": "Joao Bregunci",
        "timestamp": 1615298685
    },
    {
        "content": "<p>The definitions are the same as in Haskell and the theorems about the definitions are typically proved directly after the definitions in the source code. I agree that they don't come up much in the docs! These kinds of constructions come up much more in things like program verification. I am about to finish 16 hours of lectures on mathematics in lean this week and I never mentioned fold or filter or zip once, but we did talk about things like <a href=\"http://filter.map\">filter.map</a> (but never <a href=\"http://list.map\">list.map</a>).</p>",
        "id": 229485502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615300311
    }
]