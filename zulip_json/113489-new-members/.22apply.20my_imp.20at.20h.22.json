[
    {
        "content": "<p>Is there a tactic I can use to apply a lemma at a hypothesis, rather than applying it in reverse at the goal? basically <code>have h := my_imp h</code>?</p>",
        "id": 201678096,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592873192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306644\">@Jason Orendorff</span> <code>apply_fun f at h</code></p>",
        "id": 201678126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592873254
    },
    {
        "content": "<p>I hope that works</p>",
        "id": 201678134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592873265
    },
    {
        "content": "<p>hmm, that didn't work for me. the description of the tactic says it's for equations and inequalities</p>",
        "id": 201678498,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592873677
    },
    {
        "content": "<p>Too bad</p>",
        "id": 201678774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592874010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306644\">@Jason Orendorff</span> In that case I would use <code>replace h := my_imp h</code></p>",
        "id": 201678789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592874035
    },
    {
        "content": "<p>And maybe add a feature request/issue on github to extend <code>apply_fun</code></p>",
        "id": 201678802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592874062
    },
    {
        "content": "<p>oh replace is nice</p>",
        "id": 201679147,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592874475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306644\">@Jason Orendorff</span>  Try <code>specialize</code>. Funny name, but it's supposed to be like the dual of <code>generalize</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">true</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201700299,
        "sender_full_name": "Chris B",
        "timestamp": 1592901434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> This is going the other way. Not providing an argument to hypothesis <code>h</code>, but using <code>h</code> as argument to some lemma.</p>",
        "id": 201701005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592901920
    },
    {
        "content": "<p>Oh, I see what you're saying. I misread the question.</p>",
        "id": 201709165,
        "sender_full_name": "Chris B",
        "timestamp": 1592907796
    }
]