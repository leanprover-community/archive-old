[
    {
        "content": "<p>Hi,</p>\n<p>I do not have a lot of experience using computer theorem provers, and I have just started trying to learn Lean. As practice I am attempting to formalize and prove that the Principle of Induction implies the Principle of Induction from a Starting Point. So far I have:</p>\n<div class=\"codehilite\"><pre><span></span>open nat\n\n-- Principle of Induction -&gt; Principle of Induction from a Starting Point\nexample : ( forall P : nat -&gt; Prop, ( ( P 0 /\\ ( forall n, ( P n -&gt; P (n + 1) ) ) ) -&gt; ( forall n, P n ) ) ) -&gt; ( forall Q : nat -&gt; Prop, forall m, ( ( Q m /\\ ( forall n, ( ( n &gt;= m ) -&gt; ( Q n -&gt; Q (n + 1) ) ) ) ) -&gt; ( forall n, ( ( n &gt;= m ) -&gt; Q n ) ) ) ) :=\n    assume a1 : forall P : nat -&gt; Prop, ( ( P 0 /\\ ( forall n, ( P n -&gt; P (n + 1) ) ) ) -&gt; ( forall n, P n ) ),\n        assume Q : nat -&gt; Prop,\n            assume m : nat,\n                assume a2 : ( Q m /\\ ( forall n, ( ( n &gt;= m ) -&gt; ( Q n -&gt; Q (n + 1) ) ) ) ),\n                have s1 : Q m, from and.left a2,\n                have s2 : forall n, ( ( n &gt;= m ) -&gt; ( Q n -&gt; Q (n + 1) ) ), from and.right a2,\n                have s3 : forall n, ( Q (n + m) -&gt; Q ((n + m) + 1) ), from\n                    assume n : nat,\n                    have s4 : ( ( (n + m) &gt;= m ) -&gt; ( Q (n + m) -&gt; Q ((n + m) + 1) ) ), from s2 (n + m),\n                    have s5 : (n + m) &gt;= m, from sorry,\n                    show ( Q (n + m) -&gt; Q ((n + m) + 1) ), from s4 s5,\n\n                -- define P&#39; n to hold if and only if Q (m + n) holds\n                -- then P&#39; 0 holds by s1, and forall n, ( P&#39; n -&gt; P&#39; (n + 1) ) holds by s3\n                -- then forall n, P&#39; n holds by a1\n                -- then Q (m + n) holds for all n\n                -- then Q holds for all n &gt;= m\n</pre></div>\n\n\n<p>I am currently trying to define a predicate P' n : nat -&gt; Prop that holds if and only if the predicate Q holds for m + n. Is there any chance that someone could show me how this can be done?</p>\n<p>Thank you very much for your time,<br>\nPatrick</p>",
        "id": 148346494,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1543208076
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span> Welcome to Lean (and Zulip).</p>",
        "id": 148347104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543209170
    },
    {
        "content": "<p>This is certainly possible.</p>",
        "id": 148347120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543209192
    },
    {
        "content": "<p>By the way (depending on taste) you can make your code a bit more readable by using unicode.<br>\nFor example, you can type <code>\\and</code> or <code>\\to</code> to get nice symbols for <code>/\\</code> and <code>-&gt;</code>.</p>",
        "id": 148347174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543209246
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 148347184,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1543209286
    },
    {
        "content": "<p>Are you using mathlib?</p>",
        "id": 148347204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543209330
    },
    {
        "content": "<p>Because there must be some lemma in <code>data/nat/basic.lean</code> that will tell you that <code>(n - m) + m = n</code> if <code>n ≥ m</code>.</p>",
        "id": 148347211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543209359
    },
    {
        "content": "<p>No. I just read about it a couple of minutes ago actually.</p>",
        "id": 148347271,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1543209443
    },
    {
        "content": "<p>Aah, it will be very helpful. There's tons of useful little facts in there.</p>",
        "id": 148347275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543209461
    },
    {
        "content": "<p>Do you have a CS or a maths background, or both?</p>",
        "id": 148347279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543209475
    },
    {
        "content": "<p>I did an undergraduate degree in CS and physics, and have a strong interest in math. I started studying mathematical logic about a year ago in an attempt to understand computer proof assistants.</p>",
        "id": 148347497,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1543209861
    },
    {
        "content": "<p>Ok, cool. There's a nice mix of CS and math in this community.</p>",
        "id": 148347559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543210034
    },
    {
        "content": "<blockquote>\n<p>Because there must be some lemma in <code>data/nat/basic.lean</code> that will tell you that <code>(n - m) + m = n</code> if <code>n ≥ m</code>.</p>\n</blockquote>\n<p>I'm sorry, I'm not certain how I would use this in the proof. Is this in relation to step s5?</p>",
        "id": 148348284,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1543211461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span> I would first state something like <code>let P' : Prop := foobar,</code><br>\nand then <code>have quux : Q \\iff P' := xyzzy,</code></p>",
        "id": 148349209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543213367
    },
    {
        "content": "<p>In that latter proof you will need some lemma from mathlib, I guess.</p>",
        "id": 148349216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543213399
    },
    {
        "content": "<p>To define something in a proof, you can use <code>let</code>. In this case <code>let P' := λ n, Q (m + n)</code> will do. Here is a short proof following mathlib style. This is probably too dense for a first cut but I'm sure someone around here can unpack this a bit.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">P&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">P&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">H</span> <span class=\"n\">P&#39;</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_right</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">P&#39;</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel&#39;</span> <span class=\"n\">mn</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n</pre></div>",
        "id": 148353577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543220790
    },
    {
        "content": "<p><code>simp [P'] at this</code> is using Lean's inbuilt simplifier to do a lot of dirty work involving equalities; <code>rwa</code> means \"rewrite, then use an assumption\". Both <code>simp</code> and <code>rw</code> are talked about in Theorem Proving in Lean, in the chapter on tactics: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html</a></p>",
        "id": 148353667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543220953
    },
    {
        "content": "<p>Thank you! This has helped.</p>",
        "id": 148691325,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1543384132
    }
]