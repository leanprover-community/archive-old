[
    {
        "content": "<p>I have read ch.3 of Theorem Proving in Lean and I am currently in ch. 4. I have tried some direct proof tactics in the examples provided and in the Natural Number Game. I am curious how to do the contradiction proofs. Can anyone tell me how contradiction works in lean to get me going?</p>",
        "id": 190787386,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584397311
    },
    {
        "content": "<p>There is a constant called <code>classical.by_contradiction</code> which has the type <code>(\\not p -&gt; false) -&gt; p</code>. That is, if you apply it when your goal is <code>p</code>, then your new goal is <code>\\not p -&gt; false</code>, and you can then <code>assume hnp : \\not p</code> and proceed to prove <code>false</code></p>",
        "id": 190787516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584397409
    },
    {
        "content": "<p>I applied <code>classical.by_contradiction</code> within my proof but Lean is giving me an error?! Do I apply it outside of my proof or within?</p>",
        "id": 190787914,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584397681
    },
    {
        "content": "<p>Do I need to import anything too?</p>",
        "id": 190788027,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584397758
    },
    {
        "content": "<p>Here's an example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">andNeg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">nPnQ</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span> <span class=\"n\">pORq</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">pORq</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nPnQ</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nPnQ</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">hq</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190788037,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584397764
    },
    {
        "content": "<p>Note that <code>by_contradiction</code> is also the name of a tactic, that combines the application of the theorem <code>classical.by_contradiction</code> and the <code>assume</code> step into one</p>",
        "id": 190788142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584397811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"272522\">@Dev-Indra</span> your comment is too vague to guess what the error is. You should post code</p>",
        "id": 190788214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584397869
    },
    {
        "content": "<p>You need to <code>open classical</code> or use <code>classical.by_contradiction</code> instead of just <code>by_contradiction</code>.</p>",
        "id": 190788319,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584397934
    },
    {
        "content": "<p>@  <strong>Daniel Keys</strong> Ok I see. I will give it a shot.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> . Here was my error message when I just typed <code>classical.by_contradiction</code> within my proof.</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  tactic.istep 130 2 130 2 classical.by_contradiction\nterm\n  classical.by_contradiction\nhas type\n  (¬?m_1 → false) → ?m_1 : Prop\nbut is expected to have type\n  tactic ?m_1 : Type ?\n</pre></div>",
        "id": 190788402,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584398017
    },
    {
        "content": "<p>you have to type <code>apply classical.by_contradiction</code></p>",
        "id": 190788479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584398064
    },
    {
        "content": "<p>because <code>classical.by_contradiction</code> is a theorem, not a tactic</p>",
        "id": 190788500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584398077
    },
    {
        "content": "<p>So thanks, I see</p>",
        "id": 190788516,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584398088
    },
    {
        "content": "<p><code>by_contradiction</code> is a tactic with a similar name, used in Daniel's proof above</p>",
        "id": 190788538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584398102
    },
    {
        "content": "<p>but tactics and theorems live in different namespaces</p>",
        "id": 190788563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584398120
    },
    {
        "content": "<p>I just noticed you're in chapter 4. Tactics are introduced in chapter 5. Sorry I jumped too far ahead.</p>",
        "id": 190788728,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584398231
    },
    {
        "content": "<p>if you do the NNG then tactics are there from day 1</p>",
        "id": 190788892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584398378
    }
]