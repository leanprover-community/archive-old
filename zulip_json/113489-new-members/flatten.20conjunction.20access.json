[
    {
        "content": "<p>Noob question, is it possible to flatten conjunction access?</p>\n<p>At the end of the <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#conjunction\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#conjunction\">conjunction section in the tutorial</a>, it says</p>\n<blockquote>\n<p>Lean also allows you to flatten nested constructors that associate to the right</p>\n</blockquote>\n<p>This is nice, because I can write <code>⟨p, q, r⟩</code> instead of <code>⟨p, ⟨q, r⟩⟩</code>.</p>\n<p>I'd like to be able to flatten access.  Given <code>h : p ∧ q ∧ r</code>, how do I get the 3rd position in a fixed number of characters?<br>\ni.e. <code>h.3</code> instead of <code>h.2.2</code>, though <code>h.3</code> is not supported for conjunction.</p>\n<p>If I had a conjunction of n items, it seems silly to have to write <code>h.2.2.</code> ... <code>.2.2</code> to get the last item.<br>\n<a href=\"https://leanprover.github.io/live/3.4.1/#code=variables%20p%20q%20r%20:%20Prop%0A%0Aexample%20(hp%20:%20p)%20(hq%20:%20q)%20(hr%20:%20r)%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20r%20:=%20%E2%9F%A8hp,%20%E2%9F%A8hq,%20hr%E2%9F%A9%E2%9F%A9%0Aexample%20(hp%20:%20p)%20(hq%20:%20q)%20(hr%20:%20r)%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20r%20:=%20%E2%9F%A8hp,%20hq,%20hr%E2%9F%A9%0Aexample%20(h%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20r)%20:%20r%20%E2%88%A7%20q%20%E2%88%A7%20p%20:=%20%E2%9F%A8h.2.2,%20h.2.1,%20h.1%E2%9F%A9%0Aexample%20(h%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20r)%20:%20r%20%E2%88%A7%20q%20%E2%88%A7%20p%20:=%20%E2%9F%A8h.3,%20h.2,%20h.1%E2%9F%A9%20%20--%20this%20doesn't%20work%0A%0A%0A%0Aexample%20(h%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20r%20%E2%88%A7%20(p%20%E2%88%A8%20q)%20%E2%88%A7%20(p%20%E2%88%A8%20r)%20%E2%88%A7%20(q%20%E2%88%A8%20r)%20%E2%88%A7%20(p%20%E2%88%A8%20p)%20%E2%88%A7%20(q%20%E2%88%A8%20q)%20%E2%88%A7%20(r%20%E2%88%A8%20r))%20:%20r%20%E2%88%A8%20r%20:=%0A%20h.2.2.2.2.2.2.2.2%20%20--%20silly%20access%0A\" title=\"https://leanprover.github.io/live/3.4.1/#code=variables%20p%20q%20r%20:%20Prop%0A%0Aexample%20(hp%20:%20p)%20(hq%20:%20q)%20(hr%20:%20r)%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20r%20:=%20%E2%9F%A8hp,%20%E2%9F%A8hq,%20hr%E2%9F%A9%E2%9F%A9%0Aexample%20(hp%20:%20p)%20(hq%20:%20q)%20(hr%20:%20r)%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20r%20:=%20%E2%9F%A8hp,%20hq,%20hr%E2%9F%A9%0Aexample%20(h%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20r)%20:%20r%20%E2%88%A7%20q%20%E2%88%A7%20p%20:=%20%E2%9F%A8h.2.2,%20h.2.1,%20h.1%E2%9F%A9%0Aexample%20(h%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20r)%20:%20r%20%E2%88%A7%20q%20%E2%88%A7%20p%20:=%20%E2%9F%A8h.3,%20h.2,%20h.1%E2%9F%A9%20%20--%20this%20doesn't%20work%0A%0A%0A%0Aexample%20(h%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20r%20%E2%88%A7%20(p%20%E2%88%A8%20q)%20%E2%88%A7%20(p%20%E2%88%A8%20r)%20%E2%88%A7%20(q%20%E2%88%A8%20r)%20%E2%88%A7%20(p%20%E2%88%A8%20p)%20%E2%88%A7%20(q%20%E2%88%A8%20q)%20%E2%88%A7%20(r%20%E2%88%A8%20r))%20:%20r%20%E2%88%A8%20r%20:=%0A%20h.2.2.2.2.2.2.2.2%20%20--%20silly%20access%0A\">examples</a>)</p>",
        "id": 192186618,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585505260
    },
    {
        "content": "<p>I don't think we have anything like this, but it would be easy to write (but it's probably less useful than you think it is).</p>",
        "id": 192186665,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585505322
    },
    {
        "content": "<p>Is a list of type Prop possible? Seems to me that would be equivalent to multi-way conjunction.</p>",
        "id": 192186827,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585505553
    },
    {
        "content": "<p>Although it's rare to get a <code>.2.2.2</code> I've certainly seen plenty of <code>.2.1</code>'s and <code>.2.2</code>'s in code which undergraduates produce.</p>",
        "id": 192186898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585505652
    },
    {
        "content": "<p>I think most of those disappeared from my code once I learned to use <code>rcases</code>.</p>",
        "id": 192186909,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585505684
    },
    {
        "content": "<p>I guess my style is bad. I was writing a proof that uses <code>h.2.2.2.2</code>. What is generally the approach to avoiding many nested conjunctions in the statement of a theorem?</p>",
        "id": 192186990,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585505809
    },
    {
        "content": "<p>I think Bryan is right -- I was wondering why I hadn't written <code>.2.2</code> recently.</p>",
        "id": 192187024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585505866
    },
    {
        "content": "<p>When you <code>intro</code>d <code>h</code>, you should have <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\"><code>rintro</code>'d</a> it.</p>",
        "id": 192187067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585505885
    },
    {
        "content": "<p>Or if you didn't ever <code>intro</code> it, you might want to <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\"><code>rcases</code></a> it.</p>",
        "id": 192187071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585505901
    },
    {
        "content": "<p>Dan, you probably missed the <code>assumption_1 -&gt; assumption_2 -&gt; assumption_3 -&gt; conclusion</code> idiom.</p>",
        "id": 192187100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585505965
    },
    {
        "content": "<p>And also the fact you can put assumptions left of the colon.</p>",
        "id": 192187109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585505982
    },
    {
        "content": "<p>This is what I was doing.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">composite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">prime</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">composite_factors</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ngt2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">composite</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>(also spawned my question about <a href=\"#narrow/stream/113489-new-members/topic/chained.20inequalities.20.3F\" title=\"#narrow/stream/113489-new-members/topic/chained.20inequalities.20.3F\">chained inequalities</a>)</p>\n<p>So I could instead write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">composite_factors&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ngt2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">composite</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>In the body, I would write <code>λ (h1 : 1 &lt; a) (h2 : a &lt; n) (h3 : 1 &lt; b) (h4 : b &lt; n), ...</code><br>\ninstead of <code>have h1 : 1 &lt; a, from h.1, have h2 : a &lt; n, from h.2.1, have h3 : 1 &lt; b, from h.2.2.1, have h4 : b &lt; n, h.2.2.2, ...</code></p>",
        "id": 192188012,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585507165
    },
    {
        "content": "<p>No no, <code>composite_factors</code> is correct and <code>composite_factors'</code> is not</p>",
        "id": 192188703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585508162
    },
    {
        "content": "<p>in this case you can just pattern match wherever you assume the <code>exists</code> statement, either using <code>rintro</code> (as mentioned above) or lambda with pattern matching</p>",
        "id": 192188770,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585508277
    },
    {
        "content": "<p>In other situations though it's not that uncommon to see things like <code>h.2.2.2.2</code>. Another alternative is to use a structure.</p>",
        "id": 192188837,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585508324
    },
    {
        "content": "<p>Note that this would make <code>h.2</code> ambiguous if <code>h : p ∧ q ∧ r</code></p>",
        "id": 192196077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585518873
    }
]