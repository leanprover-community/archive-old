[
    {
        "content": "<p>Is there a lemma which will divide my proof into cases, depending on whether or not a type <code>α</code> is nonempty?  I tried things like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n\n\n<p>with no luck.</p>",
        "id": 203647500,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594566627
    },
    {
        "content": "<p>Could you quickly run over why you want this? I fear an #XY</p>",
        "id": 203647579,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1594566770
    },
    {
        "content": "<p>er, however we summon a link to something like <a href=\"https://en.wikipedia.org/wiki/XY_problem\">https://en.wikipedia.org/wiki/XY_problem</a></p>",
        "id": 203647589,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1594566805
    },
    {
        "content": "<p>This version is not provable</p>",
        "id": 203647597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594566837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <code>by_cases h : nonempty \\a</code> should work. I hope...</p>",
        "id": 203647643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594566871
    },
    {
        "content": "<p><code>if h : nonempty α then _ else _</code>, or tactic mode <code>by_cases h : nonempty α</code>, which are on some level going down to <code>em</code>. You probably don't want the negated case to say <code>α = empty</code>.</p>",
        "id": 203647646,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594566878
    },
    {
        "content": "<p>Maybe <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 203647711,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1594566981
    },
    {
        "content": "<p>Why all the XY? This seems like a very reasonable case split to me.</p>",
        "id": 203648187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594567877
    },
    {
        "content": "<p>i've had success with <code>by_cases h: nonempty \\a</code>, and then later <code>haveI := h</code> to tell typeclass inference what happened</p>",
        "id": 203650124,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594571090
    },
    {
        "content": "<p>I think if you do <code>resetI</code> after the cases you won't get duplicated names in your goal state - not that this matters that much in this case but it might be tidier at least</p>",
        "id": 203651258,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594572879
    },
    {
        "content": "<p>Thanks all!</p>",
        "id": 203651395,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594573147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Nonempty.20or.20empty/near/203647500\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Is this statement true?  It seems it would imply types have some kind of extensional equality in Lean.  Is there a way to fill in the following <code>sorry</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">my_empty</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_empty</span> <span class=\"bp\">=</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 203659082,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594584946
    },
    {
        "content": "<p>Yeah, I think it's not true, this was meant to be a placeholder for whatever the correct statement was :)</p>",
        "id": 203659219,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594585122
    },
    {
        "content": "<p>the correct statement is <code>not (nonempty A)</code> :)</p>",
        "id": 203659577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594585671
    },
    {
        "content": "<p>Ok, thanks, I wasn't  sure whether empty types were somehow special.</p>\n<p>It would be silly, but there could be an <code>is_empty</code> typeclass:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"kn\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">is_empty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">no_val</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">α</span> <span class=\"bp\">∨</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203659630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594585720
    },
    {
        "content": "<p>Once upon a time there was a version of <code>not</code> that worked on types. It was dropped for lack of use</p>",
        "id": 203659791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594586026
    },
    {
        "content": "<p>I realize <code>not nonempty</code> looks a bit funny but it has exactly the desired meaning; you can prove it is equivalent to <code>A -&gt; false</code> and use it in the obvious way fairly easily</p>",
        "id": 203659845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594586093
    },
    {
        "content": "<p>I guess the problem is that currently there is no idiomatic way to say \"this type is empty\"</p>",
        "id": 203659850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594586125
    },
    {
        "content": "<p><code>A -&gt; false</code>, <code>A \\equiv empty</code>, <code>\\n (nonempty A)</code>, etc</p>",
        "id": 203659857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594586137
    },
    {
        "content": "<p>If you search for those three I hope you will find the last one being most common</p>",
        "id": 203659898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594586167
    },
    {
        "content": "<p>Chris Hughes and I were talking about this on Thursday at Xena and he encouraged me to use A -&gt; false</p>",
        "id": 203660466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594587084
    },
    {
        "content": "<p>Yeah I (independently) thought the first was the standard idiom in mathlib</p>",
        "id": 203660872,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594587621
    },
    {
        "content": "<p>Me too!</p>",
        "id": 203665814,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594595842
    },
    {
        "content": "<p>Sounds like we should standardise a bit here --- possibly by introducing a declaration specifically for this??</p>",
        "id": 203665821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594595860
    }
]