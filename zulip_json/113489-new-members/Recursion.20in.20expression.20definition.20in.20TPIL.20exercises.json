[
    {
        "content": "<p>Thanks for everyone's help yesterday. I'm continuing with the TPIL inductive type exercises. Running into issues with well-founded recursion when trying to define an expression evaluator. I have some Haskell experience, so I think that might be hurting me here. How can I hint to the definition that working through the <code>var</code> path should decrease the complexity of the expression tree?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">expression</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">expression</span>\n\n<span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">dict</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"kn\">eval</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"kn\">eval</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">dict</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"c1\">--failed to prove recursive application is decreasing, well founded relation</span>\n<span class=\"c1\">--  @has_well_founded.r (@expression ℕ)</span>\n<span class=\"c1\">--    (@has_well_founded_of_has_sizeof (@expression ℕ) (@expression.has_sizeof_inst ℕ nat.has_sizeof))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">expression</span>\n</code></pre></div>",
        "id": 199794356,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591297967
    },
    {
        "content": "<p>I'm confused. How does the complexity decrease? Say <code>dict 0 = var 0</code>. Then <code>eval dict (var 0) = eval dict (dict 0) = eval dict (var 0) = ...</code>, no?</p>",
        "id": 199797809,
        "sender_full_name": "David Wärn",
        "timestamp": 1591299222
    },
    {
        "content": "<p>Ah, true.</p>",
        "id": 199799236,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591299800
    },
    {
        "content": "<p>Okay, then for the sake of the exercise, we can change it to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">dict</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"kn\">eval</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kn\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"kn\">eval</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dict</span> <span class=\"n\">v</span>\n</code></pre></div>\n\n\n<p>That works then, like with a <code>eval nat.succ (plus (const 9) (times (const 3) (var 2)))</code>. Thanks!</p>",
        "id": 199800191,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591300276
    }
]