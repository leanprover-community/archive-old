[
    {
        "content": "<p>The setup is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_zero_divisor</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">def</span> <span class=\"n\">is_nilpotent</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nonzero_nilpotent_is_zerodivisor</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_zero_divisor</span> <span class=\"n\">a</span>\n  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_is_zero_divisor_in_nonzero_ring</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">is_zero_divisor</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"mi\">1</span> <span class=\"bp\">⟨</span><span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>I'm trying to prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">nonzero_ring_nilpotent_is_zerodivisor</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">is_zero_divisor</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">zero_is_zero_divisor_in_nonzero_ring</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnz</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nonzero_nilpotent_is_zerodivisor</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">hnz</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>but lean is complaining:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">zero_is_zero_divisor_in_nonzero_ring</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">zero_is_zero_divisor_in_nonzero_ring</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">is_zero_divisor</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">is_zero_divisor</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>My guess is that lean isn't able to prove that <code>is_zero_divisor 0</code> is the same as <code>is_zero_divisor a</code> in the first case. How can I fix this?</p>",
        "id": 197857271,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589733325
    },
    {
        "content": "<p>Can you post a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> ?</p>",
        "id": 197858589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589735164
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">associated</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> An element a of a ring α is a zero divisor if there exists a b ∈ α</span>\n<span class=\"cm\">   such that b ≠ 0 and ab = 0. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_zero_divisor</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> An element a of a ring α is nilpotent if there exists a n ∈ ℕ such</span>\n<span class=\"cm\">   that n ≠ 0 and a^n = 0 -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_nilpotent</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nonzero_nilpotent_is_zerodivisor</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_zero_divisor</span> <span class=\"n\">a</span>\n  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_is_zero_divisor_in_nonzero_ring</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">is_zero_divisor</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"mi\">1</span> <span class=\"bp\">⟨</span><span class=\"n\">one_ne_zero</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> All nilpotents are zero divisors in a nonzero ring. -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nonzero_ring_nilpotent_is_zerodivisor</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">is_zero_divisor</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hz</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">zero_is_zero_divisor_in_nonzero_ring</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnz</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nonzero_nilpotent_is_zerodivisor</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">hnz</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197859325,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589736013
    },
    {
        "content": "<p><code>is_zero_divisor 0</code> isn't the same as <code>is_zero_divisor a</code>, even if you have some hypothesis saying <code>a = 0</code>; you need to rewrite that hypothesis before the terms become equal.</p>",
        "id": 197859431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736149
    },
    {
        "content": "<p>Yeah, I'm just failing to see how to do that</p>",
        "id": 197859446,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589736172
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">nonzero_ring_nilpotent_is_zerodivisor</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">is_zero_divisor</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_is_zero_divisor_in_nonzero_ring</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nonzero_nilpotent_is_zerodivisor</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">h</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197859521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736262
    },
    {
        "content": "<p>Ah, I was trying to avoid entering tactic mode</p>",
        "id": 197859537,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589736302
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> All nilpotents are zero divisors in a nonzero ring. -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nonzero_ring_nilpotent_is_zerodivisor</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">is_zero_divisor</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hz</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">zero_is_zero_divisor_in_nonzero_ring</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnz</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nonzero_nilpotent_is_zerodivisor</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">hnz</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197859547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736315
    },
    {
        "content": "<p>The stupid triangle is a term mode version of rewrite.</p>",
        "id": 197859554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736331
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 197859555,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589736331
    },
    {
        "content": "<p>But believe you me, it's nowhere near as powerful.</p>",
        "id": 197859560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736344
    },
    {
        "content": "<p>Oh -- I had to <code>open_locale classical</code> to get the tactic proof working by the way</p>",
        "id": 197859613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736374
    },
    {
        "content": "<p>Did you know that substitution is just induction on <code>=</code>?</p>",
        "id": 197859630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736402
    },
    {
        "content": "<p>What?</p>",
        "id": 197859641,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589736419
    },
    {
        "content": "<p><code>=</code> isn't some inbuilt thing in Lean, it's just notation for some inductive type <code>eq</code></p>",
        "id": 197859645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736427
    },
    {
        "content": "<p><code>eq x y</code> has one constructor: <code>eq.refl a</code> has type <code>eq a a</code> and that's it.</p>",
        "id": 197859715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736489
    },
    {
        "content": "<p>And when you build the inductive type, Lean adds to its environment the new type, its constructor(s) and its eliminator (i.e. its recursor).</p>",
        "id": 197859739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736549
    },
    {
        "content": "<p>When you build the naturals using the standard functional definition (Peano's axioms), the recursor Lean generates is the standard principle of mathematical recursion.</p>",
        "id": 197859745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736581
    },
    {
        "content": "<p>When you make the <code>eq</code> inductive type, the recursor it generates is this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u_2</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a_1</span>\n</code></pre></div>",
        "id": 197859795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736617
    },
    {
        "content": "<p>i.e. if you have a term of type <code>C a</code>, then for all <code>b</code> and for all proofs of <code>a = b</code>, you can get a term of type <code>C b</code></p>",
        "id": 197859806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736656
    },
    {
        "content": "<p>In other words, <code>a = b -&gt; (C a -&gt; C b)</code></p>",
        "id": 197859816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736677
    },
    {
        "content": "<p>which is <code>rw</code></p>",
        "id": 197859824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736689
    },
    {
        "content": "<p>The stupid triangle (<code>\\t</code>) is just notation for <code>eq.subst</code> (you can check this with <code>#print notation ▸</code>) and <code>eq.subst</code> is the Prop version of <code>eq.rec</code>: if <code>a = b</code> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>P</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(a)\\implies P(b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 197859912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736781
    },
    {
        "content": "<p>Did you know that \"<code>false</code> implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span>\" is just induction on <code>false</code>? ;-)</p>",
        "id": 197859937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736817
    },
    {
        "content": "<p>To give a map from <code>false</code> to anything, you just have to say where all its constructors go, but <code>false</code> has no constructors at all <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 197859991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589736855
    },
    {
        "content": "<p>I sometimes use this when I can't convince rw to do what I want : if I have the hypothesis <code>h : a = b</code> and <code>rw</code> refuses to work for some reason I've done <code>cases h</code> which does!</p>",
        "id": 197860211,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589737167
    },
    {
        "content": "<p>I often use <code>cases</code> on an equality to mean \"sub in everywhere\".</p>",
        "id": 197860361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589737373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span> you don't need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n\\not=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> in your definition of <code>is_nilpotent</code>.</p>",
        "id": 197860590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589737651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/arguing.20using.20by_cases/near/197860361\">said</a>:</p>\n<blockquote>\n<p>I often use <code>cases</code> on an equality to mean \"sub in everywhere\".</p>\n</blockquote>\n<p>Isn't the <code>subst</code> tactic meant to do this? Is there a reason to use one or the other?</p>",
        "id": 197860597,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589737663
    },
    {
        "content": "<p>Prefer the <code>subst</code> tactic when it applies (or <code>rfl</code> in an <code>rcases</code>/<code>obtain</code> pattern, which calls <code>subst</code>). It only works if one side of the equality is a variable, though, while <code>cases</code> can see through multiple layers of constructors. For example if <code>h : (a, b) = (c, d)</code> then <code>cases h</code> will replace <code>c</code> by <code>a</code> and <code>d</code> by <code>b</code> in the goal, while <code>subst h</code> will fail.</p>\n<p>But <code>cases</code> will also often make a mess when trying to reduce things to a normal form, so the result of the substitution may not be optimal, for example if <code>h : foo a = b</code> then <code>cases</code> might unfold <code>foo a</code> before substitution, causing big expressions all through your goal. In these cases, you can use <code>injection</code> and <code>subst</code> to get a bit more control over unfolding.</p>",
        "id": 197860883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589738028
    },
    {
        "content": "<p>In an <code>rcases</code> pattern, <code>rfl</code> means <code>subst</code> and <code>&lt;&gt;</code> means <code>cases</code></p>",
        "id": 197860959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589738090
    }
]