[
    {
        "content": "<p>I'm trying to prove a theorem related to permutations of finite sets. At the beginning (trying to define a predicate on permutations to assert they are cyclic) and running into an issue that I don't know how to debug. The error (which is on the very last <code>x</code> of the very last definition) is \"maximum class-instance resolution depth has been reached\". I tried restarting Lean, setting <code>class.instance_max_depth 1000</code>, and I turned on trace.class_instances, though that spits out something extremely long that I can't make sense of. How should I approach this error, as a beginner?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span> <span class=\"c1\">-- &quot;perm x&quot; is &quot;equiv x x&quot; AKA &quot;x ≃ x&quot;</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- Repeat a binary function n times</span>\n<span class=\"n\">def</span> <span class=\"n\">rep</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">rep</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Π (n : ℕ), perm (fin n) → fin n → fin n</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n        <span class=\"n\">rep</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- Predicate for a permutation on a finite set to be cyclic</span>\n<span class=\"n\">def</span> <span class=\"n\">cyclic</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rep</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 201220350,
        "sender_full_name": "Kris Brown",
        "timestamp": 1592444225
    },
    {
        "content": "<p>put a newline after your backticks tog et syntax highlighting</p>",
        "id": 201220421,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444313
    },
    {
        "content": "<p>i don't get any error</p>",
        "id": 201220456,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444394
    },
    {
        "content": "<p>you should change your instance_max_depth back to default, this may cause slowdowns for you later</p>",
        "id": 201220515,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444478
    },
    {
        "content": "<p>Thanks! and that's interesting; I'm using Lean 3.4.2 - are there any candidates for settings I could change to match your setup?</p>",
        "id": 201220562,
        "sender_full_name": "Kris Brown",
        "timestamp": 1592444536
    },
    {
        "content": "<p>around here the suggestion is to use that latest leanprover-community build with the latest mathlib</p>",
        "id": 201220580,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444602
    },
    {
        "content": "<p>managing that installation is easy with the <code>leanproject</code> tool</p>",
        "id": 201220588,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444619
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/get_started.html\">https://leanprover-community.github.io/get_started.html</a></p>",
        "id": 201220633,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444667
    },
    {
        "content": "<p>you can use the lean web editor in the meantime</p>",
        "id": 201220710,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444769
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20data.equiv.basic%0Aimport%20data.finset%0A%0Aopen%20equiv%20--%20%22perm%20x%22%20is%20%22equiv%20x%20x%22%20AKA%20%22x%20%E2%89%83%20x%22%0Aopen%20nat%0A%0A--%20Repeat%20a%20binary%20function%20n%20times%0Adef%20rep%20%7B%CE%B1%20%3A%20Type*%7D%20%3A%20%E2%84%95%20%E2%86%92%20%28%CE%B1%20%E2%86%92%20%CE%B1%29%20%E2%86%92%20%CE%B1%20%E2%86%92%20%CE%B1%0A%20%7C%200%20_%20x%20%3A%3D%20x%0A%20%7C%20%28succ%20n%29%20f%20x%20%3A%3D%20f%20%28rep%20n%20f%20x%29%0A%0A--%20%CE%A0%20%28n%20%3A%20%E2%84%95%29%2C%20perm%20%28fin%20n%29%20%E2%86%92%20fin%20n%20%E2%86%92%20fin%20n%0A%23check%20%CE%BB%20%28n%3A%E2%84%95%29%20%28p%3A%20perm%20%28fin%20n%29%29%20%28x%3A%20fin%20n%29%2C%0A%20%20%20%20%20%20%20%20rep%20n%20p.to_fun%20x%0A%0A--%20Predicate%20for%20a%20permutation%20on%20a%20finite%20set%20to%20be%20cyclic%0Adef%20cyclic%20%7Bn%20%3A%20%E2%84%95%7D%20%28p%20%3A%20perm%20%28fin%20n%29%29%20%3A%3D%0A%20%20%20%20%E2%88%83%20x%20%3A%20fin%20n%2C%20rep%20n%20p.to_fun%20x%20%3D%20x%0A\">web editor</a></p>",
        "id": 201220711,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592444769
    },
    {
        "content": "<p>3.4.2 is pretty old by now (it's the last \"official\" release before switching to community development), and in particular is missing lots of nice improvements to the typeclass search algorithm.</p>",
        "id": 201220978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592445123
    },
    {
        "content": "<p>Thanks everyone, upgrading fixed this!</p>",
        "id": 201225618,
        "sender_full_name": "Kris Brown",
        "timestamp": 1592451987
    },
    {
        "content": "<p>Can someone help me figure out what the following error message means, and how to fix it?<br>\n<code>maximum class-instance resolution depth has been reached (the limit can be increased by setting option 'class.instance_max_depth') (the class-instance resolution trace can be visualized by setting option 'trace.class_instances')</code><br>\nHere is my code :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.trace</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">smul.linear_map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">smul_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">character</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">linear_map.trace</span> <span class=\"o\">(</span><span class=\"n\">smul.linear_map</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 261002788,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1636556835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> It means that after a lot of searching Lean didn't find what it was looking for, but there was still stuff left to search.</p>",
        "id": 261003984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636557376
    },
    {
        "content": "<p>Usually, this means that it ran into an infinite loop</p>",
        "id": 261004005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636557387
    },
    {
        "content": "<p>If you hover over <code>linear_map.trace</code> or type <code>#check linear_map.trace </code> you'll see that it is expecting a ring and a module before the map</p>",
        "id": 261004009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636557387
    },
    {
        "content": "<p>Lean is probably trying to find a ring structure on some linear map or space of linear maps, and getting confused.</p>",
        "id": 261004070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636557418
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">character</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">linear_map.trace</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">smul.linear_map</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works fine</p>",
        "id": 261004140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636557450
    },
    {
        "content": "<p>as does <code>noncomputable def character : G → k :=  λ g, linear_map.trace k V (smul.linear_map k G V g)</code></p>",
        "id": 261004189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636557479
    },
    {
        "content": "<p>Thank I didn't see that. Sorry for the dumb question.</p>",
        "id": 261004561,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1636557635
    },
    {
        "content": "<p>The error message is confusing. Usually when you make a mistake like this the error is \"I was expecting a type and you gave me a morphism\" and you can easily fix the problem yourself. But when Lean just gets utterly confused, like it does in this case for some reason, the error message is far less helpful; I debugged it by just building everything piece by piece instead of all in one go.</p>",
        "id": 261004754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636557707
    },
    {
        "content": "<p>FWIW, your def is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_mul_action.to_linear_map\">docs#distrib_mul_action.to_linear_map</a>, I think</p>",
        "id": 261005121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636557841
    },
    {
        "content": "<p>Oh thanks, it's good to know :)</p>",
        "id": 261005716,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1636558074
    },
    {
        "content": "<p>If it exists, you might also be interested in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_mul_action.to_module_End\">docs#distrib_mul_action.to_module_End</a> (guess it doesn't exist, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_mul_action.to_add_monoid_End\">docs#distrib_mul_action.to_add_monoid_End</a>` should suggest what the statement is supposed to be!)</p>",
        "id": 261022550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636564790
    }
]