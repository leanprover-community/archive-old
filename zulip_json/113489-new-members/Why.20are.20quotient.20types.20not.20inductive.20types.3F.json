[
    {
        "content": "<p>From <code>Theorem proving in Lean</code>, quotient types are defined as:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">quot</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">quot</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">ind</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">quot</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">q</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n</code></pre></div>\n\n\n<p>Why are <code>quot</code> and <code>quot.mk</code> introduced as constants ? Why not use <code>inductive</code> or <code>structure</code>for  <code>quot</code> with a constructor  <code>mk</code>?</p>",
        "id": 205199183,
        "sender_full_name": "Chris M",
        "timestamp": 1595913651
    },
    {
        "content": "<p>Because there'd be no way to get equality to work the way you expect on quotient types.</p>",
        "id": 205199201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595913708
    },
    {
        "content": "<p>This is one of the lovely things about Lean. Coq doesn't provide axiomatic quotient types, and they have to live in \"setoid hell\" instead, carrying around a non-equality equivalence relation when talking about quotients.</p>",
        "id": 205199252,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595913756
    },
    {
        "content": "<p>Why is equality so much better than <code>\\iff</code>? I've heard this a lot (also in favor of univalent foundation).</p>",
        "id": 205199319,
        "sender_full_name": "Chris M",
        "timestamp": 1595913861
    },
    {
        "content": "<p>Because you can rewrite on <code>a = b</code> without verifying <code>Proper</code> (in terms of coq).</p>",
        "id": 205200243,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595915471
    },
    {
        "content": "<p>For this question, you might want to read 2.7.1 <em>Quotient types</em>, 3.8 <em>Differences from Coq</em> (particularly 7 &amp; 8) and 4.1 <em>The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span> reduction</em> (look for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ι</mi><mi>q</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\iota_q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ι</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>) in <a href=\"https://github.com/digama0/lean-type-theory/tree/v1.0\">https://github.com/digama0/lean-type-theory/tree/v1.0</a> .</p>\n<p>If I'm reading it correctly, to make quotient types work in Lean, you need these constants and the one axiom in pure Lean, plus <em>one computational rule (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>ι</mi><mi>q</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\iota_q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ι</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>) in Lean kernel</em> which doesn't exist in Coq. And Lean doesn't support adding computational rules to the kernel from pure Lean so it can't be mimicked by <code>inductive</code> etc.</p>",
        "id": 205202251,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595918265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>: carrying around a setoid (admittedly behind a type class) is exactly what <code>quotient</code> (not <code>quot</code>) does though, right?</p>",
        "id": 205202631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595918790
    },
    {
        "content": "<p>The computational rule is implemented in C++,  <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/src/kernel/quotient/quotient.cpp#L122\"><code>quotient_normalizer_extension::operator()</code></a> in Lean 3 and <a href=\"https://github.com/leanprover/lean4/blob/865bb8df97acbf21617394769e167d66584d7cfd/src/kernel/quot.h#L39\"><code>quot_reduce_rec</code></a> in Lean 4.</p>",
        "id": 205203466,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595919853
    },
    {
        "content": "<p>(I looked for the C++ code in Lean 4 because I was remotely hoping it's moved to pure Lean but no)</p>",
        "id": 205203483,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595919902
    },
    {
        "content": "<p>Actually, I was talking about this with Jeremy yesterday, and I don't think that we <em>really</em> need the quotient computation rule. We could probably get away with a propositional version of <code>quot.beta</code> without too much pain, because we still have proof irrelevance to smooth over the sharp edges of setoid hell. And if you have a non-computational quotient type, then you don't even need to axiomatize it - the usual construction of set quotients works without any extra axioms. (I think the proof of <code>funext</code> breaks though, so you would have to add that as an axiom.)</p>",
        "id": 205208677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595924711
    },
    {
        "content": "<p>From what I understand you can also replicate Lean's quotient types in Coq using unsafe features--but it's unsafe only because it happens outside the kernel; otherwise the same thing is happening as in Lean.</p>",
        "id": 205227622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595938531
    }
]