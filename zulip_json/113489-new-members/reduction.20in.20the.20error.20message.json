[
    {
        "content": "<p>Hi everybody, I have some question regarding error message to ask.</p>\n<p>When we have a hole, we can change it to just \"_\" so make lean report context and the type of the missing hole.<br>\nThe problem is that the type there is not reduce at all. Do you know how can I make lean reduce such the type?</p>\n<p>FYI: I have tried<br>\n<code>set_option pp.beta true</code><br>\nbut it doesn't work</p>",
        "id": 166918441,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1559230564
    },
    {
        "content": "<p>what kind of reduction? What you see is what lean expects</p>",
        "id": 166919462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559231267
    },
    {
        "content": "<p>For example, if I have the following code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bool_to_prop</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"n\">bool_to_prop</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"c1\">-- cursor is at this underscore</span>\n</pre></div>\n\n\n<p>when I place the cursor at the underscore of the last line I get a message</p>\n<div class=\"codehilite\"><pre><span></span>don&#39;t know how to synthesize placeholder\ncontext:\n_example : ∀ (b : bool), bool_to_prop b\n⊢ bool_to_prop tt\n</pre></div>\n\n\n<p>I would like <code>bool_to_prop tt</code> to reduce and show just <code>true</code></p>",
        "id": 166926954,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1559236580
    },
    {
        "content": "<p>use <code>begin dsimp [bool_to_prop], end</code></p>",
        "id": 166927012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559236641
    },
    {
        "content": "<p>Sorry, but it doesn't work.</p>",
        "id": 166927612,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1559237001
    },
    {
        "content": "<p>Ok, I mistake, it works.</p>",
        "id": 166927741,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1559237075
    },
    {
        "content": "<p>Anyway, rather than stating the function explicitly. I would like to reduce the main goal into its normal form. Can I use <code>dsimp</code> to do it?</p>",
        "id": 166928150,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1559237357
    },
    {
        "content": "<p><code>dsimp</code> would do it if you marked the function as <code>@[simp]</code></p>",
        "id": 166929772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559238377
    },
    {
        "content": "<p>in general unfolding all definitions is a bad idea and can take a very long time</p>",
        "id": 166929792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559238401
    },
    {
        "content": "<p>there is a low level tactic called <code>whnf</code> that will do this, at least at the head of the expression</p>",
        "id": 166929833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559238436
    },
    {
        "content": "<p>Thank you so much for your help :)</p>",
        "id": 166930561,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1559238961
    }
]