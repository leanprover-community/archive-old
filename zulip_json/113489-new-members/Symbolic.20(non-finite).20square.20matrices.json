[
    {
        "content": "<p>Bleh. Okay, I now have an expression <br>\n<code>↑6 * kp ^ 2 * km ^ 2</code><br>\nUnfortunately, what this actually says is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">mul_one_class.to_has_mul</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span>  <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">distrib.to_has_mul</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kp</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">km</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 278932804,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922288
    },
    {
        "content": "<p>and as such is not recognized when I do <code>set kp2m2_6 := 6 * kp ^ 2 * km ^ 2</code> which is a much saner set of <code>has_mul.mul ℂ ℂ</code>s</p>",
        "id": 278932841,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922312
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? It's very difficult to help otherwise.</p>",
        "id": 278932881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649922347
    },
    {
        "content": "<p>I'd like to have something... less perverse if at all possible</p>",
        "id": 278932950,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922385
    },
    {
        "content": "<p>uh, hm</p>",
        "id": 278932951,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922387
    },
    {
        "content": "<p>I mean, I can just type out the exact expression above with a minimal amount of context, but that's a really artifical example?</p>",
        "id": 278933131,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922539
    },
    {
        "content": "<p>the reason I have to deal with that expression is that it's in the middle of a simplification, so I can't easily just choose a different representation, I don't think...</p>",
        "id": 278933162,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922573
    },
    {
        "content": "<p>Click on the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> link if you're not clear about what I mean</p>",
        "id": 278933525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649922822
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">algebra.ring.basic</span> <span class=\"n\">data.real.basic</span>\n  <span class=\"n\">data.complex.basic</span> <span class=\"n\">algebra.star.basic</span> <span class=\"n\">algebra.algebra.basic</span>\n  <span class=\"n\">analysis.normed_space.star.basic</span> <span class=\"n\">analysis.normed.normed_field</span>\n  <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">scratch</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_involutive_star</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">cstar_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">kp</span> <span class=\"n\">km</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ap</span> <span class=\"n\">am</span> <span class=\"n\">xp</span> <span class=\"n\">xm</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_algebra</span> <span class=\"n\">ℂ</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_module</span> <span class=\"n\">ℂ</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span><span class=\"bp\">`†`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"o\">:=</span> <span class=\"n\">has_star.star</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">R</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">pow</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ring.npow</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">algebra_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">•</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">],</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">smul_mul_smul</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"n\">r</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">xp</span> <span class=\"bp\">=</span> <span class=\"n\">kp</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">ap</span> <span class=\"bp\">+</span> <span class=\"n\">ap</span><span class=\"bp\">†</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">xm</span> <span class=\"bp\">=</span> <span class=\"n\">km</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">am</span> <span class=\"bp\">+</span> <span class=\"n\">am</span><span class=\"bp\">†</span><span class=\"o\">)</span>\n  <span class=\"bp\">→</span> <span class=\"mi\">6</span> <span class=\"bp\">•</span> <span class=\"n\">xp</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">xm</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">introv</span> <span class=\"n\">xp_def</span> <span class=\"n\">xm_def</span><span class=\"o\">,</span> <span class=\"n\">substs</span> <span class=\"n\">xp_def</span> <span class=\"n\">xm_def</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">algebra_pow</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">smul_assoc</span> <span class=\"mi\">6</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">smul_mul_smul</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">km</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nsmul_eq_mul</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">}</span>\n  <span class=\"kd\">end</span>\n\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">scratch</span>\n</code></pre></div>",
        "id": 278933591,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922845
    },
    {
        "content": "<p>I mean I'm familiar with the concept of an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but it's not always clear exactly what \"minimal\" in fact means in practice</p>",
        "id": 278933617,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649922871
    },
    {
        "content": "<p>for now, I'm just going to suck it up and use <code>set</code> with the overcomplicated definition</p>",
        "id": 278937071,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649925164
    },
    {
        "content": "<p>but ideally I'd reduce the expression instead</p>",
        "id": 278937083,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649925175
    },
    {
        "content": "<p>You shouldn't need the <code>has_pow</code> there</p>",
        "id": 278939269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649926521
    },
    {
        "content": "<p>And <code>algebra_pow</code> should be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_pow\">docs#smul_pow</a></p>",
        "id": 278939336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649926562
    },
    {
        "content": "<p>ah, I was wondering</p>",
        "id": 278941497,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649927909
    },
    {
        "content": "<p>but couldn't find it</p>",
        "id": 278941503,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649927912
    },
    {
        "content": "<p>okay, fixed that, but still looking for a way to simplify that product</p>",
        "id": 278941532,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649927932
    },
    {
        "content": "<p>Can you give an mwe that better indicates exactly what you consider the problem to be?</p>",
        "id": 278945575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649930504
    },
    {
        "content": "<p>(note your original mwe is false, as <code>b</code> is unconstrained)</p>",
        "id": 278945682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649930553
    },
    {
        "content": "<p>In particular, it sounds like you're complaining that the <code>set</code> tactic isn't working, but your mwe doesn't demonstrate this because it doesn't mention <code>set</code>!</p>",
        "id": 278945892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649930686
    },
    {
        "content": "<p>the original mwe is intentionally false, because I'm essentially trying to (ab)use Lean as a simplifier/calculation aid</p>",
        "id": 278949772,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649933600
    },
    {
        "content": "<p>and AFAIK there's no way to just tell Lean \"here is what I have, let's just calculate this and see where it goes\"</p>",
        "id": 278949788,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649933615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Symbolic.20.28non-finite.29.20square.20matrices/near/278945892\">said</a>:</p>\n<blockquote>\n<p>In particular, it sounds like you're complaining that the <code>set</code> tactic isn't working, but your mwe doesn't demonstrate this because it doesn't mention <code>set</code>!</p>\n</blockquote>\n<p>well, the thing I was mentioning involved just looking at the expansion in the infoview</p>",
        "id": 278949981,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649933728
    },
    {
        "content": "<p>but sure</p>",
        "id": 278949986,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649933732
    },
    {
        "content": "<p>I've tacked on the relevant <code>set</code> line; after that line, the definition is added to the context but no replacements are made</p>",
        "id": 278950029,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649933769
    },
    {
        "content": "<p>If you use <code>set ... with hk</code>, can you <code>rw ←hk</code> to make the replacements?</p>",
        "id": 278951131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649934590
    },
    {
        "content": "<p>... so I can. Thanks!</p>",
        "id": 278951258,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649934665
    },
    {
        "content": "<p>Looking at the infoview feels like it was going down an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem; the problem seems to be in <code>set</code> not being as clever as <code>rw</code></p>",
        "id": 278951276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649934676
    },
    {
        "content": "<p>(in that <code>rw</code> can see through the difference you found in the infoview, but <code>set</code> can't)</p>",
        "id": 278951716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649934946
    },
    {
        "content": "<p>That <code>has_involutive_star</code> variable is also extraneous, which is going to cause you problems because you'll have two star operations on <code>R</code></p>",
        "id": 278953529,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649936116
    },
    {
        "content": "<p>ah, nice catch, I've been burned a bunch of times by that already -_-</p>",
        "id": 278963349,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649941776
    },
    {
        "content": "<p>If you're unsure whether or not you need a low-level class to get a higher-level class (e.g., <code>cstar_ring</code> needs <code>star_ring</code>) one quick trick is to try deleting the low-level class from the variable list. If Lean doesn't complain, it was redundant. This isn't necessarily the best or most fool-proof way of determining this information, but it can help in a pinch.</p>",
        "id": 278987902,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649953461
    }
]