[
    {
        "content": "<p>I'm used to Coq (I've just started using Lean and I am rewriting my project from Coq to Lean; so far it's been very enjoyable) and something which I found very useful in Coq was the tactic \"replace _ with _\" which is similar to \"change _ with _\" but adds a subgoal if the terms are not definitionally equivalent; a similar tactic was \"asserts_rewrite\" which puts the goal in front. Is there a similar tactic in lean? Of course I can do \"have H : _ = _, by _, rw H, clean H\" but there's probably a better way.</p>",
        "id": 250771682,
        "sender_full_name": "Giacomo Maletto",
        "timestamp": 1629984588
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#convert_to\">https://leanprover-community.github.io/mathlib_docs/tactics.html#convert_to</a> ?</p>",
        "id": 250771880,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629984660
    },
    {
        "content": "<p>I could be wrong but it seems like convert_to can only rewrite the whole goal, while I'm interested in rewriting only a section of the goal, for example if the goal is \"a + (b + c)\" I'd like to use something like \"change (b + c) with (c + b)\" that adds the goal \"b + c = c + b\" and then changes the goal to \"a + (c + b)\".</p>",
        "id": 250773343,
        "sender_full_name": "Giacomo Maletto",
        "timestamp": 1629985232
    },
    {
        "content": "<p>Maybe that's just not the \"Lean way\" to do it</p>",
        "id": 250773948,
        "sender_full_name": "Giacomo Maletto",
        "timestamp": 1629985491
    },
    {
        "content": "<p>I'm not aware of such a tactic. But I can see that it might be useful.</p>",
        "id": 250774415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629985687
    },
    {
        "content": "<p>Oooh, maybe the \"lean way\" is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">or</span> <span class=\"n\">whatever</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 250774547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629985739
    },
    {
        "content": "<p>Or you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#conv\">tactic#conv</a>, which has a way to select a subexpression for rewriting, let me check the syntax...</p>",
        "id": 250774626,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629985774
    },
    {
        "content": "<p><code>conv in (some_expression) { rw [some_expression_eq_other_expression] }</code></p>",
        "id": 250774836,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629985847
    },
    {
        "content": "<p>Thank you both, this is what I was looking for!</p>",
        "id": 250775007,
        "sender_full_name": "Giacomo Maletto",
        "timestamp": 1629985923
    },
    {
        "content": "<p>Along the lines of Johan's suggestion, sometimes I've done this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>This creates a new goal for the hole after the current goal.</p>",
        "id": 250797459,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629994191
    }
]