[
    {
        "content": "<p>Having some difficulty applying div_self to a trivial goal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">div_self</span> <span class=\"n\">h2</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>it looks to me like those types should match?</p>",
        "id": 201152313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592405583
    },
    {
        "content": "<p>do <code>#check div_self</code></p>",
        "id": 201152413,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592405622
    },
    {
        "content": "<p>I get <code>div_self : ?M_3 ≠ 0 → ?M_3 / ?M_3 = 1</code></p>\n<p>I don't quite get how it decides to fill the <code>M_3</code> placeholder. <code>M_3</code> is implicit, so I was hoping it could be inferred from <code>h2</code> as <code>z-1</code>.</p>",
        "id": 201152705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592405727
    },
    {
        "content": "<p>it's going to have a type variable requiring a typeclass that the integers don't satisfy, maybe division_ring or something</p>",
        "id": 201152913,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592405787
    },
    {
        "content": "<p>Is there an equivalent for integers?</p>",
        "id": 201153077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592405858
    },
    {
        "content": "<p>if there is then hopefully it has a name like <code>int.div_self</code></p>",
        "id": 201153334,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592405935
    },
    {
        "content": "<p>For whatever reason that was not autocompleting...</p>",
        "id": 201153432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592405976
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/int/basic.html#int.div_self\">https://leanprover-community.github.io/mathlib_docs/data/int/basic.html#int.div_self</a></p>",
        "id": 201153883,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592406130
    },
    {
        "content": "<p>do you have <code>import data.int.basic</code> in your file?</p>",
        "id": 201153900,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592406138
    },
    {
        "content": "<p><code>#check @div_self</code> is the thing to do in this situation -- you see immediately what typeclass it wants</p>",
        "id": 201156088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592406993
    }
]