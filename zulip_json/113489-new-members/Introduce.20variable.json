[
    {
        "content": "<p>Hi all, <br>\nIs it possible that I introduce a new existential variable <em>inside the proof</em> when it does not appear inside the goal? Like a <code>(x: R)</code>. Or is it strictly unnecessary ... <br>\nand can I introduce a theorem / lemma to environment so that <code>linarith</code> can make use of it?</p>",
        "id": 252693877,
        "sender_full_name": "leafGecko",
        "timestamp": 1631220849
    },
    {
        "content": "<p>simply <code>have x: R</code>, generates a goal <code>R</code>, which (I presume) is wanting me to prove that <code>R </code>has a member?</p>",
        "id": 252693988,
        "sender_full_name": "leafGecko",
        "timestamp": 1631220897
    },
    {
        "content": "<p>You can use <code>have bla : x &lt; 0 := ...</code> to introduce an assertion <code>x &lt; 0</code> to the context, or <code>have bla : x &lt; 0, { proof }</code> which makes you prove the assertion by tactics in <code>proof</code></p>",
        "id": 252694491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631221092
    },
    {
        "content": "<p>You can also add arguments to linarith, like <code>linarith [x_lt_zero]</code></p>",
        "id": 252694538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631221115
    },
    {
        "content": "<p>Be aware that if you want to introduce a <em>proposition</em> e.g. <code>h : x &lt; 0</code>, then <code>have h : x &lt; 0 := { my_proof },</code> is fine.</p>\n<p>But if you want to introduce a value / piece of data, and need to remember what it is, e.g. <code>x := y+1</code>, then you should use <code>set x := y+1 with hx</code>, which will add <code>x : R := y+1</code> and <code>hx : x = y + 1</code> to the context, and you can then use <code>rw hx</code> later on if needed (and <code>linarith</code> should detect it in this case). By contrast if you write <code>have x := y+1</code> then the context will only have <code>x : R</code> and will not remember the value you defined x with.</p>",
        "id": 252731290,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1631248565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431349\">@leafGecko</span> If you have a proof of <code>nonempty X</code> in your context, then you can extract from it a random <code>x : X</code>. But otherwise you can just pull a <code>x : X</code> out of nowhere, because <code>X</code> might be empty.</p>",
        "id": 252733241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631250309
    },
    {
        "content": "<p>*can't</p>",
        "id": 252744917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631259310
    }
]