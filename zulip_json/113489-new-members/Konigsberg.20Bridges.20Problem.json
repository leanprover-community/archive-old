[
    {
        "content": "<p>Hi everyone!</p>\n<p>I'm still learning Lean, and I would like your opinion on a proof that I've produced this week. I've read <a href=\"https://leanprover-community.github.io/100-missing.html\">here</a> that the Koenigsberg Brigdges problem, solved by Euler, was one of the 100 problems proposed by Wiedijk which has not been formalized in Lean. So i've done that as an exercise. The formal statement is :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eulerian_even_degree</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">euler</span> <span class=\"o\">:</span> <span class=\"n\">eulerian</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">notfirst</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">p.vertex</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">notlast</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">p.vertex</span> <span class=\"n\">p.len</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">degree</span> <span class=\"bp\">Γ</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In other words, if there's a eulerian path on a graph (a path visiting each edge just once), then the degree of each vertex is even, with two exceptions at most. (In fact, one can prove that there are 0 or 2 exceptions.) The graph in the original problem was not like that, so it does not have a eulerian path.</p>\n<p>I have attached the file, it's about 700 lines with lots of comments :</p>\n<p><a href=\"/user_uploads/3121/v6PnZzkz3Acdt0UMcs5ba7gm/koenigsberg.lean\">koenigsberg.lean</a> </p>\n<p>I'm very interested in your comments about the mistakes I make, the things that I ought to know, and so on. (I'm less interested in suggestions for improvements of the code when they're too specific to the question at hand, I don't care about Koenigsberg's bridges all that much...)</p>\n<p>One thing I can point out: there's an inconsistency in the online documentation. If you read <a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/card.html#finset.card_disj_union\">here</a> you see the following signature:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">theorem</span> <span class=\"n\">finset.card_disj_union</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">s.disj_union</span> <span class=\"n\">t</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">s.card</span> <span class=\"bp\">+</span> <span class=\"n\">t.card</span>\n</code></pre></div>\n<p>But with the version of Lean which I'm using -- that is, on gitpod -- it is rather :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">finset.card_disjoint_union</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">s.card</span> <span class=\"bp\">+</span> <span class=\"n\">t.card</span>\n</code></pre></div>\n<p>(I've wasted a lot of time with that...)</p>\n<p>Thanks in advance!</p>\n<p>Pierre</p>",
        "id": 291513397,
        "sender_full_name": "Pierre Guillot",
        "timestamp": 1659302764
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, who opened a PR for this recently!</p>",
        "id": 291513439,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659302874
    },
    {
        "content": "<p>Regarding <code>card_disj_union</code>, beware that there is both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_disj_union\">docs#finset.card_disj_union</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_disjoint_union\">docs#finset.card_disjoint_union</a></p>",
        "id": 291513515,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659302991
    },
    {
        "content": "<p>Oh my, I didn't even realize that I've gone from \"disj\" to \"disjoint\"... pff... sorry... and thanks for the explanation!</p>\n<p>I keep reading \"PR\", does that mean \"peer review\" or something?</p>\n<p>and how do I cc someone? (I really am a beginner...)</p>",
        "id": 291513673,
        "sender_full_name": "Pierre Guillot",
        "timestamp": 1659303198
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15279\">#15279</a> is the PR (\"pull request\" -- git terminology)</p>",
        "id": 291513743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659303266
    },
    {
        "content": "<p>That specifically has that the Konigsberg graph does not have an Eulerian walk</p>",
        "id": 291513754,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659303284
    },
    {
        "content": "<p>Here's the analogue of the theorem you proved: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.walk.is_eulerian.card_odd_degree\">docs#simple_graph.walk.is_eulerian.card_odd_degree</a>. <strong>Edit:</strong> I mean this one: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.walk.is_eulerian.even_degree_iff\">docs#simple_graph.walk.is_eulerian.even_degree_iff</a></p>",
        "id": 291513779,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659303348
    },
    {
        "content": "<p>(Zulip hint: you can click the '...' on a message and do \"View source\" to see how someone typed something. You can cc someone with @, like <span class=\"user-mention\" data-user-id=\"516952\">@Pierre Guillot</span>. There's also the \"?\" below the message editing box with a guide.)</p>",
        "id": 291513846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659303398
    },
    {
        "content": "<p>Here are some simplifications for the first material about <code>upair</code></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">upair</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_upair</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}:</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">upair</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">m</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">upair</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_single</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">upair</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">upair</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">upair_symm</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">upair</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">upair</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">upair</span><span class=\"o\">,</span> <span class=\"n\">or_comm</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">upair_subset</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">upair</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">⊆</span> <span class=\"n\">xs</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">upair</span><span class=\"o\">,</span> <span class=\"n\">finset.insert_subset</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">upair_subset_upair</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">upair</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"bp\">⊆</span> <span class=\"n\">upair</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">=</span> <span class=\"n\">b1</span> <span class=\"bp\">∨</span> <span class=\"n\">a1</span> <span class=\"bp\">=</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"bp\">=</span> <span class=\"n\">b1</span> <span class=\"bp\">∨</span> <span class=\"n\">a2</span> <span class=\"bp\">=</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">upair_subset</span><span class=\"o\">,</span> <span class=\"n\">mem_upair</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_upairs</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">upair</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">upair</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"bp\">=</span><span class=\"n\">b1</span> <span class=\"bp\">∧</span> <span class=\"n\">a2</span><span class=\"bp\">=</span><span class=\"n\">b2</span> <span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"bp\">=</span><span class=\"n\">b2</span> <span class=\"bp\">∧</span> <span class=\"n\">a2</span><span class=\"bp\">=</span><span class=\"n\">b1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_antisymm_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">upair_subset_upair</span><span class=\"o\">,</span> <span class=\"n\">finset.le_eq_subset</span><span class=\"o\">],</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 291515919,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659306428
    },
    {
        "content": "<p>This is great! Thanks!</p>",
        "id": 291539311,
        "sender_full_name": "Pierre Guillot",
        "timestamp": 1659338194
    },
    {
        "content": "<p>Great job, <span class=\"user-mention\" data-user-id=\"516952\">@Pierre Guillot</span> , congratulations!</p>",
        "id": 291541387,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1659339925
    }
]