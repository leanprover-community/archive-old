[
    {
        "content": "<p>Hi, I again have a simple beginners questions. The definition of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">]:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n   <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">optional_ij</span> <span class=\"o\">:=</span> <span class=\"n\">pick_encodable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"n\">el</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"k\">in</span>\n  <span class=\"k\">match</span> <span class=\"n\">optional_ij</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">ij</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">A1</span> <span class=\"o\">:=</span> <span class=\"n\">xrow</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xcol</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">A1&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">fin_swap</span> <span class=\"n\">A1</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">A1&#39;</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">ursubmx</span> <span class=\"n\">A1&#39;</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"err\">•</span> <span class=\"n\">dlsubmx</span> <span class=\"n\">A1&#39;</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">drsubmx</span> <span class=\"n\">A1&#39;</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span><span class=\"err\">ₘ</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span>\n      <span class=\"n\">xrow</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">fin_swap</span> <span class=\"o\">(</span><span class=\"n\">block_mx</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">v</span> <span class=\"n\">L</span><span class=\"o\">)),</span>\n      <span class=\"n\">xcol</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">fin_swap</span> <span class=\"o\">(</span><span class=\"n\">block_mx</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i1</span> <span class=\"n\">j1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"n\">U</span><span class=\"o\">)),</span>\n      <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n     <span class=\"o\">(</span>\n      <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n      <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n      <span class=\"mi\">0</span>\n     <span class=\"o\">)</span>\n  <span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n     <span class=\"o\">(</span>\n      <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n      <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n      <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>appears in a proof  state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_8</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_9</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_10</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Gaussian_elimination</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">*</span><span class=\"err\">ₘ</span> <span class=\"o\">((</span><span class=\"n\">Gaussian_elimination</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">M</span>\n</pre></div>\n\n\n<p>I expected a simple <code>rw Gaussian_elimination</code> to inline the definition of Gaussian_eliminatin into the proof. But unfortunately this did not work out. Any ideas what I did wrong?</p>",
        "id": 136147887,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539996602
    },
    {
        "content": "<p>I unfortunately just get \"failed\"</p>",
        "id": 136148002,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539996778
    },
    {
        "content": "<p>It will only reduce if it's applied to <code>m+1</code> or <code>0</code>, not <code>m</code></p>",
        "id": 136148305,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539997343
    },
    {
        "content": "<p>I see.</p>",
        "id": 136148381,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539997508
    },
    {
        "content": "<p>Any quick pointer how I introduce m+1 or 0?</p>",
        "id": 136148383,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539997538
    },
    {
        "content": "<p>Found it. Just need to do 'induction m'.</p>",
        "id": 136148439,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539997672
    },
    {
        "content": "<p>Thanks a lot, this was easy.</p>",
        "id": 136148481,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539997696
    },
    {
        "content": "<p>OK, the basecase is now also proofen. Learned the 'ext' tactic and fin_zero_elim.</p>",
        "id": 136149746,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540000341
    },
    {
        "content": "<p>I am now in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_8</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_9</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_10</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"n\">m_n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">m_ih</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">Gaussian_elimination</span> <span class=\"n\">m_n</span> <span class=\"n\">m_n</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">*</span><span class=\"err\">ₘ</span> <span class=\"o\">((</span><span class=\"n\">Gaussian_elimination</span> <span class=\"n\">m_n</span> <span class=\"n\">m_n</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m_n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m_n</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Gaussian_elimination</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"n\">m_n</span> <span class=\"n\">m_n</span> <span class=\"n\">M</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n            <span class=\"n\">Gaussian_elimination</span> <span class=\"n\">m_n</span> <span class=\"n\">m_n</span>\n              <span class=\"o\">(</span><span class=\"n\">drsubmx</span> <span class=\"o\">(</span><span class=\"n\">fin_swap</span> <span class=\"o\">(</span><span class=\"n\">xrow</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xcol</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n                 <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"err\">•</span> <span class=\"n\">dlsubmx</span> <span class=\"o\">(</span><span class=\"n\">fin_swap</span> <span class=\"o\">(</span><span class=\"n\">xrow</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xcol</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">*</span><span class=\"err\">ₘ</span>\n                      <span class=\"n\">ursubmx</span> <span class=\"o\">(</span><span class=\"n\">fin_swap</span> <span class=\"o\">(</span><span class=\"n\">xrow</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xcol</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">))))))</span>\n         <span class=\"o\">(</span><span class=\"n\">pick_encodable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">el</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">*</span><span class=\"err\">ₘ</span>\n      <span class=\"o\">((</span><span class=\"n\">Gaussian_elimination</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"n\">m_n</span> <span class=\"n\">m_n</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n             <span class=\"n\">Gaussian_elimination</span> <span class=\"n\">m_n</span> <span class=\"n\">m_n</span>\n               <span class=\"o\">(</span><span class=\"n\">drsubmx</span> <span class=\"o\">(</span><span class=\"n\">fin_swap</span> <span class=\"o\">(</span><span class=\"n\">xrow</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xcol</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n                  <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"err\">•</span> <span class=\"n\">dlsubmx</span> <span class=\"o\">(</span><span class=\"n\">fin_swap</span> <span class=\"o\">(</span><span class=\"n\">xrow</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xcol</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">)))</span> <span class=\"bp\">*</span><span class=\"err\">ₘ</span>\n                       <span class=\"n\">ursubmx</span> <span class=\"o\">(</span><span class=\"n\">fin_swap</span> <span class=\"o\">(</span><span class=\"n\">xrow</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xcol</span> <span class=\"o\">(</span><span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">M</span><span class=\"o\">))))))</span>\n          <span class=\"o\">(</span><span class=\"n\">pick_encodable</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">el</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">el</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">M</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span>\n    <span class=\"n\">M</span>\n</pre></div>",
        "id": 136149747,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540000356
    },
    {
        "content": "<p>That seems complicated.</p>",
        "id": 136149749,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540000377
    },
    {
        "content": "<p>In case anybody wants to drop me a bone, this would be appreciated.</p>",
        "id": 136149755,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540000395
    },
    {
        "content": "<p><code>funext</code> is a start</p>",
        "id": 136150894,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540002724
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 136150900,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540002760
    },
    {
        "content": "<p>But it looks really complicated.</p>",
        "id": 136150903,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540002778
    },
    {
        "content": "<p>That's what I feel.</p>",
        "id": 136150910,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540002818
    },
    {
        "content": "<p>Maybe I approach this from the wrong angle.</p>",
        "id": 136150950,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540002860
    },
    {
        "content": "<p>What is <code>pick_encodable</code>?</p>",
        "id": 136150952,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540002877
    },
    {
        "content": "<p>I basically want to show that \" (M : matrix (fin m) (fin m) α) : (getL M) *ₘ (getU M) = M :=\"</p>",
        "id": 136150953,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540002881
    },
    {
        "content": "<p>That comes from: <code>  let optional_ij := pick_encodable (α) (λ el, el ≠ 0) (x+1) (y+1) A in</code></p>",
        "id": 136150963,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540002919
    },
    {
        "content": "<p>It finds a non-zero element in the matrix.</p>",
        "id": 136150969,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540002945
    },
    {
        "content": "<p>And returns an optional.</p>",
        "id": 136151009,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540002969
    },
    {
        "content": "<p>What is <code>getL</code>?</p>",
        "id": 136151011,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540002977
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">getL</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"k\">in</span>\n  <span class=\"n\">res</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">getU</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"k\">in</span>\n  <span class=\"n\">res</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</pre></div>",
        "id": 136151015,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540003007
    },
    {
        "content": "<p>That's the full algorithm:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">]:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n   <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">optional_ij</span> <span class=\"o\">:=</span> <span class=\"n\">pick_encodable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"n\">el</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"k\">in</span>\n  <span class=\"k\">match</span> <span class=\"n\">optional_ij</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">ij</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">A1</span> <span class=\"o\">:=</span> <span class=\"n\">xrow</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xcol</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">A1&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">fin_swap</span> <span class=\"n\">A1</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">A1&#39;</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">ursubmx</span> <span class=\"n\">A1&#39;</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"err\">•</span> <span class=\"n\">dlsubmx</span> <span class=\"n\">A1&#39;</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">drsubmx</span> <span class=\"n\">A1&#39;</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">*</span><span class=\"err\">ₘ</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span>\n      <span class=\"n\">xrow</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">fin_swap</span> <span class=\"o\">(</span><span class=\"n\">block_mx</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">v</span> <span class=\"n\">L</span><span class=\"o\">)),</span>\n      <span class=\"n\">xcol</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">fin_swap</span> <span class=\"o\">(</span><span class=\"n\">block_mx</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i1</span> <span class=\"n\">j1</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"n\">U</span><span class=\"o\">)),</span>\n      <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n     <span class=\"o\">(</span>\n      <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n      <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n      <span class=\"mi\">0</span>\n     <span class=\"o\">)</span>\n  <span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n     <span class=\"o\">(</span>\n      <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n      <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n      <span class=\"mi\">0</span>\n     <span class=\"o\">)</span>\n</pre></div>",
        "id": 136151022,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540003029
    },
    {
        "content": "<p>It computes a matrix L, a matrix U and the rank of the matrix M.</p>",
        "id": 136151024,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540003061
    },
    {
        "content": "<p>I feel I should proof something simpler.</p>",
        "id": 136151130,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540003295
    },
    {
        "content": "<p>E.g. that the result matrix is in upper triangular form.</p>",
        "id": 136151131,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540003311
    },
    {
        "content": "<p>What are <code>xrow</code> and <code>fin_swap</code> and <code>block_mx</code>?</p>",
        "id": 136151312,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540003687
    },
    {
        "content": "<p><a href=\"https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean\" target=\"_blank\" title=\"https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean\">https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean</a></p>",
        "id": 136151515,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540004182
    },
    {
        "content": "<p><a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.652.3183&amp;rep=rep1&amp;type=pdf\" target=\"_blank\" title=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.652.3183&amp;rep=rep1&amp;type=pdf\">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.652.3183&amp;rep=rep1&amp;type=pdf</a></p>",
        "id": 136151629,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540004487
    },
    {
        "content": "<p>Is the relevant paper.</p>",
        "id": 136151630,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540004492
    },
    {
        "content": "<p>I just started playing around with it. See sec 3.1 for the relevant algorithm.</p>",
        "id": 136151670,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540004528
    },
    {
        "content": "<p>That is surprising. I was going to say that my instinct would be to do it totally differently, and express each Gaussian elimination operation, as multiplication by a well chosen matrix, and prove the properties of the matrices that correspond to the Gaussian elimination operations. Georges Gonthier probably knows what he's doing though.</p>",
        "id": 136151823,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540004905
    },
    {
        "content": "<p>I am new to lean. Probably this problem is too difficult for now, but I feel I understand matrices so I want to follow a proof that already exists, is interesting and at the same time useful.</p>",
        "id": 136151874,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540005012
    },
    {
        "content": "<p>If you have advices what would be reasonable steps and which parts would be useful for mathlib, that would certainly be helpful.</p>",
        "id": 136151877,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540005040
    },
    {
        "content": "<p>The paper justifies some of the choices they have taken.</p>",
        "id": 136151886,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540005070
    },
    {
        "content": "<p>Now the proof structure itself can likely be changed without affecting everything that uses Gaussian elimination.</p>",
        "id": 136151926,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540005139
    },
    {
        "content": "<p>Would be interesting to see if your proof idea might even be nicer than their original proof idea.</p>",
        "id": 136151927,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540005172
    },
    {
        "content": "<p>I doubt that the proof structure depends a lot on coq vs. lean, but if your proof is more accessible to people less advanced than Georges, this would be interesting to me.</p>",
        "id": 136151977,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540005297
    },
    {
        "content": "<p>My guess is that translating so strictly from Coq is not going to come out well</p>",
        "id": 136152216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540005816
    },
    {
        "content": "<p>The thing about translations is that even though the axioms are similar, the <em>language</em>, in the informal sense, is different. We use different modes of speech for the same kinds of things</p>",
        "id": 136152260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540005870
    },
    {
        "content": "<p>and the library is \"written in that language\", meaning that you will encounter friction if you don't use it</p>",
        "id": 136152265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540005893
    },
    {
        "content": "<p>My student <span class=\"user-mention\" data-user-id=\"120536\">@Jack Crawford</span> has also been looking at gaussian elimination. He's been using an inductive type describing individual steps of row operations.</p>",
        "id": 136152284,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1540005933
    },
    {
        "content": "<p>It acts like a \"relation\" between two matrices, but carries the data of the elementary matrix to multiply by.</p>",
        "id": 136152293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1540005957
    },
    {
        "content": "<p>Are you talking about Jack?</p>",
        "id": 136152330,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540005964
    },
    {
        "content": "<p>I mean, I obviously have no idea what the right approach is.</p>",
        "id": 136152334,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540005986
    },
    {
        "content": "<p>Just use this to learn stuff.</p>",
        "id": 136152336,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540005992
    },
    {
        "content": "<p>It might help to try to invent your own gaussian elimination</p>",
        "id": 136152341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540006009
    },
    {
        "content": "<p>rather than porting from coq</p>",
        "id": 136152343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540006019
    },
    {
        "content": "<p>Use the coq development and wikipedia to help you with the maths, and just focus on the lean encoding part</p>",
        "id": 136152350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540006054
    },
    {
        "content": "<p>So you feel my translation from coq is not very ideomatic in lean?</p>",
        "id": 136152391,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006085
    },
    {
        "content": "<p>that's right</p>",
        "id": 136152394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540006092
    },
    {
        "content": "<p>It seems to do what I want, so I am reasonably happy with it.</p>",
        "id": 136152397,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006097
    },
    {
        "content": "<p>in particular, I would work more with fintypes and less with fin n</p>",
        "id": 136152401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540006118
    },
    {
        "content": "<p>As I don't really know lean, I have zero feeling what would be more ideomatic</p>",
        "id": 136152402,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006124
    },
    {
        "content": "<p>OK, I can change this. Not sure though if this would change the overall algorithm a lot.</p>",
        "id": 136152410,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006174
    },
    {
        "content": "<p>I would be curious to hear how Jack is doing things differently</p>",
        "id": 136152415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540006198
    },
    {
        "content": "<p>It might be interesting to look into the code from <span class=\"user-mention\" data-user-id=\"120536\">@Jack Crawford</span></p>",
        "id": 136152416,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006200
    },
    {
        "content": "<p>Yes.</p>",
        "id": 136152456,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006205
    },
    {
        "content": "<p>He promised to share the code, but his now on exam leave.</p>",
        "id": 136152467,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006250
    },
    {
        "content": "<p>It seems Scott gave already quite some input on <span class=\"user-mention\" data-user-id=\"120536\">@Jack Crawford</span> 's code, so I assume it is more ideomatic.</p>",
        "id": 136152478,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , what is your goal with GE?</p>",
        "id": 136152479,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006283
    },
    {
        "content": "<p>I really need to clean a few things up first and am currently on mobile so don’t have my code with me, but as Scott said, I’m just using inductive types to break row equivalence down into steps</p>",
        "id": 136152480,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1540006291
    },
    {
        "content": "<p>I’ll share the code as soon as I have it neater and a little more complete</p>",
        "id": 136152483,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1540006312
    },
    {
        "content": "<p>Would it make sense to build up a matrix theory similar to <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.652.3183&amp;rep=rep1&amp;type=pdf\" target=\"_blank\" title=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.652.3183&amp;rep=rep1&amp;type=pdf\">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.652.3183&amp;rep=rep1&amp;type=pdf</a></p>",
        "id": 136152523,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006326
    },
    {
        "content": "<p>mathcomp.mxalgebra?</p>",
        "id": 136152525,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006335
    },
    {
        "content": "<p>Or is this not even useful in the context of lean?</p>",
        "id": 136152526,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120536\">@Jack Crawford</span> , no need to rush.</p>",
        "id": 136152530,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006385
    },
    {
        "content": "<p>I would be glad to look over your code to learn from it.</p>",
        "id": 136152535,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006400
    },
    {
        "content": "<p>I have an inductive type that represents a single “step” of a row equivalence, with a constructor for scaling, swapping, and linear addition of matrices, and then I have another inductive type that gives me the transitive closure of this.</p>",
        "id": 136152577,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1540006465
    },
    {
        "content": "<p>Then I have a few functions that perform individual steps of the GE algorithm (putting the pivot in the right place, scaling the pivot, eliminating down the column). Then I show that the result of each of these steps are row-equivalent (by my previous inductive definition of row-equivalence) with the original matrix, and then I make a new function that just combines these steps of the Gaussian elimination in the obvious way, and show that it is also row-equivalent by carrying through my proofs that each of the individual steps that it is composed of is row-equivalent</p>",
        "id": 136152640,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1540006630
    },
    {
        "content": "<p>I see.</p>",
        "id": 136152643,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006679
    },
    {
        "content": "<p>and from my row-equivalence I can get the proof that the invertible matrix which represents all of the steps of the row reduction, times the original matrix, is in fact the row-reduced version of the matrix</p>",
        "id": 136152684,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1540006721
    },
    {
        "content": "<p>I see,</p>",
        "id": 136152685,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006740
    },
    {
        "content": "<p>Do you also compute an extended gaussian elimination similar to what 'Georges Gonthier' does?</p>",
        "id": 136152691,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006753
    },
    {
        "content": "<p>Meaning, do you e.g. have proofs about the rank of the matrix?</p>",
        "id": 136152695,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540006778
    },
    {
        "content": "<p>Not yet, I haven’t actually gotten to proving much at all yet because I’ve had to re-write substantial parts of my code a few times over now. Hopefully this will be the final iteration! Haven’t really given much of a thought to matrix rank yet</p>",
        "id": 136152907,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1540007215
    },
    {
        "content": "<p>OK. Please ping me when it's time to look at your code.</p>",
        "id": 136153002,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540007430
    },
    {
        "content": "<p>Also, feedback on the Georges paper would be interesting.</p>",
        "id": 136153003,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1540007430
    }
]