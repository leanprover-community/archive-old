[
    {
        "content": "<p>If we have <code>a &lt; b := a ≤ b ∧ ¬ (b ≤ a)</code> and <code>h : a &lt; b</code> can I just have <code>h1 : a ≤ b := h.left</code>? (Doesn't seem to work.)</p>",
        "id": 183232212,
        "sender_full_name": "YH",
        "timestamp": 1576132424
    },
    {
        "content": "<p>I'm aware of <code>le_of_lt</code> but I'm still curious about why <code>h.left</code> won't do.</p>",
        "id": 183232436,
        "sender_full_name": "YH",
        "timestamp": 1576132786
    },
    {
        "content": "<p>Does <code>change a ≤ b ∧ ¬ (b ≤ a) at h</code> work?</p>",
        "id": 183232502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576132881
    },
    {
        "content": "<p>If not, then I'm afraid that in your context the definition of <code>&lt;</code> might be something else.</p>",
        "id": 183232517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576132922
    },
    {
        "content": "<p>I would need a MWE to help further.</p>",
        "id": 183232561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576132939
    },
    {
        "content": "<blockquote>\n<p>Does <code>change a ≤ b ∧ ¬ (b ≤ a) at h</code> work?</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/azkm8Z3UUEz1oG3JRNI892f9/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> <br>\nDoesn't seem to work in this toy case.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/azkm8Z3UUEz1oG3JRNI892f9/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/3121/azkm8Z3UUEz1oG3JRNI892f9/pasted_image.png\"></a></div>",
        "id": 183232875,
        "sender_full_name": "YH",
        "timestamp": 1576133507
    },
    {
        "content": "<p>I tried <code>ℕ, ℚ, ℝ</code> it seems <code>change</code> only work for <code>ℚ</code></p>",
        "id": 183232953,
        "sender_full_name": "YH",
        "timestamp": 1576133619
    },
    {
        "content": "<p>So I guess that means that <code>≤</code> is not defined the way you think it is.</p>",
        "id": 183233129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576133868
    },
    {
        "content": "<p>IIRC the definition of &lt; on nat is something like succ a.&lt;= b</p>",
        "id": 183233286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576134095
    },
    {
        "content": "<p>OK.</p>",
        "id": 183233337,
        "sender_full_name": "YH",
        "timestamp": 1576134135
    },
    {
        "content": "<p>Is the AM-GM inequality proved anywhere in mathlib? I was trying this as an exercise, still lots of frustrations</p>",
        "id": 183233365,
        "sender_full_name": "YH",
        "timestamp": 1576134208
    },
    {
        "content": "<p>There is a theorem that says <code>a &lt; b &lt;-&gt; a ≤ b ∧ ¬ (b ≤ a)</code> baked into the definition of <code>preorder</code>, but it is not a definition, it is a constraint on implementations. The actual definition is provided by the particular structure, and many structures have different definitions for this, for example <code>succ a &lt;= b</code> for nat</p>",
        "id": 183233443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576134331
    },
    {
        "content": "<p>If you leave the definition out when defining a preorder, the default definition is <code>a &lt; b := a ≤ b ∧ ¬ (b ≤ a)</code></p>",
        "id": 183233448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576134361
    },
    {
        "content": "<p>I don't recall seeing AM-GM in mathlib, there is a relatively straightforward proof using square roots and the <code>sqrt</code> API is good enough to make implementation not too hard.</p>",
        "id": 183234676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576136258
    },
    {
        "content": "<p>Doesn't AM-GM need an nth root API?</p>",
        "id": 183234827,
        "sender_full_name": "YH",
        "timestamp": 1576136505
    },
    {
        "content": "<p>Oh for n variables?</p>",
        "id": 183234839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576136520
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 183234880,
        "sender_full_name": "YH",
        "timestamp": 1576136527
    },
    {
        "content": "<p>I'm not sure I know which proof to formalise for n variables. There's a proof that does powers of 2 first and deduces the general case</p>",
        "id": 183234887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576136559
    },
    {
        "content": "<p>That is the one I had in mind. But for that one needs to prove some general induction stuff I guess.</p>",
        "id": 183234913,
        "sender_full_name": "YH",
        "timestamp": 1576136597
    },
    {
        "content": "<p>But even to go from AG4 to AG3 is kinda painful for me right now.</p>",
        "id": 183234981,
        "sender_full_name": "YH",
        "timestamp": 1576136673
    },
    {
        "content": "<p>I don't remember the trick. Do you let the dummy variable be the GM?</p>",
        "id": 183235000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576136713
    },
    {
        "content": "<p>Yeah. apply AM-GM for <code>a,b,c,d</code> where <code>d = 3√(abc)</code></p>",
        "id": 183235078,
        "sender_full_name": "YH",
        "timestamp": 1576136794
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">AG2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">sqrt</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">sqrt</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_self_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">sqrt_mul</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">sqrt_mul</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"err\">←</span><span class=\"n\">sqrt_mul</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">sqrt_mul</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">sqrt_mul_self</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">sqrt_mul_self</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>There's 2 ;-) Sorry, I thought that was what we were talking about at first.</p>",
        "id": 183235164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576136949
    },
    {
        "content": "<p>I was trying <code>lemma ag3 (a b c : nnreal) : 3 * (a * b * c) ≤ a ^ 3 + b ^ 3 + c ^ 3 := sorry</code><br>\nbut it seems I will have to write <code>instance : has_pow nnreal ℚ</code> anyway.</p>",
        "id": 183235167,
        "sender_full_name": "YH",
        "timestamp": 1576136970
    },
    {
        "content": "<p>I don't know how well developed things like <code>nnreal</code> are. Does <code>linarith</code> work with them?</p>",
        "id": 183235216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576137014
    },
    {
        "content": "<p>I just stuck to the reals and put non-negativity hypotheses in.</p>",
        "id": 183235218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576137032
    },
    {
        "content": "<p>Oh, OK. put non-negativity hypotheses in sounds good. <br>\n(But still need to define <code>has_pow</code> somewhere I guess.)</p>",
        "id": 183235290,
        "sender_full_name": "YH",
        "timestamp": 1576137130
    },
    {
        "content": "<blockquote>\n<p>I don't remember the trick. Do you let the dummy variable be the GM?</p>\n</blockquote>\n<p>BTW let the dummy variable be AM works too. But neither seem completely trivial for me as a beginner -- I always got stuck on some seemingly very trivial algebraic operation in Lean.</p>",
        "id": 183235422,
        "sender_full_name": "YH",
        "timestamp": 1576137320
    },
    {
        "content": "<p>I agree that proving it for n variables is a tall order in lean for a beginner</p>",
        "id": 183235440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576137354
    },
    {
        "content": "<p>I think that the proper way to prove this inequality is to prove <a href=\"https://en.wikipedia.org/wiki/Jensen%27s_inequality\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Jensen%27s_inequality\">https://en.wikipedia.org/wiki/Jensen%27s_inequality</a></p>",
        "id": 183317993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576197517
    },
    {
        "content": "<p>This way we can (a) assign weights to variables; (b) prove that the square mean is greater than the arithmetic mean; (c) if/once we prove that the center of mass of a measure supported on a convex set belongs to this set, we can have integral versions of these inequalities.</p>",
        "id": 183318486,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1576198055
    }
]