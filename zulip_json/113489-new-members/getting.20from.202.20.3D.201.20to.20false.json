[
    {
        "content": "<p>I was working on a simple proof by contradiction and got to the point where I was able to generate the hypothesis <code>h : 2 = 1</code>. On a whim I tried <code>cases h</code> and it closed out the goal (which was <code>false</code>). So I have two questions:<br>\n1) why did <code>cases</code> work here?<br>\n2) is there a better or more \"correct\" way to get from <code>2 = 1</code> to <code>false</code>? I figure I'm probably missing something embarrassingly obvious...</p>",
        "id": 222788344,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1610660401
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 222788715,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610660610
    },
    {
        "content": "<p><code>cases</code> seems fine in this situation, if the numbers were bigger using <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_num\">tactic#norm_num</a> would be better.</p>",
        "id": 222788894,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610660706
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">200000</span> <span class=\"bp\">=</span> <span class=\"mi\">1000000</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">200000</span> <span class=\"bp\">=</span> <span class=\"mi\">1000000</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>gives<br>\n<code>deep recursion was detected at 'expression equality test' (potential solution: increase stack space in your system)</code>, not so fun</p>",
        "id": 222788963,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610660750
    },
    {
        "content": "<p>If your question is why Lean can prove this \"by cases\", this is because <code>N</code> is an inductive type: a natural number is <code>0</code> or of the form <code>succ n</code> for some <code>n : N</code>. <code>cases</code> is smart enough to write <code>1</code> as <code>succ 0</code> and <code>2</code> as <code>succ 1 = succ (succ 0)</code> and it also knows that <code>succ</code> is injective (this is quite subtle point I think, related to <code>no_confusion</code>).</p>",
        "id": 222790929,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1610661691
    },
    {
        "content": "<p>This is analogous to having a finite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S = \\{a, b\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span> and saying that, given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">x \\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">x=a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">x=b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>. Even if for a human being (at least, for me) these two situations are rather different, for Lean they are very similar, a finite type is an inductive type where you can enumerate all elements.</p>",
        "id": 222791767,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1610662150
    },
    {
        "content": "<p>See for example <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html</a></p>",
        "id": 222791784,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1610662158
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 222792182,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1610662364
    },
    {
        "content": "<p>thank you both for the helpful answers!</p>",
        "id": 222792212,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1610662384
    }
]