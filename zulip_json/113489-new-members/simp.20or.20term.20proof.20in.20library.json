[
    {
        "content": "<p>When writing lemmas for the library, should we prefer a one-line simp proof (squeezified if necessary) or a few lines of term proof ? I know the term way is probably the fastest, but maybe there are other citerions to choose ?</p>",
        "id": 204609614,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595370027
    },
    {
        "content": "<p>Example : which should I choose here ?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"err\">⊔</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">G</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span> <span class=\"n\">tendsto_def</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_sup_sets</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">tendsto_def</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">tendsto_def</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_sup_sets</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">tendsto_def</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">tendsto_def</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">mem_sup_sets</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span> <span class=\"n\">h1</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"n\">hs</span> <span class=\"bp\">⟩</span> <span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_sup&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"err\">⊔</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">G</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tendsto</span><span class=\"o\">,</span> <span class=\"n\">map_sup</span><span class=\"o\">,</span> <span class=\"n\">sup_le_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 204610372,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595370602
    },
    {
        "content": "<p>I read these two proofs as:</p>\n<ol>\n<li>\"err... I guess I'm going to have to remember exactly how we've defined <code>tendsto</code> in the library before I understand this\"</li>\n<li>\"the statement looks sensible, and apparently it follows easily from stuff we've already done, so lets keep going\"</li>\n</ol>",
        "id": 204611149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595371293
    },
    {
        "content": "<p>There are also better term-mode proofs--not necessarily better than the <code>by simp</code> proof though.</p>",
        "id": 204612003,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595371872
    },
    {
        "content": "<p>I'm not really good at term mode yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 204612105,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595371924
    },
    {
        "content": "<p>apparently <code>map_sup</code> turns out to be a definitional equality, so one possibility is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_sup</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"err\">⊔</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">G</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">sup_le_iff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 204612337,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595372106
    },
    {
        "content": "<p>or you can also help out Lean with <code>show</code></p>",
        "id": 204612365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595372142
    }
]