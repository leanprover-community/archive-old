[
    {
        "content": "<p>I have a function <code>f : α → option β</code> and I want to say \"<code>f</code> is injective on those arguments mapped to <code>some</code> and I don't care what happens with those mapped to <code>none</code>\". Basically this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inj_some</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Does this have a name or is an instance of a more general notion in Lean?</p>",
        "id": 240758228,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622384997
    },
    {
        "content": "<p>I have definitely had use for this condition before, but only rarely, and so it is just written out where it is used. You can see the usual way it is written in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup_filter_map\">docs#list.nodup_filter_map</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pequiv.inj\">docs#pequiv.inj</a></p>",
        "id": 240758677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622385708
    },
    {
        "content": "<p>(note that <code>b ∈ f a</code> on option means <code>f a = some b</code>)</p>",
        "id": 240758732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622385748
    },
    {
        "content": "<p>Does <code>(set.range option.some).inj_on f</code> work for you?</p>",
        "id": 240760538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622388471
    },
    {
        "content": "<p>That requires that <code>f : option α → β</code> and says that <code>f</code> is injective on the <code>some</code> part of its domain. We want the opposite: <code>f</code> is injective if it maps into the <code>some</code> part of the codomain</p>",
        "id": 240761247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622389472
    },
    {
        "content": "<p>you could write it with <code>inj_on</code> as <code>(f ⁻¹' set.range option.some).inj_on f</code> but I'm not sure that's better than just writing it out</p>",
        "id": 240761345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622389607
    }
]