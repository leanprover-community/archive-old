[
    {
        "content": "<p>Oh good to know - thank you, Daniel. Re: <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  it does not appear you can do that, I get the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">this</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">nat.ple</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">false</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The <code>nat.ple a.succ zero</code> does not get reduced to false. If I do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">nat.ple</span> <span class=\"n\">a.succ</span> <span class=\"n\">zero</span> <span class=\"c1\">-- false</span>\n</code></pre></div>\n<p>It reduces to false as expected but it does not get automatically reduced in the proof term.</p>",
        "id": 239468095,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621446675
    },
    {
        "content": "<p>If I try to force it to evaluate the function using <code>do</code> notation I get a weird error in VS code, squiggly red line under the <code>do</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">succ_le_zero_false</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat.le</span> <span class=\"n\">a.succ</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"o\">{</span>\n   <span class=\"n\">return</span> <span class=\"n\">nat.le</span> <span class=\"n\">a.succ</span> <span class=\"n\">zero</span>\n   <span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">error: invalid universe level, 0 is not greater than 0</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 239470576,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621447610
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat.ple</span> <span class=\"n\">a.succ</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works fine</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"243102\">@Brandon Brown</span> if you want to prove <code>theorem succ_le_zero_false {a : nat} : (nat.le a.succ zero) → false</code> then why are you using a bool-valued &lt;=? <code>-&gt;</code> is for Props. Bools are for computing (so you should prove what Johan suggests) and Props are for reasoning.</p>",
        "id": 239477401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621450247
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">succ_le_zero_false</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.le</span> <span class=\"n\">a.succ</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 239477434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621450265
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"c1\">-- false = true → false = true : Prop</span>\n</code></pre></div>\n<p>Lean is jumping through hoops trying to make your bools into Props because you're using <code>→</code> on them</p>",
        "id": 239477692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621450381
    },
    {
        "content": "<p>But I get a prop using ‘nat.le’ as wrapper around ‘nat.ple’</p>",
        "id": 239488637,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621455085
    },
    {
        "content": "<p>oh I see, I'm a fool :-) I thought coercion was doing it itself. Anyway, <code>id</code> does it.</p>",
        "id": 239490878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621456173
    },
    {
        "content": "<p>But you're still using <code>false</code> as a Prop. Why not use <code>False</code>?</p>",
        "id": 239491157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621456277
    },
    {
        "content": "<p>Good question. I  don't know, I didn't know there was a <code>False : Prop</code> I was just following the way core Lean4 defined <code>nat.le</code>  So, good to know, <br>\nthanks!</p>",
        "id": 239494845,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621458063
    },
    {
        "content": "<p><code>false</code> is a bool but there's a coercion from bool to Prop which sends b to <code>b = true</code>.</p>",
        "id": 239496038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621458527
    },
    {
        "content": "<p>I will change everything to True and False:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">nat.le</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat.le</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Now I don't need the wrapper function. Not sure why core lean uses Bool with a wrapper.</p>",
        "id": 239498049,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621459421
    },
    {
        "content": "<p>Well now I think I have an idea why Lean4 core uses that way. Everything is harder to prove now. I don't know how to prove this:<br>\n<code>example : nat.le zero zero.succ.succ := sorry</code>  before I could prove with <code>rfl</code></p>",
        "id": 239499396,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621460129
    },
    {
        "content": "<p>Oh I have to do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.le</span> <span class=\"n\">zero</span> <span class=\"n\">zero.succ.succ</span> <span class=\"o\">:=</span> <span class=\"n\">True.intro</span>\n</code></pre></div>",
        "id": 239500542,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621460828
    },
    {
        "content": "<p>by the way, in mathlib4 there is <code>fun.</code> which allows you to do these proofs similarly to how you would in lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">succ_le_zero_false</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.le</span> <span class=\"n\">a.succ</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 239503717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621462662
    },
    {
        "content": "<p>I need some help here as well. I do not understand the last 3 lines of this proof. How am I getting a proof of h1 : a ≤ b from l : succ a ≤ succ b and what is ▸ rfl. I'm not familiar with that notation and can't find where it's defined in Lean4 src.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">nat.le</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat.le</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"s2\">\" ≤ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat.le</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">le_asymm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"k\">from</span> <span class=\"n\">l</span><span class=\"bp\">;</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"k\">from</span> <span class=\"n\">r</span><span class=\"bp\">;</span>\n      <span class=\"n\">le_asymm</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 239531163,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621483505
    },
    {
        "content": "<p>I believe rfl is reflexitivity proving that x = x. I'm not entirely sure but im basing my understanding off of the natural numbers game.</p>",
        "id": 239531716,
        "sender_full_name": "Michael Shaw",
        "timestamp": 1621483930
    },
    {
        "content": "<p><code>e ▸ rfl</code> means \"rewrite the goal with <code>e</code>, and prove the resulting goal with <code>rfl</code>\"</p>",
        "id": 239531760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621483975
    },
    {
        "content": "<blockquote>\n<p>How am I getting a proof of h1 : a ≤ b from l : succ a ≤ succ b</p>\n</blockquote>\n<p><code>a ≤ b</code> is actually defeq to <code>succ a ≤ succ b</code>, because:</p>\n<ul>\n<li><code>(a ≤ b) = (nat.le a b)</code></li>\n<li><code>(succ a ≤ succ b) = (nat.le (succ a) (succ b))</code></li>\n<li><code>nat.le (succ a) (succ b) = nat.le a b</code></li>\n</ul>",
        "id": 239531865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621484073
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 239579406,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621512644
    }
]