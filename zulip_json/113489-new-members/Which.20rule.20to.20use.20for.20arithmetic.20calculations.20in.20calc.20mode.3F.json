[
    {
        "content": "<p>I am trying to prove for any odd number n, 3n + 5 is even as a practice. In the calc steps I have:<br>\n3 * n + 5 = ...<br>\n            ... = 3 * 2 * k + 3 + 5 : by rw mul_assoc<br>\n            ... = 3 * 2 * k + 8        : by ?</p>\n<p>What do I need to put in place of the question mark? I wrote the proof this way so as to closely track how I would write it manually, in hope I may introduce this to my classmates as a tool, so I don’t need to simplify it further.</p>",
        "id": 135641895,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539298764
    },
    {
        "content": "<p>by rw add_assoc</p>",
        "id": 135641906,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539298790
    },
    {
        "content": "<p><code>rfl</code></p>",
        "id": 135642081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539298937
    },
    {
        "content": "<p><code>norm_num</code> is the correct answer though</p>",
        "id": 135642100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539298976
    },
    {
        "content": "<p>norm_num is unknown identifier tho</p>",
        "id": 135642393,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539299380
    },
    {
        "content": "<p>I am using the online version</p>",
        "id": 135642396,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539299386
    },
    {
        "content": "<blockquote>\n<p>norm_num is unknown identifier tho</p>\n</blockquote>\n<p>Just import tactic.norm_num</p>",
        "id": 135642442,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539299416
    },
    {
        "content": "<p>I'm not sure if the online version has <code>tactic.norm_num</code>, it's got a quite old version of mathlib</p>",
        "id": 135642532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539299535
    },
    {
        "content": "<p>import went through</p>",
        "id": 135642552,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539299572
    },
    {
        "content": "<p>curiously it still doesn't work. rw add_assoc works btw</p>",
        "id": 135642587,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539299626
    },
    {
        "content": "<p>Given by norm_num: <code>⊢ 3 + (5 + 6 * k) = 8 + 6 * k</code></p>",
        "id": 135642644,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539299663
    },
    {
        "content": "<p>You have to reassociate first</p>",
        "id": 135642649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539299677
    },
    {
        "content": "<blockquote>\n<p><code>norm_num</code> is the correct answer though</p>\n</blockquote>\n<p>I would prefer <code>rfl</code> over <code>norm_num</code></p>",
        "id": 135642651,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539299684
    },
    {
        "content": "<p><code>norm_num</code> will evaluate closed term expressions but they have to all be gathered together</p>",
        "id": 135642664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539299709
    },
    {
        "content": "<p><code>rfl</code> works in small cases, especially on <code>nat</code></p>",
        "id": 135642673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539299729
    },
    {
        "content": "<p>Problem I have with rfl is that the error is not helpful at all</p>",
        "id": 135642678,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539299736
    },
    {
        "content": "<p>But stuff like <code>3 + 5 = 8</code> on <code>real</code> needs <code>norm_num</code></p>",
        "id": 135642734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539299767
    },
    {
        "content": "<blockquote>\n<p>Problem I have with rfl is that the error is not helpful at all</p>\n</blockquote>\n<p>it just means they are not definitionally equal</p>",
        "id": 135642744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539299782
    },
    {
        "content": "<p>oh for my case I only work with int and nat</p>",
        "id": 135642753,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539299808
    },
    {
        "content": "<p>no need for real here</p>",
        "id": 135642759,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539299816
    },
    {
        "content": "<p>Also stuff like <code>100 * 35 = 3500</code> should not be done by <code>rfl</code></p>",
        "id": 135642768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539299832
    },
    {
        "content": "<p>sure</p>",
        "id": 135642770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539299837
    },
    {
        "content": "<p>but for numbers less than 10 you should be fine</p>",
        "id": 135642782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539299863
    },
    {
        "content": "<p>cuz <code>rfl</code> does induction?</p>",
        "id": 135642836,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539299903
    },
    {
        "content": "<p>It calculates both sides to a normal form in unary</p>",
        "id": 135642841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539299917
    },
    {
        "content": "<p>so it's exponentially slower than <code>norm_num</code> in large cases</p>",
        "id": 135642842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539299940
    },
    {
        "content": "<p>gotcha</p>",
        "id": 135642851,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539299947
    },
    {
        "content": "<blockquote>\n<p>You have to reassociate first</p>\n</blockquote>\n<p>this kinda beats the purpose of replacing <code>rw add_assoc</code> tho</p>",
        "id": 135643128,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539300305
    },
    {
        "content": "<p>that's true</p>",
        "id": 135643205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539300368
    },
    {
        "content": "<p><code>ring</code> will actually solve the whole goal in this case</p>",
        "id": 135643207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539300379
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>... = 3 * 2 * k + 8            : by rw add_assoc\n ... = 2 * 3 * k + 8            : by rw mul_comm\n</pre></div>\n\n\n<p>gives me <code>⊢ k * (3 * 2) + 8 = 2 * 3 * k + 8</code></p>",
        "id": 135643211,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539300388
    },
    {
        "content": "<p>you can do <code>mul_comm 2</code></p>",
        "id": 135643221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539300410
    },
    {
        "content": "<p>to give lean a bit of a hint of which mul to comm</p>",
        "id": 135643229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539300425
    },
    {
        "content": "<p>gotcha</p>",
        "id": 135643233,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539300433
    },
    {
        "content": "<p>that's one that <code>norm_num</code> can solve btw... or <code>rfl</code></p>",
        "id": 135643244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539300469
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">bit1_add_bit1</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">one_add_bit0</span><span class=\"o\">,</span>\n<span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1_bit1</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1_one</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test1</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span>\n    <span class=\"bp\">=</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">bit1_add_bit1</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">one_add_bit0</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1_bit1</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1_one</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test2</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"o\">(</span><span class=\"n\">id</span>\n     <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n        <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"n\">a_3</span><span class=\"o\">),</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">eq</span> <span class=\"n\">e_1</span><span class=\"o\">)</span> <span class=\"n\">e_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">8</span>\n           <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">subst_into_sum</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"mi\">8</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">bit1_add_bit1_helper</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">one_add_bit0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1_bit1_helper</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1_one</span><span class=\"o\">)))</span>\n           <span class=\"mi\">8</span>\n           <span class=\"mi\">8</span>\n           <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"mi\">8</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">eq_true_intro</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"mi\">8</span><span class=\"o\">))))</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">bit1_add_bit1</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">one_add_bit0</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n     <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1_bit1</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1_one</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"mi\">8</span><span class=\"o\">))))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">bit1_add_bit1</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">one_add_bit0</span> <span class=\"mi\">1</span><span class=\"o\">))))</span>\n     <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1_bit1</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">bit0</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">add1_one</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 135643287,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539300490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can Lean be better at golfing?</p>",
        "id": 135643290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539300503
    },
    {
        "content": "<p>or is that actually pointless?</p>",
        "id": 135643294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539300516
    },
    {
        "content": "<p>Lean doesn't make it easy to golf proofs in tactics</p>",
        "id": 135643310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539300559
    },
    {
        "content": "<p>I see</p>",
        "id": 135643315,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539300575
    },
    {
        "content": "<p>nevermind... the import seems successful but norm_num is not actually imported</p>",
        "id": 135643321,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539300592
    },
    {
        "content": "<p>I would prefer that lean produced kind of short proofs (i.e. not obviously stupid things) but unfortunately <code>dsimp</code> ignores proof arguments</p>",
        "id": 135643376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539300627
    },
    {
        "content": "<p>btw <code>rfl</code> didn't work on the replacement of <code>rw mul_comm 2</code>either</p>",
        "id": 135643444,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539300725
    },
    {
        "content": "<p><code>rfl</code> is less powerful than I thought</p>",
        "id": 135643450,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539300741
    },
    {
        "content": "<p>or is it just in calc mode</p>",
        "id": 135643457,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539300767
    },
    {
        "content": "<p>that's surprising</p>",
        "id": 135643458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539300771
    },
    {
        "content": "<p>this works for me in the web editor:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 135643471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539300786
    },
    {
        "content": "<p>do you have a MWE with your unrflable proof?</p>",
        "id": 135643482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539300818
    },
    {
        "content": "<p>Maybe I had a typo... a minute</p>",
        "id": 135643603,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539300992
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">calc</span>\n      <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hw</span><span class=\"o\">]</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135643691,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539301200
    },
    {
        "content": "<p><code>rfl</code> doesn't work anytime I need to adjust association right</p>",
        "id": 135643806,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539301338
    },
    {
        "content": "<p>same as <code>norm_num</code></p>",
        "id": 135643807,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539301345
    },
    {
        "content": "<p><code>rfl</code> works iff the two expressions are definitionally equal</p>",
        "id": 135643819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539301390
    },
    {
        "content": "<p><code>2*(n+1)</code> for natural numbers is defined to be <code>2*n+2</code></p>",
        "id": 135643823,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539301402
    },
    {
        "content": "<p>that's unfolding definition of natural number multiplication</p>",
        "id": 135643826,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539301420
    },
    {
        "content": "<p>it doesn't work tho</p>",
        "id": 135643888,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539301516
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">calc</span>\n      <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hw</span><span class=\"o\">]</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_add</span>\n        <span class=\"o\">))</span>\n</pre></div>\n\n\n<p>without <code>rfl</code> this works, but I can't seem to replace any of them with <code>rw rfl</code>or <code>rfl</code></p>",
        "id": 135643945,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539301606
    },
    {
        "content": "<p><code>rfl</code> is a term not a tactic</p>",
        "id": 135644025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539301743
    },
    {
        "content": "<p>so there is no <code>by</code></p>",
        "id": 135644031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539301750
    },
    {
        "content": "<p>also <code>by rw rfl</code> is always redundant (does nothing)</p>",
        "id": 135644036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539301764
    },
    {
        "content": "<p>ah i see</p>",
        "id": 135644042,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539301782
    },
    {
        "content": "<p>didn't think to replace by as well</p>",
        "id": 135644080,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539301803
    },
    {
        "content": "<p>works now</p>",
        "id": 135644090,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539301814
    },
    {
        "content": "<p>there is a tactic version, called <code>refl</code></p>",
        "id": 135644091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539301816
    },
    {
        "content": "<p>so <code>by refl</code> and <code>rfl</code> are usually interchangeable</p>",
        "id": 135644093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539301833
    },
    {
        "content": "<p>okay for simple calc proofs I can just put <code>: rfl</code> after each step nice</p>",
        "id": 135644154,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539301928
    },
    {
        "content": "<p>thx y'all</p>",
        "id": 135644160,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539301954
    },
    {
        "content": "<p>actually a <code>: rfl</code> calc step can usually just be deleted entirely</p>",
        "id": 135644176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539302030
    },
    {
        "content": "<p>I know, writing out just for demonstration</p>",
        "id": 135644221,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539302055
    },
    {
        "content": "<p>right</p>",
        "id": 135644224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539302059
    },
    {
        "content": "<p>while we are at it is there a one-line proof of that theorem</p>",
        "id": 135644568,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539302553
    },
    {
        "content": "<p>what are the definitions?</p>",
        "id": 135644653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539302646
    },
    {
        "content": "<p>MWE please</p>",
        "id": 135644664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539302660
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">def</span> <span class=\"n\">is_odd</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135644674,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539302676
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">},</span> <span class=\"n\">is_odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 135644698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539302732
    },
    {
        "content": "<p>turns out the important part of the theorem is <code>2 * n + 1 + 1 = 2 * (n + 1)</code> which is true by definition</p>",
        "id": 135644753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539302773
    },
    {
        "content": "<p>cool</p>",
        "id": 135644768,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539302819
    },
    {
        "content": "<p>what does <code>|</code> do and why <code>_</code> following it?</p>",
        "id": 135644777,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539302858
    },
    {
        "content": "<p>I'm using the equation compiler to pattern match on the exists</p>",
        "id": 135644786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539302878
    },
    {
        "content": "<p>the <code>_</code> is the <code>n</code> from the statement</p>",
        "id": 135644831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539302892
    },
    {
        "content": "<p>ahh pattern matching thx</p>",
        "id": 135644838,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539302910
    },
    {
        "content": "<p>but it is matched against <code>2*n+1</code> because I matched on the equality too</p>",
        "id": 135644851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539302928
    },
    {
        "content": "<p>using <code>rfl</code> in pattern matching is pretty eye opening</p>",
        "id": 135644929,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539303058
    },
    {
        "content": "<p>Could you explain the pattern matching more thoroughly?</p>",
        "id": 135645149,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539303398
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 135645163,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1539303417
    },
    {
        "content": "<p>Since exists and eq are both inductive types, you can match on them, meaning you have to give a case for each constructor. Both only have one constructor, so there is only one case, where the exists is the <code>Exists.mk</code> function (which can also be written using the angle pair bracket) and the eq has the contstructor for equality which is <code>rfl</code>. If you put in both of those for the second argument, the first argument is forced to be <code>(2*n+1)</code> (Lean can figure this out, but if you want you can replace the <code>_</code> with <code>.(2*n+1)</code>, where the dot means that this argument's value is forced by later arguments.)</p>\n<p>So in this case of the match, we have to prove the statement with <code>n</code> replaced with <code>2*n+1</code>, that is, <code>is_even (2 * n + 1 + 1)</code>. This is defeq to an exists, so I use the angle brackets to supply the witness, which is <code>n+1</code>, and the proof of equality, of type <code>2 * n + 1 + 1 = 2 * (n + 1)</code>, which as I said is true by reflexivity because both sides are defeq.</p>",
        "id": 135645594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539304112
    },
    {
        "content": "<p>the defeq chain looks like this btw:</p>\n<div class=\"codehilite\"><pre><span></span>2 * (n + 1)\n= 2 * succ n\n= 2 * n + 2\n= 2 * n + succ 1\n= succ (2 * n + 1)\n= succ (succ (2 * n))\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>2 * n + 1 + 1\n= succ (2 * n + 1)\n= succ (succ (2 * n))\n</pre></div>",
        "id": 135645685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539304264
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>2 * (n + 1)\n= 2 * (succ (n + 0))\n= 2 * (succ n)\n= 2 * n + 2\n= ...\n</pre></div>",
        "id": 135645733,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539304331
    },
    {
        "content": "<p>I'll omit the steps that unfold the definition of <code>+</code>. :)</p>",
        "id": 135645741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539304374
    }
]