[
    {
        "content": "<p>I'm trying to prove  A \\/ not A using double negation elimination,</p>\n<div class=\"codehilite\"><pre><span></span>open classical\nvariable A : Prop\ntheorem dne ( h: not ( not A )) : A :=\nby_contradiction\n    (assume h1 : not A,\n        show false, from h h1)\nexample : A ∨ ¬ A :=\nhave h1 : not ( not ( A ∨ not A), from\n    assume hA : A,\n    have h2 : A ∨ ¬ A, from or.inl hA,\n    assume h3 : ¬ (A ∨ ¬ A),\n    show false, from h3 h2\nshow A ∨ ¬ A,from dne (A ∨ not A) h1\n</pre></div>\n\n\n<p>I'm getting these errors</p>\n<div class=\"codehilite\"><pre><span></span>em.lean:8:34: error\ninvalid expression\nem.lean:13:0: error\ninvalid &#39;have&#39; declaration, &#39;,&#39; expected\n</pre></div>\n\n\n<p>I dont knwo whats wrong with this.  Is this the right way to do this?</p>",
        "id": 160757904,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552548855
    },
    {
        "content": "<p>You should start with ensuring parentheses are balanced</p>",
        "id": 160758099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552549189
    },
    {
        "content": "<p>Sorry. Balanced it but no change. i think i didnt prove this <br>\n<code> have h1 : not ( not ( A ∨ not A), from</code></p>",
        "id": 160758338,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552549486
    },
    {
        "content": "<p>I have been using this software for a while now and I still look at code like this and find it incomprehensible. I know all this have, assume, from stuff is supposed to make it feel closer to English or whatever but for me it turns the code into spaghetti. <span class=\"user-mention\" data-user-id=\"212008\">@Manikhanta Teja</span> have you tried using tactic mode and more structured code with <code>{}</code> in?</p>",
        "id": 160758659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552549897
    },
    {
        "content": "<p>What does <code>assume</code> even do? How can I just randomly assume A in the middle of a proof of <code>not ( not ( A ∨ not A))</code>?</p>",
        "id": 160758821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550139
    },
    {
        "content": "<p>Whilst I am not an expert in this horrible mode, I conjecture that if you're trying to prove things, you can't just write random assumptions like <code>assume hA : A</code> in the middle of a proof.</p>",
        "id": 160758887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm trying to understand how this working. I'm still a beginner. I'm sorry.</p>",
        "id": 160758917,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552550272
    },
    {
        "content": "<p>Are you reading TPIL?</p>",
        "id": 160758969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550299
    },
    {
        "content": "<p>They start with this horrible mode</p>",
        "id": 160758970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550305
    },
    {
        "content": "<p>I would probably have given up Lean there and then were it not for the fact that I had read a Coq tutorial that went straight into tactic mode</p>",
        "id": 160758978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550329
    },
    {
        "content": "<p>Yeah i started with TPIL.</p>",
        "id": 160758992,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552550368
    },
    {
        "content": "<p>I teach a lot of beginners how to use Lean, and for a question like this I would <em>always</em> start with the following template:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160758993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550369
    },
    {
        "content": "<p>Here is a crazy suggestion: just stop what you're doing, go straight to chapter 5, and read a bit about doing basic logic in tactic mode.</p>",
        "id": 160758999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550396
    },
    {
        "content": "<p>The absolutely massive advantage of tactic mode for beginners is that <em>at all times</em> you can see <em>exactly</em> what you have already proved, and what you are trying to prove.</p>",
        "id": 160759057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550422
    },
    {
        "content": "<p>Starting chapter 5 now. Thanks.</p>",
        "id": 160759088,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552550485
    },
    {
        "content": "<blockquote>\n<p>What does <code>assume</code> even do? How can I just randomly assume A in the middle of a proof of <code>not ( not ( A ∨ not A))</code>?</p>\n</blockquote>\n<p><code>assume</code> is just notation for <code>λ</code></p>",
        "id": 160762719,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1552554607
    },
    {
        "content": "<p>So that answers the question of why the original code didn't compile -- the <code>assume ha : A</code> looks invalid because it would only work for goals of the form <code>A -&gt; &lt;something&gt;</code></p>",
        "id": 160763347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552555238
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>open classical\nvariable A : Prop\ntheorem dne ( h: not ( not A )) : A :=\nby_contradiction\n    (assume h1 : not A,\n        show false, from h h1)\nexample : A ∨ ¬ A :=\nhave hN : not ( not ( A ∨ not A), from\n    (assume h1 :  ¬ (A ∨ ¬ A),\n        have h2 : ¬ A, from\n            assume h3 : A,\n            have h4 : A ∨ ¬ A, from or.inl h3,\n            show false, from h1 h4,\n        have h5 : A ∨ ¬ A, from or.inr h2,\n        show false, from h1 h5)\nshow A ∨ ¬ A,from dne(A ∨ not A) hN\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>em.lean:8:34: error\ninvalid expression\nem.lean:17:0: error\ninvalid &#39;have&#39; declaration, &#39;,&#39; expected\n</pre></div>\n\n\n<p>This is what i was trying to do. Get  ¬¬(A ∨ ¬A) → A ∨ ¬A from dne( A \\/ not A) and then apply implication elimination of  ¬¬(A ∨ ¬A) → A ∨ ¬A to get  A ∨ ¬A.<br>\nThe proof for  ¬¬(A ∨ ¬A) worked</p>\n<div class=\"codehilite\"><pre><span></span>variable A : Prop\ntheorem cc : ¬ (¬ ( A ∨ ¬ A)) :=\n(assume h1 :  ¬ (A ∨ ¬ A),\n    have h2 : ¬ A, from\n        assume h3 : A,\n        have h4 : A ∨ ¬ A, from or.inl h3,\n        show false, from h1 h4,\n    have h5 : A ∨ ¬ A, from or.inr h2,\n    show false, from h1 h5)\n</pre></div>\n\n\n<p>Is there anything wrong with this<br>\n<code>show A ∨ ¬ A,from dne(A ∨ not A) hN</code></p>",
        "id": 160834476,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552608103
    },
    {
        "content": "<p>The error seems to indicate you've got the syntax wrong somewhere.</p>",
        "id": 160834894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552608587
    },
    {
        "content": "<p>There's a missing comma after <code>show false, from h1 h5)</code></p>",
        "id": 160834997,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552608696
    },
    {
        "content": "<p>Still have a problem with<br>\n<code>em.lean:8:34: error\ninvalid expression</code></p>",
        "id": 160835075,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552608809
    },
    {
        "content": "<p>Got it. I'm an idiot. I didn't balance the paranthesis.</p>",
        "id": 160835140,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552608862
    },
    {
        "content": "<p>If you were to use tactic mode you would have none of these problems and the errors would be far less obscure</p>",
        "id": 160835451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552609258
    },
    {
        "content": "<p>Tactic mode forces you to structure your proofs properly</p>",
        "id": 160835469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552609283
    }
]