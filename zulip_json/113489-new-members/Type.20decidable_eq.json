[
    {
        "content": "<p>I am looking to prove ‘decidable_eq’ for a structure like this for the purpose of program verification:<br>\n<code>structure graph := (V : Type) (f : fintype V) (d : decidable_eq V) (w : V → V → ℤ) </code><br>\nIt has become clear that this graph does not satisfy <code>decidable_eq</code> because <code>Type</code> does not satisfy <code>decidable_eq</code>. I would like to have different graphs of different types. Is there some subtype of <code>Type</code> that I should use that has decidable equality? And how would I go about proving decidable equality of the resulting ‘graph’ type?</p>",
        "id": 319902293,
        "sender_full_name": "Chase Norman",
        "timestamp": 1673064414
    },
    {
        "content": "<p>you should move <code>V</code> to a parameter</p>",
        "id": 319902554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673064755
    },
    {
        "content": "<p>also probably <code>[fintype V] [decidable_eq V]</code></p>",
        "id": 319902575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673064790
    },
    {
        "content": "<p>How might you place multiple <code>graph</code> instances with different <code>V</code> in the same <code>list</code>, for instance? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 319902689,
        "sender_full_name": "Chase Norman",
        "timestamp": 1673064905
    },
    {
        "content": "<p>It is actually my intention that the node type <code>V</code> is compared when two graphs are compared. However, since <code>Type</code> does not have decidable equality, it seems that I will need to choose a subtype.</p>",
        "id": 319902815,
        "sender_full_name": "Chase Norman",
        "timestamp": 1673065050
    },
    {
        "content": "<p>In general, you can't do this because different types can't be compared. (<a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> ?) For an enumerated list or schema of types, you can do it by having an inductive type (with decidable equality) giving the schema, and then an evaluation function which gives the type for one representative in order to put a graph structure on it</p>",
        "id": 319903465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673065935
    }
]