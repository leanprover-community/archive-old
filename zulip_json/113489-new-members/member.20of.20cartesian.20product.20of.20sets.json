[
    {
        "content": "<p>I'm struggling to understand why this (contrived example) doesn't compile, I don't understand how sets work really:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x.1</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x.2</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226705270,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613587476
    },
    {
        "content": "<p>I think this is just the Lean 3 parser giving up on you rather than any misunderstanding on your part.</p>",
        "id": 226705632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613587629
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x.1</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x.2</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226705833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613587709
    },
    {
        "content": "<p>Note that you had another problem. Lean parses the type of <code>r</code> as <code>(set S) × S</code></p>",
        "id": 226705874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613587732
    },
    {
        "content": "<p>Oh I see, so the point is that membership is a proposition?</p>",
        "id": 226706091,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613587814
    },
    {
        "content": "<p>yes</p>",
        "id": 226706114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613587826
    },
    {
        "content": "<p>Cool thanks</p>",
        "id": 226706144,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613587838
    },
    {
        "content": "<p><code>#print notation × -- _ `×`:35 _:34 := prod #1 #0</code> -- <code>\\times</code> has a meagre binding power of 35, and <code>set</code> is a function so has a binding power of something like 1000.</p>",
        "id": 226706165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613587843
    },
    {
        "content": "<p>Hm okay does this <code>nonarchimedean_normed_ring.ultrametric</code> look like a reasonable statement then? It compiles but I'm not sure I'm using everything correctly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.power_series.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">nonarchimedean_normed_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">normed_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ultrametric_inequality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nonarchimedean_normed_ring.ultrametric</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∥∑</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226708155,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613588596
    },
    {
        "content": "<p>Functions seem to have binding power 1024 by the way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">moo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`★`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">moo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"c1\">-- will fail if you lower this to 1024</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">★</span> <span class=\"n\">b</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 226708288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613588642
    },
    {
        "content": "<p>For exactly this reason of binding powers, you shouldn't need <code>()</code> around <code>max</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">ultrametric_inequality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 226708735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613588798
    },
    {
        "content": "<p>The lemma statement looks a bit non-idiomatic too me...</p>",
        "id": 226708932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613588867
    },
    {
        "content": "<p>I would replace <code>{S : set R}</code> by <code>{S : Type*}</code></p>",
        "id": 226709212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613588963
    },
    {
        "content": "<p>And use <code>[nonempty S]</code></p>",
        "id": 226709244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613588975
    },
    {
        "content": "<p>I'm not sure it's true as it stands. What about if S is infinite, m is unbounded, and t is empty?</p>",
        "id": 226709248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613588976
    },
    {
        "content": "<p>And also what Johan says -- S doesn't need to be anything to do with R. I think you want that t is nonempty.</p>",
        "id": 226709414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589026
    },
    {
        "content": "<p>Sorry I'm confused, basically there should only be <code>S</code>, I wanted <code>t</code> to be a proof that <code>S</code> is finite, but I think I'm misinterpreting what a <code>finset</code> is</p>",
        "id": 226709509,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613589057
    },
    {
        "content": "<p><code>t : finset S</code> means <code>t is a finite subset of S</code>. Maybe you want <code>hS : S.finite</code> then</p>",
        "id": 226709597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589082
    },
    {
        "content": "<p>except that because you don't even need S to be a set, you maybe want a random nonempty finite type S.</p>",
        "id": 226709640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589104
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nonarchimedean_normed_ring.ultrametric</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">∥∑</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>hopefully that's true.</p>",
        "id": 226709813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589164
    },
    {
        "content": "<p>But actually, the version with <code>s : finset \\iota</code> will probably be more useful in practice.</p>",
        "id": 226709917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613589201
    },
    {
        "content": "<p><code>set S</code> is the type of subsets of <code>S</code>, <code>finset S</code> is the type of finite subsets of <code>S</code>, <code>set.finite</code> is a predicate on <code>set S</code> saying \"I am finite\", <code>fintype</code> is a predicate on <code>Type</code> saying \"I am finite\".</p>",
        "id": 226710006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589240
    },
    {
        "content": "<p>So the I would drop the <code>[fintype \\iota]</code>, replace <code>[nonempty \\iota]</code> by <code>(hs : s.nonempty)</code> and <code>\\ex x : \\iota</code> by <code>\\ex x \\in s</code>.</p>",
        "id": 226710073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613589256
    },
    {
        "content": "<p>with <code>s : finset iota</code></p>",
        "id": 226710114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589278
    },
    {
        "content": "<p>I totally agree that this is confusing and that there is no obvious reference to point to.</p>",
        "id": 226710545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589458
    },
    {
        "content": "<p>Thanks that clarifies things! Then this gives an error still</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nonarchimedean_normed_ring.ultrametric</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∥∑</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226710646,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613589487
    },
    {
        "content": "<p>Apparently I can't make a map out of a finset... I guess it's not a type</p>",
        "id": 226710683,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613589504
    },
    {
        "content": "<p>Maybe you want <code>m : iota -&gt; R</code></p>",
        "id": 226710694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589510
    },
    {
        "content": "<p>But then presumably <code>m</code> has to be defined on all of <code>\\iota</code>, when I would just want it to be defined on <code>S</code></p>",
        "id": 226710809,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613589562
    },
    {
        "content": "<p><code>S : finset iota</code> is a term not a type, it has type <code>finset iota</code>. Types have type <code>Type</code>. But clearly you sometimes want to think of <code>S</code> as a type in itself, the type of elements of S, so there is a way to coerce it into a type, but it involves up-arrows because nobody fixed it yet.</p>",
        "id": 226710867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589589
    },
    {
        "content": "<p>If you only want m to be defined on S then you could go with my [fintype iota] suggestion. But Johan's point is that actually if you think you have a map defined only on S, you might well find that Lean will happily let it be defined on all of iota, even if it involves things like division by 0, because this is some type theory philosophy that maps should be defined on all of a type and return junk values away from the domain of interest.</p>",
        "id": 226711059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589661
    },
    {
        "content": "<p>If you really only want m defined on S then there's no point having iota.</p>",
        "id": 226711172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589708
    },
    {
        "content": "<p>1/0=0, sup of the naturals in the reals is 0, as is sup of the empty set etc.</p>",
        "id": 226711279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589742
    },
    {
        "content": "<p>if you're foolish enough to give a set to the <code>real.sup</code> function which isn't non-empty and bounded, you'll get a junk answer rather than an error.</p>",
        "id": 226711344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"235423\">Ashwin Iyengar</span> <a href=\"#narrow/stream/113489-new-members/topic/member.20of.20cartesian.20product.20of.20sets/near/226710683\">said</a>:</p>\n<blockquote>\n<p>Apparently I can't make a map out of a finset... I guess it's not a type</p>\n</blockquote>\n<p><code>S : finset \\iota</code> means that <code>S</code> has type <code>finset \\iota</code>. <code>S : Type</code> means that <code>S</code> has type <code>Type</code>. The latter means \"<code>S</code> is a type\". So indeed, finsets aren't types.<br>\nIt takes a bit of time to get used to, but really everything only has 1 type.</p>",
        "id": 226711393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613589802
    },
    {
        "content": "<p>so similarly here you might think that m is only defined on S but probably it will make sense on all of iota.</p>",
        "id": 226711402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235423\">@Ashwin Iyengar</span> for proofs it will be extremely convenient to have <code>m</code> defined on all of <code>\\iota</code>, but also have <code>s</code> around as finset.</p>",
        "id": 226711546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613589865
    },
    {
        "content": "<p>It means that you can restrict the sum to a smaller finset, or do induction on the size of the finset, and all the while <code>m : \\iota \\to R</code> doesn't change.</p>",
        "id": 226711620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613589894
    },
    {
        "content": "<p>Thousands of lines of code about <code>\\sum x in s, m s</code> have shown that this model is extremely convenient to work with in practice.</p>",
        "id": 226711689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613589926
    },
    {
        "content": "<p>Okay thanks. Final question, do you imagine that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nonarchimedean_normed_ring.ultrametric</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">):</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∥∑</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span>\n</code></pre></div>\n<p>would be less useful than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nonarchimedean_normed_ring.ultrametric</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∥∑</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"bp\">∥</span>\n</code></pre></div>",
        "id": 226711747,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613589952
    },
    {
        "content": "<p>sure</p>",
        "id": 226711839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613589980
    },
    {
        "content": "<p>the first is a trivial special case of the second, where two random types are being randomly decreed to be equal despite having nothing to do with each other.</p>",
        "id": 226711939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613590032
    },
    {
        "content": "<p>Even if you have a type which you are convinced is equal to R (e.g. a type canonically isomorphic to R), Lean might not let you prove that it's equal to R.</p>",
        "id": 226711999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613590062
    },
    {
        "content": "<p>Oh I see, you removed <code>m</code> too.</p>",
        "id": 226712085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613590094
    },
    {
        "content": "<p>I would certainly go for the second version</p>",
        "id": 226712123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613590116
    },
    {
        "content": "<p>I would still prove the second.</p>",
        "id": 226712130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613590120
    },
    {
        "content": "<p>The proof will be just as long as that of the first, but it will be much easier to apply the second version</p>",
        "id": 226712188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613590144
    },
    {
        "content": "<p>Okay thanks, maybe to convince myself I'll compare how hard it is to apply the first one vs the second one in my proof that you can multiply restricted power series</p>",
        "id": 226712210,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613590156
    },
    {
        "content": "<p>(Note that when you apply the second version, usually lean will figure out automatically what <code>\\iota</code> and <code>m</code> are. But with the first version you will hit situations quickly where you want to apply it, but lean will say \"nope\")</p>",
        "id": 226712294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613590195
    },
    {
        "content": "<p>Ashwin, if you think that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mi>g</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/fg]=R[1/f][1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> then your notion of what equality is is not the same as Lean's. If you think you have elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and they're actually elements of a ring canonically isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> then you need the map. Experience has shown us that having an index type is a powerful level of abstraction which covers essentially all use cases.</p>",
        "id": 226713913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613590909
    },
    {
        "content": "<p>If you really are in the situation where your map is not defined on all of iota, which does occasionally happen, then you just promote S to a type and continue anyway.</p>",
        "id": 226713995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613590943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/member.20of.20cartesian.20product.20of.20sets/near/226708735\">said</a>:</p>\n<blockquote>\n<p>For exactly this reason of binding powers, you shouldn't need <code>()</code> around <code>max</code> here:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">ultrametric_inequality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh btw it doesn't work without the () for some reason</p>",
        "id": 226727517,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613596839
    },
    {
        "content": "<p>≤ seems to take priority over the application of <code>max</code> or something</p>",
        "id": 226727563,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1613596862
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226744899\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/parsing.20question.20about.20.60.E2.88.A5x.E2.88.A5.60/near/226744899</a></p>",
        "id": 226745452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613605573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235423\">@Ashwin Iyengar</span> ypu, you are right. sorry for making a false claim</p>",
        "id": 226763853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613622889
    }
]