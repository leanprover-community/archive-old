[
    {
        "content": "<p>I'm trying to code up and prove things about a more general function (think on a general type u rather than on nats), but my first pass seems to require that I use the witness of an exists hypothesis in the def, which Lean doesn't seem to like. Here's a MWE that produces the error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_not_mem</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"bp\">...</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cons_not_mem</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">exi</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∉</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">exists_not_mem</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">exi.w</span> <span class=\"o\">::</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>In <code>cons_not_mem</code>, Lean complains that <code>Exists.w</code> is an unknown. Is there a way to use <code>exi</code> in the def? Or must I try a different route?</p>",
        "id": 261710679,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1637098785
    },
    {
        "content": "<p>You need to use <code>classical.some exi</code> because constructively <code>Exists</code> only eliminates into <code>Prop</code></p>",
        "id": 261710946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637098923
    },
    {
        "content": "<p>And then <code>classical.some_spec exi</code> is the proof that n is not in l</p>",
        "id": 261711068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637099005
    },
    {
        "content": "<p>Great, that's exactly what I needed. Thanks!</p>",
        "id": 261711209,
        "sender_full_name": "Cayden Codel",
        "timestamp": 1637099070
    }
]