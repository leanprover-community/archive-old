[
    {
        "content": "<p>I've successfully completed the Natural Number Game using the web interface.  Is there some simple way of saving my solutions?  I realize that I can probably go through each one and copy and paste, but is there some less tedious way?</p>\n<p>Also in level 2 of Addition World one is asked to prove</p>\n<p><code> lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) := </code></p>\n<p>I did the following.  Can someone explain why after I did <code>repeat {rw add_zero}</code> I didn't need to do refl?  Under what circumstances does lean figure that out automatically?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 221148088,
        "sender_full_name": "Victor Miller",
        "timestamp": 1609260845
    },
    {
        "content": "<p>Modern Lean is beefed up from old natural number Lean. After extensive playing of the natural number game, people realised that they were often ending proofs with <code>rw mul_assoc, refl</code> or <code>rw h, refl</code> etc so they beefed up <code>rw</code> so that every time the user used it, it tried refl afterwards just to see if it worked.</p>",
        "id": 221148246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609260978
    },
    {
        "content": "<p>That's good.  So how come it didn't work after I said <code>rw hd</code> ?</p>",
        "id": 221148297,
        "sender_full_name": "Victor Miller",
        "timestamp": 1609261031
    },
    {
        "content": "<p>it didn't try hard enough. It only tries on some level of reducibility.</p>",
        "id": 221148320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609261057
    },
    {
        "content": "<p>Ok.</p>",
        "id": 221148328,
        "sender_full_name": "Victor Miller",
        "timestamp": 1609261065
    },
    {
        "content": "<p><code>refl</code> is a tactic whose job it is to solve an undecidable problem.</p>",
        "id": 221148335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609261076
    },
    {
        "content": "<p>so you mustn't let it try too hard because it can get pretty lost sometimes.</p>",
        "id": 221148392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609261092
    },
    {
        "content": "<p>After <code>rw</code>, it tries <code>refl</code> but only a bit.</p>",
        "id": 221148423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609261114
    },
    {
        "content": "<p>I'm not making this up.</p>",
        "id": 221148432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609261127
    },
    {
        "content": "<p>I just changed the <code>rw hd</code> to <code>repeat {rw hd}</code> and the need for <code>refl</code> went away.</p>",
        "id": 221148483,
        "sender_full_name": "Victor Miller",
        "timestamp": 1609261175
    },
    {
        "content": "<p>(Kevin has a point but I think he's talking about something else)</p>\n<p>In NNG <code>rw</code> has been modified, so it doesn't try <code>refl</code> after the <code>rw</code>. That is why you need the <code>refl</code> at the end of your proof as it uses NNG <code>rw</code>. I think within <code>repeat { ... }</code>, it uses the standard Lean <code>rw</code>, so it does call <code>refl</code> after performing the rewrite.</p>",
        "id": 221148510,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1609261194
    },
    {
        "content": "<p>It's possible to get your solutions (encoded in a JSON object) from your browser's local storage. </p>\n<p>First, open the NNG site and then open your browser's dev tools. If you're using Firefox, then navigate to the \"Storage\" tab and open the \"Local storage\" dropdown on the left and click on \"<a href=\"http://imperial.ac.uk\">imperial.ac.uk</a>\". If you're using Chrome, navigate to the \"Application\" tab and do the same thing.</p>\n<p>You should see an entry with key <code>Natural number game-1-savedGameData</code>. The corresponding value is a JSON-encoded string containing all of your solutions.</p>",
        "id": 221148963,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609261528
    },
    {
        "content": "<p>Thanks.  That worked.  I was using Safari on my mac.  I had do Develop-&gt;Show Page Resources, and then click on storage.  Very similar to what you suggested.</p>",
        "id": 221150347,
        "sender_full_name": "Victor Miller",
        "timestamp": 1609262560
    }
]