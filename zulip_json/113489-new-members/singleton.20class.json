[
    {
        "content": "<p>Sorry if it's obvious, but I can't find it. Is there in mathlib a typeclass saying that a type is a singleton (i.e. it has exactly one term)? <code>has_singleton.singleton</code> seems to be something else.</p>",
        "id": 234023780,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618125801
    },
    {
        "content": "<p>I'm thinking of something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">all_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234023791,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618125826
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique\">docs#unique</a></p>",
        "id": 234023834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618125847
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 234023947,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618125975
    },
    {
        "content": "<p><code>subsingleton</code> is usually more useful</p>",
        "id": 234024192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618126318
    },
    {
        "content": "<p>Though I find kind of strange that this doesn't work out of the box</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- failed to synthesize type class instance for</span>\n<span class=\"c1\">-- α β : Type,</span>\n<span class=\"c1\">-- _inst_1 : unique α,</span>\n<span class=\"c1\">-- _inst_2 : unique β</span>\n<span class=\"c1\">-- ⊢ unique (α × β)</span>\n</code></pre></div>",
        "id": 234024391,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618126490
    },
    {
        "content": "<p>And I have to first define </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">unique.mk'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234024407,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618126512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/singleton.20class/near/234024192\">said</a>:</p>\n<blockquote>\n<p><code>subsingleton</code> is usually more useful</p>\n</blockquote>\n<p>Doesn't subsingleton mean at most one term?</p>",
        "id": 234024447,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618126562
    },
    {
        "content": "<p>Don't we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.unique\">docs#prod.unique</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique.prod\">docs#unique.prod</a>?</p>",
        "id": 234028912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618131450
    },
    {
        "content": "<p>I guess not</p>",
        "id": 234028988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618131536
    },
    {
        "content": "<p>Note that unique implies subsingleton, so it's often best to provide an instance of the former but where possible assume only the latter</p>",
        "id": 234029430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618131944
    }
]