[
    {
        "content": "<p>I have the following MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">B</span> <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Now I want to define a new function <code>h : A -&gt; nat</code> which behaves differently if the argument is actually of type <code>B</code>.  Ho do I do it?</p>",
        "id": 189025321,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1582642069
    },
    {
        "content": "<p>The argument to <code>h</code> can't be of type <code>B</code>, it is of type <code>A</code>.</p>",
        "id": 189025923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582642516
    },
    {
        "content": "<p>You could say \"behaves differently when called in the form <code>h (B.to_A b)</code>\", but then it is clearly absurd.</p>",
        "id": 189026014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582642577
    },
    {
        "content": "<p>Probably you want an inductive type with multiple constructors.</p>",
        "id": 189026022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582642586
    },
    {
        "content": "<p>Instead of making inductive types can I somehow have just <code>h</code> be an inductive definition?</p>",
        "id": 189026120,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1582642661
    },
    {
        "content": "<p>Asked another way, can I check for \"does my type have <code>g</code> as a field, if yes then do X else do Y\"?</p>",
        "id": 189026204,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1582642710
    },
    {
        "content": "<p>Again the type never has <code>g</code> as a field because the type is <code>A</code>.<br>\nYou could make <code>h</code> a member of class, and both <code>A</code> and <code>B</code> instances, I suppose. Then the data of what <code>h</code> should do is supplied by instance inference.</p>",
        "id": 189026256,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582642763
    },
    {
        "content": "<p>A value <code>a : A</code> is completely determined by <code>a.f</code>, so you can never tell if it was \"originally\" obtained from some <code>b : B</code></p>",
        "id": 189026365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582642829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Should.20I.20be.20using.20classes.20here.3F/near/189026365\" title=\"#narrow/stream/113489-new-members/topic/Should.20I.20be.20using.20classes.20here.3F/near/189026365\">said</a>:</p>\n<blockquote>\n<p>A value <code>a : A</code> is completely determined by <code>a.f</code>, so you can never tell if it was \"originally\" obtained from some <code>b : B</code></p>\n</blockquote>\n<p>Thanks, that makes it clearer. Does that change if I had defined <code>A</code> and <code>B</code> as classes intead of structures?</p>",
        "id": 189026510,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1582642916
    },
    {
        "content": "<p>Nope</p>",
        "id": 189027941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582643764
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 189028035,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1582643855
    }
]