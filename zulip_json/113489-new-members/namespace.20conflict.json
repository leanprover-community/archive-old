[
    {
        "content": "<p>I am trying to work with continuous bundled functions. I have a problem with namespaces. I defined</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">continuous_map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>       <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">continuous</span>   <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>However, in the namespace <code>continuous_map</code> continuous conflicts with the already existing continuous. In the algebra section this problem would be solved by renaming continuous to is_continuous. However this is a pretty drastic change. By now I renamed continuous in continuous_map to continuity, but this conflicts with Mathlib naming conventions. Any tip?</p>",
        "id": 203819360,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594723629
    },
    {
        "content": "<p>I think it's possible to protect definitions after the fact as of some recent version</p>",
        "id": 203819483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594723753
    },
    {
        "content": "<p>that way <code>continuous_map.continuous</code> will not compete with <code>continuous</code> even if you open the <code>continuous_map</code> namespace</p>",
        "id": 203819514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594723798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/namespace.20conflict/near/203819483\">said</a>:</p>\n<blockquote>\n<p>I think it's possible to protect definitions after the fact as of some recent version</p>\n</blockquote>\n<p>How do I do that?</p>",
        "id": 203819580,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594723837
    },
    {
        "content": "<p>I mean I do not understand \"after the fact\"</p>",
        "id": 203819599,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594723869
    },
    {
        "content": "<p>Normally you would protect a definition by writing <code>protected def ...</code> but in this case the definition is the field of a structure, which is automatically generated</p>",
        "id": 203819758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594724034
    },
    {
        "content": "<p>so there is no good place to put the word <code>protected</code></p>",
        "id": 203819816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594724049
    },
    {
        "content": "<p>There is possibly a more streamlined version of this, but here's a way to do it</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">updateex_env</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">mk_protected</span> <span class=\"bp\">``</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">B</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">A</span> <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">B</span> <span class=\"c1\">-- fails</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">B</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 203820057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594724270
    },
    {
        "content": "<p>Ok cool this works!!</p>",
        "id": 203820259,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594724418
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 203820262,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594724423
    },
    {
        "content": "<p>I guess it is fine if such a line is PRed to Mathlib</p>",
        "id": 203820320,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594724480
    },
    {
        "content": "<p>Even better, you can use <code>@[protect_proj]</code> which is designed precisely for this.</p>",
        "id": 203821881,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594725830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/namespace.20conflict/near/203821881\">said</a>:</p>\n<blockquote>\n<p>Even better, you can use <code>@[protect_proj]</code> which is designed precisely for this.</p>\n</blockquote>\n<p>Can I use it to only protect <code>continuous</code> and not <code>to_fun</code>?</p>",
        "id": 203822611,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594726403
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#protect_proj\">https://leanprover-community.github.io/mathlib_docs/attributes.html#protect_proj</a><br>\n<code>@[protect_proj without ...]</code> should work.</p>",
        "id": 203822700,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594726468
    },
    {
        "content": "<p>Ok thanks!</p>",
        "id": 203822772,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594726561
    },
    {
        "content": "<p>Note that protecting <code>to_fun</code> also is probably a good idea, because you will never want to use <code>to_fun</code> directly, but instead you should register a coercion. This would mean that the field <code>continuous</code> should be renamed <code>continuous'</code> or <code>continuous_to_fun</code> in your structure, and the main lemma would be stated as continuity of the coerced function (and you can protect it directly).</p>",
        "id": 203823457,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594727131
    },
    {
        "content": "<p>And even if you do use <code>to_fun</code> directly, it would mainly be in the form <code>f.to_fun x</code></p>",
        "id": 203823529,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594727179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/namespace.20conflict/near/203823457\">said</a>:</p>\n<blockquote>\n<p>Note that protecting <code>to_fun</code> also is probably a good idea, because you will never want to use <code>to_fun</code> directly, but instead you should register a coercion. This would mean that the field <code>continuous</code> should be renamed <code>continuous'</code> or <code>continuous_to_fun</code> in your structure, and the main lemma would be stated as continuity of the coerced function (and you can protect it directly).</p>\n</blockquote>\n<p>Why using this trick to protect continuous instead that protect_proj as you suggested before?</p>",
        "id": 203829183,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594731284
    },
    {
        "content": "<p>It's not about protecting but rather that, if the primary way to use <code>f</code> as a function is <code>f x</code> and not <code>f.to_fun x</code>, then you want <code>f.continuous</code> to be of the form <code>continuous f</code> and not <code>continuous f.to_fun</code>.</p>",
        "id": 203830020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594731775
    },
    {
        "content": "<p>You cannot define it this way in the structure because the coercion instance does not exist yet.</p>",
        "id": 203830060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594731809
    },
    {
        "content": "<p>But that's fine because dot notation also works with things that are not structure fields.</p>",
        "id": 203830173,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594731853
    },
    {
        "content": "<p>This occurs many places in mathlib</p>",
        "id": 203830183,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594731860
    },
    {
        "content": "<p>Ok thanks</p>",
        "id": 203832142,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594733011
    }
]