[
    {
        "content": "<p>Given <code>(a b : ℕ) (h : a ≤ b)</code>, after doing <code>induction h</code>, the <code>case less_than_or_equal.refl</code> doesn't have any hypothesis allowing to conclude <code>a = b</code>. Why not? Is there another way to perform induction that does introduce <code>a = b</code> in that case?</p>",
        "id": 133180811,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1535814349
    },
    {
        "content": "<p>in the refl case, you should already have <code>b</code> replaced by <code>a</code> in the goal</p>",
        "id": 133180865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535814440
    },
    {
        "content": "<p>By the way, I don't recommend doing induction on an le hypothesis. Instead, do induction on <code>a</code> and/or <code>b</code> and use lemmas on le to satisfy the induction hypothesis</p>",
        "id": 133180929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535814586
    },
    {
        "content": "<p>What if a and b are expressions? In this example, the goal is still <code>a ≤ b</code></p>\n<div class=\"codehilite\"><pre><span></span>example (a b : ℕ) (h : nat.succ a ≤ nat.succ b) : a ≤ b := begin\n  induction h,\n  case nat.less_than_or_equal.refl { sorry }\nend\n</pre></div>",
        "id": 133181092,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1535814882
    },
    {
        "content": "<p>use cases instead for that</p>",
        "id": 133181104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535814938
    },
    {
        "content": "<p>If you need to combine induction with the parameter equalities, you should first use <code>generalize h : nat.succ a</code> with all the variables you are holding fixed in the induction, then use <code>induction</code></p>",
        "id": 133181150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535815005
    },
    {
        "content": "<p>Thanks, that seems to work</p>",
        "id": 133181412,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1535815459
    },
    {
        "content": "<p>I haven't used a lot of explicit lemmas so far, I often have trouble finding the right one. I usually get by with a lot of unfold/delta/induction/cases followed by simp</p>",
        "id": 133181414,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1535815479
    },
    {
        "content": "<p>That's not very sustainable. I suggest learning to browse the source files of core lib and/or mathlib</p>",
        "id": 133181437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535815557
    },
    {
        "content": "<p>I recently discovered M-. will jump to lean and mathlib sources, I'll start using it more</p>",
        "id": 133181486,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1535815630
    },
    {
        "content": "<p>autocompletion also helps for discoverability, once you learn the naming convention</p>",
        "id": 133181487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535815671
    },
    {
        "content": "<p>Oh nice. But I notice that doesn't work too well if I haven't imported the right theory. Is there a better way to find lemmas than grep?</p>",
        "id": 133181653,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1535815935
    },
    {
        "content": "<p><code>#find</code> might be helpful for you. But I would definitely recommend (a) learning the rules of thumb for lemma names and (b) the ctrl-space dance for auto-completion. If you're trying to prove something about int then just import <code>data.int.basic</code></p>",
        "id": 133181720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535816086
    }
]