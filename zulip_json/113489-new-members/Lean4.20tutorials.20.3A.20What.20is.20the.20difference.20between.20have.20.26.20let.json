[
    {
        "content": "<p>Syntactically <code>have</code> and <code>let</code> seem similar where <code>have h : &lt;some type&gt; := &lt;some expr&gt;</code> and <code>let h : &lt;some type&gt; := &lt;some expr&gt;</code> .<br>\nIs there any semantic difference and can I use them interchangeably in a proof?</p>",
        "id": 305478825,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666409612
    },
    {
        "content": "<p><code>have</code> is for props and <code>let</code> is for data. At least that's the quick answer. <br>\nIf you use <code>have</code> to \"define\" something like a natural number or a function, then lean will only remember that it's a term of the given type without actually remembering the definition you give. In those cases you should use <code>let</code> (or better, mathlib's <code>set</code>)</p>",
        "id": 305479141,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666409911
    },
    {
        "content": "<p>The difference is that after a <code>let</code>, the value of the declaration is interchangeable with the introduced name (they are definitionally equal), while in a <code>have</code> the name is opaque</p>",
        "id": 305479150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666409921
    }
]