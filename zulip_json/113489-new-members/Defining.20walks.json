[
    {
        "content": "<p>Hello everyone! I am trying to define a type of walks in a square grid. I want to parametrize the type over endpoints of the walk and the number of backwards-moves (moves that are either up or left). I made the following definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span><span class=\"bp\">×</span><span class=\"n\">ℕ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">back_walk</span><span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">node</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">start</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"o\">,</span> <span class=\"n\">back_walk</span> <span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">back_walk</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">back_walk</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">back_walk</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">back_walk</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n\n<p>which seems to do what I want it to do, but it would be nice to be able to have the variables of the constructors somehow be captured by the scope of the inductive definition rather than the <code>\\Pi</code>'s at the constructors. I'm wondering if anyone has a suggestion? Thanks ^__^</p>",
        "id": 215105955,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1604070100
    },
    {
        "content": "<p>Is this more what you mean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span><span class=\"bp\">×</span><span class=\"n\">ℕ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">back_walk</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">node</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">back_walk</span> <span class=\"mi\">0</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 215110011,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604071740
    },
    {
        "content": "<p>Yes thank you ^___^</p>",
        "id": 215110920,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1604072154
    },
    {
        "content": "<p>I'm not sure how you plan on using it, so that might not be the right way to express it</p>",
        "id": 215111037,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604072202
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span><span class=\"bp\">×</span><span class=\"n\">ℕ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">back_walk</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">node</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">node</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">back_walk</span> <span class=\"mi\">0</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">back_walk</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">back_walk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">back_walk</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">back_walk</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"n\">n</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">y'</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">string.intercalate</span> <span class=\"s2\">\", \"</span> <span class=\"o\">[</span><span class=\"s2\">\"end: \"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"s2\">\"steps: \"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"s2\">\"start: \"</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">y'</span><span class=\"o\">)]⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">back_walk</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">u.d.l.d.l.d.r</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">end: (5, 5), steps: 3, start: (6, 5)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 215111883,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604072582
    },
    {
        "content": "<p>Oh you are quite right I have <code>d</code> and <code>r</code>mixed up. Thank you, also for providing the nice debugging thingie :^)</p>",
        "id": 215112735,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1604072941
    },
    {
        "content": "<p>(Although I'd say that you have <code>end</code> and <code>start</code> mixed up there, I'm following the strange convention that pos y-dir is down and pos x-dir is right)</p>",
        "id": 215112965,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1604073030
    },
    {
        "content": "<p>Well, if it's a \"back walk\" then I think you're counting the <code>l</code> and <code>u</code> taken backwards. Of course, not sure of the actual problem, so easy to change the labels =)</p>",
        "id": 215113233,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1604073148
    },
    {
        "content": "<p>Maybe it's just the name 'back_walk' that is bad, because it is meant to convey something like 'a walk where we count the number of backs' which 'back_walk' does not convey</p>",
        "id": 215113648,
        "sender_full_name": "Oskar Berndal",
        "timestamp": 1604073309
    }
]