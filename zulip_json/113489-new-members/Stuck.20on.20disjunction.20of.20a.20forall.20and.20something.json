[
    {
        "content": "<p>I am doing exercises in Chapter 4 and I've got this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpr</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hpr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hpr</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Just after the <code>have h2 := h x</code> I am in goal state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">hpr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>At this point I don't have any reason to believe <code>p x</code>, I only know <code>r</code>.  I got to this state reasonably though.  The state is weak but not contradictory.  If it was contradictory I could say <code>exfalso</code> and be done. So I've run out of ideas.  Any hints would be greatly appreciated!</p>",
        "id": 217965920,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606366746
    },
    {
        "content": "<p>I think you reached an impossible goal by doing <code>left</code> at the beginning. You will need <code>left</code> or <code>right</code> depending on the case for <code>hpr</code>.</p>",
        "id": 217966524,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606367541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> the problem is that <code>right</code> doesn't have any support either.  <code>right</code> gives a goal of <code>r</code> but we don't have any way of proving <code>r</code>.  Suppose I do <code>right</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then the goal state becomes </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>and there is nothing there that will prove <code>r</code>.</p>",
        "id": 217966633,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606367744
    },
    {
        "content": "<p>You can't do neither <code>left</code> or <code>right</code> before doing cases on your hypothesis, because which part of the disjunction in the goal is true will depend on which part of the disjunction in the hypothesis is true (for each x)</p>",
        "id": 217966803,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606367947
    },
    {
        "content": "<p>Actually I think the simplest way to do this would be by cases on r</p>",
        "id": 217966862,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606368019
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> that's a good point <code>by_cases hr : r,</code>.</p>",
        "id": 217967360,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606368737
    }
]