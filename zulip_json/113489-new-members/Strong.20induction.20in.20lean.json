[
    {
        "content": "<p>I want to prove strong induction in lean but Im having a hard time writing it out. Is it possible to do and-statements of variable length in lean? Something like this is what I want to do in lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">strong_induction</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"bp\">...</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>or maybe like this if that's possible:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">strong_induction&#39;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 147975900,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1542644044
    },
    {
        "content": "<p>You might want to look at <code>nat.strong_induction_on</code> and <code>nat.case_strong_induction_on</code>, which follow the pattern of your second example.</p>",
        "id": 147976238,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542644347
    },
    {
        "content": "<p><code>theorem strong_induction (P : ℕ → Prop) (H : ∀ n : ℕ, (∀ m : ℕ, m &lt; n → P m) → P n) (n : ℕ) : P n := sorry</code> would be the way I'd formalise it.</p>",
        "id": 147980492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542648025
    },
    {
        "content": "<p>Note that the devious case <code>H 0</code> says that if something is true for all elements of the empty set, then <code>P 0</code> follows, which is a trick I mentioned in lectures. There is something called \"well-founded induction\" which works on any set with a well-founded ordering -- for example the naturals, but also many other ordered sets.</p>",
        "id": 147980545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542648117
    },
    {
        "content": "<p>Ah forgot about that trick, thank you!</p>",
        "id": 147984947,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1542653103
    }
]