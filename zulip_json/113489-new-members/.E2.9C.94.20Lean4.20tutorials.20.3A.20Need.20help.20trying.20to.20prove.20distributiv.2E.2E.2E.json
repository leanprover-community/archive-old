[
    {
        "content": "<p>yeah I think that is kind of how I want to approach problems, I like using functions instead of tactics</p>",
        "id": 305427285,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380035
    },
    {
        "content": "<p>sorry it must be a pain to try to do it a way which is not idiomatic to you</p>",
        "id": 305427319,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380059
    },
    {
        "content": "<p>It is just a little taxing on the wrists :)</p>",
        "id": 305427362,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666380081
    },
    {
        "content": "<p>Can you provide what you have and sorry out what you want?</p>",
        "id": 305427400,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666380098
    },
    {
        "content": "<p>so right now I am stuck at a point where I am not sure where to start so it's kind of preliminary </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">and_distrib_or</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Iff.intro</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305427717,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380223
    },
    {
        "content": "<p>I think Or.elim is the way to go</p>",
        "id": 305427901,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380278
    },
    {
        "content": "<p>Yes, try to access the <code>\\or</code> statement in the <code>\\and</code> of <code>h</code> and use elimination on it.</p>",
        "id": 305428088,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666380351
    },
    {
        "content": "<p>something like this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">Iff.intro</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 305428244,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380410
    },
    {
        "content": "<p>so I am stuck at this point</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">and_distrib_or</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Iff.intro</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Or.intro_left</span>\n            <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error message is the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Or.intro_left</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.1635</span> <span class=\"o\">}</span>\n<span class=\"n\">argument</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.1635</span> <span class=\"o\">}</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">?</span><span class=\"n\">m.1620</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 305429101,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380721
    },
    {
        "content": "<p>I know Or.elim requires another argument</p>",
        "id": 305429176,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380742
    },
    {
        "content": "<p>oh I've provided a sorry for that</p>",
        "id": 305429222,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380768
    },
    {
        "content": "<p>so that should work</p>",
        "id": 305429231,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380774
    },
    {
        "content": "<p>but it's not</p>",
        "id": 305429246,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380780
    },
    {
        "content": "<p>You are feeding two proofs into <code>Or.intro_left</code> when it only takes one proof.</p>",
        "id": 305429396,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666380841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"557243\">@Shubham Kumar</span> I made a little gif of me proving one way of the implication in term mode. </p>\n<p><a href=\"/user_uploads/3121/TQJyPCVArFFjMV9hHSrBw1hl/or_assoc.gif\">or_assoc.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TQJyPCVArFFjMV9hHSrBw1hl/or_assoc.gif\" title=\"or_assoc.gif\"><img src=\"/user_uploads/3121/TQJyPCVArFFjMV9hHSrBw1hl/or_assoc.gif\"></a></div>",
        "id": 305429587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666380909
    },
    {
        "content": "<p>Oh thanks <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>  for that, the following works :D</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">Iff.intro</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Or.intro_left</span>\n            <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> for the gif I'll check that out :)</p>",
        "id": 305429714,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666380963
    },
    {
        "content": "<p>Have you <code>#check @Or.intro_left</code>'d?</p>",
        "id": 305429717,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666380963
    },
    {
        "content": "<p>If you are not careful then this \"build the function by hand\" approach can really get out of hand. In the video I keep control at all times by always making sure that at any point when I'm thinking, all the errors are just on single underscores.</p>",
        "id": 305429753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666380969
    },
    {
        "content": "<p>I did not see who was sending the gif and got super-confused for a sec <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 305429822,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666381003
    },
    {
        "content": "<p>Note also I use dot notation -- if <code>h : P \\or Q</code> then <code>h.elim</code> means <code>Or.elim h</code> , it's just a short cut.</p>",
        "id": 305429859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666381023
    },
    {
        "content": "<p>No <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> I haven't, @ helps with showing the implicits so that would be helpful, Thanks for that :)</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> yeah I saw that on the tutorial but I like keeping it <code>Or.elim h</code> right now since I am learning, so I can not think of it as a function and not anything else</p>",
        "id": 305430076,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666381105
    },
    {
        "content": "<p>But thanks for helping out a newbie, it means a lot when there is so much support for learning something new</p>",
        "id": 305430128,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666381130
    },
    {
        "content": "<p>You can write it out longhand if you like, I was just explaining the trick in case you hadn't seen it.</p>",
        "id": 305430204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666381163
    },
    {
        "content": "<p>oh the tutorial was very well written I quite enjoyed the explanation for dependent types and dependent products. I just intend to first get some practice by just thinking of a function</p>",
        "id": 305430395,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666381236
    },
    {
        "content": "<p>I was finally able to finish it!!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">and_distrib_or</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Iff.intro</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Or.intro_left</span>\n            <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">Or.intro_right</span>\n            <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Or.elim</span> <span class=\"n\">h</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">And.intro</span>\n            <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">hpq</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">Or.intro_left</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">hpq</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">And.intro</span>\n            <span class=\"o\">(</span><span class=\"n\">And.left</span> <span class=\"n\">hpr</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">Or.intro_right</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">And.right</span> <span class=\"n\">hpr</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 305432590,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666382126
    },
    {
        "content": "<p>and it works!!</p>",
        "id": 305432602,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666382135
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/Lean4.20tutorials.20.3A.20Need.20help.20trying.20to.20prove.20distributive.20pro\">#new members &gt; Lean4 tutorials : Need help trying to prove distributive pro</a> by <span class=\"user-mention silent\" data-user-id=\"557243\">Shubham Kumar</span>.</p>",
        "id": 305432604,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666382137
    }
]