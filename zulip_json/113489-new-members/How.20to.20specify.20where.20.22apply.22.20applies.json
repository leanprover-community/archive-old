[
    {
        "content": "<p>Another a newbie question (I never felt this stupid!):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_min</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"c1\">-- the goal here is:  min (min a b) c ≤ a</span>\n     <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In this example, at the indicated spot I would like to do \"apply min_le_left to the outer min\". How do I specify where apply does its job?</p>",
        "id": 224380902,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611862519
    },
    {
        "content": "<p><code>min_le_left</code> takes two argument, you can specify them writing <code>min_le_left x y</code> explicitly</p>",
        "id": 224381385,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611862692
    },
    {
        "content": "<p>OK, I see. If I add <code>apply min_le_left (min a b) c, </code> it says invalid apply tactic, failed to unify   min (min a b) c ≤ a with   min (min a b) c ≤ min a b. I guess I further need to combine this inequality I got from here with min a b \\le a. Is there a quick way to do this or do I need to write something like have h : ... and then say apply h?</p>",
        "id": 224381876,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611862921
    },
    {
        "content": "<p><code>min_le_left (min a b) c</code> says that <code>min (min a b) c ≤ min a b</code>, but your goal is <code>min (min a b) c ≤ min b c</code> so you cannot use it</p>",
        "id": 224382120,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611863033
    },
    {
        "content": "<p>How is your proof with pen and paper?</p>",
        "id": 224382199,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611863055
    },
    {
        "content": "<p><code>transitivity (min b c),</code>, perhaps</p>",
        "id": 224382220,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1611863063
    },
    {
        "content": "<p>I guess it is an exercise... if we can use the full mathlib <code>min_assoc a b c</code> says exactly <code>min (min a b) c = min a (min b c)</code></p>",
        "id": 224382370,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611863124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> : yes, I would like to \"save\" as an intermediate step <code>min (min a b) c \\le min a b</code>, then apply <code>min a b \\le a</code> and use transitivity of min.</p>",
        "id": 224383006,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1611863381
    },
    {
        "content": "<p>Indeed the actual proof uses it</p>",
        "id": 224383711,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611863701
    },
    {
        "content": "<p>Or with <code>calc</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_min</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">calc</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n          <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">min_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">min_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224384239,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1611863924
    }
]