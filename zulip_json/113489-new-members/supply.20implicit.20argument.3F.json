[
    {
        "content": "<p><code>nat.one_div_pos_of_nat {n : ℕ} : 0 &lt; 1 / (n + 1 : ℝ)</code>, the only argument is implicit. How should I use it?</p>",
        "id": 258654919,
        "sender_full_name": "abaaba",
        "timestamp": 1634871134
    },
    {
        "content": "<p><code>have triv : 0 &lt; 1 / (N + 1) := by nat.one_div_pos_of_nat N,</code> doesn't work, neither does <code>have triv : 0 &lt; 1 / (N + 1) := by nat.one_div_pos_of_nat,</code></p>",
        "id": 258654941,
        "sender_full_name": "abaaba",
        "timestamp": 1634871154
    },
    {
        "content": "<p>Kill the <code>by</code>, you don't want to be in tactic mode if you're supplying the term. And in general we prefer <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s in questions because it reduces confusion overall</p>",
        "id": 258655101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634871318
    },
    {
        "content": "<p>i think it's still not working ... This is the 0074 from tutorial</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 0074</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">x₀</span> <span class=\"bp\">→</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span>\n\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- if forall sequence approaching x0, f(u) approaches f(x0),</span>\n  <span class=\"c1\">-- then f is continuous at x0</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">x₀</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">seq_limit</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">continuous_at_pt</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">εg0</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">x₀</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)):</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"c1\">-- STAR have forget definition, only declaration</span>\n    <span class=\"c1\">-- it remains to show seq_limit u x0</span>\n    <span class=\"k\">have</span> <span class=\"n\">premise</span> <span class=\"o\">:=</span> <span class=\"n\">limit_const_add_inv_succ</span> <span class=\"n\">x₀</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">u</span> <span class=\"n\">premise</span> <span class=\"n\">ε</span> <span class=\"n\">εg0</span><span class=\"o\">,</span>\n    <span class=\"c1\">--  nat.one_div_pos_of_nat {n : ℕ} : 0 &lt; 1 / (n + 1 : ℝ)</span>\n    <span class=\"c1\">-- inv_succ_le_all :  ∀ ε &gt; 0, ∃ N : ℕ, ∀ n ≥ N, 1/(n + 1 : ℝ) ≤ ε</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">seq_limit</span> <span class=\"n\">at</span> <span class=\"n\">premise</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">u</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">triv</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.one_div_pos_of_nat</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258655226,
        "sender_full_name": "abaaba",
        "timestamp": 1634871466
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 258655347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634871579
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">nat.one_div_pos_of_nat</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">linear_ordered_field.lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">tutorials</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">my_exercises</span><span class=\"bp\">/</span><span class=\"n\">exercises</span><span class=\"bp\">/</span><span class=\"mi\">09</span><span class=\"n\">_limits_final.lean</span><span class=\"o\">:</span><span class=\"mi\">219</span><span class=\"o\">:</span><span class=\"mi\">36</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">too</span> <span class=\"n\">many</span> <span class=\"n\">arguments</span>\n</code></pre></div>",
        "id": 258655522,
        "sender_full_name": "abaaba",
        "timestamp": 1634871698
    },
    {
        "content": "<p>If you want to explicitly give an implicit argument, put <code>@</code> before the name of the function/theorem.  For example, <code>@nat.one_div_pos_of_nat N</code>.</p>",
        "id": 258655660,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634871823
    },
    {
        "content": "<p>Lean can also infer implicit arguments, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">triv</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.one_div_pos_of_nat</span>\n</code></pre></div>\n<p>should work.</p>",
        "id": 258655716,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634871853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/supply.20implicit.20argument.3F/near/258655660\">said</a>:</p>\n<blockquote>\n<p>If you want to explicitly give an implicit argument, put <code>@</code> before the name of the function/theorem.  For example, <code>@nat.one_div_pos_of_nat N</code>.</p>\n</blockquote>\n<p>this fails with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">nat.one_div_pos_of_nat</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">N</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 258655727,
        "sender_full_name": "abaaba",
        "timestamp": 1634871867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/supply.20implicit.20argument.3F/near/258655716\">said</a>:</p>\n<blockquote>\n<p>Lean can also infer implicit arguments, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">triv</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.one_div_pos_of_nat</span>\n</code></pre></div>\n<p>should work.</p>\n</blockquote>\n<p>this fails with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 258655746,
        "sender_full_name": "abaaba",
        "timestamp": 1634871893
    },
    {
        "content": "<p>Could you give the output of the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">nat.one_div_pos_of_nat</span>\n</code></pre></div>",
        "id": 258655779,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634871932
    },
    {
        "content": "<p>(Put this on a line outside the theorem you're proving.)</p>",
        "id": 258655803,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634871954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/supply.20implicit.20argument.3F/near/258655779\">said</a>:</p>\n<blockquote>\n<p>Could you give the output of the following?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">nat.one_div_pos_of_nat</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nat.one_div_pos_of_nat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 258655877,
        "sender_full_name": "abaaba",
        "timestamp": 1634872009
    },
    {
        "content": "<p>Ok, so this is saying it has three implicit arguments, not just one, which is what caused the earlier type mismatch.</p>",
        "id": 258655934,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634872077
    },
    {
        "content": "<p>Let's ignore that for a moment, since I expect this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">triv</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.one_div_pos_of_nat</span>\n</code></pre></div>\n<p>(Sorry I haven't tried it.)</p>",
        "id": 258656005,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634872137
    },
    {
        "content": "<p>I think the problem was that <code>N + 1</code> is a natural number by default, but we need to tell Lean we expect it to be a real number.</p>",
        "id": 258656038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634872172
    },
    {
        "content": "<p>it indeed worked <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 258656092,
        "sender_full_name": "abaaba",
        "timestamp": 1634872204
    },
    {
        "content": "<p>and also the <code>@nat.one_div_pos_of_nat _ _ N</code> worked too once the <code>:\\R</code> added to 1 + N</p>",
        "id": 258656235,
        "sender_full_name": "abaaba",
        "timestamp": 1634872348
    },
    {
        "content": "<p>Yep, Lean is solving for that <code>N</code> automatically in the implicit version.  You should also be able to put <code>\\R</code> in for the first underscore if you wanted to be more explicit.</p>",
        "id": 258656287,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634872422
    },
    {
        "content": "<p>(or if you wanted to write <code>have triv := @nat.one_div_pos_of_nat ℝ _ N</code>))</p>",
        "id": 258656347,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634872468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"450800\">@abaaba</span> all those explanations are good to know, but the intended use in the tutorial is to write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">triv</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.one_div_pos_of_nat</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>as in the indication.</p>",
        "id": 258669139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634884296
    },
    {
        "content": "<p>That being said, <code>nat.one_div_pos_of_nat</code> should have <code>n</code> as an explicit argument. The library should be fixed.</p>",
        "id": 258669240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634884360
    }
]