[
    {
        "content": "<p>In TPIL, one of the exercises is to prove ¬ (p ↔ ¬ p) using constructive logic.</p>\n<p>This spoiler thread contains the following:</p>\n<p>1) Assurance that it can be done. </p>\n<p>2) (some way below 1) : a hint.</p>\n<p>3) (some way below 2) : a solution.</p>",
        "id": 194285992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034417
    },
    {
        "content": "<p>1) It can be done!</p>\n<p>It's easy to do it classically, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- use excluded middle</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But it can also be done constructively. In the next post below, there's a hint. Don't scroll down/unfold if you don't want to see it.</p>",
        "id": 194286280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034619
    },
    {
        "content": "<p>2) a hint.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\nProve <code>¬ p</code></p>",
        "id": 194286286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034623
    },
    {
        "content": "<p>3) the solution<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- let&#39;s assume p ↔ ¬ p and prove false</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- I claim that ¬ p is true.</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- indeed if we assume p,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- then we can deduce ¬ p</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- and now we have proofs of p and ¬ p so we can get a contradiction</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"c1\">-- but now we know ¬ p is true, so we can deduce p,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">},</span>\n  <span class=\"c1\">-- and now again p and ¬ p are both proved, which is our contradiction</span>\n  <span class=\"n\">contradiction</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194286290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you could put the answers in the edit history. Then people can't even accidentally scroll too far.</p>",
        "id": 194286433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587034697
    },
    {
        "content": "<p>Can people see the edit history? that's one way to do spoiler tags</p>",
        "id": 194286437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587034701
    },
    {
        "content": "<p>I was going to make the reserved slots huge</p>",
        "id": 194286468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034720
    },
    {
        "content": "<p>old skool usenet ;-)</p>",
        "id": 194286491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034740
    },
    {
        "content": "<p>White text on white back ground (revealed upon highlight)?</p>",
        "id": 194286613,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1587034812
    },
    {
        "content": "<p>This is a better idea because I've just realised that zulip might condense the post.</p>",
        "id": 194286636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034831
    },
    {
        "content": "<p>How do I do white text in Zulip?</p>",
        "id": 194286664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034846
    },
    {
        "content": "<p>I don't think there are explicit spoiler tags or color formatting in zulip</p>",
        "id": 194286684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587034865
    },
    {
        "content": "<p>plus, I'm looking at white text on a dark background right now. Don't trust colors</p>",
        "id": 194286735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587034887
    },
    {
        "content": "<p>Oh -- I could the spoilers at the bottom of the message.</p>",
        "id": 194286747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034893
    },
    {
        "content": "<p>the reading experience of the edit history isn't great though</p>",
        "id": 194286903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587034983
    },
    {
        "content": "<p>What is this edit history which people are talking about?</p>",
        "id": 194286923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587035005
    },
    {
        "content": "<p>tap the word (EDITED) on any <em>edited</em> post</p>",
        "id": 194286943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587035024
    },
    {
        "content": "<p>By way of a random aside, the same in Agda (the term was generated automatically by the automatic proof search).</p>\n<p>The important first step is to note that if we want to produce a <code>False</code>, we almost certainly got it by constructing two <code>P</code>s and using the <code>P -&gt; (P -&gt; False)</code> direction of the iff. There's ultimately no other way to produce a <code>False</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# OPTIONS --safe --warning=error --without-K #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"n\">Logic.RandomBits</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">record</span> False <span class=\"ow\">:</span> <span class=\"kt\">Set</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">record</span> Iff <span class=\"o\">(</span>A <span class=\"ow\">:</span> <span class=\"kt\">Set</span><span class=\"o\">)</span> <span class=\"o\">(</span>B <span class=\"ow\">:</span> <span class=\"kt\">Set</span><span class=\"o\">)</span> <span class=\"ow\">:</span> <span class=\"kt\">Set</span> <span class=\"kr\">where</span>\n  <span class=\"kr\">field</span>\n    <span class=\"nf\">to</span> <span class=\"ow\">:</span> A <span class=\"ow\">→</span> B\n    <span class=\"nf\">from</span> <span class=\"ow\">:</span> B <span class=\"ow\">→</span> A\n\n<span class=\"nf\">Not</span> <span class=\"ow\">:</span> <span class=\"o\">(</span>A <span class=\"ow\">:</span> <span class=\"kt\">Set</span><span class=\"o\">)</span> <span class=\"ow\">→</span> <span class=\"kt\">Set</span>\nNot A <span class=\"ow\">=</span> A <span class=\"ow\">→</span> False\n\n<span class=\"nf\">thing</span> <span class=\"ow\">:</span> <span class=\"o\">(</span>P <span class=\"ow\">:</span> <span class=\"kt\">Set</span><span class=\"o\">)</span> <span class=\"ow\">→</span> Iff P <span class=\"o\">(</span>Not P<span class=\"o\">)</span> <span class=\"ow\">→</span> False\nthing P <span class=\"kr\">record</span> <span class=\"o\">{</span> to <span class=\"ow\">=</span> to ; from <span class=\"ow\">=</span> from <span class=\"o\">}</span> <span class=\"ow\">=</span> to <span class=\"o\">(</span>from <span class=\"o\">(</span><span class=\"ow\">λ</span> z <span class=\"ow\">→</span> to z z<span class=\"o\">))</span> <span class=\"o\">(</span>from <span class=\"o\">(</span><span class=\"ow\">λ</span> z <span class=\"ow\">→</span> to z z<span class=\"o\">))</span>\n</pre></div>",
        "id": 194293534,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1587039104
    },
    {
        "content": "<p>I'm trying to do the proof without tactics since I'm not familiar with tactics yet. Why doesn't something like this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">),</span>\n        <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n        <span class=\"k\">assume</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n        <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">pp</span> <span class=\"n\">pp</span> <span class=\"n\">pp</span>\n</pre></div>",
        "id": 194301828,
        "sender_full_name": "Brandon B",
        "timestamp": 1587043002
    },
    {
        "content": "<p>hi I'm a typechecker. <code>assume pp : p, (iff.mp h) pp pp pp</code> has type <code>p -&gt; something</code>, which cannot be unified with <code>false</code></p>",
        "id": 194301910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587043047
    },
    {
        "content": "<p><code>(iff.mp h) pp pp</code> has type <code>false</code>, which cannot be applied to <code>pp</code></p>",
        "id": 194302100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587043126
    },
    {
        "content": "<p>ah</p>",
        "id": 194302151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587043151
    },
    {
        "content": "<p>you want <code>(assume pp : p, (iff.mp h) pp pp) pp</code></p>",
        "id": 194302163,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587043162
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113489-new-members/topic/basics/near/185070320\" title=\"#narrow/stream/113489-new-members/topic/basics/near/185070320\">here</a> for a post I wrote that shows how to construct a proof without tactics in a step by step fashion, just by fixing errors at underscores.</p>",
        "id": 194333961,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587055632
    },
    {
        "content": "<p>That is a great example of how to write a compact term mode proof of the question.</p>",
        "id": 194337001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587056940
    },
    {
        "content": "<p>If you try the typechecker approach how come it stops printing out the context window when you do an assume hp : p.  For me the goal window just goes blank.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hpp</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>  <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 194385632,
        "sender_full_name": "PV",
        "timestamp": 1587084821
    },
    {
        "content": "<p>Because you have a type error there. You're trying to show <code>false</code>, but <code>(assume hp: p, _)</code> has the type <code>p → something</code>.</p>",
        "id": 194385840,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587085010
    },
    {
        "content": "<p>This is why there is an error at the <code>show</code></p>",
        "id": 194385848,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587085019
    },
    {
        "content": "<p>ahhh ok I took Kenny's post above that if you replaced that last assume line it'd just work, but wasn't getting it to actually work out</p>",
        "id": 194385944,
        "sender_full_name": "PV",
        "timestamp": 1587085155
    },
    {
        "content": "<p>is there a way to do this without using simp tactic, I'm not familiar with it?</p>",
        "id": 259162306,
        "sender_full_name": "YJ",
        "timestamp": 1635282795
    },
    {
        "content": "<p>Scroll up ;-)</p>",
        "id": 259162335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635282820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453118\">@YJ</span> (in case that's not clear enough, first click on the thread title \"¬ (p ↔ ¬ p)\" and then you can scroll up to an earlier discussion of the same question from 2020!)</p>",
        "id": 259162636,
        "sender_full_name": "Harold Cooper",
        "timestamp": 1635282994
    },
    {
        "content": "<p>thank you both! I'm currently navigating through the responses :)</p>",
        "id": 259163161,
        "sender_full_name": "YJ",
        "timestamp": 1635283204
    },
    {
        "content": "<p>hm is there a way to do it classically by em and have/exact? I see that there is a constructive way, and then a classical way using lambda.</p>",
        "id": 259169081,
        "sender_full_name": "YJ",
        "timestamp": 1635286250
    },
    {
        "content": "<p>Sure, just split on whether <code>p</code> is true or false. You can prove any logic statement this way.</p>",
        "id": 259169166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635286289
    },
    {
        "content": "<p>why is there an error underline on (em p) <code>assume hpp,\n  cases (em p) with h pp,</code></p>",
        "id": 259170607,
        "sender_full_name": "YJ",
        "timestamp": 1635287018
    },
    {
        "content": "<p>Are you writing a proof in term mode or tactic mode? you seem to be using both at once.</p>",
        "id": 259170908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635287215
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 259170916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635287222
    },
    {
        "content": "<p>term mode I believe so since I'm still in the beginning chapters</p>",
        "id": 259171489,
        "sender_full_name": "YJ",
        "timestamp": 1635287524
    },
    {
        "content": "<p>yes sure</p>",
        "id": 259171539,
        "sender_full_name": "YJ",
        "timestamp": 1635287567
    },
    {
        "content": "<p><code>open classical\nexample : ¬ (P ↔ ¬ P) :=    \nbegin\n  assume hpp,\n  cases (em p) with p hp,</code></p>",
        "id": 259173182,
        "sender_full_name": "YJ",
        "timestamp": 1635288758
    },
    {
        "content": "<p>Sorry Is that what you mean?</p>",
        "id": 259173212,
        "sender_full_name": "YJ",
        "timestamp": 1635288779
    },
    {
        "content": "<p>I'm very new to Lean myself, but I'm pretty sure your inconsistent use of  <code>p</code> and capital <code>P</code> is causing you problems. Also, the <code>begin</code> keyword puts you in tactic mode, so remove that if you want do the proof in term mode.</p>",
        "id": 259174910,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1635289972
    },
    {
        "content": "<p>thank you! yes I guess I'm using basic tactic mode,  the capital P in the theorem doesn't affect the proof so it may not be the cause of the problem as I'm consistent with the capitalization within the proof itself</p>",
        "id": 259175350,
        "sender_full_name": "YJ",
        "timestamp": 1635290316
    },
    {
        "content": "<p>If you want to write in tactic mode, then you need use the <code>end</code> keyword to signal the end tactic mode. Like this</p>\n<div class=\"codehilite\" data-code-language=\"open\"><pre><span></span><code>example : ¬ (p ↔ ¬ p) :=\nbegin\n  intro hpp,\n  cases (em p) with p hp,\nend\n</code></pre></div>",
        "id": 259176008,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1635290916
    },
    {
        "content": "<p>oh I have included it but seems it got cut off when I pasted it here , thank you though</p>",
        "id": 259176058,
        "sender_full_name": "YJ",
        "timestamp": 1635290974
    },
    {
        "content": "<p>the error I got was for the em p, I'm still trying to understand the difference between classical and constructive, so that's why I may be a bit slow in understanding how to do this sorry in advance</p>",
        "id": 259176168,
        "sender_full_name": "YJ",
        "timestamp": 1635291046
    },
    {
        "content": "<p>What is the error you get?</p>",
        "id": 259177349,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635292153
    },
    {
        "content": "<p><code>unknown identifier 'p' \nstate: \nP : Prop,\nhpp : P ↔ ¬P\n⊢ false </code></p>",
        "id": 259178883,
        "sender_full_name": "YJ",
        "timestamp": 1635293746
    },
    {
        "content": "<p>Peter Hansen was right, the just use <code>P</code> instead of <code>p</code> in your proof, or <code>p</code> in your statement</p>",
        "id": 259179207,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635294009
    },
    {
        "content": "<p>You can see there's no <code>p</code> in the local context here</p>",
        "id": 259179246,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635294057
    },
    {
        "content": "<p>ahh okay thank you both!! Am I on the right track or am I misunderstanding <br>\n<code>example : ¬ (p ↔ ¬ p) :=\nbegin\n  intro hpp,\n  cases (em P) with p hp,\nhave f: false\nend </code></p>",
        "id": 259180287,
        "sender_full_name": "YJ",
        "timestamp": 1635294982
    },
    {
        "content": "<p>You don't need to <code>have f : false</code>, that is your current goal anyway.</p>",
        "id": 259180938,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635295671
    },
    {
        "content": "<p>Also, I think you mean <code>em p</code>?</p>",
        "id": 259180998,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635295712
    },
    {
        "content": "<p>are you referring to the brackets?</p>",
        "id": 259181341,
        "sender_full_name": "YJ",
        "timestamp": 1635296084
    },
    {
        "content": "<p>No, the capitalization</p>",
        "id": 259181361,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635296119
    },
    {
        "content": "<p>oh it worked with the capitalization, when it was a small letter p, it didn't work I had the above error</p>",
        "id": 259181374,
        "sender_full_name": "YJ",
        "timestamp": 1635296139
    },
    {
        "content": "<p>I thought you had suggested that I capitalize it which worked</p>",
        "id": 259181431,
        "sender_full_name": "YJ",
        "timestamp": 1635296177
    },
    {
        "content": "<p>Can you recheck your example again? If your example uses <code>p</code> in the statement, your proof should be about <code>p</code>, and not <code>P</code></p>",
        "id": 259182522,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635297052
    },
    {
        "content": "<p>it uses P</p>",
        "id": 259182552,
        "sender_full_name": "YJ",
        "timestamp": 1635297098
    },
    {
        "content": "<p>I'll just re-edit, apologies for the confusion. Initial example uses p but I had typed it as big letter case</p>",
        "id": 259182619,
        "sender_full_name": "YJ",
        "timestamp": 1635297133
    },
    {
        "content": "<p>Ah, so <code>em P</code> should work. I hope you see why <code>em p</code> wouldn't help tho.</p>",
        "id": 259182641,
        "sender_full_name": "Anupam Nayak",
        "timestamp": 1635297166
    },
    {
        "content": "<p>yes so should use P since p is not within the context as you said before</p>",
        "id": 259182680,
        "sender_full_name": "YJ",
        "timestamp": 1635297231
    },
    {
        "content": "<p>how can I continue the proof after cases</p>",
        "id": 259182780,
        "sender_full_name": "YJ",
        "timestamp": 1635297304
    },
    {
        "content": "<p>A possible next step could be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">hpp</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">hpn</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hpp.mp</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Now we have contradictory hypotheses.</p>",
        "id": 259186876,
        "sender_full_name": "Peter Hansen",
        "timestamp": 1635302495
    },
    {
        "content": "<p>thank you! Hm I guess I can apply hpp as well but not sure how to continue afterwards <br>\n<code>example : ¬ (p ↔ ¬ p) :=\n</code>begin<code>\nintro hpp,\n cases (em p) with p hp,\n have hpn, from hpp.mp p,\napply hpp,\n sorry\nend </code></p>",
        "id": 259229602,
        "sender_full_name": "YJ",
        "timestamp": 1635337122
    },
    {
        "content": "<p>but I'm still not sure how to continue afterwards, classical confuses me</p>",
        "id": 259239500,
        "sender_full_name": "YJ",
        "timestamp": 1635341862
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 259240275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635342156
    },
    {
        "content": "<p><code>apply h</code> takes an implication  <code>h : P -&gt; Q</code>; you seem to be using it with a bi-implication <code>h : P &lt;-&gt; Q</code> so that explains the error. Maybe you want to take a look at the logic exercises <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean/blob/master/src/2021/logic/README.md\">here</a>? You can just cut and paste them into VS Code locally if you don't want to clone the repo.</p>",
        "id": 259240609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635342273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.C2.AC.20.28p.20.E2.86.94.20.C2.AC.20p.29/near/259240275\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>\n</blockquote>\n<p>thank you so much I've been trying to figure out how many backticks I need to make the lean block look nice and readable</p>",
        "id": 259246656,
        "sender_full_name": "YJ",
        "timestamp": 1635344619
    },
    {
        "content": "<p>You can also inspect other people's posts on Zulip with the \"View source\" option, to see how they're doing cool stuff :-)</p>",
        "id": 259246785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635344666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.C2.AC.20.28p.20.E2.86.94.20.C2.AC.20p.29/near/259240609\">said</a>:</p>\n<blockquote>\n<p><code>apply h</code> takes an implication  <code>h : P -&gt; Q</code>; you seem to be using it with a bi-implication <code>h : P &lt;-&gt; Q</code> so that explains the error. Maybe you want to take a look at the logic exercises <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean/blob/master/src/2021/logic/README.md\">here</a>? You can just cut and paste them into VS Code locally if you don't want to clone the repo.</p>\n</blockquote>\n<p>Hm I didn't get an error for <code>apply hpp</code>, but I will definitely check the link you put</p>",
        "id": 259246875,
        "sender_full_name": "YJ",
        "timestamp": 1635344706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.C2.AC.20.28p.20.E2.86.94.20.C2.AC.20p.29/near/259246785\">said</a>:</p>\n<blockquote>\n<p>You can also inspect other people's posts on Zulip with the \"View source\" option, to see how they're doing cool stuff :-)</p>\n</blockquote>\n<p>aha that's really helpful thank you!</p>",
        "id": 259246974,
        "sender_full_name": "YJ",
        "timestamp": 1635344753
    },
    {
        "content": "<p>I believe these are the tutorial exercises, which I got this same question from</p>",
        "id": 259247206,
        "sender_full_name": "YJ",
        "timestamp": 1635344847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453118\">YJ</span> <a href=\"#narrow/stream/113489-new-members/topic/.C2.AC.20.28p.20.E2.86.94.20.C2.AC.20p.29/near/259246875\">said</a>:</p>\n<blockquote>\n<p>Hm I didn't get an error for <code>apply hpp</code>, but I will definitely check the link you put</p>\n</blockquote>\n<p>I can't reproduce -- whatever I try I get the error.</p>",
        "id": 259247865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635345080
    },
    {
        "content": "<p>the cursor after <code>apply hpp</code> gives :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">hpp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">hpn</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n\n<span class=\"n\">case</span> <span class=\"n\">or.inr</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">hpp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 259248284,
        "sender_full_name": "YJ",
        "timestamp": 1635345214
    },
    {
        "content": "<p>and before it, after <code>have hpn</code> shows:</p>\n<div class=\"codehilite\" data-code-language=\"3\"><pre><span></span><code>P : Prop,\nhpp : P ↔ ¬P,\np : P\n⊢ ?m_1\n\nP : Prop,\nhpp : P ↔ ¬P,\np : P,\nhpn : ?m_1\n⊢ false\n\ncase or.inr\nP : Prop,\nhpp : P ↔ ¬P,\nhp : ¬P\n⊢ false\n</code></pre></div>",
        "id": 259248520,
        "sender_full_name": "YJ",
        "timestamp": 1635345288
    },
    {
        "content": "<p>If you want to supply a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> then you'll put me out of my misery</p>",
        "id": 259248769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635345378
    },
    {
        "content": "<p>I suspect the code you're running is not the code you posted.</p>",
        "id": 259248921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635345445
    },
    {
        "content": "<p>it's the same code :/ Haha sorry, do you mean I should repost the code in a more readable way?</p>",
        "id": 259250462,
        "sender_full_name": "YJ",
        "timestamp": 1635345964
    },
    {
        "content": "<p>If you were to solve this using the basic tactics introduced in the chapter, how would you do it differently in comparison to what I have now?</p>",
        "id": 259250686,
        "sender_full_name": "YJ",
        "timestamp": 1635346056
    },
    {
        "content": "<p>I mean that if you click on the \"view in playground\" link on your code, and then click on \"view in Lean community playground\", your code doesn't work at all because e.g. Lean doesn't know what <code>p</code> is. A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> includes all variable definitions, universes, imports etc etc -- something I can cut and paste at my end and see the same as what you're seeing at your end. I tried to guess the things you didn't post, but all my guesses still gave an error on the <code>apply</code> so now I'm asking you tell me what else is in your code which is making it work for you.</p>",
        "id": 259252058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635346574
    },
    {
        "content": "<p>Ohhh, I put P as a proposition at the beginning of my lean when I imported classical. Below includes everything to show exactly how it is! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">hpp</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">hpn</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">hpp</span><span class=\"o\">,</span>\n <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259252740,
        "sender_full_name": "YJ",
        "timestamp": 1635346817
    },
    {
        "content": "<p>yeah, your code above had something after <code>have hpn</code> too</p>",
        "id": 259252986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635346910
    },
    {
        "content": "<p><code>have hpn</code> is meaningless</p>",
        "id": 259253055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635346924
    },
    {
        "content": "<p><code>cases (em P) with p hp,</code> the variables are poorly named -- I think having <code>p</code> a proof of <code>P</code> is confusing. Proofs normally begin with <code>h</code></p>",
        "id": 259253161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635346964
    },
    {
        "content": "<p>This question is quite hard if you're just a beginner. I put it as question 10 on sheet 5 of my logic sheets that I linked to above. I suggest you spend some time working on the earlier questions.</p>",
        "id": 259253494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635347076
    },
    {
        "content": "<p>Is this better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">hhp</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">hpn</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hhp.mp</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">hhp</span><span class=\"o\">,</span>\n <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 259253638,
        "sender_full_name": "YJ",
        "timestamp": 1635347130
    },
    {
        "content": "<p>yeah It's difficult but I've been too engrossed into solving it now haha</p>",
        "id": 259253801,
        "sender_full_name": "YJ",
        "timestamp": 1635347179
    },
    {
        "content": "<p><code>hhp.mp p</code> still doesn't make sense, <code>p</code> doesn't exist</p>",
        "id": 259254608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635347438
    },
    {
        "content": "<p>you want a proof of <code>P</code> there, which you have (re)named as <code>h</code></p>",
        "id": 259254704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635347475
    },
    {
        "content": "<p>also I'm not sure what you are doing with that <code>apply hhp</code></p>",
        "id": 259254891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635347533
    },
    {
        "content": "<p>In words, what is the next step you want to take?</p>",
        "id": 259255004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635347580
    },
    {
        "content": "<p>fixed it! I would like to prove p and use contradiction</p>",
        "id": 259256859,
        "sender_full_name": "YJ",
        "timestamp": 1635348257
    },
    {
        "content": "<p>If you do not yet know how to use the <code>apply</code> tactic then you should not be doing this question, you should be doing the questions on sheet 1 and not sheet 5</p>",
        "id": 259256986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635348325
    },
    {
        "content": "<p>sheet 3 goes through lots of easier examples of how to use and prove statements with <code>¬ </code> in, and sheet 1 goes through lots of easier examples of how to use the <code>apply</code> tactic</p>",
        "id": 259257184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635348404
    },
    {
        "content": "<p>you need to master these before you can do the dreaded <code>¬ (p ↔ ¬ p)</code></p>",
        "id": 259257219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635348418
    },
    {
        "content": "<p>thank you</p>",
        "id": 259261544,
        "sender_full_name": "YJ",
        "timestamp": 1635350227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348963\">@Martin C. Martin</span>, see above <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 264782743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639436160
    },
    {
        "content": "<p>Ah, thanks!</p>",
        "id": 264783449,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1639436547
    }
]