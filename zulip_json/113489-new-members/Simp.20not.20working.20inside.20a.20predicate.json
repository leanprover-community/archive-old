[
    {
        "content": "<p>(From Kevin's first logic sheet). We're given that for some function P, P(n) implies P(n+8) and P(n-3). I am trying to show P(n) implies P(n+1) and P(n-1), which I call subgoals <code>h1</code> and <code>h2</code> respectively, so I can do integer induction. My problem is after applying +8 twice, and -3 five times, I'm left with <code>h : P (n + (8 + 8) - 3 - 3 - 3 - 3 - 3)</code> instead of just <code>h : P(n+1)</code>. This doesn't reduce even after applying <code>simp at h,</code>.  Am I misunderstanding how <code>simp</code> works? Is there another tactic I should be using? </p>\n<p>I'm also guessing there's an easier way to apply <code>h8</code> and <code>h3 </code> than my monstrocity. I was trying to get a rough working solution first. Don't judge me...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">question_5</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hPn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">8</span><span class=\"bp\">+</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">8</span><span class=\"bp\">+</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">8</span><span class=\"bp\">+</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">8</span><span class=\"bp\">+</span><span class=\"mi\">8</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">8</span><span class=\"bp\">+</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h8</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h8</span> <span class=\"n\">n</span> <span class=\"n\">hPn</span><span class=\"o\">)))))),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"c1\">--intro n, intro hPn,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194560034,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587238084
    },
    {
        "content": "<p>You can simplify your problem for yourself. Does <code>simp</code> prove <code>n + (8 + 8) - 3 - 3 - 3 - 3 - 3 = n + 1</code>? If so then you can use this as a first step. If not then the issue has nothing to do with <code>P</code>, right?</p>",
        "id": 194560230,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587238417
    },
    {
        "content": "<p>If you just think that simp is a magic tactic that solves all simple goals then yes you're very much misunderstanding how it works. I should note that I spent about the first year of my Lean life also thinking this.</p>",
        "id": 194562052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587241535
    },
    {
        "content": "<p>I'm seeing now that it looks like integer tactics don't behave the same as nat tactics (unless I'm doing something wrong). For example,  <code>Simp</code> would be able to do this for <code>n : \\N </code> but it won't for <code>n:\\Z</code>.  Going through the mathlib documentation for <code>int</code> I'm not seeing anything like <code>add_left_cancel</code>. Any advice for how to get up to speed on integers? A lot of the documentation is going over my head and seems unnecessary for what I'm trying to do. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194562194,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587241792
    },
    {
        "content": "<p><code>ring</code></p>",
        "id": 194562382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587242141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Simp.20not.20working.20inside.20a.20predicate/near/194562382\" title=\"#narrow/stream/113489-new-members/topic/Simp.20not.20working.20inside.20a.20predicate/near/194562382\">said</a>:</p>\n<blockquote>\n<p><code>ring</code></p>\n</blockquote>\n<p>This worked (after I stared at an error for 10 minutes and then realized I forgot to <code>import tactic</code>). Thanks!</p>",
        "id": 194567532,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587250022
    },
    {
        "content": "<p>Ha ha the error when you type ring without the import is spectacular, because ring also means something else.</p>",
        "id": 194568589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587251827
    },
    {
        "content": "<p>It's like \"what is a ring? You're not a tactic\"</p>",
        "id": 194568590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587251850
    }
]