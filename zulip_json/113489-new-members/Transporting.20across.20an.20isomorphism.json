[
    {
        "content": "<p>I've been trying to start learning Lean by formalizing Jacobson rings, and one theorem I wanted to use was along the lines of  <code>is_jacobson_iff_iso (e : S ≃+* R) : is_jacobson S ↔ is_jacobson R</code> where S and R are two commutative rings. I ended up just writing out a a direct proof using the definitions with maps and comaps of ideals, but I was wondering if there was a nicer way to do a proof like this in Lean? Or is a ring equivalence not \"strong\" enough for this?</p>",
        "id": 203309826,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1594235685
    },
    {
        "content": "<p>I wonder if this is because this <em>is</em> the statement that being a Jacobson ring is an invariant of rings up to isomorphism, and that needs proof.  It would be cool if there were a tactic to automatically construct a proof for you if you only used the ring axioms in the statement of some property.</p>",
        "id": 203311507,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594236590
    },
    {
        "content": "<p>This is a big open problem in lean really, there are some tactics like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#equiv_rw\">tactic#equiv_rw</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transport\">tactic#transport</a> but they aren't at the stage where they can handle these goals with no input from the user as far as I can tell.<br>\nYou can't just rewrite along an equiv so in that sense an equiv is not strong enough in lean (compared to equality), but as the proof steps should all be somewhat automatic a lot of us hope that there does exist a tactic to finish these goals easily, just nobody has written a bulletproof one yet!</p>",
        "id": 203312424,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594237030
    },
    {
        "content": "<p>This should be solvable by a tactic yes, and we'll get there in the end :-)</p>",
        "id": 203313082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594237369
    },
    {
        "content": "<p>In this particular case, Mario's law applies I think. A homomorphic image of a Jacobson ring is a Jacobson ring I guess, and probably this needs a proof. The isomorphism statement follows from this.</p>",
        "id": 203313333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594237529
    },
    {
        "content": "<p>Mario argues that many cases of this rewriting along equivalence principle follow from stronger results which aren't tautological to a mathematician and need to be proved anyway. This breaks down for various 1-dimensional properties such as PID though</p>",
        "id": 203313484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594237615
    },
    {
        "content": "<p>Aah but not for PIR, interestingly enough</p>",
        "id": 203313550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594237652
    },
    {
        "content": "<p>Yes in this case the actual proof isn't too bad to just write so its not a huge issue, but thanks for this info on the general state of things like this. Using tactics for proofs like this is new to me coming from a background in just Agda, and I hadn't considered they could prove bigger things like this.</p>\n<p>I hadn't thought about proving this for the homomorphic image first and then specializing that to the isomorphic case, that seems like a nice way to make the proof cleaner.</p>",
        "id": 203314279,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1594238010
    },
    {
        "content": "<p>My rough understanding of an underlying issue is that you need some sort of coherence law to be able to do rewrites.  For example, you might have some loop of equivalences whose composition is some nontrivial automorphism, and if you rewrite only portions of a term using an equivalence, you're liable to obtain absurd conclusions.  Equality in lean has the property that any such loop gives the trivial automorphism, due to proof irrelevance in <code>Prop</code>.</p>\n<p>There's a nonconstructive way to rewrite across isomorphisms, I think.  You can choose (probably by the axiom of choice somehow) a canonical isomorphism between every pair of objects in an isomorphism class in such a way that any loop of compositions is the identity, and then you should be able to do rewrites with respect to these specific isomorphisms for terms involving only the axioms of the objects under question.  I have no intuition about whether you can actually do anything useful with this, though.  But, at least for the <code>is_jacobson</code> example, all the terms are in the theory of rings so the isomorphism implies there is a canonical isomorphism, and so you would be able to rewrite <code>is_jacobson S</code> to <code>is_jacobson R</code> to get a tautology.</p>",
        "id": 203314806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594238240
    },
    {
        "content": "<p>What if R=S and e isn't the identity?</p>",
        "id": 203315042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594238345
    },
    {
        "content": "<p>You wouldn't rewrite using e itself.  You'd use the fact it exists to nonconstructively obtain the canonical isomorphism R to S (and these isomorphisms are chosen so that any loop of compositions is the identity).  If R = S, then this canonical automorphism is the identity.</p>",
        "id": 203315842,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594238698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  Ah, I assume that means Lean does not have any sort of UIP axiom or axiom K for types? So outside of Prop there can be multiple different equivalences between two types, which gives these \"nontrivial automorphisms\" between types?</p>",
        "id": 203315865,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1594238707
    },
    {
        "content": "<p>There certainly can be multiple different equivs between two types.</p>",
        "id": 203316133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594238820
    },
    {
        "content": "<p>I don't know these axioms, but at least the way <code>equiv</code> is defined in Lean, which is a pair of maps that are left and right inverses to each other, there can certainly be many equivalences between non-<code>Prop</code> types.</p>",
        "id": 203316142,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594238823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I have no idea what you would mean with choosing a <code>canonical</code> isomorphism...</p>",
        "id": 203316215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594238862
    },
    {
        "content": "<p>Is it just whatever <code>classical.choice</code> spits out?</p>",
        "id": 203316235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594238878
    },
    {
        "content": "<p>I don't think you can prove that it is the identity in the case of <code>R = S</code>.</p>",
        "id": 203316299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594238895
    },
    {
        "content": "<p>Equality of types is an extremely awkard notion to prove things about.</p>",
        "id": 203316369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594238932
    },
    {
        "content": "<p>You'd have to set up your statement carefully, which I'm not sure how to do right now.  It's \"canonical\" in the same sense that every module has a \"canonical\" projective resolution.</p>",
        "id": 203316424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594238961
    },
    {
        "content": "<p>I'm only more confused now...</p>",
        "id": 203316670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594239078
    },
    {
        "content": "<p>If I have two isomorphic rings <code>R</code> and <code>S</code>, I don't have any idea what could be meant be the \"canonical\" isomorphism between <code>R</code> and <code>S</code>...</p>",
        "id": 203316780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594239124
    },
    {
        "content": "<p>Informally, I was imagining taking a representative object from each isomorphism class, and for every other object choose some isomorphism to the representative object.  Then, every pair of objects in the isomorphism class would have a \"canonical\" isomorphism between them by the unique composition of chosen isomorphisms.</p>",
        "id": 203316818,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594239151
    },
    {
        "content": "<p>It's a similar sort of solution to the problem of defining derived functors, with a solution being to fix specific projective resolutions for every module.  Sorry, I'm severely misusing the word \"canonical.\"</p>",
        "id": 203317017,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594239256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I can see that there are certainly multiple equivalences between types, but in Lean can you apply univalence to them to also get distinct equalities between types? Or do all type equalities get squashed down to being equal in Lean (or is univalence not even a thing in Lean)?</p>",
        "id": 203317040,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1594239272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> But, since you're saying proving things about equalities of types is extremely awkward, this might be completely unworkable.</p>",
        "id": 203317138,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594239344
    },
    {
        "content": "<p>univalence is not a thing in lean</p>",
        "id": 203317157,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1594239357
    },
    {
        "content": "<p>UIP and axiom K everywhere</p>",
        "id": 203317246,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1594239390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319772\">@Devon Tuma</span> Oh, it looks like \"equivalence\" has meant two things in this conversation.  Sorry to mislead you that Lean had nontrivial homotopy equivalences between types.</p>",
        "id": 203318191,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594239925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> No worries, I think that was part of what was tripping me up in the first place with a ring equivalence being very different than a homotopy style equivalence between the actual types</p>",
        "id": 203318742,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1594240220
    },
    {
        "content": "<p>I believe that what lean calls <code>R ≃+* S</code> is equivalent to what a HoTT system would call an equivalence (or via univalence, equality) of elements of the type <code>Ring</code></p>",
        "id": 203319922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594240756
    },
    {
        "content": "<p>so calling them \"ring equivalences\" is not a misrepresentation</p>",
        "id": 203319991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594240794
    }
]