[
    {
        "content": "<p>Hello everyone!  I am working on implementing the pigeonhole principle in lean for a school project.  I have the following formulation for a finite subset of n elements: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>From this, I have a definition that lifts finite subsets of m elements to any finite subset of more elements: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>and finally a small lemma:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>My formulation for pigeonhole is the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">pigeonhole_principle</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I proceeded by induction and was able to prove the base case but am stuck on the next step.  I have this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">intros</span> <span class=\"n\">n_gt_m</span> <span class=\"n\">f_injective</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>  <span class=\"c1\">--base case, done</span>\n<span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">d</span><span class=\"o\">)),</span>\n<span class=\"k\">let</span> <span class=\"n\">hd&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>It is enough to show that <code>d &gt; m</code> to get that <code>g</code> cannot be injective, but I have that <code>d + 1 &gt; m</code>, which means that <code>d ≥ m</code>, which is where I'm stuck.  Does anybody have any idea how to proceed?  Thank you!</p>",
        "id": 194752166,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587431746
    },
    {
        "content": "<p>Oh shoot, I forgot to send the corresponding lean goal at the last line:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">m</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">n_gt_m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span>\n<span class=\"n\">f_injective</span><span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span>\n<span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span>\n<span class=\"n\">hd&#39;</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">injective</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">g</span>\n</pre></div>",
        "id": 194752595,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587432284
    },
    {
        "content": "<p>It'll be easier for us to help you if you include something we can directly copy+paste into our editors (a \"minimum working example\" or MWE).</p>",
        "id": 194752942,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587432762
    },
    {
        "content": "<p>Sure! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n\n<span class=\"n\">def</span> <span class=\"n\">range</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Type of pairs (k,p) where k</span>\n<span class=\"cm\">is a natural number and p is a witness to the proof that k &lt; n.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pred_exists</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exists</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">,},</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Pigeonhole principle, induction on n</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">pigeonhole_principle</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n_gt_m</span> <span class=\"n\">f_injective</span><span class=\"o\">,</span>\n\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n\n    <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- case d=0</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">d</span><span class=\"o\">)),</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">hd&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    induction m with d hd,</span>\n<span class=\"cm\">    {</span>\n<span class=\"cm\">         cases pred_exists n n_gt_m with k hk,</span>\n<span class=\"cm\">         let n_gt_k := succ_greater_than_nat k,</span>\n<span class=\"cm\">         rw hk at n_gt_k,</span>\n<span class=\"cm\">         let fk := f ⟨k, n_gt_k⟩,</span>\n<span class=\"cm\">         let fk2 := fk.2,</span>\n<span class=\"cm\">         linarith,</span>\n<span class=\"cm\">    },</span>\n<span class=\"cm\">    {</span>\n<span class=\"cm\">        let n_gt_d : n&gt;d :=</span>\n<span class=\"cm\">        begin</span>\n<span class=\"cm\">            exact lt.trans (succ_greater_than_nat d)  n_gt_m,</span>\n<span class=\"cm\">        end,</span>\n<span class=\"cm\">        sorry</span>\n<span class=\"cm\">    },</span>\n\n<span class=\"cm\">    -/</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194753138,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587433025
    },
    {
        "content": "<p>By the way, <code>finite_subset</code> already exists in lean, by the name <code>fin</code></p>",
        "id": 194754044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587434145
    },
    {
        "content": "<p>similarly with <code>function.injective</code> and <code>set.range</code></p>",
        "id": 194754082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587434170
    },
    {
        "content": "<p><code>succ_greater_than_nat</code> is <code>nat.lt_succ_self</code></p>",
        "id": 194754163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587434285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks, got it!</p>",
        "id": 194754205,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587434388
    },
    {
        "content": "<p><code>lift_finite</code> is <code>fin.cast_le</code> (with a different precondition)</p>",
        "id": 194754207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587434393
    },
    {
        "content": "<p><code>pred_exists</code> is <code>nat.exists_eq_succ_of_ne_zero</code> although the precondition is slightly different</p>",
        "id": 194754270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587434469
    },
    {
        "content": "<p>thanks again haha!<br>\nI guess I have a long ways to go to being acquainted with the libraries.<br>\nIs there any library function that would help me resolve my issue with <code>d</code> in the induction step?  I can't tell if the problem thus far has to do with a lack of vocabulary of a deeper error into the formulation of the proof</p>",
        "id": 194754444,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587434738
    },
    {
        "content": "<p>Unfortunately I'm not a lint but a decent approximation is <code>by library_search</code>, which will find theorems from the library by type</p>",
        "id": 194754447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587434746
    },
    {
        "content": "<p>oh nice, that's really useful</p>",
        "id": 194754499,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587434797
    },
    {
        "content": "<p>wait, could you give me an example of using <code>library_search</code>?</p>",
        "id": 194754534,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587434873
    },
    {
        "content": "<p>What is the role of your commented out block? If I uncomment it I get an error about <code>n</code> not found</p>",
        "id": 194754543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587434882
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pred_exists</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exists</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>",
        "id": 194754594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587434976
    },
    {
        "content": "<p>It was my original attempt at induction on m, but I got stuck with that, so I switch to induction on n</p>",
        "id": 194754803,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587435270
    },
    {
        "content": "<p>In your setup you tried to prove <code>d &gt; m</code> from <code>d + 1 &gt; m</code>, which isn't going to work. You can't always rely on the inductive hypothesis because then there would be nothing to the proof. Without thinking too hard about the theorem itself, here you should probably split into cases: either <code>d &gt; m</code> or <code>d = m</code>. In the first case, you can use the inductive hypothesis. In the second case there is something to prove</p>",
        "id": 194754809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587435286
    },
    {
        "content": "<p>I'm not sure how to split into cases from what I have</p>",
        "id": 194754904,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587435439
    },
    {
        "content": "<p>I mean, I see <em>why</em>, but I'm at a loss at how to do it given my existing work</p>",
        "id": 194754916,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587435456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">pigeonhole_principle</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n_gt_m</span> <span class=\"n\">f_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> case d=0 -/</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">d</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">hd&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n_gt_m</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hd&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\"> injective g -/</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\"> prove f : finite_subset (nat.succ m) → finite_subset m is not injective -/</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194755038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587435583
    },
    {
        "content": "<p>here <code>lt_or_eq_of_le (nat.lt_succ_iff.1 n_gt_m) </code> is a proof that <code>d &gt; m \\/ d = m</code>, and <code>rcases</code> does the case split and replaces <code>d</code> with <code>m</code> in the second branch</p>",
        "id": 194755115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587435697
    },
    {
        "content": "<p>Also, so <code>d &gt; m</code> means that <code>d + 1 &gt; m</code> by transitivity, so I'm done<br>\nfor <code>d = m</code>, I'm not sure how to proceed, but my idea is this: there is a clear identity injection from <code>finite_subset d</code> to<code> finite_subset m</code> when <code>d = m</code>.  Suppose towards contradiction there is an injection from <code>finite_subset (d + 1)</code> to <code>finite_subset m</code>.  We replace <code>d</code> with <code>m</code>, meaning there is an injection from <code>finite_subset (m + 1)</code> to <code>finite_subset m</code>...and I'm stuck from there</p>",
        "id": 194755170,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587435764
    },
    {
        "content": "<p>you don't want to prove <code>d + 1 &gt; m</code> from <code>d &gt; m</code>, the proof is going the other way around</p>",
        "id": 194755184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587435804
    },
    {
        "content": "<p>you need <code>d &gt; m</code> and you have <code>d + 1 &gt; m</code></p>",
        "id": 194755190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587435818
    },
    {
        "content": "<p>ah I see</p>",
        "id": 194755250,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587435851
    },
    {
        "content": "<p>As for proving that there is no injection from m+1 to m, this is indeed the core of the proof, and here you have to step back from the code and ask what the maths proof is</p>",
        "id": 194755271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587435902
    },
    {
        "content": "<p>what do you mean with rcases replaces d with m in the second branch?</p>",
        "id": 194755343,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587436028
    },
    {
        "content": "<p>you will notice in the second branch that <code>d</code> does not exist anymore</p>",
        "id": 194755347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436047
    },
    {
        "content": "<p>and everywhere there used to be <code>d</code> there is now an <code>m</code></p>",
        "id": 194755356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436060
    },
    {
        "content": "<p>which is why <code>f</code> is an injection from <code>m+1</code> to <code>m</code> instead of <code>d+1</code> to <code>m</code></p>",
        "id": 194755425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436126
    },
    {
        "content": "<p>I see, but I'm still having a hard time understanding this all.  What is the </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 194755440,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587436161
    },
    {
        "content": "<p>You can read more about <code>rcases</code> (and most other tactics) in the mathlib docs <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">here</a>.</p>",
        "id": 194755495,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587436232
    },
    {
        "content": "<p>that's a pattern, that describes what kind of case split to do. the <code>|</code> means to do a split on the or, producing an assumption on the left that is being named <code>h</code>, and on the right the <code>rfl</code> means \"case split on the equality\", doing the replacement of <code>d</code> for <code>m</code> that I mentioned</p>",
        "id": 194755503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436250
    },
    {
        "content": "<p>I see.  I'll have to take some time to get comfortable with that, but that makes enough sense</p>",
        "id": 194755558,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587436335
    },
    {
        "content": "<p>what does </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">apply</span> <span class=\"n\">hd&#39;</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>do here?</p>",
        "id": 194755586,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587436407
    },
    {
        "content": "<p><code>hd' h</code> is a proof of <code>injection g -&gt; false</code>, so since the goal is <code>false</code>, <code>apply hd' h</code> changes the goal to <code>injection g</code></p>",
        "id": 194755640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436455
    },
    {
        "content": "<p>ah, so my goal here is to show that g is injective?</p>",
        "id": 194755687,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587436535
    },
    {
        "content": "<p>yes, and that should be easy enough</p>",
        "id": 194755694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436545
    },
    {
        "content": "<p>In fact, if you use <code>function.injective</code> and <code>fin.cast_le</code> you will find the theorem already exists :)</p>",
        "id": 194755756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436610
    },
    {
        "content": "<p>what if I want to put it in terms of what I've already written though? (just as an exercise in being comfortable with using my own definitions haha)</p>",
        "id": 194755790,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587436680
    },
    {
        "content": "<p>It's still an easy proof. Go ahead and try it</p>",
        "id": 194755857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436737
    },
    {
        "content": "<p>I'm just sort of confused having all of the hypotheses in front of me.  I have that <code>f</code> is injective, and that already takes <code>finite_subset (d + 1)</code> to <code>finite_subset m</code></p>",
        "id": 194755939,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587436841
    },
    {
        "content": "<p>I'm not sure what tactics I'd use to introduce two variables <code>x1</code> and <code>x2</code> and show that if <code>g x1 = g x2</code>, then <code>x1 = x2</code></p>",
        "id": 194755973,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587436915
    },
    {
        "content": "<p>None of that matters</p>",
        "id": 194755977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436922
    },
    {
        "content": "<p>You can prove that <code>g</code> is injective without anything about <code>f</code></p>",
        "id": 194756017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436934
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 194756029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587436972
    },
    {
        "content": "<p>when proving a forall statement, the tactic to introduce variables is <code>intro</code> or <code>intros</code></p>",
        "id": 194756049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587437013
    },
    {
        "content": "<p>okay, so here into this new theorem, I'd introduce x1 and x2 right?  the arguments are two naturals m, n, and a proof that m &lt; n.</p>",
        "id": 194756214,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587437191
    },
    {
        "content": "<p>so I let <code>f := lift_finite m n p</code></p>",
        "id": 194756237,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587437259
    },
    {
        "content": "<p>and I have to introduce the proposition that <code>f x1 = f x2</code>?</p>",
        "id": 194756282,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587437284
    },
    {
        "content": "<p>okay, this is what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n<span class=\"n\">introv</span> <span class=\"n\">x1</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194756397,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587437501
    },
    {
        "content": "<p>Does anyone know why the first argument in the <code>introv</code> application here is <code>x1</code> rather than the equality argument? That seems to go against the documentation of <code>introv</code></p>",
        "id": 194759760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587443073
    },
    {
        "content": "<p>If you unfold <code>injective</code> first it works correctly</p>",
        "id": 194759769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587443116
    },
    {
        "content": "<p>my current plan is this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> pf sketch</span>\n\n<span class=\"cm\">--  suppose f x1 = f x2 = &lt; k, pf: k &lt; n &gt;</span>\n\n<span class=\"cm\">--  we know x1 = &lt; l , pf: k &lt; m &gt; and x2 = &lt; j , pf: j &lt; m &gt;</span>\n\n<span class=\"cm\">--  note that (f x1).1 = (f x2).1 = k</span>\n\n<span class=\"cm\">--  furthermore, k &lt; m &lt; n</span>\n\n<span class=\"cm\">--  then x1 = &lt; k, pf: k &lt; m &gt; = x2</span>\n\n<span class=\"cm\">--  done</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 194759890,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587443287
    },
    {
        "content": "<p>I'm just not sure how to translate that into tactics</p>",
        "id": 194759892,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587443305
    },
    {
        "content": "<p>you can do this with just <code>cases</code> and <code>refl</code></p>",
        "id": 194760069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587443663
    },
    {
        "content": "<p>to do this step <code>--  we know x1 = &lt; l , pf: k &lt; m &gt; and x2 = &lt; j , pf: j &lt; m &gt;</code> use <code>cases x1</code></p>",
        "id": 194760080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587443696
    },
    {
        "content": "<p>okay, so I do <code>cases x1</code> and <code>cases x2</code>?</p>",
        "id": 194760142,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587443764
    },
    {
        "content": "<p>how do I note that <code>x1_fst = (f x1).1</code>?</p>",
        "id": 194760174,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587443871
    },
    {
        "content": "<p>that's true by definition (it won't be <code>x1</code> after the cases, it will be <code>&lt;x1_fst, x1_snd&gt;</code>)</p>",
        "id": 194760229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587443930
    },
    {
        "content": "<p>so you don't have to say anything</p>",
        "id": 194760232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587443939
    },
    {
        "content": "<p>oh so then how can I conclude that <code>x1_fst = x2_fst</code>?  I see that clearly <code>x1_fst =  (f x1).1 = (f x2).2 = x2_fst</code> but I'm not sure how to type it out</p>",
        "id": 194760469,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587444355
    },
    {
        "content": "<p>the easiest way is actually cases on the equality you have</p>",
        "id": 194760541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587444432
    },
    {
        "content": "<p>which is in fact <code>&lt;x1_fst, ...&gt; = &lt;x2_fst, ...&gt;</code></p>",
        "id": 194760547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587444459
    },
    {
        "content": "<p>what do you mean with cases here?</p>",
        "id": 194760878,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587445063
    },
    {
        "content": "<p><code>cases f</code></p>",
        "id": 194760934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587445102
    },
    {
        "content": "<p>the fact that you can do \"case analysis\" on an equality is one of the more mind bending things you can do in type theory but it's super useful</p>",
        "id": 194760952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587445156
    },
    {
        "content": "<p>ahhhh I see I see</p>",
        "id": 194760956,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587445178
    },
    {
        "content": "<p>so now I have <code>&lt; x1_fst, x1_snd&gt; = &lt;x1_fst, x2_snd&gt;</code>, and I want to make it so that I have a match</p>",
        "id": 194761089,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587445338
    },
    {
        "content": "<p>would I apply a <code>rw</code> or <code>apply</code> tactic here?</p>",
        "id": 194761102,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587445379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283719\">@Adeeb K</span> I haven't been following along... Is that your goal or a hypothesis?</p>",
        "id": 194761176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587445522
    },
    {
        "content": "<p>I think I got it - I just applied a simple <code>refl</code> and it finished off the proof.  Seems I need practice applying the basics.  That...and reading more through the HoTT book.</p>",
        "id": 194761227,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587445572
    },
    {
        "content": "<p>Have you played the natural number game?</p>",
        "id": 194761249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587445601
    },
    {
        "content": "<p>It's a great way of practicing the simple tactics</p>",
        "id": 194761261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587445624
    },
    {
        "content": "<p>only up to the third world</p>",
        "id": 194761264,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587445635
    },
    {
        "content": "<p>now I'm showing composition of injective functions is injective.  Not sure how to unpack that, but I'll try it with cases</p>",
        "id": 194761624,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446197
    },
    {
        "content": "<p>wait, so I still have stuff to finish for pigeonhole</p>",
        "id": 194761801,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446511
    },
    {
        "content": "<p>what tactic / proof is there to show that <code>(g ∘ f) x = g (f x)</code>?</p>",
        "id": 194761846,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446545
    },
    {
        "content": "<p><code>refl</code></p>",
        "id": 194761849,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587446553
    },
    {
        "content": "<p>no but like</p>",
        "id": 194761852,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446578
    },
    {
        "content": "<p>Right now I have:<br>\n<code>(g ∘ f) x1 = (g ∘ f) x2</code></p>",
        "id": 194761857,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446594
    },
    {
        "content": "<p><code>change g (f x1) = g (f x2)</code></p>",
        "id": 194761863,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587446605
    },
    {
        "content": "<p>How do I rewrite this as:<br>\n<code>g (f x1) = g (f x2)</code>?</p>",
        "id": 194761865,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446617
    },
    {
        "content": "<p>lemme try that</p>",
        "id": 194761866,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446624
    },
    {
        "content": "<p>Kenny answers before you write your question.... C'est la vie.</p>",
        "id": 194761903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587446643
    },
    {
        "content": "<p>I'm getting an error</p>",
        "id": 194761918,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446666
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">type</span>\n  <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span>\n<span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n</pre></div>",
        "id": 194761920,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446675
    },
    {
        "content": "<p><code>change</code> allows you to change your goal to anything that is equal to the old goal <em>by definition</em>.</p>",
        "id": 194761927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587446684
    },
    {
        "content": "<p>Aah but those two are certainly not the same goals</p>",
        "id": 194761933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587446702
    },
    {
        "content": "<p>You need something like <code>g \\circ f</code> is injective to do that</p>",
        "id": 194761942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587446722
    },
    {
        "content": "<p><code>change g (f x1) = g (f x2) at H</code></p>",
        "id": 194761953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587446754
    },
    {
        "content": "<p>ah nice that worked!</p>",
        "id": 194762003,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446790
    },
    {
        "content": "<p>okay so now I want to use the injectivity of <code>g</code> to say <code>f x1 = f x2</code></p>",
        "id": 194762032,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446862
    },
    {
        "content": "<p><code>apply hg</code></p>",
        "id": 194762052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587446882
    },
    {
        "content": "<p>Where <code>hg : injective g</code></p>",
        "id": 194762078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587446889
    },
    {
        "content": "<p>error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n</pre></div>",
        "id": 194762092,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446932
    },
    {
        "content": "<p>Aah, right, same problem again...</p>",
        "id": 194762096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587446945
    },
    {
        "content": "<p>wait</p>",
        "id": 194762107,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446954
    },
    {
        "content": "<p>one sec</p>",
        "id": 194762108,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587446957
    },
    {
        "content": "<p><code>have foo : f x1 = f x2 := hg H</code></p>",
        "id": 194762111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587446963
    },
    {
        "content": "<p>I got it</p>",
        "id": 194762158,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447006
    },
    {
        "content": "<p>I applied injectivity in reverse order and got it</p>",
        "id": 194762163,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447019
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n</pre></div>",
        "id": 194762166,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447034
    },
    {
        "content": "<p>I did <code>apply p1</code> which is injective <code>f</code></p>",
        "id": 194762176,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447060
    },
    {
        "content": "<p>Then I got </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n</pre></div>",
        "id": 194762194,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447085
    },
    {
        "content": "<p>then <code>apply p2</code>  which is <code>injective g</code></p>",
        "id": 194762200,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447102
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 194762208,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447117
    },
    {
        "content": "<p>to which I finally just applied <code>p3</code> and got my desired result for the lemma</p>",
        "id": 194762252,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447135
    },
    {
        "content": "<p>with this, the first part of the induction step for pigeonhole is done</p>",
        "id": 194762260,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447151
    },
    {
        "content": "<p>so uh</p>",
        "id": 194762562,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447596
    },
    {
        "content": "<p>suppose I have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">g</span> <span class=\"o\">:=</span>  <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift</span><span class=\"o\">,</span>\n<span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 194762610,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447652
    },
    {
        "content": "<p>how do I conclude</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 194762619,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447678
    },
    {
        "content": "<p>I think you want <code>inj : injective (f ∘ lift)</code>?</p>",
        "id": 194762670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587447729
    },
    {
        "content": "<p>If so, then <code>inj : injective g</code> and you don't have to say anything</p>",
        "id": 194762677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587447749
    },
    {
        "content": "<p>really?  right now I'm not sure if I have that</p>",
        "id": 194762688,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447769
    },
    {
        "content": "<p>those two are the same to lean</p>",
        "id": 194762700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587447788
    },
    {
        "content": "<p>how do I conclude injective g then?  refl?</p>",
        "id": 194762705,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447799
    },
    {
        "content": "<p>just pretend it says <code>injective g</code> already</p>",
        "id": 194762708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587447804
    },
    {
        "content": "<p>if your goal is <code>injective g</code>, then <code>exact inj</code> will work</p>",
        "id": 194762712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587447820
    },
    {
        "content": "<p>ah, yeah it worked</p>",
        "id": 194762764,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447885
    },
    {
        "content": "<p>now the nontrivial case lol</p>",
        "id": 194762766,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447898
    },
    {
        "content": "<p>where <code>d = m</code></p>",
        "id": 194762767,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587447903
    },
    {
        "content": "<p>I'm not exactly sure how to start this part of the proof</p>",
        "id": 194764225,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587449880
    },
    {
        "content": "<p>basically, all classical proofs to show that there's no injection from a set of m + 1 elements to one of m elements I recall end up using the contrapositive</p>",
        "id": 194765228,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587451052
    },
    {
        "content": "<p>well, not all</p>",
        "id": 194765313,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587451127
    },
    {
        "content": "<p>So... formalise a classical proof...</p>",
        "id": 194765402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587451204
    },
    {
        "content": "<p>I'm not sure how that'd help me here</p>",
        "id": 194766093,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587451933
    },
    {
        "content": "<p>Why not? What are you trying to do?</p>",
        "id": 194766117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587451973
    },
    {
        "content": "<p>suppose towards contradiction that there exists such an injective functionL: call it f<br>\nlet M be the set of m + 1 elements and N be the set of m elements.  We see that |f(M)| = m +1 but |N| = m<br>\nit is not possible for f to be injective, since each f(x) \\in N for x \\in M, but there are fewer possible values for f(x) than there are x</p>",
        "id": 194766249,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587452132
    },
    {
        "content": "<p>So I feel like I'm going in circles restating what I'm out to prove in the first place</p>",
        "id": 194766261,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587452148
    },
    {
        "content": "<p>Can you post a copy-pasteble chunk of code (include <code>import</code> and <code>variables</code> statements)? AKA an MWE</p>",
        "id": 194766436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587452289
    },
    {
        "content": "<p>yeah sure</p>",
        "id": 194766873,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587452721
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">range</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Type of pairs (k,p) where k</span>\n<span class=\"cm\">is a natural number and p is a witness to the proof that k &lt; n.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pred_exists</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exists</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">,},</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">The lifting function is injective</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> pf sketch</span>\n\n<span class=\"cm\">--  suppose f x1 = f x2 = &lt; k, pf: k &lt; n &gt;</span>\n\n<span class=\"cm\">--  we know x1 = &lt; l , pf: k &lt; m &gt; and x2 = &lt; j , pf: j &lt; m &gt;</span>\n\n<span class=\"cm\">--  note that (f x1).1 = (f x2).1 = k</span>\n\n<span class=\"cm\">--  furthermore, k &lt; m &lt; n</span>\n\n<span class=\"cm\">--  then x1 = &lt; k, pf: k &lt; m &gt; = x2</span>\n\n<span class=\"cm\">--  done</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">introv</span> <span class=\"n\">x</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">comp_inj_is_inj</span>\n<span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>  <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n<span class=\"n\">introv</span> <span class=\"n\">x</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">p1</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Pigeonhole principle, induction on n</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">pigeonhole_principle</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n  <span class=\"n\">intros</span> <span class=\"n\">n_gt_m</span> <span class=\"n\">f_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> case d = 0 -/</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">succ_for_lift</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">succ_for_lift</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">hd&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n_gt_m</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n\n  <span class=\"o\">{</span>   <span class=\"c\">/-</span><span class=\"cm\"> case where d &gt; m -/</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> prove injective g -/</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hd&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">lift_injective</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite_injective</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">succ_for_lift</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">g_injective</span> <span class=\"o\">:=</span> <span class=\"n\">comp_inj_is_inj</span> <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">lift_injective</span> <span class=\"n\">f_injective</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">g_injective</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"o\">{</span>   <span class=\"c\">/-</span><span class=\"cm\"> case where d = m -/</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> prove f : finite_subset (nat.succ m) → finite_subset m is not injective -/</span>\n\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194766915,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587452745
    },
    {
        "content": "<p>first come up with a math proof</p>",
        "id": 194766999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587452807
    },
    {
        "content": "<p>then formalize it</p>",
        "id": 194767007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587452811
    },
    {
        "content": "<p>alright<br>\nIt's pretty late where I am, so I'll be heading to bed for now.  Thank you everyone for your help!</p>",
        "id": 194767205,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587452977
    },
    {
        "content": "<p>I'll be back in a few hours probably</p>",
        "id": 194767215,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587452992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283719\">Adeeb K</span> <a href=\"#narrow/stream/113489-new-members/topic/Finishing.20off.20induction.20for.20pigeonhole/near/194765228\" title=\"#narrow/stream/113489-new-members/topic/Finishing.20off.20induction.20for.20pigeonhole/near/194765228\">said</a>:</p>\n<blockquote>\n<p>basically, all classical proofs to show that there's no injection from a set of m + 1 elements to one of m elements I recall end up using the contrapositive</p>\n</blockquote>\n<p>I wrote a constructive one in Agda a while back. Hint for the maths proof: if you have an injection f: [m+1] -&gt; [m], consider that f sends 1 somewhere, and note that you must use induction because it's a constructively-true thing about the natural numbers. State the inductive hypothesis, and try to use it.</p>",
        "id": 194769807,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1587455079
    },
    {
        "content": "<p>I see</p>",
        "id": 194838939,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587491688
    },
    {
        "content": "<p>I am already using induction here, and this is the second case that I'm handling<br>\nI'll send what I currently have</p>",
        "id": 194839051,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587491740
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">range</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Type of pairs (k,p) where k</span>\n<span class=\"cm\">is a natural number and p is a witness to the proof that k &lt; n.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pred_exists</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exists</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">,},</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">The lifting function is injective</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> pf sketch</span>\n\n<span class=\"cm\">--  suppose f x1 = f x2 = &lt; k, pf: k &lt; n &gt;</span>\n\n<span class=\"cm\">--  we know x1 = &lt; l , pf: k &lt; m &gt; and x2 = &lt; j , pf: j &lt; m &gt;</span>\n\n<span class=\"cm\">--  note that (f x1).1 = (f x2).1 = k</span>\n\n<span class=\"cm\">--  furthermore, k &lt; m &lt; n</span>\n\n<span class=\"cm\">--  then x1 = &lt; k, pf: k &lt; m &gt; = x2</span>\n\n<span class=\"cm\">--  done</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">introv</span> <span class=\"n\">x</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">comp_inj_is_inj</span>\n<span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>  <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n<span class=\"n\">introv</span> <span class=\"n\">x</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">p1</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Pigeonhole principle, induction on n</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">pigeonhole_principle</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n  <span class=\"n\">intros</span> <span class=\"n\">n_gt_m</span> <span class=\"n\">f_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> case d = 0 -/</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">succ_for_lift</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">succ_for_lift</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">hd&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n_gt_m</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n\n  <span class=\"o\">{</span>   <span class=\"c\">/-</span><span class=\"cm\"> case where d &gt; m -/</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> prove injective g -/</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hd&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">lift_injective</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite_injective</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">succ_for_lift</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">g_injective</span> <span class=\"o\">:=</span> <span class=\"n\">comp_inj_is_inj</span> <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">lift_injective</span> <span class=\"n\">f_injective</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">g_injective</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"o\">{</span>   <span class=\"c\">/-</span><span class=\"cm\"> case where d = m -/</span>\n      <span class=\"c\">/-</span><span class=\"cm\"> prove f : finite_subset (nat.succ m) → finite_subset m is not injective -/</span>\n\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194839169,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587491785
    },
    {
        "content": "<p>So going off <span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> 's advice, I have <code>injective f : [m + 1] → [m]</code>.  I have set up finite sets <code>finite_subset m</code> to be all pairs <code>&lt;k, pf: k &lt; m&gt;</code>.  We consider <code>f([m + 1])</code>.  Since <code>f</code> is injective, we know that for distinct <code>x1, x2 : finite_subset (m + 1)``, if </code>f x1 = f x2<code> then </code>x1 = x2```.</p>",
        "id": 194840735,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587492531
    },
    {
        "content": "<p>We consider the image of <code>f</code>.  By my current inductive hypothesis, I have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 194841094,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587492711
    },
    {
        "content": "<p>I'm not sure if I should consider the image or the pre-image here.</p>",
        "id": 194841442,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587492869
    },
    {
        "content": "<p><code>m &gt; m</code> is false</p>",
        "id": 194841485,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587492896
    },
    {
        "content": "<p>I realize that much, so what does that give me?</p>",
        "id": 194841544,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587492938
    },
    {
        "content": "<p>Nothing</p>",
        "id": 194841566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587492955
    },
    {
        "content": "<p>you should write down a maths proof first</p>",
        "id": 194841660,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587492991
    },
    {
        "content": "<p>I'm just figuring out how to word a constructive proof for pigeonhole</p>",
        "id": 194841736,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587493039
    },
    {
        "content": "<p>it doesn't need to be constructive</p>",
        "id": 194841987,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587493150
    },
    {
        "content": "<p>you just need to make sure that it isn't circular</p>",
        "id": 194841993,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587493156
    },
    {
        "content": "<p>Alright, makes sense</p>",
        "id": 194842124,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587493213
    },
    {
        "content": "<p>quick question</p>",
        "id": 194842941,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587493591
    },
    {
        "content": "<p>quick answer</p>",
        "id": 194842977,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587493608
    },
    {
        "content": "<p>just something I forgot to ask last night: is there a function in the library that lets me say a natural number is either 0 or not?</p>",
        "id": 194843018,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587493622
    },
    {
        "content": "<p><code>cases n</code></p>",
        "id": 194843055,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587493639
    },
    {
        "content": "<p>gotcha thanks</p>",
        "id": 194843183,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587493683
    },
    {
        "content": "<p>how about you write down a maths proof first before touching Lean</p>",
        "id": 194843323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587493744
    },
    {
        "content": "<p>yeah I'm on that right now - this was just something I forgot</p>",
        "id": 194843414,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587493792
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/l1lqyc60x8AVwFzmadFwDRpM/2020-04-22-1.png\" title=\"/user_uploads/3121/l1lqyc60x8AVwFzmadFwDRpM/2020-04-22-1.png\"><img src=\"/user_uploads/3121/l1lqyc60x8AVwFzmadFwDRpM/2020-04-22-1.png\"></a></div>",
        "id": 194844162,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587494103
    },
    {
        "content": "<p>see i answered before you asked</p>",
        "id": 194844169,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587494107
    },
    {
        "content": "<p>from your point of view you'd probably say that i answered after you asked</p>",
        "id": 194844274,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587494149
    },
    {
        "content": "<p>this has been a demonstration of the relativity of simultaneity in Einstein's theory of relativity</p>",
        "id": 194844345,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587494169
    },
    {
        "content": "<p>whaddup I'm Kenny I'm (age removed) and I'm a physicist</p>",
        "id": 194844414,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587494212
    },
    {
        "content": "<p>(nobody will get this reference)</p>",
        "id": 194844481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587494246
    },
    {
        "content": "<p>Okay I believe I have something</p>",
        "id": 194847516,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587495790
    },
    {
        "content": "<p>We want to show that there exists no injection <code>f : [m + 1] → [m]</code>, where <code>[m]</code> here denotes the set <code>{0, 1, ..., m - 1}</code>.</p>",
        "id": 194847633,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587495850
    },
    {
        "content": "<p>we proceed by induction.  The base case <code>m = 0</code>  is clear since if we suppose not, we end up with <code>f(0) = f(1) = 0</code>, which is a contradiction.</p>",
        "id": 194847893,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587496000
    },
    {
        "content": "<p>[0] is empty, not {0}</p>",
        "id": 194847950,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587496041
    },
    {
        "content": "<p>The case m=0 is clear because there are no functions [1]-&gt;[0], injective or not</p>",
        "id": 194847987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587496063
    },
    {
        "content": "<p>Now, we know that there is no injective <code>f : [m] → [m - 1]</code> and want to show this for <code>f : [m + 1] → [m], where [m]</code>.  Suppose not, to which we assume there exists such <code>f</code>.  We know that <code>f(m) = k</code> for some <code>k &lt; m</code>.  Then we consider the restriction of <code>f</code> to <code>[m]</code>.  By injectivity we know that if for any <code>j</code> in <code>{0, ..., m}</code>, <code>f j = f k → j = k</code>.  So when we restrict <code>f</code>, the image of the function lives in <code>[m - 1]</code>.  However, by our inductive hypothesis, there is no injective function that maps <code>[m]</code> to <code>[m - 1]</code>.  Contradiction.</p>",
        "id": 194848414,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587496270
    },
    {
        "content": "<p>I see a small problem.</p>",
        "id": 194848836,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587496497
    },
    {
        "content": "<p>I know that <code>f(m) = k</code>, but I don't know if <code>k = m - 1</code>, which means I know that the restriction of <code>f</code> to <code>[m]</code> must necessarily map to a set of only <code>m - 1</code> elements, but they may not all 'live' in <code>[m - 1]</code> unless I relabel them.</p>",
        "id": 194849020,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587496583
    },
    {
        "content": "<p>So, does this suggest I can't use the idea of restrictions?</p>",
        "id": 194849802,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497003
    },
    {
        "content": "<p>this suggests you relabel them</p>",
        "id": 194849830,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497025
    },
    {
        "content": "<p>That's the first thing that came to mind to use an inductive hypothesis</p>",
        "id": 194849836,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497031
    },
    {
        "content": "<p>oh</p>",
        "id": 194849840,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497033
    },
    {
        "content": "<p>I'm not exactly sure how to do that.  How do I know a priori that I have a collection of size m - 1 if I only have that they are type <code>finite_subset (m + 1)</code>?</p>",
        "id": 194849961,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497108
    },
    {
        "content": "<p>I have some vague idea that relabelling itself is an injective function</p>",
        "id": 194850089,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497180
    },
    {
        "content": "<p>if we have some number <code>k</code> that sits in <code>{0, 1, ..., m}</code>, then my relabelling function would basically this: <br>\nfor all <code>j &lt; k</code>,  <code>j</code> maps to <code>j + 1</code>.  Otherwise, if <code>j &gt; k</code>, then <code>j</code> maps to <code>j</code>.</p>",
        "id": 194850218,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497277
    },
    {
        "content": "<p>wait shoot that's backwards</p>",
        "id": 194850268,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497286
    },
    {
        "content": "<p>it should be:<br>\nfor all <code>j &gt; k</code>, <code>j</code> maps to <code>j - 1</code>.  Otherwise, if <code>j &lt; k</code>, then it is mapped to itself.</p>",
        "id": 194850315,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497329
    },
    {
        "content": "<p>call this function <code>relabel</code>.  We can show it is injective.</p>",
        "id": 194850421,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497391
    },
    {
        "content": "<p>and so when we restrict <code>f</code> to <code>[m]</code>,  and relabel, we should have an injective function <code>relabel ∘ f : [m] → [m - 1]</code></p>",
        "id": 194850693,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497519
    },
    {
        "content": "<p>which is a contradiction.  Is there anything I missed?</p>",
        "id": 194850745,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497529
    },
    {
        "content": "<p><code>relabel</code> itself isn't injective (let's say you send <code>k</code> to <code>k</code>)</p>",
        "id": 194850991,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497652
    },
    {
        "content": "<p>but <code>relabel \\o f</code> is injective</p>",
        "id": 194851000,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497657
    },
    {
        "content": "<p>other than that, LGTM</p>",
        "id": 194851018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497667
    },
    {
        "content": "<p>oh and you implicitly restricted <code>f</code> to <code>[m]</code> I guess</p>",
        "id": 194851048,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497690
    },
    {
        "content": "<p>yeah I'm not exactly sure how to carry out restriction</p>",
        "id": 194851076,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497705
    },
    {
        "content": "<p>compose it with <code>[m] -&gt; [m+1]</code></p>",
        "id": 194851119,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497721
    },
    {
        "content": "<p><code>relabel o f o lift</code></p>",
        "id": 194851130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497728
    },
    {
        "content": "<p>I see I see</p>",
        "id": 194851180,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497760
    },
    {
        "content": "<p>wait, so then what does relabel's function signature become?</p>",
        "id": 194851244,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497779
    },
    {
        "content": "<p><code>relabel : [m] -&gt; [m-1]</code></p>",
        "id": 194851263,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497792
    },
    {
        "content": "<p><code>f: [m+1] -&gt; [m]</code></p>",
        "id": 194851280,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497800
    },
    {
        "content": "<p><code>lift: [m] -&gt; [m+1]</code></p>",
        "id": 194851287,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497806
    },
    {
        "content": "<p>ah so this is exactly why I can't say <code>relabel</code> is injective, but <code>relabel</code> composed with an injective function is in fact injective?</p>",
        "id": 194851318,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497828
    },
    {
        "content": "<p>no, it's because <code>f o lift</code> misses <code>k</code> that <code>relabel k o f o lift</code> is injective</p>",
        "id": 194851489,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587497935
    },
    {
        "content": "<p>ah gotcha</p>",
        "id": 194851584,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587497999
    },
    {
        "content": "<p>...stupid question, but how would I define this in lean?</p>",
        "id": 194851660,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587498043
    },
    {
        "content": "<p>relabel, that is.  I'm not sure how to give cases for j &lt; k and j &gt; k.</p>",
        "id": 194851685,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587498072
    },
    {
        "content": "<p>don't forget k</p>",
        "id": 194851692,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587498086
    },
    {
        "content": "<p><code>if j \\le k then j else j-1</code></p>",
        "id": 194851703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587498096
    },
    {
        "content": "<p>ah gotcha gotcha.</p>",
        "id": 194851807,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587498148
    },
    {
        "content": "<p>I'm getting some errors</p>",
        "id": 194852270,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587498433
    },
    {
        "content": "<p>here's what I have for relabel so far</p>",
        "id": 194852283,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587498438
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">relabel_finite_set</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 194852291,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587498444
    },
    {
        "content": "<p>but I have this error in both tuples:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</pre></div>",
        "id": 194852311,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587498479
    },
    {
        "content": "<p>read the error</p>",
        "id": 194852410,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587498527
    },
    {
        "content": "<p>Looks like lean wanted j.2</p>",
        "id": 194852417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587498532
    },
    {
        "content": "<p>Or maybe it's called j.is_lt or something</p>",
        "id": 194852470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587498556
    },
    {
        "content": "<p>I have this then:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">p</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 194852487,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587498562
    },
    {
        "content": "<p>It's going to be hard to come up with something of that type</p>",
        "id": 194852506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587498579
    },
    {
        "content": "<p><code>if H : j.1 \\le k</code></p>",
        "id": 194852532,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587498595
    },
    {
        "content": "<p>how would I compose that with <code>p</code> to get <code>j &lt; m - 1</code>?</p>",
        "id": 194852629,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587498650
    },
    {
        "content": "<p>I'm not sure how to use <code>H</code> here</p>",
        "id": 194853033,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587498880
    },
    {
        "content": "<p>Hello guys, and thanks for all the help from last time!</p>",
        "id": 195356505,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587940953
    },
    {
        "content": "<p>I'm not sure if I should make a new topic or just get this post up to speed with my progress</p>",
        "id": 195356509,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587940997
    },
    {
        "content": "<p>Basically, I've got pigeonhole done after assuming a few <code>sorry</code>'s in my helper functions, but I am having trouble showing that <code>(relabel m k p) ∘ f ∘ lift</code> is an injective function</p>",
        "id": 195356555,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587941097
    },
    {
        "content": "<p>ah I'll just make a new thread entirely since this is a separate issue.</p>",
        "id": 195356690,
        "sender_full_name": "Adeeb K",
        "timestamp": 1587941365
    }
]