[
    {
        "content": "<p>Can I define a notation before defining the notion it is intended to stand for, so that I may use the notation starting from the very first definition? So, instead of this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">my_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">my_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">my_eq</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`≅`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">my_eq</span>\n</code></pre></div>\n<p>define the notation first, and the write <code>\\congr</code> instead of <code>my_eq</code> in the constructor</p>",
        "id": 230552701,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1615914496
    },
    {
        "content": "<p>I tried using <code>let notation `≅` : 50 in ...</code> in that definition<del>, but it doesn't seem there's anywhere its legal</del></p>",
        "id": 230554173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615914995
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">my_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">my_refl</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"kd\">infix</span> <span class=\"bp\">`≅`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">my_eq</span> <span class=\"k\">in</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≅</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 230554372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615915074
    },
    {
        "content": "<p>Although you have to repeat it for every constructor, which probably isn't what you wanted</p>",
        "id": 230554596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615915135
    },
    {
        "content": "<p>Wow, nice, I never thought something like that could be legal syntax</p>",
        "id": 230554928,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1615915240
    },
    {
        "content": "<p>I see, I remembered that Coq had a way to this, so I figured there might be an equivalent for Lean.</p>",
        "id": 230555341,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1615915361
    },
    {
        "content": "<p>Like <a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/Imp.html#n%3Csub%3E1%3C/sub%3E:54\">here</a>, on the \"Evaluation as Relation\" section,<br>\nyou basically reserve the notation, and specify what it refers to only after the definition</p>",
        "id": 230555780,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1615915513
    },
    {
        "content": "<p>You could maybe ask in the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream for whether there will be notation for this</p>",
        "id": 230556875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615915841
    },
    {
        "content": "<p>Perhaps after glancing at the lean4 docs first</p>",
        "id": 230556904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615915849
    }
]