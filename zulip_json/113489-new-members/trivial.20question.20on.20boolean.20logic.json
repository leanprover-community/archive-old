[
    {
        "content": "<p>Hi, I am trying to solve \"lemma question_2a_false : ¬ (∀ P Q : Prop, (P → Q) → (Q → P))\"</p>\n<p>Currently, I did </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">false</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>which end up with  showing  (false → true) → true → false |- false.</p>\n<p>But I cannot get the last step. I would assume trivial works, but it doesn't.</p>",
        "id": 249513593,
        "sender_full_name": "David Lin",
        "timestamp": 1629035299
    },
    {
        "content": "<p>Hmm, I think I have found a workaround. Instead of using <code>have</code>, I use <code>apply</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">false</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n<span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"n\">trivial</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Nevertheless, I am still interested to see what one can do with the previous strategy.</p>",
        "id": 249514034,
        "sender_full_name": "David Lin",
        "timestamp": 1629035861
    },
    {
        "content": "<p>Can you show the example where \"trivial doesn't work\"?</p>",
        "id": 249514333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629036126
    },
    {
        "content": "<p>It's likely you're getting hit by the difference between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/trivial\">docs#trivial</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.trivial\">docs#tactic.interactive.trivial</a></p>",
        "id": 249514377,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629036197
    },
    {
        "content": "<p>I am probably using \"trivial\" in a nonprecise way. I am mainly thinking h2 -&gt; false, can be done by simple computation of boolean logic. So I guess there might be some one line solution like exact h2 (?)<br>\n<a href=\"/user_uploads/3121/AusimTv0QRJq3qgusMa12LM7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AusimTv0QRJq3qgusMa12LM7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AusimTv0QRJq3qgusMa12LM7/image.png\"></a></div>",
        "id": 249514936,
        "sender_full_name": "David Lin",
        "timestamp": 1629036982
    },
    {
        "content": "<p>So the question is, what is the last line that finishes the goal?</p>",
        "id": 249514974,
        "sender_full_name": "David Lin",
        "timestamp": 1629037073
    },
    {
        "content": "<p>This might be a good exercise in leaning how to use term mode interactively</p>",
        "id": 249515032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629037123
    },
    {
        "content": "<p>Start with <code>λ h, _</code> as your entire proof (instead of a begin / end)</p>",
        "id": 249515045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629037155
    },
    {
        "content": "<p>You'll get an error on the <code>_</code> which tells you what the goal is</p>",
        "id": 249515050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629037172
    },
    {
        "content": "<p>You can replace it with <code>h false true _ _</code> and you'll have two \"holes\" left to fill</p>",
        "id": 249515107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629037208
    },
    {
        "content": "<p>I think I get the second hole, but not sure about the other one</p>\n<p><code>λ h, h false true _ trivial</code></p>",
        "id": 249515519,
        "sender_full_name": "David Lin",
        "timestamp": 1629037688
    },
    {
        "content": "<p>The other hole is <code>false → true</code>, right? That's true by definition of <code>false</code>.</p>",
        "id": 249516489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629039096
    },
    {
        "content": "<p>One way you can solve it is <code>(by trivial)</code> which is essentially what your original proof did</p>",
        "id": 249516541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629039128
    },
    {
        "content": "<p>Tactics like <code>simp * at *</code> and <code>finish</code> might help here</p>",
        "id": 249520001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629044151
    },
    {
        "content": "<p>itauto should be complete for these too</p>",
        "id": 249521117,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629045795
    },
    {
        "content": "<p>The actual thing you need to fill the hole is</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/false.elim\">docs#false.elim</a></p>\n</div></div>",
        "id": 249522351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629047773
    }
]