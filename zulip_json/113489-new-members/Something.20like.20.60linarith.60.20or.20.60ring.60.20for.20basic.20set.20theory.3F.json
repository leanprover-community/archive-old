[
    {
        "content": "<p>We have tactics like <code>linarith</code> and <code>ring</code> to automatically fill in proofs of basic equations and inequalities in arithmetic.  Is there a corresponding tactic for proving basic equations and inclusions in set theory (things involving unions, intersections, sdiffs, complements etc.) ?</p>",
        "id": 248839003,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1628512752
    },
    {
        "content": "<p>I think the group that was working on matroids had such a tactic. But I don't think it landed in mathlib...</p>",
        "id": 248839250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628512880
    },
    {
        "content": "<p>Would tauto or itauto discharge this? Since such statements are just statements over a (generalized) boolean algebra</p>",
        "id": 248840016,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628513230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Something.20like.20.60linarith.60.20or.20.60ring.60.20for.20basic.20set.20theory.3F/near/248839250\">said</a>:</p>\n<blockquote>\n<p>I think the group that was working on matroids had such a tactic. But I don't think it landed in mathlib...</p>\n</blockquote>\n<p>For reference: <a href=\"https://github.com/apnelson1/lean-set-tactic\">https://github.com/apnelson1/lean-set-tactic</a></p>\n<p><a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/set.20tactic/near/246328659\">Zulip thread here</a></p>",
        "id": 248840956,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1628513704
    },
    {
        "content": "<p>I've just tried <code>tauto</code> and <code>itauto</code> on <code>example  {X : Type*} (S T : set X) :  T ⊆ (univ \\ S) ∪ (S ∩ T)</code> and they weren't able to solve it.</p>",
        "id": 248841201,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1628513827
    },
    {
        "content": "<p>Thanks for the pointer Bryan, I'll take a look at that</p>",
        "id": 248841480,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1628513900
    },
    {
        "content": "<p>Does <code>intro x, finish</code> work?</p>",
        "id": 248841887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628514071
    },
    {
        "content": "<p>Oh, it does :)</p>",
        "id": 248841975,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1628514108
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 248842194,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1628514198
    },
    {
        "content": "<p>Two notes for the benefit of anyone finding this thread later: <br>\n(1) use <code>ext x, finish</code> to prove set-theoretic equations; use <code>intro x, finish</code> to prove subset inclusions.<br>\n(2) you may need to  re-write or unfold some premises.  For example, this approach fails with <code>(hST: S ⊆ T) ⊢ univ \\ S ∪ T = univ</code>, but works if we first use <code>rw subset_def at hST</code> to change the premise to <code>hST: ∀ (x : X), x ∈ S → x ∈ T</code>.</p>",
        "id": 248847733,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1628516707
    },
    {
        "content": "<p>Another <code>finish</code> tip is that it doesn't try <code>split</code>, so if you're proving P &lt;-&gt; Q then you might want to try <code>split; finish</code> (which sometimes works even when <code>finish</code> doesn't).</p>",
        "id": 248847786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628516742
    }
]