[
    {
        "content": "<p>I am learning the mathlib syntax for matrices. The long-term goal is to show that the dimension of <code>matrix n n \\R</code> is <code>n^2</code>. On the way, I am playing around with different matrix definitions. Currently, I can't show that two matrices are identical. What's the right way to do it? Errors are included:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"kn\">notation</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- we specialize matrix for n × n matrices</span>\n<span class=\"c1\">-- with a reducible definition because it&#39;s just a shell defn</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Mn</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"c1\">-- we infer the has_one instance to be able to use numerals instead</span>\n<span class=\"kn\">instance</span> <span class=\"n\">Mn_has_one</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">Mn</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">-- and a shortcut for Mn(ℝ)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">MnR</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Mn</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span>\n<span class=\"c1\">-- with a has_one instance to use numerals</span>\n<span class=\"kn\">instance</span> <span class=\"n\">MnR_has_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">MnR</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">MnR</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">i_val</span> <span class=\"k\">with</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">j_val</span> <span class=\"k\">with</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n        <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- 0,0 case</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- 0,1 case, now have to show that it is actually 0,1</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n            <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n            <span class=\"n\">rwa</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n        <span class=\"c1\">-- goal is now: 2 ⟨0, _⟩ ⟨j.succ, j_is_lt⟩ = 0</span>\n        <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- error is rewrite tactic failed, motive is not type correct</span>\n        <span class=\"c1\">-- λ (_a : ℕ), 2 ⟨0, _⟩ ⟨j.succ, j_is_lt⟩ = 0 = (2 ⟨0, _⟩ ⟨_a, j_is_lt⟩ = 0)</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200058313,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591591928
    },
    {
        "content": "<p>First note that neither of your instances do anything. Since you made the definitions reducible, Lean can find the instances directly.</p>",
        "id": 200058703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591592594
    },
    {
        "content": "<p>(anytime you create an instance just by <code>infer_instance</code> or <code>apply_instance</code>, without any <code>dsimp</code> first, you know that it wasn't necessary)</p>",
        "id": 200058710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591592615
    },
    {
        "content": "<p>(similarly if you're proving a <code>@[simp]</code> lemma merely with <code>by simp</code>, it likely isn't necessary)</p>",
        "id": 200058714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591592638
    },
    {
        "content": "<p>I would suggest that a canonical start to this proof should be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>and if you're not done by then (you're not!) then there are some missing <code>@[simp]</code> lemmas that should be written.</p>",
        "id": 200058844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591592801
    },
    {
        "content": "<p>Awesome, good to know. So I will remove those instances. Originally, I did not have reducible, and couldn't get the <code>infer_instance</code> to work. Reading some of the source code suggested to try reducible, so that made it work. Didn't realize that the instances came with reducible.</p>",
        "id": 200058870,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591592838
    },
    {
        "content": "<p>Ah, <code>fin_cases</code>! Did not know about that, none of the tutorials worked with it. Still learning all the tactic tricks.</p>",
        "id": 200058930,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591592889
    },
    {
        "content": "<p>The alternative to <code>@[reducible]</code> would be to construct those instances using <code>by { dsimp [Mn], apply_instance }</code>.</p>",
        "id": 200059053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591593101
    },
    {
        "content": "<p>Or you can write <code>@[derive has_one]</code> before the <code>def Mn ...</code>, which just uses this trick under the hood.</p>",
        "id": 200059105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591593132
    },
    {
        "content": "<p>Your hint, if I understand correctly, is to show that for <code>2 : MnR 2</code>, the off-diagonal entries are 0, by calling on an underlying matrix lemma about the definition of <code>one</code> for a matrix. Correct?</p>",
        "id": 200059251,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591593332
    },
    {
        "content": "<p>You might like these lemmas:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">v</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">bit0_apply_apply</span>\n   <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">bit1_apply_apply</span>\n   <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">one_val</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200059562,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591593748
    },
    {
        "content": "<p>(It's arguable whether they should actually be <code>simp</code> lemmas, but I think probably yes.)</p>",
        "id": 200059569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591593767
    },
    {
        "content": "<p>With them you can use:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">MnR</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">],</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">one_val</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200059577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591593783
    },
    {
        "content": "<p>Perhaps <code>matrix.one_val</code> should be a simp lemma, too.</p>",
        "id": 200059583,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591593793
    },
    {
        "content": "<p>Ask if you've got no idea what <code>bit0</code> and <code>bit1</code> are about! They are how to encode numerals.</p>",
        "id": 200059632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591593844
    },
    {
        "content": "<p>Typically whenever you decide you want to use numerals for some new type, you need to set up some lemmas describing \"their inner workings\".</p>",
        "id": 200059641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591593868
    },
    {
        "content": "<p>It seems no one did this for matrices, perhaps.</p>",
        "id": 200059645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591593875
    },
    {
        "content": "<p>I've seen bit0 and bit1 only in the tutorials, but only briefly.</p>",
        "id": 200059646,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591593876
    },
    {
        "content": "<p>If you like you can PR these lemmas to mathlib. :-)</p>",
        "id": 200059650,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591593886
    },
    {
        "content": "<p>I was going to say \"Your lemmas are probably generalizable to arbitrary <code>m x n</code> matrices, not necessarily square....\" but then I realized that <code>(bit0 M)</code> would not make sense for a rectangular matrix.</p>",
        "id": 200059716,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591593976
    },
    {
        "content": "<p>I mean, there are identity-like matrices for rectangular ones, but those are probably not what people want.</p>",
        "id": 200059725,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591594009
    },
    {
        "content": "<p>Why do you not need <code>[decidable_eq n]</code> for the <code>bit0</code> lemma?</p>",
        "id": 200059737,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591594040
    },
    {
        "content": "<p>Ah, the <code>i = j</code> in the <code>ite</code> statement.</p>",
        "id": 200059784,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591594089
    },
    {
        "content": "<p>If those lemmas were not defined, would the scalar-multiplication lemma to show <code>2 : MnR n</code> is diagonal also work, for the off-diagonal elements?</p>",
        "id": 200059881,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591594320
    },
    {
        "content": "<p>I'm not sure what you mean by the last comment.</p>",
        "id": 200059927,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591594358
    },
    {
        "content": "<p>I was stuck at the step that had to show <code>(2 : MnR) 0 1 = ![![2,0],![0,2]] 0 1</code>. <code>simp</code> is able to get the rhs down to <code>0</code>. The lhs was not simplifying at all. I thought your earlier hint was to show that <code>2 = 2 * 1</code> and have a lemma that <code>forall s, s * (diagonal d) = (diagonal (\\la i, s * d i))</code>. Then, we have that <code>2 : MnR 2</code> is also diagonal, so the off-diagonal entries are 0.</p>",
        "id": 200060010,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591594524
    },
    {
        "content": "<p>That would be another approach, but I think it's easier to just write simp lemmas for the matrix entries of numerals. Otherwise people are going to have to do this scalar-multiplication-times-one trick themselves every time.</p>",
        "id": 200061354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591596630
    },
    {
        "content": "<p>OK, makes sense to me. Any tips on PRs for mathlib?</p>",
        "id": 200061662,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591597121
    },
    {
        "content": "<p>There's some basic advice at <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> about making a PR.</p>",
        "id": 200061990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591597583
    },
    {
        "content": "<p>The essential points are:</p>\n<ol>\n<li>make a fork of mathlib on github</li>\n<li>make a branch locally that contains just your changes</li>\n<li>push this to your fork on github</li>\n<li>click the \"pull request\" button</li>\n</ol>",
        "id": 200062021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591597632
    },
    {
        "content": "<p>We can walk you through the rest of it.</p>",
        "id": 200062024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591597640
    },
    {
        "content": "<p>It's nice if you try to put a title on the PR that matches our conventions, and similarly if you try to read the \"naming\" page accessible from that link, to try to get the names of declarations in mathlib style.</p>",
        "id": 200062042,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591597681
    },
    {
        "content": "<p>But those can all be fixed in the PR comments. We try to be nice to people on their first PR. :-)</p>",
        "id": 200062085,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591597695
    },
    {
        "content": "<p>It also helps if you run <code>#lint</code> at the bottom of any file you're going to include, and try to fix any problems it reports. (Or ask here if you don't know what it wants.)</p>",
        "id": 200062095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591597723
    },
    {
        "content": "<p>Cool, I'll try that out. When cloning mathlib locally, is it worth it to do <code>leanproject build</code>? The times I've done it after doing <code>leanproject get tutorials</code>, for example, it's ruined my folder for live coding in VS code, I just get lots of errors.</p>",
        "id": 200062438,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591598187
    },
    {
        "content": "<p>Definitely don't run <code>leanproject build</code>. That will compile everything, and you'd really prefer someone else does that work.</p>",
        "id": 200062704,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591598638
    },
    {
        "content": "<p><code>leanproject up</code> will simultaneously get the latest version of mathlib, and download precompiled olean files for you.</p>",
        "id": 200062749,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591598659
    },
    {
        "content": "<p>If you're cloning mathlib, you can use <code>leanproject get-cache</code> to fetch the oleans for any branch that's in the mathlib repo. You can run <code>leanproject build</code> if you want to check locally that your changes don't break other parts of the library, but most of us rely on the Github Actions scripts which build mathlib \"in the cloud\". As recommended in the \"how to contribute\" page that Scott linked, you should make sure that Github Actions is enabled for your fork of mathlib as well.</p>",
        "id": 200062762,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591598703
    },
    {
        "content": "<p>In files like <code>data.matrix.basic</code>, where it seems the lemmas should go, set variables local to a namespace. In addition, in that namespace, instances for those variables are assumed. At a given line in the file, is there a way to see what instances are associated with a variable, with something like a <code>#check</code>? That way the lemma definitions can be placed in the most appropriate namespace. For example, <code>namespace one</code> is not appropriate because it assumes too much about <code>\\a</code>, but <code>namespace diagonal</code> seems appropriate because of <code>[decidable_eq n]</code>. </p>\n<p>I didn't notice the instances for the variables at first, and after pasting the lemmas into the <code>namespace one</code> section, was surprised to see errors.</p>",
        "id": 200064398,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591600547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> you can try <code>#where</code></p>",
        "id": 200064701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591600840
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/2987\">https://github.com/leanprover-community/mathlib/pull/2987</a></p>",
        "id": 200115049,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591630321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Thanks, I've kicked it on the merge queue</p>",
        "id": 200124447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591634420
    }
]