[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.pi</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.beta</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">non_increasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hf</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x₁</span> <span class=\"n\">y₁</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241862244,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623116597
    },
    {
        "content": "<p>I want to use the eq_or_lt_of_le term to rewrite my hypothesis x \\le y as x = y or x &lt; y, but I can't</p>",
        "id": 241862310,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623116668
    },
    {
        "content": "<p>Is there a way to do this?</p>",
        "id": 241862545,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623116973
    },
    {
        "content": "<p>your code is not working for me. Are those all the imports?</p>",
        "id": 241862614,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623117057
    },
    {
        "content": "<p>Sorry forgot the defs</p>",
        "id": 241862689,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117154
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.pi</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.beta</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">non_increasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hf</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x₁</span> <span class=\"n\">y₁</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241862712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623117202
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 241862780,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117269
    },
    {
        "content": "<p>Now is there a way to split hf?</p>",
        "id": 241862784,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117280
    },
    {
        "content": "<p><code>cases hf</code></p>",
        "id": 241862791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623117285
    },
    {
        "content": "<p>or is that through cases</p>",
        "id": 241862794,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117289
    },
    {
        "content": "<p>yeah</p>",
        "id": 241862797,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117293
    },
    {
        "content": "<p>okay thanks</p>",
        "id": 241862800,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117301
    },
    {
        "content": "<p>very trivial questions</p>",
        "id": 241862819,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117329
    },
    {
        "content": "<p>It's good practice to use <code>{ .. }</code> to break up your goals. Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.pi</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.beta</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">non_decreasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">non_increasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">≤</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hf</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x₁</span> <span class=\"n\">y₁</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241862830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623117347
    },
    {
        "content": "<p>Okay</p>",
        "id": 241862912,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117453
    },
    {
        "content": "<p>Helps with organization</p>",
        "id": 241862921,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117461
    },
    {
        "content": "<p>General question: How come sorry makes it so that I don't have to prove x_1 = y_1 implies my goal? I only had to prove the x_1 &lt; y_1 case</p>",
        "id": 241863050,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117607
    },
    {
        "content": "<p>I'm not sure what you mean... sorry is just a placeholder for a proof that should be filled in later.</p>",
        "id": 241863110,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623117705
    },
    {
        "content": "<p>You haven't proved it until you've removed all the <code>sorry</code>s!</p>",
        "id": 241863124,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1623117720
    },
    {
        "content": "<p>I think what must have happened is that you did <code>cases hf</code> which gives you two separate goals, and the <code>sorry</code> killed the first goal, and only the second goal was left.</p>",
        "id": 241863188,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623117769
    },
    {
        "content": "<p>Ahh I see</p>",
        "id": 241863207,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623117823
    },
    {
        "content": "<p>again, it's good practice to introduce <code>{ ... }</code> immediately after the <code>cases hf</code> since you created new goals.</p>",
        "id": 241863251,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623117856
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">non_decreasing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hf</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x₁</span> <span class=\"n\">y₁</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hf</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241863281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623117878
    },
    {
        "content": "<p>So now the two <code>sorry</code>'s are just placeholders for proofs that you still need to finish. And as you can see, there are two separate goals that need to be finished.</p>",
        "id": 241863305,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623117930
    },
    {
        "content": "<p>Yeah, I see both now, thank you!</p>",
        "id": 241863485,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1623118156
    }
]