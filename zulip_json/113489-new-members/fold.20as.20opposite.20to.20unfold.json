[
    {
        "content": "<p>There is an unfold tactic. Is there a tactic to fold again?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pair</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">pair</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">pair</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">pair</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">pair_def</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">pair</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">pair_def</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244061170,
        "sender_full_name": "kana",
        "timestamp": 1624790904
    },
    {
        "content": "<p>you could <code>change</code> specifically, but I think most of the times we just make an auxillary lemma called <code>lemma pair_def</code></p>",
        "id": 244061956,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624792207
    },
    {
        "content": "<p>something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pair_def</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 244061966,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624792222
    },
    {
        "content": "<p>(your <code>have</code> could be <code>by intros; refl</code> or even <code>λ _ _, rfl</code>)</p>",
        "id": 244061969,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624792249
    },
    {
        "content": "<p>Does <code>rw ←pair</code> work?</p>",
        "id": 244063164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624794187
    },
    {
        "content": "<p>Oh yes, rw &lt;-pair really works, thanks!</p>",
        "id": 244063901,
        "sender_full_name": "kana",
        "timestamp": 1624795410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, <code>pair_def</code> is almost never needed because <code>pair</code> gets a secret equation lemma containing the same statement</p>",
        "id": 244065463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624797943
    },
    {
        "content": "<p>feel like I've seen it a fair bit in mathlib though, what's with that?</p>",
        "id": 244065792,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624798450
    },
    {
        "content": "<p>sometimes the secret equation lemma is not stated the way we want. Sometimes you can fix that by writing the original definition differently but if that isn't good enough we can use a <code>*_def</code> lemma to state an arbitrary theorem not constrained by the grammar of the equation compiler</p>",
        "id": 244161889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624894113
    }
]