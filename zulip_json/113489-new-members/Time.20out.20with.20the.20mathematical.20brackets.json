[
    {
        "content": "<p>I've defined a prime field, and tried to define a function that maps <code>int</code> to<code>pf</code>, but somehow timeout at the function...</p>\n<div class=\"codehilite\"><pre><span></span>def pf {p : ℕ} := {e // prime p ∧ 0 ≤ e ∧ e &lt; p}\n\nvariable {p : ℕ}\n\ndef int_to_pf (x : ℤ) : @pf p := ⟨x, begin end⟩\n</pre></div>\n\n\n<p>while my friend succeed with</p>\n<div class=\"codehilite\"><pre><span></span>def pf (p  : ℕ ) [prime p] := {e // 0 ≤ e ∧ e &lt; p}\n\nvariable p : ℕ\nvariable [pp: prime p]\n\ndef int_to_pf (x : ℤ) : @pf p (prime p) :=  ⟨x, begin end⟩\n</pre></div>\n\n\n<p>Why is there a difference?</p>",
        "id": 137141051,
        "sender_full_name": "AHan",
        "timestamp": 1541304691
    },
    {
        "content": "<p>you are casting an <code>int</code> to a <code>nat</code> in both examples, this times out searching for a coercion</p>",
        "id": 137141678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541306063
    },
    {
        "content": "<p>In the second example it fails fast only because it gets stuck in the type of the theorem: <code>@pf p (prime p)</code> is not well typed because <code>prime p</code> does not have type <code>prime p</code></p>",
        "id": 137141733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541306172
    },
    {
        "content": "<p>sorry for a mistake, I think my friend wrote</p>\n<div class=\"codehilite\"><pre><span></span>pp: prime p\ndef int_to_pf (x : ℤ) : @pf p pp ...\n</pre></div>",
        "id": 137141838,
        "sender_full_name": "AHan",
        "timestamp": 1541306502
    },
    {
        "content": "<p>Where did I cast int to nat?<br>\nAren't elements in pf all have value of type nat?</p>",
        "id": 137141882,
        "sender_full_name": "AHan",
        "timestamp": 1541306573
    },
    {
        "content": "<p>Your x in int to pf is an int?</p>",
        "id": 137144099,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541311480
    },
    {
        "content": "<p>yes, but aren't val of elements of type pf also int?</p>",
        "id": 137144602,
        "sender_full_name": "AHan",
        "timestamp": 1541312679
    },
    {
        "content": "<p>You defined p in pf as a nat</p>",
        "id": 137144763,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541313052
    },
    {
        "content": "<p>But the second example can work?</p>",
        "id": 137144977,
        "sender_full_name": "AHan",
        "timestamp": 1541313548
    },
    {
        "content": "<p>lean does not have a subtyping relation, so if something has type <code>pf p</code> it does not have type <code>int</code>. But more importantly you are going the other way around here: <code>x</code> has type <code>int</code> and you are putting it in the first component of <code>pf p</code>, which you didn't write explicitly (it is the type of <code>e</code>) but is <code>nat</code>.</p>",
        "id": 137145287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541314267
    },
    {
        "content": "<p>Oh!! Got it! thanks a lot!!</p>",
        "id": 137145499,
        "sender_full_name": "AHan",
        "timestamp": 1541314788
    }
]