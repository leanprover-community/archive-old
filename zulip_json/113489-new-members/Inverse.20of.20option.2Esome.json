[
    {
        "content": "<p>Given <code>ox:option X</code> with <code>∃ x : X, ox = some x</code>, is there a way to access <code>x</code> without the quantifier? Something like <code>x=some_inverse ox</code>?</p>",
        "id": 269527089,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643260670
    },
    {
        "content": "<p>Connecting up a couple things from mathlib, there's this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extract</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ox</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">ox</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">option.is_some_iff_exists</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">option.get</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269527875,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643261423
    },
    {
        "content": "<p>A direct definition is quick though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">extract</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">ox</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">ox</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 269528032,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643261581
    },
    {
        "content": "<p>Thanks... of course the quantifier is still there as an input to <code>extract</code>, but maybe it doesn't make sense to avoid it completely.</p>",
        "id": 269907897,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643514772
    },
    {
        "content": "<p>You can remove the quantifier if you add <code>inhabited</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extract</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 269908571,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643515675
    },
    {
        "content": "<p>also known as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.iget\">docs#option.iget</a></p>",
        "id": 269908623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643515718
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.get_or_else\">docs#option.get_or_else</a> if you want to be more explicit about how to handle the <code>none</code> case.</p>",
        "id": 269909200,
        "sender_full_name": "Jason Rute",
        "timestamp": 1643516592
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.get\">docs#option.get</a> is the original version of the question  where you supply a proof of the option being a some (same as Kyle's <code>extract</code>).</p>",
        "id": 269909294,
        "sender_full_name": "Jason Rute",
        "timestamp": 1643516744
    },
    {
        "content": "<p>Also, I don't know what you are doing, but the standard way to deal with options is to keep everything inside options (or other monads) until the end. So instead of removing a value from an option, performing an operation on it, and putting it back, you can use doc#option.map , doc#option.orelse , and similar operations. Or if you are in a tactic monad, doing <code>x &lt;- ox</code>works and the <code>none</code> case just get's mapped to failure.  (This works because the option is implicitly casted to a tactic.)</p>",
        "id": 269910002,
        "sender_full_name": "Jason Rute",
        "timestamp": 1643517791
    },
    {
        "content": "<p>This one is a bad idea, but if you are in <code>meta</code> land you can \"solve\" this with recursion. <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">unsafe_get</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">ox</span> <span class=\"o\">:=</span> <span class=\"n\">unsafe_get</span> <span class=\"n\">ox</span>\n</code></pre></div>",
        "id": 269910285,
        "sender_full_name": "Jason Rute",
        "timestamp": 1643518215
    },
    {
        "content": "<p>OK thanks everyone. Also, hi <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> good to see you on here. Actually I'm writing something about partial computable functions in computability theory and I figured they should have the type <code>ℕ → option ℕ</code>... or even <code>option ℕ → option ℕ</code>, to be able to compose them.</p>",
        "id": 269912620,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643521364
    },
    {
        "content": "<p>The mathlib computability library uses functions <code>ℕ → part ℕ</code> (aka <code>ℕ →. ℕ</code>), using <code>&gt;&gt;=</code> to compose them.</p>",
        "id": 269913671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643522881
    },
    {
        "content": "<p>Oh cool <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  where can I read about <code>part</code> types?</p>",
        "id": 269914208,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643523696
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/part\">docs#part</a></p>",
        "id": 269914210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643523703
    },
    {
        "content": "<p>Good you told me that before I started some big project using <code>option</code>!</p>",
        "id": 269914287,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643523784
    },
    {
        "content": "<p>So for example the identity function, restricted to positive input, is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">identity_part</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">part</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span>  <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span> <span class=\"n\">x</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">x</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 269915951,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643526157
    },
    {
        "content": "<p>I'm not sure if using <code>&gt;&gt;=</code> for composition is always the right choice. Depending on machine model, we may have constant functions that completely ignore their input, i.e., they output their constant even if their input is missing. In that case we want to say that the composition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">const_c</span> <span class=\"bp\">∘</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"n\">const_c</span>\n</code></pre></div>\n<p>And there is another constant function <code>const_c'</code> that first looks at its input, satisfying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">const_c'</span> <span class=\"bp\">∘</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>This distinction, if I understand <code>&gt;&gt;=</code> right, you can't make with just <code>&gt;&gt;=</code>?</p>",
        "id": 269945191,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643564050
    },
    {
        "content": "<p>This might not seem like a big deal since constant functions are computable... but the issue also arises for function f(x,y,z) such that for some inputs x_0, f(x_0,y,z) is a function of y only and ignores z, while for other inputs x_1, f(x_1,y,z) depends on z as well.</p>",
        "id": 269946969,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643566146
    },
    {
        "content": "<p>This leads to domain theory, since for a more complicated type <code>T</code> the possible partial values may be more than just <code>option T</code></p>",
        "id": 269948148,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643567581
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> too bad I lost/sold my copy of Stoltenberg-Hansen's book</p>",
        "id": 269948843,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643568400
    },
    {
        "content": "<p>The use of <code>part</code> is for computational models like turing machines or partial recursive functions where the input is always given explicitly, and the function represents the transformation from input to (maybe halting and) output. In order to have a function like <code>part ℕ -&gt; part ℕ</code> (which you need to express functions like your ignoring-input constant function), the input has to be something more complicated than just a value, it has to come with some computational properties of its own such that \"evaluation\" to a value is a nontrivial operation that can possibly fail to halt. In a partial recursive function you would probably represent such an input as \"code-as-data\", i.e. a <code>code</code> that can be evaluated to get a value, in which case your (higher order) program has a type like <code>code -&gt; part ℕ</code> instead</p>",
        "id": 269955787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643575041
    },
    {
        "content": "<p>An example where the input need not be given explicitly to a Turing machine is when you prove that the composition of two partial recursive functions is partial recursive. Then in the computation of f(g(x)) we may wait for the computation of g(x) to finish before looking at it as input to f. And if f is a constant function, we may (depending on the TM model used) choose to not look at the output tape containing g(x) at all.</p>",
        "id": 269956394,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643575716
    },
    {
        "content": "<blockquote>\n<p>too bad I lost/sold my copy of Stoltenberg-Hansen's book</p>\n</blockquote>\n<p>You're talking about \"Mathematical Theory of Domains\"? Why don't you just download it from the internet?</p>",
        "id": 269976861,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643601000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> I only get \"We recognised you are associated with one or more institutions that don’t have access to this content.\"</p>",
        "id": 269977935,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643602220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347475\">@Bjørn Kjos-Hanssen</span> I can give you PDF for free if you want.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I remember we were discussing about this and the conclusion was that we are not allowed to post proprietary PDFs to public streams. Are we allowed to send PDFs in private messages?</p>",
        "id": 269978288,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643602695
    },
    {
        "content": "<p>that should be fine, the rules there are the same as for e.g. emailing it</p>",
        "id": 269978842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643603422
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> Haven't looked at this for decades but I guess <code>option ℕ</code> is the same as the flat cpo ℕ_⊥ in example 1.11...</p>",
        "id": 269983858,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643609095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347475\">Bjørn Kjos-Hanssen</span> <a href=\"#narrow/stream/113489-new-members/topic/Inverse.20of.20option.2Esome/near/269956394\">said</a>:</p>\n<blockquote>\n<p>An example where the input need not be given explicitly to a Turing machine is when you prove that the composition of two partial recursive functions is partial recursive. Then in the computation of f(g(x)) we may wait for the computation of g(x) to finish before looking at it as input to f. And if f is a constant function, we may (depending on the TM model used) choose to not look at the output tape containing g(x) at all.</p>\n</blockquote>\n<p>I'm not sure I follow. The composition of partial functions is defined using <code>&gt;&gt;=</code> so it seems not to hit any issues with f skipping g</p>",
        "id": 269984863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643610070
    },
    {
        "content": "<p>That is, a partial recursive function is by definition an element of <code>nat -&gt; part nat</code>, and composition of partial recursive functions <code>f</code> and <code>g</code> is by definition <code>\\lam x, g x &gt;&gt;= f</code>, so the nature of the question has already excluded the possibility of <code>g</code> not getting evaluated</p>",
        "id": 269985046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643610251
    },
    {
        "content": "<p>What I mean is that if we use option types, we are permitted to have <code>f none = 5</code> say... and that may be desirable for the constant function 5. But with <code>part</code> we cannot have such behavior, right?</p>",
        "id": 270094444,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643658937
    },
    {
        "content": "<p>Why do you think we cannot have such behavior with <code>part</code>? The only difference between <code>option</code> and <code>part</code> is that determining whether an <code>option</code> is <code>none</code> or <code>some</code> is always decidable. Note that <code>(&gt;&gt;=)</code> is a monadic operator. It \"lifts\" operations on values to operations on option/part types. But you don't need to use it to compose functions, you can work with monads directly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">option.some</span> <span class=\"mi\">5</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"n\">option.none</span> <span class=\"bp\">=</span> <span class=\"n\">option.none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f₁</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f₂</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">option.some</span> <span class=\"mi\">5</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f₂</span> <span class=\"n\">option.none</span> <span class=\"bp\">=</span> <span class=\"n\">option.some</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g₁</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">part</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">part</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">part.some</span> <span class=\"mi\">5</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">g₁</span> <span class=\"n\">part.none</span> <span class=\"bp\">=</span> <span class=\"n\">part.none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g₁</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g₂</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">part</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">part</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">part.some</span> <span class=\"mi\">5</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">g₂</span> <span class=\"n\">part.none</span> <span class=\"bp\">=</span> <span class=\"n\">part.some</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 270102060,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643662031
    },
    {
        "content": "<p>Whether it is desirable depends on your model of computable functions, I guess.</p>",
        "id": 270102076,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643662042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347475\">Bjørn Kjos-Hanssen</span> <a href=\"#narrow/stream/113489-new-members/topic/Inverse.20of.20option.2Esome/near/270094444\">said</a>:</p>\n<blockquote>\n<p>What I mean is that if we use option types, we are permitted to have <code>f none = 5</code> say... and that may be desirable for the constant function 5. But with <code>part</code> we cannot have such behavior, right?</p>\n</blockquote>\n<p>The constant function <code>5</code> would be defined as <code>f := \\lam _, part.some 5</code>. This is a function <code>nat -&gt; part nat</code>, which always ignores its argument and returns <code>5</code>. If we compose this with the function <code>g := \\lam _, part.none</code>representing a computation that always diverges, we get <code>(g x &gt;&gt;= f) = (none &gt;&gt;= f) = none</code>, that is, the computation diverges, because we evaluate <code>g</code> first and pass the result to <code>f</code>, and since <code>g</code> never returns <code>f</code> never gets to run.</p>\n<p>As Patrick says this has nothing to do with <code>part</code> vs <code>option</code>. You can say exactly the same thing if you replace <code>part</code> with <code>option</code> in the above. The key point is that partial functions have the type <code>nat -&gt; part nat</code> and not <code>part nat -&gt; part nat</code>. Functions in this latter form <em>can</em> choose not to evaluate their arguments, and they also compose (by regular function composition), but they aren't partial functions in the traditional sense.</p>",
        "id": 270108109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643664586
    },
    {
        "content": "<p>They can also do weird things like be defined exactly when their input isn't defined.</p>",
        "id": 270109774,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643665307
    },
    {
        "content": "<p>That is actually one difference between <code>part</code> and <code>option</code>. With <code>part</code>, you can't define a computable function that is not monotonic w.r.t the <code>part</code> order, but with <code>option</code> you can</p>",
        "id": 270111245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643666004
    },
    {
        "content": "<p>You can still do something like <code>f x := { dom := not x.dom, get := \\lam _, 1 }</code></p>",
        "id": 270111607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643666187
    },
    {
        "content": "<p>ah right, I take it back. You can maybe salvage a statement like that if you stick to the combinators but that's a much weaker statement</p>",
        "id": 270112043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643666401
    },
    {
        "content": "<p>there is a subset of <code>part</code> consisting of <code>dom</code> predicates that are Sigma_1, which is more relevant to use in partial computable functions, which should have the expected property, but defining this correctly in lean is tricky</p>",
        "id": 270112391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643666501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Inverse.20of.20option.2Esome/near/270111245\">said</a>:</p>\n<blockquote>\n<p>That is actually one difference between <code>part</code> and <code>option</code>. With <code>part</code>, you can't define a computable function that is not monotonic w.r.t the <code>part</code> order, but with <code>option</code> you can</p>\n</blockquote>\n<p>OK great, this makes me want to use <code>part</code> after all... (even if there's a caveat as <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> said)</p>",
        "id": 270117566,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1643668396
    }
]