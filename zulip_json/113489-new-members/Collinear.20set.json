[
    {
        "content": "<p>Hi !<br>\nI'm trying to write the property \\forall x, collinear {x, f(x)} -&gt; f is an homothy but I did not manage to define the set {x, f(x)}<br>\nFor the moment I have: (∀ x : E, collinear {x, f x} )-&gt; ∃ c : E, ∃ s : R, (affine_map.homothety c s) = f<br>\nWhat should I do ?<br>\nThanks !</p>",
        "id": 241066535,
        "sender_full_name": "Maxime Darrin",
        "timestamp": 1622577306
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 241067448,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622577711
    },
    {
        "content": "<p>It's useful to provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> so we can see what the variable names are supposed to represent.  Anyway, I tried to guess; is this what you want to say?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.finite_dimensional</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">affine</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">affine_space</span> <span class=\"n\">V</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ᵃ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">collinear</span> <span class=\"n\">k</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">×</span> <span class=\"n\">E</span> <span class=\"bp\">|</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">affine_map.homothety</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 241068405,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1622578144
    },
    {
        "content": "<p>I suppose what was meant is more like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.finite_dimensional</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">affine</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">affine_space</span> <span class=\"n\">V</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→ᵃ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">collinear</span> <span class=\"n\">k</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">affine_map.homothety</span> <span class=\"n\">c</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 241069036,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622578442
    },
    {
        "content": "<p>Does homotethy allow for a projection?  I would not call the map R^2 --&gt; R^2 given by (x,y) |-&gt; (x,0) a homotethy, though I think it satisfies the collinearity condition, right?</p>",
        "id": 241069184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622578531
    },
    {
        "content": "<p>Yeah homothethy means scaling by a nonzero scalar (after choosing an origin in the affine space)</p>",
        "id": 241069283,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622578563
    },
    {
        "content": "<p>at least that's the definition I have in mind...</p>",
        "id": 241069330,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622578594
    },
    {
        "content": "<p>Me too, although I was not sure about non-zero.  If so, then any linear map with a nontrivial kernel might fail the statement...</p>",
        "id": 241069387,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622578641
    },
    {
        "content": "<p>but anyway, the example of the projection breaks this</p>",
        "id": 241069422,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622578666
    },
    {
        "content": "<p>if you also assume <code>f</code> is bijective then it should be okay</p>",
        "id": 241069572,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622578736
    },
    {
        "content": "<p>I wonder about Q(✓2)^2 mapping to itself via a Galois conjugation on each component.  Although I am on mobile and do not have paper to write either!</p>",
        "id": 241069991,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622578935
    },
    {
        "content": "<p>Wait, aren't two points always colinear?</p>",
        "id": 241070702,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622579287
    },
    {
        "content": "<p>They are with the usual math definition</p>",
        "id": 241070790,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622579325
    },
    {
        "content": "<p>We even have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/collinear_insert_singleton\">docs#collinear_insert_singleton</a></p>",
        "id": 241071064,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622579453
    },
    {
        "content": "<p>Ah but maybe Heather's formulation is correct</p>",
        "id": 241071257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622579537
    },
    {
        "content": "<p>No, if f is the identity and E has dimension at least 2, then f is clearly a homothethy but the set in Heather's code is not colinear.</p>",
        "id": 241072833,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622580300
    },
    {
        "content": "<p>I've not seen <span aria-label=\"check mark\" class=\"emoji emoji-2714\" role=\"img\" title=\"check mark\">:check_mark:</span>️ used as square root before. Mobile input limitations make communication weird...</p>",
        "id": 241079754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622583794
    },
    {
        "content": "<p>Ah, to be honest, I had not looked at the code, I simply assumed that the question was about a function mapping collinear sets to collinear sets.</p>\n<p>Eric, when I saw the \"square root symbol\", I thought \"it shows that people deciding which keys are easily accessible have a maths background\". <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 241104398,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622607627
    },
    {
        "content": "<p>Thank you! and sorry for the formating I'll make sure to do it right next time</p>",
        "id": 241623993,
        "sender_full_name": "Maxime Darrin",
        "timestamp": 1622881686
    }
]