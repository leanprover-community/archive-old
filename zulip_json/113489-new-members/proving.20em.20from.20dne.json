[
    {
        "content": "<p>Hi, first question here. In section 3.5 Classical Logic of Theorem Proving in Lean, we're asked to prove excluded middle (em) from (double negative) dne. I'm not sure if I get what we're supposed to show. Please check my answer, particularly I am not sure if my hypothesis should be     h: (not not p -&gt; p)  or the simpler one (that seems to work)     h: not not p.  Thanks</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hnp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">notp</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">))</span> <span class=\"o\">:</span>  <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span>  <span class=\"n\">hpp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dne</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hpp</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">variable</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">notp</span> <span class=\"n\">k</span>         <span class=\"c1\">-- notp k : p ∨ ¬p</span>\n</pre></div>",
        "id": 167519382,
        "sender_full_name": "Luis Berlioz",
        "timestamp": 1559852820
    },
    {
        "content": "<p>You can either prove <code>notp</code> using <code>by_contradiction</code>, or you can prove </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">notp</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">dne</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>without referencing any classical axioms</p>",
        "id": 167519595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559852981
    },
    {
        "content": "<p>Yes, I would imagine that you're not supposed to be assuming any classical stuff here or else you can just prove excluded middle from nothing.</p>",
        "id": 167519677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559853023
    },
    {
        "content": "<p><code>theorem notp {p: Prop} (dne: ∀ q, ¬ ¬ q → q) :  p ∨ ¬ p := sorry</code></p>\n<p>I think it's a bit less confusing if you use different letters for the free and bound variables, but of course it makes no difference to Lean.</p>",
        "id": 167519746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559853109
    },
    {
        "content": "<p>I found these exercises so weird because as a mathematician I sort-of don't care how to do them but it was still irritating struggling to do them.</p>",
        "id": 167521362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559854192
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>I think it&#39;s a bit less confusing if you use different letters for the free and bound variables, but of course it makes no difference to Lean.\n</pre></div>\n\n\n<p>good point. Thanks</p>",
        "id": 167521444,
        "sender_full_name": "Luis Berlioz",
        "timestamp": 1559854221
    },
    {
        "content": "<p>Check out the bottom of <a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/Logic.html#lab202\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu/lf-current/Logic.html#lab202\">https://softwarefoundations.cis.upenn.edu/lf-current/Logic.html#lab202</a></p>",
        "id": 167521752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559854438
    },
    {
        "content": "<blockquote>\n<p>You can either prove <code>notp</code> using <code>by_contradiction</code>, or you can prove </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">notp</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">dne</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>without referencing any classical axioms</p>\n</blockquote>\n<p>But using <code>by_contradiction</code> is the same as using <code>em</code> again which defeats the purpose of the exercise. Or does it <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ?</p>",
        "id": 167521834,
        "sender_full_name": "Luis Berlioz",
        "timestamp": 1559854482
    },
    {
        "content": "<p>Proving that excluded middle implies any of those statements is really easy --  excluded middle just lets you break into cases. But proving that each of those statements implies excluded middle can be challenging</p>",
        "id": 167521838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559854489
    },
    {
        "content": "<p>yes, but I don't think I can use <code>by_cases</code> or <code>by_contradiction</code> in this problem</p>",
        "id": 167522006,
        "sender_full_name": "Luis Berlioz",
        "timestamp": 1559854585
    },
    {
        "content": "<p>You're allowed to assume <code>dne</code> in this theorem, so you're allowed to use <code>by_contradiction</code>. You just can't use <code>classical.em</code></p>",
        "id": 167522088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559854623
    },
    {
        "content": "<p><code>apply dne, intro h</code> is the same as <code>by_contradiction</code>, in fact the former is a bit better because it doesn't need decidability of the goal</p>",
        "id": 167522170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559854683
    },
    {
        "content": "<blockquote>\n<p>in fact the former is a bit better because it doesn't need decidability of the goal</p>\n</blockquote>\n<p>Look at what you've become!</p>",
        "id": 167522280,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1559854736
    },
    {
        "content": "<p>ha ha, I will get back to glueing sheaves :-/</p>",
        "id": 167522311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559854762
    },
    {
        "content": "<p><span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> ok, thanks a lot!</p>",
        "id": 167522389,
        "sender_full_name": "Luis Berlioz",
        "timestamp": 1559854808
    }
]