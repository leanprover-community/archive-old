[
    {
        "content": "<p>Hey, in the following, I define <code>Fin</code> types as in the HoTT book, and the obvious order on those types by pattern matching.<br>\nThis works well, and I can prove properties of that order (transitivity and so on). <br>\nI tried doing the same for a different kind of order (<code>sc</code> in the MWE) and the same strategy of pattern matching for proofs doesn't work.<br>\nI would venture it's the pattern matching reaching its limit, but maybe I'm doing something else wrong. Any idea?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fin'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">empty</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Fin'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">unit</span>\n\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">ι</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sum.inl</span>\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">τ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sum.inr</span> <span class=\"n\">unit.star</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">Fin'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span>    <span class=\"n\">_</span>    <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>    <span class=\"n\">_</span>     <span class=\"n\">_</span>    <span class=\"o\">:=</span> <span class=\"n\">false</span>  <span class=\"c1\">-- don't need it</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `successor` relation -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sc</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">Fin'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sc</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"n\">_</span>     <span class=\"n\">_</span>    <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>    <span class=\"n\">_</span>     <span class=\"n\">_</span>    <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"c1\">-- don't need it</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;ₛ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">sc</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt.antirefl</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lt.antirefl</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">lt</span><span class=\"o\">,</span> <span class=\"n\">lt</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lt.trans</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lt.trans</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span>   <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span>    <span class=\"n\">_</span>    <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">t.elim</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span>    <span class=\"n\">_</span>     <span class=\"n\">_</span>    <span class=\"n\">s</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">s.elim</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sc.lt</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin'</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;ₛ</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">)</span>   <span class=\"n\">_</span>  <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">h</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">sc.lt</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,}</span> <span class=\"c1\">--@sc.lt n x y h -- Error here</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"n\">_</span>     <span class=\"n\">_</span>    <span class=\"n\">h</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,}</span>                                                      <span class=\"c1\">-- Error here</span>\n</code></pre></div>",
        "id": 301649669,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1664545360
    },
    {
        "content": "<p>I believe there's a typo in the first line of the definition of <code>sc</code>, 2nd argument</p>",
        "id": 301766170,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664597038
    },
    {
        "content": "<p>you wrote <code>ι τ</code> but I think you meant to write <code>ι x</code></p>",
        "id": 301766225,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664597076
    },
    {
        "content": "<p>correcting that typo appears to fix the first error</p>",
        "id": 301766317,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664597169
    },
    {
        "content": "<p>I don't think it's a typo: I see <code>\\iota : Fin' n -&gt; Fin' (n+1)</code> as the initial segment: then the top element of <code>Fin' n</code> has as successor the top element of <code>Fin' (n+1)</code>.</p>",
        "id": 301771935,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1664603496
    },
    {
        "content": "<p>But this actually means that the matching goes one level deeper, which might be the reason things don't work? By the way, when <code>#print</code>ing either <code>lt</code> or <code>sc</code>, I get pretty ugly terms involving <code>eq.rec</code>, is that to be expected?</p>",
        "id": 301772028,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1664603565
    }
]