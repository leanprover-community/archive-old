[
    {
        "content": "<p>I have found that the <code>ring</code> tactic does not fully work inside <code>exp</code>. I see that it manages to do something so I wonder if it is possible to improve it to solve this kind of goals?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span> <span class=\"n\">exp</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"o\">):=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n   <span class=\"c1\">-- ⊢ exp ((2 * t * z + 2 * t) * I * ↑pi) = exp ((2 * z + 2) * t * I * ↑pi)</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204235898,
        "sender_full_name": "Eloi",
        "timestamp": 1595007703
    },
    {
        "content": "<p>I think the easy answer is <code>congr' 1, ring</code></p>",
        "id": 204236048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595007755
    },
    {
        "content": "<p>The hard answer would explain why it doesn't work right away...</p>",
        "id": 204236174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595007810
    },
    {
        "content": "<p>thanks, for now it is enough</p>",
        "id": 204236318,
        "sender_full_name": "Eloi",
        "timestamp": 1595007873
    },
    {
        "content": "<p><code>congr</code> strips away as much as possible from two sides of an <code>=</code>. With <code>congr' n</code> you can tell it to take <code>n</code> steps in stripping things away</p>",
        "id": 204236436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595007939
    },
    {
        "content": "<p>My guess is that ring picks different variable orderings when trying to normalize the LHS and RHS so they don't end up matching, does that sound plausible to a ring expert ?</p>",
        "id": 204236597,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595008035
    }
]