[
    {
        "content": "<p>I don't understand what's going on in the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.tensor_product.ring</span> <span class=\"c1\">--or infer_instance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">ℚ</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.tensor_product.ring</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>The first instance works fine, but the second one gives me the error </p>\n<div class=\"codehilite\" data-code-language=\"type\"><pre><span></span><code>  algebra.tensor_product.tensor_product.ring\nhas type\n  ring (?m_3 ⊗ ?m_4) : Type (max ? ?)\nbut is expected to have type\n  ring (ℚ ⊗ ℝ) : Type\n</code></pre></div>\n<p>However both <code>(K ⊗[ℚ] ℝ)</code> and <code>(ℚ ⊗[ℚ] ℝ)</code> have type <code>Type</code>.  So why does the second one fail? I guess it has something to do with<code>ℚ</code> playing two different roles, but I don't see why that causes a problem.</p>",
        "id": 264343993,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1639074017
    },
    {
        "content": "<p>Is lean able to infer a Q algebra structure on Q? (I hope it can...)</p>",
        "id": 264345700,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639074676
    },
    {
        "content": "<p>If I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">ℚ</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">algebra.tensor_product.tensor_product.ring</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then I am left with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">semiring.to_module</span> <span class=\"bp\">=</span> <span class=\"n\">algebra.to_module</span>\n</code></pre></div>",
        "id": 264346141,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639074841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20error.20tensor.20product/near/264345700\">said</a>:</p>\n<blockquote>\n<p>Is lean able to infer a Q algebra structure on Q? (I hope it can...)</p>\n</blockquote>\n<p>Yes, it can.</p>",
        "id": 264346353,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1639074911
    },
    {
        "content": "<p>so it seems like there is some disagreement about the <code>module ℚ ℚ</code> structure, however, from looking at the definitions I don't understand why: looks like both should be given by <code>x \\bub y = x * y</code></p>",
        "id": 264347216,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639075215
    },
    {
        "content": "<p><code>ext, congr</code> gets the goal <code>r = ⇑(rat.cast_hom ℚ) r</code>, which doesn't seem to be true by refl :(</p>",
        "id": 264347412,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639075313
    },
    {
        "content": "<p>Ah I bet the algebra structure is obtained from some general instance for characteristic zero fields, and the module structure comes from the obvious module structure of a ring on itself</p>",
        "id": 264347584,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639075384
    },
    {
        "content": "<p>oh yes you're right, <code>local attribute [instance, priority 10000] algebra.id</code> fixes it</p>",
        "id": 264347777,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639075473
    },
    {
        "content": "<p>and otherwise it's finding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.algebra_rat\">docs#rat.algebra_rat</a></p>",
        "id": 264347893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639075523
    },
    {
        "content": "<p>Shouldn't that instance have some lower priority?</p>",
        "id": 264347932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639075545
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 264347940,
        "sender_full_name": "María Inés de Frutos Fernández",
        "timestamp": 1639075551
    },
    {
        "content": "<p>FWIW, these <code>has type ?m, expected X</code> errors usually mean that Lean already tried the obvious <code>?m = X</code> but it failed for some reason generally having to do with type classes</p>",
        "id": 264348902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639075951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20error.20tensor.20product/near/264348902\">said</a>:</p>\n<blockquote>\n<p>FWIW, these <code>has type ?m, expected X</code> errors usually mean that Lean already tried the obvious <code>?m = X</code> but it failed for some reason generally having to do with type classes</p>\n</blockquote>\n<p>The same error can sometimes pop up because of universe issues, but you can diagnose those by using <code>set_option pp.universes true</code>.</p>",
        "id": 264353090,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639077759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20error.20tensor.20product/near/264347932\">said</a>:</p>\n<blockquote>\n<p>Shouldn't that instance have some lower priority?</p>\n</blockquote>\n<p>That doesn't really make the problem go away, it just makes it appear less often</p>",
        "id": 264353349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639077888
    },
    {
        "content": "<p>There has been discussion in the past about how to fix the qsmul diamond in the same way we fixed nsmul and zsmul, but it never got implemented</p>",
        "id": 264353396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639077915
    },
    {
        "content": "<p>Problems appearing less often is good though, right? Like, we already have a linter for catch-all instances don't we?</p>",
        "id": 264353572,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639078000
    },
    {
        "content": "<p>I assume it doesn't fire on this instance because it has multiple parameters and one of them is not a variable?</p>",
        "id": 264353829,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639078140
    },
    {
        "content": "<p>That linter is there to catch performance issues, not surprising instances</p>",
        "id": 264356450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639079352
    },
    {
        "content": "<p>You still run into the same typeclass diamond if you have a lemma about a general  <code>[division_ring R] [char_zero R]</code> that uses the \"obvious\" ℚ-action, then specialize it to <code>R=ℚ</code>.</p>",
        "id": 264356786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639079501
    },
    {
        "content": "<p>The two solutions are either:</p>\n<ul>\n<li>Add <code>[module ℚ R]</code> to all such lemmas (like we do with <code>decidable</code>) so that we never state anything about a specific instance.</li>\n<li>Make the diamond defeq by adding data to division_ring (like we do with <code>add_monoid.nsmul</code>)</li>\n</ul>",
        "id": 264357022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639079596
    },
    {
        "content": "<ul>\n<li>Delete the instance</li>\n</ul>",
        "id": 264362130,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639082037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20error.20tensor.20product/near/264356450\">said</a>:</p>\n<blockquote>\n<p>That linter is there to catch performance issues, not surprising instances</p>\n</blockquote>\n<p>Hmm, that itself comes as a surprise to me.</p>",
        "id": 264362235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639082079
    },
    {
        "content": "<p>Yes, deleting or hiding in a locale would be part of the first bullet most likely</p>",
        "id": 264362847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639082336
    },
    {
        "content": "<p>The priority linter is there to force a breadth-first search, and stop lean trying to solve <code>semiring R</code> by looking for <code>field R</code> before having exhausted all the direct instances</p>",
        "id": 264363008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639082409
    }
]