[
    {
        "content": "<p>Oh wow, I did not know you can do simp [Nat.succ] to remove the succ from both sides!</p>",
        "id": 278747316,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649794470
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subtract_to_equation</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">acbc</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">pc</span> <span class=\"n\">inner</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">pc</span><span class=\"o\">),</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">pc</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">acbc</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">acbc</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">acbc</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"n\">acbc</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I did it!</p>",
        "id": 278747812,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649794757
    },
    {
        "content": "<p>Thanks for the help</p>",
        "id": 278747838,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649794767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"486803\">Matei Adriel</span> has marked this topic as resolved.</p>",
        "id": 278747988,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649794837
    },
    {
        "content": "<p>Pushing the recursive idea further, how to make this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subtract_to_equation</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">acbc</span>\n  <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">acbc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">pc</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">pc</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">pc</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">subtract_to_equation</span>\n    <span class=\"n\">injection</span> <span class=\"n\">acbc</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">h</span>\n<span class=\"c1\">-- fail to show termination for</span>\n<span class=\"c1\">--   subtract_to_equation</span>\n<span class=\"c1\">-- with errors</span>\n<span class=\"c1\">-- argument #3 was not used for structural recursion</span>\n<span class=\"c1\">--   failed to eliminate recursive application</span>\n<span class=\"c1\">--     subtract_to_equation</span>\n\n<span class=\"c1\">-- structural recursion cannot be used</span>\n\n<span class=\"c1\">-- failed to prove termination, use `termination_by` to specify a well-founded relation</span>\n</code></pre></div>",
        "id": 278749693,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649795695
    },
    {
        "content": "<p>Note that in lean3 the recursion only works if you use the equation compiler</p>",
        "id": 278753727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649797844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I managed to bash something together:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subtract_to_equation</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">acbc</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">acbc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">pc</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">pc</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_self</span>\n    <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">pc</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">pc</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">subtract_to_equation</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"n\">injection</span> <span class=\"n\">acbc</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">h</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 278753741,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649797854
    },
    {
        "content": "<p>I feel like I <em>really</em> need to study termination in Lean 4. Thanks a lot Kyle!!</p>",
        "id": 278754010,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649798007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I guess what <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> said applies somewhat to Lean 4. If you use pattern matching for <code>c</code> you can simplify this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subtract_to_equation</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">acbc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acbc</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pc</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">acbc</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">pc</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">pc</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">subtract_to_equation</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">acbc</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">acbc</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">acbc</span>\n</code></pre></div>",
        "id": 278754256,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649798155
    },
    {
        "content": "<p>How does that apply to <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/combinatorics/simple_graph/connectivity.lean#L397\">the example</a> you mentioned earlier?</p>",
        "id": 278754405,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649798246
    },
    {
        "content": "<p>The hint that it's doing induction on a <code>walk</code> is the pattern matching at the beginning (<code>| u v (cons h p') d hd := begin ...</code>)</p>",
        "id": 278754588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649798301
    },
    {
        "content": "<p>In Lean 3, you <em>have</em> to use the equation compiler if you want to do a recursive call. Lean 4 is more flexible here, but it's up to you to help it prove termination I guess.</p>",
        "id": 278754798,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649798364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Proving.20basic.20nat.20arithmetic.20equality/near/278754588\">said</a>:</p>\n<blockquote>\n<p>The hint that it's doing induction on a <code>walk</code> is the pattern matching at the beginning (<code>| u v (cons h p') d hd := begin ...</code>)</p>\n</blockquote>\n<p>I see now. I could barely notice the <code>|</code> for pattern matching</p>",
        "id": 278754949,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649798447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Proving.20basic.20nat.20arithmetic.20equality/near/278754010\">said</a>:</p>\n<blockquote>\n<p>I feel like I <em>really</em> need to study termination in Lean 4.</p>\n</blockquote>\n<p>Me too -- the only technique I know right now is <code>termination_by</code> along with choosing a good size function. Then I add all the <code>have</code> statements needed to satisfy the error messages that pop up.</p>",
        "id": 278755238,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649798618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> has marked this topic as unresolved.</p>",
        "id": 278756634,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649799283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> has marked this topic as resolved.</p>",
        "id": 278756657,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649799297
    },
    {
        "content": "<p>Here's another example using a different function: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Array/Basic.lean#L458\">https://github.com/leanprover/lean4/blob/master/src/Init/Data/Array/Basic.lean#L458</a></p>",
        "id": 278756669,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649799303
    }
]