[
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/laurent-expansion\">branch#pechersky/laurent-expansion</a>, I can state the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ratfunc</span> <span class=\"n\">power_series</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mv_power_series.constant_coeff_mk</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_power_series.constant_coeff</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">power_series.constant_coeff_mk</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">power_series.constant_coeff</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">power_series.mk</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ratfunc</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">laurent_series</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">-</span> <span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">laurent_series</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">ne_of_apply_ne</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">laurent_series</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">x.coeff</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_coe</span><span class=\"o\">,</span> <span class=\"n\">power_series.coeff_coe</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">algebra_map_X</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">map_one</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ratfunc.C</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">←</span><span class=\"n\">algebra_map_C</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">coe_div</span><span class=\"o\">,</span>\n      <span class=\"n\">div_eq_iff</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">coe_coe</span><span class=\"o\">,</span> <span class=\"n\">coe_coe</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">coe_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">polynomial.coe_add</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">polynomial.coe_X</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">map_neg</span><span class=\"o\">,</span> <span class=\"n\">polynomial.coe_C</span><span class=\"o\">],</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_coe</span><span class=\"o\">,</span> <span class=\"n\">coeff_coe</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">],</span>\n  <span class=\"n\">induction</span> <span class=\"n\">i</span> <span class=\"n\">using</span> <span class=\"n\">int.induction_on</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">IH</span> <span class=\"n\">i</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int.coe_nat_add_one_out</span><span class=\"o\">,</span> <span class=\"n\">int.nat_abs_of_nat</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">int.coe_nat_succ_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_lt</span><span class=\"o\">,</span>\n        <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">int.coe_nat_succ_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">coeff_succ_mul_X</span><span class=\"o\">,</span> <span class=\"n\">coeff_mul_C</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_X</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_inj'</span><span class=\"o\">,</span> <span class=\"n\">ite_add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">int.neg_succ_of_nat_coe'</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"n\">int.neg_succ_lt_zero</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269032537,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642963232
    },
    {
        "content": "<p>which is on the way to being able to neatly state the following claims:<br>\n<a href=\"/user_uploads/3121/GgwCE88siwWhwRjwcwxEFmax/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GgwCE88siwWhwRjwcwxEFmax/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/GgwCE88siwWhwRjwcwxEFmax/image.png\"></a></div>",
        "id": 269032545,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642963247
    },
    {
        "content": "<p>Are there any suggestions over what API should be built to make this smoother?</p>",
        "id": 269032551,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642963262
    },
    {
        "content": "<p>Laurent series are a DVR and evaluation at 0 corresponds to the projection onto the residue field. We should probably build on the API that relates general nonsense stuff about DVRs to explicit formulas using Laurent series. (That's vague, I know...)</p>",
        "id": 269032756,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642963560
    }
]