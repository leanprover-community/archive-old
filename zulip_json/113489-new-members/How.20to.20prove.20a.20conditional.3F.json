[
    {
        "content": "<p>Hello. I am a noobie mathematician and an even bigger noobie with Lean. I've managed to do all the exercises in the 'Propositions and Proofs' chapter in 'Proving Theorems with Lean 4', apart from the ones that have conditionals in their conclusions. For example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">hpqr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">byCases</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hqr</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">hpqr</span> <span class=\"n\">hp</span>\n      <span class=\"n\">Or.elim</span> <span class=\"n\">hqr</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"c\">/-</span><span class=\"cm\"> I wish I could use \"hp hq\" here but I seem to be confused about how lambda works.-/</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"c\">/-</span><span class=\"cm\"> \"hp hr\" here I feel like should mean assuming p we can prove q ∨ r, and if r is true then p → r is true. Then I could use Or.intro to prove the final statement.-/</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is my current best attempt at one of them. Lambda's are explained as a kind of \"conditional introduction\" in the text, and as with the other introduction rules I would think you could then prove a conditional with it, but that seems not to be the case, or at least I'm thinking about it wrongly.  Could I have at least some hint to what I should be doing to complete these? <br>\nI'm also having a very tough time figuring out how to prove the simple <code>¬(p → q) → p</code>. <code>¬(p → q)</code> is equivalent to <code>(p → q) → False</code>, and I certainly can see informally why <code>¬(p → q) → p</code> is the case, <code>¬(p → q)</code> being true means that p is true while q is false, so therefore p is true, but I am having a hard time figuring out how to articulate this notion of conditionals in lean. What am I missing? <br>\nThanks for your time.</p>",
        "id": 322422412,
        "sender_full_name": "debord",
        "timestamp": 1674184955
    },
    {
        "content": "<p>Can you prove the following examples?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">byCases</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Solutions</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">hnpq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">byCases</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span>\n      <span class=\"n\">absurd</span> <span class=\"n\">hpq</span> <span class=\"n\">hnpq</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 322427735,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1674189913
    },
    {
        "content": "<p>Okay I think I'm starting to see it now then. The way to do what I'm trying to do is to make a proof that the assumption is false and then use absurd to prove any arbitrary q including whatever my goal is. This logic was pretty shocking to me but I suppose it is a natural consequence of the principle of explosion. I need more practice to get used to it, thank you for the demonstration Bulhwi.</p>",
        "id": 322435639,
        "sender_full_name": "debord",
        "timestamp": 1674195676
    }
]