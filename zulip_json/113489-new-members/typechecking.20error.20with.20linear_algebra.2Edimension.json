[
    {
        "content": "<p>I have two vector spaces and can take their dimensions successfully, but the statement that their dimensions are equal does not seem to parse.  Any idea what I am doing wrong?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">dimension</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- these both work</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span> <span class=\"o\">:=</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span> <span class=\"o\">:=</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">𝕜</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- &quot;don&#39;t know how to synthesize placeholder&quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜</span> <span class=\"bp\">=</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">𝕜</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 200273935,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591728734
    },
    {
        "content": "<p>They live in different universes</p>",
        "id": 200274040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591728793
    },
    {
        "content": "<p>Does it work if you replace <code>Type*</code> with <code>Type u</code>?</p>",
        "id": 200274041,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591728793
    },
    {
        "content": "<p>If you really want that, then <code>cardinal.lift</code> (I think) will allow you to lift the cardinal to a higher universe.</p>",
        "id": 200274100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591728837
    },
    {
        "content": "<p>Aha, today is the day I find out what a universe is.</p>",
        "id": 200274160,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591728857
    },
    {
        "content": "<p>Sébastien, which should have <code>Type u</code>?  <code>𝕜</code> or <code>E</code>?</p>",
        "id": 200274230,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591728906
    },
    {
        "content": "<p>Both</p>",
        "id": 200274237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591728910
    },
    {
        "content": "<p>So that they are in the same universe <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 200274255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591728919
    },
    {
        "content": "<p><code>u</code> is a universe variable</p>",
        "id": 200274280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591728935
    },
    {
        "content": "<p>And <code>*</code> creates a fresh one.</p>",
        "id": 200274293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591728944
    },
    {
        "content": "<p>Great!  Yes, it works now.  Thank you!</p>",
        "id": 200274364,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591728970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Does that mean that you found out what a universe is ? (-;</p>",
        "id": 200274635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591729103
    },
    {
        "content": "<p>Well, maybe not.  There must be one or two more subtleties, right? :)</p>",
        "id": 200274702,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591729141
    },
    {
        "content": "<p>Lol, not that many, I think</p>",
        "id": 200274727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591729155
    },
    {
        "content": "<p>It's just that <code>Type = Type 0</code> and <code>Type n : Type (n+1)</code>.</p>",
        "id": 200274753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591729173
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">u</span></span></span></span> is in some weird set that you can't reason about, I guess that's an interesting thing</p>",
        "id": 200274783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591729189
    },
    {
        "content": "<p>This circumvents Russel's paradox</p>",
        "id": 200274786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591729192
    },
    {
        "content": "<p>Rule number 17 in Lean: if something doesn't work and you don't understand why, try replacing all <code>Type*</code> by <code>Type</code>.  (I'll let someone else invent the first 16 rules).</p>",
        "id": 200274848,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591729204
    },
    {
        "content": "<p>You can't have <code>Type : Type</code>. (Although some theorem provers act as if you can.)</p>",
        "id": 200274872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591729218
    },
    {
        "content": "<p>Johan, could you give me the full code snippet using <code>cardinal.lift</code>?</p>",
        "id": 200274877,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591729222
    },
    {
        "content": "<p><code>Type</code>?? You mean just do normal mathematics??</p>",
        "id": 200274881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591729222
    },
    {
        "content": "<p>Yes, <code>Type</code>, the  one we know and like so much.</p>",
        "id": 200274950,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591729263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/typechecking.20error.20with.20linear_algebra.2Edimension/near/200274848\">said</a>:</p>\n<blockquote>\n<p>Rule number 17 in Lean: if something doesn't work and you don't understand why, try replacing all <code>Type*</code> by <code>Type</code>.  (I'll let someone else invent the first 16 rules).</p>\n</blockquote>\n<p>I did not realise that <code>Type</code> can be used without an argument!  Why does <code>mathlib</code> always give it an argument (<code>*</code> or <code>u</code>), then?</p>",
        "id": 200275466,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591729500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/typechecking.20error.20with.20linear_algebra.2Edimension/near/200274753\">said</a>:</p>\n<blockquote>\n<p>It's just that <code>Type = Type 0</code> and <code>Type n : Type (n+1)</code>.</p>\n</blockquote>\n<p>Oh, I see, it's this.</p>",
        "id": 200275541,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591729541
    },
    {
        "content": "<p>Mathlib style is to make all statements universe-polymorphic. This actually hurts them sometimes, because concrete types like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> have type <code>Type</code> and you just saw what happened if different vector spaces live in different universes. I have still not remotely understood the point of this design decision, and my personal take on it is that <code>Type u</code> and <code>Type*</code> look more intimidating to beginners. I often just use <code>Type</code> when giving demos to undergrads.</p>",
        "id": 200275762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591729658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">universes</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">𝕜</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 200276219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591729915
    },
    {
        "content": "<p>Of course this also typechecks:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">𝕜</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>But you have to remember that this <code>1</code> on the RHS lives in universe <code>v</code> (-;</p>",
        "id": 200276354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591729986
    },
    {
        "content": "<p>Note that, if you have an instance of <code>finite_dimensional</code> hanging around, then you can use <code>findim</code> to get a good old <code>nat</code> instead of these weird cardinals.</p>",
        "id": 200276512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591730052
    },
    {
        "content": "<p>Thank you, this is very instructive.  Why do I need to lift both cardinals?  Naively I would have thought it was enough to lift one to the other.</p>",
        "id": 200276927,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591730269
    },
    {
        "content": "<p>You don't know which one is larger.</p>",
        "id": 200277336,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591730468
    },
    {
        "content": "<p>Ah!</p>",
        "id": 200277350,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591730478
    },
    {
        "content": "<p>If you can avoid <code>dim</code> and work with <code>findim</code>, you should definitely do it!</p>",
        "id": 200277375,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591730501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/typechecking.20error.20with.20linear_algebra.2Edimension/near/200275762\">said</a>:</p>\n<blockquote>\n<p>Mathlib style is to make all statements universe-polymorphic. This actually hurts them sometimes, because concrete types like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> have type <code>Type</code> and you just saw what happened if different vector spaces live in different universes. I have still not remotely understood the point of this design decision, and my personal take on it is that <code>Type u</code> and <code>Type*</code> look more intimidating to beginners. I often just use <code>Type</code> when giving demos to undergrads.</p>\n</blockquote>\n<p>I believe that when you say that everything you ever use is in <code>Type</code>, this is selective memory in the same sense as \"all rings are commutative\". Sure most of the things you use are in <code>Type</code>, but you also make use of certain constructions that cannot fit in <code>Type</code>, especially in category theory, for example presheaves and everything built thereupon. And if the library doesn't support these objects it's really a hard cut - nothing is available and you have to rewrite the entire theory. So we end up refactoring it to be polymorphic in the end anyway. (I still dread the day when we have to face a similar incompatibility / complete rewrite problem when it comes to 2-categories.)</p>",
        "id": 200280049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591731984
    },
    {
        "content": "<p>That said, for demos to undergrads you should <em>absolutely</em> use only <code>Type</code></p>",
        "id": 200280088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591732005
    },
    {
        "content": "<p>Now, that's not to say I wouldn't prefer a universe-less ambient logic. I've been a quite vocal supporter of ZFC here in the past and I stand by it in this case as well: you don't need this hierarchy of universes to infect everything, you can have just one \"universe\" called V and all categories are formally \"small\", with largeness itself being relativized to certain very large sets that get the proper designation of \"universe\". (The interesting thing is that for most purposes these don't actually need to be Grothendieck universes and so they exist in plenty in straight ZFC; but you can always pull out a weak large cardinal axiom if you want some Grothendieck universes.)</p>",
        "id": 200280838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591732343
    },
    {
        "content": "<p>I am not convinced by this argument. I sometimes use sets, and I sometimes use categories, and the sets are in Type and the categories are in Type 1 and I don't do typey things with them</p>",
        "id": 200280911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591732385
    },
    {
        "content": "<p>Here's an example: <code>ordinal.{u}</code> is an additive monoid</p>",
        "id": 200281072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591732450
    },
    {
        "content": "<p><code>surreal.{u}</code> is a field</p>",
        "id": 200281161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591732497
    },
    {
        "content": "<p>In a quite different area, I know I have struggled on at least one occasion with the fact that <code>tactic A</code> only works for <code>A : Type</code></p>",
        "id": 200281764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591732783
    },
    {
        "content": "<p>(at least, before the recent changes to enable <code>Type : Type</code> in meta land)</p>",
        "id": 200281863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591732806
    },
    {
        "content": "<p>You wouldn't think that large types come up in programming, but they do, when you have certain higher order functions</p>",
        "id": 200282029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591732880
    },
    {
        "content": "<p>It's quite common to have an object in maths defined by a universal property that could be written down but would bump the universe, and then we have to find some way to write it without the universe bump</p>",
        "id": 200282229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591732950
    },
    {
        "content": "<p>Ordinals and surreal numbers aren't proper maths really, but I do appreciate that one day this attitude of mine might lead to a disaster</p>",
        "id": 200282238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591732954
    },
    {
        "content": "<p>I was waiting for you to say that ;)</p>",
        "id": 200282273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591732971
    },
    {
        "content": "<p>I think mathlib shouldn't take a stand on such matters</p>",
        "id": 200282349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591733002
    },
    {
        "content": "<p>Here's perhaps an example. If we are lazy and don't do all the universe controlling when defining etale cohomology, we might end up with etale cohomology groups of a concrete scheme being in Type 1</p>",
        "id": 200282450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591733042
    },
    {
        "content": "<p>That's what I was getting at with the presheaves</p>",
        "id": 200282531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591733067
    },
    {
        "content": "<p>I don't understand all the definitions but it seems like schemes and such are heading right into that territory</p>",
        "id": 200282576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591733086
    },
    {
        "content": "<p>I think the sheaves are ok. But it's the cohomology of the sheaves which is worrying me now</p>",
        "id": 200282594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591733096
    },
    {
        "content": "<p>I point at presheaves because they are in a sense the source of the problem, being functions out of Type by definition</p>",
        "id": 200282676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591733139
    },
    {
        "content": "<p>The sooner you do all the ZFC nonsense which convinces you that the limits you're taking are not too big, the sooner you'll be able to use facts about groups proved only for Type. But I bet that this is exactly how it's done in the books, because in the books people won't dare to take the limit at all before it's proved to be a set</p>",
        "id": 200282869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591733214
    },
    {
        "content": "<p>On its face this seems like a silly thing in the same way that anything uncountable must lead to navel gazing questions like CH that miss the point because there is some more \"arithmetic\" structure underlying it that we are actually interested in</p>",
        "id": 200282962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591733257
    },
    {
        "content": "<p>In the case of sheaves I think this manifests in \"representable objects\" or some such</p>",
        "id": 200283070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591733295
    },
    {
        "content": "<p>Could one use <code>Type 1</code> for the Gromov-Hausdorff metric space structure on the set of compact metric spaces?  (If I understand correctly, Sébastien <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/metric_space/gromov_hausdorff.html\">did not do this</a>, but instead kept it as <code>Type</code> by realizing all compact metric space, up to isometry, as subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi mathvariant=\"normal\">∞</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span>.)</p>",
        "id": 200428534,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591801453
    },
    {
        "content": "<p>I guess there isn't a set of compact metric spaces so this sounds like pretty much the same phenomenon occurring in a different branch of mathematics.</p>",
        "id": 200428872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591801609
    },
    {
        "content": "<p>The simplest situation where this shows up in etale cohomology would be where the base is a point Spec(K), K a field, where you want to do calculations with all algebraic extensions of K, but they're not a set either, so (slightly vaguely speaking) you just take an algebraic closure and work with the algebraic extensions in there.</p>",
        "id": 200429060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591801702
    },
    {
        "content": "<p>In both cases, one is actually working with a quotient of \"the set of all the objects\" -- metric spaces / isometry for the one, algebraic extensions / isomorphism for the other.</p>",
        "id": 200429303,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591801803
    },
    {
        "content": "<p>Yes, you could absolutely use <code>Type 1</code> by considering all compact metric spaces in <code>Type</code> up to isometry. But it means you would get a notion that could not compare a compact set in <code>Type</code> and a compact set in <code>Type 1</code>. You would get another Gromov-Hausdorff space by taking all the compact metric spaces in <code>Type 1</code>, modulo isometry, and this one would live in <code>Type 2</code>. I definitely prefer the approach where you are careful to stay in <code>Type</code>.</p>",
        "id": 200430222,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591802236
    },
    {
        "content": "<p>The problem with just naively working with things up to isomorphism is that some of these objects have non-trivial automorphisms, so if you work with objects up to isomorphism then you lose the correct definition of a morphism. This was why I said \"vaguely speaking\". There is some careful dance you have to do in algebraic geometry involving cardinalities, but if you don't do it then your answers end up one universe higher than your questions and you'll see the issues Sebastien is pointing out (those which started this conversation basically).</p>",
        "id": 200430750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591802438
    },
    {
        "content": "<p>Another alternative would be simply to declare that <code>Type : Type</code> and promise not to do anything stupid -- i.e. allow Russell's paradox but promise not to use it to prove theorems. It sounds ridiculous in a mathematical setting but apparently in program verification this technique is sometimes used.</p>",
        "id": 200430881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591802497
    },
    {
        "content": "<p>This makes sense, I had not thought of the issue that Sébastien raises.</p>",
        "id": 200431410,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591802747
    }
]