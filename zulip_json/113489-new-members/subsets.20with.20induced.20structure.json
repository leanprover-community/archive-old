[
    {
        "content": "<p>Given a set with some structure, I often would like to think about its subsets that also have a similar structure on it. This seems like a pretty common construction — what would be the idiomatic way to formulate such things in Lean?</p>\n<p>Here's a particular example encountered in an attempt to formalise some algebra notes:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- what I had previously. This is unsatisfactory for a number of</span>\n<span class=\"c1\">-- reasons, including the fact that it doesn&#39;t force me to use the</span>\n<span class=\"c1\">-- operation on `G` when constructing `group H`, which means I&#39;m</span>\n<span class=\"c1\">-- not proving what I really want to prove.</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">//</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">subgroup_self</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]:</span> <span class=\"n\">group</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c1\">-- (also, this is incorrect, seemingly because H is of type `Type u_2`?</span>\n<span class=\"c1\">--  I don&#39;t understand what exactly is happening.)</span>\n\n\n<span class=\"c1\">-- I searched mathlib for examples, and the only similar thing I managed</span>\n<span class=\"c1\">-- to find was `submodule`. Mimicking its definition, I&#39;ve written down:</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">carrier</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">closed</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">h</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inv</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- now I think I can explicitly construct terms of type `subgroup` by</span>\n<span class=\"c1\">-- putting together proofs that a certain carrier set has the desired</span>\n<span class=\"c1\">-- properties — but how do I formulate things like `subgroup_self`,</span>\n<span class=\"c1\">-- and other assertions that are shaped like &#39;this given subset of G</span>\n<span class=\"c1\">-- is a subgroup of G&#39; ?</span>\n</pre></div>\n\n\n<p>In conversations elsewhere, I've heard mentions of <code>is_subgroup</code> and <code>is_submodule</code>, though I've also been told that <code>is_submodule</code> has been replaced, and indeed I could find neither definition in my copy of mathlib.</p>",
        "id": 147981000,
        "sender_full_name": "Jean Lo",
        "timestamp": 1542648659
    },
    {
        "content": "<p>I'm not sure how old your version of mathlib is but <code>is_subgroup</code> has been in <code>group_theory.subgroup</code> for long time <a href=\"https://github.com/leanprover/mathlib/blob/8ae3fb86f09daab0a48a4b81e19c1eee7552be10/group_theory/subgroup.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/8ae3fb86f09daab0a48a4b81e19c1eee7552be10/group_theory/subgroup.lean\">https://github.com/leanprover/mathlib/blob/8ae3fb86f09daab0a48a4b81e19c1eee7552be10/group_theory/subgroup.lean</a></p>",
        "id": 147981206,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1542648904
    },
    {
        "content": "<p>oh, in <code>group_theory/</code>, of course! I've been having trouble with <code>helm-lean-definitions</code> and have been looking in <code>algebra/group.lean</code> this whole time. Sorry for that.</p>\n<p>So what are the differences between how <code>is_subgroup</code> and <code>submodule</code>are defined? when should one way of doing it be preferred over the other?</p>",
        "id": 147981678,
        "sender_full_name": "Jean Lo",
        "timestamp": 1542649401
    },
    {
        "content": "<p>Good question! I'm not sure how the new <code>submodule</code> stuff works myself.</p>",
        "id": 147981908,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1542649661
    }
]