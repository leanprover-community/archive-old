[
    {
        "content": "<p>Assuming I got this set up correctly, is there any reasonably simple way to get the goal in the example? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">binom_l</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lagrange_interpolant_v2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xData</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n    <span class=\"err\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">(</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">),</span>\n    <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">xData</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">xData</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">binom_l</span> <span class=\"o\">(</span><span class=\"n\">xData</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">myX</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- The first interpolant (i=0) evaluated at the first point (x 0 = 1.0):</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lagrange_interpolant_v2</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">myX</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">lagrange_interpolant_v2</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"c1\">--rw polynomial.eval_smul (binom_l _) (1:ℝ),</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205397572,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596048385
    },
    {
        "content": "<p>What's the goal? I don't have access to lean right now</p>",
        "id": 205398184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596048722
    },
    {
        "content": "<p>Your definition of myX should have n+2 not n+1 maybe?</p>",
        "id": 205398345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596048809
    },
    {
        "content": "<p>I would be tempted to prove that finset.range 2 \\{0} was {1}</p>",
        "id": 205398649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596048953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20finset.2Eprod/near/205398345\">said</a>:</p>\n<blockquote>\n<p>Your definition of myX should have n+2 not n+1 maybe?</p>\n</blockquote>\n<p>Only the first two values count, so it shouldn't matter.</p>",
        "id": 205399423,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596049281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20finset.2Eprod/near/205398649\">said</a>:</p>\n<blockquote>\n<p>I would be tempted to prove that finset.range 2 \\{0} was {1}</p>\n</blockquote>\n<p>If this is the only alternative, I probably can go that way in this simple example. But then this won't work very nicely for larger <code>n</code>. </p>\n<p>I'm just trying to figure out best ways to manipulate these objects. Ultimately my goal is not to compute the values of these interpolants, but rather to prove/obtain truncation error for interpolation.</p>",
        "id": 205400070,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596049592
    },
    {
        "content": "<p>Computing one example is a very different question to proving theorems</p>",
        "id": 205400893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596050042
    },
    {
        "content": "<p>You're right that things shouldn't matter as far as what the function does is concerned, but if you make an obscure implementation then it will be harder to prove theorems. Directly after a definition you should usually make a little API, and the API for myX should be the theorems that myX 0= 1, myX 1=2 and myX n+2=0, which will probably be harder to prove with your definition</p>",
        "id": 205401266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596050261
    },
    {
        "content": "<p>I see your point. This <code>myX</code> function is not supposed to appear in any further stuff, though.</p>\n<p>But yes, changing to:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">myX</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">myX_0</span> <span class=\"o\">:</span> <span class=\"n\">myX</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">myX_1</span> <span class=\"o\">:</span> <span class=\"n\">myX</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>simplifies the goal a little bit.</p>",
        "id": 205401618,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596050419
    },
    {
        "content": "<p>Is the point of <code>( finset.range (n+1) \\ {i} )</code> to get the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{1, \\dots, n\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span>? If so, I think just using <code>( finset.range (n) )</code> and replacing every occurrence of  <code>j</code> with <code>j + 1</code> will give you nicer goals (and more simp lemmas to be able to use). Plus if you ever want to do induction over <code>n</code>, this definition will be a lot easier to deal with than the set difference definition.</p>\n<p>So what I'm suggesting is to use this definition instead</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">lagrange_interpolant_v2&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xData</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n    <span class=\"err\">∏</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">(</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">),</span>\n    <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">xData</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">xData</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">binom_l</span> <span class=\"o\">(</span><span class=\"n\">xData</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>the proof follows very nicely with this definition and the simp lemmas about <code>myX</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lagrange_interpolant_v2&#39;</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">myX</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">lagrange_interpolant_v2&#39;</span> <span class=\"n\">binom_l</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205422493,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1596062650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Working.20with.20finset.2Eprod/near/205398649\">said</a>:</p>\n<blockquote>\n<p>I would be tempted to prove that finset.range 2 \\{0} was {1}</p>\n</blockquote>\n<p>It follows easily indeed if I use this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">finset_range_2_0</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">2</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range_succ</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range_one</span> <span class=\"o\">],</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>after which the proof is basically just rewrites. Unfortunately this becomes very inconvenient for large <code>n</code>. Or at least that's what I think.</p>",
        "id": 205429188,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596068342
    },
    {
        "content": "<p>You could try to write a couple of lemmas about <code>finset.range (bit0 n)</code> and <code>finset.range (bit1 n)</code>.</p>",
        "id": 205429771,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596068837
    },
    {
        "content": "<p>Lean is a theorem prover, not an example computer. Working with examples is always a bit harder, especially straight after a new definition, because the lemmas you need are not there. If you want to work with larger examples you might want to write some more general API for your definition first.</p>",
        "id": 205449002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596094362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259857\">@Dan Stanescu</span> I've never really used it, but I hope that<code>fin_cases</code> would be a helpful tactic.<br>\nAlso:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">finset_range_2_0</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">2</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 205449316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596094619
    },
    {
        "content": "<p>(In special cases, Lean <em>is</em> an example computer.)</p>",
        "id": 205449328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596094633
    }
]