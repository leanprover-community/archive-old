[
    {
        "content": "<p>Hi, I am going through chapter 4 in the documentation.  I have a question about ∀.  Is there  a nice syntactic way to put a condition on a forall?  For example I am going through the exercises where you define prime numbers.  What I came up with was this :<br>\n def prime (n : ℕ) : Prop :=(n &gt; 1) ∧ (∀ k : ℕ,  (k = 1) ∨ ¬(divides n k)). <br>\nIt seems like the ∨ part at the end is somewhat burdensome for describing a constraint.   Some of the later exercises such as the Goldbach weak Conjecture were even hairier when using ∨  as a constraint mechanism.</p>",
        "id": 183008364,
        "sender_full_name": "Ender Doe",
        "timestamp": 1575931583
    },
    {
        "content": "<p>all k, divides n k -&gt; ...</p>",
        "id": 183011972,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1575934157
    },
    {
        "content": "<p>you can do the following:<br>\nfirst, transform to the variant you probably intended (you're missing the k = n case and the order in <code>divides</code> is mixed up)</p>\n<div class=\"codehilite\"><pre><span></span>def prime (n : ℕ) : Prop := (n &gt; 1) ∧ (∀ k : ℕ, (k = 1) ∨ (k = n) ∨ ¬(divides k n))\n</pre></div>\n\n\n<p>then, use implication instead of or (as described by yury). </p>\n<div class=\"codehilite\"><pre><span></span>def prime (n : ℕ) : Prop := (n &gt; 1) ∧ (∀ k : ℕ, divides k n → (k = 1) ∨ (k = n))\n</pre></div>\n\n\n<p>then, using the notation described in TPIL, you can do the following:</p>\n<div class=\"codehilite\"><pre><span></span>def prime (n : ℕ) : Prop := (n &gt; 1) ∧ (∀ k ∣ n, (k = 1) ∨ (k = n))\n</pre></div>",
        "id": 183012217,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1575934391
    },
    {
        "content": "<p>Ahh I see thank you very much.</p>",
        "id": 183012544,
        "sender_full_name": "Ender Doe",
        "timestamp": 1575934677
    },
    {
        "content": "<p>And remember that that's <code>\\|</code> not <code>|</code></p>",
        "id": 183014541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575936373
    }
]