[
    {
        "content": "<p>Is there a way to have <code>forall</code> as a constructor, by requiring it to be used as <code>formula.forall</code> or something similar?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">iff</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"k\">forall</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">exists</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n</code></pre></div>",
        "id": 271711092,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1644702129
    },
    {
        "content": "<p>Write it <code>«forall»</code>, with <code>\\f&lt;&lt;</code> and <code>\\f&gt;&gt;</code></p>",
        "id": 271711249,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644702406
    },
    {
        "content": "<p>You'll probably have to write <code>«exists»</code>as well.</p>",
        "id": 271711260,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644702429
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 271711863,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1644703301
    },
    {
        "content": "<p>Or <code>\\f&lt;&lt;&gt;&gt;</code> which will type both at once</p>",
        "id": 271712335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644704009
    },
    {
        "content": "<p>Oh, didn't know about that one!</p>",
        "id": 271712393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644704056
    },
    {
        "content": "<p>What does this syntax mean? Is it just for this purpose or something more general?</p>",
        "id": 271712408,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1644704080
    },
    {
        "content": "<p>It's the quotation notation for names in Lean. It lets you use characters that aren't permitted for unquoted names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"bp\">«</span><span class=\"n\">zulip</span> <span class=\"n\">people</span><span class=\"bp\">»</span>\n\n<span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"n\">Patrick</span> <span class=\"n\">Thomas</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"s2\">\"that is Patrick's name\"</span>\n\n<span class=\"kd\">end</span> <span class=\"bp\">«</span><span class=\"n\">zulip</span> <span class=\"n\">people</span><span class=\"bp\">»</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">«</span><span class=\"n\">zulip</span> <span class=\"n\">people</span><span class=\"bp\">».«</span><span class=\"n\">Patrick</span> <span class=\"n\">Thomas</span><span class=\"bp\">»</span>\n</code></pre></div>",
        "id": 271712950,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644704795
    },
    {
        "content": "<p>I see. Thank you.</p>",
        "id": 271712984,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1644704878
    }
]