[
    {
        "content": "<p>Hi there, I'm working through the natural numbers game and am stuck on advanced addition world 13 that asks for a tactics proof of <code>n \\ne succ n</code>. I think I'm stuck because I keep thinking of it in terms of recursion, and I'm pretty sure I can't do recursive proofs with tactics. Some pointers would be great. (also I'm doing something wrong with the code formatting here, where I tried to use backticks but it didn't display \\ne correctly?)</p>",
        "id": 273117104,
        "sender_full_name": "Robert Watson",
        "timestamp": 1645721692
    },
    {
        "content": "<p>I'm not sure what you mean by recursion, but at least when I did this proof I didn't use induction. That said, the main idea was to reduce the problem to a state where I could use <code>zero_ne_succ</code>. I'm happy to give more hints if you'd like--I don't want to ruin your fun, though!<br>\nRe: code formatting, I generally just copy and paste the unicode into the backticks: <code>n ≠ succ n</code>. Maybe someone else has a better way?</p>",
        "id": 273121461,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645723474
    },
    {
        "content": "<p>Yeah, I need one more hint. I was already doing that. The trouble is I was ending up with a sort of loop as I was using induction.</p>",
        "id": 273122128,
        "sender_full_name": "Robert Watson",
        "timestamp": 1645723759
    },
    {
        "content": "<p>Ahh, the other lemma that was \"key\" was <code>rw add_right_cancel_iff at g,</code></p>",
        "id": 273122555,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1645723937
    },
    {
        "content": "<p>great thanks.</p>",
        "id": 273122617,
        "sender_full_name": "Robert Watson",
        "timestamp": 1645723963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467358\">Daniel Packer</span> <a href=\"#narrow/stream/113489-new-members/topic/natural.20numbers.20world.20.2E.2E.2E.20advanced.20addition.20world/near/273121461\">said</a>:</p>\n<blockquote>\n<p>Re: code formatting, I generally just copy and paste the unicode into the backticks: <code>n ≠ succ n</code>. Maybe someone else has a better way?</p>\n</blockquote>\n<ul>\n<li>If you want a system wide unicode typing method on Linux, you can try <a href=\"https://github.com/gebner/m17n-lean\">m17n-lean</a></li>\n<li>A cross platform and system-wide solution: <a href=\"https://espanso.org/\">Espanso</a> (will require a manual configuration)</li>\n<li>An extension that works on Chrome or Chromium: <a href=\"https://github.com/arthurpaulino/chrome-lean-unicode\">chrome-lean-unicode</a></li>\n<li>A <a href=\"#narrow/stream/113488-general/topic/Unicode.20input.20on.20android/near/241133076\">solution for Android</a></li>\n<li>A solution that turns browser text inputs into <a href=\"#narrow/stream/113488-general/topic/Lean.20unicode.20Chrome.20extension/near/272169445\">neovim input buffers</a></li>\n</ul>",
        "id": 273123677,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645724475
    },
    {
        "content": "<p>´<br>\nintro g,<br>\nrw succ_eq_add_one at g,<br>\nrw (add_right_cancel_iff 0 n (n + 1)).1 at g,<br>\nrw add_assoc at g,<br>\nrw (add_left_cancel n 1 2) at g, <br>\n´</p>\n<p>I don't think my problem here is which tactic to use in principle. It's  something more fundamental to do with  the hidden  details of the tactics. In the above code when I apply cancel the number of required goals increases. But the idea of the cancelation is to decrease the number of goals! I just end up increasing the number of goals with each cancelation. This is essentially what I was also doing before when I was trying to solve it with the induction tactic.</p>",
        "id": 273204300,
        "sender_full_name": "Robert Watson",
        "timestamp": 1645780119
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 273204556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645780305
    },
    {
        "content": "<p>I have an italian keyboard. It has no backticks!</p>",
        "id": 273204688,
        "sender_full_name": "Robert Watson",
        "timestamp": 1645780395
    },
    {
        "content": "<p>Oh no! </p>\n<p>If I do what you did above, I end up with three goals, two of which look fine, and one of which is to prove that <code>n + 2 ≠ n + 4</code>, which seems harder than the original question, making me think that you're going in the wrong direction.</p>",
        "id": 273204822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645780477
    },
    {
        "content": "<p>Sure the number of goals you get increases with your method: you are rewriting a theorem of the form <code>X -&gt; (a = b)</code> so it will rewrite the a's to b's but it won't forget the promise that you're making, namely that <code>X</code> is true; it will add it as a new goal.</p>",
        "id": 273205365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645780876
    },
    {
        "content": "<p><code>intro g,\nrw succ_eq_add_one at g,\nrw (add_right_cancel_iff 0 n (n + 1)).1 at g,\nrw (add_right_cancel n 1 (n + 1)) at g, </code></p>",
        "id": 273205371,
        "sender_full_name": "Robert Watson",
        "timestamp": 1645780880
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 273205395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645780903
    },
    {
        "content": "<p>This is worse of course. (By the way the above is formatted with alt-96,. backtick...it isn't working for me)</p>",
        "id": 273205459,
        "sender_full_name": "Robert Watson",
        "timestamp": 1645780925
    },
    {
        "content": "<p>As the link explains, you need to use three backticks on a single line by itself. Click on the three dots for this message and then \"view source\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_right_cancel_iff</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">add_right_cancel</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 273205519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645780979
    },
    {
        "content": "<p>Ah, sorry, thought it wasthe same link! Got it. Thanks.</p>",
        "id": 273205673,
        "sender_full_name": "Robert Watson",
        "timestamp": 1645781085
    }
]