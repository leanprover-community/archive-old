[
    {
        "content": "<p>I am trying to define an equivalence class in Lean, where I already have a binary relation, defined as a variable <code>variable (r : S → S → Prop)</code> -- how would I insert the requirement of <code>binary_relation</code> satisfying <code>equivalence</code> while defining an equivalence class?</p>",
        "id": 135772739,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539514073
    },
    {
        "content": "<p>I.e. surely just def <code>class (a : S) : set S := { x | r x a }</code> is not enough. Do I need some squiggly brackets here to impose the requirement <code>equivalence binary_relation</code>?</p>",
        "id": 135772781,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539514105
    },
    {
        "content": "<p>the philosophy is that we create the definition as general as possible, and only insert the hypothesis in the proofs</p>",
        "id": 135772896,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539514349
    },
    {
        "content": "<p>Perhaps, but I just want to learn how definitions work. Can we make them specific in this way?</p>",
        "id": 135772964,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539514499
    },
    {
        "content": "<p><code>def equivalence_class (h : is_equivalence r) (a : S) : set S := { x | r x a }</code></p>",
        "id": 135772975,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539514540
    },
    {
        "content": "<p>Right, and then when using the definition we'd need to provide a proof of is_equivalence r as a parameter, right?</p>",
        "id": 135773069,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539514712
    },
    {
        "content": "<p>yes</p>",
        "id": 135773077,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539514772
    },
    {
        "content": "<p>Note that if you use that definition, the variable <code>r</code> becomes something lean can very easily infer. Thus it's convenient to make it implicit (by writing <code>variable {r}</code> immediately beforehand), so that when you use <code>equivalence_class</code>, you won't need to write <code>equivalence_class r h a</code> but only <code>equivalence_class h a</code>.</p>",
        "id": 135773243,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539515099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> just to note that <code>class</code> is already a keyword in Lean so you might want to stick to Kenny's suggestion of <code>equivalence_class</code> in any experiments you try.</p>",
        "id": 135777737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539523523
    }
]