[
    {
        "content": "<p>In the code below, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp\">tactic#simp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold\">tactic#unfold</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#change\">tactic#change</a> fail to unfold the definition of the function <code>fv</code>, despite it being applied to enough arguments. Why is that the case and how can I unfold the definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">language.constants</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">L.functions</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">preterm</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">preterm</span> <span class=\"n\">L</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fv</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">preterm</span> <span class=\"n\">L</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">preterm.var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">preterm.func</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">preterm.app</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fv</span> <span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">fv</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"n\">L</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">fv</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">l'</span> <span class=\"n\">f</span> <span class=\"n\">l'</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"n\">ht</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">clear</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">rename</span> <span class=\"n\">l'</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">is_false</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"c1\">--simp [fv] at h,</span>\n    <span class=\"c1\">--unfold fv at h,</span>\n    <span class=\"c1\">--change x ∈ ∅ at h,</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">clear</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">rename</span> <span class=\"n\">l'</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"c1\">--simp [fv],</span>\n    <span class=\"c1\">--unfold fv,</span>\n    <span class=\"c1\">--change decidable (x ∈ fv t ∪ fv s),</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 266958136,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641400831
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">term.fv</span>\n</code></pre></div>\n<p>shows you that Lean has decided to internally implement your <code>fv</code> definition by doing a case split on the natural number <code>l</code> and defining it to be the empty set on both occasions. So you need to make your own <code>simp</code> lemma to fix this up.</p>",
        "id": 266958776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641401119
    },
    {
        "content": "<p>If you add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fv_func</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fv</span> <span class=\"o\">(</span><span class=\"n\">preterm.func</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fv</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then <code>simp</code> now works.</p>\n<p>Lean's equation compiler does not always do the case splits that one would expect. Sometimes it is more eager, so you have to pick up the pieces by hand afterwards.</p>",
        "id": 266959044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641401255
    },
    {
        "content": "<p>Can also just change <code>0</code> to <code>_</code> in the first line of <code>fv</code>.</p>",
        "id": 266959362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641401406
    },
    {
        "content": "<p>Nice!</p>",
        "id": 266959414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641401435
    },
    {
        "content": "<p>Very cool. Thanks!</p>\n<p>Why does changing <code>0</code> to <code>_</code> fixes the problem? I find it really weird that it works in the first place, since the following doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fv</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"n\">L</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">preterm.var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">preterm.func</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">preterm.app</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 266960041,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641401743
    },
    {
        "content": "<p>It fixes the problem because Lean can infer that <code>l=0</code> in the first case. Edit: Yeah, I guess I see your point though. It's the magic of the equation compiler.</p>",
        "id": 266960134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641401791
    },
    {
        "content": "<p>To be honest, I wasn't really sure whether it would work either. But if you try defining <code>fv</code> manually using <code>preterm.rec</code>, you'll find that it's easy (but you won't get the useful equational lemmas autogenerated for you). So it is just a matter of cajoling the equation compiler into generating that. Putting a <code>0</code> pattern for the first variable is going to cause it to try to use <code>nat.rec</code> instead.</p>",
        "id": 266961346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641402246
    }
]