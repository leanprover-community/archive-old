[
    {
        "content": "<p>I am sure its impossible to inhabit <code>β</code>, however, I cannot easily think of a proof for it (<code>β → false</code>). Is <code>β</code> really uninhabited? If so, is it provable in Lean that <code>β → false</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"n\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 203912407,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594782222
    },
    {
        "content": "<p>It looks funny, but here's a proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">uninhabited</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">uninhabited</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">())</span>\n</code></pre></div>\n\n\n<p>Or, if you like recursors,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">uninhabited</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">())</span>\n</code></pre></div>",
        "id": 203913215,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594783553
    },
    {
        "content": "<p>Wow, the recursor for <code>β</code> is quite crazy.</p>",
        "id": 203914784,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594785845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Is.20this.20type.20inhabited/near/203913215\">said</a>:</p>\n<blockquote>\n<p>It looks funny, but here's a proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">uninhabited</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">uninhabited</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">())</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>How can Lean see that this terminates?</p>",
        "id": 203914808,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1594785917
    },
    {
        "content": "<p>I think it sees that <code>f ()</code> has less complexity than <code>β.mk f</code>, so it's able to work out a definition for <code>uninhabited</code> using recursors.  (You can always <code>#print uninhabited</code> to see what term-mode proof it derived.)</p>",
        "id": 203915058,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594786226
    },
    {
        "content": "<p>Even simpler:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">uninh</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">y</span> <span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 203924182,
        "sender_full_name": "Peter Bruin",
        "timestamp": 1594798510
    }
]