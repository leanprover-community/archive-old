[
    {
        "content": "<p>I've noticed that there are two types (and maybe others) of existential quantifiers in Lean. The first is more familiar to me and looks something like <code>\\ex (t  : U), P t</code>. In this case <code>t</code> is a Type (or in some places <code>Sort</code>, but I'm not exactly sure what this is). But then there's another existential that has the same structure, but instead of Type, <code>t</code> is a <code>Prop</code>. mathlib tells me that <code>(∃ (h : p), q) ↔ p ∧ q</code>where <code>p</code> is a <code>Prop</code> from <code>exists_prop</code>. I can memorize that this is true, but I'm trying to understand why we need this structure and what it is used for. If it's really just the same as conjunction, why don't we just always call it conjunction and cut out the confusing notation? I'd like to build some kind of internal justification that this is true.</p>",
        "id": 272483505,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645235707
    },
    {
        "content": "<p>That <code>(∃ (h : p), q) ↔ p ∧ q</code> lemma is a special case -- it's when <code>q</code> does not depend on <code>p</code> being true (more precisely: it's when the expression in the body of the existential doesn't make use of the <code>h</code> proof).</p>",
        "id": 272483958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645236068
    },
    {
        "content": "<p><code>Sort</code> is a way to make things be able to take either <code>Prop</code> or <code>Type</code>, so that we don't have to have a multitude of parallel definitions for each possibility.  <code>Sort 0 = Prop</code>, <code>Sort 1 = Type 0  = Type</code>, <code>Sort 2 = Type 1</code>, and so on.</p>",
        "id": 272484066,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645236146
    },
    {
        "content": "<p>Okay. I think that makes things more clear. If <code>p</code> and <code>q</code> are larger statements, how would I tell if <code>q</code> depends on <code>p</code>? I'm guessing that if they share none of the same variables then <code>q</code> doesn't depend on <code>p</code>? Or is it really just as long as <code>p</code> doesn't appear anywhere after the comma in the existential?</p>",
        "id": 272484438,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645236549
    },
    {
        "content": "<p>Oh sorry, I just read your edit. That makes sense</p>",
        "id": 272484538,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645236642
    },
    {
        "content": "<p>so if instead we had<code>(∃ (h : p), q ∧ p) </code>, we wouldn't be able to use that lemma right? because the statement after the comma uses the <code>h</code></p>",
        "id": 272484636,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645236738
    },
    {
        "content": "<p>That doesn't use <code>h</code> -- it needs to actually use <code>h</code> somewhere -- so the lemma still applies. I'll try to cook up a realistic example.</p>",
        "id": 272484812,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645236934
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 272484928,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645237068
    },
    {
        "content": "<p>Having multiple variables in an existential is the same as this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 272484998,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645237133
    },
    {
        "content": "<p>The function <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le\">docs#list.nth_le</a> takes both an index into a list and a proof that the index doesn't exceed its length.</p>",
        "id": 272485016,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645237160
    },
    {
        "content": "<p>Okay, I understand. the hypothesis in the existential is referenced by name, <code>h</code>, after the comma. In this case we couldn't use the lemma I was talking about above.</p>",
        "id": 272485174,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645237307
    },
    {
        "content": "<p>that makes more sense. I'm still a bit confused about having a <code>Prop</code> hypothesis in the existential. It's not something normally covered in an intro formal logic text, so I'm still trying to wrap my head around that</p>",
        "id": 272485283,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645237406
    },
    {
        "content": "<p>any good reading material you could suggest on that topic?</p>",
        "id": 272485290,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645237417
    },
    {
        "content": "<p><code>Prop</code> existentials can be thought of as if statements, if that helps:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">Q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">Q</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(If statements are slightly different, hence the <code>open_locale classical</code> line to try to turn off that difference.)</p>",
        "id": 272485659,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645237719
    },
    {
        "content": "<p>It's interesting how in dependent type theory you can pass around the fact <code>h</code> that a particular proposition <code>P</code> is true.  The only book I know about is <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>, but I'm not sure where it might talk specifically about this.  Though, after working with dependent types for a while, it feels surprisingly natural that you can do this with existentials.</p>",
        "id": 272485897,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645237945
    },
    {
        "content": "<p>that's interesting. i've been meaning to work through that book. it would probably help me plug up all the gaps in my basics. thanks for all the help here!</p>",
        "id": 272486142,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645238209
    }
]