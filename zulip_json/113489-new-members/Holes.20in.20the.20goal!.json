[
    {
        "content": "<p>I have <code>classical.some _</code> in my goal! I find myself unable to maneuver around it, although the goal itself should be easy.</p>\n<p>Unfortunately my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is a bit big...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">iso</span> <span class=\"bp\">→</span> <span class=\"n\">iso</span> <span class=\"bp\">→</span> <span class=\"n\">iso</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"o\">(</span><span class=\"n\">left_inverse</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_inverse</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse_iff_right_inverse</span> <span class=\"o\">:</span>\n  <span class=\"n\">left_inverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"n\">right_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">iso</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">iso</span><span class=\"o\">,</span> <span class=\"n\">left_inverse</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∧</span> <span class=\"n\">right_inverse</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective_iff_has_inverse</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective_iff_has_inverse</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">comm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">hg</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">iso</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective_id</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">],</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">has_inv</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206649948,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597194291
    },
    {
        "content": "<p><code>set_option pp.proofs true</code></p>",
        "id": 206650094,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597194393
    },
    {
        "content": "<p>Its not a hole, just a proof that lean has elected to hide from you (as it is irrelevant (in the technical sense!))</p>",
        "id": 206650131,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597194431
    },
    {
        "content": "<p>Probably you'll need to use <code>classical.some_spec</code>  somewhere to proceeed</p>",
        "id": 206650153,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597194480
    },
    {
        "content": "<p>Here's how far I got, added some more API:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ext_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">iso</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">iso</span> <span class=\"bp\">→</span> <span class=\"n\">iso</span> <span class=\"bp\">→</span> <span class=\"n\">iso</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">iso_mul_def</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">iso</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">iso_mul_val</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">iso</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">iso_mul_property</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">iso</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"bp\">=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective_id</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">iso_mul_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">iso</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">iso_mul_def</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">hm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">iso_mul_def</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">hm</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"o\">(</span><span class=\"n\">left_inverse</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">right_inverse</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse_iff_right_inverse</span> <span class=\"o\">:</span>\n  <span class=\"n\">left_inverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"n\">right_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">iso</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">iso</span><span class=\"o\">,</span> <span class=\"n\">left_inverse</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∧</span> <span class=\"n\">right_inverse</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective_iff_has_inverse</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hf</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective_iff_has_inverse</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">comm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">hg</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">iso</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective_id</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">],</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">iso</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">)),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"bp\">&lt;-</span><span class=\"n\">ext_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">left</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">α : Type u_1,</span>\n<span class=\"cm\">_inst_1 : nonempty α,</span>\n<span class=\"cm\">f : iso,</span>\n<span class=\"cm\">right : right_inverse (classical.some _).val f.val,</span>\n<span class=\"cm\">x : α,</span>\n<span class=\"cm\">left : (classical.some _).val (f.val x) = x</span>\n<span class=\"cm\">⊢ (classical.some _).val (f.val x) = 1.val x</span>\n<span class=\"cm\">-/</span>\n    <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span>\n\n  <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206652920,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597198061
    },
    {
        "content": "<p>Have you seen <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.Aut/src\">src#category_theory.Aut</a>?</p>",
        "id": 206653380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597198576
    },
    {
        "content": "<p>This builds the automorphism group for any object where there is a category structure.</p>",
        "id": 206653415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597198624
    },
    {
        "content": "<p>If you have <code>G : Group</code>, then use can just use <code>Aut G</code>.</p>",
        "id": 206653428,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597198635
    },
    {
        "content": "<p>I managed to complete the proof and it can be seen <a href=\"https://gist.github.com/pedrominicz/4fe4720c076bc553e97bf70d2e2a1940\">here</a>. Thanks for everyone who commented!</p>",
        "id": 206769178,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597277982
    },
    {
        "content": "<p>Also, I found that I was trying to do <a href=\"https://leanprover-community.github.io/mathlib_docs/data/equiv/basic.html#equiv.perm\">on mathlib</a>. I believe the mathlib version does not use <code>noncomputable</code>, not sure about <code>choice</code> as I haven't investigated it deeply.</p>",
        "id": 206769518,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597278335
    }
]