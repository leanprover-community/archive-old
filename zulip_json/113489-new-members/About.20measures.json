[
    {
        "content": "<p>Thanks!</p>",
        "id": 200003237,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591496459
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200003286,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591496523
    },
    {
        "content": "<p>I am now stuck defining a measure on R/Z1 identified with the unit interval. Like, I can use <code>quot</code> to define the type and have my real functions lifted to the interval, but how can I then use the identification to \"lift\" the lebesgue measure to it (pushforward measure)?</p>",
        "id": 200005131,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591500235
    },
    {
        "content": "<p>So I thought I had defined the equivalence relation with <code>%</code> as <code>mod</code>, but it turns out it just outputs the mod of the floor of the real number. Is there a proper <code>mod</code> function for real numbers?</p>",
        "id": 200005918,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591501859
    },
    {
        "content": "<p>The first thing I looked for was also <code>mod</code> for reals. Couldn't find it on mathlib and I believe its not defined anywhere.</p>",
        "id": 200006301,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591502624
    },
    {
        "content": "<p>I think you may have seen it on my thread, but I settled for <code>a ~ b</code> defined as <code>b - a ∈  ℤ</code>, which should work nice (caution: unverified assertion).</p>",
        "id": 200006352,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591502695
    },
    {
        "content": "<p>Couldn't you take the preimage of the set under the quotient map (resulting in a periodic subset of R), and then intersect with [0, 1] and read off the measure that way?</p>",
        "id": 200006474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591502905
    },
    {
        "content": "<p>Is this an instance of a general construction? It's not obvious to me how to do this in general because the preimage alone doesn't cut it</p>",
        "id": 200006487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591502970
    },
    {
        "content": "<p>While mod may not be defined on real, I think there is a <code>frac</code> function (which returns the fractional part of a real number) IIRC</p>",
        "id": 200006527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503033
    },
    {
        "content": "<p>*<code>fract</code></p>",
        "id": 200006530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503052
    },
    {
        "content": "<p>Haar measure for quotient of locally compact top groups by nice subgroups?</p>",
        "id": 200006531,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591503053
    },
    {
        "content": "<p>Haar measure isn't unique though</p>",
        "id": 200006533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503063
    },
    {
        "content": "<p>at the very least it would have to have a reference subset as input</p>",
        "id": 200006537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503101
    },
    {
        "content": "<p>But I don't think mathlib has Haar measure yet</p>",
        "id": 200006574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503142
    },
    {
        "content": "<p>i just checked and didn’t see it</p>",
        "id": 200006580,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591503160
    },
    {
        "content": "<p>If it has fract it should be easy to define <code>x % k</code> as <code>k * fract (x / k)</code>, no?</p>",
        "id": 200006581,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591503170
    },
    {
        "content": "<p>There is nothing fundamental blocking mod from being defined, I think we just didn't need it for anything</p>",
        "id": 200006586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503207
    },
    {
        "content": "<p>although it is worth thinking about in what generality to state it</p>",
        "id": 200006588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503226
    },
    {
        "content": "<p><code>fract</code> is defined over any <code>floor_ring</code></p>",
        "id": 200006629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503255
    },
    {
        "content": "<p>(I still don't see a reason for it from this conversation though)</p>",
        "id": 200006640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503324
    },
    {
        "content": "<p>Maybe it is not necessary, but I found it confusing that % in the reals returns integers (it took me a while before I realized what it was doing)</p>",
        "id": 200006701,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591503450
    },
    {
        "content": "<p>That sounds odd to me as well, I'm not sure what coercions made that happen</p>",
        "id": 200006749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503486
    },
    {
        "content": "<p>Oh, it's using <code>euclidean_domain.has_mod</code></p>",
        "id": 200006770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503556
    },
    {
        "content": "<p>hm, that will complicate things</p>",
        "id": 200006773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503563
    },
    {
        "content": "<p>wait no, the definition of remainder in a field is <code>λ a b, a - a * b / b</code> which should be 0 in all reasonable cases</p>",
        "id": 200006858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503684
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">%</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 200006925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503743
    },
    {
        "content": "<p>But if y is a Int does this holds? I am away from my computer now, but I remember <code>#eval 3.4 % 2</code> would return 1</p>",
        "id": 200006990,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591503876
    },
    {
        "content": "<p>You didn't provide any type there, so it probably defaults to nat</p>",
        "id": 200007003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503931
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span> <span class=\"err\">%</span> <span class=\"mi\">2</span>\n<span class=\"c1\">-- @has_mod.mod nat nat.has_mod (@has_div.div nat nat.has_div 17 5) 2 : nat</span>\n</code></pre></div>",
        "id": 200007051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591503977
    },
    {
        "content": "<p>3.4 is being interpreted as <code>17 / 5 : nat</code> which is floored division resulting in 3</p>",
        "id": 200007059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591504006
    },
    {
        "content": "<p>and 3 % 2 = 1</p>",
        "id": 200007064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591504019
    },
    {
        "content": "<p>If y is an int then it will infer that everything is an int and you will still get 1</p>",
        "id": 200007079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591504061
    },
    {
        "content": "<p>Hm, this makes sense</p>",
        "id": 200007084,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591504076
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- @has_mod.mod int int.has_mod (@has_div.div int int.has_div 17 5) 2 : int</span>\n</code></pre></div>",
        "id": 200007112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591504082
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 200007122,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591504084
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>works, but you can't eval it because it's a real</p>",
        "id": 200007129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591504115
    },
    {
        "content": "<p>but it is provably zero as shown above</p>",
        "id": 200007136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591504140
    },
    {
        "content": "<p>I think <code>euclidean_domain</code> should probably be decoupled from the div and mod notations</p>",
        "id": 200007199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591504216
    }
]