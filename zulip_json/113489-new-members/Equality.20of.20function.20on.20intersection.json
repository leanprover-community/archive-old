[
    {
        "content": "<p>I tried to define a theorem where one of the conditions was an equality on an intersection, but I run into problems with types.<br>\nHere is a minimal example of the problem:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>\n\n\n<p>Do I need to cast stuff or use coe in some form? How do I resolve this?</p>",
        "id": 206818309,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1597327369
    },
    {
        "content": "<p>Your problem is that terms of type <code>set X</code> are terms, not types, so you can't define functions on them without thinking a bit more carefully.</p>",
        "id": 206818894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597327668
    },
    {
        "content": "<p>Given <code>A : set X</code> there is a corresponding type, called a subtype of X. Lean will call it <code>\\u A</code> where <code>\\u</code> is some little up-arrow. But now you can see the problem -- if Lean uses subtypes then if x is in A \\cap B, the set, then <code>x : X</code>, so <code>f x</code> doesn't make sense</p>",
        "id": 206819038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597327741
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 206819317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597327888
    },
    {
        "content": "<p><code>x : A ∩ B</code> means that x is a term of type equal to the subtype corresponding to <code>A \\cap B</code>, so x is actually a pair: there's <code>x.1</code>, which is a term of type <code>X</code>, and there's <code>x.2</code>, which is a proof that x is in A \\cap B. We need to evaluate f on something-corresponding-to-x, but f only eats pairs &lt;x,p&gt; where p is a proof that x is in A, so you have to supply the proof that if x is in A \\cap B then x is in A directly</p>",
        "id": 206819547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597328027
    },
    {
        "content": "<p>If you think that this is a bit of a weird way to go about things, then you might want to consider the more normal type theory way to go about this stuff which would be to define f on all of X, and just let it be some junk value outside A. Then none of these problems occur.</p>",
        "id": 206819681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597328090
    },
    {
        "content": "<p>This is why we have 0/0=1 in Lean -- it's just more convenient to let / be defined on all of a field k rather than just the subset of non-zero elements of k.</p>",
        "id": 206819729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597328122
    },
    {
        "content": "<p>0/0=0 btw</p>",
        "id": 206819875,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597328182
    },
    {
        "content": "<p>0/0=junk value</p>",
        "id": 206820119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597328303
    },
    {
        "content": "<p>Okay, thanks, but I want to demand that f and g are continuous on their respective domains later (taking X and Y to be topological spaces), so how should I define these junk values in that case?</p>",
        "id": 206822514,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1597329487
    },
    {
        "content": "<p>you can still say they're continuous on A and B by using filters. This is the technique used in mathlib. We say something about it in the perfectoid paper</p>",
        "id": 206825061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597330559
    },
    {
        "content": "<p>Okay, I'll look into it, thanks.</p>",
        "id": 206828740,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1597332074
    },
    {
        "content": "<p>Would it be possible to allow</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>to be written</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>in <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s example? Do those <code>coe</code> / <code>lift</code>s exist? If not, would it be sensible to add them?</p>",
        "id": 206832483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597333614
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">coe_left_inter</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">↥</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">inter_subset_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"n\">coe_right_inter</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">↥</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">inter_subset_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 206833525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597334142
    },
    {
        "content": "<p>did you try recompiling mathlib afterwards? Kind of looks dangerous...</p>",
        "id": 206839287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597336957
    },
    {
        "content": "<p>No, I didn't. I assume using <code>has_lift</code> instead of <code>has_coe</code> would avoid any danger, but frankly I have no idea</p>",
        "id": 206845397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597340107
    },
    {
        "content": "<p>Asked over at <a href=\"#narrow/stream/113488-general/topic/Coercions.20on.20subtypes/near/206845831\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Coercions.20on.20subtypes/near/206845831</a>, since this isn't really a \"new members\" question any more.</p>",
        "id": 206846269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597340550
    }
]