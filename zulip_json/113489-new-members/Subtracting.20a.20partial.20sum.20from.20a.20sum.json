[
    {
        "content": "<p>I have this:</p>\n<div class=\"codehilite\" data-code-language=\"1\"><pre><span></span><code>k: ℕ+\nz: ℂ\nε: ℝ\nH: ε &gt; 0\n⊢ ∃ (i : ℕ), ∀ (j : ℕ), i ≤ j → abs' (∑ (x : ℕ) in range j, abs (z ^ (x * ↑k)) / ↑(x * ↑k)! - ∑ (x : ℕ) in range i, abs (z ^ (x * ↑k)) / ↑(x * ↑k)!) &lt; ε\n</code></pre></div>\n<p>How do I rewrite this goal in the form <code>∑ (x : ℕ) in range (j - i), abs (z ^ (x * ↑(k + i))) / ↑(x * ↑(k + i))!</code>?</p>",
        "id": 228124091,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614511081
    },
    {
        "content": "<p>I suspect there should be a lemma somewhere in the library for f: ℕ→ℂ<br>\n<code>∀ (i : ℕ), ∀ (j : ℕ),  i ≤ j → ∑ (x : ℕ) in range j, f x - ∑ (x : ℕ) in range i, f x = ∑ (x : ℕ) in range (j - i), f (x + i)</code><br>\nActually, there should be something more general than this where f: ℕ→{some arbitrary structure with addition}.</p>",
        "id": 228124764,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614511872
    },
    {
        "content": "<p>That theorem is false?</p>",
        "id": 228124917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614512044
    },
    {
        "content": "<p>Or rather the lemma needs a <code>+ i</code> in it</p>",
        "id": 228124967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614512105
    },
    {
        "content": "<p>Oh, I forgot i ≤ j. Did I forget anything else?<br>\nCopy pasted, and did not edit properly.</p>",
        "id": 228124991,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614512149
    },
    {
        "content": "<p>Not the original goal, the proposed lemma is not correct</p>",
        "id": 228125043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614512172
    },
    {
        "content": "<p>There should be something along the lines <code>range (a + b) = range a ++ map (+a) (range b)</code> which can be transformed into something like your lemma</p>",
        "id": 228125059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614512204
    },
    {
        "content": "<p>Fixed?</p>",
        "id": 228125088,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614512247
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 228125090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614512253
    },
    {
        "content": "<p>I'll try to prove my lemma myself while waiting for feedback. It seems like something someone else would have already done though.</p>",
        "id": 228125158,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614512313
    },
    {
        "content": "<p>This should be in <code>algebra.big_operators.basic</code> but it's not</p>",
        "id": 228125252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614512459
    },
    {
        "content": "<p>but it should be a one liner</p>",
        "id": 228125269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614512478
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> complete with imports?</p>",
        "id": 228125271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614512495
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subtract_subsum_from_sum</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span>\n <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n       <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n       <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228125523,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614512787
    },
    {
        "content": "<p>It probably is easier to prove if you replace <code>j</code> with <code>i+k</code> and eliminate the hypothesis</p>",
        "id": 228125553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614512828
    },
    {
        "content": "<p>Although that's not to say that what you have isn't also a useful lemma</p>",
        "id": 228125568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614512852
    },
    {
        "content": "<p>Do we at least have a lemma like this in the library?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">take_first_from_sum</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span>\n <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n       <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n       <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228126838,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614514301
    },
    {
        "content": "<p>That's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_succ'\">docs#finset.sum_range_succ'</a> except that you made it harder by using the poorly-behaved subtraction function on the naturals. Why not let k be j-1 and then you can avoid subtraction on naturals and dump your hypothesis</p>",
        "id": 228127066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614514551
    },
    {
        "content": "<p>I don't know how to do that; I am still a beginner.</p>",
        "id": 228127249,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614514757
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">take_first_from_sum</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span>\n <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n       <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n       <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_add_cancel</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"c1\">-- no more j</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_range_succ'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228127405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614514924
    },
    {
        "content": "<p>Nice, Thanks! I think that can be used with induction to get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subtract_subsum_from_sum</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">):</span>\n <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n       <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n       <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">):=</span>\n</code></pre></div>\n<p>Having this in Mathlib is worthwhile, IMO.</p>",
        "id": 228127632,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614515172
    },
    {
        "content": "<p>In general subtraction on the complexes is fine, but subtraction on the naturals involves a lot of faffing around because 2 - 3 = 0 (it has to be a natural because the type of subtraction is X -&gt; X -&gt; X) and a lot of the lemmas about subtraction come with extra hypotheses and are a pain to use. In your original question you have a hypothesis i &lt;= j and are then using j - i: the proposal is that instead you define k := j - i and then kill j completely and use i + k instead. It will make things much smoother.</p>",
        "id": 228127654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614515204
    },
    {
        "content": "<p>Interesting. I will play around with it.</p>",
        "id": 228127761,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614515318
    },
    {
        "content": "<p>Mathematically the statements are equivalent, but in practice the i + k version is better because it doesn't have the auxiliary hypothesis so is easier to use directly in things like rewrites.</p>",
        "id": 228127817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614515390
    },
    {
        "content": "<p>The i + k version will be in mathlib already, or perhaps a combination of two lemmas: we have <code>Ico a b</code>, the naturals a&lt;=n&lt;b, and a bunch of lemmas about summing over that finite set.</p>",
        "id": 228127909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614515454
    },
    {
        "content": "<p>What's the unprimed version, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_succ\">docs#finset.sum_range_succ</a>?</p>",
        "id": 228127935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614515481
    },
    {
        "content": "<p>Ah right - removing <code>f 0</code> vs <code>f n</code></p>",
        "id": 228127952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614515521
    },
    {
        "content": "<p>A <code>sum_range_add</code> lemma would be a nice first contribution to mathlib</p>",
        "id": 228128007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614515536
    },
    {
        "content": "<p>I suppose you mean adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_range_add</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>to mathlib/src/algebra/big_operators/basic.lean? I will see what I can do, I hope someone else adds it if I don't.</p>",
        "id": 228129512,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614517405
    },
    {
        "content": "<p>Maybe I should play the natural number game first.</p>",
        "id": 228129621,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614517557
    },
    {
        "content": "<p>I proved it, but it is a monstrosity... far from a one-liner.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_range_add</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hsucc</span> <span class=\"o\">:</span> <span class=\"n\">d.succ</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.succ_add</span> <span class=\"n\">d</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hsucc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">sum_range_succ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hsucc2</span> <span class=\"o\">:</span> <span class=\"n\">d.succ</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hsucc2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">sum_range_succ</span> <span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span>  <span class=\"n\">m</span>     <span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">=</span>\n              <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span>  <span class=\"n\">d</span>     <span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sum_range_succ'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_add_eq_succ_add</span> <span class=\"n\">x</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n            <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">congr</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">funext</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h6</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n            <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n            <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_assoc</span> <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h7</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_left_comm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sum_range_succ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">d</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228148540,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614538001
    },
    {
        "content": "<p>Presumably we should have something like an inclusion/exclusion lemma for finest.sum</p>",
        "id": 228148783,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614538246
    },
    {
        "content": "<p>Have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_succ'/src\">src#finset.sum_range_succ'</a> for some inspiration on how to shorten that. I'd expect you you want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.range_add\">docs#finset.range_add</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_union\">docs#finset.sum_union</a> or something like that. If those lemmas don't exist, then probably you want to write those too.</p>",
        "id": 228148788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614538252
    },
    {
        "content": "<p>Why isn't <code>finset.sum_union</code> called <code>finset.sum_disjoint_union</code>?</p>",
        "id": 228148894,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614538333
    },
    {
        "content": "<p>Because the expression it applies to is <code>finset.sum (union a b)</code></p>",
        "id": 228148906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614538355
    },
    {
        "content": "<p><code>disjoint</code> is just the condition necessary for it to be true, it's not part of the goal state</p>",
        "id": 228148910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614538369
    },
    {
        "content": "<p>Ok, but you you might want to know that the sum over a union in general is the sum of the individual components minus the sum over the intersection.</p>",
        "id": 228148953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614538406
    },
    {
        "content": "<p>And THAT would be called sum_union</p>",
        "id": 228148963,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614538416
    },
    {
        "content": "<p>Good point - I guess when someone adds that lemma it should be renamed <code>sum_union_of_disjoint</code> or similar</p>",
        "id": 228148983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614538438
    },
    {
        "content": "<p>Which would be proved trivially from the lemma you suggest</p>",
        "id": 228149032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614538448
    },
    {
        "content": "<p>That's the exclusion/inclusion thing I was referring too</p>",
        "id": 228149058,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614538463
    },
    {
        "content": "<p>The lemma that's already there should be enough for this thread though</p>",
        "id": 228149084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614538504
    },
    {
        "content": "<p>Oh sure</p>",
        "id": 228149099,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614538514
    },
    {
        "content": "<p>A simpler induction proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_range_add</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228149207,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614538616
    },
    {
        "content": "<p>Could <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> 's proof be added to Mathlib, please?</p>",
        "id": 228149324,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614538771
    },
    {
        "content": "<p>imo it should probably be generalized</p>",
        "id": 228149336,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614538797
    },
    {
        "content": "<p>I suppose, so long as this result is accessible. It is quite useful for showing infinite sums are Cauchy. What generalization do you propose?</p>",
        "id": 228149571,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614538999
    },
    {
        "content": "<p>I'd probably have the conclusion be <code>n + x</code> not <code>x + n</code>, so that <code>n</code> is added on the right uniformly through the lemma</p>",
        "id": 228149701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614539117
    },
    {
        "content": "<p>That does make it shorter.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_range_add</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">add_left_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228150342,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614539694
    },
    {
        "content": "<p>Should I make a pull request for this?</p>",
        "id": 228150718,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614540057
    },
    {
        "content": "<p>Made one. <a href=\"https://github.com/leanprover-community/mathlib/pull/6482\">https://github.com/leanprover-community/mathlib/pull/6482</a></p>",
        "id": 228151582,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614541079
    },
    {
        "content": "<p>Stubbing out the actual sublemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.range_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">finset.range_succ</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_range_add</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.range_add</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">finset.sum_union</span> <span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_image</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">finset.disjoint_iff_ne.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_image</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">forall_apply_eq_imp_iff₂</span><span class=\"o\">,</span>\n               <span class=\"n\">finset.mem_range</span><span class=\"o\">,</span> <span class=\"n\">exists_imp_distrib</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat.lt_add_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228152362,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614541918
    },
    {
        "content": "<p>Of course, it makes the latter proof look more complicated. There's probably some golfing possible.</p>",
        "id": 228152419,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614541945
    },
    {
        "content": "<p>I now have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod_range_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_range_succ</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_range_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228152750,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614542295
    },
    {
        "content": "<p>And this seems to work, though I was just guessing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_range_add</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">prod_range_add</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">prod_range_add</span>\n</code></pre></div>",
        "id": 228153206,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614542698
    },
    {
        "content": "<p>I put these 2 in a pull request: <a href=\"https://github.com/leanprover-community/mathlib/pull/6483\">https://github.com/leanprover-community/mathlib/pull/6483</a></p>",
        "id": 228154084,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614543578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385848\">@Mark Gerads</span> I mentioned this briefly when I closed the previous PR, but I probably wasn't clear. Our CI scripts will only run on PRs made from branches in the main mathlib repo, not forks. Can you push your work to a new branch in the mathlib repo and open a PR from there?</p>\n<p>(We set things up like this because the CI scripts upload files containing compiled versions of branch heads to an Azure server for use by <code>leanproject</code>.)</p>",
        "id": 228154332,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614543836
    },
    {
        "content": "<p>Hmmm. I have not used git this way before. Is there an example?<br>\nI will try to figure it out.</p>",
        "id": 228154485,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614543968
    },
    {
        "content": "<p>There are some instructions (and even a tutorial video) on our community site <a href=\"https://leanprover-community.github.io/contribute/index.html\">here</a>.</p>",
        "id": 228154549,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614544070
    },
    {
        "content": "<p>But feel free to ask for help here as well!</p>",
        "id": 228154579,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614544083
    },
    {
        "content": "<p><code>git remote set-url origin &lt;the url you have now but with leanprover-community instead of your name&gt;</code> is all you need to do</p>",
        "id": 228154703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614544217
    },
    {
        "content": "<p>Right, that will make the <code>origin</code> remote (which presumably currently points to your fork) point to <code>leanprover-community/mathlib</code>.</p>",
        "id": 228154750,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614544305
    },
    {
        "content": "<p>If I do a <code>git push</code>, won't it go directly to master without a pull request though?</p>",
        "id": 228154893,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614544417
    },
    {
        "content": "<p>I'll just follow the instruction at the link.</p>",
        "id": 228154959,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614544472
    },
    {
        "content": "<p>try <code>git push --set-upstream origin your_branch_name</code></p>",
        "id": 228154961,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1614544478
    },
    {
        "content": "<p>Ah you're right, the way you made the original PR was also not the way it's normally done</p>",
        "id": 228155212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614544702
    },
    {
        "content": "<p>I'd assumed you'd made a branch in your own local repo, not just used master</p>",
        "id": 228155230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614544720
    }
]