[
    {
        "content": "<p>The following code ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.app_builder</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">υ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">υ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ports</span> <span class=\"o\">:=</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">υ</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">reactor</span><span class=\"o\">,</span> <span class=\"n\">network</span>\n\n<span class=\"k\">with</span> <span class=\"n\">reactor</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">prts</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">ports</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">reactor</span> <span class=\"n\">d</span>\n\n<span class=\"k\">with</span> <span class=\"n\">network</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rtr</span> <span class=\"o\">:</span> <span class=\"n\">reactor</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>... produces the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">app_builder</span><span class=\"o\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">an</span> <span class=\"bp\">'</span><span class=\"n\">sizeof'</span><span class=\"bp\">-</span><span class=\"n\">application</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"n\">unification</span> <span class=\"n\">constraint</span> <span class=\"n\">for</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">argument</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">=?=</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">ports</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What does this mean?<br>\nIf I replace <code>ports ι υ</code> with its definition, the error goes away:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">reactor</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">prts</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">υ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">reactor</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 246557528,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626769523
    },
    {
        "content": "<p>The <code>[decidable_eq ι] [decidable_eq υ]</code> arguments are confusing it</p>",
        "id": 246574665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626782499
    },
    {
        "content": "<p>I recommend you remove them, and only add them in the places you actually need them</p>",
        "id": 246574712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626782524
    }
]