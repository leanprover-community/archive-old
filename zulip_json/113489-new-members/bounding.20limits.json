[
    {
        "content": "<p>Hello! I see theorems like cau_seq.lim_le here <a href=\"https://leanprover-community.github.io/mathlib_docs/data/real/cau_seq_completion.html\">https://leanprover-community.github.io/mathlib_docs/data/real/cau_seq_completion.html</a> which say f(n)&lt;x -&gt; lim f &lt; x. If I know that f(n) and g(n) are Cauchy sequences, and f(n)&lt;= g(n), is there really not a theorem that says lim f &lt;= lim g? (Or am I missing something stupid?) Thanks!</p>",
        "id": 211965478,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1601582174
    },
    {
        "content": "<p>I think these lemmas you're looking at don't say what you think they say. <code>&lt;=</code> and <code>&lt;</code> are defined on Cauchy sequences such that f &lt;= g iff lim(f)&lt;=lim(g) (when the limits exist). The lemmas <code>lt_lim</code> and <code>lim_lt</code> are not used at all in mathlib. The theorem you want will probably be expressed in terms of filters and will probably be there.</p>",
        "id": 211967571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601583124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> Here's the statement, for limits rather than Cauchy sequences:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_of_tendsto_of_tendsto'\">docs#le_of_tendsto_of_tendsto'</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">le_of_tendsto_of_tendsto'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a‚ÇÅ</span> <span class=\"n\">a‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a‚ÇÅ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a‚ÇÇ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â§</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a‚ÇÅ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a‚ÇÇ</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 211982363,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601590234
    },
    {
        "content": "<p>Did you specifically want it to be about Cauchy sequences (or will it be enough for you to have it for limits, together with having access to a theorem saying that a Cauchy sequence has a limit)?</p>",
        "id": 211982421,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601590280
    },
    {
        "content": "<p>Hmm interesting. I'm trying to mimic the mathlib proof of exp_bound: </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/4851857/src/data/complex/exponential.lean#L1021\">https://github.com/leanprover-community/mathlib/blob/4851857/src/data/complex/exponential.lean#L1021</a></p>\n<p>Line 1025 says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">lim_le</span> <span class=\"o\">(</span><span class=\"n\">cau_seq.le_of_exists</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©),</span>\n</code></pre></div>\n\n<p>This converts the goal which is a statement about limits into a statement about jth terms of the defining sequences (the right side of which is constant). Kevin, are you saying there's some way to do that more directly, since &lt;= is already \"defined\" on Cauchy sequences?... Thanks!</p>",
        "id": 211988193,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1601594558
    },
    {
        "content": "<p>Can I ask what context you're working in?  Is it a different bound involving the exponential function?  The <code>special_functions</code> library is especially ad hoc, so tricks that are needed for the exponential function because of its particular definition might not translate to other contexts.</p>",
        "id": 211988399,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601594741
    },
    {
        "content": "<p>For example, <code>exp</code> is defined literally via a Cauchy sequence, but there is also a full library on infinite sums<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/infinite_sum.html\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/infinite_sum.html</a><br>\nwhich would provide an alternative framework (maybe it didn't exist when the exp file was written).</p>",
        "id": 211988853,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601595137
    },
    {
        "content": "<p>Yes, I'm playing around with exp... I managed to prove that, if |x|&lt;1/2, then |exp(x)-(1+x)|&lt;1 (again, very ugly code, sorry):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">expBnd</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">‚ÑÇ</span> <span class=\"o\">,</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">rwrw1</span><span class=\"o\">:</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">refine</span> <span class=\"n\">complex.abs_exp_sub_one_sub_id_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">rwrw2</span><span class=\"o\">:</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"n\">rw3</span><span class=\"o\">:</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span>  <span class=\"bp\">*</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">ring</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">rw</span> <span class=\"n\">rw3</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">mul_lt_mul''</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">,</span>\n        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">rw5</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span> <span class=\"o\">)</span><span class=\"bp\">‚Åª¬π</span> <span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">rw</span>  <span class=\"n\">division_def</span><span class=\"o\">,</span>\n            <span class=\"n\">ring</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">rw</span> <span class=\"n\">rw5</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">absnonneg</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">absnonneg</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">rwrw3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span> <span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">rwrw4</span><span class=\"o\">:</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">gt_of_gt_of_ge</span> <span class=\"n\">rwrw2</span> <span class=\"n\">rwrw1</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">rwrw5</span><span class=\"o\">:</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">rwrw6</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span> <span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"bp\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span>  <span class=\"n\">rwrw5</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">rwrw3</span> <span class=\"n\">at</span> <span class=\"n\">rwrw4</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>but now I'm trying to see how to do it without calling complex.abs_exp_sub_one_sub_id_le, by directly accessing the series. Of course the human proof is trivial:</p>\n<p>|exp(x)-(1+x)| \\le |x|^2/2+|x|^3/3!+...\\le |x|^2+|x|^3+... \\le 1 </p>\n<p>since |x|&lt;1/2...</p>",
        "id": 211988856,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1601595140
    },
    {
        "content": "<p>And the proof of complex.abs_exp_sub_one_sub_id_le uses exp_bound...</p>\n<p>But thanks for the tip Heather, I'll try to mess around with infinite_sum...</p>",
        "id": 211989192,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1601595496
    },
    {
        "content": "<p>(just to continue with a guide to the more general approaches -- here's a file I wrote setting up the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>‚Ü¶</mo><msup><mi>x</mi><mrow><mo>‚àí</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x\\mapsto x^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Ü¶</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚àí</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> (where defined) in a Banach algebra, using the infinite sum framework I pointed to above:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/units.html\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/units.html</a><br>\nand, btw, since last week <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> has started seriously working towards analytic functions \"done right\"!<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/4291#issuecomment-699684052\">https://github.com/leanprover-community/mathlib/pull/4291#issuecomment-699684052</a> )</p>",
        "id": 211989198,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601595500
    },
    {
        "content": "<p>I'd say <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> already did most of the work but we need some glue to use it for <code>exp</code>, <code>sin</code>, etc.</p>",
        "id": 211989891,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601596098
    },
    {
        "content": "<p>Yury, what setting are you planning to work in?</p>",
        "id": 211990157,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601596426
    },
    {
        "content": "<p>Will you do single-variable power series in Banach algebras?</p>",
        "id": 211990181,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601596443
    },
    {
        "content": "<p>Or something more general that unites the above theory with the theory of several complex variables?</p>",
        "id": 211990211,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601596460
    },
    {
        "content": "<p>The first step will be to define a function from <code>mv_power_series (fin n)</code> to <code>continuous_multilinear_map</code>s on <code>A^n</code> and from <code>power_series</code> to <code>A</code>, where <code>A</code> is an algebra.</p>",
        "id": 211990330,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601596586
    },
    {
        "content": "<p>You could conceivably work on modules over A rather than just A^n.  But I'm not sure there's any point.</p>",
        "id": 211990742,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601596939
    }
]