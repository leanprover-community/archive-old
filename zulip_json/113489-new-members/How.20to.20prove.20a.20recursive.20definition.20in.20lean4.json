[
    {
        "content": "<p>I am looking for a hint as to how I should go about proving a recursive definition, for example I have a recursive definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">execute_prog</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Prog</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prog_len</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">prog_len</span> <span class=\"bp\">==</span> <span class=\"n\">pc</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">pc</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">pc</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">instr</span> <span class=\"o\">::</span> <span class=\"n\">instrs</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">pc'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">execute_instr</span> <span class=\"n\">instr</span> <span class=\"n\">s</span> <span class=\"n\">pc</span>\n        <span class=\"n\">execute_prog</span> <span class=\"n\">instrs</span> <span class=\"n\">prog_len</span> <span class=\"n\">s'</span> <span class=\"n\">pc'</span>\n</code></pre></div>\n<p>it's a function which consumes a program <code>p</code> which is a list of an inductive type so <code>List Instr</code>  and it performs operation on the Stack of <code>Int</code>s.</p>\n<p>I am able to formalise the theorem statement but the above function is a recursive definition so I am kind of stuck in an unfold hell.<br>\nSo some pointers on dealing with recursive functions in general would be nice</p>\n<p>Thanks and sorry for the stupid question, I'm sure I missed it in TPiL (if it's somewhere addressed in TPiL please point it to me I'll just refer that part)</p>",
        "id": 307040620,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667196060
    },
    {
        "content": "<p>what do you mean proving the definition? A definition is a definition</p>",
        "id": 307041525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667196788
    },
    {
        "content": "<p>also <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if you want people to actually demonstrate with code</p>",
        "id": 307041532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667196798
    },
    {
        "content": "<p>the short answer is that you theorems about a definition by recursion are proved by induction. You should never have to unfold the recursive definition more than once (in each case)</p>",
        "id": 307041769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667196991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20a.20recursive.20definition.20in.20lean4/near/307041525\">said</a>:</p>\n<blockquote>\n<p>what do you mean proving the definition? A definition is a definition</p>\n</blockquote>\n<p>umm so I phrased that incorrectly I meant proving a theorem statement containing a recursive statement.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20a.20recursive.20definition.20in.20lean4/near/307041532\">said</a>:</p>\n<blockquote>\n<p>also <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if you want people to actually demonstrate with code</p>\n</blockquote>\n<p>I can give a mwe but I feel guilty when I don't solve it on my own and get a solution but just to not waste anyone's time I'll provide context.</p>\n<p>so there is a set of instructions in a list</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">prog_ex</span> <span class=\"o\">:</span> <span class=\"n\">Prog</span> <span class=\"o\">:=</span>\n    <span class=\"o\">[</span>\n      <span class=\"n\">Instr.dup</span><span class=\"o\">,</span> <span class=\"c1\">-- 0</span>\n      <span class=\"n\">Instr.lit</span> <span class=\"mi\">0</span><span class=\"o\">,</span>  <span class=\"c1\">-- 1</span>\n      <span class=\"n\">Instr.eq</span><span class=\"o\">,</span>  <span class=\"c1\">-- 2</span>\n      <span class=\"n\">Instr.if_</span> <span class=\"mi\">12</span><span class=\"o\">,</span> <span class=\"c1\">-- 3</span>\n      <span class=\"n\">Instr.swap</span><span class=\"o\">,</span> <span class=\"c1\">-- 4</span>\n      <span class=\"n\">Instr.lit</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"c1\">-- 5</span>\n      <span class=\"n\">Instr.add</span><span class=\"o\">,</span> <span class=\"c1\">-- 6</span>\n      <span class=\"n\">Instr.swap</span><span class=\"o\">,</span> <span class=\"c1\">-- 7</span>\n      <span class=\"n\">Instr.lit</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"c1\">-- 8</span>\n      <span class=\"n\">Instr.sub</span><span class=\"o\">,</span> <span class=\"c1\">-- 9</span>\n      <span class=\"n\">Instr.lit</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"c1\">-- 10</span>\n      <span class=\"n\">Instr.if_</span> <span class=\"mi\">0</span> <span class=\"c1\">-- 11</span>\n    <span class=\"o\">]</span>\n</code></pre></div>\n<p>and the thing I need to prove is that if I pass any stack where <code>m :: n :: stack</code> where <code>m, n &gt;= 0</code> and <code>stack : List Int</code><br>\nin addition to <code>prog_ex</code> to <code>execute_prog</code> it will always output a stack where the first element is a 0 and second element is <code>(m + n)</code> followed by <code>stack</code> so the result would be <code>0 :: (m + n) :: stack</code></p>\n<p>so I defined an intermediate definition </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">n_stack</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Prod.fst</span> <span class=\"bp\">$</span> <span class=\"n\">execute_prog</span> <span class=\"o\">(</span><span class=\"n\">prog_ex</span><span class=\"o\">)</span> <span class=\"mi\">12</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">::</span> <span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and this makes the theorem definition easier</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">t1</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">â‰¥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">â‰¥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n_stack</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">n_stack</span>\n    <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">execute_prog</span>\n      <span class=\"n\">simp</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but unfortunately I couldn't make any progress, sorry if this seems really stupid</p>",
        "id": 307043999,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667198685
    },
    {
        "content": "<p>when I have tried it with a simple example that usually works but I cannot generalise it</p>",
        "id": 307044050,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667198740
    },
    {
        "content": "<blockquote>\n<p>I can give a mwe but I feel guilty when I don't solve it on my own and get a solution but just to not waste anyone's time I'll provide context.</p>\n</blockquote>\n<p>An MWE is not your whole problem, it is the part you are stuck on, removed from the context and placed in a <em>self-contained</em> file</p>",
        "id": 307045226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667199527
    },
    {
        "content": "<p>the difference between providing long explanations as context and providing a short toy version of your problem that compiles is really huge in terms of the speed and volume of responses</p>",
        "id": 307045365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667199612
    },
    {
        "content": "<p>In order for me to answer your question, I'm going to have to infer the types of all those things you wrote and add <code>sorry</code> everywhere. You can do that much more accurately than I since you have the actual example on hand</p>",
        "id": 307045492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667199718
    },
    {
        "content": "<p>My impression, from what I can see, is that you shouldn't need to match on <code>s</code> here, you can just <code>simp [n_stack, execute_prog]</code></p>",
        "id": 307045768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667199929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20a.20recursive.20definition.20in.20lean4/near/307045226\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I can give a mwe but I feel guilty when I don't solve it on my own and get a solution but just to not waste anyone's time I'll provide context.</p>\n</blockquote>\n<p>An MWE is not your whole problem, it is the part you are stuck on, removed from the context and placed in a <em>self-contained</em> file</p>\n</blockquote>\n<p>I'll try to make sure that I am able frame it more precisely, I'm not very good at it. If there are any other resources in addition to mwe that you recommend for framing a precise question please feel free to share, I want to get better at this</p>",
        "id": 307049826,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667202219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20a.20recursive.20definition.20in.20lean4/near/307045768\">said</a>:</p>\n<blockquote>\n<p>My impression, from what I can see, is that you shouldn't need to match on <code>s</code> here, you can just <code>simp [n_stack, execute_prog]</code></p>\n</blockquote>\n<p>I tried <code>simp [n_stack]</code> and when I add <code>simp [n_stack, execute_prog]</code> it crashes my vscode after being non-responsive for a while</p>\n<p>I'll try something else</p>",
        "id": 307050777,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667202765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20a.20recursive.20definition.20in.20lean4/near/307045492\">said</a>:</p>\n<blockquote>\n<p>In order for me to answer your question, I'm going to have to infer the types of all those things you wrote and add <code>sorry</code> everywhere. You can do that much more accurately than I since you have the actual example on hand</p>\n</blockquote>\n<p>so I can write the types<br>\n<code>Stack</code> is <code>List Int</code><br>\n<code>Prog</code> is <code>List Instr</code><br>\nand <code>Instr</code> is an inductive type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">Instr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq</span>  <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">drop</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dup</span>  <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">swap</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">over</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lit</span>  <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">â†’</span> <span class=\"n\">Instr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">if_</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Instr</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>if there are any other types which don't make sense let me know <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 307051451,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667203132
    },
    {
        "content": "<p>the function <code>execute_instr</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">execute_instr</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Instr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Stack</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Instr.add</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nAdd</span> <span class=\"n\">s</span> <span class=\"n\">pc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Instr.sub</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nSub</span> <span class=\"n\">s</span> <span class=\"n\">pc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Instr.eq</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">nSub</span> <span class=\"n\">s</span> <span class=\"n\">pc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Instr.drop</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nDrop</span> <span class=\"n\">s</span> <span class=\"n\">pc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Instr.dup</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nDup</span> <span class=\"n\">s</span> <span class=\"n\">pc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Instr.swap</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nSwap</span> <span class=\"n\">s</span> <span class=\"n\">pc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Instr.over</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nOver</span> <span class=\"n\">s</span> <span class=\"n\">pc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Instr.lit</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nLit</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"n\">pc</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Instr.if_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nIf</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">pc</span>\n</code></pre></div>",
        "id": 307051802,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667203316
    },
    {
        "content": "<p>sorry for making these needlessly complex I kind of feel bad if you want to withdraw from this question I understand <span aria-label=\"face with peeking eye\" class=\"emoji emoji-1fae3\" role=\"img\" title=\"face with peeking eye\">:face_with_peeking_eye:</span></p>",
        "id": 307051969,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667203377
    },
    {
        "content": "<p>Please please please stop writing text and just post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if you want an answer. Beginners make all kinds of errors. We need to see fully working code.</p>",
        "id": 307052534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667203612
    },
    {
        "content": "<p>Instructions are in the link</p>",
        "id": 307052576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667203625
    },
    {
        "content": "<p>yeah I'll try and post a mwe, let me figure it out</p>",
        "id": 307058987,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1667206724
    }
]