[
    {
        "content": "<p>I'm going through the M40001/M40009 exercises for 2019.  I'm still not completely getting the hang of how to structure some tactic proofs.</p>\n<p>For example, I stated the following that I wanted to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">question_5_aux2</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)):</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I'd like to prove this by induction -- once I have a variable <code>n: int</code> I can do cases on it and then do induction positively and negatively.<br>\nBut I can't figure out which tactic can introduce such a variable.  I can't do left or right since there are two possibilities that are mutually exclusive.<br>\nAlso, while trying to do this, I realize that I have to simplify the arithmetic, for example <code>P(n+1+1)</code> simplified to <code>P(n+2)</code>, but simp doesn't seem to do this .  I'm assuming that I need to do a <code>rw</code>, but how do I find what things are in the definition of integers that allows me to do this?</p>",
        "id": 221252316,
        "sender_full_name": "Victor Miller",
        "timestamp": 1609367595
    },
    {
        "content": "<p>How would you do a pen&amp;paper proof for this statement?</p>",
        "id": 221252525,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609367864
    },
    {
        "content": "<p>This is a tricky question for a Lean beginner! Rather than doing cases on the integer I'd recommend the more principled induction procedure <code>int.induction_on</code>.  <code>n+1+1</code> and <code>n+2</code> are equal by definition, so <code>change</code> can be used to change between two forms, and you might not need to use it at all.</p>",
        "id": 221252575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609367893
    },
    {
        "content": "<p>This is not what he is missing. He is blocked by the or. Victor, you need to start with <code>by_cases h : P 0</code>.</p>",
        "id": 221252605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609367940
    },
    {
        "content": "<p>@Patrick: Thanks.  I didn't know about by_cases.</p>",
        "id": 221252692,
        "sender_full_name": "Victor Miller",
        "timestamp": 1609368043
    },
    {
        "content": "<p>I think any pen&amp;paper proof for this would also start with a case distinction on P(0), wouldn't it?</p>",
        "id": 221252716,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609368076
    },
    {
        "content": "<p>You could think such things should be automatic but there is all this crazyness about constructive mathematics. Some people would say you statement is unprovable. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 221252736,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609368102
    },
    {
        "content": "<p>Oh come on, the pen and paper proof is \"it's obvious\" ;-)</p>",
        "id": 221252747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609368109
    },
    {
        "content": "<p>Victor, you may be interested in doing the <a href=\"https://github.com/leanprover-community/tutorials\">tutorial project</a>. It covers <code>by_cases</code> (and many more basic stuff, although there is no induction there).</p>",
        "id": 221252843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609368211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"371310\">@Victor Miller</span> I can highly recommend bookmarking this cheatsheet of common lean tactics: <a href=\"https://leanprover-community.github.io//img/lean-tactics.pdf\">https://leanprover-community.github.io//img/lean-tactics.pdf</a> - it helped me a lot</p>",
        "id": 221252845,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609368212
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>import tactic\n\nlemma question_5_aux2 (P: ℤ → Prop) (h: ∀ n, P n ↔ P (n+1)) :\n  (∀ n, P n) ∨ (∀ n, ¬ (P n)) :=\nbegin\n  by_cases h0 : P 0,\n  { left,\n    intro n,\n    apply int.induction_on n h0,\n    { intro i, convert (h i).1, refl },\n    { intro i, convert (h (-(i : ℤ) - 1)).2, simp, }\n  },\n  { right,\n    intro n,\n    apply int.induction_on n,\n    { exact h0 },\n    { intro i, apply mt, convert (h i).2, refl },\n    { intro i, apply mt, convert (h (-(i : ℤ) - 1)).1, simp },\n  },\n\nend\n</code></pre></div>\n</div></div>",
        "id": 221253042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609368438
    },
    {
        "content": "<p>I would go through a lemma that says <code>\\forall n, P n &lt;-&gt; P 0</code></p>",
        "id": 221253483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609368906
    },
    {
        "content": "<p>@Mario, I had that as another lemma.  Great minds think alike :-).</p>",
        "id": 221253567,
        "sender_full_name": "Victor Miller",
        "timestamp": 1609368981
    },
    {
        "content": "<p>or <code>\\forall n (m:nat), P n &lt;-&gt; P (n+m)</code></p>",
        "id": 221253577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609368995
    },
    {
        "content": "<p>that approach doesn't even need <code>int.induction_on</code></p>",
        "id": 221253594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609369020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> int.induction_on is something I didn't know about.  Thanks</p>",
        "id": 221253825,
        "sender_full_name": "Victor Miller",
        "timestamp": 1609369206
    }
]