[
    {
        "content": "<p>what does it for an inductive type to have recursive arguments? could you give an example?</p>",
        "id": 269946018,
        "sender_full_name": "J. O.",
        "timestamp": 1643565104
    },
    {
        "content": "<p>i didnt really understand the explanation <a href=\"/user_uploads/3121/VyP_PZTRMKgzWvpNMOHPsBAr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VyP_PZTRMKgzWvpNMOHPsBAr/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/VyP_PZTRMKgzWvpNMOHPsBAr/image.png\"></a></div>",
        "id": 269946068,
        "sender_full_name": "J. O.",
        "timestamp": 1643565132
    },
    {
        "content": "<p>The following is an example for two recursive arguments (using Lean 4 syntax):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n  <span class=\"c1\">-- (d : δ) = (d1 : Nat) (d2 : Nat)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">bj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">d1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">bj</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 269946376,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643565487
    },
    {
        "content": "<p>But, more generally, the description of inductive types in the manual is very technical and difficult to understand. You might want to read the respective section in TPIL instead: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html\">https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html</a></p>",
        "id": 269946410,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643565539
    },
    {
        "content": "<p>thnks. im curious, how is you example recursive? like, how do recursive inductive types really work?</p>",
        "id": 269947118,
        "sender_full_name": "J. O.",
        "timestamp": 1643566328
    },
    {
        "content": "<p>It's recursive because the argument to the constructor of <code>Foo</code> contains <code>Foo</code> again.<br>\nThese are two more concrete examples of inductive types with recursive arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">List'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">List'</span> <span class=\"n\">α</span>\n  <span class=\"c1\">-- `tail` is recursive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List'</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Nat'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat'</span>\n  <span class=\"c1\">-- `n` is recursive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat'</span>\n</code></pre></div>\n<p>To construct a <code>List'</code> via <code>List'.cons</code>, you need to pass in a <code>value</code> and a smaller <code>List'</code>. This gives you a <code>List'</code> with one more element (<code>value</code>).</p>",
        "id": 269947444,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643566749
    },
    {
        "content": "<p>i see. mutual recursion in iductive types works sortof the same, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">even</span><span class=\"o\">,</span> <span class=\"n\">odd</span>\n<span class=\"k\">with</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 269971800,
        "sender_full_name": "J. O.",
        "timestamp": 1643594517
    }
]