[
    {
        "content": "<p>Trying to get lean to read a sequence of <code>nat</code> (not delimited by commas or anything) and put it into a list. Tried doing so by reading the file line by line, seems to work fine. But when I try to map the list of <code>string</code>'s to a <code>list nat</code> it's giving me weird results. Any clue what I'm doing wrong? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.io</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">read_line</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">io.handle</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">char_buffer</span> <span class=\"o\">:=</span>\n <span class=\"k\">do</span> <span class=\"n\">buf</span> <span class=\"bp\">←</span>  <span class=\"n\">tactic.unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io.fs.get_line</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n <span class=\"n\">return</span> <span class=\"n\">buf</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">io.mk_file_handle</span> <span class=\"s2\">\"src/foo.txt\"</span> <span class=\"n\">io.mode.read</span><span class=\"o\">,</span>\n <span class=\"n\">io.run_tactic</span> <span class=\"bp\">$</span>\n <span class=\"k\">do</span> <span class=\"n\">list1</span> <span class=\"bp\">←</span>\n  <span class=\"n\">iterate_at_most</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">input</span> <span class=\"bp\">←</span>  <span class=\"n\">read_line</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">str</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">input.to_list.as_string</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"n\">str</span><span class=\"o\">),</span>\n   <span class=\"n\">list2</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">list.map</span> <span class=\"n\">string.to_nat</span> <span class=\"n\">list1</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">list1</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">list2</span>\n</code></pre></div>\n<p>Produces the output </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">1977</span>\n<span class=\"o\">,</span> <span class=\"mi\">1802</span>\n<span class=\"o\">,</span> <span class=\"mi\">1856</span>\n<span class=\"o\">,</span> <span class=\"mi\">1309</span>\n<span class=\"o\">,</span> <span class=\"mi\">2003</span>\n<span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"mi\">19732</span><span class=\"o\">,</span> <span class=\"mi\">17982</span><span class=\"o\">,</span> <span class=\"mi\">18522</span><span class=\"o\">,</span> <span class=\"mi\">13052</span><span class=\"o\">,</span> <span class=\"mi\">19992</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The first list is the correct data, I have no clue where the data in the second list is coming from.</p>",
        "id": 218574706,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606923864
    },
    {
        "content": "<p>looks like it's multiplying by 10 and subtracting 38 = <code>0</code> - <code>\\n</code></p>",
        "id": 218575262,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606924067
    },
    {
        "content": "<p>which isn't exactly ideal, but try removing trailing newlines from the strings before passing them to <code>string.to_nat</code></p>",
        "id": 218575387,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606924105
    },
    {
        "content": "<p>Yes, I was trying to figure out what the pattern was! Thanks Reid</p>",
        "id": 218575422,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606924122
    },
    {
        "content": "<p>Yes, this did it. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">io.mk_file_handle</span> <span class=\"s2\">\"src/foo.txt\"</span> <span class=\"n\">io.mode.read</span><span class=\"o\">,</span>\n <span class=\"n\">io.run_tactic</span> <span class=\"bp\">$</span>\n <span class=\"k\">do</span> <span class=\"n\">list1</span> <span class=\"bp\">←</span>\n  <span class=\"n\">iterate_at_most</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">read_line</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">input.pop_back</span><span class=\"o\">,</span>\n    <span class=\"n\">str</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">input.to_list.as_string</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"n\">str</span><span class=\"o\">),</span>\n   <span class=\"n\">list2</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">list.map</span> <span class=\"n\">string.to_nat</span> <span class=\"n\">list1</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">list1</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">list2</span>\n</code></pre></div>",
        "id": 218576449,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606924548
    },
    {
        "content": "<p>Mario used the <a href=\"https://leanprover-community.github.io/mathlib_docs/data/buffer/parser.html\"><code>data.buffer.parser</code> library in core Lean</a> to write some nice functions for parsing in the <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code/near/150684702\">Advent of Code thread</a>.</p>",
        "id": 218578334,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606925329
    }
]