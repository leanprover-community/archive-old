[
    {
        "content": "<p>Hi all, <br>\nis it possible to create an instance of decidable if a set is empty ?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">decidable_is_empty</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">H₀</span><span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">H₁</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 196057696,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1588434775
    },
    {
        "content": "<p>Assuming you want to do it constructively, you also need to assume <code>decidable_pred S</code>.</p>",
        "id": 196057781,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588434879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/instance.20of.20decidable_set_is_empty/near/196057781\" title=\"#narrow/stream/113489-new-members/topic/instance.20of.20decidable_set_is_empty/near/196057781\">said</a>:</p>\n<blockquote>\n<p>Assuming you want to do it constructively, you also need to assume <code>decidable_pred S</code>.</p>\n</blockquote>\n<p>ok, but still I have no idea where to start, after intros I get one goal that I don't know how to tackle</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">H₀</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">S</span>\n<span class=\"err\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196058312,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1588435537
    },
    {
        "content": "<p>a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> is a lot better than a tactic state</p>",
        "id": 196063123,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588442467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> the exemple is in my first post</p>",
        "id": 196063343,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1588442792
    },
    {
        "content": "<p>Oh thanks, I should read harder</p>",
        "id": 196063444,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588442937
    },
    {
        "content": "<p>Basically I'm blocked after intros, i've tried to lookup similar code online, but did not find my inspiration</p>",
        "id": 196063458,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1588442989
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">decidable_is_empty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_false</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hS</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ha</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_true</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">eq_bot_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- crazy library_search answer</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">decidable_is_empty</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">propext</span>\n<span class=\"cm\">quot.sound</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>I don't know anything about constructivism, I don't know whether the list of axioms is acceptable.</p>",
        "id": 196063819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588443602
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">decidable_is_empty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n\n\n<p>That's how I'd do it, but presumably that's not what you're looking for</p>",
        "id": 196063952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588443832
    },
    {
        "content": "<p>No no!</p>",
        "id": 196063993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588443868
    },
    {
        "content": "<p>oh I see</p>",
        "id": 196063996,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588443874
    },
    {
        "content": "<p>Still, I think you are supposed to use <code>decidable_of_iff</code> for this</p>",
        "id": 196064002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588443892
    },
    {
        "content": "<p>How are my axioms (when I was pretending not to be a mathematician)?</p>",
        "id": 196064011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588443915
    },
    {
        "content": "<p>Your axioms are fine for constructivity, but it's still possible to write decidable instances with bad reduction behavior without extra axioms, I think</p>",
        "id": 196064060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588443963
    },
    {
        "content": "<p>I can't tell easily whether your definition is good.</p>",
        "id": 196064064,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588443980
    },
    {
        "content": "<p>Actually, it is fine. But <code>decidable_of_iff</code> is clearer</p>",
        "id": 196064069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588444006
    },
    {
        "content": "<p>my lovely tactic mode proof isn't clear??</p>",
        "id": 196064083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588444053
    },
    {
        "content": "<p>This is a construction, not a proof</p>",
        "id": 196064106,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588444066
    },
    {
        "content": "<p>well the computer scientists call it a construction...</p>",
        "id": 196064143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588444083
    },
    {
        "content": "<p>my noncomputable construction may as well be a proof :-)</p>",
        "id": 196064154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588444101
    },
    {
        "content": "<p>Yes, a proof of <code>true</code>.</p>",
        "id": 196064159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588444117
    },
    {
        "content": "<p>Or as the \"computer scientists\" call it, <code>p ∨ ¬ p</code></p>",
        "id": 196064224,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588444241
    },
    {
        "content": "<p>same thing!</p>",
        "id": 196064226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588444254
    },
    {
        "content": "<p>I think sarcasm should be an axiom.</p>",
        "id": 196064235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588444296
    },
    {
        "content": "<p>wow, so decidable is a type. I guess I shouldn't have used tactic mode after all :-/</p>",
        "id": 196064278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588444347
    },
    {
        "content": "<p>I've never really even looked at the definition of stuff like decidable_pred.</p>",
        "id": 196064284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588444372
    },
    {
        "content": "<p>I was surprised <code>by apply_instance</code> didn't do the original question automatically. That's some computer science people missing a trick, right? <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> is the kind of person that can make this magically happen.</p>",
        "id": 196064299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588444441
    },
    {
        "content": "<p>I thought proofs were equal to programs or something.</p>",
        "id": 196064342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588444474
    },
    {
        "content": "<p>I guess you could make an instance that if <code>fintype A</code> and <code>decidable_pred s</code> and <code>decidable_pred t</code>, then <code>decidable (s = t)</code>. But I don't think this is going to be that well used, since you should probably be using finsets for this anyway.</p>",
        "id": 196064351,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588444529
    },
    {
        "content": "<p>Here's a <code>decidable_of_iff</code> proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">decidable_is_empty&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I was hoping that <code>simp</code> would do it earlier but I ended up having to <code>split</code> and <code>ext</code> first.</p>",
        "id": 196064880,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588445383
    },
    {
        "content": "<p>Thanks alot guys. The classical proof is nice, sadly noncomputable. The one based on decidable_off_iff worked for me. As for the first one <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> my lean setup does not have the eq_bot_iff.mpr (I guess I should check my install)</p>",
        "id": 196096896,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1588503056
    },
    {
        "content": "<p>Try <code>leanproject up</code>?</p>",
        "id": 196097917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588504509
    },
    {
        "content": "<p>Either you should or I should :-)</p>",
        "id": 196097978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588504602
    },
    {
        "content": "<p><code>leanproject up</code> worked, thanks again</p>",
        "id": 196149776,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1588578469
    }
]