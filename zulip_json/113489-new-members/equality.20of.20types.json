[
    {
        "content": "<p>I have the feeling that I don't fully understand yet the boundaries of how I can use the fact that two types are equal. Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">W_eq_X</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_X_eq_p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- This fails:</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    rewrite tactic failed, motive is not type correct</span>\n<span class=\"cm\">      λ (_a : Type ?), (∃ (x : W), q x) = p = ((∃ (x : _a), q x) = p)</span>\n<span class=\"cm\">    state:</span>\n<span class=\"cm\">    ⊢ (∃ (x : W), q x) = p</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rw</span> <span class=\"n\">W_eq_X</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists_X_eq_p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- But this works, and does basically the same thing:</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists_X_eq_p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232219842,
        "sender_full_name": "Greg Price",
        "timestamp": 1616995314
    },
    {
        "content": "<p>Here the types W and X are the same. But if I try to use that equality with <code>rw</code> / <code>rewrite</code>, I get an error.</p>\n<p>But then on the other hand I can accomplish exactly the same thing -- that is, make exactly the same change to what the goal is, effectively replacing W with X -- by using <code>transitivity</code> with an appropriate argument, and then <code>refl</code>.</p>",
        "id": 232219980,
        "sender_full_name": "Greg Price",
        "timestamp": 1616995457
    },
    {
        "content": "<p>One piece of this which I definitely don't understand is the error message: \"motive is not type correct\". I've seen \"motive\" mentioned in the documentation, in the context of explaining <code>rec</code> / <code>rec_on</code> for inductive types. So one specific question is: is this \"motive\" from a <code>rec</code> call that <code>rewrite</code> is using internally?</p>\n<p>I don't really have a firm grasp of what it means there either, though, and would be grateful for any explanation of that.</p>\n<p>Then: which piece of this is the \"motive\" that is not type correct? Is it that whole equality on the next line of the message? And what is the <code>_a : Type ?</code> in that equality?</p>",
        "id": 232220367,
        "sender_full_name": "Greg Price",
        "timestamp": 1616995857
    },
    {
        "content": "<p>Stepping back from the specifics of the error message, I think I have an idea -- thanks to the process of producing this MWE -- of what may be the reason why the <code>rw W_eq_X</code> isn't accepted while the <code>transitivity …, refl</code> is.</p>\n<p>I think perhaps the point is something to do with Lean wanting to verify that the types are not just equal, but definitionally equal, before accepting one as a substitute for another when it's being used in the type of some other variable. So the <code>transitivity</code> just introduces a new goal, which is fine, an equality between two expressions of type <code>Prop</code>, which is fine. And then <code>refl</code> asks Lean to look and see that in fact the types tucked inside, along with everything else, are definitionally equal and to discharge that goal.</p>",
        "id": 232220744,
        "sender_full_name": "Greg Price",
        "timestamp": 1616996193
    },
    {
        "content": "<p>But in <code>rw W_eq_X</code>, I'm asking Lean to use the fact that those types are merely <em>equal</em>, as previously proven, and merely-equal isn't good enough.</p>",
        "id": 232220764,
        "sender_full_name": "Greg Price",
        "timestamp": 1616996235
    },
    {
        "content": "<p>It happens that indeed that equality is a definitional equality -- in fact it was proven in the first place with just <code>rfl</code>. But the fact which I'm giving <code>rw</code> to try to use is the fact of mere equality.</p>",
        "id": 232220847,
        "sender_full_name": "Greg Price",
        "timestamp": 1616996365
    },
    {
        "content": "<p>If that's right, then my practical question is: let's imagine that in a real development, W is some definition and X is the details of its construction, and I want to be able to refer to the thing by its name, W, in the statements of theorems, but then in their proofs I want to unpack it into its implementation X in order to get at the details.</p>\n<p>I'd like to take the fact that W equals X, and package it up into some simp lemmas: maybe one for <code>W = X</code> itself, or maybe several for things like projections out of it. Or even non-simp lemmas -- but just lemmas that I can refer to by name, so I can pass them to <code>rw</code> or <code>simp</code> to specify what to do with some expression involving <code>W</code>.</p>\n<p>And that works great, except that with the tools I've learned how to use so far, this doesn't seem to be possible where <code>W</code> is being used in a type. What are ways that people handle this?</p>",
        "id": 232221414,
        "sender_full_name": "Greg Price",
        "timestamp": 1616996980
    },
    {
        "content": "<p>If <code>W = X</code> is a <code>rfl</code>, then <code>dsimp</code> should be able to apply it anywhere, incl. inside types.</p>",
        "id": 232222510,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616998070
    },
    {
        "content": "<p>(though we don't use this style in mathlib, so I'm not completely sure that it'll work in all cases)</p>",
        "id": 232222572,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616998099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/equality.20of.20types/near/232222510\">said</a>:</p>\n<blockquote>\n<p>If <code>W = X</code> is a <code>rfl</code>, then <code>dsimp</code> should be able to apply it anywhere, incl. inside types.</p>\n</blockquote>\n<p>Oh very interesting, thanks!</p>",
        "id": 232226395,
        "sender_full_name": "Greg Price",
        "timestamp": 1617001516
    },
    {
        "content": "<p>If this style isn't used in mathlib, what are the alternative idioms that are used instead?</p>\n<p>Or perhaps the answer is that it depends a lot on the details -- in that case I can try to expand the example to be concrete enough for an answer.</p>",
        "id": 232226581,
        "sender_full_name": "Greg Price",
        "timestamp": 1617001660
    },
    {
        "content": "<p>Trying out <code>dsimp</code> in my example, this works great:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">W_eq_X</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists_X_eq_p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232226976,
        "sender_full_name": "Greg Price",
        "timestamp": 1617001945
    },
    {
        "content": "<p>I think <code>subst W_eq_X</code> would work too</p>",
        "id": 232236676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617008257
    },
    {
        "content": "<p><code>dsimp</code> is fine; also <code>dunfold</code> and <code>delta</code> will do definitional rewriting</p>",
        "id": 232238472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617009205
    },
    {
        "content": "<p>The \"motive is not type correct\" error is because rewrite needs to generalize the variable in the position of <code>W</code>/<code>X</code>, and this variable is not defeq to either <code>W</code> or <code>X</code>, meaning that things that depend on it, like <code>Exists</code> in this case, will fail to type check</p>",
        "id": 232238672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617009317
    },
    {
        "content": "<p>This is a limitation of Lean's tactics, rather than a limitation of dependent type theory, right?</p>",
        "id": 232239131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617009583
    },
    {
        "content": "<p><code>subst</code> fails but for an unrelated reason:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  subst tactic failed, given expression is not a local constant</span>\n<span class=\"cm\">  state:</span>\n<span class=\"cm\">  ⊢ (∃ (x : W), q x) = p</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">subst</span> <span class=\"n\">W_eq_X</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists_X_eq_p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232297448,
        "sender_full_name": "Greg Price",
        "timestamp": 1617036043
    },
    {
        "content": "<p>I think it's saying that it will only work if the thing being replaced, here <code>W</code>, is a local constant i.e. from the local context. I'm pretty sure I've run into this in situations where that applied, too, so that may also come in handy.</p>",
        "id": 232297906,
        "sender_full_name": "Greg Price",
        "timestamp": 1617036269
    },
    {
        "content": "<p>Right, at least one side of the equality has to be a variable for <code>subst</code> to apply</p>",
        "id": 232298031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/equality.20of.20types/near/232238472\">said</a>:</p>\n<blockquote>\n<p><code>dsimp</code> is fine; also <code>dunfold</code> and <code>delta</code> will do definitional rewriting</p>\n</blockquote>\n<p>These also work, thanks! I had not seen those tactics before.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">W</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists_X_eq_p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">W</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists_X_eq_p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232298211,
        "sender_full_name": "Greg Price",
        "timestamp": 1617036379
    },
    {
        "content": "<p>you shouldn't use <code>delta</code> under normal circumstances, it's a very low level tactic</p>",
        "id": 232298263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036410
    },
    {
        "content": "<p>I'm not actually sure what the difference between <code>dsimp</code> and <code>dunfold</code> is; they have slightly different configuration options but both call in to the same underlying rewriting mechanism</p>",
        "id": 232298409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036473
    },
    {
        "content": "<p>(the syntax is a bit different)</p>",
        "id": 232298451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036482
    },
    {
        "content": "<p>The docstring for <code>delta</code> says:</p>\n<blockquote>\n<p>Similar to <code>dunfold</code>, but performs a raw delta reduction, rather than using an equation associated with the defined constants.</p>\n</blockquote>\n<p>The term \"delta reduction\" is new to me. The web tells me it means evaluating a primitive function on given arguments -- a lot like a beta reduction, it seems, but with a primitive rather than an explicit lambda expression.</p>",
        "id": 232298478,
        "sender_full_name": "Greg Price",
        "timestamp": 1617036490
    },
    {
        "content": "<p>delta reduction is replacing a constant defined with <code>def</code> with the body of the definition, i.e. the original meaning of \"true by definition\"</p>",
        "id": 232298589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036536
    },
    {
        "content": "<p>this is what makes <code>def</code> different from, say, <code>constant</code></p>",
        "id": 232298709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036590
    },
    {
        "content": "<p>Ah interesting, that's a bit different from the definition I'd found (in a non-Lean context), then -- though clearly related</p>",
        "id": 232298821,
        "sender_full_name": "Greg Price",
        "timestamp": 1617036615
    },
    {
        "content": "<p>What is it that <code>dunfold</code> does, or <code>unfold</code> for that matter? The docstring for <code>dunfold</code> points at <code>unfold</code>, and the latter says it uses \"equational lemmas associated with the definition\".</p>",
        "id": 232298980,
        "sender_full_name": "Greg Price",
        "timestamp": 1617036684
    },
    {
        "content": "<p>But I'm not sure what an \"equational lemma\" is. Is it just a lemma which has an equality as its conclusion?</p>",
        "id": 232299127,
        "sender_full_name": "Greg Price",
        "timestamp": 1617036736
    },
    {
        "content": "<p>It's a set of automatically generated lemmas created with every definition made using the equation compiler</p>",
        "id": 232299285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036806
    },
    {
        "content": "<p>Hmm, I see, and:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">W : Type u</span>\n<span class=\"cm\">W.equations._eqn_1 : W = X</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">W</span>\n</code></pre></div>",
        "id": 232299450,
        "sender_full_name": "Greg Price",
        "timestamp": 1617036862
    },
    {
        "content": "<p>So I guess that's the equational lemma there.</p>",
        "id": 232299501,
        "sender_full_name": "Greg Price",
        "timestamp": 1617036890
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo.equations._eqn_1</span>\n<span class=\"c1\">-- @[_refl_lemma]</span>\n<span class=\"c1\">-- theorem ALC.foo.equations._eqn_1 : foo = 1 :=</span>\n<span class=\"c1\">-- eq.refl foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">bar.equations</span>\n<span class=\"c1\">-- bar.equations._eqn_1 : bar 0 = 1</span>\n<span class=\"c1\">-- bar.equations._eqn_2 : ∀ (n : ℕ), bar (n + 1) = 0</span>\n</code></pre></div>",
        "id": 232299517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036899
    },
    {
        "content": "<p>yes, that's right</p>",
        "id": 232299575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617036929
    },
    {
        "content": "<p>The idea is that when \"unfolding\" <code>bar</code>, you would much rather see those equations than the actual definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">bar._main</span>\n<span class=\"c1\">-- def bar._main : ℕ → ℕ :=</span>\n<span class=\"c1\">-- λ (ᾰ : ℕ), ᾰ.cases_on (id_rhs ℕ 1) (λ (ᾰ : ℕ), id_rhs ℕ 0)</span>\n</code></pre></div>\n<p>Using <code>delta bar</code> will give you this</p>",
        "id": 232299783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617037007
    },
    {
        "content": "<p>Hmm, yeah, I see.</p>",
        "id": 232300177,
        "sender_full_name": "Greg Price",
        "timestamp": 1617037169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/equality.20of.20types/near/232238672\">said</a>:</p>\n<blockquote>\n<p>The \"motive is not type correct\" error is because rewrite needs to generalize the variable in the position of <code>W</code>/<code>X</code>, and this variable is not defeq to either <code>W</code> or <code>X</code>, meaning that things that depend on it, like <code>Exists</code> in this case, will fail to type check</p>\n</blockquote>\n<p>Interesting. So <code>rewrite</code> in order to operate needs the thing it's rewriting to be generalizable -- meaning I guess that it can be replaced with anything with the same type, and the expression as a whole would still type-check. So in particular this is unlikely to work with anything that's used in the type of something else.</p>\n<p>Whereas <code>dsimp</code>, <code>dunfold</code>, <code>delta</code>, and perhaps <code>subst</code> but I haven't tested it, are able to use the more specific identity of what they're substituting in, and the fact that it's defeq to the thing being replaced.</p>",
        "id": 232300874,
        "sender_full_name": "Greg Price",
        "timestamp": 1617037402
    },
    {
        "content": "<p><code>subst</code> isn't in the same category of the others, but <code>change</code> also deserves a place on that list. These tactics all change the goal to something definitionally equal, and they do it by basically doing nothing - the next term you give will simply have the changed type, and the kernel will end up being responsible for checking that any type mismatches that arise are correct up to defeq</p>",
        "id": 232305497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617039226
    },
    {
        "content": "<p><code>subst</code> is kind of like <code>rw</code>, except it can't fail (assuming the target equality has a variable on one side) because it essentially comes \"pre-generalized\": the type-correctness of the typing context itself ensures that the operation of the tactic will go without a hitch. You can think of <code>rw (e : a = b)</code> as doing <code>have h : a = b := e, generalize : a = x, subst h</code>, and the <code>generalize</code> step is the one that can possibly fail if there are reasons why some occurrence of <code>a</code> in the context has to be specifically <code>a</code> and not just any term.</p>",
        "id": 232306028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617039424
    },
    {
        "content": "<p>Very interesting, thanks!</p>",
        "id": 232306306,
        "sender_full_name": "Greg Price",
        "timestamp": 1617039531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/equality.20of.20types/near/232305497\">said</a>:</p>\n<blockquote>\n<p>and they do it by basically doing nothing - the next term you give will simply have the changed type, and the kernel will end up being responsible for checking that any type mismatches that arise are correct up to defeq</p>\n</blockquote>\n<p>This touches on something else I'd like to understand better: what the interface looks like between the kernel, and the machinery on top of it that we interact with when writing proofs.</p>\n<p>Does this example translate to the following? We had a goal, which was the expected type of a proof term to stick into the hole we're currently working to fill in our proof-being-written. And then we change the goal, just meaning that we now decide on a different type we're going to use for the proof term we actually write. So then the kernel will be handed a proof term where when it gets to the subterm we're currently writing, it expects one type, but ends up judging it to have another, and it has to check that those types are defeq.</p>",
        "id": 232307403,
        "sender_full_name": "Greg Price",
        "timestamp": 1617039905
    },
    {
        "content": "<p>That's right</p>",
        "id": 232309130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617040558
    },
    {
        "content": "<p>Actually, I lied a bit when I said the tactics do nothing; they could validly do nothing to the term under construction but in practice they instead add an identity function to the term, i.e. if the current partial proof term is <code>(_ : T)</code> and you <code>change U</code> then this changes the proof term to <code>(@id U _ : T)</code>. The reason for this so that the precise form of the term <code>U</code> is retained in the proof term, and we ensure that the kernel will actually be faced with a defeq goal of the form <code>T = U</code> and not <code>T = V</code> where <code>V</code> is the actual type of whatever you give next. Since <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">definitional equality in lean is not transitive</a>, this can actually impact the type correctness of some terms, but usually it just impacts performance.</p>",
        "id": 232309822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617040843
    },
    {
        "content": "<p>Ah interesting</p>",
        "id": 232309961,
        "sender_full_name": "Greg Price",
        "timestamp": 1617040896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/equality.20of.20types/near/232309822\">said</a>:</p>\n<blockquote>\n<p>Since <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">definitional equality in lean is not transitive</a></p>\n</blockquote>\n<p>I'd seen a brief mention of this fact in the docs somewhere. But it looks like this is a rather more detailed discussion, thanks! I'll have to come back and read more later.</p>",
        "id": 232310427,
        "sender_full_name": "Greg Price",
        "timestamp": 1617041087
    }
]