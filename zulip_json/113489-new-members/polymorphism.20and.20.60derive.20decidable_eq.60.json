[
    {
        "content": "<p>When doing a non-polymorphic definition, <code>derive decidable_eq</code> works fine in the following example. However, defining <code>pnat</code> as a <code>Type u</code> instead of a <code>Type</code> or a <code>Type 37</code> breaks it. Why does this happens, what difference does adding a universe variable makes for <code>derive</code>? <br>\nI don't get much from the error message: <code>injection tactic failed, argument must be an equality proof where lhs and rhs are of the form (c ...), where c is a constructor</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">pnat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">→</span> <span class=\"n\">pnat</span>\n</code></pre></div>",
        "id": 242700956,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623744879
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">pnat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">→</span> <span class=\"n\">pnat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">pnat.zero</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span> <span class=\"c1\">-- works fine for me</span>\n</code></pre></div>",
        "id": 242703189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623746289
    },
    {
        "content": "<p>Are you on current mathlib master?</p>",
        "id": 242703226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623746326
    },
    {
        "content": "<p>Wait, it's weird. Your code works for me too, but mine was originally in a section, and if I place it in a section then it doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n\n  <span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n  <span class=\"kd\">@[derive decidable_eq]</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">pnat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">→</span> <span class=\"n\">pnat</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242703477,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623746479
    },
    {
        "content": "<p>Sorry for not posting this initially , I didn't imagine the section could have anything to do it</p>",
        "id": 242703542,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623746520
    }
]