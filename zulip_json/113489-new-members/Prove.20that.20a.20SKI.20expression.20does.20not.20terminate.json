[
    {
        "content": "<p>Trying to find the best way to prove that a SKI expression does not terminate using induction. We say that an expression terminates iff it evaluates to some unique irreducible constant <code>Z</code> in a finite number of steps.</p>\n<p>Expression <code>S I I (S I I)</code> reduces to itself, so it cannot possibly terminate. But in order to prove that, we seem to be forced to use natural numbers or function iterator <code>eval^[n]</code>. Can we somehow prove it directly using only induction on <code>term</code> type?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"kn\">open</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">~</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">app</span>\n<span class=\"kd\">def</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">K</span> <span class=\"bp\">~</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">~</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span> <span class=\"bp\">~</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">c</span> <span class=\"bp\">~</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">~</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₀</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₁</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 275586553,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647470544
    },
    {
        "content": "<p>Based on some example evaluations, I do not see \"<code>S I I (S I I)</code> reduces to itself\". It looks more like it reduces to <code>S I I (I ... (I (S I I)))</code></p>",
        "id": 275588922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647472226
    },
    {
        "content": "<p>Right, I was not precise enough. Fixed.</p>",
        "id": 275589277,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647472522
    },
    {
        "content": "<p>Having a theorem of the form <code>term (eval^[n] e) -&gt; term e</code> will certainly be helpful since each evaluation involves many steps before reaching something useful</p>",
        "id": 275589564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647472718
    },
    {
        "content": "<p>Yeah, it is easy to prove, but I would like to avoid it if possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">term_iff_iter_eval</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">term</span> <span class=\"n\">e</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eval</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction'</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">induction'</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">term.mk₀</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">term.mk₁</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">term_of_term_iter_eval</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">eval</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">term.mk₁</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275589919,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647472976
    },
    {
        "content": "<p>you need to think about the induction hypothesis here. Many other terms appear in the evaluation</p>",
        "id": 275590076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647473105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bad</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">bad</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eval</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">bad</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">~</span> <span class=\"n\">bad</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bad</span> <span class=\"n\">m</span> <span class=\"bp\">~</span> <span class=\"n\">bad</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eval</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">bad</span> <span class=\"mi\">0</span> <span class=\"bp\">~</span> <span class=\"n\">bad</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bad</span> <span class=\"n\">n</span> <span class=\"bp\">~</span> <span class=\"n\">bad</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">bad</span> <span class=\"n\">m</span> <span class=\"bp\">~</span> <span class=\"n\">bad</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">aux</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 275590357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647473320
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bad</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">bad</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">is_bad</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_bad</span> <span class=\"o\">(</span><span class=\"n\">bad</span> <span class=\"n\">m</span> <span class=\"bp\">~</span> <span class=\"n\">bad</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_bad</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">~</span> <span class=\"n\">bad</span> <span class=\"n\">m</span> <span class=\"bp\">~</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">bad</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_bad_not_term</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_bad</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">term</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">h1</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">is_bad.base</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">is_bad.K</span> <span class=\"n\">_</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">is_bad.base</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">is_bad_not_term</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">is_bad.base</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275594569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647476996
    },
    {
        "content": "<p>That's an interesting approach. I was hoping we can somehow avoid introducing natural numbers and/or new datatypes, but seems I'm out of luck. This was my proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">has_Z</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₀</span> <span class=\"o\">:</span> <span class=\"n\">has_Z</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₁</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_Z</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">has_Z</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk₂</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_Z</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">has_Z</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_Z_of_has_Z_eval</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_Z</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">has_Z</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">cases'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">has_Z.mk₂</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cases'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">has_Z.mk₀.mk₂.mk₁</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h.mk₁.mk₂.mk₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h.mk₂.mk₂.mk₁</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">cases'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ih_e</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">has_Z.mk₂</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases'</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h.mk₂</span> <span class=\"o\">},</span> <span class=\"n\">exact</span> <span class=\"n\">h.mk₂.mk₁.mk₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h.mk₂.mk₁</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_Z_of_term</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_Z</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">has_Z.mk₀</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">has_Z_of_has_Z_eval</span> <span class=\"n\">ih</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">has_Z_of_term</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"o\">}}</span>\n</code></pre></div>",
        "id": 275599654,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1647482451
    },
    {
        "content": "<p>Well, this only proves that the term doesn't have a <code>Z</code> in it; it wouldn't work in general for proving nontermination (in the sense of reaching a term which is a fixed point of <code>eval</code>).</p>",
        "id": 275604333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647488430
    },
    {
        "content": "<p>The basic structure of the proof here is to give an explicit characterization of a set of terms which is closed under the <code>eval</code> function and for which none of them are <code>Z</code> or normal forms or whatever</p>",
        "id": 275604362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647488494
    },
    {
        "content": "<p>There aren't any new datatypes introduced, but nat is used in the definition of <code>bad</code>, is that what you mean? You can define <code>bad</code> inductively if you prefer but I think this gives the cleanest proof</p>",
        "id": 275604445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647488613
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">bad</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">bad</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bad</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">bad</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">is_bad</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bad</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bad</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">is_bad</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">~</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bad</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">bad</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">is_bad</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">~</span> <span class=\"n\">m</span> <span class=\"bp\">~</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_bad_not_term</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_bad</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">term</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">h1</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hm</span> <span class=\"n\">hn</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hm</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">is_bad.base</span> <span class=\"n\">hn.succ</span> <span class=\"n\">hn.succ</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">is_bad.K</span> <span class=\"n\">hm'</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">hm</span> <span class=\"n\">hn</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">is_bad.base</span> <span class=\"n\">hm</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">is_bad_not_term</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">is_bad.base</span> <span class=\"n\">bad.zero</span> <span class=\"n\">bad.zero</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275604660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647488936
    },
    {
        "content": "<p>Here's a version of your proof using <code>no_Z</code> instead of <code>is_bad</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">no_Z</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">no_Z</span> <span class=\"n\">K</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">no_Z</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">no_Z</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">no_Z</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">no_Z</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">no_Z_not_term</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">no_Z</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">term</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">h1'</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">z</span> <span class=\"n\">ha</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">ih</span> <span class=\"n\">h1'</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">z</span> <span class=\"n\">ha</span> <span class=\"n\">hz</span> <span class=\"n\">iha</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"n\">ha'</span> <span class=\"n\">hy</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha'</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">ha''</span> <span class=\"n\">hx</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha''</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">ha'''</span> <span class=\"n\">hx</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hx.app</span> <span class=\"n\">hz</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hx.app</span> <span class=\"n\">hz</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">hy.app</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">iha</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">hz</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">no_Z.I</span> <span class=\"o\">:</span> <span class=\"n\">no_Z</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">no_Z.S.app</span> <span class=\"n\">no_Z.K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">no_Z.K</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">no_Z.SII</span> <span class=\"o\">:</span> <span class=\"n\">no_Z</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">no_Z.S.app</span> <span class=\"n\">no_Z.I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">no_Z.I</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">~</span> <span class=\"n\">I</span> <span class=\"bp\">~</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">no_Z_not_term</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">no_Z.SII.app</span> <span class=\"n\">no_Z.SII</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275605842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647490580
    }
]