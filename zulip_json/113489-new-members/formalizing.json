[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">C</span> <span class=\"n\">P</span> <span class=\"n\">q</span> <span class=\"n\">A</span> <span class=\"n\">V₀</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hVads</span> <span class=\"o\">:</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"n\">V₀</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">Vads</span> <span class=\"bp\">/</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hA</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hVads</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272822258,
        "sender_full_name": "Parivash",
        "timestamp": 1645545141
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 272822440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645545207
    },
    {
        "content": "<p>Hi, <br>\nwhy </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">hA</span>\n</code></pre></div>\n<p>doesn't work here?</p>",
        "id": 272822577,
        "sender_full_name": "Parivash",
        "timestamp": 1645545254
    },
    {
        "content": "<p>I don't know what <code>∑'</code> is -- can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? But the answer might be \"you're trying to rewrite under a binder\". Does <code>simp_rw h1 at hA</code> work?</p>",
        "id": 272823935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645545732
    },
    {
        "content": "<p>You can try <code>conv_rhs at hA { congr, funext, rw h1, },</code> to enter the right-hand side of <code>hA</code>, go inside the sum, then rewrite.</p>",
        "id": 272824930,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645546104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> \"deep recursion was detected at 'whnf' (potential solution: increase stack space in your system)\" (probably because of <code>θ 0</code> on the rhs of the rewrite)</p>",
        "id": 272825094,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645546167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nThanks</p>",
        "id": 272825906,
        "sender_full_name": "Parivash",
        "timestamp": 1645546481
    },
    {
        "content": "<p>yeah that is pretty weird (edit: oh, I see you're right! Of course it gets into an infinite loop :-/ ). Here's a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">C</span> <span class=\"n\">P</span> <span class=\"n\">q</span> <span class=\"n\">A</span> <span class=\"n\">V₀</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hVads</span> <span class=\"o\">:</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"n\">V₀</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">Vads</span> <span class=\"bp\">/</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">P</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hA</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hVads</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hA'</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h1</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n</code></pre></div>\n<p>Now <code>hA'</code> is what you were looking for (I hope).</p>",
        "id": 272835851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645550171
    },
    {
        "content": "<p>got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hA</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hVads</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hA</span> <span class=\"o\">{</span><span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272837673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645550886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nOhh, Yes, That's the easiest way, Good job<br>\nThanks for taking time</p>",
        "id": 272838547,
        "sender_full_name": "Parivash",
        "timestamp": 1645551244
    }
]