[
    {
        "content": "<p>Hi, I proved a small fact about finsets and was wondering if there is a better/shorter way to do it. For any finset, if filtering with some predicate <code>p</code> removes some elements, then elements of p that do not satisfy <code>p</code> exist.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.card</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">extract_filtered_element</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">finset.card</span> <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finset.card</span> <span class=\"n\">s</span><span class=\"o\">):</span>\n<span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span> <span class=\"n\">finset.filter_card_add_filter_neg_card_eq_card</span> <span class=\"n\">p</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_add_lt_add_left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.card_pos</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.mem_filter</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266498937,
        "sender_full_name": "Evan Lohn",
        "timestamp": 1640951042
    },
    {
        "content": "<p>You could probably do the last four lines in one line using this.1 and pointy brackets</p>",
        "id": 266499907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640952190
    },
    {
        "content": "<p>Not with <code>this.1</code>, since <code>this</code> is an existential, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.card</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">extract_filtered_element</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">finset.card</span> <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">finset.card</span> <span class=\"n\">s</span><span class=\"o\">):</span>\n<span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span> <span class=\"n\">finset.filter_card_add_filter_neg_card_eq_card</span> <span class=\"n\">p</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_add_lt_add_left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.card_pos</span><span class=\"o\">,</span> <span class=\"n\">finset.nonempty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists_imp_exists</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exists_prop.mpr</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_filter.mp</span> <span class=\"n\">hx</span><span class=\"o\">))</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266500837,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1640953452
    },
    {
        "content": "<p>You can also prove it using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_le_card_of_inj_on\">docs#finset.card_le_card_of_inj_on</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finset.card_le_card_of_inj_on</span> <span class=\"n\">id</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">finset.mem_filter</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266502638,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640956088
    },
    {
        "content": "<p>This lemma should be stated using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.nonempty\">docs#finset.nonempty</a></p>",
        "id": 266504311,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640958256
    },
    {
        "content": "<p>It should be an <code>iff</code> too, right?</p>",
        "id": 266530887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640996248
    }
]