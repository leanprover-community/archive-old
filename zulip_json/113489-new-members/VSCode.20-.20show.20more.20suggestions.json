[
    {
        "content": "<p>When in tactic mode and I type <code>convert mul_lt</code> my VSCode automatically suggests many good options, but also misses many. For example <code>mul_lt_mul</code> and <code>mul_lt_mul'</code> show up, but not the double and triple prime options. Many times I have missed important lemmas because of this. Now, if I go ahead and type <code>convert mul_lt_mul</code> then hit ctrl+space I do get all the options. So I believe either VSCode or the Lean extension is pruning suggestions falling under a common prefix, which probably makes sense most the time. But sometimes I want to tell VSCode to just show all the damn matches and to let me deal with it. I've dug through VSCode settings and googled around for help on how to do this with VSCode generally, but I'm stuck. Any help is appreciated.</p>",
        "id": 252836819,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631301713
    },
    {
        "content": "<p>I get the double and triple primed options, but perhaps I have less imported than you. I think it cuts off after 100 suggestions?</p>",
        "id": 252839756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631303075
    },
    {
        "content": "<p>I'm working through your Formalising Maths workshop exercises, so I don't think I have any weird imports (only data.real.basis and tactic in the file week_3/Part_A_limits.lean). I've attached a screen shot of what happens when I type <code>convert mul_lt</code> (no ctrl+space, just auto suggestions). <a href=\"/user_uploads/3121/gTszYT01aUh5ZZkOscB9Z1_S/tmp.png\">tmp.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gTszYT01aUh5ZZkOscB9Z1_S/tmp.png\" title=\"tmp.png\"><img src=\"/user_uploads/3121/gTszYT01aUh5ZZkOscB9Z1_S/tmp.png\"></a></div>",
        "id": 252841763,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631303976
    },
    {
        "content": "<p>Try hitting Esc and then ctrl-space again. Do you get far far more?</p>",
        "id": 252842124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631304106
    },
    {
        "content": "<p>I was a little frustrated after I finished my proof and then looked at your nice use of <code>convert mul_lt_mul'' ..</code>. I thought, \"How did I miss that one\" and after I figured out how I missed it I came here to start this thread.</p>",
        "id": 252842153,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631304120
    },
    {
        "content": "<p>Yes. I do get all (or, at least, more) suggestions then. But I'd prefer to not always have to do that. Do I now always just have to Esc then ctrl-space when I think there might be more suggestions. Not a huge deal, but, in my (newbie) opinion, its a bit of a pain point for exploration.</p>",
        "id": 252842528,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631304268
    },
    {
        "content": "<p>I was hoping there was either a Lean extension (or a general VSCode) option to just show everything.</p>",
        "id": 252842604,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631304300
    },
    {
        "content": "<p>When I was writing proofs I would typically just write something which was comprehensible to, but perhaps not findable by, the student. I guess my personal thought process was: \"there is bound to be a lemma of the form 0&lt;=a&lt;c and 0&lt;=b&lt;d implies a<em>b&lt;c</em>d, so let's just find it\". I totally agree about the weird Esc then ctrl-space thing, I've never known why you sometimes need to do this to get far more options, it's just a trick I've picked up. I think I've mentioned it before but nobody ever explained what was going on (which is surprising because usually people are good at explaining everything here).</p>",
        "id": 252842744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631304360
    },
    {
        "content": "<p>In the mean time, do you know this trick? Exit your proof completely and try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 252842908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631304415
    },
    {
        "content": "<p>This is a trick I use fairly often, as well as the \"guess the name\" trick (which you seem to have picked up, apart from the additional Esc trick to make it work more often :-) )</p>",
        "id": 252842991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631304457
    },
    {
        "content": "<p>I do know that trick. I guess it didn't help in this case because I was searching for something too specific (along the lines of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_le_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>which is the lemma I ended up proving to finish of the exercise. Btw, I came up with that name so its perhaps not the best).</p>",
        "id": 252843330,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631304599
    },
    {
        "content": "<p>I guess the Esc then ctrl+space trick is something I'll remember from now on. Thanks :)</p>",
        "id": 252843565,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631304701
    },
    {
        "content": "<p>Your <code>mul_le_left</code> won't be in the library because it's somehow suboptimal: you can get away with the weaker hypothesis b&lt;=1</p>",
        "id": 252843678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631304741
    },
    {
        "content": "<p>Yes, I noticed that after posting it here. For some reason I didn't notice when in the heat of battle :)</p>",
        "id": 252843758,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631304785
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_le_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_of_le_one_right</span> <span class=\"n\">ha</span> <span class=\"n\">hb1</span> <span class=\"c1\">-- thanks library_search</span>\n</code></pre></div>",
        "id": 252843768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631304787
    },
    {
        "content": "<p>Ok, wow. I missed that one. Nice.</p>",
        "id": 252843910,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631304843
    },
    {
        "content": "<p>Btw, <code>library_search</code> fails for my first version (I guess because the <code>b&lt;1</code> hypothesis is too strong). Perhaps that is also what sent me off track. I'm definitely learning a lot here. The moral here seems to be to make sure to state the most general example in order to help <code>library_search</code> succeed.</p>",
        "id": 252845027,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631305362
    },
    {
        "content": "<p>Just to be clear -- <code>library_search</code> only finds things which are explicitly stated in mathlib, as opposed to e.g. things which can be trivially deduced by composing two theorems in mathlib, so you have to get it exactly right. One thing I didn't understand for a while was which theorems go into mathlib and which don't -- the idea is basically that clean and useful theorems go in, and random true statements which probably aren't useful in general don't.</p>",
        "id": 252845271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631305472
    },
    {
        "content": "<p>Ya. But dropping a factor thats less that one from an inequality is so common in analysis that I just <em>knew</em> it had to be there. I spent way too much time trying to find it. But many lessons learned along the way, so overall worth the effort (is what I keep telling myself :)</p>",
        "id": 252845877,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631305773
    },
    {
        "content": "<p>Formalising is hard! After a while you begin to find your way around the library. By the way, another possibility is the \"non-linear inequality tactic\" <code>nlinarith</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_le_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nlinarith</span>\n</code></pre></div>",
        "id": 252847706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631306602
    },
    {
        "content": "<p>Ah, yes. I forgot about <code>nlinarith</code>. After doing so many of the basic exercises from the first couple weeks, I sometimes find myself doing stuff the tedious way out of habit rather than reaching for the more high powered tactics. It's probably time I start familiarizing myself with more tactics.</p>",
        "id": 252848466,
        "sender_full_name": "Trevor Fancher",
        "timestamp": 1631307000
    },
    {
        "content": "<p>The tedious way is fun and satisfying :-) But when you want to make progress more quickly e.g. because you're making some theory of your own, you just want to get goals out of the way!</p>",
        "id": 252849897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631307643
    },
    {
        "content": "<p>Remember you can also use <code>suggest</code> as well as <code>library_search</code>. It returns many results, even if they don't close the goal.</p>",
        "id": 252950339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631412095
    },
    {
        "content": "<p><code>suggest using h</code> only returns results which make some use of the hypothesis <code>h</code>. It is really useful!</p>",
        "id": 252950358,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631412112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/VSCode.20-.20show.20more.20suggestions/near/252950358\">said</a>:</p>\n<blockquote>\n<p><code>suggest using h</code> only returns results which make some use of the hypothesis <code>h</code>. It is really useful!</p>\n</blockquote>\n<p>Is there an equivalent in Lean4?</p>",
        "id": 252961300,
        "sender_full_name": "Phillip",
        "timestamp": 1631425107
    },
    {
        "content": "<p>It's on my todo list, but don't hold your breath. :-)</p>",
        "id": 252962225,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631426285
    }
]