[
    {
        "content": "<p>The following code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">append</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>     <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">append</span> <span class=\"n\">t</span> <span class=\"n\">l</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">append</span>\n</code></pre></div>\n\n\n<p>Generates the following printed message: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">append</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">append</span><span class=\"bp\">._</span><span class=\"n\">main</span>\n</code></pre></div>\n\n\n<p>In order to get the full definition, I apparently need to write <code>#print append._main</code> instead, which gives:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">append</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"n\">aux_param_0</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"n\">aux_param_0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">brec_on</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n          <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"n\">α</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">),</span> <span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">a_1</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_hd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">a_hd</span> <span class=\"bp\">::</span> <span class=\"n\">a_tl</span><span class=\"o\">)),</span>\n               <span class=\"n\">id_rhs</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_hd</span> <span class=\"bp\">::</span> <span class=\"bp\">_</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">a_1</span><span class=\"o\">))</span>\n            <span class=\"bp\">_</span><span class=\"n\">F</span><span class=\"o\">)</span>\n         <span class=\"n\">a</span>\n         <span class=\"n\">a_1</span>\n         <span class=\"bp\">_</span><span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"n\">a_1</span>\n</code></pre></div>\n\n\n<p>What is this <code>_main</code> object? Why is it used, and do I need to think about it?</p>",
        "id": 206329584,
        "sender_full_name": "Chris M",
        "timestamp": 1596858048
    },
    {
        "content": "<p>don't unfold definitions; the only things you need is the API</p>",
        "id": 206329699,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596858326
    },
    {
        "content": "<p>What API do you mean?</p>",
        "id": 206329707,
        "sender_full_name": "Chris M",
        "timestamp": 1596858360
    },
    {
        "content": "<p>It's because you defined it using the equation compiler (by using pattern matching syntax). You actually get a couple of definitions that you can see with <code>#print prefix append</code> :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">append</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">append</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"n\">aux_param_0</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">append</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">meta_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"n\">aux_param_0</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">append</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"n\">aux_param_0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">append</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span>\n<span class=\"n\">append</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"n\">aux_param_0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">append</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">append</span><span class=\"bp\">._</span><span class=\"n\">main</span> <span class=\"n\">t</span> <span class=\"n\">l</span>\n<span class=\"n\">append</span><span class=\"bp\">._</span><span class=\"n\">sunfold</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">append</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">append</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span>\n<span class=\"n\">append</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">append</span> <span class=\"n\">t</span> <span class=\"n\">l</span>\n</code></pre></div>\n\n\n<p>The ones with _eqn_ are useful sometimes if you want to explicitly do a rewrite using the definition of a particular branch of your function after like <code>cases l</code> or something.</p>",
        "id": 206329809,
        "sender_full_name": "Chris B",
        "timestamp": 1596858532
    },
    {
        "content": "<p><code>nil_append</code> and <code>cons_append</code></p>",
        "id": 206329810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596858533
    },
    {
        "content": "<p>The first two things you should prove about <code>append</code>  are <code>nil_append</code> and <code>cons_append</code>, that is, that <code>append</code> satisfies the two things which define it. If you are lucky the proofs are <code>rfl</code>, and in this case you don't ever need to think about <code>append._main</code> because you just proved the two theorems which completely characterise <code>append</code>.</p>",
        "id": 206453697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597061754
    },
    {
        "content": "<p>Sometimes with a more complex inductive type where pattern matching is done in a more obscure way under the hood, these proofs might not be <code>rfl</code> and then you'll have to dig a bit deeper to find that actually the proof is called <code>foo.equations._eqn_37</code> or whatever</p>",
        "id": 206453834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597061859
    },
    {
        "content": "<p>but I bet nil_append and cons_append (which are <code>_eqn_1</code> and <code>_eqn_2</code>) are provable with <code>rfl</code></p>",
        "id": 206453934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597061924
    }
]