[
    {
        "content": "<p>One of the lemmas in a proof of Bertrand's postulate is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">sum_halfway_choose</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Is that the kind of lemma that might go into nat.choose as a standalone thing? (I'm nowhere near finished with Bertrand's postulate itself yet, but there's a number of grubby bounding lemmas that go into it, and this is used for one of them.)</p>",
        "id": 197619031,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589490832
    },
    {
        "content": "<p>I'm sure some variation on the below additionally belongs in mathlib somewhere, since it's of standalone interest independent of the binomial theorem:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">pascal_row_sum</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Î»</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add_pow</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197619403,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589491061
    },
    {
        "content": "<p>Yes, the second one is useful for sure.</p>",
        "id": 197619432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589491080
    },
    {
        "content": "<p>By the way, another way to write the proof should be <code>by simpa using (add_pow 1 1 m).symm</code> (didn't try it, just mechanically reduced the proof).</p>",
        "id": 197619514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589491104
    },
    {
        "content": "<p>The first one would be sort of borderline if not for the fact that mathlib should have the proof you are formalizing anyways.</p>",
        "id": 197619722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589491214
    },
    {
        "content": "<p>I raised <a href=\"https://github.com/leanprover-community/mathlib/pull/2684/files\">https://github.com/leanprover-community/mathlib/pull/2684/files</a> for the latter</p>",
        "id": 197623167,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589493168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> It's on the merge queue</p>",
        "id": 197644010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589512288
    },
    {
        "content": "<p>Concerning your first lemma: the name and the statement don't really match. Which means this should maybe be a helper lemma for the actual <code>sum_halfway_choose</code>.</p>",
        "id": 197644076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589512371
    },
    {
        "content": "<p>Ooh, never mind. I can't read.</p>",
        "id": 197644090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589512405
    },
    {
        "content": "<p>Please use more notation.</p>",
        "id": 197644094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589512415
    },
    {
        "content": "<p>Most simp lemmas use <code>(m+1)</code> instead of <code>m.succ</code>. And the former looks a lot better in my eyes.<br>\nMore importantly, you can write <code>\\sum i in range (m+1), choose (2 * m + 1) i = 4 ^ m</code>.</p>",
        "id": 197644175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589512504
    },
    {
        "content": "<p>(You may need to <code>open finset</code>. But that's fine, you can wrap it in a <code>section ... end</code> if you want.</p>",
        "id": 197644192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589512556
    },
    {
        "content": "<p>So I'd like to put into mathlib <code>lemma sum_halfway_choose (m : nat) : finset.sum (finset.range (m + 1)) (nat.choose (2 * m + 1)) = 4 ^ m := sorry</code> (however it's spelt), but the main problem is that my code is presumably absolute garbage; it's 150 lines, for a start. Is the right thing to do simply to make a PR and then let other people tell me how to completely rewrite it? It seems quite labour-intensive and I don't want to simply make work for other people, but I can't contribute without a few rounds of people showing me how to do it correctly</p>",
        "id": 197687080,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589547924
    },
    {
        "content": "<p>For the first few PRs, that's certainly fine. Probably the first suggestion would be to try to factor out 2 or 3 reusable sublemmas.</p>",
        "id": 197687723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589548209
    },
    {
        "content": "<p>And most people won't mind spamming the PR page with little tricks</p>",
        "id": 197687775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589548240
    },
    {
        "content": "<p>Sure, I do have the benefit of being a programmer by trade, so it could certainly be a worse situation :P</p>",
        "id": 197702462,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589554149
    }
]