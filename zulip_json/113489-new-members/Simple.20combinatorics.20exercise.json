[
    {
        "content": "<p>Here's a fun exercise (<a href=\"https://github.com/domenicozambella/teaching/blob/master/tarm/tarm.pdf\">source</a>):<br>\nProve that if  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>A</mi><mi>n</mi></msub><mo>⊆</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\"> A_1, \\dots, A_n \\subseteq \\{ 1, \\dots, m \\} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">}</span></span></span></span> are distinct sets such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext> </mtext><msub><mi>A</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>A</mi><mi>j</mi></msub><mo mathvariant=\"normal\">≠</mo><mi mathvariant=\"normal\">∅</mi><mtext> </mtext></mrow><annotation encoding=\"application/x-tex\"> \\ A_i \\cap A_j \\neq \\empty \\ </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">∅</span><span class=\"mspace\"> </span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext> </mtext><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo separator=\"true\">,</mo><mtext> </mtext></mrow><annotation encoding=\"application/x-tex\"> \\ i, j, \\ </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext> </mtext><mi>n</mi><mo>≤</mo><msup><mn>2</mn><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\"> \\ n \\le 2^{m-1} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>.<br>\nI'm practicing my Lean skills, so I tried to formalize it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sdiff_range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">\\</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sdiff_range_inj_on</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.inj_on</span> <span class=\"o\">(</span><span class=\"n\">sdiff_range</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">A</span> <span class=\"n\">hA</span> <span class=\"n\">B</span> <span class=\"n\">hB</span> <span class=\"n\">heq</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sdiff_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sdiff_eq_sdiff_iff_inter_eq_inter</span> <span class=\"n\">at</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">inter_eq_right_iff_subset</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">inter_eq_right_iff_subset</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inj_on_subset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.inj_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">set.inj_on</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hb</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">katona_exercise</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">⊆</span> <span class=\"n\">range</span> <span class=\"n\">m.succ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- If we have more than 2^m distinct subsets of {0,...,m},</span>\n  <span class=\"c1\">-- at least a couple of them are complementary, and this violates hypothesis h₃.</span>\n  <span class=\"c1\">-- The subsets are represented by A₁, their complements by A₂,</span>\n  <span class=\"c1\">-- and we prove that if 2^m &lt; n then their intersection is not empty.</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h_ctr</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h_ctr</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">A₁</span> <span class=\"o\">:=</span> <span class=\"n\">image</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">A₂</span> <span class=\"o\">:=</span> <span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">sdiff_range</span> <span class=\"n\">m.succ</span><span class=\"o\">)</span> <span class=\"n\">A₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hc₁</span> <span class=\"o\">:</span> <span class=\"n\">A₁.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">card_range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">card_image_eq_iff_inj_on</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hs₁</span> <span class=\"o\">:</span> <span class=\"n\">A₁</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">m.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">B</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mem_image</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">hB</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi₁</span><span class=\"o\">,</span> <span class=\"n\">hi₂</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"n\">i</span> <span class=\"n\">hi₁</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hi₂</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hc₂</span> <span class=\"o\">:</span> <span class=\"n\">A₂.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Hc₁</span><span class=\"o\">,</span> <span class=\"n\">card_image_eq_iff_inj_on</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">inj_on_subset</span> <span class=\"n\">Hs₁</span> <span class=\"o\">(</span><span class=\"n\">sdiff_range_inj_on</span> <span class=\"n\">m.succ</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hs₂</span> <span class=\"o\">:</span> <span class=\"n\">A₂</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">m.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">B</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mem_image</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">hB</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi₁</span><span class=\"o\">,</span> <span class=\"n\">hi₂</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">sdiff_range</span> <span class=\"n\">at</span> <span class=\"n\">hi₂</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_powerset</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hi₂</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hc₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A₁</span> <span class=\"bp\">∪</span> <span class=\"n\">A₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m.succ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">card_range</span> <span class=\"n\">m.succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">card_powerset</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">card_le_of_subset</span> <span class=\"o\">(</span><span class=\"n\">union_subset</span> <span class=\"n\">Hs₁</span> <span class=\"n\">Hs₂</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hc₄</span> <span class=\"o\">:=</span> <span class=\"n\">card_union_add_card_inter</span> <span class=\"n\">A₁</span> <span class=\"n\">A₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A₁</span> <span class=\"bp\">∩</span> <span class=\"n\">A₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">card_pos</span><span class=\"o\">,</span>\n      <span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m.succ</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">],</span> <span class=\"n\">omega</span> <span class=\"o\">}</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">A₁</span> <span class=\"bp\">∩</span> <span class=\"n\">A₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span>     <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H₁</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">hB</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">exists_exists_and_eq_and</span><span class=\"o\">,</span> <span class=\"n\">mem_inter</span><span class=\"o\">,</span> <span class=\"n\">sdiff_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hB</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi₁</span><span class=\"o\">,</span> <span class=\"n\">hi₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj₁</span><span class=\"o\">,</span> <span class=\"n\">hj₂</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"bp\">∩</span> <span class=\"n\">A</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hi₂</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hj₂</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₃</span> <span class=\"n\">i</span> <span class=\"n\">hi₁</span> <span class=\"n\">j</span> <span class=\"n\">hj₁</span> <span class=\"n\">H₂</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's a bit awkward that <code>A</code> ranges over all natural numbers, and I wonder if there's a better alternative.<br>\nIs this how you would have formalized the statement and the proof? Any comments on style?</p>",
        "id": 262272805,
        "sender_full_name": "Giacomo Maletto",
        "timestamp": 1637546337
    },
    {
        "content": "<p>You could use the type <code>fin m</code> (see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin\">docs#fin</a>) rather than taking a subset of the naturals</p>",
        "id": 262272931,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637546451
    },
    {
        "content": "<p>Likewise for the domain of <code>A</code>, and then your condition <code>h2</code> could be written as <code>function.injective A</code></p>",
        "id": 262273006,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637546549
    },
    {
        "content": "<p>I might formalize it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_le_of_pairwise_not_disjoint</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A.card</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Since it's a list of distinct sets, you can instead use a set of sets, and then <code>n</code> can be replaced with the cardinality of that set.  I used <code>disjoint</code> rather than saying the intersection isn't empty just because it seems to be the mathlib-canonical way to say that.</p>\n<p>Another thing you can do is, rather than use natural numbers for the elements of the sets, use an arbitrary finite type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_le_of_pairwise_not_disjoint</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A.card</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262273427,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637547165
    },
    {
        "content": "<p>(I'm surprised that <code>finset</code> requires <code>decidable_eq</code> for its <code>disjoint</code>.  That should only be needed to make it <code>decidable</code>.)</p>",
        "id": 262273602,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637547443
    },
    {
        "content": "<p>Thank you both, I'll try following these approaches and see where they lead.<br>\nIn my first attempt I tried using <code>fin m</code> but ran in some troubles - but that might be because I was trying to solve the exercise in another way: I wanted to define a particular function of type <code>finset (fin m.succ) → finset (fin m)</code> in order to use the pigeonhole principle, but defining such a function turned out to be a huge hassle simply because of the choice of domain and codomain.</p>",
        "id": 262273741,
        "sender_full_name": "Giacomo Maletto",
        "timestamp": 1637547671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431177\">@Giacomo Maletto</span> The idea you used about how none of the pairs of sets are complementary made me think that there might be a more direct combinatorial proof.  It comes down to the fact that complementation of subsets is an involution, and it carries your set of sets <code>A</code> to a disjoint set of sets, which implies the cardinality of <code>A</code> is at most half of <code>m</code> (the cardinality of the type the sets are drawn from).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_le_div_two_of_invol</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.involutive</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s.card</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nat.mul_div_cancel</span> <span class=\"n\">s.card</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.div_le_div_right</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">hf.to_equiv</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">s.map</span> <span class=\"n\">f'.to_embedding</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">card_union_eq</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_two</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">disjoint_left</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">],</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hs</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">card_le_univ</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_le_of_pairwise_not_disjoint</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">disj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A.card</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">A.card</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fintype.card_finset</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.card_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">pow_add</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">hs'</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">disj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hs</span> <span class=\"n\">hs'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_disjoint_iff</span> <span class=\"n\">at</span> <span class=\"n\">disj</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">disj</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">card_le_div_two_of_invol</span> <span class=\"n\">compl_involutive</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262277561,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637553549
    },
    {
        "content": "<p>Regarding style:</p>\n<p>In begin/end blocks, usually tactics are each supposed to go on their own line.  Also, beware <a href=\"https://leanprover-community.github.io/extras/simp.html\">non-terminal simps</a> (this page explains the problem and has some pointers on how to eliminate them).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"n\">intros</span> <span class=\"n\">A</span> <span class=\"n\">hA</span> <span class=\"n\">B</span> <span class=\"n\">hB</span> <span class=\"n\">heq</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sdiff_range</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sdiff_eq_sdiff_iff_inter_eq_inter</span> <span class=\"n\">at</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>For tactics that create multiple subgoals, make sure to enclose those goals in curly braces to help keep track of the proof structure.  For example, instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hb</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>it's better to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hb</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>or in this case, this is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Mathlib style for curly brace blocks is to put them at the same indentation rather than indenting them.  So instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">Hc₁</span> <span class=\"o\">:</span> <span class=\"n\">A₁.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">card_range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">card_image_eq_iff_inj_on</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>it'd be this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">Hc₁</span> <span class=\"o\">:</span> <span class=\"n\">A₁.card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">card_range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">card_image_eq_iff_inj_on</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>Other than these small things, the style seemed fine.</p>",
        "id": 262277883,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637554175
    },
    {
        "content": "<p>I was under the impression that non-terminal simps were only problematic when they acted on the goal. Should they be avoided also when used in hypotheses?</p>",
        "id": 262290966,
        "sender_full_name": "Giacomo Maletto",
        "timestamp": 1637570012
    },
    {
        "content": "<p>Yes, for the exact same reasons.</p>",
        "id": 262291097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637570105
    },
    {
        "content": "<blockquote>\n<p>(I'm surprised that <code>finset</code> requires <code>decidable_eq</code> for its <code>disjoint</code>.  That should only be needed to make it <code>decidable</code>.)</p>\n</blockquote>\n<p>This is because disjointness goes through the <code>semilattice_inf_bot</code> structure, which requires decidable equality.</p>",
        "id": 262306066,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637579884
    },
    {
        "content": "<p>And that's because the inf is defined as a filter. To define it, you must compute it.</p>",
        "id": 262306163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637579944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20combinatorics.20exercise/near/262273602\">said</a>:</p>\n<blockquote>\n<p>(I'm surprised that <code>finset</code> requires <code>decidable_eq</code> for its <code>disjoint</code>.  That should only be needed to make it <code>decidable</code>.)</p>\n</blockquote>\n<p>I've attempted to follow up on that thought in <a href=\"https://github.com/leanprover-community/mathlib/pull/16436\">#16436</a>, with definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">⊥</span>\n</code></pre></div>",
        "id": 297889051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662681085
    },
    {
        "content": "<p>An alternative approach would be to make <code>disjoint</code> be a data field of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_bot\">docs#order_bot</a> satisfying the above, which would let us pick a nice defeq.</p>",
        "id": 297889547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662681437
    }
]