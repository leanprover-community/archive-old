[
    {
        "content": "<p>I feel like I am missing something in the following proof. <code>set.finite.induction_on</code> doesn't work on the goal, but I feel like there should be some <code>set.finite.dinduction</code> cleverness that I am missing.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">order</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207463713,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597872529
    },
    {
        "content": "<p>A work-in-progress. Not sure if this strategy is going to work.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">order</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"n\">hx</span> <span class=\"n\">hs</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207465824,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597874003
    },
    {
        "content": "<p>I would suggest avoiding induction</p>",
        "id": 207467508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597875128
    },
    {
        "content": "<p>there should be a way to directly apply topology theorems to get this</p>",
        "id": 207467544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597875163
    },
    {
        "content": "<p>Managed to prove it using said strategy.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">order</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"n\">hx</span> <span class=\"n\">hs</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"err\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span> <span class=\"err\">∩</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span><span class=\"err\">ᶜ</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span><span class=\"bp\">.</span><span class=\"n\">inter</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span><span class=\"bp\">.</span><span class=\"n\">basic</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">conv</span>\n    <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_or_distrib</span><span class=\"o\">],</span>\n      <span class=\"n\">skip</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_or_distrib</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n   <span class=\"n\">rw</span> <span class=\"n\">and_comm</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207468201,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597875629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Finite.20set.20induction.20and.20complement/near/207467544\">said</a>:</p>\n<blockquote>\n<p>there should be a way to directly apply topology theorems to get this</p>\n</blockquote>\n<p>I'll give it a look. I am not very familiar with topology, I'll try to keep it in mind while I study it.</p>",
        "id": 207468264,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597875689
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"err\">ᶜ</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">is_open_bInter</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_from</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">})</span> <span class=\"bp\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"err\">ᶜ</span><span class=\"o\">)</span> <span class=\"n\">hs</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_imp_not</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">generate_open</span><span class=\"bp\">.</span><span class=\"n\">basic</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207468333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597875725
    },
    {
        "content": "<p>and I already found a use for <code>rintro x -,</code></p>",
        "id": 207468431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597875813
    },
    {
        "content": "<p>Great, thank you! I usually forget about <code>convert</code>, good to be reminded about it!</p>",
        "id": 207469367,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1597876521
    }
]