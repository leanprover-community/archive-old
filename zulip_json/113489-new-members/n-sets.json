[
    {
        "content": "<p>Hi! I am trying to work with sets of a certain cardinality so I can prove some things by induction. I have defined</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">nset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but it's a bit of a pain. Is there something like this already?</p>",
        "id": 134373435,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537531472
    },
    {
        "content": "<p>Instead of making new structures, I would be tempted to formalise the exact statement of the inductive hypothesis I wanted to use. Do you want a result of the form \"(done for all sizes a &lt; b implies done for size b) -&gt; (done for all finsets)\" or of the form \"(done for empty finset) + (done for size n implies done for size n+1) -&gt; (done for all finsets)?\"</p>",
        "id": 134373642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537531759
    },
    {
        "content": "<p><code>finset</code> is a structure made up of a multiset and a proof of something about it, so it comes with a default inductive hypothesis <code>finset.rec</code> which is useless: \"if you've proved it for all pairs consisting of a multiset and a proof of the relevant thing, you've proved it for all finsets!\". Duh. But there's nothing stopping you proving other more useful recursors.</p>",
        "id": 134373817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537531963
    },
    {
        "content": "<p>Yes :)<br>\nI am using nat.rec_on to do the latter, but it incorporates a hypothesis that looks a lot like the former.</p>",
        "id": 134373841,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537532012
    },
    {
        "content": "<p>I am asking you if you can formalise the exact statement of what you want. The type. That's like making the level of the game. And then someone here will come along and formalise the proof, and it's like they solved the level. And some solutions will be more elegant than others. But you have to make the level first. You haven't said precisely what you want.</p>",
        "id": 134374231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537532459
    },
    {
        "content": "<p>See my first message</p>",
        "id": 134374257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537532507
    },
    {
        "content": "<p>OK thanks. It's a bit complicated though. Perhaps this is the most relevant snippet</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">soln</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">⊆</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134374404,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537532685
    },
    {
        "content": "<p>Your statement of the kind of induction you want should be a theorem.</p>",
        "id": 134375161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537533730
    },
    {
        "content": "<p>Or even better a definition if you want recursion.</p>",
        "id": 134375284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537533883
    },
    {
        "content": "<p>Hang on I'll try and knock one up.</p>",
        "id": 134375286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537533889
    },
    {
        "content": "<p>Hmm I have hoping to define V and v in the induction so it's not a theorem exactly</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">solve</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">soln</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">⊆</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n                <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"k\">in</span>\n        <span class=\"n\">soln</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">V</span> <span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sol</span> <span class=\"o\">:</span> <span class=\"n\">soln</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n        <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hjt</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n            <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">card_erase_of_mem</span> <span class=\"n\">hjt</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h1</span> <span class=\"bp\">▸</span> <span class=\"n\">pred_le_pred</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n            <span class=\"k\">let</span> <span class=\"n\">tnj</span> <span class=\"o\">:=</span> <span class=\"n\">nset</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">h2</span> <span class=\"k\">in</span>\n            <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">hyV</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">sol</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"n\">tnj</span><span class=\"o\">),</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">sol</span><span class=\"bp\">.</span><span class=\"n\">v</span> <span class=\"n\">tnj</span> <span class=\"n\">y</span> <span class=\"n\">hyV</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sup</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"c1\">-- s.fold (⊔) ⊥ f</span>\n        <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n            <span class=\"n\">sorry</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nset</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">⊆</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n                <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"n\">s</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"k\">in</span>\n        <span class=\"n\">soln</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">V</span> <span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134375298,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537533904
    },
    {
        "content": "<p>Oh wow it's super-complicated. I don't even understand the question any more. I thought you were just asking how to do induction on the cardinality of a finset and I was trying to establish if you meant usual induction or strong induction.</p>",
        "id": 134375371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537533966
    },
    {
        "content": "<p>I have probably made it look more complicated than it is :) I should learn how to use tactics</p>",
        "id": 134375540,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537534163
    },
    {
        "content": "<p>You probably want something like finest.strong_induction</p>",
        "id": 134382524,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537541356
    },
    {
        "content": "<p>You may be right. I guess I was thinking if I built it up one layer at a time then each element of a layer could use all the results of the previous layer without recalculating them. But I'm not sure it works like that. My first version was in Python where I was able to store those intermediate results explicitly.</p>",
        "id": 134385479,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1537544162
    }
]