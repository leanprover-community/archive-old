[
    {
        "content": "<p>As an exercise, I want to prove that Goodstein function is not primitive recursive. It is a function <code>ℕ → ℕ</code> that computes the length of the Goodstein sequence that starts with <code>n</code> for any <code>(n : ℕ)</code>. However, it seems very hard to even define the function. Recursive definition requires me to prove that it terminates (that is, the function is well-founded). But the proof of termination requires Goodstein function itself to prove that something decreases in each recursive call.</p>\n<p>My question is <strong>not</strong> how to implement the function (I want to do it myself). I just want to ask whether it is even possible? I mean, is Lean strong enough to reason about such fast-growing function? The wikipedia page says that induction on natural numbers is not strong enough to prove termination of Goodstein function. Since Lean uses <code>nat.rec</code> to reason about natural numbers, does it mean that the termination of Goodstein function is undecidable in Lean?</p>",
        "id": 262614917,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1637773139
    },
    {
        "content": "<p>You need to prove it by induction on ordinals up to epsilon_0, IIRC, which lean can handle</p>",
        "id": 262615087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637773209
    },
    {
        "content": "<p>but you don't need to go to such effort; you can define it noncomputably without much work, just give a specification of the function that isn't obviously terminating and use <code>choice</code> to make it into a function</p>",
        "id": 262615234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637773265
    },
    {
        "content": "<p>In fact, there is already a computable implementation of the ordinals below epsilon_0 at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/onote\">docs#onote</a> , so you can probably adapt it to define the goodstein function</p>",
        "id": 262615490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637773374
    },
    {
        "content": "<p>Roughly speaking, Lean can define functions that are defined in ordinary mathematics. Systems like Peano arithmetic are far far weaker than this.</p>",
        "id": 262617612,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637774464
    },
    {
        "content": "<p>So I guess Lean is as strong as ZFC, right? Are there any math papers discussing strength and consistency of the Lean's kernel?</p>",
        "id": 262677814,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1637829049
    },
    {
        "content": "<p>Yes and yes. See <a href=\"https://github.com/digama0/lean-type-theory/releases\">https://github.com/digama0/lean-type-theory/releases</a></p>",
        "id": 262678055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637829241
    },
    {
        "content": "<p>(it's actually a bit stronger than ZFC)</p>",
        "id": 262678169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637829308
    },
    {
        "content": "<p>while we're here, it occurred to me the other day that Lean might be slightly weaker than ZFC+Grothendieck's axiom, which says \"every set is in a universe\", even though every type is in some <code>Type u</code>. Because Lean only demands countably infinitely many universes, whereas Grothendieck I think forces uncountably many. Am I mistaken?</p>",
        "id": 262684346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637833177
    },
    {
        "content": "<p>Yes, that's correct. TG is strictly stronger than ZFC + omega inaccessibles, it is equivalent to ZFC + a proper class of inaccessibles</p>",
        "id": 262684656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637833413
    },
    {
        "content": "<p>The reason for the distinction despite the apparent truth of \"every set is in a universe\" in lean is that ZFC, unlike lean, has the language to talk about sets that cross the universe hierarchy. In ZFC + omega inaccessibles you can form the set of all omega inaccessibles, and this set (which is only countable, so \"small\" in some sense) is not contained in an inaccessible. In lean there is no such counterexample set because all sets are stratified into a universe, so the TG axiom gives you no extra power.</p>",
        "id": 262685318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637833845
    },
    {
        "content": "<p>I <em>suspect</em> that SGA4 would work fine with just countably infinitely many universes but I am not an expert.</p>",
        "id": 262693722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637839130
    }
]