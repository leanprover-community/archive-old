[
    {
        "content": "<p>Is it possible to give a name to specific subexpressions in a proof?<br>\nE.g. if the goal state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>... then can I change this somehow to: ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"n\">h_e</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 229105822,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615044298
    },
    {
        "content": "<p><code>generalize</code> -- actually that's not quite what you want. How about just <code>set e := foo bar baz 123 with h_e</code>? I don't know if that changes the goal but you could just <code>rw \\l h_e</code> or <code>change</code> the goal to <code>e</code> (<code>set</code> is definitional).</p>",
        "id": 229105865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615044322
    },
    {
        "content": "<p>The <code>set e  := ... with ...</code> is exactly what I needed. Thanks :)</p>",
        "id": 229106003,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615044442
    },
    {
        "content": "<p><code>set</code> does change the goal automatically.</p>",
        "id": 229106015,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615044466
    },
    {
        "content": "<p>Doesn't <code>generalize</code> work here in exactly the same way?</p>",
        "id": 229107931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615046116
    },
    {
        "content": "<p>I don't think it would give you h_e</p>",
        "id": 229118031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615054985
    }
]