[
    {
        "content": "<p>I am trying to rewrite the condition in an <code>ite</code> term in the following example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">experiment</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_mult</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.even_add</span><span class=\"o\">],</span> <span class=\"c1\">-- rewrite `ite (even (m + n)) ...` to `ite (even m ↔ even n) ...`</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I get the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n    <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">_a</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which leaves me quite at a loss...</p>",
        "id": 272813193,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645541555
    },
    {
        "content": "<p><code>simp</code> might work, but you probably shouldn't do this</p>",
        "id": 272813308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541604
    },
    {
        "content": "<p>use <code>split_ifs</code> and prove the cases</p>",
        "id": 272813330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541616
    },
    {
        "content": "<p>What is \"this\"? the rewrite or the simp?</p>",
        "id": 272813368,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645541630
    },
    {
        "content": "<p>using simp or other things to do the rewrite</p>",
        "id": 272813435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541646
    },
    {
        "content": "<p>But why does it not work?</p>",
        "id": 272813454,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645541654
    },
    {
        "content": "<p>because there is a dependent argument after the proposition that proves that the proposition is decidable</p>",
        "id": 272813509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541672
    },
    {
        "content": "<p>it is hidden by default</p>",
        "id": 272813559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541689
    },
    {
        "content": "<p>But <code>decidable nat.even ...</code> should be available?</p>",
        "id": 272813655,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645541739
    },
    {
        "content": "<p>when you rewrite <code>even (m+n)</code> to <code>even m &lt;-&gt; even n</code>, the argument following it, which is a proof of <code>decidable (even (m+n))</code>, is now no longer type correct since it isn't proving <code>decidable (even m &lt;-&gt; even n)</code></p>",
        "id": 272813829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541806
    },
    {
        "content": "<p>OK, now I got it.</p>",
        "id": 272813960,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645541874
    },
    {
        "content": "<p>simp fixes this by using the original argument to prove the new decidability</p>",
        "id": 272814041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541897
    },
    {
        "content": "<p>this works, but isn't usually what you want</p>",
        "id": 272814059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541907
    },
    {
        "content": "<p>Is there something like a \"classical\" version of ite that does not require decidability?</p>",
        "id": 272814076,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645541917
    },
    {
        "content": "<p>well you can work around it with <code>convert</code> and friends</p>",
        "id": 272814159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541958
    },
    {
        "content": "<p>you can also use <code>cond</code> which is nondependent</p>",
        "id": 272814203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645541984
    },
    {
        "content": "<p>Thanks; I'll check this out. [I have meeting now, so I'll leave.]</p>",
        "id": 272814290,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645542008
    },
    {
        "content": "<p>the relevant lemma for rewriting <code>if</code> exists, but like I said this whole proof should probably be approached from a different direction</p>",
        "id": 272814448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645542073
    },
    {
        "content": "<p>Option 1: <code>rw [if_congr (@nat.even_add m n) rfl rfl]</code></p>",
        "id": 272814815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645542242
    },
    {
        "content": "<p>Option 2: <code>simp only [nat.even_add]</code></p>",
        "id": 272814908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645542270
    },
    {
        "content": "<p>my suggestion is to not rewrite the if at all and do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo_mult</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">nat.even_add</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272815188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645542378
    },
    {
        "content": "<p>Thanks again! There are so many tactics; it is a bit overwhelming for a beginner...</p>",
        "id": 272820086,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645544316
    },
    {
        "content": "<p>There aren't actually that many tactics -- you only need to know around 25-30 or so. It's the library that's overwhelming; once you have the tactics and the basic techniques you then want to start proving things and then you realise that you're going to have to get some feeling as to what is going on in the relevant corner of a 700K line database.</p>",
        "id": 272820362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645544417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 25-30 is still a lot to learn and keep in mind.</p>",
        "id": 272820557,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645544504
    },
    {
        "content": "<p><a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_C/Part_C.html\">here</a> are the ones I taught my undergraduates; <code>split_ifs</code> and <code>conv</code> and the <code>I</code> tactics (<code>letI</code>, <code>haveI</code>) are the other useful ones (and there are a fair few on that list which aren't useful!)</p>",
        "id": 272823714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645545659
    },
    {
        "content": "<p>That's useful, thanks.</p>",
        "id": 272824183,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645545832
    }
]