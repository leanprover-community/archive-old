[
    {
        "content": "<p>I'd like to associate every finite set (over a finite type with decidable equality) with its boolean algebra, i.e. make use of <a href=\"https://github.com/leanprover-community/mathlib/blob/40b6b45c052e188122ec9a25e8aedf00232e4633/src/data/fintype/basic.lean#L125\">https://github.com/leanprover-community/mathlib/blob/40b6b45c052e188122ec9a25e8aedf00232e4633/src/data/fintype/basic.lean#L125</a></p>\n<p>My reading of the typeclass instance there is that for every α s.t. <code>fintype α</code> and <code>decidable_eq α</code>, every <code>s : finset α</code> has a boolean algebra instance associated with it.  How do I actually make use of this to associate any particular <code>s : finset α</code> with its boolean algebra instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- typechecks</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">boolean_algebra</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">finset.boolean_algebra</span>\n\n<span class=\"c1\">-- tweak of foo whose explicit type is what I think I want</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">boolean_algebra</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"n\">finset.boolean_algebra</span>\n</code></pre></div>\n<p>results in the following error on the body of <code>bar</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">finset.boolean_algebra</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">boolean_algebra</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">boolean_algebra</span> <span class=\"bp\">↥</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>My current guess as to the meaning of the error is something related to universes?</p>",
        "id": 267657758,
        "sender_full_name": "Eric Meinhardt",
        "timestamp": 1641941301
    },
    {
        "content": "<p>I'd say that the precise thing you are asking for here is not possible, you want to return an instance of a typeclass on a specific term of a type but that is not possible, the boolean_algebra typeclass can only be implemented by types themselves. That is, the mathlib boolean algebras are (to my understanding of the types, I don't actually have a clue of the mathematics involved here) not defined over a concrete carrier set of values but rather over an entire type.</p>",
        "id": 267661245,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641943219
    },
    {
        "content": "<p>When you say <code>boolean_algebra h</code> lean is translating it to <code>boolean_algebra (coe_sort h)</code>, which is what that funny arrow means</p>",
        "id": 267662044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641943730
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.has_coe_to_sort\">docs#finset.has_coe_to_sort</a> implements that arrow as \"the type of elements contained in <code>h</code>\"</p>",
        "id": 267662100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641943767
    },
    {
        "content": "<p>I don't think your reading of the instance is correct. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.boolean\">docs#finset.boolean</a> algebra says that given a finite type <code>\\alpha</code> the type of all possible finite subsets has the structure of a boolean algebra, that is there is an algebra structure where the sup of two finite subsets is their union, etc. Each <code>s : finset \\alpha</code> doesn't have its own boolean algebra structure, there is just a way to sup finsets.</p>",
        "id": 267662110,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641943777
    },
    {
        "content": "<p>If you say a bit more about what you want to use this for then  we can try and see how to phrase this in Lean</p>",
        "id": 267662225,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641943830
    }
]