[
    {
        "content": "<p>I'm confused about how the goal state is displayed depending on the position of the cursor. Consider these two pieces of code:<br>\nIf I holw my cursor after <code>apply le_antisymm,</code>, I only see one goal state:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span> <span class=\"c1\">--If I hold my cursor here, I can see one goal state: x ⊓ y ⊓ z ≤ x ⊓ (y ⊓ z).</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span><span class=\"n\">infs</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>But in the following, I see two goal states:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span> <span class=\"c1\">--If I hold my cursor here, I can see two goal states: x ⊓ y ⊓ z ≤ x ⊓ (y ⊓ z), and x ⊓ (y ⊓ z) ≤ x ⊓ y ⊓ z.</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>In practice, in order to get clariy on what's going on, I find myself <code>cntrl-x</code>ing later parts of a proof to see the fully goal state, and then pasting them back. This seems like it wasn't the intended way to use this. </p>\n<p>How do people do this normally?</p>",
        "id": 202953918,
        "sender_full_name": "Chris M",
        "timestamp": 1594012013
    },
    {
        "content": "<p>I guess one not-so-great answer is that I don't write <code>repeat</code> or use <code>;</code> until I have the whole proof working --- I switch to using those only when golfing.</p>",
        "id": 202956180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594015699
    },
    {
        "content": "<p>Both of them make it harder to understand the intermediate tactic states.</p>",
        "id": 202956181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594015710
    },
    {
        "content": "<p>I don't remember this being a problem before. Was this always the behavior?<br>\nHere is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"bp\">;</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203012599,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594053699
    },
    {
        "content": "<p>Ok, I just tested, and this was already the behavior of <code>3.5.1</code></p>",
        "id": 203013289,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594054045
    },
    {
        "content": "<p>My workaround, which is probably a bit more useful than Scott's:<br>\nWhenever you create 2+ subgoals, you can put each subgoal individually in braces: <code>{ ... }</code>. This also happens to be a good style, adopted in mathlib.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span> <span class=\"c1\">-- you see both subgoals here</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"bp\">;</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203013523,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594054190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  Thanks that workaround works for me. </p>\n<p>Is this considered a bug?</p>",
        "id": 203064981,
        "sender_full_name": "Chris M",
        "timestamp": 1594094519
    },
    {
        "content": "<p>Also, in this code, I see both subgoals if I use <code>,</code> but only the first if I use <code>;</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span> <span class=\"c1\">--I can see both subgoals if I hover here.</span>\n    <span class=\"o\">{</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span><span class=\"n\">infs</span><span class=\"o\">}}</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span> <span class=\"c1\">--but only the first if I hover here</span>\n    <span class=\"o\">{</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span><span class=\"n\">infs</span><span class=\"o\">}}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203066733,
        "sender_full_name": "Chris M",
        "timestamp": 1594097364
    },
    {
        "content": "<p>Yup, that's a known limitation of <code>;</code>. I'm not sure how hard it would be to fix it.</p>",
        "id": 203066894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594097593
    },
    {
        "content": "<p>I'm actually unsure what the general rule is: when you put a cursor at a location, what goal does it show?<br>\nFor example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">le_inf</span> <span class=\"c1\">--If I put my cursor here, what goal is it showing? The goal that apply le_inf is working on in the first chain of the repeat, or something like that?</span>\n    <span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span><span class=\"n\">infs</span><span class=\"o\">}}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203067019,
        "sender_full_name": "Chris M",
        "timestamp": 1594097776
    },
    {
        "content": "<p>I would consider your first post a bug.</p>\n<p>Your last post is a known limitation. <code>;</code> is not really a tactic separator, since it combines multiple tactics into a single one, so Lean doesn't quite know to display in the middle of that.<br>\nAnd as your last example shows: it is not even clear what you want to show at every point in the proof. I think it tries to show the goal the first time it reaches that spot, or something.</p>",
        "id": 203067058,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594097882
    },
    {
        "content": "<p>Its always been the first from my experience. You can use the command <code>trace_state</code> which will print the state every time its run, this way you can see all the goals at some point.</p>",
        "id": 203067094,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594097919
    },
    {
        "content": "<p>Ah, the fact that it shows the first goal after <code>;</code> at all is pretty recent: <a href=\"https://github.com/leanprover-community/lean/issues/239\">lean#239</a>. I already thought that it was showing garbage before (to be more precise: I think it showed the state before your tactic containing the <code>;</code>). Your question about showing all goals after <code>;</code> is already mentioned in <a href=\"https://github.com/leanprover-community/lean/issues/201\">lean#201</a>.</p>",
        "id": 203067275,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594098198
    },
    {
        "content": "<p>I added your first report to <a href=\"https://github.com/leanprover-community/lean/issues/201\">lean#201</a></p>",
        "id": 203067409,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594098410
    }
]