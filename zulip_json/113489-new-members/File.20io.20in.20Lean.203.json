[
    {
        "content": "<p>Hello, all. I started on Advent of Code, so now's the time to get stuck on simple file IO. I'm plagiarizing the Advent of Lean 3 stuff, but am a little bit stuck.  I'm trying to get this function to return <code>(list \\alpha) )</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">go</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">io.fs.read_file</span> <span class=\"n\">file</span><span class=\"o\">,</span>\n  <span class=\"n\">sum.inr</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">run</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">some</span> <span class=\"n\">str</span> <span class=\"bp\">←</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">str</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">())</span>\n</code></pre></div>",
        "id": 263375103,
        "sender_full_name": "Ocschwar",
        "timestamp": 1638403072
    },
    {
        "content": "<p>You're not tempted to use Lean 4?</p>",
        "id": 263375174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638403106
    },
    {
        "content": "<p>What do I do to get this to return the right value?</p>",
        "id": 263375189,
        "sender_full_name": "Ocschwar",
        "timestamp": 1638403115
    },
    {
        "content": "<p>I am tempted, but I've invested the time I have between work and kids to learn Lean 3, so sunk cost fallacy has a strong hold on me.</p>",
        "id": 263375293,
        "sender_full_name": "Ocschwar",
        "timestamp": 1638403192
    },
    {
        "content": "<p>BTW, I'm going through your Xena Project videos right now as well, and after umpteen attempts at mastering formal methods tools, this is actually taking.</p>",
        "id": 263375473,
        "sender_full_name": "Ocschwar",
        "timestamp": 1638403239
    },
    {
        "content": "<p>I don't have a clue about tactics or coding, so I'm sorry I can't help you.</p>",
        "id": 263375527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638403269
    },
    {
        "content": "<p>One thing I would say is that you haven't posted a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> -- if I paste the code you posted into a Lean file I just get a ton of errors. It's generally easier to help people if they post <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s.</p>",
        "id": 263375620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638403316
    },
    {
        "content": "<p>I'll do that as soon as. have something that's working.</p>",
        "id": 263376085,
        "sender_full_name": "Ocschwar",
        "timestamp": 1638403551
    },
    {
        "content": "<p>If you want the return value to be <code>list X</code>, then your <code>go</code> function should probably have type <code>io (list X)</code>.</p>",
        "id": 263376278,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638403669
    },
    {
        "content": "<p>here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I think:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">go</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">io.fs.read_file</span> <span class=\"n\">file</span><span class=\"o\">,</span>\n  <span class=\"n\">sum.inr</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">run</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">some</span> <span class=\"n\">str</span> <span class=\"bp\">←</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">str</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">())</span>\n</code></pre></div>",
        "id": 263376427,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638403777
    },
    {
        "content": "<p>FWIW, today was the first time I tried coding in lean4, and I got the first advent of code puzzle in about 15 mins. Lean4 is REALLY nice.</p>",
        "id": 263376507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638403818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455819\">Ocschwar</span> <a href=\"#narrow/stream/113489-new-members/topic/File.20io.20in.20Lean.203/near/263375189\">said</a>:</p>\n<blockquote>\n<p>What do I do to get this to return the right value?</p>\n</blockquote>\n<p>What's the <code>list \\alpha</code> that you want supposed to represent? Are you wanting to run the parser <code>p</code> on each line of the file or something?</p>",
        "id": 263376725,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638403985
    },
    {
        "content": "<p>Yes. I'm using this <a href=\"https://github.com/digama0/advent-of-code/blob/lean-3.4.1/day1.lean\">https://github.com/digama0/advent-of-code/blob/lean-3.4.1/day1.lean</a> and I need to take \\n-separated integers to return (list \\N)</p>",
        "id": 263377025,
        "sender_full_name": "Ocschwar",
        "timestamp": 1638404238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455819\">@Ocschwar</span> Completely untested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">parser</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> cribbed from io.fs.read_to_end and modified -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">parse_lines</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">io.handle</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">io.iterate</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">parsed</span><span class=\"o\">,</span>\n  <span class=\"k\">do</span> <span class=\"n\">done</span> <span class=\"bp\">←</span> <span class=\"n\">io.fs.is_eof</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"k\">if</span> <span class=\"n\">done</span>\n     <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n     <span class=\"k\">else</span> <span class=\"k\">do</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">io.fs.get_line</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n             <span class=\"n\">sum.inr</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">run</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n             <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">parsed</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parse_file</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">io.mk_file_handle</span> <span class=\"n\">file</span> <span class=\"n\">io.mode.read</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n   <span class=\"n\">parse_lines</span> <span class=\"n\">h</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 263377669,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638404721
    },
    {
        "content": "<p>Wow, thank you ! I'll post the link to my GitHub repo once it's created and populated. <br>\n(My motivation is that I QA R code for a living, and so I daydream about languages that let you write R-ish code, then prove some sanity checks about the mathematical properties of the outputs that then become compile time checks on any changes you make. Lean appears to come closest to enabling that. )</p>",
        "id": 263378053,
        "sender_full_name": "Ocschwar",
        "timestamp": 1638404994
    },
    {
        "content": "<p>Which means my formal methods background and higher math background is very superficial, and I have no direct financial interest in where tools like TLA+ and Alloy have been applied so far (security properties, safe concurrency, etc). So Lean also is best for pushing up the learning curve.</p>",
        "id": 263378186,
        "sender_full_name": "Ocschwar",
        "timestamp": 1638405099
    }
]