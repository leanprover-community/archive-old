[
    {
        "content": "<p>Could someone please help me prove <code>p ∧ ¬q → ¬p ∧ q</code>? I'm really lost</p>",
        "id": 278923065,
        "sender_full_name": "Ibrahim Fadel",
        "timestamp": 1649912097
    },
    {
        "content": "<p>Did you leave out some context or flip something around?</p>",
        "id": 278923891,
        "sender_full_name": "Chris B",
        "timestamp": 1649913228
    },
    {
        "content": "<p>Or maybe the source wanted you to do it the \"classical\" way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">and.intro</span> <span class=\"n\">h.right</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">and.intro</span> <span class=\"n\">h.right</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">h.left</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278924048,
        "sender_full_name": "Chris B",
        "timestamp": 1649913434
    },
    {
        "content": "<p>Thanks for the help -- honestly, i'm not sure where i got that from in the first place, i might have written it down wrong</p>",
        "id": 278924455,
        "sender_full_name": "Ibrahim Fadel",
        "timestamp": 1649913934
    },
    {
        "content": "<p>On a side note, do you know if i can find solutions to the exercises here: <a href=\"http://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html#exercises\">http://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html#exercises</a></p>",
        "id": 278924514,
        "sender_full_name": "Ibrahim Fadel",
        "timestamp": 1649913982
    },
    {
        "content": "<p>I'm not sure if they're posted anywhere, no. I think people are pretty open to answering questions for new users here when they get stuck, so you can probably just put future questions in this thread.</p>",
        "id": 278924922,
        "sender_full_name": "Chris B",
        "timestamp": 1649914533
    },
    {
        "content": "<p>Ok sounds good, thanks</p>",
        "id": 278927188,
        "sender_full_name": "Ibrahim Fadel",
        "timestamp": 1649917196
    },
    {
        "content": "<p>Currently, i am stuck here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">a_not</span> <span class=\"o\">:=</span> <span class=\"n\">p.left</span><span class=\"bp\">;</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I would like to  evalueate ¬a_not, and say it is equal to h, but i'm not sure how to do that</p>",
        "id": 278927244,
        "sender_full_name": "Ibrahim Fadel",
        "timestamp": 1649917226
    },
    {
        "content": "<p>First, you'll want to get into the habit of using commas rather than semicolons, or you're going to confuse yourself a lot at some point</p>",
        "id": 278928032,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1649918126
    },
    {
        "content": "<p>Second, you want to use <code>have</code> rather than <code>let</code> for propositions</p>",
        "id": 278928094,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1649918188
    },
    {
        "content": "<p>I don't understand your comment about evaluating  ¬a_not; what's the mathematical argument you're trying to make?</p>",
        "id": 278928229,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1649918345
    },
    {
        "content": "<p>Sorry, i don't really have a background in math or proof writing so it's probably unclear. My argument is that ¬ A ∧ B implies ¬ A, and so ¬(¬ A ∧ B) = ¬(¬ A) = A, therefore A = A</p>",
        "id": 278928390,
        "sender_full_name": "Ibrahim Fadel",
        "timestamp": 1649918519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"493563\">@Ibrahim Fadel</span> </p>\n<p><code>propext</code> can get you <code>A = B</code> from <code>A &lt;-&gt; B</code>; this might get you a little further, but you have more work to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"k\">have</span> <span class=\"n\">a_not</span> <span class=\"o\">:=</span> <span class=\"n\">p.left</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_iff</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬¬</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.intro</span> <span class=\"n\">absurd</span> <span class=\"n\">Classical.byContradiction</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_eq</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">¬¬</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"n\">h_iff</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_ab</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">And.left</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Are you using lean 3 or lean 4?</p>",
        "id": 278930054,
        "sender_full_name": "Chris B",
        "timestamp": 1649920122
    },
    {
        "content": "<p>Also you may or may not already know this, but just as a heads up the definition of <code>¬A</code> is <code>A → False</code>.</p>",
        "id": 278930513,
        "sender_full_name": "Chris B",
        "timestamp": 1649920516
    },
    {
        "content": "<p>Thanks for the help, it looks a lot more complicated that i would have expected lol<br>\nI'll check it out in the morning when i can focus more :)</p>\n<blockquote>\n<p>Are you using lean 3 or lean 4?<br>\nI'm using lean 4</p>\n</blockquote>",
        "id": 278930916,
        "sender_full_name": "Ibrahim Fadel",
        "timestamp": 1649920864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"493563\">Ibrahim Fadel</span> <a href=\"#narrow/stream/113489-new-members/topic/proof/near/278930916\">said</a>:</p>\n<blockquote>\n<p>it looks a lot more complicated that i would have expected lol</p>\n</blockquote>\n<p>I was just following the line of reasoning you sketched out, there's a much simpler solution that follows from the definition of <code>not</code>.</p>",
        "id": 278931519,
        "sender_full_name": "Chris B",
        "timestamp": 1649921324
    },
    {
        "content": "<p>If you want to check your work later:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>spoiler/solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">p.left</span>\n</code></pre></div>\n</div></div>",
        "id": 278932175,
        "sender_full_name": "Chris B",
        "timestamp": 1649921795
    },
    {
        "content": "<p>When you say <code>A = A</code>, what are you thinking? Even if technically correct it's probably a good idea to avoid it.</p>",
        "id": 278932959,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649922394
    },
    {
        "content": "<p>I mean, do you realize that the two propositions <code>1 + 1 = 2</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo>∈</mo><mi mathvariant=\"bold\">R</mi><mo separator=\"true\">,</mo><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>+</mo><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\forall x \\in \\mathbf{R}, \\sin(x)^2 + \\cos(x)^2 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathbf\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> are equal?</p>",
        "id": 278933277,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649922633
    }
]