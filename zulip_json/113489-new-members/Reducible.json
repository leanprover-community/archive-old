[
    {
        "content": "<p>If I introduce a type synonym with <code>@[reducible] def</code>, I know type class instances will lift from the underlying type to the type synonym, but is it true that instances declared on the type synonym will descend on the underlying type? I used to think not but in <a href=\"https://github.com/leanprover-community/mathlib/issues/7803\">#7803</a> it seems instances are descending...</p>",
        "id": 245224486,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625683327
    },
    {
        "content": "<p>It wouldn't surprise me if they descend. I thinkthat in practice it's better to write <code>@[derive [add_comm_group, topological_space]]</code> before a semireducible def.</p>",
        "id": 245225741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625683800
    },
    {
        "content": "<p>Usually the whole point of a type synonym is to _not_ be reducible so that you can pick a different instance implementation</p>",
        "id": 245229047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625685470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245229047\">said</a>:</p>\n<blockquote>\n<p>Usually the whole point of a type synonym is to _not_ be reducible so that you can pick a different instance implementation</p>\n</blockquote>\n<p>But then I'd need to rewrite a lot of instances: I need all the instances to lift and I whish there were a way to do so automatically</p>",
        "id": 245229520,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625685693
    },
    {
        "content": "<p>why do you need a synonym at all then?</p>",
        "id": 245229549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625685715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245225741\">said</a>:</p>\n<blockquote>\n<p>It wouldn't surprise me if they descend. I thinkthat in practice it's better to write <code>@[derive [add_comm_group, topological_space]]</code> before a semireducible def.</p>\n</blockquote>\n<p>What is a semireducible def?</p>",
        "id": 245229560,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625685721
    },
    {
        "content": "<p>The default.</p>",
        "id": 245229611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625685727
    },
    {
        "content": "<p>And hopefully the derive handler can take care of most of the instances in just 1 line.</p>",
        "id": 245229672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625685757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245229672\">said</a>:</p>\n<blockquote>\n<p>And hopefully the derive handler can take care of most of the instances in just 1 line.</p>\n</blockquote>\n<p>Ok thanks do I need to list the ones I need or is there a way to get them all?</p>",
        "id": 245229739,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625685792
    },
    {
        "content": "<p>No, you need to list everything you need.</p>",
        "id": 245229837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625685838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245229549\">said</a>:</p>\n<blockquote>\n<p>why do you need a synonym at all then?</p>\n</blockquote>\n<p>Because I need to declare instances that I do not want to descend: the type synonym I want is for a Pi type and if the instances descend then mathlib breaks</p>",
        "id": 245229849,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625685842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245229837\">said</a>:</p>\n<blockquote>\n<p>No, you need to list everything you need.</p>\n</blockquote>\n<p>Ok thanks</p>",
        "id": 245229935,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625685874
    },
    {
        "content": "<p>Can you use a regular Pi type with a local instance?</p>",
        "id": 245229951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625685880
    },
    {
        "content": "<p>So instead of <code>instance foobar</code> you write <code>def foobar</code> and then <code>local attribute [instance] foobar</code> below it.</p>",
        "id": 245229993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625685905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245229951\">said</a>:</p>\n<blockquote>\n<p>Can you use a regular Pi type with a local instance?</p>\n</blockquote>\n<p>No I need instances to be permanent: all this is for sections of vector bundles implemented with pi types, I need to do things once for all</p>",
        "id": 245230047,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625685940
    },
    {
        "content": "<p>Right, I was unclear: type synonym are for when you want <em>some</em> instances to be different</p>",
        "id": 245230074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625685953
    },
    {
        "content": "<p>A good example in the library is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp\">docs#finsupp</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra\">docs#monoid_algebra</a>, which have different choices of <code>*</code> but agree on<code>+</code></p>",
        "id": 245230301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625686044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245230074\">said</a>:</p>\n<blockquote>\n<p>Right, I was unclear: type synonym are for when you want <em>some</em> instances to be different</p>\n</blockquote>\n<p>Oh in this case I do not need instances to be different, I just need to add more instances that cannot be declared on generic pi types (and even if they could it would not makes sense to have them on generic pi types)</p>",
        "id": 245230332,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625686065
    },
    {
        "content": "<p>What would you do in such case? I'm persuaded by Johan to use derive</p>",
        "id": 245230405,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625686086
    },
    {
        "content": "<p><code>derive</code> is the best tool for the job when it works</p>",
        "id": 245231123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625686439
    },
    {
        "content": "<p>Sometimes you can't use it though; if your instance is something like \"additionally, when the domain is a field provide this other instance\" you have to add those instances by hand</p>",
        "id": 245231225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625686485
    },
    {
        "content": "<p>See for instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra.is_scalar_tower/src\">src#monoid_algebra.is_scalar_tower</a> where the copy is manual</p>",
        "id": 245231293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625686518
    },
    {
        "content": "<p>Can you elaborate on what the instance is, and why it doesn't make sense to put it on generic pi types? (A line link to a PR is fine)</p>",
        "id": 245231975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625686833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245231225\">said</a>:</p>\n<blockquote>\n<p>Sometimes you can't use it though; if your instance is something like \"additionally, when the domain is a field provide this other instance\" you have to add those instances by hand</p>\n</blockquote>\n<p>Oh yes this is totally my case... I feel it will be a pain copying instances by hand</p>",
        "id": 245262941,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625706986
    },
    {
        "content": "<p>This is the link <a href=\"https://github.com/leanprover-community/mathlib/pull/7803/files#r665803546\">https://github.com/leanprover-community/mathlib/pull/7803/files#r665803546</a></p>",
        "id": 245263062,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625707130
    },
    {
        "content": "<p>You can see all the problems it creates by checking the linter check on the same PR</p>",
        "id": 245263088,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625707179
    },
    {
        "content": "<p>(since <code>bundle_section</code> is reducible, it changes nothing when the bare pi type is used instead)</p>",
        "id": 245263187,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625707273
    },
    {
        "content": "<p>Let me know if you have ideas to solve the problem</p>",
        "id": 245263211,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625707305
    },
    {
        "content": "<p>Do you really need a coercion there? Or would <code>.to_right_inv</code> be acceptable as a spelling instead?</p>",
        "id": 245278871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625728170
    },
    {
        "content": "<p>Ignoring instances for a moment, the statement seems quite weird - you're saying that for any <code>f</code>, <code> λ x, sigma.mk x (f x)</code> is a right inverse to <code>sigma.fst</code></p>",
        "id": 245279549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625728623
    },
    {
        "content": "<p>Yes I'd need a coercion. Basically I want sections for vector bundles to be recognized as sections for fiber bundles</p>",
        "id": 245295929,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625740625
    },
    {
        "content": "<p>Why is the statement weird? It seems natural to me</p>",
        "id": 245296026,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625740695
    },
    {
        "content": "<p>I've realized that the coercion you're after can be broken down into one that almost already exists (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_fn_range\">docs#lift_fn_range</a>), and one that doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.lint</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"sd\">/-- Should this be a `lift` instead? Or maybe this should work on a type alias of</span>\n<span class=\"sd\">`sigma`, which I think you have already. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_coe_to_sigma</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">sigma.mk</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- A dependent version of `lift_fn_range`. It's easy to argue this should exist,</span>\n<span class=\"sd\">but note it uses `has_lift` not `has_coe`, so the `↑` is required. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">lift_fn_range'</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n\n\n<span class=\"c1\">-- the coercion lean finds is the one you're asking for, it seems</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">sigma</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 245301864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625744749
    },
    {
        "content": "<p>Is the only difference between <code>has_coe</code> and <code>has_lift</code> for <code>has_lift</code> you need to put the arrow yourself whereas for <code>has_coe</code> Lean does automatically?</p>",
        "id": 245303177,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625745565
    },
    {
        "content": "<p>Also I never understood what <code>has_lift_t</code> is, since \"theorem proving in Lean\" only says transitive closure which I do not know what it is...</p>",
        "id": 245303310,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625745622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245301864\">said</a>:</p>\n<blockquote>\n<p>I've realized that the coercion you're after can be broken down into one that almost already exists (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_fn_range\">docs#lift_fn_range</a>), and one that doesn't:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.lint</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"sd\">/-- Should this be a `lift` instead? Or maybe this should work on a type alias of</span>\n<span class=\"sd\">`sigma`, which I think you have already. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_coe_to_sigma</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">sigma.mk</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- A dependent version of `lift_fn_range`. It's easy to argue this should exist,</span>\n<span class=\"sd\">but note it uses `has_lift` not `has_coe`, so the `↑` is required. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">lift_fn_range'</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n\n\n<span class=\"c1\">-- the coercion lean finds is the one you're asking for, it seems</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">sigma</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The first coercion here already exists (for the type Alias)</p>",
        "id": 245303626,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625745800
    },
    {
        "content": "<p>Looking at the instances for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_t\">docs#has_coe_t</a> may help understand what transitivity means here</p>",
        "id": 245303646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625745817
    },
    {
        "content": "<p>In particular, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_trans\">docs#coe_trans</a> is the key</p>",
        "id": 245303720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625745846
    },
    {
        "content": "<p>Which says \"if A is convertible to B and B is <em>transitively</em> convertible to C, then A is transitively convertible to C\"</p>",
        "id": 245303827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625745917
    },
    {
        "content": "<p>The other half of this \"induction\" rule is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_base\">docs#coe_base</a>, which says \"if A is convertible to B then if A is transitively convertible to B\"</p>",
        "id": 245303862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625745944
    },
    {
        "content": "<p>What does transitively means?</p>",
        "id": 245303877,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625745952
    },
    {
        "content": "<p>That definition is self-referencing, it means what it defines it to mean</p>",
        "id": 245303959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625745979
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 245304014,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625746021
    },
    {
        "content": "<p>That's not the whole picture, but it's hopefully enough to get an idea</p>",
        "id": 245304063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625746045
    },
    {
        "content": "<p>So it is something that is just internal to Lean, the user should never declare <code>has_coe_t</code> themselves</p>",
        "id": 245304073,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625746054
    },
    {
        "content": "<p>No, you declare <code>has_coe_t</code> instead of <code>has_coe</code> if you don't want your coercion to take place anywhere but at the end of transitive coercions</p>",
        "id": 245304197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625746118
    },
    {
        "content": "<p>for example, iirc, the ℕ → arbitrary semiring coe is defined as <code>has_coe_t</code></p>",
        "id": 245304256,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625746174
    },
    {
        "content": "<p>Either because otherwise the search would be too big (the linter will usually catch this), or because it doesn't make sense</p>",
        "id": 245304262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625746176
    },
    {
        "content": "<p>There's a library note about that, right <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>?</p>",
        "id": 245304295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625746201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245304197\">said</a>:</p>\n<blockquote>\n<p>No, you declare <code>has_coe_t</code> instead of <code>has_coe</code> if you don't want your coercion to take place anywhere but at the end of transitive coercions</p>\n</blockquote>\n<p>Oh I see, I guess this is also the reason why is it useful to distinguish between <code>has_coe_t</code> and <code>has_coe</code> and they cannot all be <code>has_coe</code></p>",
        "id": 245304355,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625746215
    },
    {
        "content": "<p>yes I think so</p>",
        "id": 245304392,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625746247
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#coercion%20into%20rings\">https://leanprover-community.github.io/mathlib_docs/notes.html#coercion%20into%20rings</a> here we are!</p>",
        "id": 245304607,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625746391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245301864\">said</a>:</p>\n<blockquote>\n<p>I've realized that the coercion you're after can be broken down into one that almost already exists (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_fn_range\">docs#lift_fn_range</a>), and one that doesn't:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.lint</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"sd\">/-- Should this be a `lift` instead? Or maybe this should work on a type alias of</span>\n<span class=\"sd\">`sigma`, which I think you have already. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_coe_to_sigma</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">sigma.mk</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- A dependent version of `lift_fn_range`. It's easy to argue this should exist,</span>\n<span class=\"sd\">but note it uses `has_lift` not `has_coe`, so the `↑` is required. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">lift_fn_range'</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n\n\n<span class=\"c1\">-- the coercion lean finds is the one you're asking for, it seems</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">sigma</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I wonder why this code would work: is <code>B → E</code> just syntactic sugar for <code>Π x: B, E</code>? Otherwise how does Lean recognize a function as a dependent type?</p>",
        "id": 245304847,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625746556
    },
    {
        "content": "<p>A connected question: should then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">lift_fn_range'</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>completely replace <code>lift_fn_range</code>?</p>",
        "id": 245305021,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625746659
    },
    {
        "content": "<p>Yes, it is just syntactic sugar</p>",
        "id": 245305259,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625746801
    },
    {
        "content": "<p>I think it might still be worth having both; dependent typed instances create more work for the elaborator, and having a non-dependent variant will both provide a possible shortcut, and allow the user to disable the slower instance separately.</p>",
        "id": 245305418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625746911
    },
    {
        "content": "<p>I don't think there's much harm to having both, at any rate</p>",
        "id": 245305485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625746933
    },
    {
        "content": "<p>Ok isn't there a coe version of <code>lift_fn_range</code>? I was so convinced there was...</p>",
        "id": 245305715,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625747074
    },
    {
        "content": "<p>No, and that's a deliberate choice I think</p>",
        "id": 245306711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625747694
    },
    {
        "content": "<p>Where would you place your <code>lift_fn_range</code>?</p>",
        "id": 245313350,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625751394
    },
    {
        "content": "<p>I'd probably make a PR against lean core to add it next to <code>lift_fn_range</code></p>",
        "id": 245314145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625751740
    },
    {
        "content": "<p>Alternatively, <code>logic.function.basic</code> would be reasonable</p>",
        "id": 245314173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625751758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245314145\">said</a>:</p>\n<blockquote>\n<p>I'd probably make a PR against lean core to add it next to <code>lift_fn_range</code></p>\n</blockquote>\n<p>Yeah I'm not sure I would know how to do this... should I PR to a different repo than that of mathlib?</p>",
        "id": 245315840,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625752472
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/\">https://github.com/leanprover-community/lean/</a> ?</p>",
        "id": 245316005,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1625752551
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_fn_range/src\">src#lift_fn_range</a> should tell you where the file is that needs changing</p>",
        "id": 245318494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625753514
    },
    {
        "content": "<p>If you edit that file, changing a few <code>/- -/</code>s to <code>/-! -/</code> would make them appear in the web docs</p>",
        "id": 245319025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625753732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245316005\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean/\">https://github.com/leanprover-community/lean/</a> ?</p>\n</blockquote>\n<p>Ok thanks</p>",
        "id": 245320625,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625754395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245319025\">said</a>:</p>\n<blockquote>\n<p>If you edit that file, changing a few <code>/- -/</code>s to <code>/-! -/</code> would make them appear in the web docs</p>\n</blockquote>\n<p>Do you have specific ones I should change or most of them?</p>",
        "id": 245321019,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625754581
    },
    {
        "content": "<p>Mainly the one at the top of the file</p>",
        "id": 245341738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625763861
    },
    {
        "content": "<p>L7: <code>/-!</code></p>\n<p>L101 L118 L140 L150 (maybe L168): <code>/--</code></p>",
        "id": 245342193,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625764091
    },
    {
        "content": "<p>Should I fork or can I get permission to contribute so to open a new branch?</p>",
        "id": 245342486,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625764210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245342193\">said</a>:</p>\n<blockquote>\n<p>L7: <code>/-!</code></p>\n<p>L101 L118 L140 L150 (maybe L168): <code>/--</code></p>\n</blockquote>\n<p>Ok thanks</p>",
        "id": 245342524,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625764231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245342486\">said</a>:</p>\n<blockquote>\n<p>Should I fork or can I get permission to contribute so to open a new branch?</p>\n</blockquote>\n<p>I'll give you permission, 1 sec.</p>",
        "id": 245342606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625764273
    },
    {
        "content": "<p>Ok thanks</p>",
        "id": 245342617,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625764282
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/invitations\">https://github.com/leanprover-community/lean/invitations</a></p>",
        "id": 245342776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625764343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245303877\">said</a>:</p>\n<blockquote>\n<p>What does transitively means?</p>\n</blockquote>\n<p>From a certain point of view, the coercion typeclasses define a relation on types/sorts, but rather than being <code>Prop</code>-valued, given types <code>a</code> and <code>b</code>, then there either is or is not an instance for <code>has_coe a b</code> (the relation is determined by the typeclass resolution algorithm rather than something more mathy).</p>\n<p>Transitive closure then means what it does for relations: take the smallest transitive relation containing the original relation.</p>",
        "id": 245343034,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625764478
    },
    {
        "content": "<p>For normal mathy relations, you can use some inductive type to construct a transitive closure, but because the relation is implemented at the level of typeclasses, it's instead implemented using the <code>coe_trans</code> instance.</p>\n<p>You can almost think of this as being one of the constructors of a <code>Prop</code>-valued inductive type <code>has_coe_t</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coe_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 245343578,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625764740
    },
    {
        "content": "<p>Is this the correct form to write it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">lift_pi_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 245345364,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625765616
    },
    {
        "content": "<p>Seems fine to me.  You might use the universe variables defined in the file, just to clarify they're all different:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">lift_pi_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">ua</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">ub</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>(also, newlines for line length reasons, though the first line is still over 100 characters)</p>",
        "id": 245346510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625766268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245346510\">said</a>:</p>\n<blockquote>\n<p>Seems fine to me.  You might use the universe variables defined in the file, just to clarify they're all different:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">lift_pi_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">ua</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">ub</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>(also, newlines for line length reasons)</p>\n</blockquote>\n<p>Ok for the universes, as for the length I saw that the convention in the file is to write everything on one line and many other lines are much longer than the one I wrote</p>",
        "id": 245347113,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625766443
    },
    {
        "content": "<p>I suppose mathlib style guidelines probably don't carry over to lean core, but if I were writing it I would probably use the new guidelines for new code (leaving everything else alone).  Of course, it's up to you and the reviewers.</p>",
        "id": 245347752,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625766800
    },
    {
        "content": "<p>Once it will build in the Lean repo, how will we know it does not break anything in Mathlib?</p>",
        "id": 245348178,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625766977
    },
    {
        "content": "<p>Mathlib has to be manually bumped to new lean versions</p>",
        "id": 245348688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625767238
    },
    {
        "content": "<p>Anyway, now that you've made the PR, someone more involved in lean releases than me should know what's best.</p>",
        "id": 245348771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625767277
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 245348781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625767282
    },
    {
        "content": "<p>(For the record, the PR is at <a href=\"https://github.com/leanprover-community/lean/issues/590\">lean#590</a>.)</p>",
        "id": 245349306,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1625767509
    },
    {
        "content": "<p>Ok with this modification of Lean core, there is still a problem in my code, as shown in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.topological_fiber_bundle</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">bundle</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">lift_fn_range''</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_lift_t</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">bundle_section'</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">continuous_bundle_section'</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">bundle_section</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">continuous_bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">continuous_bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">continuous_bundle_section'.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">@[continuity]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous'</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.continuous_to_fun</span>\n\n<span class=\"c1\">-- does not work... Why!? `has_lift_t` should be transitive!!</span>\n<span class=\"kd\">@[continuity]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous''</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.continuous_to_fun</span>\n</code></pre></div>",
        "id": 245430821,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625830092
    },
    {
        "content": "<p>I suspect this is behaving strangely for you because <code>has_coe_to_fun</code> is getting involved here too</p>",
        "id": 245434739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625832820
    },
    {
        "content": "<p>But I haven't tried it out myself so am only guessing.</p>",
        "id": 245434757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625832840
    },
    {
        "content": "<p>What <code>has_coe_to_fun</code> are you referring to? there's none in the code!</p>",
        "id": 245442173,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625836898
    },
    {
        "content": "<p>I haven't taken any time to understand what's going on, but I did find this fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"n\">continuous_bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">continuous_bundle_section'.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">@[continuity]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous'</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.continuous_to_fun</span>\n\n<span class=\"c1\">-- works, too</span>\n<span class=\"kd\">@[continuity]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous''</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.continuous_to_fun</span>\n</code></pre></div>",
        "id": 245464644,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625847934
    },
    {
        "content": "<p>Would this be acceptable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.topological_fiber_bundle</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">bundle</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">bundle_section</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bundle_section.to_total</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">bundle_section</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">total_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">continuous_bundle_section'</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">bundle_section</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">continuous_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun.to_total</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">continuous_bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bundle_section</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">continuous_bundle_section'.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">continuous_bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[continuity]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous'</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">bundle_section.to_total</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.continuous_to_fun</span>\n</code></pre></div>",
        "id": 245469742,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625850328
    },
    {
        "content": "<p>It seems like basically you want every instance that <code>Π x, E x</code> already has (to give the space of sections structure when the fibers have that structure), so it's worth having <code>bundle_section</code> be <code>reducible</code>. But, it's fraught with peril to add additional instances to this.  Dot notation here is used to add this <code>to_total</code> function to the pre-existing type when it's being thought of as a <code>bundle_section</code>.</p>\n<p>(Also, I know there are a bunch of coercions that implement <code>to_total</code>, but I found it hard to follow the chain to figure out what it was doing! It only takes 13 characters to write the definition, so it seems clearer to just write it.)</p>",
        "id": 245470484,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625850689
    },
    {
        "content": "<p>How did the original lift work? The confusing thing to me is that <code>total_space</code> is semireducible, so I would have thought typeclass resolution wouldn't have found the <code>has_coe_to_sigma</code> instance.</p>",
        "id": 245471114,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625850974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Reducible/near/245464644\">said</a>:</p>\n<blockquote>\n<p>I haven't taken any time to understand what's going on, but I did find this fix:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lift</span> <span class=\"o\">(</span><span class=\"n\">continuous_bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">continuous_bundle_section'.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">@[continuity]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous'</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">bundle_section'</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.continuous_to_fun</span>\n\n<span class=\"c1\">-- works, too</span>\n<span class=\"kd\">@[continuity]</span> <span class=\"kd\">lemma</span> <span class=\"n\">continuous''</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">total_space</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s.continuous_to_fun</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ok this is weird: why does it work as with <code>has_lift</code> but not with <code>has_coe</code>?</p>",
        "id": 245552322,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625926064
    },
    {
        "content": "<p>I might have found a solution for the coercion to work</p>",
        "id": 245555795,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625929803
    },
    {
        "content": "<p>Btw, <a href=\"https://github.com/leanprover-community/lean/issues/590\">lean#590</a> is ready for review!</p>",
        "id": 245556521,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625930658
    },
    {
        "content": "<p><code>reducible</code> is behaving weirdly <a href=\"https://github.com/leanprover-community/mathlib/pull/8154#discussion_r667506387\">here</a>. Are either <code>simp</code> or <code>rw</code> supposed to see through reducible defs?</p>",
        "id": 245861392,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1626198456
    }
]