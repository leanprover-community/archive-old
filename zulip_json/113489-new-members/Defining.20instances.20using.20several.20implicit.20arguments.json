[
    {
        "content": "<p>Another newbie syntax question: why does this not work (the definition of the class does work, but the instance does not, it says <code>failed to synthesize type class instance for...</code>. If I omit the parts <code>[q : ℕ] [char_p F q]</code> (both in the class and the instance), it does work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.separable</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_has_separable_contraction</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">has_separable_contraction'</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">g.separable</span> <span class=\"bp\">∧</span> <span class=\"n\">polynomial.expand</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">my_irreducible_has_separable_contraction</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">irred</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">my_has_separable_contraction</span> <span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 229036871,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614984184
    },
    {
        "content": "<p>What are your imports?</p>",
        "id": 229037264,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984385
    },
    {
        "content": "<p>Oh, you need to use <code>(q : \\nat)</code></p>",
        "id": 229037496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984507
    },
    {
        "content": "<p>But I can't know for sure without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 229037515,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984523
    },
    {
        "content": "<p>yes, sorry, I forgot to include the imports.</p>",
        "id": 229037578,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614984557
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.separable</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_has_separable_contraction</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">has_separable_contraction'</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">g.separable</span> <span class=\"bp\">∧</span> <span class=\"n\">polynomial.expand</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">my_irreducible_has_separable_contraction</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">irred</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">my_has_separable_contraction</span> <span class=\"n\">F</span> <span class=\"n\">q</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229037593,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984572
    },
    {
        "content": "<p><code>[ .. ]</code> is only used for classes.</p>",
        "id": 229037610,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984591
    },
    {
        "content": "<p>OK -- is it possible to leave the q implicit by other means?</p>",
        "id": 229037709,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614984626
    },
    {
        "content": "<p>yeah, one sec.</p>",
        "id": 229037725,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984638
    },
    {
        "content": "<p>Use <code>{}</code> instead</p>",
        "id": 229037731,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1614984642
    },
    {
        "content": "<p><code>{ q : \\N }</code> ?</p>",
        "id": 229037738,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614984646
    },
    {
        "content": "<p>but he wants the field to have characteristic <code>q</code></p>",
        "id": 229037802,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984697
    },
    {
        "content": "<p>I would do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.separable</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_has_separable_contraction</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">has_separable_contraction'</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">],</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">g.separable</span> <span class=\"bp\">∧</span> <span class=\"n\">polynomial.expand</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">my_irreducible_has_separable_contraction</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">irred</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">my_has_separable_contraction</span> <span class=\"n\">F</span>  <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229037808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984702
    },
    {
        "content": "<p>OK, what is the general rule? If I use { q ... } I cannot refer to it in any later [...] ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.separable</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_has_separable_contraction</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">has_separable_contraction'</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">g.separable</span> <span class=\"bp\">∧</span> <span class=\"n\">polynomial.expand</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">my_irreducible_has_separable_contraction</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">irred</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">my_has_separable_contraction</span> <span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does not work, with the same error message.</p>",
        "id": 229037946,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614984773
    },
    {
        "content": "<p>What's the name of the function which returns the characteristic of a ring?</p>",
        "id": 229038003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984826
    },
    {
        "content": "<p>char_ring</p>",
        "id": 229038014,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614984835
    },
    {
        "content": "<p>I believe</p>",
        "id": 229038041,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614984842
    },
    {
        "content": "<p>Wait, <code>q</code> doesn't appear at all after the <code>:</code> in your class, right?</p>",
        "id": 229038123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984878
    },
    {
        "content": "<p>Why do you need it at all?</p>",
        "id": 229038129,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984889
    },
    {
        "content": "<p>Oh, for the purpose of testing I replaced <code>q^m</code> by <code>3^m</code>. Sorry about this glitch in posting it, but I do need it in the definition of the class.</p>",
        "id": 229038281,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614984965
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 229038302,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614984976
    },
    {
        "content": "<p>So you could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.separable</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_has_separable_contraction</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">has_separable_contraction'</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">g.separable</span> <span class=\"bp\">∧</span> <span class=\"n\">polynomial.expand</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">my_irreducible_has_separable_contraction</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">irred</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">my_has_separable_contraction</span> <span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229038326,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614985002
    },
    {
        "content": "<p>Note this works;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">ring_char</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 229038395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614985060
    },
    {
        "content": "<p>Which means that the typeclass system will automatically know that <code>F</code> has characteristic <code>ring_char F</code> (as it should be!)</p>",
        "id": 229038490,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614985097
    },
    {
        "content": "<p>OK, I see, thanks. This works in this special case; for the purpose of having a mwe, I also simplified the code in another respect. I have defined a class <code>exp_char F p</code> (which otherwise is identical to char_p, but it is about the exponential characteristic). I guess I could also adapt the definition of <code>ring_char</code> to this situation and produce a function like <code>ring_exp_char</code>. This would allow me to use your solution. But is there no other general smooth way of invoking <code>[some_class some_structure some_natural_number]</code> without this detour (or the detour with the <code>forall q : </code> that you also kindly suggested)?</p>",
        "id": 229038752,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614985242
    },
    {
        "content": "<p>The other option is to make <code>q</code> explicit, meaning that your class says \"This is a polynomial which is a contraction of a separable polynomial, but you are only allowed to use it for fields of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>\".</p>",
        "id": 229038981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614985344
    },
    {
        "content": "<p>I.e. the class itself will depend on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>.</p>",
        "id": 229039020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614985365
    },
    {
        "content": "<p>Yes, but it feels (to me newbie!) somehow unnatural: I leave the existence &amp; assumption (concerning the characteristic) on the field implicit, but need to explicitly feed in the natural number.</p>",
        "id": 229039241,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614985472
    },
    {
        "content": "<p>Well, it's a theorem that a field has a unique characteristic :)</p>",
        "id": 229039292,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614985506
    },
    {
        "content": "<p>Yes, sure, I won't argue with you on that! :) , and of course all your solutions do work. Just to understand it also in general, let me ask one last time: is it not possible to have implicit assumptions involving an implicitly present natural number?</p>",
        "id": 229039688,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614985691
    },
    {
        "content": "<p>Oh, it's certainly possible in cases where lean can infer what that natural number must be from context.</p>",
        "id": 229039823,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614985758
    },
    {
        "content": "<p>The issue is that lean had no way of inferring what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> was supposed to be in <code>my_has_separable_contraction</code>, just because you declare <code>[char_p F q</code> as an assumption for <code>my_irreducible_has_separable_contraction</code>. That's the point I was trying to make above -- you can perfectly legally write <br>\n<code>{F : Type} [field F] [char_p F 5] [char_p F 3]</code></p>",
        "id": 229040203,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614985939
    },
    {
        "content": "<p>How would lean know whether the characteristic of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span>?</p>",
        "id": 229040247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614985976
    },
    {
        "content": "<p>(of course you can prove false with these assumptions, but that's another point altogether.)</p>",
        "id": 229040304,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614985999
    },
    {
        "content": "<p>OK, I understand your point. In some sense I would like to put <code>[q : \\N]</code> both in the class, and also in the instance (prior to the char_p, so that this clause does know about the q). If I understand you correctly,  the (only?) thing that makes this fail is the fact that a number is not a structure, so I guess I would like to find a syntax that overcome this hurdle.</p>",
        "id": 229040450,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614986072
    },
    {
        "content": "<p>Not quite. It's the fact that a number is not a typeclass. Typeclasses are things like <code>field</code>, <code>ring</code>, etc.</p>",
        "id": 229040522,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614986108
    },
    {
        "content": "<p>You can very well have a class that's a plain proposition (just like the one you made).</p>",
        "id": 229040575,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614986132
    },
    {
        "content": "<p>OK, yes. So: can I turn a number into a typeclass (and otherwise keep its nature as is)?</p>",
        "id": 229040715,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614986199
    },
    {
        "content": "<p>And you can make a class that is just a number, like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">foo.n</span>\n</code></pre></div>",
        "id": 229040744,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614986221
    },
    {
        "content": "<p>This is a bit silly, but you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">foo.n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">foo.n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 229040927,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614986329
    },
    {
        "content": "<p>OK, I see. Thank you very much for your advice -- I appreciate it! Just to record it for later readers: this solution would read like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.separable</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_has_separable_contraction</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">foo.n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">has_separable_contraction'</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">g.separable</span> <span class=\"bp\">∧</span> <span class=\"n\">polynomial.expand</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">foo.n</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">my_irreducible_has_separable_contraction</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">foo.n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">irred</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n  <span class=\"n\">my_has_separable_contraction</span> <span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229041281,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614986512
    },
    {
        "content": "<p>Maybe it's worth mentioning that such a hack should not be done in practice.</p>",
        "id": 229049113,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614991752
    }
]