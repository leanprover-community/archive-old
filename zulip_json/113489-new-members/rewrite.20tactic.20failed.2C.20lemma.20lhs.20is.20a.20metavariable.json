[
    {
        "content": "<p>Why is <code>rw ← b_ih_h,</code> here failing? </p>\n<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, lemma lhs is a metavariable\nstate:\na b_n b_ih_w : mynat,\nb_ih_h : b_n + succ b_ih_w = a\n⊢ a = succ b_n + b_ih_w\n</pre></div>",
        "id": 192156408,
        "sender_full_name": "Jiekai",
        "timestamp": 1585457189
    },
    {
        "content": "<p>because rw is stupid</p>",
        "id": 192156420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585457268
    },
    {
        "content": "<p>try <code>rw b_ih_h.symm</code></p>",
        "id": 192156421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585457276
    },
    {
        "content": "<p>Worked! so many tricks</p>",
        "id": 192156477,
        "sender_full_name": "Jiekai",
        "timestamp": 1585457349
    },
    {
        "content": "<p>What's the difference between <code>symm</code> and <code> ← </code>?</p>",
        "id": 192156568,
        "sender_full_name": "Jiekai",
        "timestamp": 1585457568
    },
    {
        "content": "<p>In theory, nothing</p>",
        "id": 192164938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585473689
    },
    {
        "content": "<p>I am surprised the arrow didn't work</p>",
        "id": 192164943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585473703
    },
    {
        "content": "<p>The reason is because the rewrite tactic is explicitly checking that the lhs is not a variable. The idea here is that if you rewrite with something that matches any term, you will not get a useful result. This check is wrong for two reasons: (1) the variable is not a metavariable, and even if it was that might still be a reasonable thing to do if the type of the variable is constraining enough; and (2) it's always the lhs, not the rhs, even if you use <code>&lt;-</code>.</p>",
        "id": 192168915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585480347
    },
    {
        "content": "<p>Isn't at least point 2) something that could change in Lean 3.8?</p>",
        "id": 192168937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585480409
    },
    {
        "content": "<p>both could be fixed in lean 3.8</p>",
        "id": 192169657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585481481
    },
    {
        "content": "<p>There is nothing wrong with the algorithm, there is just a check that throws an exception. Delete the check and everything else should work</p>",
        "id": 192169676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585481521
    },
    {
        "content": "<p>I meant that point 2) sounds like a plain <em>bug</em>, whereas point 1) is debatable.</p>",
        "id": 192169714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585481524
    },
    {
        "content": "<p>I think that the part of 1) about not matching variables that are not metavariables / universally quantified variables is also a bug. For example in the example above, we are rewriting with an equality in the context, which can only match <code>a</code>, not anything else with the same type as <code>a</code></p>",
        "id": 192170139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585482191
    },
    {
        "content": "<p>The only time the error is reasonable is if you are rewriting with <code>\\forall x, x = ...</code>, so that the pattern can match any term</p>",
        "id": 192170192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585482254
    },
    {
        "content": "<p>Hi all ! Is this point still a problem ? I am asking because I had this type of issue for the first time today and only with the rule mul_mul_div: when I try to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">):</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">mul_mul_div</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>this does not work and gives the message \"rewrite tactic failed, lemma lhs is a metavariable\" while when I try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">):</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">mul_mul_div</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>it works. Since all other basic rules that I tried in the last months worked well I was wondering whether this is a general issue with rw / I am doing something wrong in this example / this only concerns mul_mul_div (and maybe a few others  that I haven't tried) for some reason ?</p>",
        "id": 273674115,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1646154307
    },
    {
        "content": "<p>This is curious -- it shouldn't matter that the LHS is a metavariable since you're rewriting in the reverse direction.</p>\n<p>Here's a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">):</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">(</span><span class=\"n\">mul_mul_div</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273675525,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646154771
    },
    {
        "content": "<p>Is this a faulty check in <code>rw</code>? That is, it checks whether there are metavariables in the LHS before it actually knows which side of the equality is the LHS?</p>",
        "id": 273676563,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646155166
    },
    {
        "content": "<p>Thanks for the answer :) Yes, this is curious, and also I tried many basic rules and never had that before...</p>",
        "id": 273681419,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1646156872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> are you aware of this?</p>",
        "id": 273717892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646172158
    },
    {
        "content": "<p>Is it the case in general that <code>rw</code> never works if you provide <code>_</code> arguments? (assuming they can't somehow be inferred before looking at the rewrite target)</p>",
        "id": 273723971,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646175249
    },
    {
        "content": "<p>No, I definitely made that work before.</p>",
        "id": 273725803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646176112
    },
    {
        "content": "<p>Yes, I was aware of this and find it mildly amusing</p>",
        "id": 273725816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646176120
    },
    {
        "content": "<p>I'm not even sure the check is all that useful, rw can totally work even if the pattern is a metavariable</p>",
        "id": 273725921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646176174
    },
    {
        "content": "<p>it should just match the first subterm which matches the type</p>",
        "id": 273725952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646176194
    },
    {
        "content": "<p>Oh, I even say as much <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20tactic.20failed.2C.20lemma.20lhs.20is.20a.20metavariable/near/192168915\">earlier in this thread</a></p>",
        "id": 273726140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646176309
    },
    {
        "content": "<p>It looks like it might be an easy fix: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/rewrite_tactic.cpp#L62\">this if block</a> should move two lines up. (Or, if the LHS check is not actually useful, the two lines above could be deleted.)</p>",
        "id": 273728585,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646177730
    },
    {
        "content": "<p>I tried removing the LHS check to see what would happen, and it looks like it's there to give a nicer error message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">14:3: rewrite tactic failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">  ?m_1</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>According to a docstring for the pattern matching algorithm (<code>kabstract</code>): \"We detect subterms equivalent to \\c t using key-matching.<br>\n    That is, only perform is_def_eq tests when the head symbol of substerm is equivalent to head symbol of \\c t.\"</p>",
        "id": 273731209,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646179205
    },
    {
        "content": "<p>But backwards rewriting with LHS metavariables works great:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nat.mul_div_left'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">nat.mul_div_left</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">nat.mul_div_left'</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273731424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646179254
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/690\">lean#690</a></p>",
        "id": 273734452,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646181188
    },
    {
        "content": "<p>The current behavior encourages us to write lemmas with the simpler dude on the RHS, right?</p>",
        "id": 273741519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646186200
    },
    {
        "content": "<p>Not that that should mean we leave it broken, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_mul_div\">docs#mul_mul_div</a> looks backwards to me</p>",
        "id": 273741549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646186243
    }
]