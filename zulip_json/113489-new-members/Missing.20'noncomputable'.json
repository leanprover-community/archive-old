[
    {
        "content": "<p>Still working on re-implementing the natural numbers for my edification. My near-clone of mathlib's <code>decidable_le</code> complains </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">missing</span> <span class=\"bp\">'</span><span class=\"kd\">noncomputable</span><span class=\"bp\">'</span> <span class=\"n\">modifier</span><span class=\"o\">,</span> <span class=\"kd\">definition</span> <span class=\"bp\">'</span><span class=\"n\">peano.nat.decidable_le'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">compiled</span>\n</code></pre></div>",
        "id": 277835399,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649142117
    },
    {
        "content": "<p>(I realize I'm making a habit of not giving sufficient <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>'s, sorry  -_-. In my defense, this time I think it would involve copying a <em>lot</em> of my code over, since the whole point is that all the proofs have to actually be valid to a constructivist? Or can I in fact just fill in some theorems with 'sorry's and put that in?)</p>",
        "id": 277835541,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649142230
    },
    {
        "content": "<p>... actually, judging from the other error messages, should this be a problem local to the proof/algorithm?</p>",
        "id": 277835765,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649142401
    },
    {
        "content": "<p>since it doesn't say \"depends on <code>&lt;some other proof&gt;</code>\"</p>",
        "id": 277835778,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649142413
    },
    {
        "content": "<p>This is very hard to debug. It might just be that you haven't finished writing your definition.</p>",
        "id": 277836385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649142871
    },
    {
        "content": "<p>that's... unfortunate. Um. Here's the local bit: if this doesn't look obviously wrong, I guess I'll just give up for now and come back after I finish more of the file?</p>",
        "id": 277836608,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649143048
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">lemma</span> <span class=\"n\">decidable_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nat.zero</span>      <span class=\"n\">b</span>  <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">zero_le</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"n\">nat.zero</span>  <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">succ_not_le_zero</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">b</span><span class=\"o\">)</span>     <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">decidable_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">is_true</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"o\">(</span><span class=\"n\">succ_le_succ.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">is_false</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">succ_le_succ</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277836613,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649143053
    },
    {
        "content": "<p>thanks anyway</p>",
        "id": 277836676,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649143083
    },
    {
        "content": "<p>Doesn't look obviously wrong <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 277836725,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649143129
    },
    {
        "content": "<p>mk~</p>",
        "id": 277836735,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649143136
    },
    {
        "content": "<p>I'll come back and bug people later I guess lol</p>",
        "id": 277836746,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649143142
    },
    {
        "content": "<p>and see if I can somehow pull an MWE out of this</p>",
        "id": 277836758,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649143151
    },
    {
        "content": "<p>Yes you can sorry other proofs and definitions in a mwe</p>",
        "id": 277838645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649144431
    },
    {
        "content": "<p>Well sure, but that's not the question; the question is, if the bug is specifically \"I'm getting noncomputable/cannot be compiled bugs, is it still legitimate to leave <code>sorry</code>'s lying around?\"</p>",
        "id": 277839619,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649145114
    },
    {
        "content": "<p><code>lemma</code>s don't have code generation, so they often cause this kind of problem. Don't use <code>lemma</code> for data</p>",
        "id": 277840110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649145439
    },
    {
        "content": "<p>... oh.</p>",
        "id": 277840267,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649145531
    },
    {
        "content": "<p>well.</p>",
        "id": 277840269,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649145532
    },
    {
        "content": "<p>that's good to know.</p>",
        "id": 277840273,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649145535
    },
    {
        "content": "<p>also bizarre, but okay</p>",
        "id": 277840274,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649145537
    },
    {
        "content": "<p>I believe the suggestion to use <code>noncomputable lemma</code> is due to <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> 's recent change</p>",
        "id": 277840316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649145565
    },
    {
        "content": "<p>that fixed it. thanks!</p>",
        "id": 277840324,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649145573
    },
    {
        "content": "<p>but <code>def</code> should just work here</p>",
        "id": 277840325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649145573
    },
    {
        "content": "<p>that fixed it. thanks!</p>",
        "id": 277840340,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649145583
    },
    {
        "content": "<p>that fixed it. thanks!</p>",
        "id": 277840370,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649145601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/Missing.20'noncomputable'/near/277840274\">said</a>:</p>\n<blockquote>\n<p>also bizarre, but okay</p>\n</blockquote>\n<p>It's not really bizarre no, lemmas are proofs and proofs are irrelevant so they can just be ignored for code generation. Furthermore lemmas are usually declared using tactics and the stuff that tactics spits out is not meant to be turned into executable code if you wanted it to, the job of tactics is to generate a term of the desired type,not to do that in a pretty or efficient way.</p>",
        "id": 277840686,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649145738
    },
    {
        "content": "<p>tactics usually try to be efficient, although they sometimes do no-op steps on purpose</p>",
        "id": 277841186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649146113
    },
    {
        "content": "<p>Eh bad wording, I meant their job is not to generate a term of the type that can be computed in an efficient way</p>",
        "id": 277841450,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649146306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/Missing.20'noncomputable'/near/277839619\">said</a>:</p>\n<blockquote>\n<p>Well sure, but that's not the question; the question is, if the bug is specifically \"I'm getting noncomputable/cannot be compiled bugs, is it still legitimate to leave <code>sorry</code>'s lying around?\"</p>\n</blockquote>\n<p>Pretty much anything that reproduces the behavior you're observing is legitimate for a mwe.</p>",
        "id": 277897901,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649173085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/Missing.20'noncomputable'/near/277840274\">said</a>:</p>\n<blockquote>\n<p>also bizarre, but okay</p>\n</blockquote>\n<p>The error message could admittedly be better by giving a reason:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">missing</span> <span class=\"bp\">'</span><span class=\"kd\">noncomputable</span><span class=\"bp\">'</span> <span class=\"n\">modifier</span><span class=\"o\">,</span> <span class=\"kd\">definition</span> <span class=\"bp\">'</span><span class=\"n\">peano.nat.decidable_le'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">compiled</span> <span class=\"n\">since</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">theorem</span>\n</code></pre></div>",
        "id": 277899027,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649173458
    }
]