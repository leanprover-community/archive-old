[
    {
        "content": "<p>In Isabelle I am a big fan of named subgoals (I find them more readable and easier to maintain), and in Coq I can at least get close using bullets. In lean I found <code>{ … }</code> allows me to focus on a single goal. Is there something like Coq’s bullets in lean?</p>",
        "id": 267579207,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1641907153
    },
    {
        "content": "<p>Not in Lean 3. We only have <code>{ ... }</code> to structure subproofs.</p>",
        "id": 267579543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641907334
    },
    {
        "content": "<p>Well... you can write <code>show your_target, { ... }</code> which adds readability.</p>",
        "id": 267579587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641907361
    },
    {
        "content": "<p><code>{...}</code> is really the equivalent of the bullets. What you can also do to improve readability is to state the goal you are going to prove, with <code>show</code>. Like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- assume you have 3 goals foo, bar and baz,</span>\n  <span class=\"k\">show</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n    <span class=\"bp\">...</span> <span class=\"o\">},</span>\n  <span class=\"k\">show</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n    <span class=\"bp\">...</span> <span class=\"o\">},</span>\n  <span class=\"k\">show</span> <span class=\"n\">baz</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n    <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 267579789,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1641907474
    },
    {
        "content": "<p>Will <code>show</code> pick a suitable subgoal? Or will that break if some change means the goals are now in different order or maybe some are solved?</p>",
        "id": 267580808,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1641907963
    },
    {
        "content": "<p>No, it picks the right goal (if it exists)</p>",
        "id": 267581114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641908140
    },
    {
        "content": "<p>If some change means the goal no longer exits, of course the proof will complain.</p>",
        "id": 267581157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641908161
    },
    {
        "content": "<p>Great, thanks. And I could have just looked that up on <a href=\"https://leanprover.github.io/reference/tactics.html\">https://leanprover.github.io/reference/tactics.html</a> <span aria-label=\"blushing\" class=\"emoji emoji-1f633\" role=\"img\" title=\"blushing\">:blushing:</span></p>",
        "id": 267581293,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1641908220
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#case\">tactic#case</a> is also handy for named goals produced by <code>cases</code> or <code>induction</code></p>",
        "id": 267808597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642033908
    },
    {
        "content": "<p>Ah, this is great, thanks!</p>",
        "id": 267848962,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642069438
    }
]