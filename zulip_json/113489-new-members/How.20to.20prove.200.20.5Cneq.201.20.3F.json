[
    {
        "content": "<p>Dear all,</p>\n<p>I am attempting the finale part of Natural Number Game, where I am trying to proof <code>theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a)</code>. It eventually boils down to prove <code>H: 0 eq 1</code> implies false, and I find myself stuck. Any help would be greatly appreciated!</p>",
        "id": 249094305,
        "sender_full_name": "leafGecko",
        "timestamp": 1628681026
    },
    {
        "content": "<p>Although it's probably not the official way to do it, you can probably prove <code>0 != 1</code> with <code>intro h, cases h</code>.</p>",
        "id": 249094383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628681077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.200.20.5Cneq.201.20.3F/near/249094383\">said</a>:</p>\n<blockquote>\n<p>Although it's probably not the official way to do it, you can probably prove <code>0 != 1</code> with <code>intro h, cases h</code>.</p>\n</blockquote>\n<p><code>intro H', cases H'</code> yields </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">Hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c'</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">c'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>May I know what to do next?</p>",
        "id": 249094714,
        "sender_full_name": "leafGecko",
        "timestamp": 1628681367
    },
    {
        "content": "<p>Could you give the full proof you have until now?</p>",
        "id": 249095568,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628682144
    },
    {
        "content": "<p>I claim that your goal was not \"0 != 1\" then!</p>",
        "id": 249095582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628682167
    },
    {
        "content": "<p>Oops sorry! I mistake the 2nd goal for the current goal... <code>intro h, cases h</code> do solve the goal then.</p>",
        "id": 249095593,
        "sender_full_name": "leafGecko",
        "timestamp": 1628682181
    },
    {
        "content": "<p>I'm not sure if it's available in the natural number game, but I learned about the <code>contradiction</code> tactic recently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You can also use <code>trivial</code>, which tries <code>contradiction</code>.</p>",
        "id": 249142307,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628703677
    },
    {
        "content": "<p>I think <code>contradiction</code> is also a grab bag of strategies; the one that is doing the work here is <code>injection</code>, which is just a special case of the <code>cases</code> tactic</p>",
        "id": 249142814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628703897
    }
]