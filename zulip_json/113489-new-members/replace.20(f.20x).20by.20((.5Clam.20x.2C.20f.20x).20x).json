[
    {
        "content": "<p>Is there a way that does not involve <code>change</code> to replace <code>f x</code> by <code>(\\lam x, f x) x</code> in the goal?  The <code>change</code> command causes a deterministic timeout. The reason I want to do that is to use rw to replace <code>f</code> by something else.</p>",
        "id": 217133036,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1605705693
    },
    {
        "content": "<p>Does <code>change f x with (λ x, f x) x</code> work?</p>",
        "id": 217133787,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1605706101
    },
    {
        "content": "<p>I does, thanks. I did not know that I could use <code>change</code> like that. I used it only to change the whole goal.</p>",
        "id": 217133926,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1605706191
    },
    {
        "content": "<p>correction : it worked for one of the two functions I wanted to replace. The second one still causes a timeout.</p>",
        "id": 217134348,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1605706394
    },
    {
        "content": "<p>Well it is possible that the timeout was caused by another <code>change</code> further down that was rendered invalid by my modifications, so ignore that. My experience with <code>change</code> so far is that when it does not succeed, its most common failure state is to cause a timeout.</p>",
        "id": 217135785,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1605707227
    },
    {
        "content": "<p><code>change</code> needs to check that the new thing is definitionally equal to the old one, and when it <em>isn't</em> definitionally equal there might be a lot of unfolding of definitions that can be done before it gives up.</p>",
        "id": 217136030,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605707352
    },
    {
        "content": "<p>Note also that unless you are doing something like rewriting, you might not need to <code>change</code> anything. Why do you want to change <code>f x</code> into the \"more complicated\" lambda term?</p>",
        "id": 217144547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605711298
    },
    {
        "content": "<p>The original message says \"to use rw\" but I'm sill a little confused why it's needed unless the lemma in question explicitly has the form <code>(\\lam x, f x) = ...</code>, which seems unusual</p>",
        "id": 217144735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605711366
    },
    {
        "content": "<p>my lemma has the form <code>f  = \\lam x, ...</code>, valid for functions <code>f:alpha -&gt; ennreal</code> under some hypotheses and I have a goal of the form <code>f x * g x = ...</code> for some functions <code>f</code> and <code>g</code>.  I wanted to do <code>rw lemma_name hypotheses_f</code> to replace <code>f</code>, then <code>rw lemma_name hypotheses_g</code> to replace <code>g</code>. But that does not work. If I replace <code>f x</code> by <code>(\\lam x, f x) x</code>, it does.</p>",
        "id": 217145981,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1605711869
    },
    {
        "content": "<p>Why not make x an additional input and make your lemma <code>f x = ...</code>? This would be more like the standard mathlib style I guess.</p>",
        "id": 217146074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605711912
    },
    {
        "content": "<p>yes I can also do that. It looked more natural to me to write that the function itself was equal to another function, but if coding in mathlib is easier with the <code>f x = ...</code> formulation, that is the way I will write it from now on.</p>",
        "id": 217146658,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1605712153
    },
    {
        "content": "<p>mathematicians are scared of \\lam ;-)</p>",
        "id": 217146708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605712177
    },
    {
        "content": "<p>But also if you're rewriting in the forward direction then I don't see why you wouldn't be able to just rewrite <code>f</code> without turning it into a lambda first.</p>",
        "id": 217146739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605712189
    },
    {
        "content": "<p>well I'll try to come up with a MWE</p>",
        "id": 217146866,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1605712237
    },
    {
        "content": "<p>Maybe the issue is somewhere in the form of <code>hypotheses_f</code></p>",
        "id": 217146881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605712244
    },
    {
        "content": "<p>I think you are right : there are some coercions in the hypotheses that could perhaps make it guess the wrong function, and when I give the function explicitly to the lemma instead of it being inferred, there is no issue any more. <br>\nI don't really understand why the change  with the lambda worked, but I definitely need to fix that ambiguous lemma.</p>",
        "id": 217148349,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1605712849
    }
]