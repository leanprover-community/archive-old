[
    {
        "content": "<p>Hi, I just started trying out lean3, and I'm curious if there is an elegant way to deal with circular/redundant definitions. By that I mean triangles like bachelor/husband/man. You can define</p>\n<ul>\n<li>bachelor as a man who is not a husband, </li>\n<li>husband as a man who is not a bachelor, and</li>\n<li>man as husband or bachelor.<br>\nSo in cases like these, were you only need two to get the third, do I have to randomly or intuitively pick two, or is there an advanced way to handle this?</li>\n</ul>",
        "id": 269255978,
        "sender_full_name": "moenarch",
        "timestamp": 1643117264
    },
    {
        "content": "<p>This is really hard to tell without a more realistic example. In the exact example you described, you could define </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">man</span>\n<span class=\"bp\">|</span> <span class=\"n\">husband</span> <span class=\"o\">:</span> <span class=\"n\">man</span>\n<span class=\"bp\">|</span> <span class=\"n\">bachelor</span> <span class=\"o\">:</span> <span class=\"n\">man</span>\n</code></pre></div>",
        "id": 269256860,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643117705
    },
    {
        "content": "<p>If you don't understand the above code, which could very well be true if you are at a pretty early stage, then you should read more of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>.</p>",
        "id": 269256948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643117757
    },
    {
        "content": "<p>specifically Chapter 7</p>",
        "id": 269257018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643117777
    },
    {
        "content": "<p>In chapter 3 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> we are introduced to and, or, not and implies</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">constant</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">constant</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">constant</span> <span class=\"n\">implies</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"k\">#check</span> <span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span>                      <span class=\"c1\">-- Prop</span>\n<span class=\"k\">#check</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">r</span>               <span class=\"c1\">-- Prop</span>\n<span class=\"k\">#check</span> <span class=\"n\">implies</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span>  <span class=\"c1\">-- Prop</span>\n</code></pre></div>\n<p>afaik, it is possible to define the implication of a and b as the disjunction of not-a and b.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">and2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">constant</span> <span class=\"n\">or2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">constant</span> <span class=\"n\">not2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">implies2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">or2</span> <span class=\"o\">(</span><span class=\"n\">not2</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">implies2</span>\n</code></pre></div>\n<p>So my question is if </p>\n<ul>\n<li>there is some kind of special way to deal with this,</li>\n<li>I just have to pick one of them which I define in virtue of the others, or</li>\n<li>I just define all 4 and then some kind of transformations.</li>\n</ul>",
        "id": 269259309,
        "sender_full_name": "moenarch",
        "timestamp": 1643118858
    },
    {
        "content": "<p>This example is again very special because the foundation we use allow to be constructive and then you can't define implication like this. Anyway, there will always be cases where you need to pick a definition as being the official definition and then prove lemmas offering alternative equivalent formulations. In practice this isn't a problem.</p>",
        "id": 269261931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643120001
    },
    {
        "content": "<p>I think I found what I was looking for. It's <code>mutual</code>. Thank you for your help.</p>",
        "id": 269277227,
        "sender_full_name": "moenarch",
        "timestamp": 1643126156
    },
    {
        "content": "<p><code>mutual</code> is for when there's actually a loop that can't be broken - if you give an example of how you're using it, someone here can likely comment on whether there's a better way</p>",
        "id": 269283993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643128722
    }
]