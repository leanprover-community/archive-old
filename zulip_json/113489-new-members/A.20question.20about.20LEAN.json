[
    {
        "content": "<p>Hi! I'm new to LEAN and I have been looking into it (as well as other proof assistants) for a while now. The mathlib library is very impressive. I was wondering whether the eleven problems regarding LEAN addressed by Thomas Hales (<a href=\"https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/\">https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/</a>) have been either changed or resolved since the time of writing, particularly the problem regarding backward compatibility (of LEAN 4) and mathlib, and the \"excessive parameterization\" and taboo on \"diamonds\" that he addressed. Many thanks in advance!</p>",
        "id": 220991485,
        "sender_full_name": "Darren Zhu",
        "timestamp": 1609040757
    },
    {
        "content": "<ul>\n<li>Backward compatibility - if anything it's become even less backwards compatible since that was written, although there are also possibilities for tools to ease the translation. It's all still up in the air.</li>\n<li>Excessive parameterization - It depends on what you are doing. I think the presentation in the review is slightly overblown, but it's true that plenty of non-mathematical design decisions come in to the setup and use of the algebraic hierarchy.</li>\n<li>Diamonds - These are not banned in mathlib, but there is a requirement that any diamonds commute up to defeq. It does necessitate the so-called \"old structure command\" (which isn't actually deprecated despite the name) because the new structure command bans diamonds outright.</li>\n</ul>",
        "id": 220992079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609041979
    },
    {
        "content": "<p>Thank you for the informative response!</p>",
        "id": 220992662,
        "sender_full_name": "Darren Zhu",
        "timestamp": 1609043113
    },
    {
        "content": "<p>Darren, note that the backward compatibility thing is an issue only if you decide it is. We have good reasons to hope Lean 4 will be much better than Lean 3 in a way that would have been impossible if we were at a stage where backward compatibility is considered as important. And this point was extremely clear, nobody was taken by surprise.</p>",
        "id": 221002136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609062527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/A.20question.20about.20LEAN/near/220992079\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Diamonds - These are not banned in mathlib, but there is a requirement that any diamonds commute up to defeq</li>\n</ul>\n</blockquote>\n<p>There are instance diamonds in mathlib (eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_monoid.nat_semimodule\">docs#add_comm_monoid.nat_semimodule</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.semimodule\">docs#linear_map.semimodule</a>) which provably commute but not up to defeq.</p>",
        "id": 221003820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609066003
    },
    {
        "content": "<p>Patrick, thanks for the information! It's great that Lean 4's development will be even better than Lean 3. When will Lean 4 be released approximately? And, when it does come out, will Mathlib be moved there and how will compatibility be managed? Thanks.</p>",
        "id": 221009106,
        "sender_full_name": "Darren Zhu",
        "timestamp": 1609076207
    },
    {
        "content": "<p>My understanding is there's no timeline for lean 4 yet; mathlib will be moved there, but there's no clear plan of action yet. (Hopefully there will be a way to do it incrementally.)</p>",
        "id": 221009478,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1609077006
    },
    {
        "content": "<p>Come to Lean Together 2021 and find out -- there will be discussions on this. Or just wait until after and then ask again :-)</p>",
        "id": 221009481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609077031
    },
    {
        "content": "<p>Looks like this got posted to HN this morning: <a href=\"https://news.ycombinator.com/item?id=25550240\">https://news.ycombinator.com/item?id=25550240</a> in case anyone feels like mentioning any of the above in the comments there.</p>",
        "id": 221064533,
        "sender_full_name": "Julian Berman",
        "timestamp": 1609166054
    },
    {
        "content": "<p>Hello Lean Community, I am fairly new to functional programming and would like to eventually learn Lean 4 as a language and for theorem proving purposes. Any advice on getting started for a complete beginner would be much appreciated. I have a few questions: 1) Should I learn Haskell first?  2) Would Haskell make me understand the basics of functional programming before starting on Lean 4?</p>",
        "id": 253776634,
        "sender_full_name": "M.G.",
        "timestamp": 1631899358
    },
    {
        "content": "<p>What's your background?</p>",
        "id": 253776715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631899380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/A.20question.20about.20LEAN/near/253776715\">said</a>:</p>\n<blockquote>\n<p>What's your background?</p>\n</blockquote>\n<p>Computer Science, Statistical Learning Theory and Dynamic systems, Programming in C/C++ and Python.</p>",
        "id": 253777298,
        "sender_full_name": "M.G.",
        "timestamp": 1631899590
    },
    {
        "content": "<p>then sure learn some Haskell, learning Haskell will definitely help you to understand the basics of functional programming and Lean is a functional language. There are far more resources out there for learning Haskell, but you can always spend some time looking at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> as well.</p>",
        "id": 253777579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631899702
    }
]