[
    {
        "content": "<p>Hi all,</p>\n<p>This is one of the exercises from the \"topological spaces\" section of the LFTCM workshop, solution not provided, and I think I'm missing something about how to use typeclasses. In the exercises file, the t2 typeclass is defined the same way as in mathlib</p>\n<p><code>class t2_space (X : Type) [topological_space X] := ...</code><br>\n(why not <code>class t2_space (X: Type) extends topological_space X</code>?)</p>\n<p>but the discrete topology is defined as an explicit term of <code>toplogical_space X</code> rather than its own typeclass as in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">discrete</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"bp\">Î»</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"c1\">-- everything is open</span>\n  <span class=\"n\">univ_mem</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">union</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">B</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inter</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">A</span> <span class=\"n\">hA</span> <span class=\"n\">B</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>To show that the discrete topology is t2, I want to start with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">t2_discrete</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"bp\">@</span><span class=\"n\">t2_space</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"bp\">???</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n<p>and the next thing I have to prove is <code>is_open {x}</code>. I feel like Lean should already know this, since the underlying topological space is discrete, but I don't know how to say that - can anyone help?</p>",
        "id": 212935710,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602365935
    },
    {
        "content": "<p>Do you understand how to unfold a definition?</p>",
        "id": 212935788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366012
    },
    {
        "content": "<p>Try <code>unfold is_open</code> and you'll replace the <code>is_open</code> function by its definition</p>",
        "id": 212935791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366035
    },
    {
        "content": "<p>and it seems to me that <code>is_open {x}</code> is by definition equal to <code>true</code></p>",
        "id": 212935798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366058
    },
    {
        "content": "<p>don't unfold definitions!</p>",
        "id": 212935803,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602366069
    },
    {
        "content": "<p>and the tactic which proves <code>true</code> is <code>trivial</code></p>",
        "id": 212935807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366073
    },
    {
        "content": "<p>Note that this file is about rebuilding the theory from scratch, not about using mathlib.</p>",
        "id": 212935809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602366084
    },
    {
        "content": "<p>If you know all about topological spaces and are asking intelligent questions about how to do stuff like that in Lean Kenny, then you are me 3 years ago</p>",
        "id": 212935817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366111
    },
    {
        "content": "<p>Right, I'm really just justifying my question by saying I can't just look at how mathlib does it to find the answer</p>",
        "id": 212935823,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602366120
    },
    {
        "content": "<p>and when I started to understand that I could unfold everything, this whole Lean business started making a lot more sense to me</p>",
        "id": 212935862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366128
    },
    {
        "content": "<p>oh sorry I missed the part where you defined <code>discrete</code></p>",
        "id": 212935866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602366139
    },
    {
        "content": "<p>That doesn't seem to unfold... I have seen the unfold tactic in use but I don't think I really understand what Lean considers \"unfoldable\"</p>",
        "id": 212935885,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602366166
    },
    {
        "content": "<p>Does \"trivial\" work anyway?</p>",
        "id": 212935897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366176
    },
    {
        "content": "<p>I mean, I unfolded it in my head :-)</p>",
        "id": 212935900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366183
    },
    {
        "content": "<p>Ah, trivial does work! Thank you</p>",
        "id": 212935919,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602366226
    },
    {
        "content": "<p>This idea of what is true by definition and what is true because of a theorem is completely alien to mathematicians. For example, in the natural number game, n+0=n is true by definition, but 0+n=n is true because of a theorem (induction on n).</p>",
        "id": 212935977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366269
    },
    {
        "content": "<p>So it's a weird implemention-dependent notion, right? Mathematicians can't see any difference between 0+n=n and n+0=n</p>",
        "id": 212935991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366302
    },
    {
        "content": "<p>yes, and I think the Lean term \"definition\" should be translated as the mathematical term \"implementation\"</p>",
        "id": 212935995,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602366305
    },
    {
        "content": "<p>Right</p>",
        "id": 212935999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366312
    },
    {
        "content": "<p>because in maths <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> has 5 definitions</p>",
        "id": 212936006,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602366331
    },
    {
        "content": "<p>Where do you see that exercise?</p>",
        "id": 212936013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602366348
    },
    {
        "content": "<p>So you want to prove <code>is_open {x}</code> but you can trace the definition of <code>is_open</code> back and see that it's <code>lambda U, trivial</code> -- this could have been done in all manner of ways but it was done in this way</p>",
        "id": 212936019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366360
    },
    {
        "content": "<p>so you know that you're trying to prove <code>trivial</code></p>",
        "id": 212936062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602366368
    },
    {
        "content": "<p>I found it, it's a \"bonus exercise\".</p>",
        "id": 212936072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602366384
    },
    {
        "content": "<p>Yeah sorry, it's not explicitly sketched out but it's mentioned in a comment</p>",
        "id": 212936148,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602366494
    },
    {
        "content": "<p>This somehow explain why it's not really properly laid out. The surrounding setup makes it painful.</p>",
        "id": 212936163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602366551
    },
    {
        "content": "<p>Oh wow, the definition of T2 is not correct in this file!</p>",
        "id": 212936263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602366712
    },
    {
        "content": "<p>It doesn't have <code>x \\ne y</code>, right?</p>",
        "id": 212936308,
        "sender_full_name": "Saul Glasman",
        "timestamp": 1602366784
    },
    {
        "content": "<p>But again the main problem is the setup mixing classes and this definition of discrete as a <code>def</code>. The definition itself is fine as an example of a topological structure, but not for serious use later.</p>",
        "id": 212936401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602366936
    },
    {
        "content": "<p>So the right setup is to have, either as a def or a class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">discrete</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>Â <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>  <span class=\"bp\">â</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span>\n</code></pre></div>\n\n<p>and then use that as your assumption in <code>t2_discrete {X : Type} [topological_space X] (hX : â U : set X, is_open U) : t2_space X :=</code> (which can be an instance if you made <code>discrete</code> a class, or a lemma in any case)</p>",
        "id": 212936488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602367059
    },
    {
        "content": "<p>In the proof you'll probably want to use <code>singleton_inter_eq_empty</code>.</p>",
        "id": 212936535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602367103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Show.20that.20the.20discrete.20topology.20is.20t2/near/212936263\">said</a>:</p>\n<blockquote>\n<p>Oh wow, the definition of T2 is not correct in this file!</p>\n</blockquote>\n<p><span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span></p>",
        "id": 212936544,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602367129
    },
    {
        "content": "<p>Could you open an issue at the LFTCM repository? I need to go to bed now, but I'll fix that tomorrow if Alex doesn't beat me to it.</p>",
        "id": 212936546,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602367140
    },
    {
        "content": "<p>Fixed <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> sorry!</p>",
        "id": 212936712,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602367408
    },
    {
        "content": "<p>I think we also need a fix addressing the issue that the file doesn't really setups things in a way that makes this bonus exercise nice. The easy fix is to remove the exercise. Another fix is to define <code>discrete</code> as I explained above.</p>",
        "id": 212936844,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602367582
    }
]