[
    {
        "content": "<p>Continuing on my example of defining a sequence of strictly increasing elements based on some hypothesis over orders.</p>\n<p>I'm trying to see what are the minimal hypothesis on the order to define such a sequence. Mathematically, it seems like I only need to have the existence of min over the set S of X.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">st_increasing_seq</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hlattice</span><span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hinf</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">S</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">Inf</span> <span class=\"n\">M</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">st_increasing</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>The closest to I wanted was <code>complete_lattice</code> (but it also requires sups…), I wanted to use semilattice for infs only but it does not define a Inf over sets.</p>\n<p>Worse, the above code does not type-check because it complains about the fact that X is not a complete lattice, which I understand.<br>\nBut at the same time, I don't want all X to be a complete lattice, it could be a conditionally complete lattice in fact only.</p>\n<p>Also, it seems like what I really want is (S, ≤) is well-ordered, maybe it could solve everything.</p>\n<p>What's the best thing to do?</p>",
        "id": 191418070,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584913861
    },
    {
        "content": "<p>There are things like <code>semilattice_inf</code> if this helps.</p>",
        "id": 191418138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584913936
    },
    {
        "content": "<p>There are a gazillion kinds of lattice.</p>",
        "id": 191418140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584913946
    },
    {
        "content": "<p>It does not declare a <code>Inf: set a → a</code>, right? <a href=\"https://leanprover-community.github.io/mathlib_docs/order/lattice.html#lattice.to_semilattice_inf\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/order/lattice.html#lattice.to_semilattice_inf\">https://leanprover-community.github.io/mathlib_docs/order/lattice.html#lattice.to_semilattice_inf</a></p>",
        "id": 191418149,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584913968
    },
    {
        "content": "<p>There's a difference between <code>inf</code> (inf of two elements) and <code>Inf</code> (inf of arbitrary set of elements)</p>",
        "id": 191418166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584914023
    },
    {
        "content": "<p>Indeed, so that's why I resorted to complete_lattice / conditionally_complete_lattice which seems to be the only one to declare the <code>Inf</code> (and not <code>inf</code>).</p>",
        "id": 191418209,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584914053
    },
    {
        "content": "<p>I just made up semilattice_inf, hang on.</p>",
        "id": 191418211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584914057
    },
    {
        "content": "<p>Can you ask your question again? I don't really know what I'm looking for.</p>",
        "id": 191418246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584914158
    },
    {
        "content": "<p>There is a ton of stuff in <code>order.lattice</code></p>",
        "id": 191418284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584914170
    },
    {
        "content": "<p>I would like to be able to take the Inf of a set, without supposing that there is a complete_lattice over X (the type), but over the set S and be able to get the complete_lattice property for all subsets of S.</p>",
        "id": 191418315,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584914255
    },
    {
        "content": "<p>let's say X = R, S = [a, +infty[, if you prefer. S is a semilattice_inf and all its subsets too.<br>\nBut right now, I don't know how to translate those facts in Lean.</p>",
        "id": 191418377,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584914325
    },
    {
        "content": "<p>I don't see any Inf in <code>order.lattice</code>, it does not define operations over arbitrary sets. :/</p>",
        "id": 191418400,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584914390
    },
    {
        "content": "<p>I really don't know my way around the lattice stuff. Is it called <code>infi</code>?</p>",
        "id": 191419148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584915412
    },
    {
        "content": "<p>It certainly exists.</p>",
        "id": 191419151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584915417
    },
    {
        "content": "<p><code>infi</code> is in <code>order.complete_lattice</code></p>",
        "id": 191419234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584915510
    },
    {
        "content": "<p>as is <code>Inf</code></p>",
        "id": 191419236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584915516
    },
    {
        "content": "<p>I see, there is nothing about them</p>",
        "id": 191419275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584915592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Complete.20lattices.20and.20subsets/near/191419148\" title=\"#narrow/stream/113489-new-members/topic/Complete.20lattices.20and.20subsets/near/191419148\">said</a>:</p>\n<blockquote>\n<p>I really don't know my way around the lattice stuff. Is it called <code>infi</code>?</p>\n</blockquote>\n<p>As far as I understand it, <code>infi</code> is indexed inf, which is something I don't think I need</p>",
        "id": 191419316,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584915603
    },
    {
        "content": "<p>You can just make what you want, right?</p>",
        "id": 191419334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584915663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Complete.20lattices.20and.20subsets/near/191419275\" title=\"#narrow/stream/113489-new-members/topic/Complete.20lattices.20and.20subsets/near/191419275\">said</a>:</p>\n<blockquote>\n<p>I see, there is nothing about them</p>\n</blockquote>\n<p>I could PR something to add <code>Inf</code> for semilattice_inf, etc, if that's something mathlib would be interested in. But I'd need some guidance for math relevance.</p>",
        "id": 191419339,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584915673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Complete.20lattices.20and.20subsets/near/191419334\" title=\"#narrow/stream/113489-new-members/topic/Complete.20lattices.20and.20subsets/near/191419334\">said</a>:</p>\n<blockquote>\n<p>You can just make what you want, right?</p>\n</blockquote>\n<p>Indeed, just wanted to ensure that I was not reinventing the wheel.</p>",
        "id": 191419343,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584915691
    },
    {
        "content": "<p>Yeah you should talk to a more latticy person.</p>",
        "id": 191419481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584915889
    },
    {
        "content": "<p>Existence of <code>Inf</code>  implies existence of <code>Sup</code> and vice versa</p>",
        "id": 191428179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584931098
    },
    {
        "content": "<p>Actually, I think you want to not have any lattice like assumption, and just have a hypothesis that says every set in <code>M</code> has a minimal element, this exists as a predicate</p>",
        "id": 191428199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584931173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span></p>",
        "id": 191428248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584931211
    },
    {
        "content": "<p>BTW, probably we should add a constructor for <code>complete_lattice</code> that takes <code>Inf</code> and autogenerates <code>Sup</code>, and use it for <code>submonoid</code>s, <code>subgroup</code>s etc.</p>",
        "id": 191428308,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584931325
    },
    {
        "content": "<p>I thought that already existed</p>",
        "id": 191428786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584932166
    },
    {
        "content": "<p>Can't find it in <code>complete_lattice</code>.</p>",
        "id": 191428845,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584932303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Complete.20lattices.20and.20subsets/near/191428199\" title=\"#narrow/stream/113489-new-members/topic/Complete.20lattices.20and.20subsets/near/191428199\">said</a>:</p>\n<blockquote>\n<p>Actually, I think you want to not have any lattice like assumption, and just have a hypothesis that says every set in <code>M</code> has a minimal element, this exists as a predicate</p>\n</blockquote>\n<p>Looks the simplest way, but I'd need some way to get it for free for obvious fields which verifies complete_linear_order or even conditionnally_complete_linear_order X which are complete_linear_order over a bounded subset.</p>",
        "id": 191457032,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584960884
    },
    {
        "content": "<p>Make it a simp-lemma if the instance exists.</p>",
        "id": 191457089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584960929
    },
    {
        "content": "<p>Then it doesn't vanish completely</p>",
        "id": 191457100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584960937
    },
    {
        "content": "<p>Or alternatively provide a special case of the lemma if the instance is there</p>",
        "id": 191457182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584960971
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 191457259,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584961038
    }
]