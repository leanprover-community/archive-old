[
    {
        "content": "<p>I've had issues such as returning a <code>Prop</code> in a tuple only to find out it does not typecheck. Or not being able to pattern match on membership proofs that are <code>Prop</code>s in regular code. And there were recent issues with putting <code>Prop</code>s in inductive types only to have them not compile.</p>\n<p>What is the purpose for splitting the type hierarchy into two? I've never seen this explained up to now, and it feels like some kind of language design error more than anything else. I already know from Agda that things like equalities and inequalities can be regular types, so what is the deal with this?</p>",
        "id": 179518563,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572517900
    },
    {
        "content": "<p><code>Prop = Sort 0</code>, <code>Type u = Sort (u+1)</code></p>",
        "id": 179519124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572518389
    },
    {
        "content": "<p>You can use <code>Sort</code> when you want to be parametric over both, but inductive types with target <code>Sort u</code> behave oddly in a few ways because the recursor goes into <code>Prop</code> instead of <code>Sort</code></p>",
        "id": 179519222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572518462
    },
    {
        "content": "<p>You can use <code>pprod</code> if you want to put a Sort in a tuple, and <code>psigma</code> or <code>\\Sigma'</code> to have a dependent tuple</p>",
        "id": 179519322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572518538
    },
    {
        "content": "<blockquote>\n<p>Or not being able to pattern match on membership proofs that are Props in regular code.</p>\n</blockquote>\n<p>This one is a fundamental restriction. A <code>Prop</code> is erased at runtime so you can't make decisions based on one</p>",
        "id": 179519403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572518626
    },
    {
        "content": "<p>However, if one side is decidable you can make it work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">decide</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">psum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span> <span class=\"k\">else</span> <span class=\"n\">psum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 179519528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572518740
    },
    {
        "content": "<blockquote>\n<p>A Prop is erased at runtime so you can't make decisions based on one.</p>\n</blockquote>\n<p>Is there any benefit to this besides being a performance consideration?</p>",
        "id": 179519653,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572518865
    },
    {
        "content": "<p>It's pretty fundamental to the setup</p>",
        "id": 179519722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572518908
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 179519735,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572518928
    },
    {
        "content": "<p>The biggest theoretical upshot is proof irrelevance</p>",
        "id": 179519736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572518928
    },
    {
        "content": "<p>What is the purpose of proof irrelevance?</p>",
        "id": 179519761,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572518957
    },
    {
        "content": "<p>...It makes proofs equal to each other by definition?</p>",
        "id": 179519785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572518983
    },
    {
        "content": "<p>that's pretty convenient for a lot of reasons</p>",
        "id": 179519802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572519000
    },
    {
        "content": "<p>like subtypes act like <em>sub</em>types rather than types with extra data</p>",
        "id": 179519861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572519033
    },
    {
        "content": "<p>Also proofs tend to be pretty big, so being able to ignore them is a big deal</p>",
        "id": 179519915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572519086
    },
    {
        "content": "<p>It doesn't quite recover the separation of proof and data from ZFC / FOL foundations, but it goes a long way</p>",
        "id": 179520030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572519208
    },
    {
        "content": "<blockquote>\n<p>Also proofs tend to be pretty big, so being able to ignore them is a big deal</p>\n</blockquote>\n<p>In his latest talk, Edwin Brady talked about quantitative type theory which tracks the usage of variables during type checking. Could that be a substitute for using <code>Prop</code>s for efficiency reasons?</p>\n<blockquote>\n<p>..It makes proofs equal to each other by definition?</p>\n</blockquote>\n<p>I am not familiar with the details, but I know that extensional type theory has uniqueness of identity proofs which I think is supposed to make identity proofs equal to each other. Does that cover some of the functionality of proof irrelevance?</p>",
        "id": 179520238,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572519421
    },
    {
        "content": "<p>yes... there are other possible choices to be made in type theory, but these are the ones that lean has</p>",
        "id": 179522630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572521682
    },
    {
        "content": "<p>each one seems to be more complicated than the last, though, so I'm not particularly happy about the trend</p>",
        "id": 179522670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572521731
    },
    {
        "content": "<blockquote>\n<p>each one seems to be more complicated than the last, though, so I'm not particularly happy about the trend</p>\n</blockquote>\n<p>I see what you mean. Thinking back to my studies of Cubical Agda, at that time I felt happy that progress on the foundations is being made, but at the end I was left hoping that hundred years from now that work will be done because if not who knows where math will end up.</p>\n<p>Since simplicity is a value, let me ask you...how do you feel about Lean being implemented in C++ as opposed to some ML language?</p>",
        "id": 179527569,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572526139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244262\">@Marko Grdinić</span> It wouldn't have been my first choice language, but that's just personal preference. I am on pretty public record saying that neither C++ nor an ML like language come close to giving you the tools to have confidence in functional correctness.</p>",
        "id": 179552109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572541220
    },
    {
        "content": "<p>Thanks. I think I now understand the error messages a lot better. In hindsight, I think that a lot of my annoyance that I attributed to Lean over the past few weeks has been due to my own inexperience. Hopefully I will be better prepared for the future now that I am through with this.</p>\n<p><a href=\"https://agda.readthedocs.io/en/v2.6.0.1/language/irrelevance.html\" target=\"_blank\" title=\"https://agda.readthedocs.io/en/v2.6.0.1/language/irrelevance.html\">https://agda.readthedocs.io/en/v2.6.0.1/language/irrelevance.html</a></p>\n<p>When it comes to understanding the functionality of proof irrelevance, I've found Agda's docs helpful here.</p>",
        "id": 179571944,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572553019
    }
]