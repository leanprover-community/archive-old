[
    {
        "content": "<p>Hello, may I have some hints as to how to solve these simple questions? I've tried many powerful tactics but all seem to fail :(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 213133818,
        "sender_full_name": "Jia Ming",
        "timestamp": 1602583637
    },
    {
        "content": "<p>the first one decidable, so <code>dec_trivial</code></p>",
        "id": 213134147,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602583856
    },
    {
        "content": "<p>... and the second one can be reduced to the first one :P</p>",
        "id": 213134175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602583875
    },
    {
        "content": "<p>Ooo wow thank you!!!</p>",
        "id": 213134868,
        "sender_full_name": "Jia Ming",
        "timestamp": 1602584378
    },
    {
        "content": "<p>Umm huh, what exactly do u mean by reduced to the first one?</p>",
        "id": 213135145,
        "sender_full_name": "Jia Ming",
        "timestamp": 1602584601
    },
    {
        "content": "<p>well you can prove that <code>2 * i = 1</code> given the assumption</p>",
        "id": 213135522,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602584886
    },
    {
        "content": "<p>which will allow you to deduce <code>2 \\| 1</code></p>",
        "id": 213135536,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602584894
    },
    {
        "content": "<p>so it reduces to the first one</p>",
        "id": 213135544,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602584903
    },
    {
        "content": "<p>Ooh rightt</p>",
        "id": 213135614,
        "sender_full_name": "Jia Ming",
        "timestamp": 1602584963
    },
    {
        "content": "<p>Hm, this didn't go as smoothly as I would hope</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">rat.cast_inj</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">rat.denom</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213136078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602585311
    },
    {
        "content": "<p>Kenny's proof goes a little better</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">field_simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">this</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213136305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602585475
    },
    {
        "content": "<p>Awesome! Thanks</p>",
        "id": 213137048,
        "sender_full_name": "Jia Ming",
        "timestamp": 1602585987
    },
    {
        "content": "<p>slightly different approach, I showed if there was such an integer, it'd be between 0 and 1.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213143421,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1602590478
    }
]