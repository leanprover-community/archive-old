[
    {
        "content": "<p>I wanted to mess around with the prime numbers for a bit but quickly ran into this problem. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data.nat.prime</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">nat</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inv_prime</span> <span class=\"o\">:</span> <span class=\"n\">primes</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">primes.preorder</span><span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">primes</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.preorder</span> <span class=\"n\">_</span>\n<span class=\"kd\">instance</span> <span class=\"n\">primes.nonempty</span><span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">primes</span> <span class=\"o\">:=</span>  <span class=\"n\">nonempty_of_inhabited</span>\n<span class=\"kd\">instance</span> <span class=\"n\">primes.semilattice_sup</span><span class=\"o\">:</span> <span class=\"n\">semilattice_sup</span> <span class=\"n\">primes</span> <span class=\"o\">:=</span> <span class=\"n\">order_dual.semilattice_sup</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">//</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">inv_prime</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">metric.tendsto_at_top</span> <span class=\"n\">ℝ</span> <span class=\"n\">primes</span>\n     <span class=\"n\">real.pseudo_metric_space</span> <span class=\"n\">primes.nonempty</span> <span class=\"n\">primes.semilattice_sup</span> <span class=\"n\">inv_prime</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>As posted above I tried to supply all instances manually but it fails saying it can't find exactly what it's trying to find! <br>\nAlso, <code>preorder primes</code> was not automatic, is that intended (for the at_top part)? Thanks!</p>",
        "id": 234702714,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1618501958
    },
    {
        "content": "<p>Lean seems to think there's two preorders on the primes, as you can see by <code>set_option pp.all true</code> before the test. If you just comment out <code>instance primes.preorder</code> it works.</p>",
        "id": 234703338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618502175
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  for the tool to check, will use that. So it turns out <code>preorder primes</code> was automatic, how weird that I got an error about that before, sorry.</p>",
        "id": 234704199,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1618502487
    },
    {
        "content": "<p>I'm pretty sure that the <code>semilattice_sup</code> is giving you a preorder, and it might not be the preorder you want: what is this dual thing? You are ordering them twice in your code, with 2&lt;=3 the first time and 3&lt;=2 the second; this is why you were having problems.</p>",
        "id": 234704625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618502613
    },
    {
        "content": "<p>To be honest, I didn't look into it, I just looked at what the hypotheses were and then supplied them, just to check if I still got an error. I've now defined the correct <code>semilattice_sup</code> via <code>subtype.semilattice_sup</code> and I think I'll be good to go from here.<br>\nAnyways, isn't the idea here to not have to use <code>@</code> before <code>metric.tendsto_at_top</code> at all?</p>",
        "id": 234710725,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1618504727
    },
    {
        "content": "<p>I think using a linear order is a cleaner setup that gives what you want.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data.nat.prime</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">nat</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inv_prime</span> <span class=\"o\">:</span> <span class=\"n\">primes</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">primes.linear_order</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">primes</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.linear_order</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">inv_prime</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">metric.tendsto_at_top</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234721729,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1618508633
    },
    {
        "content": "<p>And yes, using that <code>@</code> is sometimes a bad sign, as it means you are doing steps that the person who wrote the lemma thought should be automatic, sometimes it is necessary though.</p>",
        "id": 234721877,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1618508681
    },
    {
        "content": "<p>One more thing: another approach is to make the definition of primes reducible locally, so that lean can see that it is just a subtype of nat, as most properties you need are just properties coming from the fact its a subtype of nat:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data.nat.prime</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">nat</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inv_prime</span> <span class=\"o\">:</span> <span class=\"n\">primes</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">p</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">primes</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">inv_prime</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">metric.tendsto_at_top</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234723274,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1618509243
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> , this is very useful and I'm sure will prevent a lot of future subtype headaches <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>. Just as a quick follow-up, how would one define 'the set of all primes less than p : primes' as a subset of primes? I can define it as <code>set ℕ</code> but doing an equivalent thing for <code>primes</code> gives a Type error.</p>\n<p>I think I worked it out myself</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">primes</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">primes_le</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">primes</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">primes</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">≤</span><span class=\"n\">p</span>\n</code></pre></div>",
        "id": 234724423,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1618509706
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 234729405,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1618511669
    },
    {
        "content": "<p>Better to write <code>{ q | q ≤ p }</code>. One should pretend as much as possible that you don't know that \"sets are just functions to Prop\".</p>",
        "id": 234775251,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618532270
    }
]