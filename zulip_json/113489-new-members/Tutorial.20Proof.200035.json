[
    {
        "content": "<p>Hi all, I was trying to follow the tutorial on github, this is ID 0035 in the 05_sequence_limit file, where I am asked to prove squeeze theorem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Let's do something similar: the squeezing theorem. -/</span>\n<span class=\"c1\">-- 0035</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">w</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">v</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">seq_limit</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">εg</span> <span class=\"n\">εgg0</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hu</span> <span class=\"o\">(</span><span class=\"n\">εg</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N1</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hw</span> <span class=\"o\">(</span><span class=\"n\">εg</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N2</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Nt</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">N1</span> <span class=\"n\">N2</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">Nt</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">tx</span> <span class=\"n\">txgNt</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ge_max_iff</span> <span class=\"n\">at</span> <span class=\"n\">txgNt</span><span class=\"o\">,</span> <span class=\"c1\">-- WRONG</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But <code>rw</code> failed at the penultimate line. It seems like Lean does not know <code>Nt</code> is <code>max N1 N2</code>.<br>\nWhat I would like is an abstraction feel, similar to use <code>def</code>, so that <code>Nt</code> can be expanded to <code>max N1 N2</code>. How shall I do that?</p>\n<p>Thanks!</p>",
        "id": 252616577,
        "sender_full_name": "leafGecko",
        "timestamp": 1631190569
    },
    {
        "content": "<p>Change <code>have</code> to <code>let</code> and you should be fine.</p>",
        "id": 252616637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631190600
    },
    {
        "content": "<p>Even better, you could use <code>set Nt := max N1 N2 with hNt</code> and then you can <code>rw hNt</code> if you want to change Nt to its definition.</p>",
        "id": 252616762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631190634
    },
    {
        "content": "<p>Or even use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">use</span> <span class=\"n\">max</span> <span class=\"n\">N1</span> <span class=\"n\">N2</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 252617775,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1631191096
    },
    {
        "content": "<p>Thanks! And by the way, if I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abs_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;=</span> <span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">|</span>\n</code></pre></div>\n<p>then why does <code>have H2 := abs_le.1 H</code> work but not <code>have H2 := abs_le.1 _ _ H</code>?<br>\nI thought <code>abs_le.1</code> lead to <code>(x y: R): |x| &lt;= y -&gt; -y &lt;= x /\\ x &lt;= y</code>...</p>",
        "id": 252618293,
        "sender_full_name": "leafGecko",
        "timestamp": 1631191342
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 252618338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631191366
    },
    {
        "content": "<p>(ps <code>have</code> is correct here -- you use <code>have</code> for proofs and <code>let</code> for data like real numbers, that's why your original code doesn't work)</p>",
        "id": 252618373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631191386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Tutorial.20Proof.200035/near/252618338\">said</a>:</p>\n<blockquote>\n<p>What's the error?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">abs_le.mp</span> <span class=\"bp\">?</span><span class=\"n\">m_7</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">-?</span><span class=\"n\">m_4</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">∧</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n</code></pre></div>",
        "id": 252618462,
        "sender_full_name": "leafGecko",
        "timestamp": 1631191439
    },
    {
        "content": "<p><del><code>abs_le.1</code> doesn't lead to what you say -- that would be <code>(abs_le _ _).1</code> (the <code>.1</code> only applies to the iff bit) </del> (Edit: this comment was made assuming the incorrect claim that x and y were explicit in <code>abs_le</code>)</p>",
        "id": 252618667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631191531
    },
    {
        "content": "<p>I am surprised that <code>have H2 := abs_le.1 H</code> works if <code>abs_le</code> is defined the way you say it is.</p>",
        "id": 252618790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631191574
    },
    {
        "content": "<p>That makes sense :D</p>",
        "id": 252618888,
        "sender_full_name": "leafGecko",
        "timestamp": 1631191627
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/hfnqsrW2RhNaBxGXr29P8AO5/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hfnqsrW2RhNaBxGXr29P8AO5/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hfnqsrW2RhNaBxGXr29P8AO5/image.png\"></a></div>",
        "id": 252618902,
        "sender_full_name": "leafGecko",
        "timestamp": 1631191632
    },
    {
        "content": "<p>It's mathlib <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_le\">docs#add_le</a>, which takes <code>{a b}</code></p>",
        "id": 252619168,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1631191750
    },
    {
        "content": "<p>So the reason it doesn't work with the <code>_</code>s is because Lean is not expecting the inputs to be explicit.</p>",
        "id": 252619707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631191978
    },
    {
        "content": "<p>Super-quick Patrick has updated the tutorial project so that now the variables are implicit in the comment.</p>",
        "id": 252623675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631193530
    }
]