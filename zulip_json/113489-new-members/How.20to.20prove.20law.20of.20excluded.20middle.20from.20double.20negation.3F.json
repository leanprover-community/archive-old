[
    {
        "content": "<p>The tutorial here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#classical-logic\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#classical-logic\">https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#classical-logic</a> gives the challenge \"As an exercise, you might try proving the converse, that is, showing that em (excluded middle) can be proved from dne (double negation).\"</p>\n<p>I'm able to make the skeleton:</p>\n<div class=\"codehilite\"><pre><span></span>variable (p: Prop)\naxiom dne: ¬¬p → p\n\ntheorem em: p ∨ ¬p := sorry\n</pre></div>\n\n\n<p>However I really have no clue on how to prove it. I found a proof here: <a href=\"https://proofwiki.org/wiki/Double_Negation_Elimination_implies_Law_of_Excluded_Middle\" target=\"_blank\" title=\"https://proofwiki.org/wiki/Double_Negation_Elimination_implies_Law_of_Excluded_Middle\">https://proofwiki.org/wiki/Double_Negation_Elimination_implies_Law_of_Excluded_Middle</a></p>\n<p>But isn't line 2 and 5 basically invoking the technique of excluded middle?</p>\n<p>If anyone would give hint on how to prove it in Lean, I would be helpful. Thanks</p>",
        "id": 179237835,
        "sender_full_name": "agro1986",
        "timestamp": 1572274279
    },
    {
        "content": "<blockquote>\n<p>But isn't line 2 and 5 basically invoking the technique of excluded middle?</p>\n</blockquote>\n<p>No, because \"if <code>p</code>, then false\" is the definition of <code>¬p</code>.</p>",
        "id": 179237974,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572274359
    },
    {
        "content": "<p>in Lean at least</p>",
        "id": 179238052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572274432
    },
    {
        "content": "<p>This is a pretty popular question here, if you want some spoilers, search zulip for \"dne em\".</p>",
        "id": 179238282,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572274565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> On that link, line 2 is \"assume p\". After the writer established that it leads to contradiction, on line 5 the writer said \"so assume not p\". That means the writer used \"p or not p\" to prove \"p or not p\"?</p>",
        "id": 179239423,
        "sender_full_name": "agro1986",
        "timestamp": 1572275306
    },
    {
        "content": "<p>Line 5 is stating that we have \"not p\", because we proved (lines 2-4) that \"p\" implies false.</p>",
        "id": 179239665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572275415
    },
    {
        "content": "<p>(This style of proof is hard to follow, in my opinion, if you don't already know what is supposed to be happening.)</p>",
        "id": 179239954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572275597
    },
    {
        "content": "<p>It's easier with the nesting structure displayed</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"err\">⊥</span>\n<span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"err\">⊥</span>\n<span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>\n</pre></div>",
        "id": 179240230,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572275733
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span>   <span class=\"o\">[</span><span class=\"n\">assumtion</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">p</span>             <span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>       <span class=\"o\">[</span><span class=\"bp\">∨</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">L</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"err\">⊥</span>             <span class=\"o\">[</span><span class=\"bp\">¬</span><span class=\"n\">E</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>           <span class=\"o\">[</span><span class=\"bp\">¬</span><span class=\"n\">I</span> <span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>       <span class=\"o\">[</span><span class=\"bp\">∨</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">R</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"err\">⊥</span>             <span class=\"o\">[</span><span class=\"bp\">¬</span><span class=\"n\">E</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span><span class=\"o\">]</span>\n<span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">¬</span><span class=\"n\">I</span> <span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">7</span><span class=\"o\">]</span>\n<span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span>       <span class=\"o\">[</span><span class=\"bp\">¬¬</span><span class=\"n\">E</span> <span class=\"mi\">8</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 179240590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572275931
    },
    {
        "content": "<p><code>I</code> is introduction and <code>E</code> is elimination and <code>L</code> is left and <code>R</code> is right and the numbers are line numbers</p>",
        "id": 179240619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572275950
    },
    {
        "content": "<p><code>¬I</code> basically says:</p>\n<div class=\"codehilite\"><pre><span></span> φ⊢⊥\n-----\n  ¬φ\n</pre></div>",
        "id": 179240742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572276006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> after playing around and mulling it over I finally understand it!!! Thanks a lot for the kind explanation!</p>",
        "id": 179624169,
        "sender_full_name": "agro1986",
        "timestamp": 1572613755
    }
]