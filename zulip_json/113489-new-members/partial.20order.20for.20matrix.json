[
    {
        "content": "<p>Dear all, as you know I just get up-to-speed on lean (and theorem proving) and don't do it fulltime for now. However, I picked as first toy-project to get started the extension of matrix as an instance of partial_order. (See <a href=\"https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean\" target=\"_blank\" title=\"https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean\">https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean</a>)</p>",
        "id": 134185883,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537297368
    },
    {
        "content": "<p>Hi Tobias, you may want to post this in the #maths channel so people who are interested in this sort of stuff see it!</p>",
        "id": 134185923,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537297409
    },
    {
        "content": "<p>or you may post in #general if this is a concrete matrix implementation meant for use in computation</p>",
        "id": 134186016,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537297482
    },
    {
        "content": "<p>Honestly, I don't even know how to post to the #maths channel. I see a \"general\" and a \"new members\" stream, but no \"#maths\" channel. I know streams and topics from <a href=\"https://zulipchat.com/help/about-streams-and-topics\" target=\"_blank\" title=\"https://zulipchat.com/help/about-streams-and-topics\">https://zulipchat.com/help/about-streams-and-topics</a>, but have no ideas of channels. I can obviously move this topic to the general stream if this helps. Would also post it to a math channel, if you can explain what a math channel is? Are you refering to \"stream:general topic:#maths\"?</p>",
        "id": 134186420,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537297878
    },
    {
        "content": "<p>I posted it in new members, as my questions are for now still very simple.</p>",
        "id": 134186434,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537297897
    },
    {
        "content": "<p>\"Channel\" means stream in this context I think.</p>",
        "id": 134186514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537297962
    },
    {
        "content": "<p>whew, yes, I forgot Zulip isn't IRC</p>",
        "id": 134186540,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537297985
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a></p>",
        "id": 134186549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537297996
    },
    {
        "content": "<p>OK, got it. Had to subscribe to #maths explicitly</p>",
        "id": 134186552,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298006
    },
    {
        "content": "<p>My questions still remain simple. I mostly would like to know how to destruct an equality: <a href=\"https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean#L51\" target=\"_blank\" title=\"https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean#L51\">https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean#L51</a></p>",
        "id": 134186634,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298088
    },
    {
        "content": "<p>I spend some time looking and will probably figure it out eventually, but maybe somebody has a pointer.</p>",
        "id": 134186752,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298215
    },
    {
        "content": "<p>Don't you need to construct an equality?</p>",
        "id": 134186772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537298247
    },
    {
        "content": "<p>I guess you mean: \"destruct\" the goal</p>",
        "id": 134186781,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537298253
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 134186787,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298259
    },
    {
        "content": "<p>I had the same problem with the &lt;=, but there I could just \"assume i\" and lean would auto-destruct it.</p>",
        "id": 134186843,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298286
    },
    {
        "content": "<p>I'm assuming your matrices are functions (of two variables), so the low-level way is to apply <code>funext</code> (twice)</p>",
        "id": 134186872,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537298338
    },
    {
        "content": "<p>you will probably want <code>ext_iff </code> in <code>ring_theory.matrix</code></p>",
        "id": 134186888,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537298375
    },
    {
        "content": "<p>this will allow you to turn <code>M = N</code> into <code> (∀ i j, M i j = N i j)</code></p>",
        "id": 134186956,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537298406
    },
    {
        "content": "<p>Right. ext_iff looks good. Now I need to figure out how to apply it.</p>",
        "id": 134187198,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298696
    },
    {
        "content": "<p>Reid's proposal also worked.</p>",
        "id": 134187201,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298702
    },
    {
        "content": "<p>But from there I would not know how to proceed.</p>",
        "id": 134187220,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298718
    },
    {
        "content": "<p>Either <code>ext</code> or <code>rw ext_iff</code> probably works</p>",
        "id": 134187234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537298730
    },
    {
        "content": "<p>indeed, <code>ext_iff</code> is defined using multiple <code>funext</code> applications</p>",
        "id": 134187236,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1537298732
    },
    {
        "content": "<p>Perfect. All works.</p>",
        "id": 134187309,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298782
    },
    {
        "content": "<p>So easy. I tried rw, but had missed a comma before. Thought I needed more magic.</p>",
        "id": 134187314,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298794
    },
    {
        "content": "<p>Thanks guys. This got me over a slow phase. Will finish my proofs and get back. Very nice community here.</p>",
        "id": 134187329,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537298818
    },
    {
        "content": "<p>Just to report back, my proof went through and I know have the partial_order I wanted to define on matrix.</p>",
        "id": 134187979,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537299549
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">le_antisymm</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"c1\">-- or   funext i,funext j,</span>\n<span class=\"c1\">-- or  ext i j,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134187985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537299560
    },
    {
        "content": "<p>Ah, even better.</p>",
        "id": 134187996,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537299578
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 134188004,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537299594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I used this for a proof on polyhedra. Would it make sense to add such defintions to your recent mathlib changes?</p>",
        "id": 134188071,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537299652
    },
    {
        "content": "<p>golfed:</p>\n<div class=\"codehilite\"><pre><span></span>protected lemma matrix.le_antisymm [partial_order α] (a b: matrix n m α)\n  (h1 : a ≤ b) (h2 : b ≤ a) : a = b :=\nby ext i j; exact le_antisymm (h1 i j) (h2 i j)\n</pre></div>",
        "id": 134188081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537299666
    },
    {
        "content": "<p>(also I don't have your definitions, so I had to guess if that's right)</p>",
        "id": 134188096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537299694
    },
    {
        "content": "<p>It would not surprise me if the Pi_instance tactic did this automatically, but it might not do.</p>",
        "id": 134188203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537299824
    },
    {
        "content": "<p>golfeded:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"kn\">lemma</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">le_antisymm</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134188206,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537299828
    },
    {
        "content": "<p>Nice, this lean golf.</p>",
        "id": 134188431,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537300032
    },
    {
        "content": "<p>The two solutions from Mario and Kenny don't work in my editor.</p>",
        "id": 134188437,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537300044
    },
    {
        "content": "<p>Need to replace \"by\" with \"begin .. end\"</p>",
        "id": 134188444,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537300057
    },
    {
        "content": "<p>Not yet sure why, but this proofs starts to look really nice. And you are all fast in golfing. ;-)</p>",
        "id": 134188491,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537300084
    },
    {
        "content": "<p>Got it, need a semicolon for 'by'.</p>",
        "id": 134188689,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537300308
    },
    {
        "content": "<p>yes, <code>by</code> takes only one tactic, so you can either do <code>{tactic 1, tactic 2}</code> or <code>tactic 1;tactic 2</code></p>",
        "id": 134188751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537300345
    },
    {
        "content": "<p>Did you notice that they both moved the hypotheses to the left of the colon? That's standard Lean style, so it seems; put as many hypotheses as possible on the left of the colon unless you can't do this for some reason (e.g. you're using the equation compiler).</p>",
        "id": 134188801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537300422
    },
    {
        "content": "<p>It makes your tactic proof two lines shorter at no extra cost</p>",
        "id": 134188858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537300446
    },
    {
        "content": "<p>I noticed and changed my code, but lacked the explanation. Thanks for providing it.</p>",
        "id": 134188885,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537300500
    },
    {
        "content": "<p>basically, if the very first thing in your proof is a lambda/<code>intro</code>, you should probably shift your colon</p>",
        "id": 134188910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537300523
    },
    {
        "content": "<p>my partner does that for a living</p>",
        "id": 134188921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537300541
    },
    {
        "content": "<p>she's a colorectal surgeon</p>",
        "id": 134188934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537300559
    },
    {
        "content": "<p>I need an emoji for this</p>",
        "id": 134188980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537300572
    },
    {
        "content": "<p>Meanwhile, things look a lot better: <a href=\"https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean\" target=\"_blank\" title=\"https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean\">https://github.com/tobig/lean-polyhedra/blob/master/src/polyhedra.lean</a></p>",
        "id": 134189102,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537300697
    },
    {
        "content": "<p>In case you have more suggestions:</p>\n<div class=\"codehilite\"><pre><span></span>protected def matrix.le_trans [partial_order α] (a b c: matrix n m α)\n  (h1 : a ≤ b) (h2 : b ≤ c) : a ≤ c :=\nbegin\n  assume i: n,\n  assume j: m,\n  have h1l: a i j ≤ b i j, from h1 i j,\n  have h2l: b i j ≤ c i j, from h2 i j,\n  transitivity,\n  apply h1l,\n  apply h2l,\nend\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>protected def matrix.le_refl [partial_order α] (A: matrix n m α) :\nA ≤ A :=\nbegin\n  assume i: n,\n  assume j: m,\n  refl\nend\n</pre></div>\n\n\n<p>are also open for golfing. ;-)</p>",
        "id": 134189125,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537300739
    },
    {
        "content": "<p>I will golf myself a little browsing mathlib code.</p>",
        "id": 134189147,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537300778
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">le_trans</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 134189154,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537300798
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">le_trans</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">transitivity</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span>\n</pre></div>",
        "id": 134189245,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537300853
    },
    {
        "content": "<p>hmm the last one may not work</p>",
        "id": 134189264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537300872
    },
    {
        "content": "<p>They all work.</p>",
        "id": 134189409,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537301027
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 134189412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537301034
    },
    {
        "content": "<p>I learned a lot. So much fun.</p>",
        "id": 134189417,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537301038
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 134189468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537301089
    },
    {
        "content": "<p>bad style (should be a space after the lambda)</p>",
        "id": 134189479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537301102
    },
    {
        "content": "<p>but I'm just trying to beat Kenny</p>",
        "id": 134189493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537301117
    },
    {
        "content": "<p>Now I am unsure which ones to commit.</p>",
        "id": 134189508,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537301142
    },
    {
        "content": "<p><code>set_option profiler true</code> and see which one is quickest :-)</p>",
        "id": 134189560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537301165
    },
    {
        "content": "<p>I feel the last ones are a little too tight. What's the stylistic preferred solution?</p>",
        "id": 134189566,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537301167
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>would probably be fine for mathlib I suspect</p>",
        "id": 134189584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537301188
    },
    {
        "content": "<p>Shouldn't all of this be <code>by pi_instance</code>?</p>",
        "id": 134189797,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537301388
    },
    {
        "content": "<p>right</p>",
        "id": 134189804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537301397
    },
    {
        "content": "<p>but I don't know if they did partial orders and I didn't look.</p>",
        "id": 134189858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537301409
    },
    {
        "content": "<p>I believe they did</p>",
        "id": 134189876,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537301428
    },
    {
        "content": "<p>though I too did not look</p>",
        "id": 134189882,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537301435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122318\">@Tobias Grosser</span> The original matrix add_comm_group code was written by Ellen Arlt and I was rewriting it in a live Lean coding session with an audience of undergrads, and Chris pointed out that pi_instances just did everything immediately.</p>",
        "id": 134189931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537301484
    },
    {
        "content": "<p>Interesting. I don't know how to use pi_instance(s)</p>",
        "id": 134190187,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537301755
    },
    {
        "content": "<p>If I just write pi_instance, I get \"too many constructors\" for the first two lemmas, and \"failed\" for the last.</p>",
        "id": 134190270,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537301834
    },
    {
        "content": "<p>I made some good progress, but got stuck in type class resolution. I try to do dependent pattern matching in the following code:</p>\n<div class=\"codehilite\"><pre><span></span>#check matrix\nuniverse v\ndef Gaussian_elimination {α : Type v} [ordered_ring α] :\n   Π {x y : Type u}  [fintype x] [fintype y], matrix x y α →  α\n| _ _ _ := 1\n</pre></div>\n\n\n<p>Unfortunately, I get the following error at location 'matrix':</p>\n<div class=\"codehilite\"><pre><span></span>polyhedra.lean:104:46: error\n\nfailed to synthesize type class instance for\nα : Type v,\n_inst_4 : ordered_ring α,\nx y : Type u,\n_inst_5 : fintype x,\n_inst_6 : fintype y\n⊢ fintype x\npolyhedra.lean:104:46: error\n</pre></div>",
        "id": 134212318,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537335684
    },
    {
        "content": "<p>I modeled this according to <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#dependent-pattern-matching\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#dependent-pattern-matching\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#dependent-pattern-matching</a>, and therae the example on vector works without problems. In case anybody has some flyby ideas.</p>",
        "id": 134212376,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537335802
    },
    {
        "content": "<p><code>by exactI 1</code></p>",
        "id": 134213060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537337011
    },
    {
        "content": "<p>Is this in reply to the type class issue?</p>",
        "id": 134213712,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338233
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"n\">matrix</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>  <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>does not work for me.</p>",
        "id": 134213766,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338257
    },
    {
        "content": "<p>I still get an error at 'matrix x y \\a'</p>",
        "id": 134213773,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338279
    },
    {
        "content": "<p>I also don't see why I would add a tactics proof at a definition of a value. This seems to not make a lot of sense to me.</p>",
        "id": 134213854,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338441
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"n\">matrix</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>  <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 134213905,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537338520
    },
    {
        "content": "<p>Thanks, now I know how to use syntax highlighting.</p>",
        "id": 134213986,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338691
    },
    {
        "content": "<p>But your code does not work either.</p>",
        "id": 134213988,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338700
    },
    {
        "content": "<p>I still get:</p>\n<div class=\"codehilite\"><pre><span></span>polyhedra.lean:108:46: error\n\nfailed to synthesize type class instance for\nα : Type v,\n_inst_4 : ordered_ring α,\nx y : Type u,\n_inst_5 : fintype x,\n_inst_6 : fintype y\n⊢ fintype x\n</pre></div>",
        "id": 134213990,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338718
    },
    {
        "content": "<p>is that the whole error?</p>",
        "id": 134214030,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537338734
    },
    {
        "content": "<p>oh, the error is in the type</p>",
        "id": 134214037,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537338748
    },
    {
        "content": "<p>I get it 4 times in a row at the same location.</p>",
        "id": 134214038,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338752
    },
    {
        "content": "<p>Yes, something is broken. I just don't know how to interpret the error message.</p>",
        "id": 134214041,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338772
    },
    {
        "content": "<p>It seems to derive fintype x, but I feel I provided all information.</p>",
        "id": 134214046,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338788
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"bp\">@</span><span class=\"n\">matrix</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">α</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span>  <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 134214050,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537338819
    },
    {
        "content": "<p>something like that</p>",
        "id": 134214051,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537338822
    },
    {
        "content": "<p>the order of the arguments may be wrong</p>",
        "id": 134214055,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537338831
    },
    {
        "content": "<p>I don't see why you would need pattern matching</p>",
        "id": 134214096,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537338879
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>  <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 134214107,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537338916
    },
    {
        "content": "<p>The one without pattern matching works (I managed to write sth similar myself).</p>",
        "id": 134214156,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537338996
    },
    {
        "content": "<p>The @matrix one breaks with:</p>",
        "id": 134214161,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339010
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>polyhedra.lean:192:57: error\n\ntype mismatch at application\n  matrix x y\nterm\n  α\nhas type\n  Type v : Type (v+1)\nbut is expected to have type\n  fintype x : Type u\n</pre></div>",
        "id": 134214168,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339025
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"bp\">@</span><span class=\"n\">matrix</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 134214176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537339061
    },
    {
        "content": "<p>I want to implement something similar to</p>\n<div class=\"codehilite\"><pre><span></span>Fixpoint Gaussian_elimination {m n} : &#39;M_(m, n) → &#39;M_m × &#39;M_n × nat :=\n  match m, n with\n  | _.+1, _.+1 ⇒ fun A : &#39;M_(1 + _, 1 + _) ⇒\n    if [pick ij | A ij.1 ij.2 != 0] is Some (i, j) then\n      let a := A i j in let A1 := xrow i 0 (xcol j 0 A) in\n      let u := ursubmx A1 in let v := a^-1 *: dlsubmx A1 in\n      let: (L, U, r) := Gaussian_elimination (drsubmx A1 - v ×m u) in\n      (xrow i 0 (block_mx 1 0 v L), xcol j 0 (block_mx a%:M u 0 U), r.+1)\n    else (1%:M, 1%:M, 0%N)\n  | _, _ ⇒ fun _ ⇒ (1%:M, 1%:M, 0%N)\n  end.\n</pre></div>",
        "id": 134214177,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339061
    },
    {
        "content": "<p>As implemented in mathcomp.</p>",
        "id": 134214224,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339087
    },
    {
        "content": "<p>Need it to compute the matrix rank.</p>",
        "id": 134214229,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339120
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>polyhedra.lean:196:57: error\n\nfunction expected at\n  matrix x y α\nterm has type\n  Type (max u v)\n</pre></div>\n\n\n<p>for the last one.</p>",
        "id": 134214302,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339236
    },
    {
        "content": "<p>Matrix is defined as <code>matrix : Π (m n : Type u_1) [_inst_1 : fintype m] [_inst_2 : fintype n], Type u_2 → Type (max u_1 u_2)</code></p>",
        "id": 134214312,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339272
    },
    {
        "content": "<p>This one works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination5</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"bp\">@</span><span class=\"n\">matrix</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 134214362,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339345
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 134214378,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339399
    },
    {
        "content": "<p>Need to read up what all this stuff does.</p>",
        "id": 134214379,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339405
    },
    {
        "content": "<p>I am especially surprised that I need to pass the hx, hy as parameters.</p>",
        "id": 134214390,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537339433
    },
    {
        "content": "<p>I never answered your question about how to use <code>pi_instances</code>. It was used at some point in the code defining matrices, but this was in a branch of mathlib-community in code that got rewritten and then I think the branch was deleted? I couldn't find it anyway. In short, it's a tactic whereby if <code>f x</code> has a certain structure (e.g. that of an additive group) then<code>Pi x, f x</code> gets it too. For matrices over a ring it would immediately give them the structure of an additive commutative group by just guessing addition and zero and then figuring out the proofs itself. Of course it can't guess multiplication (if you asked it to, I guess it would guess pointwise multiplication of matrices).</p>",
        "id": 134214768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537340066
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 134214936,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340330
    },
    {
        "content": "<p>Ok, the last one for this morning:</p>\n<div class=\"codehilite\"><pre><span></span>def Gaussian_elimination5 {α : Type v} [ordered_ring α] {x y} [has_one x] [has_one y]:\n   Π {x y}  [hx : fintype x] [hy : fintype y], @matrix x y hx hy α  → α\n| (x+1) _ _ _ _ := by exactI 1\n</pre></div>",
        "id": 134215050,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340505
    },
    {
        "content": "<p>Gives me \"equation compiler failed (use 'set_option trace.eqn_compiler.elim_match true' for additional details)\".<br>\nSetting this option does not give me more details.</p>",
        "id": 134215121,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340566
    },
    {
        "content": "<p>1. you have two <code>x</code> and two <code>y</code>, which would cause much confusion, although it is not the source of the error</p>",
        "id": 134215131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537340588
    },
    {
        "content": "<p>I wanted x to be both a fintype and a type with has_one.</p>",
        "id": 134215133,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340590
    },
    {
        "content": "<p>the source of the error is that the type of <code>(x+1)</code>, whatever it is, is not an inductive type with <code>_+1</code> as one of the constructors</p>",
        "id": 134215140,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537340619
    },
    {
        "content": "<p>Right. It's a fintype.</p>",
        "id": 134215193,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340670
    },
    {
        "content": "<p>I also want to make it to satisfy has_one.</p>",
        "id": 134215195,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340677
    },
    {
        "content": "<p>That's why I added additional constraints.</p>",
        "id": 134215198,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340684
    },
    {
        "content": "<p>you have two <code>x</code> and two <code>y</code>. Lean treats those as separate objects.</p>",
        "id": 134215204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537340704
    },
    {
        "content": "<p>Right, I lack the notation how to add more constraints on x.</p>",
        "id": 134215212,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340726
    },
    {
        "content": "<p>I tried this one before:</p>\n<div class=\"codehilite\"><pre><span></span>def Gaussian_elimination5 {α : Type v} [ordered_ring α]  :\n   Π {x y} [has_one x] [has_one y]  [hx : fintype x] [hy : fintype y], @matrix x y hx hy α  → α\n| (x+1) _ _ _ _ := by exactI 1\n</pre></div>",
        "id": 134215215,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340753
    },
    {
        "content": "<p><code>x</code> is not a number, it's a type</p>",
        "id": 134215256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537340768
    },
    {
        "content": "<p>I don't know what <code>x+1</code> is supposed to mean</p>",
        "id": 134215257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537340779
    },
    {
        "content": "<p>This differs from the Coq development because matrices are not defined with indices in 1..n, they are drawn from an arbitrary finite type</p>",
        "id": 134215259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537340819
    },
    {
        "content": "<p>Right.</p>",
        "id": 134215271,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340853
    },
    {
        "content": "<p>I assumed I can fix this by defining my algorithm to only work if x and y are both finite _and_ satisfy has_one.</p>",
        "id": 134215277,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340882
    },
    {
        "content": "<p>You could define your function on <code>matrix (fin m) (fin n) α</code> if you want to do induction on m and n</p>",
        "id": 134215317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537340894
    },
    {
        "content": "<p>there is no problem with assuming your type has a one, but that doesn't license you to write <code>x+1</code></p>",
        "id": 134215322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537340931
    },
    {
        "content": "<p>That's what I tried ( I forgot that fin m exists, Johannes mentioned it at some point)</p>",
        "id": 134215328,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340945
    },
    {
        "content": "<p>if <code>x</code> is a type containing a <code>1</code>, then <code>1 : x</code> is okay</p>",
        "id": 134215331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537340950
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination5</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"bp\">@</span><span class=\"n\">matrix</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">_+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 134215334,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537340960
    },
    {
        "content": "<p>Now I am here. This works so far, but gives the error:</p>\n<div class=\"codehilite\"><pre><span></span>polyhedra.lean:201:46: error\n\nmaximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\n</pre></div>",
        "id": 134215411,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537341007
    },
    {
        "content": "<p><code>fin</code> is not a typeclass, it is an actual type</p>\n<div class=\"codehilite\"><pre><span></span>def Gaussian_elimination5 {α : Type v} [ordered_ring α]  :\n   Π (m n : ℕ), matrix (fin m) (fin n) α  → α\n| (m+1) (n+1) := 1\n</pre></div>",
        "id": 134215418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537341020
    },
    {
        "content": "<p>Amazing: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination6</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134215562,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537341236
    },
    {
        "content": "<p>That type checks and does what I want. Thanks guys for getting me started.</p>",
        "id": 134215623,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537341281
    },
    {
        "content": "<p><code>has_one</code> only means there's some term in your type called <code>1</code>. You need <code>has_add</code> too to make sense of <code>x + 1</code>.</p>",
        "id": 134216363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537342284
    },
    {
        "content": "<p>Right, so you want <code>has_one Type</code> and <code>has_add Type</code> (-;</p>",
        "id": 134216462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537342399
    },
    {
        "content": "<p>That's what I understand.</p>",
        "id": 134217164,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343594
    },
    {
        "content": "<p>Now I don't understand how torequest such a type in a pattern match.</p>",
        "id": 134217168,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343611
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination5</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"bp\">@</span><span class=\"n\">matrix</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 134217171,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343618
    },
    {
        "content": "<p>This is what I came up with.</p>",
        "id": 134217173,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343623
    },
    {
        "content": "<p>you can't pattern match on types</p>",
        "id": 134217219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537343648
    },
    {
        "content": "<p>As a general rule you shouldn't need to name variables which are showing up in <code>[boxes like this]</code></p>",
        "id": 134217222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343657
    },
    {
        "content": "<p>The system is supposed to do that for you</p>",
        "id": 134217225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343664
    },
    {
        "content": "<p>I don't want to match  on types.</p>",
        "id": 134217232,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343676
    },
    {
        "content": "<p>It seems I need to match on all the boxes for this to type check.</p>",
        "id": 134217236,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343697
    },
    {
        "content": "<p>What I would like is something like</p>",
        "id": 134217239,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343703
    },
    {
        "content": "<p>You could move stuff to the left of the colon</p>",
        "id": 134217247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343711
    },
    {
        "content": "<p>this line is almost certainly not what you want</p>",
        "id": 134217251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537343721
    },
    {
        "content": "<p>the equation compiler only matches on stuff to the right of the colon</p>",
        "id": 134217254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343724
    },
    {
        "content": "<p>and similarly in general you should be able to avoid using <code>@</code></p>",
        "id": 134217307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343764
    },
    {
        "content": "<p>because Lean is supposed to guess correctly</p>",
        "id": 134217314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343778
    },
    {
        "content": "<p>Also, in case it wasn't clear Johan's suggestion above was not serious</p>",
        "id": 134217326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537343822
    },
    {
        "content": "<p>you don't actually want <code>has_add Type</code></p>",
        "id": 134217332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537343837
    },
    {
        "content": "<p>Perhaps you could explain what you are trying to do informally?</p>",
        "id": 134217339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537343877
    },
    {
        "content": "<p>You're more likely to want <code>has_add X</code> with <code>X : Type</code></p>",
        "id": 134217376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343884
    },
    {
        "content": "<p>I'm not sure you want that either though, in this case</p>",
        "id": 134217383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537343899
    },
    {
        "content": "<p>On the other hand, I am pretty sure we want Gaussian Elimination</p>",
        "id": 134217388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343921
    },
    {
        "content": "<p>I want a function that takes a (matrix n m \\a) and returns an alpha (for now)</p>",
        "id": 134217402,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343947
    },
    {
        "content": "<p>It's kind of a disgrace that we only just got matrices and that we still don't have differentiation of functions from R to R</p>",
        "id": 134217403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343955
    },
    {
        "content": "<p>I also want to do induction over n and m</p>",
        "id": 134217404,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343957
    },
    {
        "content": "<p>So I looked at dependent type pattern matching</p>",
        "id": 134217406,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122318\">@Tobias Grosser</span> your two goals sound very achievable</p>",
        "id": 134217408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343979
    },
    {
        "content": "<p>In that case you should go with the version I stated with <code>fin m</code> and <code>fin n</code></p>",
        "id": 134217409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537343980
    },
    {
        "content": "<p>And my understanding is that I need to constrain n and m to satisfy has_add and has_one.</p>",
        "id": 134217410,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537343990
    },
    {
        "content": "<p>if <code>fin n</code> makes sense</p>",
        "id": 134217413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537343999
    },
    {
        "content": "<p>then <code>n : nat</code></p>",
        "id": 134217415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344001
    },
    {
        "content": "<p>Right. That one works perfectly.</p>",
        "id": 134217458,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344006
    },
    {
        "content": "<p><code>fin m</code> is a type, which already has a one and an add</p>",
        "id": 134217463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344007
    },
    {
        "content": "<p>and <code>nat</code> already has a 1 and an +</p>",
        "id": 134217464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344007
    },
    {
        "content": "<p>as does <code>fin n</code></p>",
        "id": 134217467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344015
    },
    {
        "content": "<p>I have a variant that works</p>",
        "id": 134217472,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344028
    },
    {
        "content": "<p>feel free to post code</p>",
        "id": 134217505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344102
    },
    {
        "content": "<p>Which is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination6</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134217506,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344109
    },
    {
        "content": "<p>(I mean the pattern match, not the gaussian elimination yet)</p>",
        "id": 134217554,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344129
    },
    {
        "content": "<p>gotcha</p>",
        "id": 134217556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344133
    },
    {
        "content": "<p>You use m and n to mean two different things</p>",
        "id": 134217558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344148
    },
    {
        "content": "<p>you were doing this with x and y earlier</p>",
        "id": 134217560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344156
    },
    {
        "content": "<p>I find it quite confusing</p>",
        "id": 134217562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344158
    },
    {
        "content": "<p>I think it was a bad idea to call the types <code>m</code> and <code>n</code> in the definition of <code>matrix</code></p>",
        "id": 134217563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344172
    },
    {
        "content": "<p>I was asking for has_one has_add out of curiosity (and also it seemed it would be preferable)</p>",
        "id": 134217565,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344183
    },
    {
        "content": "<p>we never use lowercase latin for types</p>",
        "id": 134217569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344184
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination6</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134217572,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344202
    },
    {
        "content": "<p>The matching only matches stuff to the right of the colon, so you're writing \"let m = m + 1\".</p>",
        "id": 134217573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344204
    },
    {
        "content": "<p>I used to do this in mathematics when I was younger -- \"I have a quadratic equation x^2+bx+c=0 -- now let's complete the square by setting x=x+b/2\"</p>",
        "id": 134217618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344243
    },
    {
        "content": "<p>I am aware that 'n' and 'm' in my original example mean different things.</p>",
        "id": 134217623,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344247
    },
    {
        "content": "<p>where would you want to perform an addition, where you can't already?</p>",
        "id": 134217624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344251
    },
    {
        "content": "<p>All is good in this example.</p>",
        "id": 134217634,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344263
    },
    {
        "content": "<p>I never write that now because it's so easy to lose track of whether you're using the old x or the new x. Now I write \"let y = x+b/2\"</p>",
        "id": 134217638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344279
    },
    {
        "content": "<p>Things work fo rme.</p>",
        "id": 134217639,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344281
    },
    {
        "content": "<p>The only time I let \"x=x+1\" nowadays is in procedural programming when I actually want the old value to be forgotten forever</p>",
        "id": 134217663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344332
    },
    {
        "content": "<p>Here is a working version that doesn't use fin:</p>\n<div class=\"codehilite\"><pre><span></span>def Gaussian_elimination6 {α : Type v} [ordered_ring α]\n  (M N) [fintype M] [fintype N] : matrix M N α  → α\n| A := A 0 0\n</pre></div>\n\n\n<p>But you can't do induction on <code>m : nat</code> in this case, since there is no <code>m</code></p>",
        "id": 134217710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344372
    },
    {
        "content": "<p>Right.</p>",
        "id": 134217715,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344387
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination6</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>\n\n\n</blockquote>\n<p>Do you see that you're also using the fact that <code>fin (x+1)</code> has a zero here.</p>",
        "id": 134217716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344394
    },
    {
        "content": "<p>Type class inference figured that out for you and let you use it</p>",
        "id": 134217722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344420
    },
    {
        "content": "<p>Yes.</p>",
        "id": 134217730,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344426
    },
    {
        "content": "<p>That's why I had to write (0:\\a) in the second match.</p>",
        "id": 134217736,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344442
    },
    {
        "content": "<p>I think.</p>",
        "id": 134217741,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344447
    },
    {
        "content": "<p><code>0</code> by itself means \"the zero of something\"</p>",
        "id": 134217744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344457
    },
    {
        "content": "<p>Because in that case it is not known that a zero exists.</p>",
        "id": 134217745,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344457
    },
    {
        "content": "<p>Kevin means the <code>0</code> in <code>A 0 0</code></p>",
        "id": 134217746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344460
    },
    {
        "content": "<p>Lean was expecting something of type \"fin (x+1)\" and you wrote \"0\"</p>",
        "id": 134217751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344478
    },
    {
        "content": "<p>Right.</p>",
        "id": 134217798,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344493
    },
    {
        "content": "<p>and Lean figured \"aah, this must be one of those types that has a zero, let me find an instance of has_zero (fin (x+1)) behind the scenes</p>",
        "id": 134217801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344504
    },
    {
        "content": "<p>I wrote</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination6</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 134217812,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344530
    },
    {
        "content": "<p>Initially</p>",
        "id": 134217815,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344534
    },
    {
        "content": "<p>Lean's typeclass magic: <code>example (x : ℕ) : has_zero (fin (x+1)) := by apply_instance</code></p>",
        "id": 134217828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344551
    },
    {
        "content": "<p>your initial approach doesn't work becasue <code>fin 0</code> is the empty type and in particular has no zero</p>",
        "id": 134217835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344571
    },
    {
        "content": "<p>Right.</p>",
        "id": 134217838,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344579
    },
    {
        "content": "<p>I understood this.</p>",
        "id": 134217841,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344582
    },
    {
        "content": "<p>That's very interesting.</p>",
        "id": 134217843,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344587
    },
    {
        "content": "<p><code>example : has_zero (fin 0) := by apply_instance -- \"failed to generate instance\" error</code></p>",
        "id": 134217898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344616
    },
    {
        "content": "<p>This black magic is related to the square bracket stuff and it took me a very long time before I got comfortable with it.</p>",
        "id": 134217911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344651
    },
    {
        "content": "<p>I see.</p>",
        "id": 134217914,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344657
    },
    {
        "content": "<p>In retrospect I wish that people had stressed earlier how basic notation like <code>0</code> and <code>+</code> worked in Lean</p>",
        "id": 134217924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344676
    },
    {
        "content": "<p>The only thing I do not understand is if it is possible to take Mario's stuff, but expose n and m without introducing 'fin n', but instead just use has_one and has_add.</p>",
        "id": 134217927,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344688
    },
    {
        "content": "<p>because it seems to me that this is a very good introduction to the type class system</p>",
        "id": 134217928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344688
    },
    {
        "content": "<p>I feel this should work, but seems to be far beyond my type_class capabilities.</p>",
        "id": 134217935,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344705
    },
    {
        "content": "<p>I'm afraid I'm not a computer scientist and I don't know what \"expose\" means</p>",
        "id": 134217937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344715
    },
    {
        "content": "<p>As I have a solution, that's not needed. But would be nice to understand this eventually.</p>",
        "id": 134217970,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344723
    },
    {
        "content": "<p><code>matrix</code> eats something of type <code>fin n</code></p>",
        "id": 134217983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344735
    },
    {
        "content": "<p>so you have to give it something of type <code>fin n</code></p>",
        "id": 134217987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344743
    },
    {
        "content": "<p>actually it eats a fintype</p>",
        "id": 134217989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344748
    },
    {
        "content": "<p>\"expose\" means pattern match on n and m to be able to do induction on n and m</p>",
        "id": 134217992,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344751
    },
    {
        "content": "<p>Right. I can pass it a fin n and all is good.</p>",
        "id": 134217994,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344764
    },
    {
        "content": "<p>wait, that's not even true any more</p>",
        "id": 134218002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344782
    },
    {
        "content": "<p>I was wondering if I could pass it a fintype x, where I know that x has_add and has_one.</p>",
        "id": 134218005,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344784
    },
    {
        "content": "<p>any fintype has a cardinality, <code>fintype.card X</code>, and you can do induction on that</p>",
        "id": 134218006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344784
    },
    {
        "content": "<p>sorry, I seem to be behind the times</p>",
        "id": 134218012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344792
    },
    {
        "content": "<p><code>#check @matrix -- matrix : Π (m n : Type u_1) [_inst_1 : fintype m] [_inst_2 : fintype n], Type u_2 → Type (max u_1 u_2)</code></p>",
        "id": 134218023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344817
    },
    {
        "content": "<p>You don't usually need a one and an add on the index type</p>",
        "id": 134218026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344819
    },
    {
        "content": "<p>what is this needed for?</p>",
        "id": 134218035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344837
    },
    {
        "content": "<p>So how can I do induction over card? That's what I am trying to figure out.</p>",
        "id": 134218072,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344845
    },
    {
        "content": "<p>It's a bit messy</p>",
        "id": 134218079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344862
    },
    {
        "content": "<p>Do you want to prove things for matrices indexed by random finite types?</p>",
        "id": 134218084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344871
    },
    {
        "content": "<p>I just want to do induction on my dimensionality to do gaussion elimination.</p>",
        "id": 134218085,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344873
    },
    {
        "content": "<p>No. If you tell me 'fin x' is enough, we are done.</p>",
        "id": 134218090,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344893
    },
    {
        "content": "<p>I guess this is a design decision</p>",
        "id": 134218103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344911
    },
    {
        "content": "<p>Just got curious about the type classes. Seems matlib likes to generalize things.</p>",
        "id": 134218104,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344912
    },
    {
        "content": "<p>I am fine being in 'fin x'. That seems a lot less messy.</p>",
        "id": 134218111,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344932
    },
    {
        "content": "<p>Yes, if mathlib did Gaussian Elimination it would almost certainly do it for random types which are fintypes</p>",
        "id": 134218113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344936
    },
    {
        "content": "<p>Let's leave it at this for now.</p>",
        "id": 134218114,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537344938
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def Gaussian_elimination6 {α : Type v} [ordered_ring α]\n  : ∀ (m n M N) [fintype M] [fintype N], fintype.card M = m → fintype.card N = n → matrix M N α  → α\n| m n M N _ _ h1 h2 A := A 0 0\n</pre></div>\n\n\n<p>You will need some <code>@</code>'s in there, my typechecker isn't running</p>",
        "id": 134218116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537344942
    },
    {
        "content": "<p>If you do it like that then you can induct on m and n</p>",
        "id": 134218164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537344972
    },
    {
        "content": "<p>More likely, I would just do it on <code>fin m</code> by induction and then use equivalence lemmas to transfer to the original fintype</p>",
        "id": 134218173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537345010
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">N</span>\n<span class=\"err\">⊢</span> <span class=\"n\">fintype</span> <span class=\"n\">M</span>\n</pre></div>",
        "id": 134218187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537345026
    },
    {
        "content": "<p>boo</p>",
        "id": 134218188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537345027
    },
    {
        "content": "<p>Or find a way to work with subsets of a fixed type of size <code>m</code></p>",
        "id": 134218189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537345032
    },
    {
        "content": "<p>you have to put a <code>by exactI</code> in there</p>",
        "id": 134218193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537345047
    },
    {
        "content": "<p>in the statement??</p>",
        "id": 134218199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537345074
    },
    {
        "content": "<p>yeah</p>",
        "id": 134218200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537345077
    },
    {
        "content": "<p>because there are typeclass args right of the colon</p>",
        "id": 134218244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537345090
    },
    {
        "content": "<p>either that or use <code>@</code> a lot</p>",
        "id": 134218249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537345100
    },
    {
        "content": "<p>deja vu</p>",
        "id": 134218261,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537345121
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination6</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n      <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 134218284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537345172
    },
    {
        "content": "<p>eew</p>",
        "id": 134218287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537345175
    },
    {
        "content": "<p>soon to be not fixed in Lean 4</p>",
        "id": 134218289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537345184
    },
    {
        "content": "<p>that looks fine, not at all confusing for beginners</p>",
        "id": 134218347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537345215
    },
    {
        "content": "<p>like I said, messy</p>",
        "id": 134218357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537345232
    },
    {
        "content": "<p>Isn't there some pre-rolled <code>fintype.induction_on</code>?</p>",
        "id": 134218362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537345236
    },
    {
        "content": "<p>not to mention that this is not going to be a nice inductive proof since you have to build a recursive subtype</p>",
        "id": 134218371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537345261
    },
    {
        "content": "<p>It's probably better to do induction over the finsets on a fixed type</p>",
        "id": 134218392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537345295
    },
    {
        "content": "<p>Cool. At least it works.</p>",
        "id": 134218397,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537345303
    },
    {
        "content": "<p>I feel I can do induction by using x+1 and y+1</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination6</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n      <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134218450,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537345343
    },
    {
        "content": "<p>Not sure what recursive subtypes mean.</p>",
        "id": 134218453,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537345350
    },
    {
        "content": "<p>I will start with the (fin n) stuff, which is sth I certainly understand.</p>",
        "id": 134218458,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537345366
    },
    {
        "content": "<p>If all works, I can see if I can generalize things.</p>",
        "id": 134218467,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537345380
    },
    {
        "content": "<p>when applying the induction hypothesis, you will need to build a type that contains one fewer element than the type you started with</p>",
        "id": 134218488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537345383
    },
    {
        "content": "<p>I see. That's annoying. I will certainly stay with (fin n)</p>",
        "id": 134218503,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537345409
    },
    {
        "content": "<p>Thanks again. Now I learned quite a bit. Will need to read up on exactI in type definitions.</p>",
        "id": 134218568,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537345468
    },
    {
        "content": "<blockquote>\n<p>Will need to read up on exactI in type definitions.</p>\n</blockquote>\n<p>Note that tactics are simply ways of generating code. They can appear in definitions or proofs. It's just that they are most useful in proofs.</p>",
        "id": 134218604,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537345560
    }
]