[
    {
        "content": "<p>How does one make a type an instance of <code>decidable_eq</code>? For example, this type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 273378513,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645931824
    },
    {
        "content": "<p>This does not seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span> <span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 273378523,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1645931857
    },
    {
        "content": "<p>You can look at how it's done for nat in the source code. Basically you have to write your own algorithm and prove it works</p>",
        "id": 273392543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645953132
    },
    {
        "content": "<p>The reason is because the derive handler for decidable_eq doesn't handle nested inductives</p>",
        "id": 273392554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645953186
    },
    {
        "content": "<p>Does <code>string</code> have decidable_eq? If not then that's the problem</p>",
        "id": 273392558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645953196
    },
    {
        "content": "<p>it does</p>",
        "id": 273392560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645953203
    },
    {
        "content": "<p>Ok then what Mario says is the problem :-)</p>",
        "id": 273392564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645953227
    }
]