[
    {
        "content": "<p>Made an attempt earlier to write down the definition of a derivative in Lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">bounded_linear_maps</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">U</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">deriv_at</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">df</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n   <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_bounded_linear_map</span> <span class=\"n\">df</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">df</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"err\">∥</span> <span class=\"n\">h</span> <span class=\"err\">∥</span> <span class=\"err\">•</span> <span class=\"n\">ε</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"n\">ε</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Without the (redundant?)  <code>[normed_space k U] [normed_space k V]</code> arguments, Lean gives up on <code>[is_bounded_linear_map df]</code> because it fails to synthesise the <code>normed_space</code> instances.</p>\n<p>Even with those arguments the file does not compile: Lean throws <code>maximum class-instance depth has been reached</code> on <code>ε</code> and <code>h</code>. Trying the obvious things:</p>\n<ul>\n<li>increasing the maximum search depth didn't seem to help, up until the point the errors turn instead into deterministic timeouts.</li>\n<li><code>set_option trace.class_instances true</code>, curiously, prints nothing, and I have yet to figure out which instances exactly Lean was looking for and failing to find.</li>\n</ul>\n<p>Could someone please point at any obvious mistakes I'm making? Also, in general, what is there that I can do to coerce Lean into seeing the instances it needs?</p>",
        "id": 157778270,
        "sender_full_name": "Jean Lo",
        "timestamp": 1549548039
    },
    {
        "content": "<p>Eew.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">bounded_linear_maps</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">U</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">df</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n   <span class=\"o\">[</span><span class=\"n\">is_bounded_linear_map</span> <span class=\"n\">df</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- error</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">U : Type u_2,</span>\n<span class=\"cm\">V : Type u_3,</span>\n<span class=\"cm\">df : U → V</span>\n<span class=\"cm\">⊢ normed_space ?m_1 V</span>\n<span class=\"cm\">scratch.lean:9:4: error</span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">U : Type u_2,</span>\n<span class=\"cm\">V : Type u_3,</span>\n<span class=\"cm\">df : U → V</span>\n<span class=\"cm\">⊢ normed_space ?m_1 U</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 157778556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> Try removing the <code>*</code> after <code>Type</code>.</p>",
        "id": 157778747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549548430
    },
    {
        "content": "<p>All your types live in different universes, I don't think you want that.</p>",
        "id": 157778765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549548450
    },
    {
        "content": "<p>Why not?</p>",
        "id": 157778839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548486
    },
    {
        "content": "<p>It doesn't fix it anyway</p>",
        "id": 157778864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548506
    },
    {
        "content": "<p>I bet there's a simple solution to the timeout</p>",
        "id": 157778898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548534
    },
    {
        "content": "<p>it will be one of those \"oops I just coerced from int to nat and Lean hung\" moments</p>",
        "id": 157778911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548546
    },
    {
        "content": "<p>Oh -- there's no \"a\"</p>",
        "id": 157778929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548574
    },
    {
        "content": "<p>no, there is an a :-(</p>",
        "id": 157778942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548586
    },
    {
        "content": "<p>Hmm crazy. I remember that some months ago Kenny had a very weird example, where the <code>*</code>s broke the type class system.</p>",
        "id": 157779039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549548645
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/typeclass.20problems/near/128168992\" title=\"#narrow/stream/113488-general/topic/typeclass.20problems/near/128168992\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/typeclass.20problems/near/128168992</a></p>",
        "id": 157779164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549548740
    },
    {
        "content": "<p>this is probably a separate topic, but: how should I tell whether I want different universes? I'm convinced I've seen cases where it's important to have types live in separate places for generality purposes, or something.</p>",
        "id": 157779205,
        "sender_full_name": "Jean Lo",
        "timestamp": 1549548804
    },
    {
        "content": "<p>I don't understand Johan's comment. I think what you had was fine -- you're supposed to be maximally polymorphic.</p>",
        "id": 157779215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548832
    },
    {
        "content": "<p>Of course I'm happy to be corrected in this instance :-)</p>",
        "id": 157779268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548847
    },
    {
        "content": "<p>I've found it.</p>",
        "id": 157779283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548876
    },
    {
        "content": "<p><code>#print notation ∥ -- has_norm.norm</code></p>",
        "id": 157779305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548905
    },
    {
        "content": "<p><code>#print has_norm.norm -- α → ℝ</code></p>",
        "id": 157779335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548940
    },
    {
        "content": "<p>The norm is real-valued, not k-valued. So Lean is hung up trying to find a coercion from the reals to k</p>",
        "id": 157779394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549548966
    },
    {
        "content": "<p>I retract my comment. I was just reminded of the weird behaviour that Kenny discovered (see link above). But apparently it is orthogonal.</p>",
        "id": 157779456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549549056
    },
    {
        "content": "<p>or trying to find a real vector space structure on <code>U</code>. I have used Lean enough to know that this is usually the problem with these weird time-outs -- you have written buggy code but Lean is not telling you the actual problem.</p>",
        "id": 157779461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549549059
    },
    {
        "content": "<p>Jean, I am glad to see that you are thinking about <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span>-adic Banach spaces, they are very important in the theory of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">p</span></span></span></span>-adic modular forms :-)</p>",
        "id": 157779619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549549180
    },
    {
        "content": "<p>I will never forget Guillermo's insanely weird timeout which was caused by him writing something like <code>0 &lt;= x &lt;= 1</code>, and Lean figured 0 &lt;= x was a Prop and then hung trying to coerce it into the real numbers :-)</p>",
        "id": 157779750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549549276
    },
    {
        "content": "<p>Oh yeah thanks Johan for reminding me of that. That's one of those \"probably Lean 4 will fix it\" things; I think it's worth keeping these random problems at the back of your mind because whenever someone comes up with something weird and not working, these random things might be the answer.</p>",
        "id": 157779950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549549421
    },
    {
        "content": "<p>But the failure of type class inference somehow troubles me more. It might mean that you can't use modules as variables any more.</p>",
        "id": 157780033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549549469
    },
    {
        "content": "<p>But now it is fixed, right?</p>",
        "id": 157780145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549549550
    },
    {
        "content": "<p>No, the \"failed to synthesize type class instance\" issue in my first post is not fixed, right?</p>",
        "id": 157780212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549549574
    },
    {
        "content": "<p>Aah, I see. I can't write <code>is_linear_map f</code> for f an R-module homomorphism, I now have to write <code>is_linear_map R f</code>, which is good.</p>",
        "id": 157780304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549549654
    },
    {
        "content": "<p>but apparently you can still write <code>[is_bounded_linear_map df]</code></p>",
        "id": 157780555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549549820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> is it a problem that <code>is_bounded_linear_map f</code> extends <code>is_linear_map k f</code>? Should it be <code>is_bounded_linear_map k f</code>nowadays?</p>\n<p><span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> I note that <code>is_bounded_linear_map</code> is a structure not a class, so you shouldn't be using <code>[]</code> with it, it should be a regular assumption.</p>",
        "id": 157780743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549549986
    },
    {
        "content": "<p>yes it should be <code>is_bounded_linear_map k f</code></p>",
        "id": 157780846,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549550067
    },
    {
        "content": "<p>[at least, it's a structure in the mathlib I'm using; I know these things sometimes change, indeed <code>is_noetherian</code> is a def in the mathlib I'm using but it changed to a class yesterday in mathlib master.</p>",
        "id": 157780863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549550086
    },
    {
        "content": "<blockquote>\n<p>yes it should be <code>is_bounded_linear_map k f</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> there's a perfect PR for you :-)</p>",
        "id": 157780901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549550128
    },
    {
        "content": "<p>Probably make it a class while you are at it.</p>",
        "id": 157780999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549550181
    },
    {
        "content": "<p>got myself even more confused trying to do the edits.</p>\n<p>making <code>k</code> an explicit argument to <code>is_bounded_linear_map</code>seemed to have been mostly replacing curly brackets with round ones and filling in extra arguments. Making it a class and refactoring the theorems to work started involving stuff I don't understand well enough &amp; I asked about this during the Xena meeting tonight. We went and looked at some similar definitions, I realised that <code>linear_map</code> and <code>is_linear_map</code> both existed, and <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> dropped some comments about <code>is_linear_map</code> being deprecated (?) and bundling stuff into structures (as done in <code>linear_map</code>) being the preferred way to do things now. I'm interested in attempting to write up a  <code>bounded_linear_map</code> structure, but like. What might be a helpful (?) thing for me to try to do at this point?</p>",
        "id": 157813574,
        "sender_full_name": "Jean Lo",
        "timestamp": 1549574175
    },
    {
        "content": "<p>( so after the typechecking issue got pointed out yesterday, I've also realised to great embarrassment that I mucked up really badly with the quantifiers and the double-vertical-lines. I think the definition should have looked more like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">deriv_at</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">df</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">is_bounded_linear_map</span> <span class=\"n\">k</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"err\">∥</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">df</span> <span class=\"n\">h</span> <span class=\"err\">∥</span> <span class=\"bp\">-</span> <span class=\"err\">∥</span> <span class=\"n\">h</span> <span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>which, barring the remaining confusion about what <code>is_bounded_linear_map</code> should look like, is at least something Lean is happy with, and type class stuff seems to be working just fine even without the redundant <code>normed_space</code> arguments)</p>",
        "id": 157902597,
        "sender_full_name": "Jean Lo",
        "timestamp": 1549668625
    }
]