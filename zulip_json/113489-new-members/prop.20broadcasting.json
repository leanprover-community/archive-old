[
    {
        "content": "<p>In topology it is common to have statements like \"let a, b and c be open sets in M\". In lean, I would write it as <code>(a b c : set M) (is_open a) (is_open b) (is_open c)</code>.  But this makes the statement very lengthy.  Instead, it would be nice to have <code>is_open</code> to \"broadcast\" over a tuple of parameters, like <code>is_open (a,b,c)</code>. Is there a way to make this possible?</p>",
        "id": 201804360,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1592962894
    },
    {
        "content": "<p>(<code>is_open</code> as an example for the general idea)</p>",
        "id": 201804410,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1592962944
    },
    {
        "content": "<p>you could make a subtype <code>open_set M</code></p>",
        "id": 201804427,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592963001
    },
    {
        "content": "<p>it's called <code>opens</code> in mathlib</p>",
        "id": 201804431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592963015
    },
    {
        "content": "<p>but the actual answer to your question is no, it's not possible</p>",
        "id": 201804484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592963055
    },
    {
        "content": "<p>You can do <code>(a b c : opens M)</code> though</p>",
        "id": 201804695,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592963357
    },
    {
        "content": "<p>If you are okay with changing the statement to use <code>opens</code> instead of <code>is_open</code> it can be written this way, but if you actually want the statement to have <code>is_open a,b,c</code> you have to write it three times</p>",
        "id": 201804774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592963479
    },
    {
        "content": "<p>You can use variables to avoid repeating yourself though</p>",
        "id": 201804831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592963530
    },
    {
        "content": "<p>There are a lot of mathlib theorems with a bunch of typeclass arguments, and bundling them is not an option (or rather, it has its own downsides). Within the context of wanting a particular statement to come out at the end, <code>variables</code> is the only compression technique we have</p>",
        "id": 201804860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592963613
    },
    {
        "content": "<p>Ok, thank you!</p>",
        "id": 201805032,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1592963848
    }
]