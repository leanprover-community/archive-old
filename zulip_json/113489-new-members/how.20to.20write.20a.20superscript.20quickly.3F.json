[
    {
        "content": "<p>I want to write a^{-1}. How do I do this in lean?</p>",
        "id": 202397181,
        "sender_full_name": "Chris M",
        "timestamp": 1593495216
    },
    {
        "content": "<p><code>\\inv</code></p>",
        "id": 202397230,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593495246
    },
    {
        "content": "<p>cool</p>",
        "id": 202397231,
        "sender_full_name": "Chris M",
        "timestamp": 1593495264
    },
    {
        "content": "<p>Also <code>\\-1</code></p>",
        "id": 202397667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593496028
    },
    {
        "content": "<p>Also -- if you hover the mouse over any symbol in VSCode, the tooltip will tell you how to type it.</p>",
        "id": 202411007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593508161
    },
    {
        "content": "<p>Is there a reason vscode has no methanism to type <code>ᵥ</code>?</p>",
        "id": 202411304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593508340
    },
    {
        "content": "<p>Probably because nobody wrote a PR that adds it to <code>translations.json</code></p>",
        "id": 202411347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593508376
    },
    {
        "content": "<p>Mind linking to that file on github?</p>",
        "id": 202411402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593508419
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\">https://github.com/leanprover/vscode-lean/blob/master/translations.json</a> (I think)</p>",
        "id": 202411468,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593508457
    },
    {
        "content": "<p>It also puzzles me that <code>\\_</code> produces <code>ₐ</code> (<code>\\_a</code>)</p>",
        "id": 202411483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593508467
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span>. Looks like <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> beat me to it: <a href=\"https://github.com/leanprover/vscode-lean/blame/670606ba0ab2ae668b431169aa81e8f77b1c2d78/translations.json#L1284\">https://github.com/leanprover/vscode-lean/blame/670606ba0ab2ae668b431169aa81e8f77b1c2d78/translations.json#L1284</a></p>",
        "id": 202411571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593508540
    },
    {
        "content": "<p>When you write a prefix of a valid shortcut it uses the first one that matches</p>",
        "id": 202411866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593508750
    },
    {
        "content": "<p>Would it be reasonable to do that only if there are not multiple tied shortest ones?</p>",
        "id": 202411887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593508777
    },
    {
        "content": "<p>why? It's still better than nothing</p>",
        "id": 202411904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593508794
    },
    {
        "content": "<p>and you can train your muscle memory to it regardless of how weird it is</p>",
        "id": 202411983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593508844
    },
    {
        "content": "<p>Until someone adds a new shortcut that happens to be the same length as an existing one but alphabetically sooner</p>",
        "id": 202412056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593508916
    },
    {
        "content": "<p>And then the muscle memory breaks</p>",
        "id": 202412060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593508922
    },
    {
        "content": "<p>sure, which is why changes to <code>translations.json</code> shouldn't be taken lightly</p>",
        "id": 202412127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593508949
    },
    {
        "content": "<p>in most common cases we also have duplicates for prefixes when we want to calibrate this behavior</p>",
        "id": 202412161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593508979
    },
    {
        "content": "<p>but I think if the file was closed under taking prefixes it would be about 200-300% larger</p>",
        "id": 202412206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593509016
    },
    {
        "content": "<p>Just for context for anyone else reading, these are the lines in question that I'm worried about</p>\n<p><a href=\"https://github.com/leanprover/vscode-lean/blob/66952a2fd27b3821ef4f67ad4b55e99f6a3991ab/src/input.ts#L262-L267\">https://github.com/leanprover/vscode-lean/blob/66952a2fd27b3821ef4f67ad4b55e99f6a3991ab/src/input.ts#L262-L267</a></p>",
        "id": 202412212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593509023
    },
    {
        "content": "<p>Looking at that code, it's also deterministic based on the order they appear in the file</p>",
        "id": 202412299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593509068
    },
    {
        "content": "<p>so you can calibrate preferences by reordering too</p>",
        "id": 202412316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593509081
    },
    {
        "content": "<p>I'm not certain that's true - from what I can tell, keys that look like numbers are shuffled, at least in some javascript implementations</p>",
        "id": 202412402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593509137
    },
    {
        "content": "<p>I don't think that's a major issue since the only keys that look like numbers are <code>\\0</code> ...<code>\\9</code> which have no proper prefixes</p>",
        "id": 202412554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593509214
    },
    {
        "content": "<p>you might be right though if this is stored as a hashmap</p>",
        "id": 202412653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593509283
    },
    {
        "content": "<p>Anyway, the way I would look at it is that <code>\\_</code> is unassigned, so by luck it currently resolves to <code>\\_a</code>. If that's what you wanted, great, otherwise maybe say what you mean or come up with something better that <code>\\_</code> should resolve to</p>",
        "id": 202412781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593509374
    },
    {
        "content": "<p>What bugs me is I normally type <code>\\_</code> by accident due to hitting space too soon or something, and having it complete as <code>a</code> makes me squint to work out what happened.</p>",
        "id": 202413139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593509600
    },
    {
        "content": "<p>generally whenever you write <code>\\...</code> it will complete to a character if and only if you write a space. If you didn't finish writing the sequence you wanted then you probably got the wrong character</p>",
        "id": 202413416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593509771
    },
    {
        "content": "<p>if you learn the shortest sequence then that's basically true by definition</p>",
        "id": 202413450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593509800
    },
    {
        "content": "<p>If the issue is that you don't realize that you typed <code>\\_a</code> instead of <code>\\_v</code> and can't see the difference between the characters, then that's probably overuse of unicode or a bad font</p>",
        "id": 202413536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593509864
    },
    {
        "content": "<p>That's a fair comment</p>",
        "id": 202413610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593509891
    },
    {
        "content": "<p>One thing I'd perhaps propose is to allow blacklisting sequences as <code>\"_\": null,</code> in that file. If the shortest sequence matches a blacklisted one, then perform no replacement.</p>",
        "id": 202413673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593509938
    },
    {
        "content": "<p>But essentially I'm describing damage control for my own clumsy typing...</p>",
        "id": 202413717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593509984
    },
    {
        "content": "<p>An easy way to accomplish that would be <code>\"_\": \"\\_\"</code></p>",
        "id": 202413833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510047
    },
    {
        "content": "<p>It would be nice if users could add their own translations via vscode settings</p>",
        "id": 202413869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510070
    },
    {
        "content": "<p>maybe they already can, I'm not sure</p>",
        "id": 202413883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510080
    },
    {
        "content": "<p>Allowing customization sounds hard given we just decided they were ordered</p>",
        "id": 202413889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593510084
    },
    {
        "content": "<p>Your approach feels like a (effective) hack, changing the typescript to allow null would be fairly trivial</p>",
        "id": 202413932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593510119
    },
    {
        "content": "<p>On startup it would read the settings and overwrite all the global translations as directed</p>",
        "id": 202413979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510130
    },
    {
        "content": "<p>I don't deny it is a hack</p>",
        "id": 202413999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510149
    },
    {
        "content": "<p>Ah, so tell users to start by copying the entire translations.json, rather than attempting to merge user translation settings with upstream ones</p>",
        "id": 202414012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593510158
    },
    {
        "content": "<p>If you want to support that in vscode, PR's are welcome</p>",
        "id": 202414024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510163
    },
    {
        "content": "<p>No, I'm saying merge settings</p>",
        "id": 202414065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510185
    },
    {
        "content": "<p>Just thought I'd float the idea before bothering with a PR. If it keeps bugging me, I'll make one :)</p>",
        "id": 202414066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593510185
    },
    {
        "content": "<p>like if translations.json has <code>{\"a\": \"A\", \"b\": \"B\", \"d\": \"D\"}</code> and settings.json has <code>\"lean.translations_override\": {\"a\": \"C\", \"b\": null, \"c\": \"C\"}</code> then it behaves as though it was given <code>{\"a\": \"C\", \"b\": null, \"c\": \"C\", \"d\": \"D\"}</code></p>",
        "id": 202414267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510300
    },
    {
        "content": "<p>so if the underscore thing bothers you then you can add <code>{\"_\": null}</code> to your local settings and translations.json doesn't have to change</p>",
        "id": 202414377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510368
    },
    {
        "content": "<p>and you still get the benefit of future changes to translations.json</p>",
        "id": 202414405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593510400
    },
    {
        "content": "<p>How does your merger decide at what position to insert <code>c</code>?</p>",
        "id": 202414636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593510563
    },
    {
        "content": "<p>This already exists in vscode: eg </p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"s2\">&quot;lean.input.customTranslations&quot;</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">&quot;a&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;α&quot;</span><span class=\"o\">,</span>\n        <span class=\"s2\">&quot;al&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;α&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;be&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;β&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;ga&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;γ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;de&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;δ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;ep&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;ε&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;ze&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;ζ&quot;</span><span class=\"o\">,</span>\n        <span class=\"s2\">&quot;et&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;η&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;th&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;θ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;io&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;ι&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;ka&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;κ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;la&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;λ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;mu&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;μ&quot;</span><span class=\"o\">,</span>\n        <span class=\"s2\">&quot;nu&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;ν&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;xi&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;ξ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;pi&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;π&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;rh&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;ρ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;si&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;σ&quot;</span><span class=\"o\">,</span>\n        <span class=\"s2\">&quot;ta&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;τ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;ph&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;φ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;ch&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;χ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;ps&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;ψ&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;om&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;ω&quot;</span><span class=\"o\">,</span>\n    <span class=\"bp\">...</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202417196,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1593512467
    },
    {
        "content": "<p>then vscode will merge the translation files, with the ones in customTranslations clobbering the other</p>",
        "id": 202417254,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1593512516
    },
    {
        "content": "<p>although there is no <code>null</code> support as of yet</p>",
        "id": 202417656,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1593512785
    },
    {
        "content": "<p>To be clear with my point about clobbering - javascript objects are ordered dictionaries, so there's not a unique definition of what merging looks like</p>",
        "id": 202418301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593513298
    },
    {
        "content": "<p>I think in the sourcecode it is just <code>{...globalTranslations, ...customTranslations}</code>, so they are treated as unordered here.</p>",
        "id": 202418624,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1593513525
    },
    {
        "content": "<p>That results in the order being (assuming VScode matches chrome):</p>\n<ul>\n<li>Existing keys keep their order</li>\n<li>custom keys are added last (so will never win ties)</li>\n</ul>",
        "id": 202418759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593513643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/113489-new-members/topic/how.20to.20write.20a.20superscript.20quickly.3F/near/202417656\">said</a>:</p>\n<blockquote>\n<p>although there is no <code>null</code> support as of yet</p>\n</blockquote>\n<p>Reading the source, it looks like it is implicitly already supported.</p>",
        "id": 202418814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593513710
    },
    {
        "content": "<p>No custom keys always win ties.</p>",
        "id": 202418942,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1593513805
    },
    {
        "content": "<p><code>{...{d: 1, c:2, b:3}, ...{c:3, a:5}}</code> results in <code>{d: 1, c: 3, b: 3, a: 5}</code> with the key <code>a</code> being last. The lines I link to above show the earliest element is used to break ties.</p>",
        "id": 202419063,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593513884
    },
    {
        "content": "<p>I believe Javascript objects are unordered dictionaries so it doesn't matter where <code>a</code> appears in the resulting object. The important thing is that in your example <code>c:3</code> clobbers <code>c:2</code> .</p>",
        "id": 202419621,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1593514361
    },
    {
        "content": "<p>If that were true there would be bigger problems for breaking ties, since the completer is affected by their iteration order.</p>",
        "id": 202419681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593514419
    },
    {
        "content": "<p>Ah I see what you mean, in the case that the string is not an exact match it iterates through the object so the iteration order matters. In the implementation, it takes the shortest completion so there is only iteration-order-dependence if there are two completions with the same length and the same prefix.</p>",
        "id": 202419984,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1593514670
    },
    {
        "content": "<p>Yes, and that case is what this conversation started as :)</p>",
        "id": 202420045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593514701
    },
    {
        "content": "<p>But if you add your own custom translation for a prefix then you don't have to worry about tiebreak behavior</p>",
        "id": 202422120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593516255
    },
    {
        "content": "<p>Custom translations supports null with this PR: <a href=\"https://github.com/leanprover/vscode-lean/pull/197\">https://github.com/leanprover/vscode-lean/pull/197</a></p>",
        "id": 202422487,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1593516539
    }
]