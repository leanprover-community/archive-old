[
    {
        "content": "<p>Hello. I am looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/init/meta/widget/basic.html\">https://leanprover-community.github.io/mathlib_docs/init/meta/widget/basic.html</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">Hello</span> <span class=\"o\">:</span> <span class=\"n\">component</span> <span class=\"n\">string</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">component.pure</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"s2\">\"hello, \"</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"s2\">\", good day!\"</span><span class=\"o\">])</span>\n<span class=\"bp\">#</span><span class=\"n\">html</span> <span class=\"n\">Hello</span> <span class=\"s2\">\"lean\"</span> <span class=\"c1\">-- renders \"hello, lean, good day!\"</span>\n</code></pre></div>\n<p>I got it to work with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">Hello</span> <span class=\"o\">:</span> <span class=\"n\">component</span> <span class=\"n\">string</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"n\">component.pure</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"s2\">\"hello, \"</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"s2\">\", good day!\"</span><span class=\"o\">])</span>\n<span class=\"bp\">#</span><span class=\"n\">html</span> <span class=\"n\">html.of_component</span> <span class=\"s2\">\"lean\"</span> <span class=\"n\">Hello</span> <span class=\"c1\">-- renders \"hello, lean, good day!\"</span>\n</code></pre></div>\n<p>but I'm confused why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">Hello</span> <span class=\"o\">:</span> <span class=\"n\">component</span> <span class=\"n\">string</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"n\">component.pure</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"s2\">\"hello, \"</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"s2\">\", good day!\"</span><span class=\"o\">])</span>\n<span class=\"bp\">#</span><span class=\"n\">html</span> <span class=\"n\">Hello</span> <span class=\"s2\">\"lean\"</span> <span class=\"c1\">-- renders \"hello, lean, good day!\"</span>\n</code></pre></div>\n<p>gives this error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span>\n<span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">limit</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">increased</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span> <span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">visualized</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span> <span class=\"bp\">'</span><span class=\"n\">trace.class_instances'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thanks.</p>",
        "id": 221104512,
        "sender_full_name": "Angela Li",
        "timestamp": 1609204920
    },
    {
        "content": "<p>The documentation there might be out of date. cc: <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span></p>",
        "id": 221105637,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609206725
    },
    {
        "content": "<p>Hello, I think that I made a mistake with typeclasses</p>",
        "id": 221280864,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1609409380
    },
    {
        "content": "<p>So the problem is that when you write <code>Hello \"lean\"</code>, there is a function coercion, but the typeclass inference system is getting stuck in a loop for some reason. I suggest that you just use the clunkier version with <code>html.of_component</code> for now. Maybe someone who actually understands typeclasses knows what needs to change to get this to work.</p>",
        "id": 221281179,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1609409775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> thanks for the explanation! I've opened <a href=\"https://github.com/leanprover-community/lean/issues/512\">lean#512</a> for now.</p>",
        "id": 221309294,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609440902
    }
]