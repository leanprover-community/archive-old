[
    {
        "content": "<p>When I execute a proof that invokes high-level tactics (for example, the <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_power/basic.html\">power operator</a>) which are constructed from lower-level tactics (like multiplication, addition, succession, etc.), I have a feeling that the code isn't actually accessing or considering all of these lower tiers during runtime. </p>\n<p>This makes it fast, right? How does this work? Is there a place I could read a bit more about it?</p>",
        "id": 277340565,
        "sender_full_name": "Tyler Josephson",
        "timestamp": 1648760946
    },
    {
        "content": "<p>A tactic is something like <code>induction</code> or <code>rw</code>. Things like multiplication and addition are just regular functions, or terms. Lean is not actually doing any multiplications when you use the multiplication function -- it's meaningless to ask to compute \"x * y\" anyway, if x and y are random elements of a random ring. Lean's proof checking boils down to checking that a certain term has a certain type, rather than evaluating the term in any way.</p>",
        "id": 277343928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648762938
    }
]