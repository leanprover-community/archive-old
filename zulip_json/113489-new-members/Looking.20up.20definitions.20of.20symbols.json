[
    {
        "content": "<p>Is there a good way of looking up the definitions of <code>∈</code>, <code>|</code>, <code>∃</code>, etc.?</p>",
        "id": 198335189,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1590075107
    },
    {
        "content": "<p><code>#print ∈</code> will show the declaration name. I think you can also right click on them and go to definition as usual.</p>",
        "id": 198336788,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590075890
    },
    {
        "content": "<p>These are all defined as notation typeclasses though so the definitions won't be too helpful. unfortunately I don't know of a quick way to find the actual instance that's at play when they're being used in a block of code other than digging through <code>set_option trace.class_instances true</code> output.</p>",
        "id": 198337263,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590076109
    },
    {
        "content": "<p>huh for some reason I've been writing <code>print notation ∈</code> instead, it seems they have the same output</p>",
        "id": 198358250,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590085851
    },
    {
        "content": "<p>Emacs seems to be inconsistent with which symbol's definitions it can automatically look up and display and which it can't. I should read lean-mode's documentation more closely to see if I'm missing something</p>",
        "id": 198359409,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1590086450
    },
    {
        "content": "<p>The Lean server frequently has trouble with go-to-definition when working in tactic mode. I don't know if there's a good solution for this.</p>",
        "id": 198359501,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590086521
    },
    {
        "content": "<p>I was very confused about why lean didn't like <code>#print |</code>. Turns out I should've been typing <code>#print \\|</code>. /sigh</p>",
        "id": 198359626,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1590086589
    },
    {
        "content": "<p>Yup, that one is annoying.</p>",
        "id": 198360015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590086786
    },
    {
        "content": "<p>You can use <code>C-u C-x =</code> to find out what character you have, and how to type it.</p>",
        "id": 198360391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590086966
    },
    {
        "content": "<p>Oh, it makes me think of a great improvement we could make in Lean 3.15.0. Could we get rid of <code>(|</code> and <code>|)</code>? This would allow declaring <code>|</code> (the regular ASCII one) as notation for the absolute value without fearing to put it next to a parenthesis.</p>",
        "id": 198360739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590087137
    },
    {
        "content": "<p>Is that really the only problem with <code>|</code>, though? It also triggers the equation compiler</p>",
        "id": 198361218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590087362
    },
    {
        "content": "<p>We could use <code>\\|</code> for that <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 198361329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590087429
    },
    {
        "content": "<p>I don't think I ever had Lean thinking I wanted the equation compiler</p>",
        "id": 198361382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590087463
    },
    {
        "content": "<p>What is <code>|)</code>?</p>",
        "id": 198361391,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590087469
    },
    {
        "content": "<p>Lean must have noticed I never use the equation compiler</p>",
        "id": 198361403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590087477
    },
    {
        "content": "<p>See? Gabriel doesn't even know that thing</p>",
        "id": 198361458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590087486
    },
    {
        "content": "<p>I had to look them up.</p>",
        "id": 198361482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590087497
    },
    {
        "content": "<p>Oh, wow. <code>|)</code> is ascii for <code>⟩</code> in case anybody's wondering.</p>",
        "id": 198361518,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590087516
    },
    {
        "content": "<p>Exactly. Let's get rid of ASCII art</p>",
        "id": 198361569,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590087535
    },
    {
        "content": "<p>If we remove <code>|)</code>, can we then make <code>|</code> syntax for <code>dvd</code>?</p>",
        "id": 198361668,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590087588
    },
    {
        "content": "<p>aren't there issues with the other meanings of <code>|</code> too though?</p>",
        "id": 198361915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590087673
    },
    {
        "content": "<p>like in set builders, the equation compiler, and inductive cases</p>",
        "id": 198361959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590087698
    },
    {
        "content": "<p>I'm using <code>|</code> for absolute value throughout the tutorials project, and the only issue is with <code>(|</code> and <code>|)</code></p>",
        "id": 198362001,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590087720
    },
    {
        "content": "<p>Ok, I'll let you figure out how to use it in mathlib.</p>",
        "id": 198362206,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590087804
    },
    {
        "content": "<p>Note that I'm <em>not</em> advocating setting a global <code>abs</code> notation</p>",
        "id": 198362247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590087833
    },
    {
        "content": "<p>Well, it's gone in 3.15: <a href=\"https://github.com/leanprover-community/lean/issues/265\">lean#265</a></p>",
        "id": 198362475,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590087956
    },
    {
        "content": "<p>When I see PR pages like <a href=\"https://github.com/leanprover-community/lean/issues/265\">lean#265</a> I wonder whether Gabriel is also bors.</p>",
        "id": 198362702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590088067
    },
    {
        "content": "<p>You never see them in the same place at the same time</p>",
        "id": 198391926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590104435
    }
]