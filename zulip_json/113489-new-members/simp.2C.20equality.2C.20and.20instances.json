[
    {
        "content": "<p>Hi, I am trying to prove that list intersection with a singleton list is essentially a filter, and get this sub-goal:</p>\n<div class=\"codehilite\"><pre><span></span>lemma filter_mem_singleton_is_filter_eq {a} [decidable_eq a] {x : a} {xs : list a}:\n  filter (λy, y ∈ [x]) xs = filter (λy, y = x) xs :=\n</pre></div>\n\n\n<p>this is more or less trivial, but for the implicite <code>decidable</code> term in the filter.  When I rewrite the mem term to be eq, the terms look like:</p>\n<div class=\"codehilite\"><pre><span></span>a : Type u_1,\n_inst_1 : decidable_eq a,\nx : a,\nxs : list a\n⊢ @filter a (λ (y : a), y = x)\n      (@eq.rec (a → Prop) (λ (y : a), y ∈ [x]) (@decidable_pred a)\n         (λ (a_1 : a), @list.decidable_mem a _inst_1 a_1 [x])\n         (λ (y : a), y = x)\n         _)\n      xs =\n    @filter a (λ (y : a), y = x) (λ (a : a), _inst_1 a x) xs\n</pre></div>\n\n\n<p>where the terms are equal but for the instance terms (after <code>simp, dsimp</code>).  I have run into this before, but managed to find a workaround.  My questions is: is this common, and what is the solution, or am I doing something that is very un-lean?</p>",
        "id": 134561065,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1537828186
    },
    {
        "content": "<p>When you get to that goal, use <code>congr</code> to simplify it</p>",
        "id": 134561362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537828542
    },
    {
        "content": "<p>before the rw</p>",
        "id": 134561367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537828552
    },
    {
        "content": "<p>oh, nice, that works.</p>",
        "id": 134561425,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1537828603
    },
    {
        "content": "<p><code>congr</code> knows about subsingleton arguments and will automatically prove they are equal. In this case <code>decidable p</code> is a subsingleton</p>",
        "id": 134561432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537828613
    },
    {
        "content": "<p>and a follow-on - is there somewhere I should be sending the lemmas I prove?  They look like they should be in the standard library, but I don't know the protocol for submitting them.  These are lemmas like the interaction between list.inter and const etc..</p>",
        "id": 134561678,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1537828937
    },
    {
        "content": "<p>This should probably be going into <a href=\"https://github.com/leanprover/mathlib\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib\">mathlib</a>. The core library is frozen and does not accept PRs</p>",
        "id": 134561916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537829231
    },
    {
        "content": "<p>Although I'm not sure I want this particular theorem, it seems a bit specialized... Both sides are equivalent to <code>list.repeat x (xs.count x)</code></p>",
        "id": 134562029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537829356
    },
    {
        "content": "<p>This is a helper lemma, so maybe not.  It looks like mathlib has a bunch of lemmas which may do what I want, anyway.  Thanks!</p>",
        "id": 134562143,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1537829497
    }
]