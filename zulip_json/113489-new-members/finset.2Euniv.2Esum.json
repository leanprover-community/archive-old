[
    {
        "content": "<p>I am trying to prove this statement about finset.univ.sum which should be easy but I have no ideas how to do this in Lean.  I tried unfolding some defitions but it looked even more complicated. Is there a tactic or lemma I can use?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249699658,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1629195593
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_succ\">docs#fin.sum_univ_succ</a></p>",
        "id": 249700170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629195952
    },
    {
        "content": "<p>It would be nice to have a tactic to handle this, along the lines of <code>fin_cases</code>: explode of sum over a finite set.</p>",
        "id": 249700254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629196002
    },
    {
        "content": "<p>What order would it expand the sum into?</p>",
        "id": 249701249,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629196894
    },
    {
        "content": "<p>Maybe that doesn't matter; I suppose meta code has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.unquot\">docs#quot.unquot</a> to pick an arbitrary order</p>",
        "id": 249701304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629196929
    },
    {
        "content": "<p>I guess whatever order <code>fin_cases</code> hands you the cases in!</p>",
        "id": 249701571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629197198
    },
    {
        "content": "<p>Well, <code>fin_cases</code> only works on <code>fin</code>; I thought you meant for any finite type</p>",
        "id": 249701591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629197221
    },
    {
        "content": "<p>Really? I remember it working more generally. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#fin_cases\">tactic#fin_cases</a></p>",
        "id": 249701631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629197259
    },
    {
        "content": "<p>Oh, I didn't know that</p>",
        "id": 249701693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629197285
    },
    {
        "content": "<p>No, it works on anything where <code>fintype</code> is available.</p>",
        "id": 249701697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629197290
    },
    {
        "content": "<p>The tests are insightful: <a href=\"https://github.com/leanprover-community/mathlib/blob/0591c276d560de91873adabc939a656bf9d0b827/test/fin_cases.lean\">https://github.com/leanprover-community/mathlib/blob/0591c276d560de91873adabc939a656bf9d0b827/test/fin_cases.lean</a></p>",
        "id": 249702024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629197572
    }
]