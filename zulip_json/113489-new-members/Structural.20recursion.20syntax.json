[
    {
        "content": "<p>I'm new to Lean and new to this forum so please bear with me. I'm trying to learn Lean by porting a Coq project into Lean as an exercise. The following is a structural recursion that I finally got working (sorry I don't have a more minimal example):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Plc</span> <span class=\"bp\">→</span> <span class=\"n\">Evidence</span> <span class=\"bp\">→</span> <span class=\"n\">Evidence</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">asp</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">eval_asp</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">att</span> <span class=\"n\">q</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kn\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">q</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lseq</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kn\">eval</span> <span class=\"n\">t2</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">p</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bseq</span> <span class=\"n\">s</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">ss</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">sp</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n                          <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">t2</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">sp</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bpar</span> <span class=\"n\">s</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">pp</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">sp</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n                          <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">t2</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">sp</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>My question is why doesn't the following version work?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">pdr_eval</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Plc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Evidence</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">Evidence</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">asp</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">eval_asp</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"n\">att</span> <span class=\"n\">q</span> <span class=\"n\">t1</span> <span class=\"o\">:=</span> <span class=\"n\">pdr_eval</span> <span class=\"n\">t1</span> <span class=\"n\">q</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"n\">lseq</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pdr_eval</span> <span class=\"n\">t2</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">pdr_evel</span> <span class=\"n\">t1</span> <span class=\"n\">p</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">bseq</span> <span class=\"n\">s</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">ss</span> <span class=\"o\">(</span><span class=\"n\">pdr_eval</span> <span class=\"n\">t1</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">sp</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">pdr_eval</span> <span class=\"n\">t2</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">sp</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">bpar</span> <span class=\"n\">s</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"n\">pp</span> <span class=\"o\">(</span><span class=\"n\">pdr_eval</span> <span class=\"n\">t1</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">sp</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">pdr_eval</span> <span class=\"n\">t1</span> <span class=\"n\">p</span> <span class=\"o\">((</span><span class=\"n\">sp</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I get an error saying that <code>pdr_eval</code> is an unknown identifier in all the recursive applications.</p>",
        "id": 196995049,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589035644
    },
    {
        "content": "<p>Exactly the question I was just asking over in Induction vs Recursion ;) I don't understand the answer properly yet so I will lurk here</p>",
        "id": 196995132,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589035758
    },
    {
        "content": "<p>Lean cares about which arguments you put \"right of the colon\". The ones on the left side are parameters; they can't change in recursive applications and indeed are required not to be mentioned. The ones on the right are used for recursion</p>",
        "id": 196995289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589035928
    },
    {
        "content": "<p>If you write <code>def foo (params : bla) : bar := ...</code> then you can't use recursion at all; in the <code>...</code> <code>foo</code> is not legal, or rather refers to whatever it did before the <code>def</code></p>",
        "id": 196995311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589035989
    },
    {
        "content": "<p>Is there a quick summary of why that's the case? Presumably it brings some benefit to some part of the system, for example?</p>",
        "id": 196995371,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589036057
    },
    {
        "content": "<p>The trigger for the equation compiler is <code>def name (params) : type | ...</code> with a <code>|</code> instead of a <code>:=</code> after the definition type</p>",
        "id": 196995372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589036058
    },
    {
        "content": "<p>It replaces coq's <code>{decreases n}</code> directive</p>",
        "id": 196995377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589036084
    },
    {
        "content": "<p>or whatever the syntax for that is</p>",
        "id": 196995384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589036093
    },
    {
        "content": "<p>Thanks for the explanation!</p>",
        "id": 196995821,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1589036658
    },
    {
        "content": "<p>Can I define a recursive function where one of the parameters is dependent on another?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span>\n</code></pre></div>\n\n\n<p>Or do I have to define a new type which is the bundle of all the things which depend on each other?</p>",
        "id": 197183846,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589220753
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 197184151,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589220915
    },
    {
        "content": "<p>It did take me a while to discover that that was \\p and not \\prod</p>",
        "id": 197184505,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589221090
    },
    {
        "content": "<p>But I got there in the end, thanks</p>",
        "id": 197184526,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589221104
    },
    {
        "content": "<p>I think that pi is what distinguishes us from Isabelle/HOL.</p>",
        "id": 197184842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589221279
    },
    {
        "content": "<p>Yeah, I'm not at all used to it from Agda which just elides all of this into the same function syntax</p>",
        "id": 197185412,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589221581
    },
    {
        "content": "<p>Oh so \"explicit\" pi types are not in Agda and you'd have to make a structure and then define a function from it?</p>",
        "id": 197185523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589221664
    },
    {
        "content": "<p><code>eval</code> can just be treated as a function here, you can partially apply it and everything.</p>",
        "id": 197185634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589221723
    },
    {
        "content": "<p>Oh! You're just saying that the syntax is different?</p>",
        "id": 197185673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589221749
    },
    {
        "content": "<p>The Agda syntax is like what <span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> wrote in the question</p>",
        "id": 197185706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589221776
    },
    {
        "content": "<p>Yeah, I just need to get used to the existence of a separate equation compiler</p>",
        "id": 197185852,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589221858
    },
    {
        "content": "<p>well, the question is really mostly about the syntax of Pi-types</p>",
        "id": 197185921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589221902
    },
    {
        "content": "<p>In Lean we use a Pi <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 197185930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589221907
    },
    {
        "content": "<p>but the Agda syntax seems less annoying honestly</p>",
        "id": 197185986,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589221923
    }
]