[
    {
        "content": "<p>(deleted)</p>",
        "id": 281408286,
        "sender_full_name": "Ratmir Mugattarov",
        "timestamp": 1651825646
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/proof.20automatisation\">#general &gt; proof automatisation</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 281408509,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651825791
    },
    {
        "content": "<p>Hi! It's not a direct answer to your question, but there are third-party tools to check lean proofs such as <a href=\"https://github.com/gebner/trepplein\">https://github.com/gebner/trepplein</a></p>",
        "id": 281408825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651825944
    },
    {
        "content": "<p>Arguably what you need to trust is:</p>\n<ul>\n<li>that the proofs that lean can export contain a faithful translation of the original statement (you already have to trust the humans translating math on this)</li>\n<li>The proof checker you use to validate the exported proof (which can either be lean itself, or a third-party tool)</li>\n</ul>\n<p>I would guess the paper about Lean itself can give some insight into this design</p>",
        "id": 281409065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651826085
    },
    {
        "content": "<p>I worked a bit with another theorem prover called HOL. They attempted to formally prove correctness of code of HOL with itself. <br>\nIs it any interest for similar thing in LEAN?</p>",
        "id": 281423655,
        "sender_full_name": "Ratmir Mugattarov",
        "timestamp": 1651835539
    },
    {
        "content": "<p>I believe the correctness proof of HOL was (is?) a huge undertaking. And at the moment Lean is somewhat more popular with mathematicians than computer scientists / logicians, so the interest is probably relatively small.</p>",
        "id": 281423959,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1651835788
    },
    {
        "content": "<p>iirc Leo has mentioned in some talk during the Q&amp;A section that he would welcome if someone would try to do formal verification of the Lean 4 compiler but that it is not of interested  to the compiler development team right now and would be a very non trivial undertaking.</p>\n<p>Note that, if you tried to verify correctness of the entire Lean 4 compiler right now in Lean you could not actually do this because it uses features like <code>partial</code> that are impossible to analyze with proofs (on purpose).</p>",
        "id": 281425626,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1651837031
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">#leantt</a> is an (unformalized) proof of consistency of lean's axiomatics</p>",
        "id": 281427404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651838201
    },
    {
        "content": "<p>It would be a feasible but big project to formalize it</p>",
        "id": 281427479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651838255
    },
    {
        "content": "<p>Proving lean's <em>implementation</em> correct is a much bigger project and I don't see it happening in the forseeable future. I've been working on a project along these lines for the past few years (<a href=\"https://github.com/digama0/mm0\">MM0</a>), and a very important part is that it's way simpler than lean, both in theory and in implementation. This is still very uncharted territory, and I would put a bootstrapped verified lean at least 3 years out with a concerted effort by a team of people.</p>",
        "id": 281428138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651838611
    }
]