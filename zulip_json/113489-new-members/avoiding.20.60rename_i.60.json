[
    {
        "content": "<p>Is there a way to avoid <code>rename_i</code> here?</p>\n<p>The Lean 3 proof named <code>x</code>; over in Lean 4, <code>ext</code> leaves <code>x</code> with a hygenic name</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: eliminate `rename_i`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">core_res</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∪</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span>\n  <span class=\"n\">rename_i</span> <span class=\"n\">x</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_core_res</span><span class=\"o\">]</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 317501913,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671778034
    },
    {
        "content": "<p>Its in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a> if you want to play with the actual code.</p>",
        "id": 317502026,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671778101
    },
    {
        "content": "<p><code>ext x</code>?</p>",
        "id": 317502505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671778436
    }
]