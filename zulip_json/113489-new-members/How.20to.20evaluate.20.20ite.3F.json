[
    {
        "content": "<p>I am new to Lean and trying to formalize some proofs in my paper (starting from some very basic stuffs) <br>\nIn the tactic mode, I get the goal as the following:<br>\n<a href=\"/user_uploads/3121/2Ge8s34AnJunDXyT1KAqDxdV/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2Ge8s34AnJunDXyT1KAqDxdV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2Ge8s34AnJunDXyT1KAqDxdV/image.png\"></a></div><p>Then I got no idea how to proceed. There are at least two obstructions to me. </p>\n<ol>\n<li>how to treat \"ite\" ? (clearly one must use -1 \\neq 1) </li>\n<li>how to treat _match_2 ?</li>\n</ol>\n<p>It seems there are no documents on these two points. </p>\n<p>Thanks.</p>",
        "id": 287827180,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656494872
    },
    {
        "content": "<p>Can you share a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that includes your definition of <code>mat_mul</code>?</p>",
        "id": 287828729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656495699
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/if_neg\">docs#if_neg</a> will let you eliminate the third <code>ite</code></p>",
        "id": 287828968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656495825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/287828729\">said</a>:</p>\n<blockquote>\n<p>Can you share a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that includes your definition of <code>mat_mul</code>?</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/QttIh-vdhjg1pahSrtY-4KlT/image.png\">image.png</a> <br>\nI am trying to define the structure of monomial_matrix (over the coefficient ring int, for simplicity),  mat_mul is the multiplication of two monomail_matrix. </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QttIh-vdhjg1pahSrtY-4KlT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QttIh-vdhjg1pahSrtY-4KlT/image.png\"></a></div><p>The code is attached. Thanks. <br>\n<a href=\"/user_uploads/3121/iiwvZQGnPxfY5pjuAB2dGxRI/test.lean\">test.lean</a></p>",
        "id": 287830680,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656496765
    },
    {
        "content": "<p>Can you paste the code here in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> rather than attaching it?</p>",
        "id": 287831686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656497370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/287831686\">said</a>:</p>\n<blockquote>\n<p>Can you paste the code here in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> rather than attaching it?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- basis of V_l are {v_i} R=integer</span>\n<span class=\"c1\">-- a scalar of a basis vector c_i v_i is identified with (c_i, i)R × int</span>\n\n<span class=\"c1\">-- A lifting of simple refelection is a map int -&gt; R × int</span>\n<span class=\"kd\">structure</span> <span class=\"n\">monomial_matrix</span>  <span class=\"o\">:=</span>\n<span class=\"n\">mk</span>  <span class=\"o\">::</span>  <span class=\"o\">(</span><span class=\"n\">mat</span><span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">int</span> <span class=\"bp\">×</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mat_mul</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">wp</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span> <span class=\"o\">:=</span>\n  <span class=\"n\">monomial_matrix.mk</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">cwp_j</span><span class=\"o\">,</span> <span class=\"n\">wp_j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">wp.mat</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">cw_wp_j</span><span class=\"o\">,</span> <span class=\"n\">w_wp_j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">w.mat</span> <span class=\"n\">wp_j</span><span class=\"o\">)</span>\n          <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">cw_wp_j</span> <span class=\"bp\">*</span> <span class=\"n\">cwp_j</span><span class=\"o\">,</span> <span class=\"n\">w_wp_j</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span> <span class=\"o\">:=</span>\n  <span class=\"n\">monomial_matrix.mk</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">),</span>\n    <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- The idenetity map</span>\n<span class=\"kd\">def</span> <span class=\"n\">id_mat</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span> <span class=\"o\">:=</span>\n  <span class=\"n\">monomial_matrix.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"kd\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"o\">:=</span> <span class=\"n\">mat_mul</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mat_mul</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mat_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287831833,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656497439
    },
    {
        "content": "<p><del>Make sure to read <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> (that's a link)</del></p>\n<p>Edit: ah, you need a second set of backticks because the first set is part of the <code> ```quote ``` </code> syntax; you used the <code> ``` </code> that was inserted automatically by the quotation, and didn't actually type new ones for the code.</p>",
        "id": 287831858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656497459
    },
    {
        "content": "<p>The <code>_match</code> terms are being generated by your use of <code>let (cw_wp_j, w_wp_j) := (w.mat wp_j)</code></p>",
        "id": 287832092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656497622
    },
    {
        "content": "<p>If you use <code>let w_wp := (w.mat wp_j)</code> and <code>w_wp.1</code>, <code>w_wp.2</code> instead, then they will go away</p>",
        "id": 287832150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656497647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/287832150\">said</a>:</p>\n<blockquote>\n<p>If you use <code>let w_wp := (w.mat wp_j)</code> and <code>w_wp.1</code>, <code>w_wp.2</code> instead, then they will go away</p>\n</blockquote>\n<p>Just updated the code.</p>",
        "id": 287832461,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656497874
    },
    {
        "content": "<p>If you <code>import tactic</code> then you can use <code>split_ifs</code> which does all the dirty work for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mat_mul</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mat_mul</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287834452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656499309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/287834452\">said</a>:</p>\n<blockquote>\n<p>If you <code>import tactic</code> then you can use <code>split_ifs</code> which does all the dirty work for you:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mat_mul</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mat_mul</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks. Like magic <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> .<br>\nWhy split_ifs ends with \";\" instead of \", \" ?</p>",
        "id": 287834952,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656499620
    },
    {
        "content": "<p><code>;</code> means \"apply the following tactic to all goals created by the previous\"</p>",
        "id": 287836013,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656500387
    },
    {
        "content": "<p>So I assume in this case we want to simplify both the positive and negative outcome of the if statement.</p>",
        "id": 287836081,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1656500413
    },
    {
        "content": "<p>Maybe this is a clearer proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mat_mul</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mat_mul</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287836124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656500445
    },
    {
        "content": "<p>Or an even clearer proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mat_mul</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mat_mul</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287861466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656512694
    },
    {
        "content": "<p>Now I am trying to prove something more complex. <br>\nBasically, I want to verify certain listings in GL_n of simple reflections of a Weyl satisfy the braid relation. </p>\n<p>I have edited my original question to include the codes. <br>\nHere is the relevant part. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The definition of s_i</span>\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span> <span class=\"o\">:=</span>\n  <span class=\"n\">monomial_matrix.mk</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">),</span>\n    <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"k\">else</span>\n    <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- s_i s_{i+1} s_i = s_{i+1} s_i s_{i+1}</span>\n<span class=\"c1\">-- i≠ 0, j≠ 0</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">s_i_s_ip_s_i_eq_s_ip_s_i_s_ip</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"n\">j</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mat_mul</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Here are the problems:</p>\n<ol>\n<li>split_ifs runs timeout by default (and my VS code go crush <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ) , and I removed the time limitation. </li>\n<li>after split_ifs, it give 859 goals to solve but most goals include a hypothesis such as</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>which is clearly false. <br>\nSo my question is:</p>\n<ol>\n<li>Is there a better way to rewrite the definition of s_i so that number of cases can be reduced. </li>\n<li>Is there some way to automatically eliminate the goal containing false assumptions. </li>\n<li>Although I known how to disprove i+1+1 =1 in the natural number game, I still don't know how to solve it effectively using lean/mathlib. </li>\n</ol>\n<p>Thanks.</p>",
        "id": 287880972,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656519763
    },
    {
        "content": "<p>Ouch, that looks like a pretty extreme case. Is there a lemma called something like lt_succ_succ that you could use with ne_of_gt?</p>",
        "id": 287884509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1656521447
    },
    {
        "content": "<p>I think probably the way to do this is handle the cases when <code>j</code> is <code>(i+2)</code>, <code>(i+1)</code>, <code>i</code>, <code>-i</code>, <code>-(i+1)</code>, <code>-(i+2)</code> separately</p>",
        "id": 287885018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656521689
    },
    {
        "content": "<p>Which will give you only 7 cases to handle</p>",
        "id": 287885065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656521715
    },
    {
        "content": "<p>Based on your comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- A lifting of simple refelection is a map int -&gt; R × int</span>\n<span class=\"kd\">structure</span> <span class=\"n\">monomial_matrix</span>  <span class=\"o\">:=</span>\n<span class=\"n\">mk</span>  <span class=\"o\">::</span>  <span class=\"o\">(</span><span class=\"n\">mat</span><span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">int</span> <span class=\"bp\">×</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>you probably actually want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">monomial_matrix</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span>  <span class=\"c1\">-- lean does `mk :: ` automatically</span>\n<span class=\"c1\">-- is `(mat j).2` the column number containing `(mat j).1` in row `j`,</span>\n<span class=\"c1\">-- or the row number containing ... in column `j`?</span>\n</code></pre></div>\n<p>where I would guess <code>def s [ring R] (i : nat) : monomial_matrix ℤ R</code></p>",
        "id": 287885229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656521794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/287885018\">said</a>:</p>\n<blockquote>\n<p>I think probably the way to do this is handle the cases when <code>j</code> is <code>(i+2)</code>, <code>(i+1)</code>, <code>i</code>, <code>-i</code>, <code>-(i+1)</code>, <code>-(i+2)</code> separately</p>\n</blockquote>\n<p>Mathematically yes, and the claim is easy to check by hand. However, is there a more automated way?</p>",
        "id": 287887119,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656522630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/287885229\">said</a>:</p>\n<blockquote>\n<p>Based on your comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- A lifting of simple refelection is a map int -&gt; R × int</span>\n<span class=\"kd\">structure</span> <span class=\"n\">monomial_matrix</span>  <span class=\"o\">:=</span>\n<span class=\"n\">mk</span>  <span class=\"o\">::</span>  <span class=\"o\">(</span><span class=\"n\">mat</span><span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">int</span> <span class=\"bp\">×</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>you probably actually want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">monomial_matrix</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mat</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span>  <span class=\"c1\">-- lean does `mk :: ` automatically</span>\n<span class=\"c1\">-- is `(mat j).2` the column number containing `(mat j).1` in row `j`,</span>\n<span class=\"c1\">-- or the row number containing ... in column `j`?</span>\n</code></pre></div>\n<p>where I would guess <code>def s [ring R] (i : nat) : monomial_matrix ℤ R</code></p>\n</blockquote>\n<p>Thanks for the improvement.  <code>(mat j).2</code> is the row number containing <code>(mat j).1</code>  in column <code>j</code> (by viewing a vector as a column vector).</p>",
        "id": 287887743,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656522900
    },
    {
        "content": "<blockquote>\n<p>However, is there a more automated way?</p>\n</blockquote>\n<p>I recommend first writing the five lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"n\">j</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 287888518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656523265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/287888518\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>However, is there a more automated way?</p>\n</blockquote>\n<p>I recommend first writing the five lemmas:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"n\">j</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>First two are simple:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ip_ne_i</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span> <span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The third one is not easy already, I am run into the trouble to prove that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">neq_ii</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">):</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">≠</span>  <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The whole thing is not difficult mathematically. My feeling is that the definition of <code>s</code> and <code>monomial_matrix</code> is not good.</p>",
        "id": 287964291,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656553503
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic#linarith</a> can solve that</p>",
        "id": 287989058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656575878
    },
    {
        "content": "<p>If you want to know how to do it manually,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">neq_ii</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">):</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">≠</span>  <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">neg_add</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_iff_add_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287989326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656576023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/287989326\">said</a>:</p>\n<blockquote>\n<p>If you want to know how to do it manually,</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">neq_ii</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">):</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">≠</span>  <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">neg_add</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_iff_add_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks.<br>\n<code>linarith</code> works perfectly. <br>\nBut it seems I have to supply a big set of all such kinds of inequalities to <code>simp</code>. Is it possible to automate the process? For example, apply linarith on all the hypothesis?</p>",
        "id": 288114096,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656644681
    },
    {
        "content": "<p>Is <code>any_goals { linarith }</code> what you are looking for?</p>",
        "id": 288118497,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656649293
    },
    {
        "content": "<p>If you want to use a tactic on all side-goals generated by the application of one tactic, you can also use <code>;</code>.  For instance,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic1</span><span class=\"bp\">;</span>\n<span class=\"n\">tactic2</span>\n</code></pre></div>\n<p>means \"use <code>tactic2</code> on all goals that <code>tactic1</code> produces\".</p>",
        "id": 288119766,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656650436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/288118497\">said</a>:</p>\n<blockquote>\n<p>Is <code>any_goals { linarith }</code> what you are looking for?</p>\n</blockquote>\n<p>Is it  possible to make Lean to <code>reduce</code> the expression of the both sides of the equation? just like <code>#reduce</code> can do ? </p>\n<p>For example using <code>#reduce</code> I got </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"o\">((</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>      <span class=\"c1\">-- (eps.neg.mul -[1+ 0], v.p 1)</span>\n</code></pre></div>\n<p>But is I would like to <code>proof</code> the statement <code>((t 1) * (t 1)).mat (v.p 1)  = (eps, v.p 1)</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">],</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What I can get is the following big chunk of unsolved goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">eps</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">({</span><span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">bb</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n                 <span class=\"n\">v.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v.n</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">))</span>\n                   <span class=\"n\">bb</span><span class=\"o\">}</span> <span class=\"bp\">*</span>\n       <span class=\"o\">{</span><span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">bb</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n                 <span class=\"n\">v.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v.n</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">))</span>\n                   <span class=\"n\">bb</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">mat</span>\n      <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 288181522,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656687861
    },
    {
        "content": "<p>Can you post an updated MWE so people can try things out?</p>",
        "id": 288182394,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656688305
    },
    {
        "content": "<p>Does <code>refl</code> work to prove the equality with the output of reduce?</p>",
        "id": 288182447,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656688323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/288182394\">said</a>:</p>\n<blockquote>\n<p>Can you post an updated MWE so people can try things out?</p>\n</blockquote>\n<p>I rewrote the code so it is different from the original one. <br>\nThe last example is where I got stuck. Thanks. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- Basis of the vector space V_l</span>\n<span class=\"c1\">-- The basis is v^±_0 , v^±_1 , ⋯, v^\\pm_l</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span>  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span>  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">v.p</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">bb</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">v.p</span> <span class=\"mi\">1</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">bb</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">v.n</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Monomail matrix by specify the value at the basis vector</span>\n<span class=\"kd\">structure</span> <span class=\"n\">monomial_matrix</span>  <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">mat</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">int</span> <span class=\"bp\">×</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- indentity matrix</span>\n<span class=\"kd\">def</span> <span class=\"n\">id_mat</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">mat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">))}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">mat_mul</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">wp</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">monomial_matrix</span> <span class=\"o\">:=</span>  <span class=\"n\">monomial_matrix.mk</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">wp_j</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">wp.mat</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"n\">w_wp_j</span><span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">w.mat</span> <span class=\"n\">wp_j.2</span><span class=\"o\">)</span>\n          <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">w_wp_j.1</span> <span class=\"bp\">*</span> <span class=\"n\">wp_j.1</span><span class=\"o\">,</span> <span class=\"n\">w_wp_j.2</span><span class=\"o\">))</span>\n\n<span class=\"kd\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"o\">:=</span> <span class=\"n\">mat_mul</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">(</span><span class=\"n\">eps</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- def eps := 1</span>\n\n<span class=\"c1\">-- attribute [reducible]</span>\n<span class=\"c1\">-- def t_map (i : nat) (bb : v) : int × v :=</span>\n<span class=\"c1\">--  v.cases_on bb (λ j, if   j= i then (-1, v.n i) else (1, bb))</span>\n<span class=\"c1\">--   (λ j, if j = i then (-eps, v.p i) else (1, bb))</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">mat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">bb</span><span class=\"o\">,</span> <span class=\"n\">v.cases_on</span> <span class=\"n\">bb</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span>   <span class=\"n\">j</span><span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v.n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">v.p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">))</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">eps_map</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bb</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">×</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"n\">v.cases_on</span> <span class=\"n\">bb</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">))</span>\n\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">eps_mat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monomial_matrix</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">mat</span> <span class=\"o\">:=</span>   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">bb</span><span class=\"o\">,</span> <span class=\"n\">v.cases_on</span> <span class=\"n\">bb</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">bb</span><span class=\"o\">))</span>\n    <span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n<span class=\"k\">#reduce</span>  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v.n</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.n</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#reduce</span> <span class=\"o\">((</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- example (l: nat) (hl: l=1 ): ((t l) * (t l)).mat (v.p l)  = (eps_mat l).mat (v.p l)</span>\n<span class=\"kd\">example</span>  <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">v.p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288193301,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656692520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20evaluate.20.20ite.3F/near/288182447\">said</a>:</p>\n<blockquote>\n<p>Does <code>refl</code> work to prove the equality with the output of reduce?</p>\n</blockquote>\n<p>no. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 288193943,
        "sender_full_name": "Ma, Jia-Jun",
        "timestamp": 1656692773
    },
    {
        "content": "<p>You should be adding lemmas in the style of the ones I suggested before</p>",
        "id": 288196313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656693727
    },
    {
        "content": "<p>Don't start writing lemmas about multiplication until you've written the basic lemmas about <code>t</code></p>",
        "id": 288196335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656693742
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">t_mat_p_eq</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v.n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">t_mat_n_eq</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">eps</span><span class=\"o\">,</span> <span class=\"n\">v.p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">t_mat_p_ne</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.p</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v.p</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">t_mat_n_ne</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mat</span> <span class=\"o\">(</span><span class=\"n\">v.n</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v.n</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 288196932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656693981
    }
]