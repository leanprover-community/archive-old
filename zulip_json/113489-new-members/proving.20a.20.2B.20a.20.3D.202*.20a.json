[
    {
        "content": "<p>I'm trying to prove the shocking lemma ∀ n : ℕ, n + n = 2*n , how do i tell lean to unfold the definition of *?</p>",
        "id": 154909221,
        "sender_full_name": "Atze van der Ploeg",
        "timestamp": 1547204035
    },
    {
        "content": "<p>you don't; you just tell Lean what you want it to unfold to</p>",
        "id": 154909512,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547204371
    },
    {
        "content": "<p>There's a lemma <code>nat.mul_succ</code></p>",
        "id": 154909517,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547204380
    },
    {
        "content": "<p>You can use <code>simp only [(*)]</code>. This will unfold the notation, then you'll have to deal with the definition <code>nat.mul</code>.</p>",
        "id": 154909526,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547204401
    },
    {
        "content": "<p>Sorry, <code>nat.succ_mul</code></p>",
        "id": 154909570,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547204405
    },
    {
        "content": "<p>You can unfold that with the same method, or <code>unfold nat.mul</code>, but since it's defined by recursion on <code>n</code>, you'll have to use induction first.</p>",
        "id": 154909583,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547204424
    },
    {
        "content": "<p>You can't actually unfold multiplication in this scenario, since it's defined by recursion on the second argument.</p>",
        "id": 154909621,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547204477
    },
    {
        "content": "<p>well I imagined he would do induction on <code>n</code></p>",
        "id": 154909625,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547204493
    },
    {
        "content": "<p>Thanks, nat.succ_mul works fine, or using mul_comm but this requires me to know that nat.mul is defined by recursively on the second argument.</p>",
        "id": 154912689,
        "sender_full_name": "Atze van der Ploeg",
        "timestamp": 1547208339
    },
    {
        "content": "<p>You can just use the 'ring' tactic if you don't care about what the low level proof looks like</p>",
        "id": 154913474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547209419
    },
    {
        "content": "<p>There's also <code>two_mul</code> in the standard library:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">two_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 154936758,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1547232037
    }
]