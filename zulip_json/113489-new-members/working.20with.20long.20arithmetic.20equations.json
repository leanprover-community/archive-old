[
    {
        "content": "<p>Say I have a goal which looks like a * x1 + a * x2 + a * x3 + ... a * x100 = b</p>\n<p>What is the best way to group two specific terms? (eg: say I want to group x8 and x11 into a * (x8 + x11))</p>",
        "id": 279227572,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650210701
    },
    {
        "content": "<p>You can state the equality you want and let <code>abel</code> do it for you.</p>",
        "id": 279227667,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650210780
    },
    {
        "content": "<p>what is abel?</p>",
        "id": 279228416,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650211736
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#abel\">tactic#abel</a></p>",
        "id": 279228426,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650211762
    },
    {
        "content": "<p>I think Matei is using Lean 4 though. Is <code>abel</code> available in Mathlib4?</p>",
        "id": 279228485,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650211826
    },
    {
        "content": "<p>Not to my or doc-gen4's knowledge</p>",
        "id": 279228500,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650211868
    },
    {
        "content": "<p>You can use Kyle's trick with <code>simp [Nat.add_comm, Nat.add_assoc, Nat.add_left_comm]</code> to get an equation to its normal form</p>",
        "id": 279228550,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650211922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> that trick doesn't seem to help here</p>",
        "id": 279228574,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650211960
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 279228581,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650211973
    },
    {
        "content": "<p>Don't think this is going to help, but <a href=\"https://github.com/Mateiadrielrafael/lean-sandbox/blob/main/LeanSandbox/Integers.lean#L195\">here you go</a> <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span></p>",
        "id": 279228655,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650212110
    },
    {
        "content": "<p>Ah, I had misread your first post, sorry</p>",
        "id": 279229034,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650212694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486803\">@Matei Adriel</span> here's a smaller problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">multiplyRawInts.respects</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">xz</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">yw</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">~</span> <span class=\"n\">w</span><span class=\"o\">):</span> <span class=\"n\">multiplyRawInts</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">multiplyRawInts</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eqv.sound</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">eqv</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Nat.subtract_to_equation_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">y.pos</span> <span class=\"bp\">*</span> <span class=\"n\">z.neg</span> <span class=\"bp\">+</span> <span class=\"n\">y.pos</span> <span class=\"bp\">*</span> <span class=\"n\">z.pos</span> <span class=\"bp\">+</span> <span class=\"n\">x.neg</span> <span class=\"bp\">*</span> <span class=\"n\">w.pos</span> <span class=\"bp\">+</span> <span class=\"n\">x.pos</span> <span class=\"bp\">*</span> <span class=\"n\">w.pos</span><span class=\"o\">)</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">*</span> <span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x.2</span> <span class=\"bp\">*</span> <span class=\"n\">y.2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z.2</span> <span class=\"bp\">*</span> <span class=\"n\">w.1</span> <span class=\"bp\">+</span> <span class=\"n\">z.1</span> <span class=\"bp\">*</span> <span class=\"n\">w.2</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n        <span class=\"n\">z.1</span> <span class=\"bp\">*</span> <span class=\"n\">w.1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z.2</span> <span class=\"bp\">*</span> <span class=\"n\">w.2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x.2</span> <span class=\"bp\">*</span> <span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"n\">x.1</span> <span class=\"bp\">*</span> <span class=\"n\">y.2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 279229417,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650213330
    },
    {
        "content": "<p>Can you clear that <code>sorry</code> out?</p>",
        "id": 279229466,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650213370
    },
    {
        "content": "<p>ok, smaller problem - how do I \"exit\" conv mode? (and get back to the bigger goal)</p>",
        "id": 279229737,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650213842
    },
    {
        "content": "<p>By moving to the next higher indentation level</p>",
        "id": 279229782,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650213864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> I can't seem to get that to work. Can you provide me an example?</p>",
        "id": 279229863,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650213989
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">left</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n    <span class=\"n\">right</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>if you hover your cursor on the sorry you will see you are out of conv mode</p>",
        "id": 279229958,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650214168
    },
    {
        "content": "<p>oh, I was confused because I was hovering on the indentation before the sorry...</p>",
        "id": 279230015,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650214219
    },
    {
        "content": "<p>Ok, I was able to finish the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">multiplyRawInts.respects</span><span class=\"o\">:</span> <span class=\"bp\">∀</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">xz</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">yw</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">~</span> <span class=\"n\">w</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">multiplyRawInts</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">multiplyRawInts</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">xz</span> <span class=\"n\">yw</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eqv.sound</span>\n    <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">eqv</span><span class=\"o\">]</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">first</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">xz</span><span class=\"o\">,</span> <span class=\"n\">yw</span><span class=\"o\">]</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">second</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span>\n      <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">yw</span><span class=\"o\">,</span> <span class=\"n\">xz</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">first</span> <span class=\"bp\">⊢</span>\n      <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">first</span> <span class=\"k\">in</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">xz</span><span class=\"o\">]</span>\n      <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">first</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat_ring</span>\n      <span class=\"n\">nat_ring</span>\n      <span class=\"n\">exact</span> <span class=\"n\">first</span>\n\n    <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">second</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nat_ring</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Nat.subtract_to_equation_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n    <span class=\"n\">nat_ring_all</span>\n</code></pre></div>\n<p>quite painful if I may say so myself :)</p>",
        "id": 279290466,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650291631
    },
    {
        "content": "<p>Have you tried to make some usage of <code>simp_arith</code>? It's usually quite helpful in situations like these</p>",
        "id": 279290985,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650292012
    },
    {
        "content": "<p>Assuming you are still using Lean 4, at least I havent heard of these nat_ring tactics yet</p>",
        "id": 279291038,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650292066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/113489-new-members/topic/working.20with.20long.20arithmetic.20equations/near/279291038\">said</a>:</p>\n<blockquote>\n<p>Assuming you are still using Lean 4, at least I havent heard of these nat_ring tactics yet</p>\n</blockquote>\n<p>the nat_ring tactic is just a little macro <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> showed me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"nat_ring\"</span>  <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.left_distrib</span><span class=\"o\">,</span> <span class=\"n\">Nat.right_distrib</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>(ended up adding a few things to the list myself)</p>",
        "id": 279293314,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650293495
    },
    {
        "content": "<p>I'm not sure what simp_arith does - my editor just hangs when I try to use it</p>",
        "id": 279293554,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650293615
    },
    {
        "content": "<p>I eventually get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">simp'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279293589,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650293641
    },
    {
        "content": "<p>well, that's caused by simp_all_arith. simp_arith does work, but it does not solve the goal</p>",
        "id": 279293735,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650293740
    }
]