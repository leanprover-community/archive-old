[
    {
        "content": "<p>In <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.vec_cons\">docs#matrix.vec_cons</a>, we see <code>matrix.vec_cons h t = fin.cons h t</code>. But <code>matrix.vec_cons</code> and <code>fin.cons</code> have different types and behave differently. I understand the type of <code>matrix.vec_cons</code> but not the type of <code>fin.cons</code>. Can anyone explain please? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">matrix.vec_cons</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">fin.cons</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"c1\">-- does not work</span>\n<span class=\"k\">#check</span> <span class=\"n\">fin.snoc</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"c1\">-- does not work</span>\n</code></pre></div>",
        "id": 284499839,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1654013307
    },
    {
        "content": "<p>What does <code>α 0</code> mean in the following type? It seems that it's the type of the first element. But then why don't we take the actual first element as input?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fin.cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">α</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 284501332,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1654013926
    },
    {
        "content": "<blockquote>\n<p>What does α 0 mean in the following type? It seems that it's the type of the first element. </p>\n</blockquote>\n<p>Yes, it does mean that</p>",
        "id": 284506398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654015919
    },
    {
        "content": "<p>The reason that <code>fin.cons w v</code> fails is that lean isn't clever enough to work out what <code>α</code> you meant</p>",
        "id": 284506525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654015959
    },
    {
        "content": "<p><code>@fin.cons _ (\\lam i, α) w v</code> will probably work</p>",
        "id": 284506587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654015983
    }
]