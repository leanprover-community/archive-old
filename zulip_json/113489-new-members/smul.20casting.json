[
    {
        "content": "<p>I think the following is true and should follow easily from the library but I don't yet have a clue about the proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 200199922,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591694872
    },
    {
        "content": "<p>here's an induction proof</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">smul_one</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200200302,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591695113
    },
    {
        "content": "<p>this feels like a simp lemma? <code>\\Z</code> should generalize to an arbitrary ring?</p>",
        "id": 200200776,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591695415
    },
    {
        "content": "<p>Yeah maybe there should be some <code>smul_one</code> simp lemma in some generality.</p>",
        "id": 200201116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591695631
    },
    {
        "content": "<p>I'll take that as evidence that using local attribute [simp] in my local project is not a terrible choice</p>",
        "id": 200201485,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591695895
    },
    {
        "content": "<p>oh my proof already works for generalizing integers to rings</p>",
        "id": 200201638,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591695995
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">smul_one</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200201647,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591696002
    },
    {
        "content": "<p>There was some change recently about some other smul involving naturals, I guess someone who understands that will know whether this affects what's going on here</p>",
        "id": 200201699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591696057
    }
]