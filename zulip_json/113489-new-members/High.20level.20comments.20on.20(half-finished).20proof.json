[
    {
        "content": "<p>Hi! I have been working towards a proof of the Euclid-Euler Theorem, which characterises all even perfect numbers. The proof is quite easy on paper but so far it's been a different story in Lean <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span> (Mostly since I am still quite new). I noticed that the proof does not in mathlib. Where is a good place to put it? Also, maybe once I get more familiar with the codebase, I can contribute to the number theory side, since some elementary things seems missing haha. Anyways, here is what I have. If anyone can give a brief look and see what I should change (apart from formatting / renaming variables), that would be great.</p>",
        "id": 322809873,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674362534
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">TODO: Add copyright information</span>\n<span class=\"cm\">TODO: Add proper documentations</span>\n<span class=\"cm\">TODO: Decide where to put this file</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Additional lemmas added to `src/number_theory/arithmetic_function.lean`:</span>\n\n<span class=\"cm\">lemma sigma_apply_prime_pow {n p k : ℕ} (hp : p.prime) :</span>\n<span class=\"cm\">  σ n (p ^ k) = if n = 0 then k + 1 else ∑ i in range (k + 1), p ^ (i * n) :=</span>\n<span class=\"cm\">by {</span>\n<span class=\"cm\">  split_ifs,</span>\n<span class=\"cm\">  { rw h, exact sigma_zero_apply_prime_pow hp, },</span>\n<span class=\"cm\">  have : p ^ n ≠ 1,</span>\n<span class=\"cm\">  {</span>\n<span class=\"cm\">    simp [(pow_eq_one_iff h).not],</span>\n<span class=\"cm\">    exact prime.ne_one hp,</span>\n<span class=\"cm\">  },</span>\n<span class=\"cm\">  rw [sigma_apply, divisors_prime_pow],</span>\n<span class=\"cm\">  simp [← pow_mul],</span>\n<span class=\"cm\">  exact hp,</span>\n<span class=\"cm\">}</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.arithmetic_function</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.lucas_lehmer</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat.arithmetic_function</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">arithmetic_function</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Below are results leading up to Euclid-Euler Theorem</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- Thank you to Kevin Buzzard, Niels Voss and Yaël Dillies for helping with this!</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mersenne_div</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mersenne</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">mersenne</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">mersenne</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">nat_sub_dvd_pow_sub_pow</span> <span class=\"n\">_</span> <span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- 2^n - 1 is Mersenne prime implies n is prime</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mersenne_theorem</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"o\">(</span><span class=\"n\">mersenne</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Auxillary lemma</span>\n  <span class=\"k\">have</span> <span class=\"n\">two_le_n</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">by_contradiction</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.lt_succ_iff</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h'</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.not_prime_one</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.eq_zero_of_le_zero</span> <span class=\"n\">h'</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">mersenne</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.not_prime_zero</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">one_le_pow_two_n</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.one_le_pow</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- Assume n is composite</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">n_comp</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat.exists_dvd_of_not_prime</span> <span class=\"n\">two_le_n</span> <span class=\"n\">n_comp</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d_div</span><span class=\"o\">,</span> <span class=\"n\">d_ne_one</span><span class=\"o\">,</span> <span class=\"n\">d_ne_n</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">d_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contradiction</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">d_div</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">zero_dvd_iff</span> <span class=\"n\">at</span> <span class=\"n\">d_div</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">one_le_pow_two_d</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat.one_le_pow</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">two_le_d</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">d</span><span class=\"bp\">;</span> <span class=\"n\">omega</span><span class=\"o\">,},</span>\n  <span class=\"k\">have</span> <span class=\"n\">four_sub_one_le_pow_two_sub_one</span><span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">change</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.sub_le_sub_iff_right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pow_le_pow</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">two_le_d</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.one_le_pow</span> <span class=\"n\">d</span> <span class=\"mi\">2</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"c1\">-- Then mersenne n is not prime</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">mersenne_div</span> <span class=\"n\">d_div</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">md</span><span class=\"o\">,</span> <span class=\"n\">hmd</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">nat.prime</span> <span class=\"o\">(</span><span class=\"n\">mersenne</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat.not_prime_mul'</span> <span class=\"n\">hmd.symm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">mersenne</span><span class=\"o\">,</span>\n      <span class=\"k\">calc</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">four_sub_one_le_pow_two_sub_one</span> <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n      <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">md</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"c1\">-- Disproving (mersenne n / mersenne d) = 0</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hmd</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">mersenne</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">mersenne_pos</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"c1\">-- Disproving (mersenne n / mersenne d) = 1</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">mersenne</span> <span class=\"n\">at</span> <span class=\"n\">hmd</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_le_iff</span><span class=\"o\">,</span> <span class=\"n\">nat.lt_one_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hmd</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hmd</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">tsub_left_inj</span> <span class=\"n\">one_le_pow_two_n</span> <span class=\"n\">one_le_pow_two_d</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hmd</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span> <span class=\"n\">at</span> <span class=\"n\">hmd</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.pow_right_injective</span> <span class=\"n\">rfl.ge</span> <span class=\"n\">hmd</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"n\">d_ne_n</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Euclid-Euler Theorem</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">euclid_euler</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">nat.perfect</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat.prime</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- If n is perfect and even, then</span>\n  <span class=\"c1\">-- n = 2^(p - 1) (2^p - 1) and (2^p - 1) is prime</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n_even</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"c1\">-- If (2^p - 1) is prime, then n = 2^(p - 1) (2^p - 1) is perfect and even</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp₁</span><span class=\"o\">,</span> <span class=\"n\">hp₂</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">let</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">n₁_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ne_zero.pos</span> <span class=\"n\">n₁</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">n₂_pos</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.one_le_two_pow</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hp₂</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mersenne_theorem</span> <span class=\"n\">hp₁</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">n₁_even</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n₁</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">n₁</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.even_pow'</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat.prime.two_le</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">n₁.coprime</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"mi\">1</span> <span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">σ</span> <span class=\"mi\">1</span> <span class=\"n\">n₂</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">is_multiplicative.map_mul_of_coprime</span> <span class=\"n\">is_multiplicative_sigma</span> <span class=\"n\">h₂</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">hσ₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">σ</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">sigma_apply_prime_pow</span> <span class=\"n\">nat.prime_two</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">nat.prime.pos</span> <span class=\"n\">hp</span><span class=\"o\">)],</span>\n\n        <span class=\"c1\">-- Why is it so hard to prove (range p).sum (pow 2)?</span>\n        <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">range_succ</span><span class=\"o\">,</span> <span class=\"n\">sum_insert</span><span class=\"o\">,</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">],</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.add_sub_assoc</span> <span class=\"o\">((</span><span class=\"n\">one_le_pow_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">one_le_two</span><span class=\"o\">),</span>\n        <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">ne_zero.ne</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n        <span class=\"n\">exact</span> <span class=\"n\">list.not_mem_range_self</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">hσ₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"mi\">1</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">sigma_one_apply</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.prime.sum_divisors</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">add_comm</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.perfect_iff_sum_divisors_eq_two_mul</span><span class=\"o\">,</span>\n\n      <span class=\"c1\">-- I plan to make evaluating arithmetic functions easier</span>\n      <span class=\"k\">calc</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">n.divisors</span><span class=\"o\">,</span> <span class=\"n\">i</span>\n            <span class=\"bp\">=</span> <span class=\"n\">n.divisors.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"mi\">1</span> <span class=\"n\">n</span>                          <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sigma_one_apply</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"mi\">1</span> <span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">σ</span> <span class=\"mi\">1</span> <span class=\"n\">n₂</span>                 <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">σ</span> <span class=\"mi\">1</span> <span class=\"n\">n₂</span>            <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hσ₁</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n                                                       <span class=\"n\">nat.sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">nat.prime.pos</span> <span class=\"n\">hp</span><span class=\"o\">)]</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>          <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hσ₂</span> <span class=\"n\">n₂</span> <span class=\"n\">hp₁</span><span class=\"o\">]</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span>             <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">n₂</span><span class=\"o\">]</span> <span class=\"o\">,</span>\n                                                     <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.add_sub_assoc</span> <span class=\"n\">n₂_pos</span><span class=\"o\">,</span>\n                                                     <span class=\"n\">rw</span> <span class=\"n\">nat.add_sub_cancel_left</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.pow_div</span><span class=\"o\">,</span>\n                                                     <span class=\"n\">simp</span><span class=\"o\">,</span>\n                                                     <span class=\"n\">left</span><span class=\"o\">,</span>\n                                                     <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"o\">,</span>\n                                                     <span class=\"n\">apply</span> <span class=\"n\">nat.dvd_of_pow_dvd</span><span class=\"o\">,</span>\n                                                     <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">nat.prime.pos</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n                                                     <span class=\"n\">apply</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">,</span>\n                                                     <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">nat.prime.pos</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n                                                     <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>                           <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hp₂</span><span class=\"o\">,</span> <span class=\"n\">ring_exp_eq</span> <span class=\"o\">},</span>\n\n      <span class=\"c1\">-- Prove n &gt; 0</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hp₂</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">ne_zero.pos</span> <span class=\"n\">n₁</span><span class=\"o\">),</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.le_self_pow</span> <span class=\"o\">(</span><span class=\"n\">nat.prime.ne_zero</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"c1\">-- If (2^p - 1) is prime, then n = 2^(p - 1) (2^p - 1) is even</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">nat.even_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">n₁_even</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322809880,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674362545
    },
    {
        "content": "<p>There are a lot of random lemmas flying around since I can't find a way to do them easily or directly<br>\nEdit: I found that it's already implemented in mathlib. Oops.</p>",
        "id": 322809903,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674362597
    },
    {
        "content": "<p>What's the name of the lemma in mathlib?</p>",
        "id": 322853119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674391262
    },
    {
        "content": "<p>How does the mathlib version compare to your version?</p>",
        "id": 322866346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674397578
    },
    {
        "content": "<p>It's inside <code>archives</code>, the 100 problem archives, <a href=\"https://github.com/leanprover-community/mathlib/pull/70\">#70</a></p>",
        "id": 322866455,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674397621
    },
    {
        "content": "<p>Their implementation is way better than mine <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I'm learning from it, they use a lot of <code>simp</code> instead of explicitly <code>rw</code> everywhere</p>",
        "id": 322866553,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674397661
    },
    {
        "content": "<p>The file in question is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/archive/100-theorems-list/70_perfect_numbers.lean\">here</a></p>",
        "id": 322894932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674413176
    },
    {
        "content": "<p>Does mathlib have your <code>mersenne_div</code> (which should be named with <code>dvd</code> not <code>div</code>) or <code>mersenne_theorem</code> (which should be called <code>prime_of_prime_mersenne</code> or similar)?</p>",
        "id": 322895099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674413285
    },
    {
        "content": "<p>The first one exists in a more general form <code>nat_sub_dvd_pow_sub_pow</code>, stating <code>x - y | x^n - y^n</code>.<br>\nThe second one does not exist though, it is quite narrow, as in the theorem doesn't even generalise for base that is not 2, since X - 1 | X^n - 1.</p>",
        "id": 322895540,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674413587
    },
    {
        "content": "<p>I think it's still worth having even though it's a special case; you can't use that lemma without unfolding <code>mersenne</code> first.</p>",
        "id": 322895869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674413808
    },
    {
        "content": "<p>The fact we decided hat <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mersenne\">docs#mersenne</a> was a useful definition (even though it's a \"special case\" of <code>X^n-1</code>) means that we decided it was reasonable to state theorems about this restricted special case</p>",
        "id": 322895961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674413868
    },
    {
        "content": "<p>This theorem should be in mathlib rather than the archive; and it's a shame that archive entries don't show up in generated docs.</p>",
        "id": 322941445,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674450869
    }
]