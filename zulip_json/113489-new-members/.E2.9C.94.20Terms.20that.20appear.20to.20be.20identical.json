[
    {
        "content": "<p>I got a weird error message (lean3, newest mathlib):</p>\n<blockquote>\n<p>invalid type ascription, term has type<br>\n↑n ≠ 0<br>\nbut is expected to have type<br>\n↑n ≠ 0</p>\n</blockquote>\n<p>First I thought, maybe it's lift to different things, but both <code>↑n</code> seem to stand for <code>(n:R)</code>. Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cancel_monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span><span class=\"o\">:</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hx</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">mul_right_cancel₀</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Error:</span>\n  <span class=\"c1\">--     invalid type ascription, term has type</span>\n  <span class=\"c1\">--     ↑n ≠ 0</span>\n  <span class=\"c1\">--     but is expected to have type</span>\n  <span class=\"c1\">--     ↑n ≠ 0</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Same error again...</span>\n  <span class=\"c1\">--     invalid type ascription, term has type</span>\n  <span class=\"c1\">--       y * ↑n = x * ↑n</span>\n  <span class=\"c1\">--     but is expected to have type</span>\n  <span class=\"c1\">--       x * ↑n = y * ↑n</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Does somebody know what I'm missing?</p>",
        "id": 280478635,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1651145364
    },
    {
        "content": "<p><code>[comm_ring R]</code> and <code>[cancel_monoid_with_zero R]</code> give <code>R</code> two different multiplications, ones, and zeros.</p>",
        "id": 280478804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651145455
    },
    {
        "content": "<p>If you write <code>set_option pp.all true</code> above your <code>example</code>, then you'll see what Lean thinks under the hood.</p>",
        "id": 280478852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651145482
    },
    {
        "content": "<p>It will probably show you that the two <code>0</code>s are not the same ones.</p>",
        "id": 280478876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651145498
    },
    {
        "content": "<p>the way to make a <code>comm_ring</code> be a <code>cancel_monoid_with_zero</code> is to use the <code>is_domain</code> typeclass</p>",
        "id": 280478987,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1651145545
    },
    {
        "content": "<p>A good trick is to use <code>convert hy</code> instead of <code>exact hy</code>. It tries to close the goal using <code>hy</code>, but it also creates a new goal showing you what is the difference between <code>hy</code> and your goal.</p>",
        "id": 280479634,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1651145968
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 280480018,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1651146170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Terms.20that.20appear.20to.20be.20identical/near/280478987\">said</a>:</p>\n<blockquote>\n<p>the way to make a <code>comm_ring</code> be a <code>cancel_monoid_with_zero</code> is to use the <code>is_domain</code> typeclass</p>\n</blockquote>\n<p>Thanks that's what I was looking for!</p>",
        "id": 280480291,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1651146324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> has marked this topic as resolved.</p>",
        "id": 280480593,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651146505
    }
]