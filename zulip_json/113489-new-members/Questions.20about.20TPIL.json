[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependent.20Type.20Theory.20Section/near/267835824\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"367659\">ccn</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependent.20Type.20Theory.20Section/near/267818569\">said</a>:</p>\n<blockquote>\n<p>Does it mean pretty much that this is a \"template\" where if you give two propositions, you get a proof of modeus_ponens for those specific <code>Props</code> p and q ?</p>\n</blockquote>\n<p>I'm not sure if thinking about them as \"templates\" is really helpful. <br>\nThe parameters <code>p</code> and <code>q</code> are just \"normal\" parameters, too. The only difference is that all the other parameters (after the comma) are allowed to reference <code>p</code> and <code>q</code>.<br>\nPerhaps this example motivates this better:</p>\n<p><code>array</code> is a type of fixed length arrays (like a list, but with an additional parameter in the type that constrains the size of the array):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">array</span> <span class=\"c1\">--  ℕ → Type u → Type u</span>\n<span class=\"k\">#check</span> <span class=\"n\">array</span> <span class=\"mi\">10</span> <span class=\"n\">int</span> <span class=\"c1\">-- Type u</span>\n\n<span class=\"c1\">-- for comparison:</span>\n<span class=\"k\">#check</span> <span class=\"n\">list</span> <span class=\"c1\">--  Type u → Type u</span>\n<span class=\"k\">#check</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"c1\">-- Type u</span>\n</code></pre></div>\n<p>Let's say you define a function that returns the last item in a given array of integers of length 10:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">array.last</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"mi\">10</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a.read</span> <span class=\"mi\">9</span>\n</code></pre></div>\n<p>Obviously it would would be nice to write this function more generically for all lengths. So we add a parameter <code>n</code> for the length:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">array.last</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a.read</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- this wouldn't actually work exactly like this, but for the example it's ok</span>\n</code></pre></div>\n<p>This is now a dependent function, as the type of <code>a</code> depends on the value <code>n</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">array.last</span> <span class=\"c1\">-- Π (n : ℕ), array n int → int</span>\n</code></pre></div>\n<p>But as you can see <code>n</code> is still just a regular parameter. In fact, we use it in the body of the function.</p>\n</blockquote>\n<p>Your explanation helps, thanks!</p>",
        "id": 267895381,
        "sender_full_name": "ccn",
        "timestamp": 1642092184
    },
    {
        "content": "<p>I'm working on the propositions now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span> <span class=\"n\">The</span> <span class=\"n\">Universal</span> <span class=\"n\">Quantifier</span>\n\n<span class=\"n\">Notice</span> <span class=\"n\">that</span> <span class=\"k\">if</span> <span class=\"n\">α</span> <span class=\"n\">is</span> <span class=\"n\">any</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">can</span> <span class=\"n\">represent</span> <span class=\"n\">a</span> <span class=\"n\">unary</span> <span class=\"n\">predicate</span> <span class=\"n\">p</span> <span class=\"n\">on</span> <span class=\"n\">α</span> <span class=\"n\">as</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"bp\">.</span>\n<span class=\"n\">In</span> <span class=\"n\">that</span> <span class=\"n\">case</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">denotes</span> <span class=\"n\">the</span> <span class=\"n\">assertion</span> <span class=\"n\">that</span> <span class=\"n\">p</span> <span class=\"n\">holds</span> <span class=\"n\">of</span> <span class=\"n\">x.</span>\n<span class=\"n\">Similarly</span><span class=\"o\">,</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">denotes</span> <span class=\"n\">a</span> <span class=\"n\">binary</span> <span class=\"n\">relation</span> <span class=\"n\">on</span> <span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"n\">given</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">denotes</span> <span class=\"n\">the</span> <span class=\"n\">assertion</span> <span class=\"n\">that</span> <span class=\"n\">x</span> <span class=\"n\">is</span> <span class=\"n\">related</span> <span class=\"n\">to</span> <span class=\"n\">y.</span>\n</code></pre></div>\n<p>I just want to make sure \"the assertion that p holds of x\" is not the same as a proof of that assertion right? (because it has type <code>Prop</code>)</p>",
        "id": 267895562,
        "sender_full_name": "ccn",
        "timestamp": 1642092247
    },
    {
        "content": "<p>If you have something of type <code>Prop</code> it is itself a type that represents some mathematical proposition such as that p holds for x, so <code>p x : Prop</code> if you have an element of that type so <code>h : p x</code> you have a proof that <code>p x</code> holds.</p>",
        "id": 267895941,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642092377
    },
    {
        "content": "<p>Since <code>p x</code> is always of type <code>Prop</code> isn't this the same thing as  <code>∀ x : α,  Prop</code> which would be the same as <code>Π x : α, Prop</code> which is just the type <code>α → Prop</code> </p>\n<p><a href=\"/user_uploads/3121/9E4nxlZwZPJ8CIGfdrs_oEYP/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9E4nxlZwZPJ8CIGfdrs_oEYP/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/9E4nxlZwZPJ8CIGfdrs_oEYP/image.png\"></a></div><p>(let me know if I understand it incorrectly)</p>",
        "id": 267897169,
        "sender_full_name": "ccn",
        "timestamp": 1642092832
    },
    {
        "content": "<p>Assuming you are talking about the thing in the red box, then no. You cannot replace something by its type.</p>",
        "id": 267900423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642094063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Questions.20about.20TPIL/near/267900423\">said</a>:</p>\n<blockquote>\n<p>Assuming you are talking about the thing in the red box, then no. You cannot replace something by its type.</p>\n</blockquote>\n<p>Ok, what's in the red box is the type of functions that take in an element of type alpha, and output a proof of <code>p x</code> then?</p>",
        "id": 267901428,
        "sender_full_name": "ccn",
        "timestamp": 1642094483
    },
    {
        "content": "<p>Yes, exactly (where <code>x</code> was the element that was passed in).</p>",
        "id": 267901633,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642094561
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">idea</span> <span class=\"n\">is</span> <span class=\"n\">as</span> <span class=\"n\">follows.</span> <span class=\"n\">If</span> <span class=\"n\">j</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">element</span> <span class=\"n\">of</span> <span class=\"kt\">Sort</span>\n<span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span> <span class=\"n\">In</span> <span class=\"n\">other</span> <span class=\"n\">words</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">dependent</span> <span class=\"n\">functions</span> <span class=\"k\">from</span> <span class=\"n\">α</span> <span class=\"n\">to</span> <span class=\"n\">β</span> <span class=\"bp\">“</span><span class=\"n\">lives</span><span class=\"bp\">”</span>\n<span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"kd\">universe</span> <span class=\"n\">whose</span> <span class=\"n\">index</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">maximum</span> <span class=\"n\">of</span> <span class=\"n\">i</span> <span class=\"n\">and</span> <span class=\"n\">j.</span> <span class=\"n\">Suppose</span><span class=\"o\">,</span> <span class=\"n\">however</span><span class=\"o\">,</span> <span class=\"n\">that</span> <span class=\"n\">β</span>\n<span class=\"n\">is</span> <span class=\"n\">of</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">that</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">an</span> <span class=\"n\">element</span> <span class=\"n\">of</span> <span class=\"kt\">Prop</span><span class=\"bp\">.</span> <span class=\"n\">In</span> <span class=\"n\">that</span> <span class=\"n\">case</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">is</span> <span class=\"n\">an</span>\n<span class=\"n\">element</span> <span class=\"n\">of</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span> <span class=\"n\">as</span> <span class=\"n\">well</span><span class=\"o\">,</span> <span class=\"n\">no</span> <span class=\"n\">matter</span> <span class=\"n\">which</span> <span class=\"n\">type</span> <span class=\"kd\">universe</span> <span class=\"n\">α</span> <span class=\"n\">lives</span> <span class=\"k\">in</span><span class=\"bp\">.</span> <span class=\"n\">In</span> <span class=\"n\">other</span>\n<span class=\"n\">words</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">β</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">proposition</span> <span class=\"n\">depending</span> <span class=\"n\">on</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">is</span> <span class=\"n\">again</span> <span class=\"n\">a</span>\n<span class=\"n\">proposition.</span> <span class=\"n\">This</span> <span class=\"n\">reflects</span> <span class=\"n\">the</span> <span class=\"n\">interpretation</span> <span class=\"n\">of</span> <span class=\"kt\">Prop</span> <span class=\"n\">as</span> <span class=\"n\">the</span> <span class=\"n\">type</span> <span class=\"n\">of</span>\n<span class=\"n\">propositions</span> <span class=\"n\">rather</span> <span class=\"n\">than</span> <span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">what</span> <span class=\"n\">makes</span> <span class=\"kt\">Prop</span> <span class=\"n\">impredicative.</span>\n\n<span class=\"n\">The</span> <span class=\"n\">term</span> <span class=\"bp\">“</span><span class=\"n\">predicative</span><span class=\"bp\">”</span> <span class=\"n\">stems</span> <span class=\"k\">from</span> <span class=\"n\">foundational</span> <span class=\"n\">developments</span> <span class=\"n\">around</span> <span class=\"n\">the</span> <span class=\"n\">turn</span> <span class=\"n\">of</span>\n<span class=\"n\">the</span> <span class=\"n\">twentieth</span> <span class=\"n\">century</span><span class=\"o\">,</span> <span class=\"n\">when</span> <span class=\"n\">logicians</span> <span class=\"n\">such</span> <span class=\"n\">as</span> <span class=\"n\">Poincar</span><span class=\"bp\">é</span> <span class=\"n\">and</span> <span class=\"n\">Russell</span> <span class=\"n\">blamed</span>\n<span class=\"n\">set</span><span class=\"bp\">-</span><span class=\"n\">theoretic</span> <span class=\"n\">paradoxes</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"bp\">“</span><span class=\"n\">vicious</span> <span class=\"n\">circles</span><span class=\"bp\">”</span> <span class=\"n\">that</span> <span class=\"n\">arise</span> <span class=\"n\">when</span> <span class=\"n\">we</span> <span class=\"n\">define</span> <span class=\"n\">a</span>\n<span class=\"n\">property</span> <span class=\"kd\">by</span> <span class=\"n\">quantifying</span> <span class=\"n\">over</span> <span class=\"n\">a</span> <span class=\"n\">collection</span> <span class=\"n\">that</span> <span class=\"n\">includes</span> <span class=\"n\">the</span> <span class=\"n\">very</span> <span class=\"n\">property</span> <span class=\"n\">being</span>\n<span class=\"n\">defined.</span> <span class=\"n\">Notice</span> <span class=\"n\">that</span> <span class=\"k\">if</span> <span class=\"n\">α</span> <span class=\"n\">is</span> <span class=\"n\">any</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">can</span> <span class=\"n\">form</span> <span class=\"n\">the</span> <span class=\"n\">type</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">of</span> <span class=\"n\">all</span>\n<span class=\"n\">predicates</span> <span class=\"n\">on</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"bp\">“</span><span class=\"n\">power</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">α</span><span class=\"bp\">”</span><span class=\"o\">)</span><span class=\"bp\">.</span> <span class=\"n\">The</span> <span class=\"n\">impredicativity</span> <span class=\"n\">of</span> <span class=\"kt\">Prop</span> <span class=\"n\">means</span> <span class=\"n\">that</span>\n<span class=\"n\">we</span> <span class=\"n\">can</span> <span class=\"n\">form</span> <span class=\"n\">propositions</span> <span class=\"n\">that</span> <span class=\"n\">quantify</span> <span class=\"n\">over</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"bp\">.</span> <span class=\"n\">In</span> <span class=\"n\">particular</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">can</span>\n<span class=\"n\">define</span> <span class=\"n\">predicates</span> <span class=\"n\">on</span> <span class=\"n\">α</span> <span class=\"kd\">by</span> <span class=\"n\">quantifying</span> <span class=\"n\">over</span> <span class=\"n\">all</span> <span class=\"n\">predicates</span> <span class=\"n\">on</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">exactly</span>\n<span class=\"n\">the</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">circularity</span> <span class=\"n\">that</span> <span class=\"n\">was</span> <span class=\"n\">once</span> <span class=\"n\">considered</span> <span class=\"n\">problematic.</span>\n</code></pre></div>\n<p>Can someone share an example of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">“</span><span class=\"n\">vicious</span> <span class=\"n\">circles</span><span class=\"bp\">”</span> <span class=\"n\">that</span> <span class=\"n\">arise</span> <span class=\"n\">when</span> <span class=\"n\">we</span> <span class=\"n\">define</span> <span class=\"n\">a</span>\n<span class=\"n\">property</span> <span class=\"kd\">by</span> <span class=\"n\">quantifying</span> <span class=\"n\">over</span> <span class=\"n\">a</span> <span class=\"n\">collection</span> <span class=\"n\">that</span> <span class=\"n\">includes</span> <span class=\"n\">the</span> <span class=\"n\">very</span> <span class=\"n\">property</span> <span class=\"n\">being</span>\n<span class=\"n\">defined</span>\n</code></pre></div>",
        "id": 267902566,
        "sender_full_name": "ccn",
        "timestamp": 1642094940
    },
    {
        "content": "<p>You could start here: <a href=\"https://en.wikipedia.org/wiki/Barber_paradox\">https://en.wikipedia.org/wiki/Barber_paradox</a></p>",
        "id": 267903607,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1642095368
    },
    {
        "content": "<p>Bryan, Is this implying that there is no such thing as order/time in mathematics? Before he shaves himself it's true, after he shaves himself it's false, at no point in <em>time</em> was there a moment when he was the be barber and wasn't the barber?</p>",
        "id": 267918277,
        "sender_full_name": "ccn",
        "timestamp": 1642102105
    },
    {
        "content": "<p>At the moment he touches the blades on his skin he explodes <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>\n<p>But he should have exploded even before that, because he shaves everyone who don't shave themselves</p>",
        "id": 267919043,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642102459
    },
    {
        "content": "<p>You can certainly formalize time in a variant of logic called temporal logic but the logical statements made about the barber and his activities are simply inconsistent.</p>",
        "id": 267919202,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642102538
    },
    {
        "content": "<p>Hi, <br>\nHow we can get openAI API key for using gptf tactics?</p>",
        "id": 270835011,
        "sender_full_name": "Parivash",
        "timestamp": 1644077575
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"459354\">@Parivash</span> you should ask this in the <a class=\"stream\" data-stream-id=\"274007\" href=\"/#narrow/stream/274007-lean-gptf\">#lean-gptf</a> stream instead, or search there for existing answers</p>",
        "id": 270835288,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644077936
    },
    {
        "content": "<p>Actually, I sent email and asked them, but didn't receive answer up to now !</p>",
        "id": 270836017,
        "sender_full_name": "Parivash",
        "timestamp": 1644078889
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/274007-lean-gptf/topic/OpenAI.20gpt-f.20key/near/256739969\">https://leanprover.zulipchat.com/#narrow/stream/274007-lean-gptf/topic/OpenAI.20gpt-f.20key/near/256739969</a>, I think you will have better luck posting in that thread and being patient</p>",
        "id": 270836563,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1644079615
    },
    {
        "content": "<p>thank you Alex!</p>",
        "id": 270836980,
        "sender_full_name": "Parivash",
        "timestamp": 1644080120
    }
]