[
    {
        "content": "<p>Any suggestions in how to make the following prettier?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">select</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">bifunctor.snd</span> <span class=\"o\">(</span><span class=\"n\">list.cons</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">select</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ljt</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">env</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">select</span> <span class=\"n\">env</span> <span class=\"bp\">|</span> <span class=\"n\">alternative.failure</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">var</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span><span class=\"o\">,</span>\n    <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n    <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">env</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 212930908,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602357811
    },
    {
        "content": "<p>I would like to make it more like the Haskell version:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">import</span> <span class=\"nn\">Control.Monad</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Bifunctor</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Term</span>\n    <span class=\"ow\">=</span> <span class=\"kt\">Var</span> <span class=\"kt\">Char</span>\n    <span class=\"o\">|</span> <span class=\"kt\">Impl</span> <span class=\"kt\">Term</span> <span class=\"kt\">Term</span>\n    <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"nf\">ljt</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Term</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Term</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Term</span><span class=\"p\">]</span>\n<span class=\"nf\">ljt</span> <span class=\"n\">env</span> <span class=\"n\">t</span>\n    <span class=\"o\">|</span> <span class=\"n\">elem</span> <span class=\"n\">t</span> <span class=\"n\">env</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"n\">t</span>\n<span class=\"nf\">ljt</span> <span class=\"n\">env</span> <span class=\"p\">(</span><span class=\"kt\">Impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">ljt</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:</span> <span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"n\">b</span>\n<span class=\"nf\">ljt</span> <span class=\"n\">env</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"p\">(</span><span class=\"kt\">Impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">select</span> <span class=\"n\">env</span>\n    <span class=\"kr\">case</span> <span class=\"n\">a</span> <span class=\"kr\">of</span>\n        <span class=\"kt\">Var</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">guard</span> <span class=\"o\">$</span> <span class=\"n\">elem</span> <span class=\"p\">(</span><span class=\"kt\">Var</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">env</span>\n            <span class=\"n\">ljt</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:</span> <span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"n\">t</span>\n        <span class=\"kt\">Impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"ow\">-&gt;</span> <span class=\"kr\">do</span>\n            <span class=\"n\">ljt</span> <span class=\"p\">(</span><span class=\"kt\">Impl</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"kt\">:</span> <span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n            <span class=\"n\">ljt</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:</span> <span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"n\">t</span>\n\n<span class=\"nf\">select</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">])]</span>\n<span class=\"nf\">select</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">second</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">select</span> <span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"nf\">select</span> <span class=\"kt\">[]</span>     <span class=\"ow\">=</span> <span class=\"kt\">[]</span>\n</code></pre></div>",
        "id": 212930954,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602357851
    },
    {
        "content": "<p>It particularly bothers me that <code>if t ∈ env then return t else ...</code> gets written twice in the Lean version.</p>",
        "id": 212930975,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602357902
    },
    {
        "content": "<p>(Also, if anyone has any clue on how to convince Lean that <code>ljt</code> terminates, any help would be highly appreciated. I got it from <a href=\"http://ceur-ws.org/Vol-2271/paper1.pdf\">here</a>)</p>",
        "id": 212931055,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602358014
    },
    {
        "content": "<p>Here's a hack using optional parameters, but it's uglier in another axis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">control.bifunctor</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">select</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">bifunctor.snd</span> <span class=\"o\">(</span><span class=\"n\">list.cons</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">select</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ljt</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">in_env</span> <span class=\"o\">:</span> <span class=\"n\">opt_param</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span><span class=\"o\">)),</span> <span class=\"n\">list</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">env</span> <span class=\"n\">t</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">env</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">env</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">select</span> <span class=\"n\">env</span> <span class=\"bp\">|</span> <span class=\"o\">[],</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">var</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span><span class=\"o\">,</span>\n                  <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n    <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212933151,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602361467
    },
    {
        "content": "<p>Wow. I would have never though of that.</p>",
        "id": 212933974,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602362987
    },
    {
        "content": "<p>Is <code>opt_param</code> used somewhere other than in tactics?</p>",
        "id": 212934019,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602363014
    },
    {
        "content": "<p>It is used in structures to give default values for some arguments, e.g. <code>lt</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/preorder/src\">src#preorder</a></p>",
        "id": 212944169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602381896
    },
    {
        "content": "<p>Assuming you don't care about termination, you can get closer to the haskell version by just doing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ljt</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">env</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">t</span> <span class=\"k\">else</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">select</span> <span class=\"n\">env</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">var</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span><span class=\"o\">,</span>\n      <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n      <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n    <span class=\"kd\">end</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212944354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602382244
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 212975891,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602440473
    },
    {
        "content": "<p>I do care about termination. But the either versions look as far from being easy to convince Lean it terminates as it can be.</p>",
        "id": 212975904,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602440509
    },
    {
        "content": "<p>I thought about it for a while and the termination condition is incredibly complex</p>",
        "id": 212977275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602442817
    },
    {
        "content": "<p>do you have an informal proof of termination?</p>",
        "id": 212977279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602442831
    },
    {
        "content": "<p>I've got an informal proof but I think to convince lean it might take quite a bit of refactoring of <code>ljt</code>, (for instance knowing that the <code>env</code> after the select is the original one minus an element), but I think the maths here is mostly straightforward (plus some standard results about wellorderings which I don't believe are in mathlib)</p>",
        "id": 212981679,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602450384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> By the way, it doesn't seem you've translated the Prolog from the paper completely faithfully.  The cut operator <code>!</code> means to throw out all backtracking for the most recent choice point, and I'm not sure you can do that within the list monad.</p>\n<p>This might be a more faithful rendition of the <code>ljb</code> algorithm (with no guarantees it's correct <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">control.bifunctor</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">select</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">bifunctor.snd</span> <span class=\"o\">(</span><span class=\"n\">list.cons</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">select</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ljb</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">env</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ljb</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">env</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span>\n  <span class=\"k\">let</span> <span class=\"n\">imps</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">env2</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">select</span> <span class=\"n\">env</span> <span class=\"bp\">|</span> <span class=\"o\">[],</span>\n    <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">ljb</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env2</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">env2</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env2</span><span class=\"o\">)</span>\n  <span class=\"k\">in</span> <span class=\"k\">match</span> <span class=\"n\">imps</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n     <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">env2</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ljb</span> <span class=\"n\">env2</span> <span class=\"n\">t</span>\n     <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212982579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602451819
    },
    {
        "content": "<p>It has been a while since I've written the Haskell code, but I am pretty sure <code>!</code> in the Prolog only exists for performance reasons. But again, that was a while ago, so I may be miss remembering it.</p>",
        "id": 212984376,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602454806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Beautify.20code/near/212977279\">said</a>:</p>\n<blockquote>\n<p>do you have an informal proof of termination?</p>\n</blockquote>\n<p>Only a half-baked one.</p>",
        "id": 212984453,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602454951
    },
    {
        "content": "<p>I believe the amount of <code>impl</code>s in <code>env</code> + <code>t</code> can only get smaller or stay the same. I feel like working with <code>finset</code>s could make this clearer (or prove me wrong).</p>",
        "id": 212984522,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602455118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113489-new-members/topic/Beautify.20code/near/212981679\">said</a>:</p>\n<blockquote>\n<p>I've got an informal proof but I think to convince lean it might take quite a bit of refactoring of <code>ljt</code>, (for instance knowing that the <code>env</code> after the select is the original one minus an element), but I think the maths here is mostly straightforward (plus some standard results about well founded relations which I don't believe are in mathlib)</p>\n</blockquote>\n<p>I'd very interested in seeing it.</p>",
        "id": 212984524,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602455133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Beautify.20code/near/212984524\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113489-new-members/topic/Beautify.20code/near/212981679\">said</a>:</p>\n<blockquote>\n<p>I've got an informal proof but I think to convince lean it might take quite a bit of refactoring of <code>ljt</code>, (for instance knowing that the <code>env</code> after the select is the original one minus an element), but I think the maths here is mostly straightforward (plus some standard results about well founded relations which I don't believe are in mathlib)</p>\n</blockquote>\n<p>I'd very interested in seeing it.</p>\n</blockquote>\n<p>Working on the lean version right now :)</p>",
        "id": 212984526,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602455144
    },
    {
        "content": "<p>Is <code>finset</code> a monad? How hard would it be turn it into one?</p>",
        "id": 212984529,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602455157
    },
    {
        "content": "<p>The cut operator is sometimes necessary. I don't think it's necessary here for correctness, but it seems like the run time would be horrendous without it.</p>",
        "id": 212984570,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602455177
    },
    {
        "content": "<p>One of the saddest things about Haskell is that there is no (simple) <code>Set</code> monad.</p>",
        "id": 212984573,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602455187
    },
    {
        "content": "<p>The only real change I made was to wrap up some of the <code>select</code> and sub-<code>ljb</code> code into its own list monad, then truncate it.</p>",
        "id": 212984595,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602455261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Beautify.20code/near/212984529\">said</a>:</p>\n<blockquote>\n<p>Is <code>finset</code> a monad? How hard would it be turn it into one?</p>\n</blockquote>\n<p>I think it already is one -- at least, there's <code>finset.bind</code> if I remember correctly.</p>",
        "id": 212984645,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602455319
    },
    {
        "content": "<p>Actually, according to the docs there isn't a <code>monad</code> instance.  But <code>finset.bind</code> is indeed the right bind operator.</p>",
        "id": 212984665,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602455393
    },
    {
        "content": "<p>Yes, there is one! Wow, I didn't find it while looking for it yesterday. There doesn't seem to be a monad instance (although, it may not be possible since <code>finset.bind : finset α → (α → finset β) → finset β</code> needs <code>[decidable_eq β]</code>).</p>",
        "id": 212984722,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602455435
    },
    {
        "content": "<p>Maybe there is some hack-y way to get <code>do</code> notation...</p>",
        "id": 212984734,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602455474
    },
    {
        "content": "<p>A termination proof can be found here: <a href=\"https://www.cs.cmu.edu/~fp/courses/atp/cmuonly/D92.pdf\">https://www.cs.cmu.edu/~fp/courses/atp/cmuonly/D92.pdf</a> (also <a href=\"https://research-repository.st-andrews.ac.uk/bitstream/handle/10023/16793/Dyckhoff_2018_contraction_free_JSL_1680.pdf\">https://research-repository.st-andrews.ac.uk/bitstream/handle/10023/16793/Dyckhoff_2018_contraction_free_JSL_1680.pdf</a>)</p>",
        "id": 212985441,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602456826
    },
    {
        "content": "<p>alright I've got a working proof, minus the part which in that is referenced to [4], showing that the multiset ordering is wellfounded if the underlying partial order is</p>",
        "id": 212985555,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602456965
    },
    {
        "content": "<p><a href=\"https://gist.github.com/b-mehta/ee89376db987b749bd5120a2180ce3df\">https://gist.github.com/b-mehta/ee89376db987b749bd5120a2180ce3df</a></p>",
        "id": 212985624,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602457095
    },
    {
        "content": "<p>it's pretty messy, I made a similar transformation to what Kyle did, but using Prop instead of bool</p>",
        "id": 212985627,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602457113
    },
    {
        "content": "<p>I don't think this version will compute at all well, but it might give you a better idea of how to prove termination</p>",
        "id": 212985633,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602457130
    },
    {
        "content": "<p>the two main points are to use the dershowitz-manna ordering, and that in the recursive steps you need to have access to the properties of the sub-formulae chosen (which <code>match</code> or <code>select</code> doesn't give you automatically)</p>",
        "id": 212985655,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1602457198
    },
    {
        "content": "<p>If you use <code>Prop</code>, it's pretty trivial to write this without a termination proof, since you can just use an inductive type</p>",
        "id": 212998253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602479089
    },
    {
        "content": "<p>it's probably clearer that way too</p>",
        "id": 212998255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602479097
    },
    {
        "content": "<p>This is a great example where it would be better to write the code first and the termination proof later</p>",
        "id": 212998277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602479158
    },
    {
        "content": "<p>it might be interesting to try applying that general recursion thing that Simon was working on (or using <code>roption</code> directly)</p>",
        "id": 212998331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602479219
    },
    {
        "content": "<p>yay:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">control.bifunctor</span> <span class=\"n\">control.fix</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">select</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"n\">bifunctor.snd</span> <span class=\"o\">(</span><span class=\"n\">list.cons</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">select</span> <span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ljtF</span> <span class=\"o\">(</span><span class=\"n\">ljt</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">roption</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">list</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">roption</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">env</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"k\">else</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">list.join</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">select</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">te</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">te</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">if</span> <span class=\"n\">var</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">env</span> <span class=\"k\">then</span>\n        <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n      <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"o\">(</span><span class=\"bp\">++</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">d</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n           <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n    <span class=\"kd\">end</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ljt</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">roption</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">roption.fix</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">term</span> <span class=\"bp\">×</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">list</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">IH</span> <span class=\"o\">⟨</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩,</span> <span class=\"n\">ljtF</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">env</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">env</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212998995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602480166
    },
    {
        "content": "<p>the monads really don't play well together though</p>",
        "id": 212998997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602480181
    }
]