[
    {
        "content": "<p>In <a href=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html\">https://leanprover.github.io/logic_and_proof/sets_in_lean.html</a>, why</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"err\">∅</span> <span class=\"err\">⊆</span> <span class=\"n\">A</span>  <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>Why do we need <code>x ∈ (∅ : set U)</code> instead of only <code>x ∈ ∅</code>?</p>",
        "id": 176989875,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569892992
    },
    {
        "content": "<p>ops! Answer in few lines below!! Sorry ;-)</p>",
        "id": 176990030,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569893165
    },
    {
        "content": "<p>Almost all theorems from <a href=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html\">https://leanprover.github.io/logic_and_proof/sets_in_lean.html</a> are from Lean2. What is the Lean3 version for <code>take</code>? I suppose that with the definition of <a href=\"https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/library/data/set/basic.lean#L21\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/library/data/set/basic.lean#L21\">ext</a> we could easily redefine the theorems used in this chapter.</p>",
        "id": 176996029,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569895570
    },
    {
        "content": "<p>But that page doesn't contain <code>take</code>...?</p>",
        "id": 176998246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569896152
    },
    {
        "content": "<p><code>take</code> was merged with <code>assume</code> (or <code>fun</code> or <code>\\lam</code>)</p>",
        "id": 176998467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569896200
    },
    {
        "content": "<p>take is used in the lean2 libraries. I need to adapt Chapter 12 from Logic and Proofs to Lean3.</p>",
        "id": 177009290,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569899540
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/library/data/set/basic.lean#L21-L22\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/library/data/set/basic.lean#L21-L22\">https://github.com/leanprover/lean2/blob/227fcad22ab2bc27bb7471be7911075d101ba3f9/library/data/set/basic.lean#L21-L22</a> seems to be very fundamental for all theorems in this file.</p>",
        "id": 177009878,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569899702
    },
    {
        "content": "<p>But the book you linked to looks like it is already Lean 3. Why are you looking at the Lean 2 libraries?</p>",
        "id": 177010817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569899938
    },
    {
        "content": "<p>I'm so confused</p>",
        "id": 177010819,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569899942
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html#some-identities\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html#some-identities\">This example</a> relies on <code>eq_of_subset_of_subset</code> which is in <a href=\"https://github.com/leanprover-community/mathlib/blob/604699b14123e1e9ad93eb48340c31c327d9e70a/src/data/set/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/604699b14123e1e9ad93eb48340c31c327d9e70a/src/data/set/basic.lean\"><code>data.set.basic</code> in mathlib</a>. From Alexandre's link above it looks like it was part of core in Lean 2.</p>",
        "id": 177012078,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569900251
    },
    {
        "content": "<p>I see</p>",
        "id": 177012785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569900428
    },
    {
        "content": "<p>\"Basic set-theoretic notions like these are defined in Lean’s core library, but additional theorems and notation are available in an auxiliary library that we have loaded with the command <code>import data.set</code>, which has to appear at the beginning of a file.\"</p>",
        "id": 177012864,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569900440
    },
    {
        "content": "<p>Anyways, like Mario said, <code>take</code> is <code>assume</code></p>",
        "id": 177013459,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569900591
    },
    {
        "content": "<p>In Lean3 this import doesn’t work. Replaced by <code>import init.data.set</code> it works but those theorems are not available.</p>",
        "id": 177040286,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569924213
    },
    {
        "content": "<p>Logic and Proofs is entirely in Lean 3. Every example should work if you click on the \"try it!\" link, which loads a browser version of Lean 3.4.1 and a very old mathlib. The examples won't work with a current mathlib.</p>",
        "id": 177040880,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569924673
    },
    {
        "content": "<p>Ah , so is it already based on mathlib? The book doesn’t mention it</p>",
        "id": 177041494,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569925205
    },
    {
        "content": "<p>The \"auxiliary library\" in Reid's quote refers to mathlib. It's not mentioned by name, because the book isn't supposed to be about Lean and mathlib. It's about logic and mathematical reasoning and uses Lean to explain these things.</p>",
        "id": 177043899,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569927752
    },
    {
        "content": "<p>I believe the web editor is running off of this repo: <a href=\"https://github.com/leanprover/lean-web-editor\" target=\"_blank\" title=\"https://github.com/leanprover/lean-web-editor\">https://github.com/leanprover/lean-web-editor</a></p>\n<p>You can see in the .toml file which mathlib commit is being used. I'm guessing it's current as of April 30, 2018. <a href=\"https://github.com/leanprover/lean-web-editor/blob/master/combined_lib/leanpkg.toml\" target=\"_blank\" title=\"https://github.com/leanprover/lean-web-editor/blob/master/combined_lib/leanpkg.toml\">https://github.com/leanprover/lean-web-editor/blob/master/combined_lib/leanpkg.toml</a></p>",
        "id": 177044023,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569927885
    },
    {
        "content": "<p>I wonder how hard it be to update the book examples for the last mathlib version</p>",
        "id": 177044849,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569928631
    },
    {
        "content": "<p>It shouldn't be hard. Most of the text doesn't depend on mathlib. Fixing the import statements will take care of a lot of the breakage.</p>",
        "id": 177045162,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569928872
    },
    {
        "content": "<p>Good, if mathlib didn’t change too much, I will try to update the examples</p>",
        "id": 177045423,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569929067
    },
    {
        "content": "<p>Thank you</p>",
        "id": 177045430,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569929073
    },
    {
        "content": "<p>There are complications though. The web editor would have to be updated too. We could point things to the community version at <a href=\"https://leanprover-community.github.io/lean-web-editor\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor\">https://leanprover-community.github.io/lean-web-editor</a> but that one updates mathlib periodically, and in theory these updates could break the L&amp;P examples.</p>",
        "id": 177045598,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569929240
    },
    {
        "content": "<p>You could host a Lean web editor alongside Logic and Proof;</p>",
        "id": 177045677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569929284
    },
    {
        "content": "<p>This is now well documented.</p>",
        "id": 177045684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569929296
    },
    {
        "content": "<p>And it has the added benefit that you can use a stripped down mathlib.</p>",
        "id": 177045698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569929308
    },
    {
        "content": "<p>mathlib has grown a ton since the web editor version and will take much longer to load. The ideal would be to carve out the small part of mathlib that's needed and just put that in a web editor.</p>",
        "id": 177045701,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569929310
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 177045712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569929322
    },
    {
        "content": "<p>But what's the motivation for updating at all? Some imports will match current mathlib instead of mathlib from 18 months ago.</p>",
        "id": 177045840,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569929434
    },
    {
        "content": "<p>It's not a huge difference.</p>",
        "id": 177045854,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569929455
    },
    {
        "content": "<p>If and when we add more Lean sections to L&amp;P, we'll definitely upgrade.</p>",
        "id": 177045865,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569929475
    },
    {
        "content": "<p>I guess the only benefit is for readers who want to try those examples at home.</p>",
        "id": 177045866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569929476
    },
    {
        "content": "<p>Yes. During class I use emacs not the online version. Many students also prefer to work offline (emacs or VSC)</p>",
        "id": 177046297,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569929852
    },
    {
        "content": "<p>But it is not clear to me why the web interface depend on the lib itself</p>",
        "id": 177046366,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569929891
    },
    {
        "content": "<p>It doesn't depend on the lib, but it has to load it if you want to use it.</p>",
        "id": 177046387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569929927
    },
    {
        "content": "<p>And it wants to load a precompiled version, this is already slow enough.</p>",
        "id": 177046409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569929945
    },
    {
        "content": "<p>Ah , I see. I will have to look the code.</p>",
        "id": 177046489,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569930021
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> my confusion about lean2 vs lean3. I though that it was based on lean2 given the missing theorems. But <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> explained that it uses mathlib.</p>",
        "id": 177048766,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569932082
    },
    {
        "content": "<p>It wouldn't be difficult to set up a version of the community web editor with a pinned, minimized version of mathlib for use in L&amp;P. I'm already building a few such bundles for use with some of the Observable notebooks that use Lean.</p>\n<p>Ideally there would be a way to dynamically load libraries into the web editor, but I haven't figured out a decent way of doing this yet.</p>",
        "id": 177057079,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569938111
    },
    {
        "content": "<p>We can just make a branch of mathlib where we remove 80% of the files: a barebones version of mathlib. And the L&amp;P can point to that commit, right?<br>\nIt might be nice if we could automatically add all L&amp;P snippets as tests for mathlib (either on master or the barebones branch).</p>",
        "id": 177062288,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569941243
    },
    {
        "content": "<p>We don't even have to make a new branch of mathlib. If you create a lean package with all the L&amp;P files in <code>src/</code> and with <code>mathlib</code> as a dependency, the bundling script runs <code>lean --make src/</code> so the only <code>.olean</code> files that are generated are those that are required for <code>src/</code> to compile.</p>",
        "id": 177062646,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569941460
    },
    {
        "content": "<p>[Just to parenthetically remark that with my current use case (sending hundreds of undergraduates links to problems which they can solve using the Lean 3.5 web editor) I don't care at all about backwards compatibility and I am absolutely loving the fact that we have an up to date mathlib available like this. Thank you everyone who was involved with this]</p>",
        "id": 177064193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569942388
    },
    {
        "content": "<p>Still talking about sets. In <a href=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/sets_in_lean.html\">https://leanprover.github.io/logic_and_proof/sets_in_lean.html</a>, exercise 2 introduces the notation <code>⦃x⦄</code> that seems to be related to the magic of having <code>disj</code> and <code>A ⊆ B</code> acting as implications. Am I right? I didn't really understand what <code>⦃x⦄</code> means and how/where this magic is defined... Any pointers?</p>",
        "id": 178329098,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1571260775
    },
    {
        "content": "<p>This <code>{| x |}</code> thing -- it is nothing to do with sets.</p>",
        "id": 178330392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571262028
    },
    {
        "content": "<p>It simply means that when you use <code>disj</code>, you don't have to supply the variable <code>x</code>, Lean will supply it for you, except it's a bit more tricky than that...I'll find the reference...</p>",
        "id": 178330440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571262097
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments</a> ;)</p>",
        "id": 178330683,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1571262356
    },
    {
        "content": "<p>I'd just found it when you posted ;-)</p>",
        "id": 178330728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571262374
    },
    {
        "content": "<p>Given an inductive type with finite elements, I want to make a set of some of the elements based on some property. How would you achieve that using functions (because function maps every element to a different object)? Also, what is the introduction rule for sets? The context is that I want to make a set of adjacent vertices of given vertex in a graph. Ultimately I want to find the connected component of the vertex. I'm stuck as to how to approach this.</p>",
        "id": 186636180,
        "sender_full_name": "Harsha Nyapathi",
        "timestamp": 1580069519
    },
    {
        "content": "<p>I'm not sure this answers your questions but maybe its something:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FiniteGraph</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"c1\">-- to remove these lines one must prove that being in a connected component is decidable</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">FiniteGraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">adjacent</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">FiniteGraph</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kn\">structure</span> <span class=\"n\">path</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">edges_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">edges</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span>\n<span class=\"o\">(</span><span class=\"n\">edges_in_graph</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"err\">∈</span> <span class=\"n\">edges</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">adjacent</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_a_path</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">edges</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">edges</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">edges</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span>\n                                                 <span class=\"o\">(</span><span class=\"n\">edges</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">edges</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">connected_component</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n  <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">edges</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"mi\">0</span> <span class=\"n\">sorry</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>        <span class=\"bp\">=</span> <span class=\"n\">v</span>\n                   <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">edges</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">edges_nonempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_connected</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"err\">∈</span> <span class=\"n\">C</span><span class=\"o\">),</span>\n       <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">edges</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"mi\">0</span> <span class=\"n\">sorry</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>        <span class=\"bp\">=</span> <span class=\"n\">v</span>\n                   <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">edges</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">edges_nonempty</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">w</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">connected_component_is_connected</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_connected</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">connected_component</span> <span class=\"n\">F</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"o\">(</span><span class=\"n\">connected_component</span> <span class=\"n\">F</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">using</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- this is the wrong way to prove this I suppose but this is the induction principle</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">FiniteGraph</span>\n</pre></div>\n\n\n<p>I just used a random type <code>V</code> with fintype to assume it is finite, then to define a subset of vertices subject to some condition I make a <code>finset V</code> from the corresponding set, I use classical logic so that I don't have to prove that a subset of a finset is a finset.</p>\n<p>I don't think I understand your question about functions.</p>",
        "id": 186637725,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1580072057
    },
    {
        "content": "<p>Also the last lemma is just a demo, its not even true as we have  a directed graph here and the way I defined paths goes forwards along edges only.</p>",
        "id": 186637808,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1580072186
    }
]