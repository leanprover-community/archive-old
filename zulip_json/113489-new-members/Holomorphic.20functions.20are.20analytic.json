[
    {
        "content": "<p>There are removable singularities, but I did not find this basic result in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.analytic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.removable_singularity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">analytic_at_of_differentiable_on</span> <span class=\"o\">(</span><span class=\"n\">U_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_diff</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">⦃</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">analytic_at</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">complex.analytic_at_of_differentiable_on_punctured_nhds_of_continuous_at</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">|</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">},</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span> <span class=\"n\">univ_mem</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">set.inter_univ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mem_of_superset</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds_iff.mpr</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">f_diff.differentiable_at</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds_iff.mpr</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">f_diff.continuous_on.continuous_at</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds_iff.mpr</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm kind of happy with the statement, but the style of the proof (especially the middle 3 lines) feels like the atrocious attempt at hammering through filters. What is the right way to write this proof? I.e., if a property holds in an open set, it holds on a punctured neighborhood of any point in the set.</p>",
        "id": 282483907,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652701954
    },
    {
        "content": "<p>Ah, I knew I should have asked earlier ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.analytic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.removable_singularity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">analytic_at_of_differentiable_on</span> <span class=\"o\">(</span><span class=\"n\">U_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_diff</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">⦃</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">analytic_at</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">complex.analytic_at_of_differentiable_on_punctured_nhds_of_continuous_at</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">eventually.filter_mono</span> <span class=\"n\">nhds_within_le_nhds</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eventually_of_mem</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds_iff.mpr</span> <span class=\"n\">hz</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span> <span class=\"n\">f_diff.differentiable_at</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds_iff.mpr</span> <span class=\"n\">hw</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">f_diff.continuous_on.continuous_at</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds_iff.mpr</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This feels a little bit better. Am I on the right track?</p>",
        "id": 282484781,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652702513
    },
    {
        "content": "<p>I think you're trying to use too strong theorems, did you see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/differentiable_on.analytic_at\">docs#differentiable_on.analytic_at</a> ?</p>",
        "id": 282485483,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1652702916
    },
    {
        "content": "<p>Ah indeed I had missed it, not sure how <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 282485717,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652703057
    },
    {
        "content": "<p>Then you can do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.cauchy_integral</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">analytic_at_of_differentiable_on</span> <span class=\"o\">(</span><span class=\"n\">U_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_diff</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">⦃</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">analytic_at</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">f_diff.analytic_at</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds</span> <span class=\"n\">hz</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282485958,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1652703214
    },
    {
        "content": "<p>Anatole's answer is of course the right one, but the question of how to avoid fighting against filters is still valid, so let me write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.analytic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.fderiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.removable_singularity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">analytic_at_of_differentiable_on</span> <span class=\"o\">(</span><span class=\"n\">U_open</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_diff</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_on</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">⦃</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">analytic_at</span> <span class=\"n\">ℂ</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">complex.analytic_at_of_differentiable_on_punctured_nhds_of_continuous_at</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">eventually_nhds_within_of_eventually_nhds</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">f_diff.eventually_differentiable_at</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">f_diff.continuous_on.continuous_at</span> <span class=\"o\">(</span><span class=\"n\">U_open.mem_nhds_iff.mpr</span> <span class=\"n\">hz</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282514571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652715999
    }
]