[
    {
        "content": "<p>I would like to get to point where I can start contributing to mathlib but I don't really know where to get started.<br>\nFor the last few months I have been working on lean 3 maths library from scratch (not depending on mathlib) where I've :</p>\n<p>1) proved choice =&gt; zorn<br>\n2) obtained some simple results about commutative rings (existence of maximal ideals,  nilradical is intersection of prime ideals, first iso thm and the prime spectrum is a top space)<br>\n3) did some category theory (path cat of graph, products, colimts, defn of adjoints, wrote a slight unwieldly defn of a sheaf on top space)<br>\n4) plus some other dumb side projects.</p>\n<p>I think I could help with some C*-algebra or Hopf algebra stuff if they aren't too far developed and really like the idea of working on some manifoldy stuff (but I doubt my diff geo courses covered enough for me to be that helpful).  Where do I find what what needs working on and who is working on it?<br>\nThe code I write is pretty mesy (many proofs start me repeatedly barking cases) and there are number of things I don't really understand that well (how to get typeclass inference to play nice with pi types, appropriate precedences for user defined notation, defn tactics , layout of mathlib etc.) so I think I need a fair amount of onboarding.</p>",
        "id": 281551988,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651945433
    },
    {
        "content": "<p>The best way to learn is just to get going with a project. I was talking to someone yesterday who was interested in C* algebras and lean -- here I think that <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> and <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> might know the state of the art.</p>",
        "id": 281552854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651946475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> and <span class=\"user-mention\" data-user-id=\"456962\">@Leo Mayer</span> are working on Hopf algebras and may also welcome an extra pair of hands.</p>",
        "id": 281553126,
        "sender_full_name": "Julian Berman",
        "timestamp": 1651946875
    },
    {
        "content": "<p>Messy code is not a problem. That can always be fixed during PR review, although you're always welcome to ask for tips on Zulip before it gets that far. </p>\n<p>Currently <span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span> and I are in the process of getting Gelfand duality and the continuous functional calculus off the ground, and there's a fair bit of C*-algebra development that has to wait for that. </p>\n<p>I'm in the process of trying to generalize enough of mathlib to handle non-unital rings and algebras, which is proving to be rather a large chore. </p>\n<p>One thing that needs doing: we need to put the c-star norm on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unitization\">docs#unitization</a>, or maybe on a type synonym. </p>\n<p>If you want to know where we're at, some good places to look are <code>analysis/normed_space/star</code> and <code>analysis/normed_space/spectrum</code>.</p>\n<p>Unfortunately, I'll be rather too busy to have time for Lean for about 2-3 weeks, but I'll still be somewhat available on Zulip for questions.</p>",
        "id": 281555035,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651949428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> did I see you (or someone else) added Krein-Milman recently?</p>",
        "id": 281557678,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651953336
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/7288\">#7288</a> for geometric Hahn-Banach and <a href=\"https://github.com/leanprover-community/mathlib/pull/8112\">#8112</a> for Krein-Milman</p>",
        "id": 281557727,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1651953374
    },
    {
        "content": "<p>Have direct sums of banach algebras been implemented? If not where is the right place to put them?</p>",
        "id": 281561727,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651959364
    },
    {
        "content": "<p>A Banach algebra is <code>[normed_field ùïú] [normed_group E] [normed_space ùïú E] [complete_space E]</code>, right?</p>",
        "id": 281561950,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1651959745
    },
    {
        "content": "<p>In that case, yes, it is already implemented and Lean will find all the relevant instances on <code>Œ± ‚äï Œ≤</code> if you have the right imports.</p>",
        "id": 281561967,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1651959793
    },
    {
        "content": "<p>Not that I need it but has this also been done for a generic index set?</p>",
        "id": 281562850,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651961039
    },
    {
        "content": "<p>(Binary) direct sums are <code>Œ± √ó Œ≤</code> not <code>Œ± ‚äï Œ≤</code>, <span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span></p>",
        "id": 281563064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651961349
    },
    {
        "content": "<p>Cameron, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.normed_algebra\">docs#pi.normed_algebra</a> is the version for a finite index set</p>",
        "id": 281563079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651961379
    },
    {
        "content": "<p>I would guess we could do something similar for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a> for a finitely-supported index set, but that's currently missing</p>",
        "id": 281563121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651961411
    },
    {
        "content": "<p>(note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum\">docs#direct_sum</a> is just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a> but with a convolutional multiplication structure)</p>",
        "id": 281563142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651961473
    },
    {
        "content": "<p>I was thinking of the subspace of the product that has finite sup given the sup norm.</p>",
        "id": 281563206,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651961559
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp\">docs#pi_Lp</a></p>",
        "id": 281563547,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651962060
    },
    {
        "content": "<p>This is what you would want I think for non-finite index sets, but I'm not sure if the relevant instances for the multiplicative structure on L- infty exist yet. Perhaps someone else knows.</p>",
        "id": 281563662,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651962187
    },
    {
        "content": "<p>this seems to be for finite indexing sets as well.</p>",
        "id": 281564162,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651962941
    },
    {
        "content": "<p>Right, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_norm\">docs#pi.has_norm</a> (the sup norm) is limited to finite index sets as otherwise it would introduce a different topology to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Pi.topological_space\">docs#Pi.topological_space</a>.</p>",
        "id": 281564227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651963034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>, that definition does not allow p = ‚àû for the sup norm</p>",
        "id": 281564290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651963127
    },
    {
        "content": "<p>Whoops, I thought this is what Heather added a few months ago, and I would have sworn she explicitly handled infinity, but maybe I'm wrong.</p>",
        "id": 281564450,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651963328
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lp\">docs#lp</a></p>",
        "id": 281564480,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651963407
    },
    {
        "content": "<p>Sorry, I picked wrong.</p>",
        "id": 281564501,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651963442
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 281564531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651963453
    },
    {
        "content": "<p>It looks like we don't have the statement that <code>lp</code> over components that are normed algebras is a normed_algebra; Is that what you're asking about <span class=\"user-mention\" data-user-id=\"267705\">@Cameron Torrance</span>? Under what generality is it true?</p>",
        "id": 281564848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651963974
    },
    {
        "content": "<p>I think he just wants L infty, otherwise there is no multiplication.  And it's true over arbitrary index types. If all components are complete, so is L infty.</p>",
        "id": 281565068,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651964299
    },
    {
        "content": "<p>Completeness we already have though. Basically, we just want a <code>has_mul</code> on <code>lp infty</code></p>",
        "id": 281565718,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651965147
    },
    {
        "content": "<p>at the moment I only really need it for the binary product but it will be important later on.</p>",
        "id": 281565733,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651965201
    },
    {
        "content": "<p>And then the rest (normed_ring and normed_algebra) will be easy.</p>",
        "id": 281565736,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651965211
    },
    {
        "content": "<p>Yes, if you're up for it, please have a go at this. Ping me here or on GitHub when it's ready for review.</p>",
        "id": 281565782,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651965248
    },
    {
        "content": "<p>do you have a proof that C^* algebra norms are unique?</p>",
        "id": 281565857,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651965377
    },
    {
        "content": "<p>I'll have a go tomorrow.</p>",
        "id": 281565869,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651965417
    },
    {
        "content": "<p>Not yet. That's a bit hard to state in mathlib, though not impossible. We have Gelfand's formula though.</p>",
        "id": 281566134,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651965812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267705\">@Cameron Torrance</span>, have you already been invited to the mathlib github org? You won't be able to make a PR the right way if not.</p>",
        "id": 281566586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651966520
    },
    {
        "content": "<p>Not yet, I was going to ask about that when I had stuff to send over, I think my github username is Cameron Torrance (I think) . Can't we get away with showing that star isos between C^* algebras are isometric .</p>",
        "id": 281568165,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651968842
    },
    {
        "content": "<p><a href=\"https://github.com/CameronTorrance\">https://github.com/CameronTorrance</a>?</p>",
        "id": 281568552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651969415
    },
    {
        "content": "<p>That would be my preferred way to say it, yes. What we'll want to say is that an injective star algebra hom is isometric. This is how we'll define the spectrum in a way that's meaningful in non-unital algebras (we will define the spectrum of an element in a non-unital algebra to be the spectrum in the unitization, then the isometric property above yields spectral invariance. So the spectrum so-defined is equal no matter how you embed in a unital algebra).</p>",
        "id": 281568699,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651969597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Getting.20involved.20with.20mathlib/near/281568552\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/CameronTorrance\">https://github.com/CameronTorrance</a>?</p>\n</blockquote>\n<p>yeah</p>",
        "id": 281568761,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651969700
    },
    {
        "content": "<p>What I meant about it being hard is that it's hard to state the way it is in a textbook (i.e., if a type has two c-star norms then they coincide)</p>",
        "id": 281568772,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651969733
    },
    {
        "content": "<p><del>I guess that would be stated something like <code>[ring R] : subsingleton (\\sigma [star_ring R], by exactI cstar_ring R)</code>?</del></p>",
        "id": 281568856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651969832
    },
    {
        "content": "<p>Oh yeah, that's super hard to state because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_normed_ring\">docs#non_unital_normed_ring</a> extends ring, and you want to say \"given a fixed ring structure, there's only one norm\"</p>",
        "id": 281568883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651969901
    },
    {
        "content": "<p>Exactly</p>",
        "id": 281568885,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651969919
    },
    {
        "content": "<p>(Are you saying \"given a fixed <code>star</code>\" too?)</p>",
        "id": 281568932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651969939
    },
    {
        "content": "<p>yes</p>",
        "id": 281568946,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1651969979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Getting.20involved.20with.20mathlib/near/281564480\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lp\">docs#lp</a></p>\n</blockquote>\n<p>As an aside; I just updated <a href=\"https://github.com/leanprover-community/doc-gen/pull/163\">doc-gen#163</a> to show the instances that currently exist for <code>lp</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs_demo/analysis/normed_space/lp_space.html#lp\">https://leanprover-community.github.io/mathlib_docs_demo/analysis/normed_space/lp_space.html#lp</a></p>",
        "id": 281569135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651970164
    }
]