[
    {
        "content": "<p>I've been a bit puzzled by the wellfounded recursion definition in Lean, because the logical structure seems to be quite different from the usual mathematical definition. I just want to check if I understand things conceptually correctly. </p>\n<p>The accessibility condition is stated in <code>wf.lean</code> as:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">acc</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">acc</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">acc</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>If we were to (falsely) interpret this as an <em>axiom</em> for <code>acc x</code>, then <code>well_founded</code> would be different from the original definition of well-foundedness, and in fact it wouldn't work: It would be consistent with <code>acc</code> being defined so as to be true for every real number, and where <code>r</code> is the standard ordering on the reals. </p>\n<p>However, what this is instead, is not an axiom for a predicate <code>acc</code>, but rather a rule for which lambda terms are accepted as proofs of <code>acc x</code> (i.e. which terms have type <code>acc x</code>). </p>\n<p>(The following part I'm most uncertain about) Hence by extension this is a definition of a predicate, because we simply state that the predicate is false for any <code>a:\\a</code> for which we cannot construct a proof that it's true. (edit: Actually, I just realized that all of this is intuitionistic logic and the propositions for which we don't have a proof aren't necessarily \"false\". This does make me confused about what such an inductively defined Prop \"means\", or how to think about it clearly).</p>\n<p>In any case, we are getting the same \"effect\" as we do with a well-founded relation in classical mathematics, but the underlying definition seems to be somewhat different: In classical mathematics, we rely on an axiom on <code>r</code> that tells us that there is a minimal element. In Lean, we don't state this by an axiom, but rely on the meta-property of the typing system that it's impossible to construct a proof of this inductively defined Prop without there being a minimal element to \"jumpstart\" this proof. Moreover, in classical mathematics we can conclude that there won't be infinitely decreasing sequences by axiomatizing the minimal element for each set. In Lean, we get the same result directly from the fact that lambda terms must be finite and <code>rec</code> can only do a finite recursion on these proofs.</p>\n<p>Am I correct about how this works in Lean? And am I correct that well-founded recursion in Lean is quite a bit different in this sense to classical well-founded recursion?</p>\n<p>All of this leaves me kind of confused: Why is it so different? It must be related to intuitionistic logic (as I hinted at)? Is there a reason that Lean (or intuitionistic logic in general?) does this, rather than along more classical lines? Is this just to satisfy people who happen to have a preference for intuitionistic logic, or is there some deeper reason why a theorem prover has to do it this way?</p>",
        "id": 206356396,
        "sender_full_name": "Chris M",
        "timestamp": 1596907288
    },
    {
        "content": "<p>I am not sure if you missed it, but <code>acc</code> actually has two parameters, it's not <code>acc x</code>, but rather <code>acc r x</code>.</p>\n<p>And the way how you have to read the inductive defined proposition is something like: Given an <code>x : \\alpha</code>, and given a proof, that <code>forall y, r y x -&gt; acc r y</code> you can conclude <code>acc r x</code>.</p>\n<p>How would you like to define it in a way that it is true for all real numbers? If you consider the empty relation, then yes, you can conclude <code>acc r x</code>, but if you try to use it, you will not have an induction hypothesis. </p>\n<p>Because now your IH is useless. Doing the opposite, proving that the universal relation is well-founded fails. So please provide the definition you would like to use.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">empty_rel</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">wf_empty</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">empty_rel</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">wf_empty</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"c1\">--useless</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">univ_rel</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">wf_univ</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">univ_rel</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"c1\">--doesn&#39;t work</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206358781,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1596911620
    },
    {
        "content": "<p>Yeah I know that its <code>acc r x</code>, I was just sloppy, sorry.</p>\n<p>Regarding this: \"How would you like to define it in a way that it is true for all real numbers?\" I said that that would be the case if we would interpret it (falsely) as an axiom on <code>acc</code> rather than an inductive definition.</p>",
        "id": 206358896,
        "sender_full_name": "Chris M",
        "timestamp": 1596911761
    }
]