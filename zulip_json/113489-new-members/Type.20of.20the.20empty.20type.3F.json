[
    {
        "content": "<p>Beginner here. As I understand it everything in lean has a type. If this is the case then what is the type of the empty type in lean (or type theories more generally)?</p>",
        "id": 177088369,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569957477
    },
    {
        "content": "<p>There are infinitely many empty types. Lean has a hierarchy of type universes <code>Sort 0, Sort 1, Sort 2, ...</code>. You can define an empty inductive type inside any universe. In fact, you can define multiple empty inductive types in the same universe, and you can't prove in Lean that they're equal. The type of an empty type will be <code>Sort i</code> for some <code>i</code>.</p>",
        "id": 177089134,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569958005
    },
    {
        "content": "<p>Alright, so as an example, what is the type of the empty type which is used when defining the negation of a proposition? When we say ¬A is A -&gt; E what is the type of that E?</p>",
        "id": 177089667,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569958346
    },
    {
        "content": "<p>That empty type is named <code>false</code> in Lean. Its type is <code>Sort 0</code>, which also goes by the name <code>Prop</code>.</p>",
        "id": 177089717,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569958393
    },
    {
        "content": "<p>Ahh okay thanks. Also when trying to prove something and you end up with false as a hypothesis then you're done right? How does lean know that false proves everything?</p>",
        "id": 177090348,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569958835
    },
    {
        "content": "<p>Yep. The theorem <code>false.elim</code> is what you need. In tactic mode, if you have <code>h : false</code> you can use <code>cases h</code>.</p>",
        "id": 177090393,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569958897
    },
    {
        "content": "<p>This is the recursion principle for an empty inductive type, btw, which is how Lean \"knows\" it.</p>",
        "id": 177090605,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569959070
    },
    {
        "content": "<p>A variation which is easier to read in tactic mode is: <code>exfalso, exact h</code></p>",
        "id": 177090607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569959073
    },
    {
        "content": "<p>Or <code>contradiction</code></p>",
        "id": 177090684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569959141
    },
    {
        "content": "<p>Or the <code>contradiction</code> tactic is even easier to read.</p>",
        "id": 177090687,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569959144
    },
    {
        "content": "<p>Can you elaborate on how its \"the recursion principle for an empty inductive type\" at all? What does that mena?</p>",
        "id": 177090861,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569959256
    },
    {
        "content": "<p>When you define an inductive type <code>T</code>, you give a list of the ways to construct a term of type <code>T</code>. The recursion principle says how to define a function with domain <code>T</code>. For each constructor, you say what the function should do given a term created with that constructor. This is enough to define a function, since the constructors are the only way to create a term of type <code>T</code>.</p>",
        "id": 177091273,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569959588
    },
    {
        "content": "<p>For an empty type like <code>false</code>,  there are no constructors, so there are no inputs to the recursor. It's a function from <code>false</code> to any type.</p>",
        "id": 177091370,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569959655
    },
    {
        "content": "<p>Recursors are generated automatically when you define an inductive type. For a simple non-degenerate example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">two</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">two</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span>\n</pre></div>\n\n\n<p>You define a function out of the finite type <code>two</code> by saying what the values should be on <code>a</code> and <code>b</code>. Equivalently, you prove a theorem about all terms of type <code>two</code> by proving it for <code>a</code> and proving it for <code>b</code>.</p>",
        "id": 177091715,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569959903
    },
    {
        "content": "<p>Okay, so thats saying youre making a new type called two and that a and b are the only things of type two?</p>",
        "id": 177092045,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569960106
    },
    {
        "content": "<p>And if you added a function as well as the a and b then that would be another way of making a thing of type two?</p>",
        "id": 177092122,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569960140
    },
    {
        "content": "<p>So with the empty type you simply give no constructors and so to prove anything about terms of the empty type you dont need to do anything at all?</p>",
        "id": 177092246,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569960217
    },
    {
        "content": "<p>If thats right then I feel like im getting it, but I dont quite get how that lets you create a function from false to anything at all</p>",
        "id": 177092395,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569960283
    },
    {
        "content": "<p>In order to create a function from A to B, you need to explain where each element of A should go. If there is no element in A then you're done.</p>",
        "id": 177092482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569960348
    },
    {
        "content": "<blockquote>\n<p>Okay, so thats saying youre making a new type called two and that a and b are the only things of type two?</p>\n</blockquote>\n<p>Yep, exactly. <code>a</code> and <code>b</code> are both constructors of the new type <code>two</code>. The constructors or an inductive type are surjective, meaning any term <code>t : two</code> must be either <code>a</code> or <code>b</code>. They're also injective, meaning <code>a ≠ b</code> (unless <code>two</code> is a <code>Prop</code>, but that's another rabbit hole).</p>",
        "id": 177092488,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569960354
    },
    {
        "content": "<blockquote>\n<p>In order to create a function from A to B, you need to explain where each element of A should go. If there is no element in A then you're done.</p>\n</blockquote>\n<p>That makes sence - when doing the false.elim itll create a function from false to whatever im tryin to prove by going through all the possible things which could be false, then realise there are none becasue theres no constructors and so create the function without a problem</p>",
        "id": 177092797,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569960540
    },
    {
        "content": "<blockquote>\n<p>Yep, exactly. <code>a</code> and <code>b</code> are both constructors of the new type <code>two</code>. The constructors or an inductive type are surjective, meaning any term <code>t : two</code> must be either <code>a</code> or <code>b</code>. They're also injective, meaning <code>a ≠ b</code> (unless <code>two</code> is a <code>Prop</code>, but that's another rabbit hole).</p>\n</blockquote>\n<p>How is = even defined for a and b? is it just part of an inductive type that it defines what = means for terms of the type?</p>",
        "id": 177093068,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569960684
    },
    {
        "content": "<p>Also are they any other ways to define types other than by using inductive types?</p>",
        "id": 177093639,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569960963
    },
    {
        "content": "<p>Heh, that's another rabbit hole. Have you read any of Theorem Proving in Lean? (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">https://leanprover.github.io/theorem_proving_in_lean/</a>) Short answer, <code>=</code> is a family of inductive propositions, but that might not mean much to you. It's discussed there in chapter 7.</p>",
        "id": 177093755,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1569961059
    },
    {
        "content": "<p>Haha youre right about it not meaning much. I have had a breif look at it, ill be sure to look at chapter 7 for that explanation</p>",
        "id": 177094014,
        "sender_full_name": "Michael Alan Thompson",
        "timestamp": 1569961213
    }
]