[
    {
        "content": "<p>Hi,<br>\nTPiL states that \"the standard library defines a coercion from subtype <code>{x : α // p x}</code> to <code>α</code> so I would expect the following to work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">tttt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">toto</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">toto&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"n\">tttt</span>\n<span class=\"n\">def</span> <span class=\"n\">titi</span> <span class=\"o\">:</span> <span class=\"n\">toto</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"n\">trivial</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">titi&#39;</span> <span class=\"o\">:</span> <span class=\"n\">toto&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"n\">trivial</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">tata</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">tata</span> <span class=\"n\">titi</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">tata</span> <span class=\"n\">titi&#39;</span><span class=\"o\">)</span>\n<span class=\"kn\">instance</span> <span class=\"n\">tutu</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">toto</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">tata</span> <span class=\"n\">titi</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Unfortunately only the last <code>reduce</code> works, the first one complains that it is expecting a <code>nat</code> and gets a <code>toto</code> instead. Am I misunderstanding the sentence in TPiL?</p>",
        "id": 178832625,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571819343
    },
    {
        "content": "<p>The problem is probably that you renamed the type, and after renaming, a type loses all the instances it has.</p>\n<p>The instance search does not unfold the definition of <code>toto</code> when searching for a coercion.</p>",
        "id": 178833388,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1571820101
    },
    {
        "content": "<p>You can put <code>@[reducible]</code> in front of <code>toto</code> and <code>toto'</code> to make it work.</p>",
        "id": 178833503,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571820207
    },
    {
        "content": "<p>or use <code>abbreviation</code>instead of <code>def</code></p>",
        "id": 178833568,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1571820254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> See also <a href=\"https://github.com/leanprover-community/mathlib/blob/5ed5f59433278367f0b2ceeb7b363d21840a3fc0/test/delta_instance.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/5ed5f59433278367f0b2ceeb7b363d21840a3fc0/test/delta_instance.lean\">https://github.com/leanprover-community/mathlib/blob/5ed5f59433278367f0b2ceeb7b363d21840a3fc0/test/delta_instance.lean</a></p>\n<p>Recently we got some slick method to carry instances over to a \"type wrapper\"</p>",
        "id": 178833743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571820436
    },
    {
        "content": "<p>The thing is, sometimes you want this to happen, sometimes not. Example: if <code>X</code> is an ordered set... then <code>dual X</code> should of course <em>not</em> find the order instance on <code>X</code></p>",
        "id": 178833816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571820486
    },
    {
        "content": "<p>Instead, we want to define a new order, that is opposite to the one on <code>X</code></p>",
        "id": 178833827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571820504
    },
    {
        "content": "<p>But Lean doesn't see any difference between <code>dual</code> and <code>toto</code></p>",
        "id": 178833837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571820519
    },
    {
        "content": "<p>is semi-reducibility explained anywhere in TPIL, or are there examples for where defs are unfolded and where not?</p>",
        "id": 178833926,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1571820609
    },
    {
        "content": "<p>Thanks, I think I see the point. The wording in TPiL is a bit misleading then, it can be read as \"whenever you define a subtype Lean will instantiate the corresponding coercion\", which it doesn't (for good reason).</p>",
        "id": 178834385,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1571821025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 178835090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571821648
    },
    {
        "content": "<blockquote>\n<p>is semi-reducibility explained anywhere in TPIL, or are there examples for where defs are unfolded and where not?</p>\n</blockquote>\n<p>reducible, semireducible, and irreducible are just relative markers. Different components of the system need to decide how hard to try to reduce expressions. Type class inference only unfolds reducible defs, the elaborator typically unfolds reducible and semireducible, the kernel can see through everything. Some tactics (linarith, ring) have options to set how hard they should try to match expressions.</p>",
        "id": 178835715,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571822116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> There is a brief discussion in TPIL of the fact that type class inference doesn't generally unfold definitions:<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference</a><br>\nWould it be helpful to refer to that section somewhere else in the text? Where would you put the reference and what would you say?</p>",
        "id": 178867412,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571845731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> I would suggest re-wording the discussion about the coercion from subtype to Type so not suggest that a definition is made. I'm not sure exactly what the context is for this passage though</p>",
        "id": 178904287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571871017
    },
    {
        "content": "<p>Oh, good. I will say that subtypes have coercions, and then point out that if you define a type to be equal to a subtype, you can explictly make it an instance. Thanks.</p>",
        "id": 178907734,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571874295
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 188882778,
        "sender_full_name": "Ryan Krueger",
        "timestamp": 1582488937
    },
    {
        "content": "<p>If one has to define the coercion themselves (e.g., as Vincent did with </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">tutu</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">toto</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>), what is the point of <code>coe_subtype</code>?</p>",
        "id": 188883085,
        "sender_full_name": "Ryan Krueger",
        "timestamp": 1582489507
    }
]