[
    {
        "content": "<p>I know what the <code>transitivity</code> tactic does, but I want a weaker version of it: if I have a goal <code>a &lt; c</code>, how can I split it into two goals <code>a ≤ b</code> and <code>b &lt; c</code>?</p>",
        "id": 198606845,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590366214
    },
    {
        "content": "<p><code>lt_of_le_of_lt</code></p>",
        "id": 198606884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590366248
    },
    {
        "content": "<p>Wouldn't it be handy if there was a tactic like <code>transitivity</code> for that?</p>",
        "id": 198606958,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590366415
    },
    {
        "content": "<p>How would the tactic know whether you want to reduce to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\leq b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>&lt;</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">b&lt;c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span></span></span>, or to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a&lt;b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>≤</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">b\\leq c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span></span></span>?</p>",
        "id": 198606970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590366460
    },
    {
        "content": "<p>Two tactics! Or some way to toggle between them</p>",
        "id": 198607007,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590366488
    },
    {
        "content": "<p>Is <code>apply lt_of_le_of_lt</code> really that much trouble?</p>",
        "id": 198607009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590366514
    },
    {
        "content": "<p>You could use a calc for this, iirc it supports doing </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"err\">\\</span><span class=\"n\">le</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">blah</span>\n<span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">blah2</span>\n</code></pre></div>",
        "id": 198607012,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590366525
    },
    {
        "content": "<p>If <code>a \\le b</code> and <code>b &lt; c</code> are already in the context (i.e. are assumptions) then the <code>linarith</code> tactic will solve <code>a&lt;c</code>.</p>",
        "id": 198607019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590366585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/partial.20transitivity/near/198607009\">said</a>:</p>\n<blockquote>\n<p>Is <code>apply lt_of_le_of_lt</code> really that much trouble?</p>\n</blockquote>\n<p>how can I make it use <code>b</code> instead of  dummy<code>?m_1</code>?</p>",
        "id": 198607065,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590366636
    },
    {
        "content": "<p>Either tell it <code>b</code> using <code>@</code> or tell it one of the proofs.</p>",
        "id": 198607071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590366687
    },
    {
        "content": "<p>Sorry, I tried and searched around but I just don't know how to use <code>@</code> <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 198607523,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590367664
    },
    {
        "content": "<p>Search engines are not very friendly of symbols, and searching for <code>at symbol</code> did not give me much</p>",
        "id": 198607568,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590367733
    },
    {
        "content": "<p>I would find it nice if I could split it into two goals, but I may end up proving everything before and applying <code>lt_of_le_of_lt</code> then</p>",
        "id": 198607632,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590367883
    },
    {
        "content": "<p>If you post me an example, I'll post a solution</p>",
        "id": 198607677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590367929
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> will tell you all about tricks like <code>@</code></p>",
        "id": 198607681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590367960
    },
    {
        "content": "<p>For some reason, <code>@</code> seems to be explained in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html?highlight=implicit#more-on-sections\">section 6.2</a></p>",
        "id": 198607737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590368120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/partial.20transitivity/near/198607677\">said</a>:</p>\n<blockquote>\n<p>If you post me an example, I'll post a solution</p>\n</blockquote>\n<p>I know how to prove it with <code>apply</code>, I was just wondering if I could use it to split the goal into two goals where the <code>b</code> is a variable I have around, like the <code>transitivity</code> tactic</p>",
        "id": 198607796,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590368169
    },
    {
        "content": "<p>I know, and I'm challenging you to turn it into a little two-line example</p>",
        "id": 198607807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590368195
    },
    {
        "content": "<p>which I'll then show you how to solve</p>",
        "id": 198607809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590368203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/partial.20transitivity/near/198607737\">said</a>:</p>\n<blockquote>\n<p>For some reason, <code>@</code> seems to be explained in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html?highlight=implicit#more-on-sections\">section 6.2</a></p>\n</blockquote>\n<p>Thank you, if I just search for @ in the search box it gives me no results :(</p>",
        "id": 198607816,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590368236
    },
    {
        "content": "<p>The skill of knocking up little minimal working examples is a really important one; it helps people learn to ask much better questions</p>",
        "id": 198607817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590368240
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span><span class=\"o\">,</span> <span class=\"c1\">-- split into two goals?</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198607981,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590368608
    },
    {
        "content": "<p>I know it is stupid to split into two goals here, I'm just asking if it is possible</p>",
        "id": 198607983,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590368637
    },
    {
        "content": "<p>This one is too easy -- you already have the inequalities you want so you can do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198608024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590368683
    },
    {
        "content": "<p>This is the example you want:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198608035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590368713
    },
    {
        "content": "<p>You can use the <code>calc</code> block from above with the parts after the <code>:</code>s replaced by <code>_</code>s, and they will make new goals</p>",
        "id": 198608040,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590368741
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198608084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590368765
    },
    {
        "content": "<p>For the <code>@</code> symbol, see also the end of Section 2.9 (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments</a>).</p>",
        "id": 198608087,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1590368769
    },
    {
        "content": "<p>Following <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> advice, I think this is the most elegant way to do it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">_</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Two goals!</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198608264,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1590369195
    },
    {
        "content": "<p>Writing <code>calc</code> blocks that create multiple goals can be confusing, since it may not be clear which of the new goals is currently active unless you write <code>show</code>.</p>",
        "id": 198608311,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590369308
    },
    {
        "content": "<p>Of course you can just prove the goals along the way :-)</p>",
        "id": 198608354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590369364
    },
    {
        "content": "<p>My 5¢: it would be nice to have an optional (keyword?) argument to <code>transitivity</code> that will allow me to write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">transitivity</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 198630708,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590377074
    },
    {
        "content": "<p>But this \"nice\" is not \"nice\" enough for me to dig into the source of <code>transitivity</code>.</p>",
        "id": 198630774,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590377177
    },
    {
        "content": "<p>Maybe a mathlib issue?</p>",
        "id": 198631948,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590379405
    },
    {
        "content": "<p>You can also write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>or variations with more or less explicitness</p>",
        "id": 198632465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590380294
    }
]