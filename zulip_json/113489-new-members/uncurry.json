[
    {
        "content": "<p>i have been trying to write the uncurry function from exercise 2.10 and i'm having problems with it. I can understand what's wrong with it butI have no idea about what to do. Any help is appreciated.<br>\nCode :<br>\ndef curry {alpha beta gamma : Type} <br>\n(f : (prod alpha beta) -&gt; gamma) : alpha -&gt; beta -&gt; gamma<br>\n:= fun (x : alpha) (y : beta), f (x,y)<br>\n#check curry add1<br>\ndef uncurry {alpha beta gamma : Type}<br>\n(f : alpha -&gt; beta -&gt; gamma) : (prod alpha beta) -&gt; gamma<br>\n:= fun (x : alpha) (y : beta), f x y<br>\nError:<br>\ntype mismatch, term<br>\n  λ (x : alpha) (y : beta), f x y<br>\nhas type<br>\n  alpha → beta → gamma<br>\nbut is expected to have type<br>\n  alpha × beta → gamma</p>",
        "id": 160169316,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1551934415
    },
    {
        "content": "<p>put code in triple backticks for formatting</p>",
        "id": 160169547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551934750
    },
    {
        "content": "<p>The function <code>uncurry f</code> takes a single argument of type <code>prod alpha beta</code>, so you should have <code>fun p : prod alpha beta, ...</code> to start. After that, you can use the projections <code>p.fst</code> and <code>p.snd</code> to extract the parts of type <code>alpha</code> and <code>beta</code> to pass to <code>f</code></p>",
        "id": 160169639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551934890
    },
    {
        "content": "<p>Thanks you so much. It worked.</p>",
        "id": 160169807,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1551935125
    }
]