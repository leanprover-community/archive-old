[
    {
        "content": "<p>can anyone help me prove this lemma for the IVT? I'm very new and don't yet understand much.</p>\n<p>def continuous2 (f:ℝ → ℝ ) := <br>\n∀ x : ℝ, ∀ ε &gt;0, ∃ δ &gt; 0, ∀ y, abs (x-y) &lt;δ → abs (f x - f y) &lt; ε</p>\n<p>lemma continuous_implies {f : ℝ → ℝ} (Hf : continuous2 f)<br>\n {a b : ℝ} (Hab : a &lt; b) (K := {x : ℝ | x&gt;a ∧ x&lt;b ∧ f x &lt; 0}) <br>\n (c:= Sup K):<br>\n f c = 0<br>\n := <br>\n  by_contradiction</p>",
        "id": 195596325,
        "sender_full_name": "adriana",
        "timestamp": 1588093960
    },
    {
        "content": "<p>Tip, to get syntax highlighting, post your code like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">```</span>\n<span class=\"n\">code</span> <span class=\"n\">goes</span> <span class=\"n\">here</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 195596990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588094241
    },
    {
        "content": "<p>It seems that you have too many <code>:=</code> in the lemma</p>",
        "id": 195597059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588094269
    },
    {
        "content": "<p>Or is this some syntax that I do not know???</p>",
        "id": 195597132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588094290
    },
    {
        "content": "<p>This is syntactically correct but not what adriana meant</p>",
        "id": 195597180,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588094319
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">opt_param</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 195597232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094345
    },
    {
        "content": "<p>Yes, this is declaring a default value for K</p>",
        "id": 195597301,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588094386
    },
    {
        "content": "<p>Yeah, the first thing to do is to get the lemma stated correctly.</p>",
        "id": 195597324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094396
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">continuous_implies</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous2</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">&gt;</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span><span class=\"bp\">&lt;</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span> <span class=\"n\">K</span> <span class=\"k\">in</span>\n<span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This compiles but it's horrible</p>",
        "id": 195597521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094481
    },
    {
        "content": "<p>oh -- and it's also not provable</p>",
        "id": 195597562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094495
    },
    {
        "content": "<p>Also, this lemma seems non-obvious to prove if you are so new to Lean that you can't state it.</p>",
        "id": 195597580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588094501
    },
    {
        "content": "<p>because f could be the constant function 1</p>",
        "id": 195597602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094513
    },
    {
        "content": "<p>Yes this will be very hard to prove if you do not know enough Lean to state the lemma.</p>",
        "id": 195597667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094530
    },
    {
        "content": "<p>Oh, I didn't even read everything</p>",
        "id": 195597674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588094534
    },
    {
        "content": "<p>that's because we're mathematicians</p>",
        "id": 195597718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094552
    },
    {
        "content": "<p>we have inbuilt autocorrect</p>",
        "id": 195597733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094559
    },
    {
        "content": "<p>You missed the assumptions f(a) &lt; 0 and f(b) &gt; 0 presumably</p>",
        "id": 195597767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588094570
    },
    {
        "content": "<p>not like those CS people always fussing about details</p>",
        "id": 195597787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094580
    },
    {
        "content": "<p>Especially when the topic is called IVT and this is clearly part of a proof we know...</p>",
        "id": 195597826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588094598
    },
    {
        "content": "<p>Ok, so</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">continuous_implies</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous2</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Ha</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>is more promising</p>",
        "id": 195598063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588094683
    },
    {
        "content": "<p>but still probably much too hard for a complete beginner.</p>",
        "id": 195598107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588094696
    },
    {
        "content": "<p>Using <code>let</code> in the theorem statement makes the goal awful. But it sounds very natural mathematically -- \"Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">f:\\mathbb{R}\\to\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> be a continuous function, and say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a&lt;b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mn>0</mn><mo>&lt;</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">f(a)&lt;0&lt;f(b).</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mord\">.</span></span></span></span> If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∈</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mo>∣</mo><mtext> </mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">K=\\{x\\in(a,b)\\,\\mid\\,f(x)&lt;0\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><mi>S</mi><mi>u</mi><mi>p</mi><mo stretchy=\"false\">(</mo><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">c=Sup(K)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f(c)=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.\" That sounds like a nice maths theorem -- is there a nice way of formalising that in Lean?</p>",
        "id": 195598381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094785
    },
    {
        "content": "<p>So Patrick has avoided introducing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span></span></span> completely.</p>",
        "id": 195598454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094824
    },
    {
        "content": "<p>This is still very much an internal details of the proof. You could have stated the lemma using exists</p>",
        "id": 195598487,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588094840
    },
    {
        "content": "<p>Right -- but it is what people might write on the blackboard</p>",
        "id": 195598518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094856
    },
    {
        "content": "<p>It's like we give away some of our secrets in the theorem statement, rather than just claiming that there exists <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f(c)=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and then packaging away the secret in the proof</p>",
        "id": 195598616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588094890
    },
    {
        "content": "<p>now you're thinking like Lean -- in mathematics the existence remembers the data</p>",
        "id": 195598688,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588094934
    },
    {
        "content": "<p>Kevin, you can still use <code>let</code> in the statement. The proof state will be ok after intro</p>",
        "id": 195598877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588095010
    },
    {
        "content": "<p>You can even <code>intros K c, dsimp [K, c]</code> if you want to be exactly proving my goal.</p>",
        "id": 195599108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588095110
    },
    {
        "content": "<p>Oh I didn't know dsimp would substitute in those <code>let</code> variables</p>",
        "id": 195599475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095252
    },
    {
        "content": "<p>You can also literally introduce variables <code>K</code>, <code>c</code> together with equality hypotheses <code>hK</code>, <code>hc</code>, which looks clumsy, but actually works reasonably well.</p>",
        "id": 195599496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588095262
    },
    {
        "content": "<p>Right -- I'd rather do <code>set</code> than <code>let</code></p>",
        "id": 195599529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095288
    },
    {
        "content": "<p>I mean in the theorem statement.</p>",
        "id": 195599545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588095295
    },
    {
        "content": "<p>Oh I see, so avoid <code>let</code> completely</p>",
        "id": 195599585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095316
    },
    {
        "content": "<p>A literal translation of your \"If\" (rather than \"Let\").</p>",
        "id": 195599597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588095322
    },
    {
        "content": "<p>Right.</p>",
        "id": 195599618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095331
    },
    {
        "content": "<p>There is still the issue that proving IVT was the very last exercise of my 12 weeks long course in formalized maths in Lean for 1st year undergrad.</p>",
        "id": 195599632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588095337
    },
    {
        "content": "<p>how's that real number game going?</p>",
        "id": 195599728,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588095365
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/real-number-game\" title=\"https://github.com/ImperialCollegeLondon/real-number-game\">https://github.com/ImperialCollegeLondon/real-number-game</a></p>\n<p>It's moving!</p>",
        "id": 195599768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280374\">@adriana</span> maybe you can play the natural number game whilst I finish writing the real number game!</p>",
        "id": 195599800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095409
    },
    {
        "content": "<p>Will IVT be the final boss?</p>",
        "id": 195599803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588095411
    },
    {
        "content": "<p>My co-author seems to want to do Riemann integration</p>",
        "id": 195599829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095433
    },
    {
        "content": "<p>so maybe FTC</p>",
        "id": 195599860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095451
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/ImperialCollegeLondon/real-number-game\" title=\"https://github.com/ImperialCollegeLondon/real-number-game\">https://github.com/ImperialCollegeLondon/real-number-game</a></p>\n</blockquote>\n<p>Looks pretty cool!</p>\n<p>BTW, great work on the natural number game, I enjoyed it a lot :)</p>",
        "id": 195602864,
        "sender_full_name": "Steffan",
        "timestamp": 1588096765
    }
]