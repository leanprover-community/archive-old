[
    {
        "content": "<p>Does anyone know what the <code>decidable_eq ℕ</code> instance in core does that allows it to use the syntax <code>match decidable_eq x y with ...</code> in the recursive case? Trying to use it elsewhere gives me an error.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">not_nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">not_nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">not_nat</span> <span class=\"bp\">→</span> <span class=\"n\">not_nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">not_nat</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">not_nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span>     <span class=\"n\">Z</span>     <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">Z</span>       <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span>     <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n  <span class=\"c1\">--   ...</span>\n  <span class=\"c1\">-- type mismatch at application</span>\n  <span class=\"c1\">--   decidable_eq x</span>\n  <span class=\"c1\">-- term</span>\n  <span class=\"c1\">--   x</span>\n  <span class=\"c1\">-- has type</span>\n  <span class=\"c1\">--   not_nat : Type</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">--   Sort ? : Type ?</span>\n</pre></div>",
        "id": 171225878,
        "sender_full_name": "Chris B",
        "timestamp": 1563504787
    },
    {
        "content": "<p>If you look at the tactic state in the error message, you will see that <code>not_nat.decidable_eq</code> is what's in the context, so you have to write it like that</p>",
        "id": 171225997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563504950
    },
    {
        "content": "<p>It's not actually a global definition, it's actually a local constant in disguise (and actually it's not even that, it's a macro disguised as a local constant) so it doesn't work by the same rules w.r.t <code>open</code></p>",
        "id": 171226043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563505010
    },
    {
        "content": "<p>The difference between your example and <code>nat.decidable_eq</code> is that <code>nat.decidable_eq</code> was written inside <code>namespace nat</code> rather than merely with <code>nat</code> open</p>",
        "id": 171226095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563505098
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">not_nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">not_nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">not_nat</span> <span class=\"bp\">→</span> <span class=\"n\">not_nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">not_nat</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">not_nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span>     <span class=\"n\">Z</span>     <span class=\"o\">:=</span> <span class=\"n\">is_true</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">Z</span>       <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span>     <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n    <span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">not_nat</span>\n</pre></div>",
        "id": 171226105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563505128
    },
    {
        "content": "<p>Agh, brutal. I tried some of the qualifiers but definitely not namespace. I'm still trying to get a grasp on how the hierarchical names work in practice. Thanks for the rundown.</p>",
        "id": 171226197,
        "sender_full_name": "Chris B",
        "timestamp": 1563505271
    },
    {
        "content": "<p>I think this is actually more like a bug in the way instance names and auxiliaries are handled, so I don't blame you for getting confused</p>",
        "id": 171226263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563505362
    }
]