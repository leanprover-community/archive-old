[
    {
        "content": "<p>I see a number of comments in my code that a definition of the form:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">allFirsts</span> <span class=\"o\">{</span><span class=\"n\">t1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">t1</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"bp\">×</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n <span class=\"bp\">|</span> <span class=\"n\">AFNil</span> <span class=\"o\">:</span> <span class=\"n\">allFirsts</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n <span class=\"bp\">|</span> <span class=\"n\">AFCons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">fx</span> <span class=\"n\">fy</span> <span class=\"n\">r</span> <span class=\"n\">r&#39;</span><span class=\"o\">,</span> <span class=\"n\">allFirsts</span> <span class=\"n\">r</span> <span class=\"n\">r&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">allFirsts</span> <span class=\"o\">(</span><span class=\"n\">fx</span><span class=\"bp\">::</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">fx</span><span class=\"o\">,</span><span class=\"n\">fy</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">r&#39;</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>can be rewritten as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">allFirsts</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">l2</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">l1</span>\n</pre></div>\n\n\n<p>The second form is not a complete definition.  How can I use this form as a definition?</p>",
        "id": 132926297,
        "sender_full_name": "Ken Roe",
        "timestamp": 1535472418
    },
    {
        "content": "<p><code>def allFirsts {t1 t2} (l1 : list t1) (l2 : list (t1 × t2)) : Prop := l2.map prod.fst = l1</code></p>",
        "id": 132926525,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535472684
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">allFirsts</span> <span class=\"o\">{</span><span class=\"n\">t1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">t1</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"bp\">×</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n <span class=\"bp\">|</span> <span class=\"n\">AFNil</span> <span class=\"o\">:</span> <span class=\"n\">allFirsts</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n <span class=\"bp\">|</span> <span class=\"n\">AFCons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">fx</span> <span class=\"n\">fy</span> <span class=\"n\">r</span> <span class=\"n\">r&#39;</span><span class=\"o\">,</span> <span class=\"n\">allFirsts</span> <span class=\"n\">r</span> <span class=\"n\">r&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">allFirsts</span> <span class=\"o\">(</span><span class=\"n\">fx</span><span class=\"bp\">::</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">fx</span><span class=\"o\">,</span><span class=\"n\">fy</span><span class=\"o\">)</span><span class=\"bp\">::</span><span class=\"n\">r&#39;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"bp\">×</span> <span class=\"n\">t2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">allFirsts</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">l2</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l2</span> <span class=\"k\">with</span> <span class=\"n\">f12</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">allFirsts</span><span class=\"bp\">.</span><span class=\"n\">AFNil</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f12</span> <span class=\"k\">with</span> <span class=\"n\">f1</span> <span class=\"n\">f2</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">allFirsts</span><span class=\"bp\">.</span><span class=\"n\">AFCons</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">l2_ih</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 132926967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535473205
    }
]