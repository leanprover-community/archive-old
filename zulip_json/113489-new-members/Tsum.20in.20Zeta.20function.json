[
    {
        "content": "<p>Hey all, my name is Brandon Werbel. Full disclosure, I'm still a senior in high school, meaning that everything I know after BC Calculus has been self-taught. I stumbled across Lean over the summer and, after making my way through the Natural Numbers Game (kudos by the way, great way of introducing new people to lean), I've started reading through <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">TPL</a>. I've currently finished the first three sections, and have plans to keep going.</p>\n<p>I'm writing a paper for school about Bernoulli Numbers and the Riemann Zeta function, so I thought it would be interesting to practice with lean in this area. Unfortunately, I haven't gotten very far. I want to start by defining the Zeta function for real numbers, but haven't worked with infinite sums at all in lean. Here's all I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">elem</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">zeta</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"n\">elem</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not getting any errors with this, but I'm unable to check that <code>zeta</code> has been implemented the way it should be. I'm especially worried about this because, as I said before, I've never used <code>tsum</code> before and haven't been able to find good examples of it in use. I've tried things like <code>#reduce zeta 2</code>, but keep getting the <code>(deterministic) timeout</code> error. Any thoughts? Thanks in advance!</p>",
        "id": 295498103,
        "sender_full_name": "Brandon Werbel",
        "timestamp": 1661542131
    },
    {
        "content": "<p>You might have stuck on the wrong problem because people here have been thinking about defining the Riemann zeta function for years <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Let me ping <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> who is one of the most knowledgeable people about this.</p>",
        "id": 295501806,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661543594
    },
    {
        "content": "<p>Your definition seems fine to me to define zeta for real <code>x &gt; 1</code>, unfortunately reduce won't really do much useful on definitions such as this. reduce will only really expand the definitions of things, so you'll never see something mathematically non-trivial like <code>zeta 2 = pi^2 / 6</code> or an approximation out of it. All you can really do is try to prove things about it</p>",
        "id": 295502345,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661543828
    },
    {
        "content": "<p>For instance you could try to prove that the function you defined is always positive and decreasing for <code>x &gt; 1</code></p>",
        "id": 295502635,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661543949
    },
    {
        "content": "<p>Using lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_pos\">docs#tsum_pos</a></p>",
        "id": 295502684,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661543971
    },
    {
        "content": "<p>Note that mathlib has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.summable_one_div_nat_rpow\">docs#real.summable_one_div_nat_rpow</a> already</p>",
        "id": 295503192,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661544196
    },
    {
        "content": "<p>That makes sense, wasn't expecting it to see anything like <code>pi ^2 / 6</code> from <code>reduce</code>. I was really more hoping for something like an approximation of the value, something I could check against a calculator to make sure I'm on the right track</p>",
        "id": 295503249,
        "sender_full_name": "Brandon Werbel",
        "timestamp": 1661544217
    },
    {
        "content": "<p>Yup, I also saw the p_series file in mathlib, I'm more working on this as a small challenge for myself to get to know lean better, not to contribute to mathlib</p>",
        "id": 295503761,
        "sender_full_name": "Brandon Werbel",
        "timestamp": 1661544403
    },
    {
        "content": "<p>Thanks for the ideas!</p>",
        "id": 295503937,
        "sender_full_name": "Brandon Werbel",
        "timestamp": 1661544466
    },
    {
        "content": "<p>Yeah I was thinking more that the p-series file would be useful for you, glad you found it already! Unfortunately as far as I know there is no great way to see an approximation of a <code>tsum</code> in Lean, you can switch your definition to a finite sum and compute some values, but that's not always that helpful</p>",
        "id": 295504565,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661544705
    },
    {
        "content": "<p>Awesome, that's good to know! I'll try working with some finite values, thanks!</p>",
        "id": 295504968,
        "sender_full_name": "Brandon Werbel",
        "timestamp": 1661544888
    },
    {
        "content": "<p>You'd be interested in <a href=\"#narrow/stream/116395-maths/topic/Basel.20problem.20.2F.20.CE.B6.282.29/near/285861127\">this thread</a>.</p>",
        "id": 295530395,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661558122
    },
    {
        "content": "<p>I guess it might be quite tricky to do numerical approximations of zeta! <span class=\"user-mention\" data-user-id=\"522826\">@Brandon Werbel</span> for a long time we had a definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> and could prove things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>π</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sin(\\pi)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> but we couldn't even prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>&gt;</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">\\pi&gt;3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>. Lean's way of thinking about things like real numbers defined as infinite sums or zeros of functions is very different to the way numbers are taught in school, where one way of \"understanding\" a number is computing it to 5 decimal places; this is kind of psychological rather than anything else.</p>\n<p>If you wanted to try a cool project then, because for a fixed real <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x&gt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">n^{-x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span> is decreasing in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, one could use some kind of \"integral test\" to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mi>N</mi></mrow></msub><msup><mi>n</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup><mo>≤</mo><msubsup><mo>∫</mo><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><msup><mi>t</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup><mi>d</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{n\\geq N}n^{-x}\\leq \\int_{N-1}^\\infty t^{-x} dt</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1662em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2734em;vertical-align:-0.4142em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0006em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8593em;\"><span style=\"top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2579em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4142em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span></span></span></span>, evaluate this integral and thus prove an explicit error bound for the terms in the sum after some point. Once you have this you can get bounds for the whole sum by summing the first few terms, which should presumably be possible for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> an integer. But Lean is not a calculator! Even if you tried <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1.5</mn></mrow><annotation encoding=\"application/x-tex\">x=1.5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1.5</span></span></span></span> you'd still be stuck with evaluating <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>1.5</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{1.5}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1.5</span></span></span></span></span></span></span></span></span></span></span></span> and as far as I know Lean has no idea what that is. Again you would have to _prove_ anything you want to know about it -- for example you could prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.822</mn><mo>&lt;</mo><msup><mn>2</mn><mn>1.5</mn></msup><mo>&lt;</mo><mn>2.829</mn></mrow><annotation encoding=\"application/x-tex\">2.822&lt;2^{1.5}&lt;2.829</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">2.822</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8532em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1.5</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2.829</span></span></span></span> by squaring both sides:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.pi.bounds</span>\n\n<span class=\"c1\">-- we have to *prove* this, we can't \"compute\" it.</span>\n<span class=\"c1\">-- The real numbers are not a computable object.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">828</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_pow_lt_pow</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">real.rpow_nonneg_of_nonneg</span><span class=\"o\">,</span> <span class=\"c1\">-- powers of &gt;= 0 are &gt;= 0</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- no powers involved any more so the \"normalise numerals\" tactic works</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_nat_cast</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_mul</span><span class=\"o\">,</span> <span class=\"c1\">-- now all the powers are integers</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">829</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_pow_lt_pow</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_nat_cast</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_mul</span><span class=\"o\">,</span> <span class=\"c1\">-- now all the powers are integers</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>As you can see, Lean is not a \"computer\" in the sense that it is not designed to do computations, it's designed to prove theorems! When we switch to Lean 4 I suspect that more people will start thinking about how to make Lean a better computer, but right now it's mostly being used as a prover, and if you're pre-uni then you might well not have seen too many proofs, so it will be interesting to see what you manage to make the system do!</p>",
        "id": 295563878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661590009
    },
    {
        "content": "<p>Okay yeah, that makes sense, that Lean doesn't act as a computer, but a prover. Thanks for explaining it like that, it helps with the way I've been thinking about problems, especially irrational numbers.</p>",
        "id": 295630252,
        "sender_full_name": "Brandon Werbel",
        "timestamp": 1661626299
    }
]