[
    {
        "content": "<p>I'm working my way through the mathlib tutorial, and right around exercise 0040, there's an ominous comment that you can use <code>exists_prop</code> to rewrite the exercise.</p>\n<p>But I don't think that's the case:<br>\n<code>exists_prop {p q : Prop} : (∃ (h : p), q) ↔ p ∧ q</code></p>\n<p>But that only works if the proof <code>p</code> is independent of anything, i.e. a pure proposition. In the exercise, however, the statement is <code>exists n &gt;= N,...</code>. This desugars into the existence of an <code>n</code> and a proof, that <code>n &gt;= N</code>. The latter is value-dependent on <code>n</code>. So you necessarily have a dependent type signature.</p>\n<p>Here's a repro:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">exists_prop</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Am I missing something? This comment just confused me, because when I looked around a bit, the quantifiers seem to be mostly dependent statements, not propositions.</p>",
        "id": 197847930,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589720415
    },
    {
        "content": "<p>The statement <code>n ≥ N</code> is still a <code>Prop</code>. The fact that it depends on <code>n</code> doesn't change this.</p>",
        "id": 197848217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589720783
    },
    {
        "content": "<p>That being said, your example is not relevant, because in that case you would use <code>use</code> which does the <code>exists_prop</code> rewriting for you. A more relevant example would have an assumption having this confusing shape.</p>",
        "id": 197848303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589720934
    },
    {
        "content": "<p>After one <code>use</code>, you get a statement where you can apply <code>exists_prop</code>.</p>",
        "id": 197848318,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589720961
    },
    {
        "content": "<p>In your example you can write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>to see the rewriting happening, but you can replace both lines by <code>use N</code></p>",
        "id": 197848323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589720977
    },
    {
        "content": "<p>oh, does <code>use</code> do this automatically?</p>",
        "id": 197848329,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589720996
    },
    {
        "content": "<p>No Reid, this is not necessary</p>",
        "id": 197848330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589720997
    },
    {
        "content": "<p>Yes</p>",
        "id": 197848331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589721000
    },
    {
        "content": "<p>After one <code>existsi</code>, you get ... <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 197848377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589721015
    },
    {
        "content": "<p>You shouldn't live in the past like that.</p>",
        "id": 197848387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589721029
    },
    {
        "content": "<p>I just use <code>refine</code></p>",
        "id": 197848399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589721044
    },
    {
        "content": "<p>just to be clear, when you <code>refine \\&lt;N, _\\&gt;</code>, you just chose <code>N</code> as your witness, yes?</p>",
        "id": 197848435,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589721119
    },
    {
        "content": "<p>yes</p>",
        "id": 197848682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589721381
    },
    {
        "content": "<p>You can try the code</p>",
        "id": 197848696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589721392
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , I still don't quite see how you'd apply it, sorry. It doesn't matter if I write <code>exists n &gt;= N, n &gt;= N</code> or the way I wrote it. Lean's goal is the same.</p>\n<p>My point being, that since it's a double-exists goal, it's not an instance of <code>exists_prop</code>. </p>\n<p>As such, you need to eliminate one of the exist statements and if you do it using the <code>use</code> tactic, the second exists disappears.</p>\n<p>And of course <code>use</code> is the obvious solution here, but the question was specifically how to use <code>exists_prop</code> in the context of the tutorial. Where you mostly have double-exists.</p>",
        "id": 197848723,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589721444
    },
    {
        "content": "<blockquote>\n<p>That being said, your example is not relevant, because in that case you would use <code>use</code> which does the <code>exists_prop</code> rewriting for you. A more relevant example would have an assumption having this confusing shape.</p>\n</blockquote>",
        "id": 197848795,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589721523
    },
    {
        "content": "<p>And I need to go on family duty, sorry. I'll just add that you can do the whole tutorials without using this lemma, I only added it as a comment for people who are really confused by these double exists</p>",
        "id": 197848821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589721589
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197849059,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589721877
    },
    {
        "content": "<p>I didn't look at the tutorials but I use <code>exists_prop</code> with double exists using <code>simp only [exists_prop]</code>.</p>",
        "id": 197849463,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589722488
    },
    {
        "content": "<p>ah yes. Now that one actually does something... It takes the double exists and eliminates the inner one and makes the statement a conjunction.</p>",
        "id": 197849668,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589722792
    },
    {
        "content": "<p>I think the only really confusing thing is, that apparently in the tutorial the things are not instances of <code>exists_prop</code> so you can't apply it (other than calling simp as you showed, which wasn't taught at that point in the tutorial yet).</p>\n<p>And the assumptions are universally quantified.</p>",
        "id": 197849827,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589722964
    },
    {
        "content": "<p>Also <code>exists_prop</code> isn't used in the solutions, so you can't look up how it could be used.</p>",
        "id": 197849849,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589723025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20.60exists_prop.60/near/197848387\">said</a>:</p>\n<blockquote>\n<p>You shouldn't live in the past like that.</p>\n</blockquote>\n<p>Are you suggesting that one should always use <code>use</code> instead of <code>existsi</code>? I often find <code>use</code> being hundreds of milliseconds slower to achieve the same result<br>\n(if i'm bothered by that level of slowdown, does it mean I should be more lemmas and shorter proofs?)</p>",
        "id": 197856889,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589732790
    },
    {
        "content": "<p>If <code>use</code> misbehaves, I fall back on <code>refine \\&lt;bla, _\\&gt;</code></p>",
        "id": 197857027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589732941
    },
    {
        "content": "<p>I haven't used <code>existsi</code> since <code>use</code> was introduced.</p>",
        "id": 197857037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589732956
    }
]