[
    {
        "content": "<p>Hi. Trying to define an induction principle for finite groups I've run into the following problem. It seems like one cannot introduce an instance in the condition of a lemma. I believe this is to do with Lean not updating the instance cache inside a proof. Is there any way to get this to work (perhaps using some tactics from <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/cache.html#instance-cache-tactics\">here</a>)? I realise I could simply have <code>(hα : has add α)</code> and then provide it manually when it is needed, but I would like to avoid that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"c1\">-- failed to synthesize type class instance for has_add α</span>\n</code></pre></div>",
        "id": 232415748,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617107068
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 232416026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617107200
    },
    {
        "content": "<p>Oh, never thought it'd be that easy. Thanks!</p>",
        "id": 232416297,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617107356
    }
]