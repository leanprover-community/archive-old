[
    {
        "content": "<p>so far i understand that <code>multiplicative ℤ</code> is the additive group on <code>ℤ</code> with <code>1</code> as the identity, <code>*</code> the group operation, <code>^-1</code> the inverse. Then does that mean it has two binary operations, <code>+</code> and <code>*</code>?</p>",
        "id": 248545407,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628202435
    },
    {
        "content": "<p>No, it only has <code>*</code></p>",
        "id": 248545484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628202485
    },
    {
        "content": "<p>in particular, although <code>1 : multiplicative ℤ</code> works, <code>2 : multiplicative ℤ</code> doesn't</p>",
        "id": 248545521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628202523
    },
    {
        "content": "<p>also, your description is wrong. <code>multiplicative ℤ</code> is the multiplicative group on <code>ℤ</code> with an identity written <code>1</code> (which is actually <code>0 : ℤ</code>), a multiplication <code>*</code> (which is actually addition of integers), and <code>^-1</code> the inverse (which is actually negation).</p>",
        "id": 248545662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628202643
    },
    {
        "content": "<p>got it</p>",
        "id": 248545812,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628202759
    },
    {
        "content": "<p><code>multiplicative ℤ</code> should be thought of as a type which is completely different to <code>ℤ</code>. It's just an infinite cyclic group. There are maps between Z and multiplicative Z, and they're isomorphisms, but these are different types.</p>",
        "id": 248545816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628202761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/multiplicative.20set/near/248545521\">said</a>:</p>\n<blockquote>\n<p>in particular, although <code>1 : multiplicative ℤ</code> works, <code>2 : multiplicative ℤ</code> doesn't</p>\n</blockquote>\n<p>why is that</p>",
        "id": 248546058,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628202954
    },
    {
        "content": "<p>because <code>2</code> is <code>1 + 1</code> and <code>+</code> doesn't exist</p>",
        "id": 248546416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628203206
    },
    {
        "content": "<p>oh yeah I said <code>1 : multiplicative ℤ</code> works but it means <code>0 : ℤ</code></p>",
        "id": 248546456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628203257
    },
    {
        "content": "<p>oh i understand</p>",
        "id": 248546771,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628203487
    },
    {
        "content": "<p>In case you haven't already found it, <code>multiplicative.of_add (1 : ℤ)</code> gives you the generator of the infinite cyclic group</p>",
        "id": 248547484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628204079
    },
    {
        "content": "<p>The problem with understanding this mathematically is that the definition of <code>multiplicative X</code> is \"it's <code>X</code>\". This is a very confusing definition for mathematicians because if X already has a 1 (eg if X is the integers) then <code>multiplicative X</code> will now...have two 1s? The way to think about this is that the definition is merely an implementation detail which should be ignored, and <code>multiplicative X</code> should just be regarded as a totally different object to X.</p>",
        "id": 248578660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628233948
    },
    {
        "content": "<p>Another interpretation is that <code>multiplicative X</code> forgets all the structure on <code>X</code> except the additive structure (ie forgets about 1 and *), but then changes that additive structure to use <code>1, (*), ⁻¹, (/), ^</code> as notation instead of <code>0, (+), -,  (-), •</code>.</p>",
        "id": 248580845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628235931
    },
    {
        "content": "<p>Mathematicians are forever telling computer scientists that two things are the same and causing all sorts of problems because if you look at the definitions you find that it's an equiv, not an equality. Here the reverse is true -- you're telling us \"multiplicative X is the same as X except that there is some totally different structure attached to it\" and I think a more helpful perspective is that these things are equiv, and the fact that they are defeq might be convenient for the API writer but is positively confusing for the beginner user.</p>",
        "id": 248582546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628237389
    },
    {
        "content": "<p>If two things are the same then they have the same 1, and this is not happening here. If two things biject with each other then sure they can different 1s</p>",
        "id": 248582657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628237469
    },
    {
        "content": "<p>One issue is that we do not have the correct equiv in mathlib AFAIK: a bijection which sends + to *.</p>",
        "id": 248582755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628237536
    },
    {
        "content": "<p>This is because of the (extraordinary, in my opinion) observation that most natural mathematical constructions between monoids in mathematics are between monoids which share notation for their group law. We even write valuations multiplicatively.</p>",
        "id": 248582900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628237651
    },
    {
        "content": "<p>I think of it a having exactly the same structure with just a notation change, but I'll admit that outlook can be confusing if <code>X</code> already had a multiplicative structure. The \"just a notation change\" outlook is easier to apply to something like <code>multiplicative (fin 3 → ℝ)</code>.</p>",
        "id": 248583016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628237739
    },
    {
        "content": "<p>I'm not sure how much I believe that - I've come across lots of constructions that need <code>multiplicative</code> or <code>additive</code> on one side</p>",
        "id": 248583101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628237793
    },
    {
        "content": "<p>It might be fun to write a metaprogram to count them</p>",
        "id": 248583128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628237823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/multiplicative.20set/near/248583016\">said</a>:</p>\n<blockquote>\n<p>I think of it a having exactly the same structure with just a notation change.</p>\n</blockquote>\n<p>Exactly. But such a thing tends not to happen in paper mathematics or in the lecture theatre (we \"get our notation right the first time\"), so this is why I am encouraging the \"it's a completely different type but canonically isomorphic to X --the map is called <code>of_add</code>\" approach because it will be more familiar to people like Holly who seems to have a mathematical background but is a newcomer to Lean.</p>",
        "id": 248583613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628238189
    },
    {
        "content": "<p>And in fact, you should never just cast from <code>X</code> to <code>multiplicative X</code> in a definition, the right thing to do is always use the canonical map; otherwise you get things that unfold to nonsense like <code>@has_one.one (multiplicative X) X.has_one</code> which puts the original <code>1</code> of <code>X</code> into <code>multiplicative X</code>.</p>",
        "id": 248584104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628238550
    },
    {
        "content": "<p>Here's another way of thinking it: if you asked a mathematician about the relationship between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mo separator=\"true\">,</mo><mo>+</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\mathbb{Z},+)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>C</mi><mi mathvariant=\"normal\">∞</mi></msub><mo separator=\"true\">,</mo><mo>×</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(C_\\infty,\\times)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">×</span><span class=\"mclose\">)</span></span></span></span> (the infinite cyclic group) they would claim that these things were isomorphic (some may even claim something involving the word canonical) but absolutely none of them would suggest that the underlying sets/types were equal, this would be an absurd suggestion from our viewpoint.</p>",
        "id": 248584131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628238578
    },
    {
        "content": "<p>In particular, the \"it's the same set with a notation change\" idea is not something which would ever cross our mind.</p>",
        "id": 248584227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628238628
    },
    {
        "content": "<p>thanks for the input. that was very interesting to read.</p>",
        "id": 248676088,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628289093
    },
    {
        "content": "<p>i have some more questions about <code>multiplicative ℤ</code>: what are some of the elements of this set? since <code>2</code> isn't in here, what represents <code>2</code>? i'm guessing it's something like <code>1 * 1</code> since it's an infinite cyclic group?</p>",
        "id": 249054091,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628640278
    },
    {
        "content": "<p>also when i am trying to check that <code>1 </code> is an element of <code>multiplicative ℤ</code> like <code>#check 1 : multiplicative ℤ</code> i get a red underline under <code>:</code> and the error <code>command expected</code></p>",
        "id": 249054381,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628640517
    },
    {
        "content": "<p>however, <code>#check multiplicative.of_add (1 : ℤ)</code> works, but isn't this just putting it into the <code>multiplicative ℤ</code> set?</p>",
        "id": 249054395,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628640540
    },
    {
        "content": "<p><code>multiplicative.of_add 2</code>. The function <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicative.of_add\">docs#multiplicative.of_add</a> takes <code>a : A</code> and produces the corresponding element of <code>multiplicative A</code>. You can prove that <code>multiplicative.of_add 2 = g * g</code> where <code>g := multiplicative.of_add 1</code></p>",
        "id": 249054408,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628640553
    },
    {
        "content": "<blockquote>\n<p>You can prove ...</p>\n</blockquote>\n<p>The proof is <code>rfl</code> isn't it?</p>",
        "id": 249054509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628640638
    },
    {
        "content": "<p><code>x : Y</code> is not valid syntax by itself, <code>(x : Y)</code> is; your <code>#check</code> needs parentheses</p>",
        "id": 249054707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628640738
    },
    {
        "content": "<p>Should be</p>",
        "id": 249054708,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628640739
    },
    {
        "content": "<p>ok that makes sense, thanks</p>",
        "id": 249054966,
        "sender_full_name": "Holly Liu",
        "timestamp": 1628640954
    }
]