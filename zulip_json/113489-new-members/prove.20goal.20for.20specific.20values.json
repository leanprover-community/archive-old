[
    {
        "content": "<p>Is it possible to take a goal and split it into two cases, e.g. proving something for <code>n = 0</code> in one way and proving the same thing for general <code>n</code> in another?</p>",
        "id": 201811802,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592974887
    },
    {
        "content": "<p><code>cases n</code> or <code>induction n</code>?</p>",
        "id": 201811883,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592975012
    },
    {
        "content": "<p>I mean it's a different proof completely for 0 vs other n</p>",
        "id": 201811891,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592975036
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 201811930,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592975045
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">star_set</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">star_set</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">star_group</span>\n\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">has_coe_to_sort</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">semigroup</span>\n\n<span class=\"n\">def</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"err\">⌊</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">⌋</span>\n\n\n<span class=\"kn\">notation</span> <span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"err\">⋆</span><span class=\"bp\">`</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">star</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">star_set</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">star_inverses</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⋆</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">star_set</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">star_set</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">star_set</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Ico</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Ico</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">star_group</span>\n</code></pre></div>",
        "id": 201811949,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592975081
    },
    {
        "content": "<p><code>by_cases (n = 0)</code></p>",
        "id": 201811955,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592975097
    },
    {
        "content": "<p>Ohh okay, that's exactly what I needed. Thank you!</p>",
        "id": 201811997,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592975153
    },
    {
        "content": "<p>(Note that the first and final   <code> ``` </code> should be on their own lines for syntax highlighting to work properly.)</p>",
        "id": 201812064,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592975222
    },
    {
        "content": "<p>I guess <code>cases</code> or <code>induction</code> wouldn't work here due to working in <code>\\R</code></p>",
        "id": 201812080,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592975244
    }
]