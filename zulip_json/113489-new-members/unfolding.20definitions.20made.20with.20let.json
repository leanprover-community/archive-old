[
    {
        "content": "<p>In Theorem Proving In Lean (Release 3.23.0), it is stated that the <code>let</code> tactic is used to introduce local definitions and that these can be unfolded. I haven't found how to unfold them, though. I tried the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">exists</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I got the error <code>unfold tactic failed, a does not have equational lemmas nor is a projection</code>. How can I interpret this error message? Is it possible to do what I'm trying to do, to unfold a definition made with <code>let</code> in tactic mode?</p>",
        "id": 288317809,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1656840357
    },
    {
        "content": "<p><code>unfold</code> only really works for things defined with <code>def</code>. You could try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">exists</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">exists</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288317947,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1656840593
    },
    {
        "content": "<p>Okay thanks that works!</p>",
        "id": 288318439,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1656841411
    },
    {
        "content": "<p>I think it is reasonable to use this workflow rather than <code>def</code> because I need to make definitions that use many local variables.</p>",
        "id": 288318492,
        "sender_full_name": "Simon Jacobsson",
        "timestamp": 1656841499
    },
    {
        "content": "<p>If you use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#set\">tactic#set</a> instead of let there is an option to create the hypothesis h automatically</p>",
        "id": 288328179,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656855553
    }
]