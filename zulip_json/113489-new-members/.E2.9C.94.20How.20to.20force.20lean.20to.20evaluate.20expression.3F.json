[
    {
        "content": "<p>A lot of the time I have expressions like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">pos</span><span class=\"bp\">✝¹</span> <span class=\"o\">}</span> <span class=\"bp\">~</span> <span class=\"o\">{</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span><span class=\"bp\">✝</span><span class=\"o\">,</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">pos</span><span class=\"bp\">✝</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>where ~ is defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">eqv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">RawInt</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ~ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eqv</span>\n</code></pre></div>\n<p>Why doesn't lean expand the definition?</p>",
        "id": 279099156,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650041612
    },
    {
        "content": "<p>You can tag <code>eqv</code> with <code>@[simp]</code>. Then you will be able to just say <code>simp</code> and Lean will unfold it. You need to tell Lean to be aware of your definition because that's not always wanted</p>",
        "id": 279099582,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650041880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Is there any way to expand it manually at a given point?</p>",
        "id": 279099679,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650041922
    },
    {
        "content": "<p>Maybe <code>simp [eqv]</code> is what you're asking, but I'm not sure. Can you elaborate an example to illustrate what you'd like to happen?</p>",
        "id": 279099766,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650041977
    },
    {
        "content": "<p>oh wait, I can just <code>simp [eqv]</code></p>",
        "id": 279099768,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650041978
    },
    {
        "content": "<p>right, thanks</p>",
        "id": 279099778,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1650041985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"486803\">Matei Adriel</span> has marked this topic as resolved.</p>",
        "id": 279100921,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650042613
    }
]