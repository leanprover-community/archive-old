[
    {
        "content": "<p>Hi, I am getting cryptic error messages <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span> Here is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">frac_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">div_pos</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n</code></pre></div>\n<p>Very simple, just prove <code>0 &lt; n + 1</code>, then <code>zero_lt_one</code> gives <code>0 &lt; 1</code>, and them combined gives <code>0 &lt; 1 / (n + 1)</code> using <code>div_pos</code>. Great!<br>\n... No, it gives the following error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">div_pos</span> <span class=\"n\">zero_lt_one</span> <span class=\"n\">this</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">this</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">.../</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">grhkm.lean</span><span class=\"o\">:</span><span class=\"mi\">82</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"n\">div_pos</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">/</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I can't seem to understand the message. It seems to fail to match <code>?m_3</code> with <code>(n + 1)</code>? Can someone explain what is happening and how I should fix it?</p>",
        "id": 322443325,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674199498
    },
    {
        "content": "<p>The problem is that your statement does not hold. For example <code>1 / 2 = 0</code> in natural numbers.</p>",
        "id": 322444662,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1674200075
    },
    {
        "content": "<p>Oh... How do I make it so that it treats <code>1 / (n + 1)</code> as a real number? I tried <code>↑1 / (n + 1)</code> but it doesn't seem to work</p>",
        "id": 322445043,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674200246
    },
    {
        "content": "<p>The way to write the (usual) <code>1/(n+1)</code> in Lean is <code>(1 : ℚ)/(1+n)</code>.</p>",
        "id": 322445093,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1674200269
    },
    {
        "content": "<p>Replace <code>ℚ</code> by <code>ℝ</code> if you want real numbers.</p>",
        "id": 322445178,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1674200297
    },
    {
        "content": "<p>FYI, this code works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">have</span> <span class=\"n\">frac_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">one_div_pos</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 322445187,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1674200301
    },
    {
        "content": "<p>If you want to know why <code>1/0 = 0</code> you can have a look <a href=\"https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/\">here</a>.</p>",
        "id": 322445349,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1674200361
    },
    {
        "content": "<p>I see, that is useful, thank you so much.</p>",
        "id": 322445671,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674200503
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">frac_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_div_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.cast_add_one_pos</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322445700,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1674200521
    },
    {
        "content": "<p><code>↑1 / (n + 1)</code> is \"morally\" correct, in the sense we need a coercion, but how can Lean read your mind and guess that the <code>↑</code> means \"coercion to real numbers\" (maybe you want coercion to <code>ℤ</code>)? Indeed, <code>1 : ℝ</code> is exactly the same as <code>(↑1 : ℝ)</code>, allowing Lean to understand where you want to send <code>1</code>.</p>",
        "id": 322445741,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1674200524
    },
    {
        "content": "<p>Once <code>1</code> is understood to be a real number, Lean understands that it needs to use a coercion also for the denominator, so it inserts it automatically.</p>",
        "id": 322445927,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1674200624
    },
    {
        "content": "<p>Shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">frac_pos</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.one_div_pos_of_nat</span>\n</code></pre></div>",
        "id": 322445958,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1674200640
    }
]