[
    {
        "content": "<p>Code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.interval</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Function definitions-/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">Derivative-/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">deriv</span> <span class=\"n\">a</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Higher order derivatives-/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Dn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">Dn</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Derivative rules-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">product_rule</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">composite_deriv</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Composite function derivative-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">second_composite_deriv</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Dn</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Dn</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\">Out: D (D (f ∘ u)) x = (D (D f) ∘ u * D u ^ 2 + D f ∘ u * D (D u)) x-/</span>\n  <span class=\"n\">rw</span> <span class=\"n\">composite_deriv</span> <span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Problem:</p>\n<p>Using <code>rw composite_deriv f u</code> fails with message: \"rewrite tactic failed, lemma is not an equality nor a iff\". Why is it giving me this error? Isn't my lemma already an equality?</p>",
        "id": 320750157,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673456163
    },
    {
        "content": "<p>It also doesn't seem to work with the \"obvious\" case, it yields the same error message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">Composite function with first derivative-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">first_composite_deriv</span> <span class=\"o\">:</span> <span class=\"n\">Dn</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Dn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">composite_deriv</span> <span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320752551,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673456797
    },
    {
        "content": "<p>It seems to be a problem with the definition of <code>Dn</code> again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">Higher order derivatives-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Dn</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"bp\">∘</span> <span class=\"n\">Dn</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Dn</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>The check returns a map <code>Dn 0 : ℕ → (ℝ → ℝ) → ℝ → ℝ</code>, but I would be expecting <code> (ℝ → ℝ) → (ℝ → ℝ)</code>, which is just <code>id</code>.</p>",
        "id": 320758339,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673458456
    },
    {
        "content": "<p>It is a bit unclear what you are trying above. The <code>product_rule</code> and <code>composite_deriv</code> you have defined are statements (about a pair of real functions), not results. You can see this in Lean by, e.g., <code>#check product_rule</code>. This explains why the rewrite fails --- indeed \"...lemma is not an equality nor a iff\".</p>\n<p>The statement <code>product_rule f u</code> would in fact be a <em>true</em> statement if one furthermore assumes differentiability of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>. Under that hypothesis you could therefore make it a result (prove it). The content of it would be more or less <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_mul\">docs#deriv_mul</a>.</p>\n<p>It is less clear under what reasonable assumptions your <code>composite_deriv</code> would be true. Did you mean something more like the chain rule, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv.comp\">docs#deriv.comp</a>?</p>",
        "id": 320762217,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1673459719
    },
    {
        "content": "<p>Look at <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/iterated_deriv.html#iterated_deriv\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/iterated_deriv.html#iterated_deriv</a><br>\nYou do not need to redefine what was already defined.</p>",
        "id": 320766779,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673461140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20derivative.20composition/near/320762217\">said</a>:</p>\n<blockquote>\n<p>It is a bit unclear what you are trying above. The <code>product_rule</code> and <code>composite_deriv</code> you have defined are statements (about a pair of real functions), not results. You can see this in Lean by, e.g., <code>#check product_rule</code>. This explains why the rewrite fails --- indeed \"...lemma is not an equality nor a iff\".</p>\n<p>The statement <code>product_rule f u</code> would in fact be a <em>true</em> statement if one furthermore assumes differentiability of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>. Under that hypothesis you could therefore make it a result (prove it). The content of it would be more or less <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv_mul\">docs#deriv_mul</a>.</p>\n<p>It is less clear under what reasonable assumptions your <code>composite_deriv</code> would be true. Did you mean something more like the chain rule, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/deriv.comp\">docs#deriv.comp</a>?</p>\n</blockquote>\n<p>I want to use those as \"substitutions\" in the proof, that's why I'm calling rewrite. Am I supposed to write this instead?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">Derivative rules-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">product_rule</span> <span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">composite_deriv</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 320775853,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673463925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385848\">Mark Andrew Gerads</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20derivative.20composition/near/320766779\">said</a>:</p>\n<blockquote>\n<p>Look at <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/iterated_deriv.html#iterated_deriv\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/iterated_deriv.html#iterated_deriv</a><br>\nYou do not need to redefine what was already defined.</p>\n</blockquote>\n<p>The reason I am redefining it is to learn the language by proving things that I already know.</p>",
        "id": 320786679,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673467298
    },
    {
        "content": "<p>I think what you need to do is actually prove that the product rule holds.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">product_rule</span> <span class=\"n\">D</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">some</span> <span class=\"n\">differentiability</span> <span class=\"n\">hypotheses</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Your current definitions are just that: definitions. They're not proofs of any fact, so you can't use them to rewrite e.g. <code>D (f * u)</code> into <code>(D f) * u + f * (D u)</code>.</p>\n<p>More precisely, when you write <code>def product_rule := D f*u = (D f)*u + f*(D u)</code>, you create a new <em>proposition</em> called <code>product_rule D f u</code> which is true when the product rule holds on <code>f </code> and <code>u</code>, and false when it doesn't hold.</p>",
        "id": 320828615,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673487137
    },
    {
        "content": "<p>Using your original definitions, you could make a theorem like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">deriv_eq_of_product_rule</span> <span class=\"o\">:</span> <span class=\"n\">product_rule</span> <span class=\"n\">D</span> <span class=\"n\">f</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">product_rule</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which says that \"when the product rule holds for <code>f</code> and <code>u</code>, we have <code>D f*u = (D f)*u + f*(D u)</code>.</p>",
        "id": 320828739,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673487243
    },
    {
        "content": "<p>Note <code>D f*u</code> is exactly the same as <code>(D f)*u</code>.<br>\nYou can also pretend the proposition is true by writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">product_rule</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">product_rule</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"577757\">Icaro Costa</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20derivative.20composition/near/320758339\">said</a>:</p>\n<blockquote>\n<p>It seems to be a problem with the definition of <code>Dn</code> again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Dn</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>The check returns a map <code>Dn 0 : ℕ → (ℝ → ℝ) → ℝ → ℝ</code>, but I would be expecting <code> (ℝ → ℝ) → (ℝ → ℝ)</code>, which is just <code>id</code>.</p>\n</blockquote>\n<p>By the way, I can't reproduce this. I get <code>Dn 0 : (ℝ → ℝ) → ℝ → ℝ</code>.</p>",
        "id": 320839556,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673494206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20derivative.20composition/near/320839556\">said</a>:</p>\n<blockquote>\n<p>Note <code>D f*u</code> is exactly the same as <code>(D f)*u</code>.<br>\nYou can also pretend the proposition is true by writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">product_rule</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">product_rule</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"577757\">Icaro Costa</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20derivative.20composition/near/320758339\">said</a>:</p>\n<blockquote>\n<p>It seems to be a problem with the definition of <code>Dn</code> again:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Dn</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>The check returns a map <code>Dn 0 : ℕ → (ℝ → ℝ) → ℝ → ℝ</code>, but I would be expecting <code> (ℝ → ℝ) → (ℝ → ℝ)</code>, which is just <code>id</code>.</p>\n</blockquote>\n<p>By the way, I can't reproduce this. I get <code>Dn 0 : (ℝ → ℝ) → ℝ → ℝ</code>.</p>\n</blockquote>\n<p>Hm that's interesting, I think that an axiom is what I really wanted. However, I am still having problems about the definition of a higher order derivative:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">Identiy operator-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Id</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Higher order derivatives-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Dn</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Id</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"bp\">∘</span> <span class=\"n\">Dn</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Doing <code>#check Dn 1</code> outputs a type <code>Dn 1 : ℕ → (ℝ → ℝ) → ℝ → ℝ</code> while what I really want is <code>Dn 1 : (ℝ → ℝ) → (ℝ → ℝ)</code>.  Any way I can make this work?</p>",
        "id": 320930779,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673528163
    },
    {
        "content": "<p>Do you have some <code>variables</code>/<code>include</code> lying around? What does <code>#check Dn</code> say?</p>",
        "id": 320932014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673528518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20derivative.20composition/near/320932014\">said</a>:</p>\n<blockquote>\n<p>Do you have some <code>variables</code>/<code>include</code> lying around? What does <code>#check Dn</code> say?</p>\n</blockquote>\n<p>Doing <code>#check Dn</code> gives me <code>Dn : ((ℝ → ℝ) → ℝ → ℝ) → ℕ → (ℝ → ℝ) → ℝ → ℝ</code>, which doesn't make sense to me.</p>\n<p>The variables that I have are these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">Function definitions-/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Derivative-/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 320938558,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673530530
    },
    {
        "content": "<p>The first argument to <code>Dn</code> is the variable <code>D</code>, not the variable <code>n</code>. So either you write <code>Dn deriv n</code>, or you turn <code>D</code> into a <code>def</code></p>",
        "id": 320939672,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673530809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20derivative.20composition/near/320939672\">said</a>:</p>\n<blockquote>\n<p>The first argument to <code>Dn</code> is the variable <code>D</code>, not the variable <code>n</code>. So either you write <code>Dn deriv n</code>, or you turn <code>D</code> into a <code>def</code></p>\n</blockquote>\n<p>That fixed it!</p>",
        "id": 320942811,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673531728
    },
    {
        "content": "<p>Here's the working code if anyone is interested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.interval</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Function definitions-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Derivative-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Identiy operator-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Id</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Higher order derivatives-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Dn</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Id</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"bp\">∘</span> <span class=\"n\">Dn</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Dn</span> <span class=\"mi\">1</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Derivative rules-/</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">product_rule</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">composite_deriv</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Composite function with first derivative-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">first_composite_deriv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Dn</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Dn</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Id</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">composite_deriv</span> <span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Composite function with second derivative-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">second_composite_deriv</span> <span class=\"o\">:</span> <span class=\"n\">Dn</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">))):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Dn</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Id</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">composite_deriv</span> <span class=\"n\">f</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">product_rule</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">composite_deriv</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320949841,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673533368
    }
]