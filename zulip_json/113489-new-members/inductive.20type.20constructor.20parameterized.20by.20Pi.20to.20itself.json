[
    {
        "content": "<p>I was reading the reference manual on inductive types and didn't understand how <code>rec</code> deals with so called \"recursive arguments\". It states: \"The ith minor premise is a function which takes [...] an argument of type <code>Π (d : δ), C (bⱼ d)</code> corresponding to each recursive argument <code>(bⱼ : βᵢⱼ)</code>, where <code>βᵢⱼ</code> is of the form <code>Π (d : δ), foo</code> (the recursive values of the function being defined)\"</p>\n<p>I didn't understand this, so tried this out:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">constant</span> <span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">ind4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">const5</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">:(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">ind4</span><span class=\"o\">),</span> <span class=\"n\">ind4</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">ind4</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n</code></pre></div>\n\n\n<p>There are two things I don't understand about this:</p>\n<ol>\n<li>How is <code>const5</code> and <code>ind4</code> well-defined? It seems like in order to construct the type <code>Π x:X, ind4</code> we first need to have constructed the type <code>ind4</code>. I can vaguely imagine that this doesn't lead to contradictions and hence is ok, e.g. by arguing that in defining <code>const5 f</code>, the function <code>f</code> must be a function that doesn't have <code>const5 f</code> itself in its image. Nevertheless it seems a bit suspect and I'm not sure how to justify this.</li>\n<li>Even more suspect seems to me the use of <code>rec</code> for this. It has the type <code>ind4.rec : Π {C : ind4 → Sort u_1}, (Π (b : X → ind4), (Π (x : X), C (b x)) → C (ind4.const5 b)) → Π (n : ind4), C n</code>. The part of this that seems suspect is <code>(Π (b : X → ind4), (Π (x : X), C (b x)) → C (ind4.const5 b))</code>, because it's not obvious to me that this induces a well-founded recursion: How do we know that <code>b</code> only outputs members of <code>ind4</code> for which the recursion \"has already been done\"? </li>\n</ol>\n<p>I might be misunderstanding something more fundamental.</p>",
        "id": 205580886,
        "sender_full_name": "Chris M",
        "timestamp": 1596194910
    },
    {
        "content": "<p>Are you happy with the definition of the natural numbers?</p>",
        "id": 205595557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596205224
    },
    {
        "content": "<p>Is your situation any different?</p>",
        "id": 205595584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596205242
    },
    {
        "content": "<p>The <code>inductive</code> command makes <code>ind4</code> and <code>ind4.const5</code> and <code>ind4.rec</code> all appear at the same time</p>",
        "id": 205595854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596205374
    },
    {
        "content": "<p>After thinking about it more, it seems like we at least want the condition <code>\\forall x:X, \\forall (b:\\Pi x:X, ind4), (b x) \\neq (const5 b)</code>, and I'm guessing that this is automatically satisfied.</p>",
        "id": 205617124,
        "sender_full_name": "Chris M",
        "timestamp": 1596216073
    },
    {
        "content": "<p>There's no way to actually create an element of your type (if <code>b</code>'s domain type is inhabited) . Mario Carneiro showed this proof in another thread, but it applies here. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">ind4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">const5</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">:(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">ind4</span><span class=\"o\">),</span> <span class=\"n\">ind4</span>\n\n<span class=\"n\">def</span> <span class=\"n\">no_ind4</span> <span class=\"o\">[</span><span class=\"n\">inst1</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ind4</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ind4</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"n\">h2</span> <span class=\"n\">inst1</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p><a href=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189382869\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189382869</a></p>",
        "id": 205625325,
        "sender_full_name": "Chris B",
        "timestamp": 1596220461
    },
    {
        "content": "<p>This is like a bastardised version of the type I suggested in your other thread:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tree</span>\n</code></pre></div>\n\n\n<p>The addition of dependent types makes it more useful. Say <code>α</code> is <code>ℕ</code> and <code>β</code> is <code>fin</code>. A leaf node can be constructed with <code>a = 0</code> because <code>fin 0</code> is empty. You can construct further nodes out of those, parametrised by <code>a</code> the number of children. In general you have to understand that the only terms of a type are those you can actually construct. This way of thinking may seem a little alien if you have taken more maths classes than CS classes.</p>",
        "id": 205630150,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1596222865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/113489-new-members/topic/inductive.20type.20constructor.20parameterized.20by.20Pi.20to.20itself/near/205625325\">said</a>:</p>\n<blockquote>\n<p>There's no way to actually create an element of your type (if <code>b</code>'s domain type is inhabited) . Mario Carneiro showed this proof in another thread, but it applies here. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">ind4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">const5</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">:(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">ind4</span><span class=\"o\">),</span> <span class=\"n\">ind4</span>\n\n<span class=\"n\">def</span> <span class=\"n\">no_ind4</span> <span class=\"o\">[</span><span class=\"n\">inst1</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ind4</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ind4</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"n\">h2</span> <span class=\"n\">inst1</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p><a href=\"#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189382869\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Basic.20building.20block.20tactics/near/189382869</a></p>\n</blockquote>\n<p>To be clear, this doesn't actually prove that it's impossible to construct an instance of ind4, does it? It just proves that if this would be possible, Lean's type theory would be inconsistent. Do we actually know that it's consistent?</p>",
        "id": 205691469,
        "sender_full_name": "Chris M",
        "timestamp": 1596304342
    },
    {
        "content": "<p>Oh come on. What do you mean by \"know\"?</p>",
        "id": 205692243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596305466
    },
    {
        "content": "<p>I know it's consistent in the sense that it's equiconsistent with the system that me and gazillions of other mathematicians are using every day. But by Gödel we can't prove this within the system, we can only prove it within a system strictly more likely to be inconsistent</p>",
        "id": 205692297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596305562
    },
    {
        "content": "<p>For the purpose of that comment, I meant \"have a proof of\". I'm not saying I doubt it, I'm just curious in the meta mathematics of this</p>",
        "id": 205692300,
        "sender_full_name": "Chris M",
        "timestamp": 1596305577
    },
    {
        "content": "<p>A proof assuming what?</p>",
        "id": 205692306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596305591
    },
    {
        "content": "<p>Certainly lean can't prove its own consistency, in common with every consistent system strong enough to construct the natural numbers, by godel</p>",
        "id": 205692363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596305652
    },
    {
        "content": "<p>I think Godel's theorem tells us that we can't prove the consistency of a set of axioms within a logic, not that we can't prove the consistency of a formal deductive system of that logic?</p>",
        "id": 205692451,
        "sender_full_name": "Chris M",
        "timestamp": 1596305855
    },
    {
        "content": "<p>you might find it helpful to read some of mario's msc thesis<br>\n<a href=\"https://github.com/digama0/lean-type-theory\">https://github.com/digama0/lean-type-theory</a></p>",
        "id": 205692496,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596305905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284606\">Chris M</span> <a href=\"#narrow/stream/113489-new-members/topic/inductive.20type.20constructor.20parameterized.20by.20Pi.20to.20itself/near/205692451\">said</a>:</p>\n<blockquote>\n<p>I think Godel's theorem tells us that we can't prove the consistency of a set of axioms within a logic, not that we can't prove the consistency of a formal deductive system of that logic?</p>\n</blockquote>\n<p>i have a hard time imagining a difference between the two sides of the \"not that\"</p>",
        "id": 205692571,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596306031
    },
    {
        "content": "<p>i think if you want to have a nuanced discussion about the evidence for the consistency of lean, you need to start from precise definitions</p>",
        "id": 205692589,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596306108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284606\">Chris M</span> <a href=\"#narrow/stream/113489-new-members/topic/inductive.20type.20constructor.20parameterized.20by.20Pi.20to.20itself/near/205691469\">said</a>:</p>\n<blockquote>\n<p>To be clear, this doesn't actually prove that it's impossible to construct an instance of ind4, does it? It just proves that if this would be possible, Lean's type theory would be inconsistent. Do we actually know that it's consistent?</p>\n</blockquote>\n<p>Then I guess you can say that we can never prove <code>0≠1</code>, we can just prove that if it was possible to prove <code>0=1</code> Lean would be inconsistent. This is just the definition of negation, if you accept to extend it to any <code>Type u</code></p>",
        "id": 205693118,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596307018
    },
    {
        "content": "<p>Ah mario's thesis says that ZFC and CIC can prove each other's consistency. That's basically what I wanted to know. :)</p>",
        "id": 205693124,
        "sender_full_name": "Chris M",
        "timestamp": 1596307052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/inductive.20type.20constructor.20parameterized.20by.20Pi.20to.20itself/near/205693118\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284606\">Chris M</span> <a href=\"#narrow/stream/113489-new-members/topic/inductive.20type.20constructor.20parameterized.20by.20Pi.20to.20itself/near/205691469\">said</a>:</p>\n<blockquote>\n<p>To be clear, this doesn't actually prove that it's impossible to construct an instance of ind4, does it? It just proves that if this would be possible, Lean's type theory would be inconsistent. Do we actually know that it's consistent?</p>\n</blockquote>\n<p>Then I guess you can say that we can never prove <code>0≠1</code>, we can just prove that if it was possible to prove <code>0=1</code> Lean would be inconsistent. This is just the definition of negation, if you accept to extend it to any <code>Type u</code></p>\n</blockquote>\n<p>Right, I hadn't thought of it that way, thanks :)</p>",
        "id": 205693199,
        "sender_full_name": "Chris M",
        "timestamp": 1596307170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> I think that actually Lean is equiconsistent with ZFC + infinitely many universes, but mathematicians use universes when push comes to shove...</p>",
        "id": 205698268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596316007
    }
]