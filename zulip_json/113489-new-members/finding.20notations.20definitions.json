[
    {
        "content": "<p>I am struggling to find where the set comprehension notation (e.g. <code>{x | x = x}</code>) is defined. I tried using <code>#print notation {</code> and <code>#print notation |</code>, but both searches resulted in other definitions. Set comprehension also doesn't seem to be present in the full <code>#print notation</code>list. I also tried something with <code>set_option pp.notation false</code> and <code>set_option pp.all true</code> but both didn't give me results that help me find where the notation is defined. I want to see how the notation is defined because I want to define something similar.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"c1\">-- set_of (λ (x : ?M_1), eq x x) : set ?M_1</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"c1\">-- {x : ?M_1 | x = x} : set.{u_1} ?M_1</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"c1\">-- @set_of.{u_1} ?M_1 (λ (x : ?M_1), @eq.{u_1+1} ?M_1 x x) : set.{u_1} ?M_1</span>\n</code></pre></div>",
        "id": 266684283,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641215702
    },
    {
        "content": "<p>Unfortunately the set builder notation is defined in the core of Lean, and the parser written in C rather than Lean itself, so you can't jump to the definition in the same way as for other notations.<br>\nYou can find the source code here though <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp</a>, but that won't help you write your own Lean version of course!</p>",
        "id": 266684692,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641215985
    },
    {
        "content": "<p>If you say more about the similar thing you want to define it should be possible to get something that works I believe</p>",
        "id": 266684935,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641216127
    },
    {
        "content": "<p>That is unfortunate.</p>\n<p>Given the following definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Set</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">Set</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mem</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">separation</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">separation</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>I want to be able to write <code>separation (λ x, x ≠ y ∧ φ x) A</code> as <code>{x ∈ A : x ≠ y ∧ φ x}</code>.</p>",
        "id": 266685749,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641216654
    },
    {
        "content": "<p>I would try Lean 4 :-)</p>",
        "id": 266690154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641219432
    },
    {
        "content": "<p>There is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sep\">docs#has_sep</a> I think</p>",
        "id": 266693141,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641220905
    },
    {
        "content": "<p>Check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set.has_sep\">docs#Set.has_sep</a></p>",
        "id": 266693260,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641220938
    }
]