[
    {
        "content": "<p>I apologize if this question is too philosophical in nature, but there's been something about the reals that I've been wondering about.</p>\n<p>My understanding of how the reals are defined in mathlib is that they are the quotient of a Cauchy sequence under some equivalence relation, and a Cauchy sequence is just a function <code>f : nat -&gt; rat</code> with some special properties. If we ignore the quotienting and the special properties of the function, then a real is kind of close to a function <code>nat -&gt; rat</code>. However, in Lean, all functions are built out of finitely many symbols, so there are a countably infinite number of functions that we can actually define. This means that there are also a countably infinite number of real numbers that we can actually define as well.</p>\n<p>What confuses me is this: isn't <code>real</code> the type of all terms we can construct using these functions from <code>nat -&gt; rat</code>? Wouldn't that mean that the reals are countable? Or does <code>real</code> include terms that we can't describe in any way (which contradicts what I know about inductive types)?</p>\n<p>I don't know how <code>cardinal.not_countable_real</code> is proven, but lets say for a second that you could potentially prove it if, given any countable set of reals, you produce a real that isn't in that set. If you were to take the set of reals that are expressible in Lean, you wouldn't be able to produce any new real number not in that set, because then that real would be, by definition, expressible.</p>\n<p>As far as I know, this set of expressible real numbers cannot be defined from <em>within</em> Lean, and so cannot be used to derive a contradiction. But to me, it seems like we haven't proven that there is no countable set containing all reals numbers, we've just proven that there is no countable set containing all real numbers that we can define from within Lean. So would proving something isn't countable in Lean just show that there isn't a way to <em>construct</em> a bijection to <code>nat</code>, and not that one doesn't exist?</p>",
        "id": 313850278,
        "sender_full_name": "Niels Voss",
        "timestamp": 1670183484
    },
    {
        "content": "<p>It's not true that in Lean all functions are \"built out of finitely many symbols\". It's just the case that the functions you can explicitly write down are built from finitely many symbols. You can only write down countably many real numbers but you can still prove there are uncountably many, most of which do not have names.</p>",
        "id": 313851274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670184254
    },
    {
        "content": "<p>This is a well-known apparent paradox and not specific to Lean. See <a href=\"https://en.wikipedia.org/wiki/Skolem%27s_paradox\">Skolem's paradox</a>.</p>",
        "id": 313852854,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1670185445
    },
    {
        "content": "<p>the Stanford Encyclopedia of Philosophy also has a nice overview of Skolem's paradox: <a href=\"https://plato.stanford.edu/entries/paradox-skolem/\">https://plato.stanford.edu/entries/paradox-skolem/</a></p>",
        "id": 313853803,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1670186229
    }
]