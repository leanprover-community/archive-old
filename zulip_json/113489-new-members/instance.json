[
    {
        "content": "<p>I can't locate this instance in the library:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n\n\n<p>Is library_search supposed to find instances as well?</p>",
        "id": 203848376,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594740948
    },
    {
        "content": "<p>Are the brackets right?</p>",
        "id": 203848674,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594741092
    },
    {
        "content": "<p>They aren't:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- Try this: refine pi.group</span>\n</code></pre></div>",
        "id": 203848692,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594741100
    },
    {
        "content": "<p>Ok it did not really come to my mind that the priority could have been greater for group than for the arrow.<br>\nSince you're here, regarding this instance, what is the dollar here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">group</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">has_inv</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">pi_instance_derive_field</span>\n</code></pre></div>\n\n\n<p>I think the dollar is never mentioned in the online book...</p>",
        "id": 203849386,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594741408
    },
    {
        "content": "<p><code>$</code> means bracket everything to the right, so its equivalent to <code>[∀ i, group (f i)]</code> here, it can be helpful with long lines with lots of brackets</p>",
        "id": 203849520,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594741469
    },
    {
        "content": "<p><code>a $ b</code> is like <code>a ( b )</code></p>",
        "id": 203849524,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594741471
    },
    {
        "content": "<p>Ok thanks a lot!</p>",
        "id": 203849557,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594741493
    },
    {
        "content": "<p>Another instance-related question:<br>\nShould <code>band</code> and <code>bor</code> be instances of <code>is_associative</code> and <code>is_commutative</code>? I couldn't find it in mathlib.  The closest thing is <code>bool.bor_comm</code> etc. which is listed here: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/bool.html\">https://leanprover-community.github.io/mathlib_docs/data/bool.html</a></p>",
        "id": 203867588,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1594750441
    }
]