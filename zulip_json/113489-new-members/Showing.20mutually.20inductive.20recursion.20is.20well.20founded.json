[
    {
        "content": "<p>I'm trying to show that a group of mutually inductive functions over a set of mutually inductive type families is well founded.</p>\n<p>To do so, I need to project to the last argument of each function and then \"tell\" lean to consider the well founded relation induced by the structure of the mutually inductive type families. I cannot however move this argument earlier in the list of the functions arguments as it type depends on all previous arguments. </p>\n<p>I run into the same issue if I try and define some function that simply computes the \"depth\" of the mutually inductive term (so as to create a map to ℕ). Is there anyway to simply \"tell\" lean to only consider this last argument when trying to prove the recursion is well-founded?</p>",
        "id": 263231327,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638320143
    },
    {
        "content": "<p>oh? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> you might want to take a look at the merge_sort implementation <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/sort.lean#L257\">https://github.com/leanprover-community/mathlib/blob/master/src/data/list/sort.lean#L257</a></p>",
        "id": 263231549,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638320349
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> if you need more assistance please tell us</p>",
        "id": 263231657,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638320411
    },
    {
        "content": "<p>Thank you! Unfortunately, <code>inv_image.wf</code> doesn't work for my use case as the function, <code>f : α → β</code>,projecting to the well-founded type does not allow the the output type, <code>β</code>, to depend on the input type, <code>α</code>.</p>\n<p>Unfortunately, I need this for my case, as in all cases, the type of the last element I want to project to depends on all other previous arguments to the function.</p>",
        "id": 263232832,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638321356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453259\">@Julian Sutherland</span> then give us a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, quick <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I'm here to help, and it's very likely that the problem isn't as hard as you think it is</p>",
        "id": 263233384,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638321850
    },
    {
        "content": "<p>Thank you! I'm on it :)</p>",
        "id": 263234000,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638322449
    },
    {
        "content": "<p>I think the simplest possible example that I can concoct that exhibits this behaviour is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">C'</span>\n<span class=\"k\">with</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"k\">with</span> <span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">c_depth</span><span class=\"o\">,</span> <span class=\"n\">c'_depth</span>\n<span class=\"k\">with</span> <span class=\"n\">c_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C1</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c'_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"n\">c'_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C'.C1'</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c_depth</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>So clearly there is a well-founded relation induced by the inductive structure of the mutually inductive type families <code>C</code> and <code>C'</code>. Therefore, since all recursive calls occur on some inductive subterm of one of these in the <code>c_depth</code> and <code>c'_depth</code> functions, these mutually recursive functions are well-founded. However, lean first considers the earlier argument to the two functions (the naturals parametrising the <code>C</code> and <code>C'</code> type families) and see that they increase and therefore is unable to show that this recursion is well-founded:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span> <span class=\"n\">is</span> <span class=\"n\">decreasing</span><span class=\"o\">,</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_well_founded.r</span> <span class=\"o\">(</span><span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">psum.has_sizeof_alt</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">psigma.has_sizeof</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">nat.has_sizeof</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C.has_sizeof_inst</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">psigma.has_sizeof</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">nat.has_sizeof</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C'.has_sizeof_inst</span> <span class=\"n\">a</span><span class=\"o\">))))</span>\n<span class=\"n\">Possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">'</span><span class=\"n\">using_well_founded'</span> <span class=\"n\">keyword</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"kd\">end</span> <span class=\"n\">of</span> <span class=\"n\">your</span> <span class=\"kd\">definition</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">tactics</span> <span class=\"n\">for</span> <span class=\"n\">synthesizing</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relations</span> <span class=\"n\">and</span> <span class=\"n\">decreasing</span> <span class=\"n\">proofs.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">The</span> <span class=\"n\">default</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span> <span class=\"n\">uses</span> <span class=\"n\">the</span> <span class=\"bp\">'</span><span class=\"n\">assumption'</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">thus</span> <span class=\"n\">hints</span> <span class=\"o\">(</span><span class=\"n\">aka</span> <span class=\"kn\">local</span> <span class=\"n\">proofs</span><span class=\"o\">)</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">provided</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"k\">have</span><span class=\"bp\">'-</span><span class=\"n\">expressions.</span>\n<span class=\"n\">The</span> <span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">failure</span> <span class=\"n\">state</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic.</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">default_dec_tac</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">C'</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">C'.sizeof</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c'</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">_x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">_x</span> <span class=\"bp\">+</span> <span class=\"n\">C'.sizeof</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>These arguments cannot be moved as the two type families depend on them.</p>",
        "id": 263234730,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638323190
    },
    {
        "content": "<p>Interestingly, when considering a similar example with only a single type family rather than two mutually recursive ones, this is not a problem and lean seems to be able to automatically realise that it need only consider the last argument when showing a recursive function is well-founded.</p>",
        "id": 263235431,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638323841
    },
    {
        "content": "<p>You should consider using an inductive family rather than a mutual inductive. The kernel supports the former directly, so you won't need to resort to well founded recursion as much</p>",
        "id": 263235548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638323973
    },
    {
        "content": "<p>While possible, this would introduce a huge amount of overhead... My actual use case has a large number of mutually inductive type families with different numbers of arguments. Doing so would require a large number of \"dummy\" arguments and predicates to restrict inductive references to the appropriate \"subtypes\" corresponding to each previous mutually inductive type.</p>\n<p>Is there no alternative using these mutually inductive type families directly?</p>",
        "id": 263236103,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638324387
    },
    {
        "content": "<p>I don't think it should; you need an inductive type to describe the index type of the main inductive, but I have done this sort of thing \"at scale\" before and it works alright</p>",
        "id": 263236193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638324472
    },
    {
        "content": "<p>I've never seen this error before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">C_type</span> <span class=\"bp\">|</span> <span class=\"n\">type_C</span> <span class=\"bp\">|</span> <span class=\"n\">type_C'</span>\n<span class=\"kn\">open</span> <span class=\"n\">C_type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C_mut</span> <span class=\"o\">:</span> <span class=\"n\">C_type</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C_mut</span> <span class=\"n\">type_C'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C_mut</span> <span class=\"n\">type_C</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C_mut</span> <span class=\"n\">type_C</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C_mut</span> <span class=\"n\">type_C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C_mut</span> <span class=\"n\">type_C'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">C_type</span><span class=\"o\">},</span> <span class=\"n\">C_mut</span> <span class=\"n\">t</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">C_mut.C1</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">C_mut.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">C_mut.C1'</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c_depth</span> <span class=\"n\">c</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">equation compiler failed to prove equation lemma (workaround: disable lemma</span>\n<span class=\"cm\">generation using `set_option eqn_compiler.lemmas false`)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I removed these pattern definitions just to check they weren't the cause:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">C.C1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">C_mut.C1</span> <span class=\"n\">n</span>\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">C.C2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">C_mut.C2</span> <span class=\"n\">n</span>\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">C'.C1'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">C_mut.C1'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">C_type</span><span class=\"o\">},</span> <span class=\"n\">C_mut</span> <span class=\"n\">t</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C1</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C'.C1'</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c_depth</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 263236197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638324480
    },
    {
        "content": "<p>I think you want this on your example, although there is still some work to do to prove the calls decrease:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">c_depth</span><span class=\"o\">,</span> <span class=\"n\">c'_depth</span>\n<span class=\"k\">with</span> <span class=\"n\">c_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C1</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c'_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"n\">c'_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C'.C1'</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">c_depth</span> <span class=\"n\">c</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">psum.cases_on</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">C.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">C'.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">p.2</span><span class=\"o\">))⟩],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 263236285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638324553
    },
    {
        "content": "<p>Here's an example using a plain inductive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">C_kind</span>\n<span class=\"bp\">|</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">C_kind</span>\n<span class=\"bp\">|</span> <span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">C_kind</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">CC</span> <span class=\"o\">:</span> <span class=\"n\">C_kind</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">CC</span> <span class=\"o\">(</span><span class=\"n\">C_kind.C'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">CC</span> <span class=\"o\">(</span><span class=\"n\">C_kind.C</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">CC</span> <span class=\"o\">(</span><span class=\"n\">C_kind.C</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">CC</span> <span class=\"o\">(</span><span class=\"n\">C_kind.C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">CC</span> <span class=\"o\">(</span><span class=\"n\">C_kind.C'</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cc_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span><span class=\"o\">},</span> <span class=\"n\">CC</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CC.C1</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">cc_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CC.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">CC.C1'</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cc_depth</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 263236457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638324740
    },
    {
        "content": "<p>Thank you! I'll first try and see if I can expand your partial solution for the mutually inductive types into a solution that works for my use case, and, if not, I can use the parametric solution as a backup! :) (But tomorrow, it's past 2am here!)</p>",
        "id": 263236646,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638325022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have any idea why in yours works but mine doesn't?</p>",
        "id": 263236653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638325027
    },
    {
        "content": "<p>you have <code>n</code> and <code>t</code> in reversed order relative to their occurrence in <code>C_mut</code>, this seems to trip lean up</p>",
        "id": 263236761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638325165
    },
    {
        "content": "<p>Ah, thanks</p>",
        "id": 263236974,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638325440
    },
    {
        "content": "<p>I couldn't resist trying a little more and started setting things up to prove the well-foundedness of the recursion in this toy example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">psum.cases_on</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">C.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">C'.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">p.2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">c_depth</span><span class=\"o\">,</span> <span class=\"n\">c'_depth</span>\n<span class=\"k\">with</span> <span class=\"n\">c_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C.C1</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"bp\">$</span> <span class=\"n\">psigma.mk</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"bp\">$</span> <span class=\"n\">psigma.mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c'</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">psum.cases_on</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c'_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"n\">c'_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C'.C1'</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"bp\">$</span> <span class=\"n\">psigma.mk</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"bp\">$</span> <span class=\"n\">psigma.mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">c_depth</span> <span class=\"n\">c</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">metric</span><span class=\"o\">⟩],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>When I attempt to rewrite <code>psum.cases_on</code> with its definition, I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kd\">lemma</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"n\">equality</span> <span class=\"n\">nor</span> <span class=\"n\">a</span> <span class=\"n\">iff</span>\n</code></pre></div>",
        "id": 263239501,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638328366
    },
    {
        "content": "<p>oops... yeah ofc cases_on is like... a constant, an axiom so ofc there's no \"definition\"</p>",
        "id": 263239528,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638328440
    },
    {
        "content": "<p><del>just go to bed already, staying up late harms your cognitive abilities and makes you even worse at lean</del></p>",
        "id": 263239600,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638328549
    },
    {
        "content": "<p>You're probably right! I'm about to do so, but for tomorrow morning: is there anyway that I can then evaluate (given that I know, for the proof in <code>c_depth</code>, that the value of the <code>psum</code> uses the <code>psum.inl</code> constructor) the <code>psum.cases_on</code> application to the left case (the application of <code>C.sizeof</code>)?</p>\n<p>Will I then have similar issues with showing <code>C.sizeof (C.C1 n c') &gt; C'.sizeof c'</code>?</p>",
        "id": 263239899,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638328903
    },
    {
        "content": "<p>If you are going to make a definition for it, you may as well not use <code>psum.cases_on</code> and write it using the equation compiler instead</p>",
        "id": 263239956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638328963
    },
    {
        "content": "<p>I won't be able to do so with <code>C.sizeof</code> and <code>C'.sizeof</code> however, as defining these functions \"manually\" would run into the same issue I'm stuck with. Is there any way around this?</p>",
        "id": 263240035,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638329051
    },
    {
        "content": "<p>you don't need to define <code>C.sizeof</code>, it is defined by the mutual induction simulation framework</p>",
        "id": 263240062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638329093
    },
    {
        "content": "<p>but if that isn't sufficient, you either have to use the underlying <code>_nest</code> inductive that lean generates (which is equivalent to the inductive I wrote but much uglier), or do the simulation yourself</p>",
        "id": 263240151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638329189
    },
    {
        "content": "<p>I believe the proof of <code>C.sizeof (C.C1 n c') &gt; C'.sizeof c'</code> is that the lhs is defeq to <code>1 + sizeof n + C'.sizeof c'</code> and then there is some linear arithmetic</p>",
        "id": 263240262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638329327
    },
    {
        "content": "<p>In your code snippet, you can replace <code>rw psum.cases_on</code> with <code>dsimp only</code></p>",
        "id": 263240371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638329466
    },
    {
        "content": "<p>Yes, you're absolute right, I was concerned I would hit upon the same error when attempting to do a rewrite using the definitions of <code>C.sizeof</code> and <code>C'.sizeof</code>.</p>\n<p>Having replaced the <code>psum.cases_of </code> with an explicit match:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">C'</span>\n<span class=\"k\">with</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"k\">with</span> <span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n         <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">p.2</span>\n         <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C'.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">p.2</span>\n      <span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">c_depth</span><span class=\"o\">,</span> <span class=\"n\">c'_depth</span>\n<span class=\"k\">with</span> <span class=\"n\">c_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C.C1</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"bp\">$</span> <span class=\"n\">psigma.mk</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"bp\">$</span> <span class=\"n\">psigma.mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c'</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">metric._match_1</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">psigma.fst</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c'_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"n\">c'_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C'.C1'</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"bp\">$</span> <span class=\"n\">psigma.mk</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"bp\">$</span> <span class=\"n\">psigma.mk</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">c_depth</span> <span class=\"n\">c</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">metric</span><span class=\"o\">⟩],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 263240591,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638329722
    },
    {
        "content": "<p>I was thinking more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">p.2</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C'.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">p.2</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">C.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">C'.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 263240686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638329807
    },
    {
        "content": "<p>But it doesn't really matter, you can just <code>have C'.sizeof _ c' &lt; C.sizeof _ c,</code> instead of <code>have metric (psum.inl $ psigma.mk n c) &gt; metric (psum.inr $ psigma.mk (n+1) c'),</code> and <code>assumption</code> will handle the unfolding</p>",
        "id": 263240725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638329872
    },
    {
        "content": "<p>after a bit of optimization, here's a version that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">c_depth</span><span class=\"o\">,</span> <span class=\"n\">c'_depth</span>\n<span class=\"k\">with</span> <span class=\"n\">c_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C.C1</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">sizeof</span> <span class=\"n\">c'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">C.sizeof</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c'_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"n\">c'_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C'.C1'</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">sizeof</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C'.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">C'.sizeof</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">c_depth</span> <span class=\"n\">c</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">metric</span><span class=\"o\">⟩],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 263240903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638330042
    },
    {
        "content": "<p>Thank you very much! I'll try and decipher it fully in the morning.</p>\n<p>I did notice however that it seems that the default definition of <code>C.sizeof n (C.C1 n c')</code> is <code>1 + sizeof n + sizeof c'</code>, which would seem problematic, but clearly not as you have a working solution! :)</p>",
        "id": 263241035,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638330241
    },
    {
        "content": "<p>What's problematic about it?</p>",
        "id": 263241194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638330397
    },
    {
        "content": "<p>There is a slight inconvenience that it ends with <code>sizeof c'</code> instead of <code>C'.sizeof _ c'</code> but <code>sizeof</code> is a typeclass function and with the typeclass argument it unfolds to the same thing in the end</p>",
        "id": 263241230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638330458
    },
    {
        "content": "<p>Sorry, ignored me, I'm exhausted! Shouldn't be working on lean in this state! You're completely right!</p>",
        "id": 263241323,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638330579
    },
    {
        "content": "<p>Still can't sleep, however, I managed to successfully apply this methodology to my use case! Thank you all for your help!</p>\n<p>But I have a further problem, I have to nest one of my types within a function passed as an argument to one of my other types' constructors. In this case the default associated <code>sizeof</code> does not consider the size of the types \"nested\" within the codomain of this function. If I need to recurse over the elements in this codomain, the metric induced by <code>sizeof</code> does not work.</p>\n<p>Here is my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">C'</span>\n<span class=\"k\">with</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"k\">with</span> <span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">C'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">C.sizeof</span> <span class=\"n\">_</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">C'.C1'</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">list.foldl</span> <span class=\"n\">max</span> <span class=\"mi\">0</span>\n    <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C.sizeof</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">c_depth</span><span class=\"o\">,</span> <span class=\"n\">c'_depth</span>\n<span class=\"k\">with</span> <span class=\"n\">c_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C.C1</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩),</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c'_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"n\">c'_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C'.C1'</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list.foldl</span> <span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">⟩),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">c_depth</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">metric</span><span class=\"o\">⟩],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I have changed the definition of the metric to find the maximal depth of any of the elements nested with the function. However, when I try to write the proof that my metric decreases for the cases of my function, if I try and run the tactic <code>rw metric</code> when the input is some element of C', the rewrite fails with the error message <code>failed</code>. Any ideas why this is?</p>",
        "id": 263249327,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638339762
    },
    {
        "content": "<p>Actually, sorry, the metric function here is not actually what I want, it should be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">C.C1</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">⟩))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">C.C2</span> <span class=\"n\">n</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">C'.C1'</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">list.foldl</span> <span class=\"n\">max</span> <span class=\"mi\">0</span>\n    <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">⟩))</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Which seems to prevent me from using the automatically generated <code>sizeof</code> to solve my bootstrapping problem...</p>",
        "id": 263249877,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638340367
    },
    {
        "content": "<p>tip: if <code>rw</code> says failed, that usually means that the equation compiler generated equations that are different from what you expect. to see the generated equations, type <code>#print prefix metric</code> on an empty line</p>",
        "id": 263250178,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638340696
    },
    {
        "content": "<p>Thank you for the hint! However, I still have the deeper problem that the <code>metric</code> function itself now suffers from the same problem I was trying to solve...</p>",
        "id": 263250456,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638341073
    },
    {
        "content": "<p>The problem was that this is thing you were trying to rewrite</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">C'.C1'</span> <span class=\"o\">(</span><span class=\"n\">n.add</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">c'_ᾰ</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>but rewriting using the equation lemma involves looking for something of this form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C'.C1'</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>This ends up being a way to fix the rewrite:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">C'.C1'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 263250671,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638341360
    },
    {
        "content": "<p>Thank you! I figured out a way of fixing this by massaging the definition of <code>metric</code> as in my second to last post :)</p>",
        "id": 263250767,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638341485
    },
    {
        "content": "<p>The definition of <code>C.sizeof</code> in the presence of functions does not have the right behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">C._mut_.sizeof</span>\n\n<span class=\"kd\">@[irreducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">C._mut_.sizeof</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">)),</span> <span class=\"n\">C._mut_</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">)),</span>\n  <span class=\"n\">C._mut_.rec</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">C._mut_</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">psum.inr</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"o\">()⟩)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span>\n     <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeof</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">ih</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeof</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span>\n       <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C._mut_</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">psum.inl</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"o\">()⟩)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span>\n     <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeof</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This says that <code>C'.sizeof (C'.C1 n f) = 1 + sizeof n</code> without taking <code>f</code> into account.</p>",
        "id": 263250831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638341543
    },
    {
        "content": "<p>I really think you should turn back at this point, because this means that every definition you make on this mutual inductive will have this issue</p>",
        "id": 263250923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638341657
    },
    {
        "content": "<p>I'm aware :) Hence my new definition of metric that does not use <code>sizeof</code>. However this definition suffers from the same problem I started off with... I guess there is no way to get around this?</p>",
        "id": 263251082,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638341731
    },
    {
        "content": "<p>Well, you can do induction on <code>C._mut_</code>...</p>",
        "id": 263251103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638341752
    },
    {
        "content": "<p>I'm going to have to figure out what that is first! :D</p>",
        "id": 263251207,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638341867
    },
    {
        "content": "<p>no but really, don't touch mutual inductives even with a 10ft pole! they're a can of worms <span aria-label=\"bug\" class=\"emoji emoji-1f41b\" role=\"img\" title=\"bug\">:bug:</span> what stops you from using an index parameter? I don't think using an index parameter would cause problems, I've done this before, you don't need dummy parameters or anything I swear</p>",
        "id": 263251211,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638341874
    },
    {
        "content": "<p>which looks like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">metric'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">C._mut_</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C1_0</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">metric'</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C2_0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C1'_1</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">list.foldl</span> <span class=\"n\">max</span> <span class=\"mi\">0</span>\n    <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">metric'</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">metric'</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 263251293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638341952
    },
    {
        "content": "<p>but at this point you may as well use the plain inductive, which is basically the same thing as this but without lean playing middleman (poorly)</p>",
        "id": 263251305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638341988
    },
    {
        "content": "<p>I believe you! I'm open to transitioning to this solution, but I'm curious to see if it is possible out of intellectual curiosity :) Clearly it couldn't hurt me to learn more lean! :D</p>",
        "id": 263251311,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638342002
    },
    {
        "content": "<p>That is to say, this inductive that lean generates:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">C'</span>\n<span class=\"k\">with</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"k\">with</span> <span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">C'</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">C._mut_</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">C._mut_</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">C._mut_.C1_0</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">C._mut_</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">psum.inr</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"o\">()⟩)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">→</span>\n  <span class=\"n\">C._mut_</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">psum.inl</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"o\">()⟩)</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"n\">C._mut_.C2_0</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C._mut_</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">psum.inl</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"o\">()⟩)</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"n\">C._mut_.C1'_1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C._mut_</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">psum.inl</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"o\">()⟩)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"bp\">→</span>\n  <span class=\"n\">C._mut_</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">unit</span><span class=\"o\">),</span> <span class=\"n\">psum.inr</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"o\">()⟩)</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>is essentially the same as the <code>CC</code> inductive from my <a href=\"#narrow/stream/113489-new-members/topic/Showing.20mutually.20inductive.20recursion.20is.20well.20founded/near/263236457\">earlier message</a>.</p>",
        "id": 263251636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638342168
    },
    {
        "content": "<p>Thank you very much for the help, my first partial attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">C'</span>\n<span class=\"k\">with</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"k\">with</span> <span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">C'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">metric'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">C._mut_</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C1_0</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">metric'</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C2_0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C1'_1</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">list.foldl</span> <span class=\"n\">max</span> <span class=\"mi\">0</span>\n    <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">metric'</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">metric'</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">c_depth</span><span class=\"o\">,</span> <span class=\"n\">c'_depth</span>\n<span class=\"k\">with</span> <span class=\"n\">c_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C.C1</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩),</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"o\">},</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">metric'</span> <span class=\"n\">c'</span><span class=\"o\">),</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c'_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"n\">c'_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C'.C1'</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list.foldl</span> <span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">⟩),</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"o\">},</span>\n      <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">list.foldl</span> <span class=\"n\">max</span> <span class=\"mi\">0</span>\n        <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">))),</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">c_depth</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">metric</span><span class=\"o\">⟩],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I will complete the more complex remaining case after a few hours sleep :)</p>",
        "id": 263252544,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638343120
    },
    {
        "content": "<p>Note that this code is also a lot simpler if you skip the \"bootstrap\" part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">c_depth_mut</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">C._mut_</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C1_0</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c_depth_mut</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C2_0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C1'_1</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">list.foldl</span> <span class=\"n\">max</span> <span class=\"mi\">0</span>\n    <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">c_depth_mut</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c_depth</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">c_depth_mut</span> <span class=\"n\">c</span>\n<span class=\"kd\">def</span> <span class=\"n\">c'_depth</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">c_depth_mut</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 263252897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638343444
    },
    {
        "content": "<p>This has some fundamental advantages too, for example it works even if <code>C1'</code> had a function over an infinite set instead of <code>fin n</code>, while <code>metric</code> only works when the order type of the inductive is at most <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></p>",
        "id": 263252962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638343505
    },
    {
        "content": "<p>In case this is useful for everyone, here is my final solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.list.of_fn</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">C'</span>\n<span class=\"k\">with</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"k\">with</span> <span class=\"n\">C'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">C1'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">C'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nat_list_max</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">nat_list_max</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">max_ge_elems</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">ls</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">nat_list_max</span> <span class=\"n\">ls</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ls</span> <span class=\"n\">n</span> <span class=\"n\">n_in_ls</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">ls</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">list.not_mem_nil</span> <span class=\"n\">n</span> <span class=\"n\">n_in_ls</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">ls_hd</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">ls_tl</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">n_in_ls</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n_in_ls</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat_list_max</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_in_ls</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_max_of_le_left</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat_list_max</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_max_of_le_right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ls_ih</span> <span class=\"n\">n_in_ls</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">f_i_in_list_fn</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">list.of_fn</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">α</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">list.mem_of_fn</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.mem_range_self</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">metric'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">C._mut_</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C1_0</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">metric'</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C2_0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C._mut_.C1'_1</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">nat_list_max</span> <span class=\"o\">(</span><span class=\"n\">list.of_fn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">metric'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">metric</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">metric'</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">metric'</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">c_depth</span><span class=\"o\">,</span> <span class=\"n\">c'_depth</span>\n<span class=\"k\">with</span> <span class=\"n\">c_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C.C1</span> <span class=\"n\">n</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩),</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"o\">},</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">metric'</span> <span class=\"n\">c'</span><span class=\"o\">),</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">c'_depth</span> <span class=\"n\">c'</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.C2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span> <span class=\"n\">c'_depth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C'</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">c'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">C'.C1'</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list.foldl</span> <span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">metric</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">c'</span><span class=\"o\">⟩),</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"o\">},</span>\n      <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">fin.elim0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">metric'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span>\n        <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">nat_list_max</span> <span class=\"o\">(</span><span class=\"n\">list.of_fn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">metric'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">nat.add_comm</span> <span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">nat.add_le_add_right</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">max_ge_elems</span> <span class=\"o\">(</span><span class=\"n\">f_i_in_list_fn</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">metric'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))),</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">c_depth</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">metric</span><span class=\"o\">⟩],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 263455431,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1638459506
    },
    {
        "content": "<p>congratulations... oh wait. I have a sense of what the next stage would be like <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> you will find yourself typing <code>cases</code> and <code>induction</code> to traverse your definitions and boom... you got 40 cases? how could you deal with... boom, now there are so many cases <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 263458151,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638460502
    },
    {
        "content": "<p>well founded recursion doesn't compare with the mess that you're about to get into...</p>",
        "id": 263458281,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638460560
    },
    {
        "content": "<p>anyway, as usual, if you have any problems don't be afraid to ask us!</p>",
        "id": 263459224,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638460868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453259\">Julian Sutherland</span> has marked this topic as resolved.</p>",
        "id": 263666841,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638574086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453259\">Julian Sutherland</span> has marked this topic as unresolved.</p>",
        "id": 263666845,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638574091
    }
]