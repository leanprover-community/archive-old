[
    {
        "content": "<p>How do I find theorems related to addition, multiplication, etc on the natural numbers?  Grepping through the source of mathlibisn't giving me any love, e.g. <code>neg_add_self</code> seems to only be defined as a lemma in ./category_theory/abelian/non_preadditive.lean .  I currently need <code>n + m.succ = n.succ + m</code> but I'm sure there will be many, many more I need in the future.</p>",
        "id": 291201226,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1659018774
    },
    {
        "content": "<p>Have you tried the <code>library_search</code> tactic?</p>",
        "id": 291201706,
        "sender_full_name": "David Renshaw",
        "timestamp": 1659018991
    },
    {
        "content": "<p>I'm pretty sure as mathlib is written in a general style, you won't find many theorems proven specifically for natural numbers. There are theorems that apply for natural numbers but they are actually proven for something more generic. This stuff is too high for me though, but I'm pretty sure this is the case. <code>library_search</code> should always work.</p>",
        "id": 291201720,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659019000
    },
    {
        "content": "<p>Guessing names and vscode autocompletion - in this case, I assumed it would have <code>add_succ</code> or <code>succ_add</code> in the name, and probably be in the <code>nat</code> namespace. Turns out it's neither of those (they say both sides of your equation are equal to <code>(n + m).succ</code>, but it is <code>nat.succ_add_eq_succ_add</code></p>",
        "id": 291202124,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659019185
    },
    {
        "content": "<p>One issue with <code>grep</code> is that many theorems about additive groups (etc) are written only in multiplicative form, and <code>to_additive</code> translates them automatically</p>",
        "id": 291202339,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659019274
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_mul_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">mul_left_inv</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>which defines <code>neg_add_self</code></p>",
        "id": 291202402,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659019307
    },
    {
        "content": "<p>But the generated stuff should always be present in the documentation right?</p>",
        "id": 291202898,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659019516
    },
    {
        "content": "<p>At least that's my impression</p>",
        "id": 291202951,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659019545
    },
    {
        "content": "<p>Yes, indeed - just not in the source itself</p>",
        "id": 291203108,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1659019600
    },
    {
        "content": "<p>Huh, when I try to use <code>library_search</code> in VS Code, I get <code>unknown identifier 'library_search'</code></p>",
        "id": 291207529,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1659021401
    },
    {
        "content": "<p>Did you import anything from mathlib? If you didn't then library_search wouldn't be present!</p>",
        "id": 291208079,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659021622
    },
    {
        "content": "<p>Please import anything from mathlib.</p>",
        "id": 291208111,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1659021639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511228\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20find.20.60nat.60.20theorms.20in.20mathlib.3F/near/291208111\">said</a>:</p>\n<blockquote>\n<p>Please import anything from mathlib.</p>\n</blockquote>\n<p>Success!  Thank you.</p>",
        "id": 291209270,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1659022166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20find.20.60nat.60.20theorms.20in.20mathlib.3F/near/291202339\">said</a>:</p>\n<blockquote>\n<p>One issue with <code>grep</code> is that many theorems about additive groups (etc) are written only in multiplicative form, and <code>to_additive</code> translates them automatically</p>\n</blockquote>\n<p>I have mostly moved from <code>grep</code> (<code>rg</code> really) to the mathlib docs search box. It's not quite as precise but including autogenerated declarations and the limited amount of fuzzy matching really does give it some advantages.</p>",
        "id": 291309434,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1659093892
    }
]