[
    {
        "content": "<p>So I've prepared a lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">honey</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">mh</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">),</span>\n   <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n   <span class=\"k\">from</span> <span class=\"n\">or.cases_on</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnq</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">mh</span> <span class=\"n\">hnq</span><span class=\"o\">))</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>to support the following theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mint</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">mh</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n   <span class=\"n\">or.cases_on</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">mh</span> <span class=\"o\">(</span><span class=\"n\">honey</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnq</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hnp</span><span class=\"o\">))</span> <span class=\"n\">hnp</span><span class=\"o\">))</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>but I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">honey</span> <span class=\"n\">_</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">),</span> <span class=\"n\">hnp</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>What gives??</p>",
        "id": 252311127,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631023825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435815\">@Lucas Teixeira</span> Probably <code>p</code> and <code>q</code> are explicit arguments of <code>honey</code>.</p>",
        "id": 252311515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631023975
    },
    {
        "content": "<p>Do you have <code>variables (p q : Prop)</code> somewhere above that lemma?</p>",
        "id": 252311548,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631023987
    },
    {
        "content": "<p>If you turn it into <code>variables {p q : Prop}</code> the error should go away.</p>",
        "id": 252311581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631024004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> Yes that worked! (Although now I see I have further problems with my proof haha). Could you give some indication as to why that worked?</p>",
        "id": 252312128,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631024214
    },
    {
        "content": "<p>This should be somewhere in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>, looks like S6.5 is useful</p>",
        "id": 252313844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631024873
    },
    {
        "content": "<p>Ahh, gotcha. Still a couple of chapters behind. Thank you for the help!</p>",
        "id": 252314314,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631025025
    }
]