[
    {
        "content": "<p>I'm trying to show simple examples of matrix proofs. If the definition of a matrix is a <code>m -&gt; n -&gt; k</code>, then why does the first proof not typecheck? I understand why the second one (specialized form of the #data/matrix proof) works.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Multiplication of a matrix by a real scalar, doesn&#39;t work</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n<span class=\"c1\">-- type expected at</span>\n<span class=\"c1\">--  s * A i j</span>\n<span class=\"c1\">-- term has type</span>\n<span class=\"c1\">--  ℝ</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span>  <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">smul_val</span> <span class=\"n\">s</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 200506889,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591853186
    },
    {
        "content": "<p>You need to use <code>λ</code>, not <code>∀</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 200507190,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591853697
    },
    {
        "content": "<p>Totally. I should sleep more, confusing one triangle looking symbol with another.</p>",
        "id": 200507213,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591853757
    },
    {
        "content": "<p>However,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">smul_val</span>\n<span class=\"c1\">-- matrix.smul_val :</span>\n<span class=\"c1\">--   ∀ {m n : Type u_1} [_inst_2 : fintype m] [_inst_3 : fintype n] {α : Type u_2} [_inst_5 : semiring α] (a : α)</span>\n<span class=\"c1\">--   (A : matrix m n α) (i : m) (j : n), (a • A) i j = a * A i j</span>\n</code></pre></div>",
        "id": 200507282,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591853848
    },
    {
        "content": "<p>Which means I can't just supply <code>matrix.smul_val s A</code> since it needs some <code>i j</code>s explicitly</p>",
        "id": 200507337,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591853922
    },
    {
        "content": "<p>And simp can't solve it either. Gotta supply some <code>funext</code>.</p>",
        "id": 200507512,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591854240
    },
    {
        "content": "<p><code>by congr</code> will solve it. Here's a more explicit term proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Multiplication of a matrix by a real scalar, doesn&#39;t work</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_arg</span> <span class=\"o\">((</span><span class=\"err\">•</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 200507636,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591854400
    },
    {
        "content": "<p><code>congr</code> is not something I'm very familiar with, the tutorials didn't really cover it in depth. Any good docs on it? Mouse-over for it gives no info either. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr\">https://leanprover-community.github.io/mathlib_docs/tactics.html#congr</a> doesn't mention <code>congr_arg</code> directly, <code>solve_by_elim</code> does though.</p>",
        "id": 200507728,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591854597
    },
    {
        "content": "<p>Is it more idiomatic to use <code>congr_arg</code> or <code>funext</code>, like in:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">funext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">smul_val</span> <span class=\"n\">s</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200507873,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591854808
    },
    {
        "content": "<p><code>congr</code> stands for congruence in the sense of <a href=\"https://en.wikipedia.org/wiki/Congruence_relation\">congruence relation</a>. Now that I look at the docs, I'm not so sure about the tactic, but lemmas starting with <code>congr</code> are frequently useful when you have a function applied to both sides of an equality.</p>",
        "id": 200507927,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591854846
    },
    {
        "content": "<p>I'm not sure what's more idiomatic. Maybe this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">funext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200508049,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591855029
    },
    {
        "content": "<p>Your statement that we're applying a function on both sides implies the fact that <code>\\all (t : R), s  • t = s * t</code>. Does <code>rfl</code> also utilize that?</p>",
        "id": 200508054,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591855046
    },
    {
        "content": "<p><code>rfl</code> is a term that proves an equality by asserting that the two sides are definitionally equal. <code>refl</code> is the tactic version of that. </p>\n<p>The goal that <code>refl</code> closes in this case is: <code>(s • A) i j = s * A i j</code></p>\n<p>To see that this is a definitional equality, you can look at how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_scalar/src\">src#matrix.has_scalar</a> is defined. Well, it directs you to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_scalar/src\">src#pi.has_scalar</a>, which is <code>λ s x, λ i, s • (x i)</code>. Here, <code>•</code> is the scalar multiplication of <code>ℝ</code>, which is definitionally the same as the ordinary multiplication <code>*</code>.</p>",
        "id": 200508526,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591855660
    },
    {
        "content": "<p>Sorry... it's late, so I'm probably not explaining this very well.</p>",
        "id": 200508615,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591855789
    },
    {
        "content": "<p>It's a great explanation, thanks for the insight about the underlying <code>pi.has_scalar</code> definition. It's impressive how far down the <code>rfl</code> term goes without needing additional help. So in this example, recognizing that scalar multiplication <code>((•) s)</code>  on the underlying field is just that field's multiplication.</p>",
        "id": 200508822,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591856093
    },
    {
        "content": "<p><code>rfl</code> can be impressive, but since it can force Lean to unfold lots and lots, it's sometimes better to use lemmas instead. I found the discussion in <a href=\"#narrow/stream/113489-new-members/topic/zero_max.20a.20rfl.20lemma/near/178820379\">this thread</a> enlightening.</p>",
        "id": 200509152,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591856632
    }
]