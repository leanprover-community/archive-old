[
    {
        "content": "<p>When I declare a family of sets indexed by naturals as in </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span>\n</code></pre></div>\n\n\n<p>does Lean assume that <code>A</code> is an infinite family of sets? If I want to assert that A is a finite family of sets indexed by naturals, can I still use ℕ as the index set or do I have to make some workaround?</p>",
        "id": 204323593,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595117180
    },
    {
        "content": "<p>Lean doesn't assume anything about the image of <code>A</code>.</p>",
        "id": 204323668,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595117344
    },
    {
        "content": "<p>If I wanted to define a structure where each instance of the structure has an indexed family of n sets , for a particular n, is there a good way to accomplish this? I think the method below works but I'm wondering if I can omit the (i \\leq n) somehow.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">ind_fam</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204324773,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595119383
    },
    {
        "content": "<p>Take a look at <code>fin n</code>. This may be what you need, but I haven't quite used it before.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">ind_fam</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204326505,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595122534
    },
    {
        "content": "<p><code>fin (n+1)</code> has size <code>n+1</code>.</p>",
        "id": 204342263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595153277
    },
    {
        "content": "<p>I thought that was what the initial post meant by <code>(i : ℕ), (i ≤ n)</code>, but maybe you mean to say something I don't grasp yet.</p>",
        "id": 204350761,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595166431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> The type <code>fin n</code> is a package made of a value, which is a natural number, together with a proof that the value is strictly less than <code>n</code>. So <code>fin (n+1)</code> is the set <code>{0,1,...,n}</code> because in Lean naturals start at <code>0</code>.</p>",
        "id": 204350771,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595166456
    }
]