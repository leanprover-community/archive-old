[
    {
        "content": "<p>Dear All,</p>\n<p>more struggles...  I am trying to prove something analogous to the code below, but I can't.  Also in the specific example below, I am unable to find a proof of the fact that the <code>nat_degree</code> of a non-zero polynomial equals the maximum of the support.  What am I doing wrong?  How can I prove this?  I always have problems accessing the <code>xx</code>-part of <code>option xx</code>.</p>\n<p>Thank you!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">degree</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">defs</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">exit</span>\n</code></pre></div>",
        "id": 209348595,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599545242
    },
    {
        "content": "<p>Hey, you ask good questions now, and in a good way. You could ask this in <code>#maths</code>. The question seems not to be one about polynomials at all -- this looks like something which could/should be in the <code>finsupp</code> API, and there's a lot to get your head around with finsupps.</p>",
        "id": 209349176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546034
    },
    {
        "content": "<p>I would have thought that <code>f \\ne 0</code> was the canonical way to say that f was non-zero, rather than <code>f.support.nonempty</code>.</p>",
        "id": 209349199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209349176\">said</a>:</p>\n<blockquote>\n<p>Hey, you ask good questions now, and in a good way. You could ask this in <code>#maths</code>. The question seems not to be one about polynomials at all -- this looks like something which could/should be in the <code>finsupp</code> API, and there's a lot to get your head around with finsupps.</p>\n</blockquote>\n<p>Mwah... <code>nat_degree</code> is not really something about <code>finsupp</code>s, is it?</p>",
        "id": 209349297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599546191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209349176\">said</a>:</p>\n<blockquote>\n<p>Hey, you ask good questions now, and in a good way. You could ask this in <code>#maths</code>. The question seems not to be one about polynomials at all -- this looks like something which could/should be in the <code>finsupp</code> API, and there's a lot to get your head around with finsupps.</p>\n</blockquote>\n<p>Thank you!  I am glad that some progress can be detected from the outside!</p>\n<p>To be honest, I try to avoid finsets as much as possible, since I do not really understand them.  This is why I thought that this was an issue with polynomials.  I am happy to see a solution using finsupp, though!</p>",
        "id": 209349316,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599546226
    },
    {
        "content": "<p>No but degree is, and degree equals nat_degree if f isn't zero</p>",
        "id": 209349318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209349199\">said</a>:</p>\n<blockquote>\n<p>I would have thought that <code>f \\ne 0</code> was the canonical way to say that f was non-zero, rather than <code>f.support.nonempty</code>.</p>\n</blockquote>\n<p>I am happy with either: I have a proof of the equivalence of <code>f \\neq 0</code> and <code>f.support.nonempty</code>!</p>",
        "id": 209349362,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599546258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209349318\">said</a>:</p>\n<blockquote>\n<p>No but degree is, and degree equals nat_degree if f isn't zero</p>\n</blockquote>\n<p>Exactly!  As much as I try to steer away from <code>degree</code>, <code>nat_degreee</code> is defined in terms of <code>degree</code> and that makes things very hard for me.</p>",
        "id": 209349389,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599546320
    },
    {
        "content": "<p>Right. The point I'm making is that if you want to state a bunch of lemmas and you switch between the two notions in the statements of the lemmas then you'll forever have to be rewriting the equivalence when you're trying to use your lemmas</p>",
        "id": 209349398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546343
    },
    {
        "content": "<p>I'm sorry the API isn't there, this shouldn't be too hard. Just sorry it and move on, and I'll fix it when I get to a computer?</p>",
        "id": 209349449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546384
    },
    {
        "content": "<p>You just need some result of the form finset.sup = finset.max which is surely there</p>",
        "id": 209349467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209349449\">said</a>:</p>\n<blockquote>\n<p>I'm sorry the API isn't there, this shouldn't be too hard. Just sorry it and move on, and I'll fix it when I get to a computer?</p>\n</blockquote>\n<p>Ok, thank you!  I am curious to see how to fix it, since this might teach me how to deal with <code>option</code>s!</p>",
        "id": 209349468,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599546430
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">defs</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">max&#39;</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">le_max&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">leading_coeff</span> <span class=\"bp\">â‰ </span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">leading_coeff_eq_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nonempty_iff_ne_empty</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">support_eq_empty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">le_nat_degree_of_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">max&#39;_mem</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209349473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599546441
    },
    {
        "content": "<p>The idea is that users like us shouldn't have to worrying about this sort of thing at all</p>",
        "id": 209349482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> thanks!  I'll use your code right now!</p>",
        "id": 209349487,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599546471
    },
    {
        "content": "<p>Because it should just all be there</p>",
        "id": 209349488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546474
    },
    {
        "content": "<p>Kevin, do we have a notion of degree for finsupps?</p>",
        "id": 209349533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599546500
    },
    {
        "content": "<p>Ok, I am slowly understanding the difference between things that I should worry about and things that I should not!</p>",
        "id": 209349536,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599546506
    },
    {
        "content": "<p>I'm not really aware of it</p>",
        "id": 209349537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599546507
    },
    {
        "content": "<p>But actually the reason we discover holes in the library like this is because people are actually <em>using</em> the library</p>",
        "id": 209349541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546536
    },
    {
        "content": "<p>I was filling in holes in the <code>with_bot</code> library yesterday.</p>",
        "id": 209349573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546581
    },
    {
        "content": "<p>Degree is just defined to be some max</p>",
        "id": 209349635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546615
    },
    {
        "content": "<p>Or some sup</p>",
        "id": 209349642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599546636
    },
    {
        "content": "<p>Yes, and to work with <code>at_infty</code> I was trying to work with <code>with_top</code> and <code>trailing_degree</code>s, but it got ugly...</p>",
        "id": 209349726,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599546724
    },
    {
        "content": "<p>One should imagine the API you want and then find it or complain that it's not there :-)</p>",
        "id": 209350730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599547803
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> This. It is actually really valuable to spec out the API when you find it missing. This is the hard part of library building - the proofs are usually all trival</p>",
        "id": 209353193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599550054
    },
    {
        "content": "<p>Especially, once you find an individual proof going not as smoothly as you would hope, rather than making a huge proof anyway you should step back and ask yourself what theorem you would like to have found in the library, and write its statement precisely. Then PR it</p>",
        "id": 209353370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599550161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209353370\">said</a>:</p>\n<blockquote>\n<p>Especially, once you find an individual proof going not as smoothly as you would hope, rather than making a huge proof anyway you should step back and ask yourself what theorem you would like to have found in the library, and write its statement precisely. Then PR it</p>\n</blockquote>\n<p>Ok, so one thing that would be very valuable for me, at the moment, would be to have all the statements about degree, nat_degree, leading_coeff,... (in data.polynomial.degree.basic) available also for <code>trailing_degree</code>, <code>nat_trailing_degree</code>, <code>trailing_coeff</code>,...</p>",
        "id": 209353590,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599550309
    },
    {
        "content": "<p>write them down</p>",
        "id": 209353606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599550322
    },
    {
        "content": "<p>I have started this, and got quite a bit into it, but could not reprove everything</p>",
        "id": 209353645,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599550325
    },
    {
        "content": "<p>don't worry about that</p>",
        "id": 209353656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599550332
    },
    {
        "content": "<p>just statements</p>",
        "id": 209353668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599550343
    },
    {
        "content": "<p>ok, writing them down (and almost proving them) was a simple matter of using the right sed.  with a couple of exceptions!</p>",
        "id": 209353698,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599550364
    },
    {
        "content": "<p>if you post them here people can probably prove them in a few minutes and then bam you've got a PR</p>",
        "id": 209353705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599550370
    },
    {
        "content": "<p>ok, I will get to it!</p>",
        "id": 209353721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599550383
    },
    {
        "content": "<p>the important part is to identify those pain points and what statements would avoid them</p>",
        "id": 209353775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599550420
    },
    {
        "content": "<p>Ok, I have converted the statements in data.polynomial.degree.basic to their upside down.  The proofs that just went through with mechanical twitching are not commented.  The proofs that do not work are commented.  Should I simply make a gist and post the link here?</p>",
        "id": 209361221,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599555705
    },
    {
        "content": "<p>I am not necessarily interested in <em>all</em> these lemmas.  What I do care about is that the trailing coefficient of a product of polynomials is the product of the trailing coefficients (at least when the product of the trailing coefficients is non-zero).</p>",
        "id": 209361335,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599555768
    },
    {
        "content": "<p>Even better than a gist, would be to push it to a branch of mathlib</p>",
        "id": 209361402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599555832
    },
    {
        "content": "<p>Do you already have write access to mathlib branches on github?</p>",
        "id": 209361447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599555844
    },
    {
        "content": "<p>I am not sure: besides being new to Lean, I am also new to github...</p>",
        "id": 209361543,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599555929
    },
    {
        "content": "<p>I feel like I am constantly wasting everybody's time with my not being able to do basic stuf...</p>",
        "id": 209361582,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599555959
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 209361651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599555988
    },
    {
        "content": "<p>I accepted!</p>",
        "id": 209361665,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599556004
    },
    {
        "content": "<p>(I assume that this was what I was supposed to do!  Ahaha)</p>",
        "id": 209361679,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599556016
    },
    {
        "content": "<p>So, did you write those lemmas in a file inside mathlib?</p>",
        "id": 209361703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599556033
    },
    {
        "content": "<p>I wrote them inside a project that I created.  Does that count?</p>",
        "id": 209361724,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599556055
    },
    {
        "content": "<p>Hmm, not really</p>",
        "id": 209361732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599556066
    },
    {
        "content": "<p>No worries</p>",
        "id": 209361735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599556068
    },
    {
        "content": "<p>Ok</p>",
        "id": 209361739,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599556071
    },
    {
        "content": "<p>I can copy the file elsewhere, of course</p>",
        "id": 209361752,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599556080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209361582\">said</a>:</p>\n<blockquote>\n<p>I feel like I am constantly wasting everybody's time with my not being able to do basic stuf...</p>\n</blockquote>\n<p>For me this was a really important part of the learning process. I bombarded Mario with questions about all 1st year undergrad material (algebra, analysis, ...) and MSc level algebra</p>",
        "id": 209361785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599556083
    },
    {
        "content": "<p>In that case, just save the file, commit, and push it to your project</p>",
        "id": 209361794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599556087
    },
    {
        "content": "<p>Are you hosting the project on github?</p>",
        "id": 209361811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599556102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209361811\">said</a>:</p>\n<blockquote>\n<p>Are you hosting the project on github?</p>\n</blockquote>\n<p>I like to think that I am, but I am worried to moving it to github, since I fear that I might copy the empty project in github to my computer, instead of uploading the files on my computer to github...</p>",
        "id": 209361969,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599556206
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;list=PLlF-CfQhukNnxF1S22cNGKyfOrd380NUv&amp;index=7&amp;t=0s\">https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;list=PLlF-CfQhukNnxF1S22cNGKyfOrd380NUv&amp;index=7&amp;t=0s</a><br>\nThis might be an interesting video to watch, if you have some spare minutes.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bnc8w9lxe8A\" href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;list=PLlF-CfQhukNnxF1S22cNGKyfOrd380NUv&amp;index=7&amp;t=0s\"><img src=\"https://i.ytimg.com/vi/Bnc8w9lxe8A/default.jpg\"></a></div>",
        "id": 209361995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599556232
    },
    {
        "content": "<p>I push the github button on VSC every once in a while, though</p>",
        "id": 209362004,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599556240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209361995\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;list=PLlF-CfQhukNnxF1S22cNGKyfOrd380NUv&amp;index=7&amp;t=0s\">https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;list=PLlF-CfQhukNnxF1S22cNGKyfOrd380NUv&amp;index=7&amp;t=0s</a><br>\nThis might be an interesting video to watch, if you have some spare minutes.</p>\n</blockquote>\n<p>I will watch later, thanks!</p>",
        "id": 209362034,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599556272
    },
    {
        "content": "<p>While I watch the video and digest it, here is the gist</p>\n<p><a href=\"https://gist.github.com/adomani/a87231b5c4e8eb815a0575b026e7ce52\">https://gist.github.com/adomani/a87231b5c4e8eb815a0575b026e7ce52</a></p>",
        "id": 209362448,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599556632
    },
    {
        "content": "<p>(there may be mistakes in some of the statements, since reversing all the le signs is not as easy to do!)</p>",
        "id": 209362504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599556670
    },
    {
        "content": "<p>I am watching the video and I have added and committed a file.</p>",
        "id": 209364651,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599558016
    },
    {
        "content": "<p>Still continuing with problems involving degrees, minima and infima: do you know how to prove the lemma below?  Thanks!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">degree</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">minmin</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fne</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fnz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">â‰ </span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">fne</span> <span class=\"err\">âˆˆ</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209374558,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599565405
    },
    {
        "content": "<p>(If you prefer to have <code>{fne : f â‰  0}</code> as a hypothesis, go ahead!)</p>",
        "id": 209374645,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599565450
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">minmin</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fne</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fnz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">â‰ </span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">fne</span> <span class=\"err\">âˆˆ</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">mem_def</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some_get</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 209375215,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1599565810
    },
    {
        "content": "<p>The statement doesn't have anything to do with support</p>",
        "id": 209375257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599565843
    },
    {
        "content": "<p>it's a good idea to generalize away as many details of the original context while retaining the essence of the statement, in this case yielding a statement about finsets</p>",
        "id": 209375320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599565898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209375320\">said</a>:</p>\n<blockquote>\n<p>it's a good idea to generalize away as many details of the original context while retaining the essence of the statement, in this case yielding a statement about finsets</p>\n</blockquote>\n<p>I normally try to do that, but in this case, I was unable to formulate <code>f.support.min' fne</code> without the <code>fne : f.support.nonempty</code> assumption...</p>",
        "id": 209375442,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599565966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209375215\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">minmin</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fne</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fnz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">â‰ </span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">fne</span> <span class=\"err\">âˆˆ</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">mem_def</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some_get</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Thanks!  I do not understand the proof, but Lean does!</p>",
        "id": 209375475,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599565993
    },
    {
        "content": "<p>you can change the type to <code>s.nonempty</code></p>",
        "id": 209375495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599566013
    },
    {
        "content": "<p>you can look at the type of <code>finset.min'</code> to see what things are needed to state it</p>",
        "id": 209375580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599566055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209375495\">said</a>:</p>\n<blockquote>\n<p>you can change the type to <code>s.nonempty</code></p>\n</blockquote>\n<p>Ah, I see what you are saying!  I should have made <code>f.support</code> the subject!</p>",
        "id": 209375587,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599566061
    },
    {
        "content": "<p>another thing to notice about shing tak lam's proof is that the lemmas are also not polynomial specific, which suggests that some \"trivial generalization\" is at play</p>",
        "id": 209375713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599566151
    },
    {
        "content": "<p>Here's the proof for any <code>finset</code> (with some comments), and using it in your lemma</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">degree</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_mem_min</span> <span class=\"o\">{</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">Î±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Î±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">hs</span> <span class=\"err\">âˆˆ</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Unfold the definition of âˆˆ for options</span>\n  <span class=\"n\">rw</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">mem_def</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Unfold the definition of min&#39;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- some (option.get â†¥(s.min.is_some)) is just s.min</span>\n  <span class=\"n\">rw</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some_get</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">minmin</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fne</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fnz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">â‰ </span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">min&#39;</span> <span class=\"n\">fne</span> <span class=\"err\">âˆˆ</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">min&#39;_mem_min</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 209375823,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1599566213
    },
    {
        "content": "<p>Ok, since this is a step in a proof about degrees of polynomials, and, in my mind, <code>finset</code>s are not what I think when I am thinking about polynomials, I overlooked that I should have formulated it with finsets.</p>",
        "id": 209375902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599566262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209375823\">said</a>:</p>\n<blockquote>\n<p>Here's the proof for any <code>finset</code> (with some comments), and using it in your lemma</p>\n</blockquote>\n<p>Very useful: thank you!</p>",
        "id": 209375999,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1599566308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20degree/near/209364651\">said</a>:</p>\n<blockquote>\n<p>I am watching the video and I have added and committed a file.</p>\n</blockquote>\n<p>For future reference, the corresponding PR is <a href=\"https://github.com/leanprover-community/mathlib/issues/4069\">#4069</a>.</p>",
        "id": 209690383,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599763141
    }
]