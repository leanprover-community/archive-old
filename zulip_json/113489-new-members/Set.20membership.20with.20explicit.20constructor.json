[
    {
        "content": "<p>I'm back with another noob finset question. </p>\n<p><strong>MWE:</strong></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">variable</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">P</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span><span class=\"o\">,</span> <span class=\"n\">p3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p><strong>More context:</strong></p>\n<p>I'm trying to simplify a more complex expression that a finset is a subset of the union/intersection of other finsets. All are defined explicitly, and I have equality/inequality expressions for every pair of elements. <code>simp</code> reduces the larger set into a series of <code>insert</code> expression, but that's it. Has anyone tried writing something like <code>linarith</code> but for sets?</p>",
        "id": 201635314,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592846536
    },
    {
        "content": "<p><code>tidy</code> solves it.</p>",
        "id": 201635630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592846693
    },
    {
        "content": "<p><code>simp * at *, tauto</code> also works</p>",
        "id": 201635711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592846735
    },
    {
        "content": "<p>Thank you! I always forget about tidy. That's fascinating that <code>simp at h, simp,</code> behaves differently than <code>simp * at *</code>.</p>",
        "id": 201638021,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592847953
    },
    {
        "content": "<p>For me, both <code>simp at h, simp</code> and <code>simp * at *</code> turn the local context into</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">P</span>\n<span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p3</span>\n</code></pre></div>",
        "id": 201642440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592850156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Set.20membership.20with.20explicit.20constructor/near/201642440\">said</a>:</p>\n<blockquote>\n<p>For me, both <code>simp at h, simp</code> and <code>simp * at *</code> turn the local context into</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">P</span>\n<span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p3</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Interesting. Trying it again I'm getting the same behavior as you. Maybe my file is just getting too big. I've been careful not to leave any errors though.</p>",
        "id": 201643201,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1592850548
    }
]