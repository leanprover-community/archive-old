[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431349\">@leafGecko</span> <code>{{...}}</code> means implicit arguments, but Lean won't eagerly try to solve for them. <a href=\"https://leanprover.github.io/reference/expressions.html#implicit-arguments\">https://leanprover.github.io/reference/expressions.html#implicit-arguments</a></p>\n<p>(My understanding: outermost implicit arguments for terms in an expression get automatically filled in with metavariables.  Outermost <code>{{...}}</code> arguments remain <code>{{..}}</code> arguments.)</p>",
        "id": 248725812,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628356314
    },
    {
        "content": "<p>I think <code>{...}</code> arguments are the closest to Haskell's parametric polymorphism.  In a way, <code>{{...}}</code> arguments are how you make definitions that automatically go against the \"monomorphism restriction\" (i.e., in Haskell, type inference won't preserve polymorphism when setting to a variable -- there are examples where inferring polymorphism gives code with unexpectedly high asymptotic running times, though this does not matter for proofs!).</p>",
        "id": 248726227,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628356884
    },
    {
        "content": "<p>hmm, I may need to learn more theory on that :D btw, is there a way I can apply a (series of) tactic to all subgoals generated from previous tactic, like in Coq?</p>",
        "id": 248726961,
        "sender_full_name": "leafGecko",
        "timestamp": 1628357938
    },
    {
        "content": "<p><code>tactic ; other_tactic</code></p>",
        "id": 248727035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628358030
    },
    {
        "content": "<p>note the <code>;</code> instead of <code>,</code></p>",
        "id": 248727039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628358039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431349\">@leafGecko</span> Here's an example for the differences. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">id₁</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">id₂</span> <span class=\"o\">{{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">id₁</span>  <span class=\"c1\">-- error (tries to solve for p but can't)</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id₁</span>  <span class=\"c1\">-- ok (can solve for p)</span>\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">id₂</span>  <span class=\"c1\">-- ok (has the same type as id₂)</span>\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">id₂</span>  <span class=\"c1\">-- error (Lean won't even try to fill in {{...}} arguments)</span>\n<span class=\"kd\">def</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">id₂</span> <span class=\"n\">h</span> <span class=\"c1\">-- ok (giving id₂ an argument triggers solving for the implicit argument)</span>\n</code></pre></div>",
        "id": 248734488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628368727
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 248735523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628370249
    }
]