[
    {
        "content": "<p>I would like to make a function that takes an input <code>a</code> and returns an expression of the form <code>`(∃ x, a = x)</code>. How would I get this elaborated so I can use it in a tactic. Currently I have </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">ex</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209077787,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1599215688
    },
    {
        "content": "<p>This should almost work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>but I think there is a free universe variable</p>",
        "id": 209077951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599215812
    },
    {
        "content": "<p>alternatively:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209077992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599215848
    },
    {
        "content": "<p>What is the <code>to_expr</code> function?</p>",
        "id": 209078106,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1599215950
    },
    {
        "content": "<p><code>tactic.to_expr</code></p>",
        "id": 209078129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599215988
    },
    {
        "content": "<p>You might want to see <a href=\"https://www.youtube.com/playlist?list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2\">Rob's metaprogramming tutorial</a> if you haven't done it before</p>",
        "id": 209078193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599216017
    },
    {
        "content": "<p>Thank you</p>",
        "id": 209078246,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1599216087
    }
]