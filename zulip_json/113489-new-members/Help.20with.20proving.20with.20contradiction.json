[
    {
        "content": "<p>Here is my code, along with some definitions and helper theorems (I know its long, but my main issue is at the very end where I have the comment -- Help here ---)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">dvd</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n<span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dvd</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n<span class=\"n\">def</span> <span class=\"n\">composite</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span><span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">greater_than_not_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">ne_bot_of_gt</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dvd_n_less_than_n</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"bp\">_</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"bp\">≤_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_iff_ne_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"bp\">_</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">either_prime_or_composite</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ge</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">composite</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">composite</span><span class=\"o\">,</span>\n\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n        <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">linarith</span><span class=\"o\">,</span>\n        <span class=\"o\">}</span> <span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n           <span class=\"k\">let</span> <span class=\"n\">hu_left</span><span class=\"o\">:=</span> <span class=\"n\">hu</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n           <span class=\"n\">rw</span> <span class=\"n\">dvd</span> <span class=\"n\">at</span> <span class=\"n\">hu_left</span><span class=\"o\">,</span>\n           <span class=\"n\">cases</span> <span class=\"n\">hu_left</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n\n           <span class=\"k\">have</span> <span class=\"n\">u_g_k</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">&gt;</span><span class=\"n\">k</span><span class=\"o\">),</span>\n           <span class=\"o\">{</span>\n<span class=\"c1\">--               by library_search,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">u</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n           <span class=\"o\">},</span>\n           <span class=\"n\">cases</span> <span class=\"n\">u_g_k</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n                <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">u_g_k</span><span class=\"o\">,</span>\n\n                <span class=\"k\">let</span> <span class=\"n\">hu_mid</span><span class=\"o\">:=</span> <span class=\"n\">hu</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">u_ge_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_zero</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"k\">have</span> <span class=\"n\">n_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">subst</span> <span class=\"n\">u_zero</span><span class=\"o\">,</span>\n                        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                        <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">u_ge_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_less_2</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_eq_1</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n<span class=\"c1\">--                    by library_search,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">hu_mid</span> <span class=\"n\">u_eq_1</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">k_ge_n</span><span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">uk_ge_2n</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n<span class=\"c1\">--                    by library_search,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">canonically_ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul</span> <span class=\"n\">u_ge_2</span> <span class=\"n\">k_ge_n</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">n_ge_2n</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">twon_gt_n</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n                <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n                <span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                <span class=\"c1\">--exact u_g_k,</span>\n\n                <span class=\"k\">let</span> <span class=\"n\">hu_mid</span><span class=\"o\">:=</span> <span class=\"n\">hu</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">u_ge_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_zero</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"k\">have</span> <span class=\"n\">n_zero</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">subst</span> <span class=\"n\">u_zero</span><span class=\"o\">,</span>\n                        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                        <span class=\"n\">exact</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">u_ge_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_less_2</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"k\">have</span> <span class=\"n\">u_eq_1</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n                    <span class=\"o\">{</span>\n                        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                    <span class=\"o\">},</span>\n<span class=\"c1\">--                    by library_search,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">hu_mid</span> <span class=\"n\">u_eq_1</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">k_ge_n</span><span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">uk_ge_2n</span><span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n<span class=\"c1\">--                    by library_search,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">canonically_ordered_semiring</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul</span> <span class=\"n\">u_ge_2</span> <span class=\"n\">k_ge_n</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">n_ge_2n</span><span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"k\">have</span> <span class=\"n\">twon_gt_n</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">ne_bot_of_gt</span> <span class=\"n\">ge</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n\n                <span class=\"n\">apply</span> <span class=\"n\">dvd_n_less_than_n</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n                <span class=\"n\">apply</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n                <span class=\"n\">apply</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n                <span class=\"n\">apply</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n                <span class=\"n\">apply</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n\n        <span class=\"o\">}</span>\n\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">composite</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a1</span> <span class=\"n\">ha1</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">ha1</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a1</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">temp</span><span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">a1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">temp</span><span class=\"o\">,</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">b_isnt_one</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n        <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n        <span class=\"n\">subst</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mul_one</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">b_divides_n</span><span class=\"o\">:</span> <span class=\"n\">dvd</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n          <span class=\"n\">rw</span> <span class=\"n\">dvd</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n          <span class=\"n\">use</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n\n      <span class=\"k\">have</span> <span class=\"n\">b_is_trivial</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hc</span> <span class=\"n\">b_divides_n</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n\n      <span class=\"c1\">--Help here--</span>\n    <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>So basically, I have the statements: <code> b_is_trivial : b = 1 \\or b = n</code>, <code>b_isnt_one: b \\neq 1</code> and<code>h3: b &lt; n</code>. I want to get a contradiction, but I cant. I tried using <code>linarith</code> and by library search, but nothing worked. Any suggestions?</p>",
        "id": 195608330,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1588099210
    },
    {
        "content": "<p>A huge block of code is not useful without the correct imports.</p>",
        "id": 195608758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588099428
    },
    {
        "content": "<p>That said, use <code>cases</code> on <code>b_is_trivial</code>.</p>",
        "id": 195608768,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588099436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"272522\">@Dev-Indra</span> Why do you post this huge pile of code (without import) if your question if how to prove <code>example (n b) (b_is_trivial : b = 1 ∨ b = n) (b_isnt_one: b ≠ 1) (h3: b &lt; n) : false</code>?</p>",
        "id": 195610049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588100053
    },
    {
        "content": "<p>Alternative to Reid's method: <code>by linarith [or_iff_not_imp_left.mp  b_is_trivial b_isnt_one]</code>. Of course you can also write the proof term by hand.</p>",
        "id": 195610261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588100180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  Sometimes when I asked questions in the past, people wanted me to put in the code so that they can run it on their laptops. As for imports I only had <code>import tactic</code> at the top, and I assumed everyone has this import statement. But thanks for the help. My code works now.</p>",
        "id": 195610554,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1588100379
    },
    {
        "content": "<p>With just <code>import tactic</code> already <code>lattice.ne_bot_of_gt</code> is not in scope.</p>",
        "id": 195610764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588100476
    },
    {
        "content": "<p>But why omit one or two lines out of a hundred?</p>",
        "id": 195610819,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588100504
    },
    {
        "content": "<p>What <em>I</em> posted is a MWE. You can copy the file I posted in an empty Lean file and it works.</p>",
        "id": 195610961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588100575
    },
    {
        "content": "<p>I mean before I posted the proof, which does use <code>import tactic</code></p>",
        "id": 195610998,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588100596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272522\">Dev-Indra</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20proving.20with.20contradiction/near/195610554\" title=\"#narrow/stream/113489-new-members/topic/Help.20with.20proving.20with.20contradiction/near/195610554\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span>  Sometimes when I asked questions in the past, people wanted me to put in the code so that they can run it on their laptops. As for imports I only had <code>import tactic</code> at the top, and I assumed everyone has this import statement. But thanks for the help. My code works now.</p>\n</blockquote>\n<p>\"minimum working example\" means that I can copy your code block, paste into a new file in my lean project, and see what the problem is. The \"working\" part means I shouldn't have to add any code myself, and you can test this by... copying your code block into a new lean file! The \"minimum\" part means that there aren't unnecessary bits that will distract me before I see what's wrong.</p>\n<p>I know it sounds annoying, but if you don't post a mwe then you are implicitly valuing your time over the time of people that might help you.</p>",
        "id": 195712724,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588168693
    },
    {
        "content": "<p>do we have a standard linkpost for the definition of MWE yet?</p>",
        "id": 195713122,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588168851
    },
    {
        "content": "<p>I also endorse the edit. In particular, there is only one of you but there may be multiple people who could help you, so even if you valued all people's time equally it would still make sense to put in the effort yourself.</p>",
        "id": 195713330,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588168919
    },
    {
        "content": "<p>Maybe we can use the Zulip linkifier so that #mwe links to something useful</p>",
        "id": 195713457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588168947
    },
    {
        "content": "<p>macro time... maybe not</p>",
        "id": 195713766,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588169038
    },
    {
        "content": "<p>does Zulip even have macros?</p>",
        "id": 195713870,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588169054
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Minimal_working_example\" title=\"https://en.wikipedia.org/wiki/Minimal_working_example\">https://en.wikipedia.org/wiki/Minimal_working_example</a></p>",
        "id": 195713981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588169092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <a href=\"https://github.com/leanprover-community/lean/issues/251\" title=\"https://github.com/leanprover-community/lean/issues/251\">lean#251</a></p>",
        "id": 195714028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588169106
    },
    {
        "content": "<p>If there's a place to link to, that's very easy to do. Maybe even better: posting <code>#mwe</code> or <code>#codebackticks</code> or whatever could summon a bot to make a prerecorded post.</p>",
        "id": 195714053,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588169119
    },
    {
        "content": "<p>Zulip bot scripting is pretty easy.</p>",
        "id": 195714086,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588169135
    },
    {
        "content": "<p>your wiki link doesn't emphasize on \"working\"</p>",
        "id": 195714118,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588169151
    },
    {
        "content": "<p>It also doesn't explain the why</p>",
        "id": 195714197,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588169172
    },
    {
        "content": "<p>The bigger challenge is automatically identifying posts that are missing a mwe or backticks.</p>",
        "id": 195714203,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588169176
    },
    {
        "content": "<p>I think we could train an AI for the backticks one.</p>",
        "id": 195714381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588169234
    },
    {
        "content": "<p>Once Sebastien formalizes the sigmoid function.</p>",
        "id": 195714407,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588169248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20proving.20with.20contradiction/near/195714203\" title=\"#narrow/stream/113489-new-members/topic/Help.20with.20proving.20with.20contradiction/near/195714203\">said</a>:</p>\n<blockquote>\n<p>The bigger challenge is automatically identifying posts that are missing a mwe or backticks.</p>\n</blockquote>\n<p>That would be great, too, but having a macro for humans to type is already a big step forward</p>",
        "id": 195714415,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588169251
    },
    {
        "content": "<p>I'm not sure but I think there's some way a human can trigger a bot manually, using a <code>/</code> command or something? Now that I think about it I'm not sure how it is supposed to work</p>",
        "id": 195714660,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588169327
    },
    {
        "content": "<p>I think bots can scan the contents of posts. It should be easy to write a bot that watches for <code>#mwe</code>.</p>",
        "id": 195714750,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588169371
    },
    {
        "content": "<p>I think the documentation here is enough for anyone willing to give it a go:<br>\n<a href=\"https://zulipchat.com/api/running-bots\" title=\"https://zulipchat.com/api/running-bots\">https://zulipchat.com/api/running-bots</a></p>",
        "id": 195714791,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588169388
    },
    {
        "content": "<p>Right, I was just wondering whether the extra noise of someone typing <code>#mwe</code> could be avoided</p>",
        "id": 195715053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588169479
    },
    {
        "content": "<p>maybe that's not even a good idea though</p>",
        "id": 195715176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588169522
    },
    {
        "content": "<p>I was thinking we would just write</p>\n<div class=\"codehilite\"><pre><span></span><code>please provide an #mwe\n</code></pre></div>",
        "id": 195715199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588169528
    },
    {
        "content": "<p>And then Zulip would linkify <code>#mwe</code></p>",
        "id": 195715234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588169541
    },
    {
        "content": "<p>Gotcha. <br>\nMy model of how this works i based off of chatbots in twitch streams.</p>",
        "id": 195715278,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588169562
    },
    {
        "content": "<p>what is linkify? is it something admins can edit?</p>",
        "id": 195715283,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588169565
    },
    {
        "content": "<p>And then user clicks and gets enlightened</p>",
        "id": 195715288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588169568
    },
    {
        "content": "<p>Do we have a \"server meta\" stream?</p>",
        "id": 195715318,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588169582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20proving.20with.20contradiction/near/195715234\" title=\"#narrow/stream/113489-new-members/topic/Help.20with.20proving.20with.20contradiction/near/195715234\">said</a>:</p>\n<blockquote>\n<p>And then Zulip would linkify <code>#mwe</code></p>\n</blockquote>\n<p>This might be better, since we can put more text on the page linked to than we would want to see a bot write out over and over.</p>",
        "id": 195715343,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588169590
    },
    {
        "content": "<p>I think the bot should say two-ish sentences to convince the user to click the link</p>",
        "id": 195715419,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588169621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Help.20with.20proving.20with.20contradiction/near/195715283\" title=\"#narrow/stream/113489-new-members/topic/Help.20with.20proving.20with.20contradiction/near/195715283\">said</a>:</p>\n<blockquote>\n<p>what is linkify? is it something admins can edit?</p>\n</blockquote>\n<p>yes</p>",
        "id": 195715429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588169629
    },
    {
        "content": "<p>We only need to ping <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and it will be done before you can say <code>#mwe</code></p>",
        "id": 195715540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588169665
    },
    {
        "content": "<p>but what do we want to link it to?</p>",
        "id": 195715586,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588169677
    },
    {
        "content": "<p>Yeah, I was thinking the bot post would be more visible. We don't have to trust people to click <code>#mwe</code> instead of posting \"what's a #mwe?\"</p>",
        "id": 195715659,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588169706
    },
    {
        "content": "<p>If we are lazy: wiki, and otherwise a custom page hosted on <a href=\"http://leanprover-community.github.io\" title=\"http://leanprover-community.github.io\">leanprover-community.github.io</a></p>",
        "id": 195715682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588169716
    },
    {
        "content": "<p>But either way is an improvement!</p>",
        "id": 195715684,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588169716
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-(MWE)\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-(MWE)\">https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-(MWE)</a></p>",
        "id": 195716054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588169876
    },
    {
        "content": "<p>I think this discussion could profitably move here <br>\n<a href=\"#narrow/stream/236604-server-meta/topic/.23mwe.20bot\" title=\"#narrow/stream/236604-server-meta/topic/.23mwe.20bot\">https://leanprover.zulipchat.com/#narrow/stream/236604-server-meta/topic/.23mwe.20bot</a></p>",
        "id": 195716126,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588169893
    },
    {
        "content": "<p>Just clarifying that the reason I was summoned is not the way people are planning to implement this, yes?</p>",
        "id": 195717461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588170472
    },
    {
        "content": "<p>Well...</p>",
        "id": 195717608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588170532
    },
    {
        "content": "<p>I don't see anything wrong with having <code>#mwe</code> link to the wiki page</p>",
        "id": 195717632,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588170542
    },
    {
        "content": "<p>You are an admin, so you can help us avoid it that way</p>",
        "id": 195717642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588170547
    }
]