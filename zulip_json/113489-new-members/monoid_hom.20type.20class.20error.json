[
    {
        "content": "<p>I have a monoid Y. I want to say that there is a monoid X such that a homomorphism <code>f:X → Y</code> exists and has some property. Here is how I tried to do that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">mon_recognizes</span> <span class=\"o\">[</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→*</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The problem appears at (f : X →* Y) and lean says it can't synthesize a type class instance for <code>mul_one_class X</code>. How do I fix this? I thought maybe I had to spell everything out.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">),</span>  <span class=\"bp\">@</span><span class=\"n\">monoid_hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n<span class=\"o\">{</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">M.one</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">M.mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">M.one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">M.mul_one</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">N.one</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">N.mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">N.one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">N.mul_one</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>That didn't work. Maybe writing it all out will work and I'm just doing it wrong. Thanks for your help.</p>",
        "id": 265878967,
        "sender_full_name": "Carlos Silva",
        "timestamp": 1640228902
    },
    {
        "content": "<p>The X should be after the exists I guess, but your main problem can be solved by writing \"by exactI\" in an appropriate place. <code>\\exists M : monoid X, by exactI \\exists f, ...</code> or something like that should work (unchecked)</p>",
        "id": 265888263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640241683
    }
]