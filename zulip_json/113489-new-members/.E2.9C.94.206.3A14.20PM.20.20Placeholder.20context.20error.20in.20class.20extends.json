[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/6.3A14.20PM.20.20Placeholder.20context.20error.20in.20class.20extends/near/286763269\">said</a>:</p>\n<blockquote>\n<p>The problem is that <code>dist x y</code> could be of type <code>Λ₁</code> or <code>Λ₂</code> if <code>lambda_metric_space Λ₁ X</code> and <code>lambda_metric_space Λ₂ X</code>, so Lean can't decide which one you mean. Instead, you should define</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span>\n<span class=\"n\">lambda_metric_space.dist</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Are you sure the problem is that <code>Λ</code> could be two groups? In the state it does appear twice, but both time it is called <code>_inst_1</code>. Adding your <code>def dist</code> did not change anything in the internal state.</p>\n<p>Also, just to make sure, is this the definition that you meant (with <code>(X:Type*)</code> as input):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span>\n<span class=\"n\">lambda_metric_space.dist</span>\n</code></pre></div>\n<p>There is still an error <code>don't know how to synthesize placeholder</code> on the equality symbol. Any more ideas?</p>",
        "id": 286768963,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655716622
    },
    {
        "content": "<p>I figured out now, what I need to write. Thank you so much for your help!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">lambda_isometry</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lambda_metric_space</span> <span class=\"bp\">Λ</span> <span class=\"n\">Y</span><span class=\"o\">]</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">isom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"bp\">Λ</span> <span class=\"n\">Y</span>  <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"bp\">Λ</span> <span class=\"n\">X</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 286769943,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1655717255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"494571\">Raphael Appenzeller</span> has marked this topic as resolved.</p>",
        "id": 286769956,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655717262
    },
    {
        "content": "<p>You do not need <code>X</code> to be explicit because it is the type of <code>x</code> and <code>y</code>.</p>",
        "id": 286770764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655717771
    }
]