[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n<span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">densely_ordered</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span> <span class=\"n\">α</span> <span class=\"n\">le_antisymm</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">le_antisymm</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">partial_order</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>What does this error mean? It seems to have to do with <code>densely_ordered</code> assuming <code>preorder</code></p>",
        "id": 194896593,
        "sender_full_name": "David Wärn",
        "timestamp": 1587540781
    },
    {
        "content": "<p>I suggest setting it up like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n<span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dense</span> <span class=\"o\">:</span> <span class=\"n\">densely_ordered</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">densely_ordered</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">densely_ordered</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">dense</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 194898271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587542262
    },
    {
        "content": "<p>but what caused that error?</p>",
        "id": 194898332,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587542290
    },
    {
        "content": "<p>a bug</p>",
        "id": 194898336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587542296
    },
    {
        "content": "<p>it's not a whole forest</p>",
        "id": 194898416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587542364
    },
    {
        "content": "<p>Ah, that will work</p>",
        "id": 194898683,
        "sender_full_name": "David Wärn",
        "timestamp": 1587542551
    },
    {
        "content": "<p>If it's a bug you should open an issue, right?</p>",
        "id": 194899685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587543343
    },
    {
        "content": "<p>What is going on here? I've never seen that before. <code>import order.basic</code> at the top of David's code</p>",
        "id": 194908350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587548557
    },
    {
        "content": "<p>This is the first time I have seen someone try to have a regular structure extend a structure and another structure parameterized over the first. (That is, <code>densely_ordered A</code> takes a parameter of type <code>partial_order A</code>.) I think the <code>extends</code> mechanism doesn't know how to pass the parameters properly in this case.</p>",
        "id": 194910372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587549827
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"n\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">A</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">B</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">α</span><span class=\"bp\">.</span>\n</pre></div>\n\n\n<p>I get <code>failed to add declaration to environment, it contains local constants</code> and then after a few seconds a <code>SIGSEGV</code></p>",
        "id": 194910986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587550230
    },
    {
        "content": "<p>Which typeclass system is better, Coq or Lean?</p>",
        "id": 194911279,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587550427
    },
    {
        "content": "<p>seems to be a problem with 3.4.2 as well</p>",
        "id": 194911423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587550521
    },
    {
        "content": "<p>meh, restarting VS Code fixed it; no segv</p>",
        "id": 194912057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587550979
    },
    {
        "content": "<p>oh no it's back.</p>",
        "id": 194912154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587551048
    },
    {
        "content": "<p>Since there's a period at the end of the file that crashes, I'm pretty sure this is <a href=\"https://github.com/leanprover-community/lean/issues/85\" title=\"https://github.com/leanprover-community/lean/issues/85\">lean#85</a>.</p>",
        "id": 194948589,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587569474
    },
    {
        "content": "<p>I was trying to understand the partial order error and have run into something else</p>",
        "id": 194949474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587569815
    },
    {
        "content": "<p>You can work around it by adding any code or comment after the period. It'd be good to fix the crash, but I haven't been able to summon the energy to dig into that part of the scanner.</p>",
        "id": 194949984,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587570016
    }
]