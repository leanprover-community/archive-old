[
    {
        "content": "<p>Since this was deemed worth pursuing, I may take a cut at it. To start with, I'm wondering if there's anyone else who's been planning that already. I also want to check if my choices for the structure fields and their names seem readable enough. BTW, what is happening with the <code>mathlib nursery</code>, there doesn't seem to be any contribution for the last two years?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">dedekind_cut</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span>     <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">not_empty</span>   <span class=\"o\">:</span> <span class=\"n\">carrier</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">not_all</span>     <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"err\">∉</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">closed_down</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">no_greatest</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">,</span>  <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205057707,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595780064
    },
    {
        "content": "<p>You could generalize <code>Q</code> in this definition</p>",
        "id": 205057833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595780302
    },
    {
        "content": "<p>The nursery is effectively moribund. Probably we should formally \"archive\" it on GitHub.</p>",
        "id": 205057834,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595780305
    },
    {
        "content": "<p>In particular, I think you will find that it is easier to define the positive reals as dedekind cuts of positive rationals than using all rationals (especially when it comes to multiplication)</p>",
        "id": 205057848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595780373
    },
    {
        "content": "<p>also, you will want to be able to talk about dedekind cuts of real numbers when showing completeness</p>",
        "id": 205057893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595780410
    },
    {
        "content": "<p>One technical problem with Dedekind cuts is what to with the rationals -- should the rational be in the top cut or the bottom one? Someone recently explained to me that one solution to this is to say \"neither\", and formalise Dedekind cuts with the axiom that if a&lt;b then either a is in the bottom cut or b is in the top cut. This forces the union of the two cuts to be either all the rationals, or all but one.</p>",
        "id": 205057975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595780570
    },
    {
        "content": "<p>In Dan's definition you don't bother with the top cut, and the bottom cut is open</p>",
        "id": 205057987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595780612
    },
    {
        "content": "<p>I think this is the Right Way to do it</p>",
        "id": 205058030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595780643
    },
    {
        "content": "<p>I think defining cuts in general would be good. I did some related stuff in <a href=\"https://github.com/leanprover-community/mathlib/pull/3292\">https://github.com/leanprover-community/mathlib/pull/3292</a> but without really defining cuts as a structure, just giving a cut as a set and proving those properties separately. Might be cool to go as general as <a href=\"https://en.wikipedia.org/wiki/Dedekind%E2%80%93MacNeille_completion\">https://en.wikipedia.org/wiki/Dedekind%E2%80%93MacNeille_completion</a> though</p>",
        "id": 205058034,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595780646
    },
    {
        "content": "<p>Aah I see -- yes, this is a nice slick way to do it. You'll still have to be careful when multiplying -sqrt(2) by itself.</p>",
        "id": 205058056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595780758
    },
    {
        "content": "<p>If you define positive reals then there is no -sqrt(2)</p>",
        "id": 205058103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595780798
    },
    {
        "content": "<p>Given positive reals, you can just define reals the same way you get int from nat</p>",
        "id": 205058120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595780825
    },
    {
        "content": "<p>I agree that this looks like the most painless approach. I've had students doing Dedekind reals in the past and it's surprising how annoying it is compared to the Cauchy sequences approach.</p>",
        "id": 205058181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595780887
    },
    {
        "content": "<p>I was just looking at the Wikipedia definition and the one in P.J. Cameron's book \"Sets, Logic and Categories\".</p>",
        "id": 205058286,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595781104
    },
    {
        "content": "<p>If you are aiming for mathlib, expect it to be generalized to unrecognizability <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 205058336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595781145
    },
    {
        "content": "<p>Although the latter favors using both the lower and the upper cut, Wiki goes for the lower only. Which I think it is an advantage.</p>",
        "id": 205058339,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595781157
    },
    {
        "content": "<p>You can do the D-MN completion with only lower cuts</p>",
        "id": 205058405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595781268
    },
    {
        "content": "<p>in fact the wiki definition does it that way</p>",
        "id": 205058407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595781279
    },
    {
        "content": "<p>Dedekind cuts have their advantage (unique vs. equivalence class) so it's good to have them. </p>\n<p>Thank you all for the input and I'm glad I asked. Will take a look at the generalization pointed to by <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> . My dream goal is to have an undergraduate student working on this, so hopefully it can be PR'd into mathlib incrementally.</p>",
        "id": 205058608,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595781675
    },
    {
        "content": "<p>Hi, my name is Jireh Loreaux, and since this is the new members stream I thought I would introduce myself. I am a mathematician at Southern Illinois University Edwardsville. I've been tracking the Lean project and mathlib for about two years, but have finally had a few weeks to spend devoted to learning. After working my way through the various tutorials and LftCM2020 materials, I decided to try and implement something nontrivial on my own to see what kinds of problems I would run into once I was unguided. </p>\n<p>So, I decided to implement the real numbers as Dedekind cuts of rationals because I noticed it wasn't in mathlib (I didn't think to check for PRs, and I hadn't gotten comfortable with Zulip yet). I am most of the way through it, and I think I have learned as much from this particular project as I can. I could continue it and create a PR, but I'm not clear from the above thread if this is something someone else is already in the process of implementing.</p>\n<p>Alternatively, I work in C*-algebras and operator theory, and I see that the mathlib theory really only goes up to Banach spaces and linear maps between them. So, I could start working on a PR in this direction as well, but I'm not sure how best to determine the WIPs of everyone else on this topic.</p>",
        "id": 215119435,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1604075790
    },
    {
        "content": "<p>Hi, welcome!  We'll be very happy to have your contributions.</p>",
        "id": 215122792,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604077426
    },
    {
        "content": "<p>Some ongoing things that might be interesting to you: <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has proved the Bell and Tsirelson inequalities, although in a slightly more general context than the classical C*-algebra context -- there are open PRs for these:<br>\n<a href=\"#narrow/stream/116395-maths/topic/Bell.20and.20Tsirelson.20inequalities\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Bell.20and.20Tsirelson.20inequalities</a><br>\nAnd <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> has been setting up Hilbert space theory, currently he has an open PR for the Riesz representation theorem:<br>\n<a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Hilbert.20space.20is.20isometric.20to.20its.20dual\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Hilbert.20space.20is.20isometric.20to.20its.20dual</a></p>",
        "id": 215123099,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604077561
    },
    {
        "content": "<p>Anything in the Hilbert space, C*-algebra, etc direction would be enthusiastically welcomed.  Frederic and Scott probably have ideas for the natural next steps.</p>\n<p>I think there would be some debate about whether the Dedekind-cut construction of the reals is appropriate for mathlib, given that there is another construction currently implemented.  On the other hand, there is an open PR for the characterization of the reals as the unique conditionally complete linear ordered field, <a href=\"https://github.com/leanprover-community/mathlib/issues/3292\">#3292</a>, I think the author <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> has other priorities now, so if that's of interest to you, you could take it over.</p>",
        "id": 215123964,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604077962
    },
    {
        "content": "<p>Welcome! I would definitely encourage you to work on C*-algebras and operator theory, we are barely getting started in that direction as Heather said.</p>",
        "id": 215128042,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1604079940
    },
    {
        "content": "<p>Great! Thanks for the pointers to the relevant chats and PRs. I'll have a look and see where I can make myself useful sometime within the next week.</p>",
        "id": 215137874,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1604084838
    }
]