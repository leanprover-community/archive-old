[
    {
        "content": "<p>How do I prove <code>example : sum(range 0) = 0 := sorry</code>? (This seems embarrassingly simple, but as soon as I wander off the guided path of the natural number game, basic stuff like this shows up.)</p>",
        "id": 181087196,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1574147043
    },
    {
        "content": "<p>there should be some lemma starting with <code>range_zero</code> that shows that it's the empty set</p>",
        "id": 181087302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1574147222
    },
    {
        "content": "<p>then there should be something about <code>sum_empty</code> or <code>empty_sum</code> or etc</p>",
        "id": 181087309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1574147232
    },
    {
        "content": "<p><code>simp</code>?</p>",
        "id": 181087538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574147580
    },
    {
        "content": "<p><code>rfl</code>?</p>",
        "id": 181087544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574147584
    },
    {
        "content": "<p>not really sure what <code>sum</code> and <code>range</code> you are talking about so it's hard to be more specific</p>",
        "id": 181087599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574147687
    },
    {
        "content": "<p>Sorry -- these are the <code>list</code>versions (the example is preceded by <code>import data.list.basic</code> and <code>open nat list</code>). Neither <code>simp</code> nor <code>rfl</code> seem to work.</p>",
        "id": 181123836,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1574178409
    },
    {
        "content": "<p>If you posted complete working code it would make people's lives a bit easier.</p>",
        "id": 181123999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574178488
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span> <span class=\"n\">nat</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">sum</span><span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>Works for me.</p>",
        "id": 181124053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574178521
    },
    {
        "content": "<p>Thanks -- it works for me too (I had put <code>rfl</code> between <code>begin</code> ... <code>end</code>).</p>",
        "id": 181138045,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1574186802
    },
    {
        "content": "<p>In tactic mode you could use <code>exact rfl</code> or <code>refl</code>. They're not exactly equivalent, I think <code>refl</code> works a little harder to close the goal.</p>",
        "id": 181138826,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574187282
    },
    {
        "content": "<p>Yeah, I was in term mode. The tactic version is <code>refl</code>.</p>",
        "id": 181138957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574187365
    },
    {
        "content": "<p>The natural number game hides the following thing: <code>x + 0</code> is <em>defined to be</em> <code>x</code>, so if you want to prove <code>x + 0 = x</code> although I was encouraging you to write <code>rw add_zero</code> you can just close this goal immediately with <code>refl</code>!</p>",
        "id": 181139046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574187428
    },
    {
        "content": "<blockquote>\n<p>In tactic mode you could use <code>exact rfl</code> or <code>refl</code>. They're not exactly equivalent, I think <code>refl</code> works a little harder to close the goal.</p>\n</blockquote>\n<p>The main difference is that <code>rfl</code> is the (term)-proof that equality is reflexive, and the <code>refl</code> tactic works on any relation that is marked with <code>@[refl]</code> (like <code>le</code>, <code>equiv</code>, ...)</p>",
        "id": 181168777,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1574209146
    }
]