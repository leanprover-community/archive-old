[
    {
        "content": "<p>Hi, I am a newbie to lean. I am starting out by playing Kevin Buzzard's Natural number game. I have gotten to level 4 in the Advanced multiplication world and I have gotten stuck at what should be the final step of the induction.<br>\nMy current state of the game is the following:</p>\n<div class=\"codehilite\" data-code-language=\"case\"><pre><span></span><code>a : mynat,\nha : a ≠ 0,\nd : mynat,\nhd : ∀ (b : mynat), a * b = a * d → b = d,\ng : mynat,\ngd : a + a * g = a + a * d\n⊢ succ g = succ d\n</code></pre></div>\n<p>It seems to me that all I need to do is to apply add_left_cancel at gd which should imply a<em>g=a</em>d and by induction hypothesis hd obtain g=d and hence succ g =  succ d.  However when I do that I get the following error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kd\">lemma</span> <span class=\"n\">lhs</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">metavariable</span>\n</code></pre></div>\n<p>What am I missing?<br>\nI  apologize if this question has been previously answered.<br>\nThanks in advance,<br>\nZig Fiedorowicz</p>",
        "id": 244086318,
        "sender_full_name": "Zbigniew Fiedorowicz",
        "timestamp": 1624829918
    },
    {
        "content": "<p>Would you mind editing your question to use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>?</p>",
        "id": 244086835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624830751
    },
    {
        "content": "<p>what is your full code? are you trying to write <code>apply add_left_cancel at gd</code>? because that doesn't work, <code>apply</code> is only for the goal state</p>",
        "id": 244087165,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624831178
    },
    {
        "content": "<p>you may be thinking maybe more along the lines of <code>have h := add_left_cancel _ _ _ gd</code></p>",
        "id": 244087224,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624831212
    },
    {
        "content": "<p>No I am using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_left_cancel</span> <span class=\"n\">at</span> <span class=\"n\">gd</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>and also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_left_cancel</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">gd</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Both give the same result. I have also applied add_comm and tried add_right_cancel. That does not produce an error message, but expands the goal to 4 different goals with some strange metasymbols like ?m1</p>",
        "id": 244087340,
        "sender_full_name": "Zbigniew Fiedorowicz",
        "timestamp": 1624831376
    },
    {
        "content": "<p>ahh, but <code>rw</code> deals with equalities or iffs; <code>add_left_cancel</code> is an implication</p>",
        "id": 244087403,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624831476
    },
    {
        "content": "<p>so Lean gets very confused what you mean</p>",
        "id": 244087408,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624831483
    },
    {
        "content": "<p>do you understand what I mean?</p>",
        "id": 244087646,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624831862
    },
    {
        "content": "<p>Thanks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_right_cancel_iff</span> <span class=\"n\">at</span> <span class=\"n\">gd</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>did the trick. Now my state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">gd</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">succ</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>I now want to set b=g in hd. How do I do that?</p>",
        "id": 244093669,
        "sender_full_name": "Zbigniew Fiedorowicz",
        "timestamp": 1624842283
    },
    {
        "content": "<p>By a sequence of random guesses I found that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>does the trick. However I don't understand the logic/syntax behind this trick.  Can anyone enlighten me?</p>",
        "id": 244094245,
        "sender_full_name": "Zbigniew Fiedorowicz",
        "timestamp": 1624843286
    },
    {
        "content": "<p>It's pretty simple actually. When you type <code>hd g</code> (this is exactly the same as <code>hd(g)</code>, but <code>hd g</code> is the preferred syntax), you get this hypothesis: <code>a * g = a * d → g = d</code>. Let's call that hypothesis <code>h</code>. Without Lean's guessing superpowers, you'd have to apply the hypothesis <code>gd</code> to <code>h</code> to get <code>g = d</code>, and to close the goal you'd need to type <code>rw hd g gd</code>. But for some reason, Lean guessed the <code>gd</code> part so <code>rw hd g</code> closes the goal.</p>",
        "id": 244094477,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624843684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"423460\">@Zbigniew Fiedorowicz</span> , the crucial intuition that is good in these cases is to treat foralls and implications as  functions</p>",
        "id": 244134055,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624881871
    },
    {
        "content": "<p>for example, <code>hd : ∀ b : mynat, a * b = a * d → b = d</code>, is a function that takes in a natural number <code>b</code>, and a proof that <code>a * b = a * d</code>, and turns it into a proof of <code>b = d</code></p>",
        "id": 244134144,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624881932
    },
    {
        "content": "<p>I am still confused about the rewrite tactic.  Why does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_right_cancel</span> <span class=\"n\">at</span> <span class=\"n\">gd</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>applied to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">gd</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>produce a weird and unhelpful change of goals?  And why does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_left_cancel</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>applied to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">gd</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>produce an obscure error message?</p>\n<p>Is there some succinct description with examples on the proper use of rewrite?</p>",
        "id": 244164545,
        "sender_full_name": "Zbigniew Fiedorowicz",
        "timestamp": 1624895139
    },
    {
        "content": "<p><code>add_right_cancel</code> is an implication; on the other hand, <code>rw</code> takes hypotheses of the form <code>a = b</code> or <code>a \\iff b</code> and changes <code>P a</code> to <code>P b</code> (whatever <code>P</code> may be). </p>\n<p>My guess is that in your use of <code>rw add_right_cancel</code>, Lean sees <code>a + b = c + b → a = c</code> and tries to pattern match it against <code>a = b</code> or <code>a \\iff b</code>, which fails because you've only given it an implication. Then Lean sees that <code>a = c</code>,  so it tries to find a hypothesis <code>h : a + b = c + b</code> in the local context and then <code>rw</code> using <code>add_right_cancel h</code>. But Lean can't find any <code>h</code> so it fails.</p>",
        "id": 244167940,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1624896441
    },
    {
        "content": "<p>Similarly, this is the problem with <code>add_left_cancel</code></p>",
        "id": 244167991,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1624896467
    },
    {
        "content": "<p>You've used <code>add_right_cancel_iff</code> and it worked -- which is because now Lean sees the <code>\\iff</code> instead of just <code>→</code> and <code>rw</code> knows what to do</p>",
        "id": 244168147,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1624896538
    },
    {
        "content": "<p>You seem to be saying that rw needs to be followed by some statement of equality or an iff statement. How does this square with the use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">hd</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>where hd was a quantified implication, which I used successfully later in the proof?</p>\n<p>Presumably if add_right_cancel had the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_right_cancel</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>would have the desired result.</p>",
        "id": 244172166,
        "sender_full_name": "Zbigniew Fiedorowicz",
        "timestamp": 1624898474
    },
    {
        "content": "<p>For your original problem, the rewrite you're looking for is \"rw hd _ (add_left_cancel _ _ _ gd)\". I think there is some confusion here. When you say \"rw add_left_cancel at gd\", that doesn't mean \"utilize add_left_cancel to substitute a * g for a * d, using the proof named gd.\" It instead means \"find the first thing I can rewrite in the expression named gd, which is the variable a. And to do such a rewrite (to some arbitrary x) , I need a proof that a + y = x + y, for some arbitrary y.\" That is why you got an unhelpful goal</p>",
        "id": 244173898,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624899362
    },
    {
        "content": "<p>The metavariable ?m_1 is that arbitrary x.</p>",
        "id": 244174052,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624899422
    },
    {
        "content": "<p>If you want to stick to single rewrites, you can look at what your goal is after \"rw hd\". Can you solve the goal after that?</p>",
        "id": 244174208,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624899484
    },
    {
        "content": "<p>Basically, your</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_right_cancel</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"c1\">-- &lt;-- is missing the actual proof of \"a * g + a = a * d + a\" that is needed for the implication</span>\n</code></pre></div>",
        "id": 244176523,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624900480
    },
    {
        "content": "<p>I am still having trouble with the rewrite tactic. I have the following state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I am trying to apply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_right_eq_zero</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">,</span>\n</code></pre></div>\n<p>and I get the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">add_right_eq_zero</span> <span class=\"n\">k</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I am guessing that rw is expecting an argument of type Prop.  However when I attempt to coerce the type to Prop, I get an additional error message that there are too many arguments.</p>",
        "id": 244472998,
        "sender_full_name": "Zbigniew Fiedorowicz",
        "timestamp": 1625080045
    },
    {
        "content": "<p>OK, I found that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_right_eq_zero</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>i.e. omitting the meta-variables, does the trick.  I am still confused as to when I need to use meta-variables in rw.</p>\n<p>Indeed imitating Yakov's answer to my previous question, I expected that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_right_eq_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span>  <span class=\"n\">k</span> <span class=\"o\">,</span>\n</code></pre></div>\n<p>would be the right approach.  However this produced an obscure error message  involving meta-variables.  I then tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_right_eq_zero</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>which produced a friendlier error message.  Finally I found that omitting the meta-variables altogether was the right approach, but I don't understand why.</p>",
        "id": 244475103,
        "sender_full_name": "Zbigniew Fiedorowicz",
        "timestamp": 1625081136
    },
    {
        "content": "<p>If you look at the type of <code>add_right_eq_zero</code> in Theorem Statements -&gt; Advanced Addition World you'll see it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_right_eq_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and the <code>{}</code> means \"omit <code>a</code> and <code>b</code>, but the proof of <code>a+b=0</code> need not be omitted.</p>\n<p>What is going on is that the input of type <code>a + b = 0</code> is enough to figure out what the earlier inputs were. This is a phenomenon which you see when you allow dependent functions. If you have a function from A x B to C and I tell you what element of B we're going to use, then obviously you can't tell what element of A we're going to use. But if you have a function from a collection of dependent pairs (a,b) where b is in B(a) and B(a) depends on a, then if you know what b is then you know what B(a) is and so maybe you can figure out a from this. To make people's lives easier in this situation Lean has this <code>{}</code> bracket thing which means that you don't need to supply a at all and the unification system will work it out.</p>",
        "id": 244496196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625091596
    }
]