[
    {
        "content": "<p>Yeah, that works, I appreciate the help.</p>",
        "id": 277621586,
        "sender_full_name": "Harry Pacitti",
        "timestamp": 1648988587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455400\">Harry Pacitti</span> has marked this topic as resolved.</p>",
        "id": 277621594,
        "sender_full_name": "Notification Bot",
        "timestamp": 1648988590
    },
    {
        "content": "<p>A more general version (similarly can be implemented for <code>ℤ</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">k.succ</span> <span class=\"bp\">∨</span> <span class=\"n\">prop</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prove_le</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">k</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">prop</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"n\">ih</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prove_mod</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">%</span> <span class=\"n\">n.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n.1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">prove_le</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">n</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.le_of_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">))),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">prove_mod</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 277634531,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648995656
    },
    {
        "content": "<p>Wouldn't the original lemma just be proven via dec_trivial, no need to case on the value</p>",
        "id": 277658853,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1649016984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> <code>dec_trivial</code> doesn't work for the original lemma</p>",
        "id": 277659013,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649017226
    },
    {
        "content": "<p>:-(</p>",
        "id": 277659022,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1649017257
    }
]