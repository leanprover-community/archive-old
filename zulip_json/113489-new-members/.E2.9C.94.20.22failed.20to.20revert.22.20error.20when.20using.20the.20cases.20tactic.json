[
    {
        "content": "<p>When using the <code>cases</code> tactic, I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">revert</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">_do_match'</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"n\">them</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"bp\">'</span><span class=\"n\">_do_match'</span>\n<span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">auxiliary</span> <span class=\"n\">declaration</span> <span class=\"n\">introduced</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">equation</span> <span class=\"n\">compiler</span>\n<span class=\"o\">(</span><span class=\"n\">possible</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">clear'</span> <span class=\"n\">to</span> <span class=\"n\">remove</span> <span class=\"bp\">'</span><span class=\"n\">_do_match'</span> <span class=\"k\">from</span> <span class=\"n\">the</span> <span class=\"kn\">local</span> <span class=\"n\">context</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What causes this class of errors? I haven't been able to find any mentions of the same error anywhere.</p>",
        "id": 265634674,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640047900
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I don't think I've seen this error with <code>_do_match</code> before</p>",
        "id": 265635467,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640048491
    },
    {
        "content": "<p>the obvious solution is to follow the instruction and <code>clear _do_match</code></p>",
        "id": 265635541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640048545
    },
    {
        "content": "<p>but you should show the code that produced this error</p>",
        "id": 265635555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640048559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Unfortunately that doesn't work, as <code>_do_match</code> is produced by the case tactic.<br>\n<span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  re: <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I'm finding it difficult to generate one, as I am able to apply the <code>cases</code> tactic in a very similar circumstance elsewhere in the code base without a problem, unsure what's causing the problem, so may have to end up having a rather large <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 265636367,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640049291
    },
    {
        "content": "<p>even a non-working example would help. What is the code?</p>",
        "id": 265636396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640049321
    },
    {
        "content": "<p>The <code>_do_match</code> should be produced by an earlier use of <code>do ... \\&lt;x, y\\&gt; &lt;- a, ...</code></p>",
        "id": 265636497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640049408
    },
    {
        "content": "<p>so there shouldn't be any issue in clearing it before a use of <code>cases</code></p>",
        "id": 265636514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640049433
    },
    {
        "content": "<p>Ok! Here's the case of the function I am trying to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">vars</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"o\">(</span><span class=\"n\">ForExecBody</span> <span class=\"n\">curr_inner_vars</span> <span class=\"n\">inner_vars</span> <span class=\"n\">inner_vars'</span> <span class=\"n\">inner_vars''</span> <span class=\"n\">σ</span> <span class=\"n\">cond</span> <span class=\"n\">body</span> <span class=\"n\">post</span> <span class=\"n\">eval_body</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">st</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">is_empcblock</span> <span class=\"bp\">Γ</span> <span class=\"n\">eval_body</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">eval_body_is_empcblock</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">vars_eq_vars'</span> <span class=\"o\">:=</span> <span class=\"n\">eq.symm</span> <span class=\"bp\">$</span> <span class=\"n\">is_empcblock_imp_vars_eq_vars'</span> <span class=\"bp\">Γ</span> <span class=\"n\">eval_body_is_empcblock</span><span class=\"o\">,</span>\n      <span class=\"n\">pure</span> <span class=\"bp\">$</span>\n        <span class=\"n\">sigma.mk</span> <span class=\"n\">vars</span>\n          <span class=\"o\">⟨</span>\n            <span class=\"n\">finset.subset.refl</span> <span class=\"n\">vars</span><span class=\"o\">,</span>\n            <span class=\"o\">(</span>\n              <span class=\"n\">eq.rec</span> <span class=\"n\">st</span> <span class=\"n\">vars_eq_vars'</span><span class=\"o\">,</span>\n              <span class=\"n\">ForExecPost</span> <span class=\"n\">curr_inner_vars</span> <span class=\"n\">inner_vars</span> <span class=\"n\">inner_vars'</span> <span class=\"n\">inner_vars''</span> <span class=\"n\">σ</span>\n                <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"n\">cond</span> <span class=\"n\">vars_eq_vars'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"n\">body</span> <span class=\"n\">vars_eq_vars'</span><span class=\"o\">)</span> <span class=\"n\">post</span> <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"n\">post</span> <span class=\"n\">vars_eq_vars'</span><span class=\"o\">),</span>\n              <span class=\"n\">NormMode</span>\n            <span class=\"o\">)</span>\n          <span class=\"o\">⟩)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">eval_body_n_is_empcblock</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">inner_st</span> <span class=\"o\">:</span> <span class=\"n\">YulState</span> <span class=\"n\">τ</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"bp\">∪</span> <span class=\"n\">curr_inner_vars</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n            <span class=\"o\">(</span><span class=\"n\">merge_scopes</span> <span class=\"n\">σ</span> <span class=\"n\">st.1</span><span class=\"o\">,</span> <span class=\"n\">st.2</span><span class=\"o\">),</span>\n      <span class=\"o\">(</span><span class=\"n\">sigma.mk</span> <span class=\"n\">all_vars'</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">inner_st'</span><span class=\"o\">,</span> <span class=\"n\">eval_body'</span><span class=\"o\">,</span> <span class=\"n\">mode</span><span class=\"o\">)⟩)</span> <span class=\"bp\">←</span> <span class=\"n\">evalBlockList</span> <span class=\"n\">eval_body</span> <span class=\"n\">eval_body_n_is_empcblock</span> <span class=\"n\">inner_st</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"n\">vars</span> <span class=\"bp\">⊆</span> <span class=\"n\">all_vars'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">finset.union_subset_left</span> <span class=\"n\">p</span><span class=\"o\">},</span>\n      <span class=\"k\">let</span> <span class=\"n\">all_vars'_cast_p</span> <span class=\"o\">:</span> <span class=\"n\">all_vars'</span> <span class=\"bp\">=</span> <span class=\"n\">vars</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">all_vars'</span> <span class=\"bp\">\\</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"kd\">by</span> <span class=\"o\">{</span>\n          <span class=\"n\">apply</span> <span class=\"n\">eq.symm</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">finset.union_sdiff_of_subset</span> <span class=\"n\">p'</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n      <span class=\"k\">let</span> <span class=\"n\">cast_all_vars'</span> <span class=\"o\">:</span> <span class=\"n\">VarStore</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">all_vars'</span> <span class=\"bp\">\\</span> <span class=\"n\">vars</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n            <span class=\"n\">eq.rec</span> <span class=\"n\">inner_st'.1</span> <span class=\"n\">all_vars'_cast_p</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">outer_σ'</span><span class=\"o\">,</span> <span class=\"n\">inner_σ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">split_scope</span> <span class=\"n\">st.1</span> <span class=\"n\">cast_all_vars'</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">st'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">outer_σ'</span><span class=\"o\">,</span> <span class=\"n\">inner_st'.2</span><span class=\"o\">),</span>\n      <span class=\"k\">let</span> <span class=\"n\">cast_eval_body'</span> <span class=\"o\">:</span> <span class=\"n\">YulTerm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">BlockList</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">all_vars'</span> <span class=\"bp\">\\</span> <span class=\"n\">vars</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"bp\">∪</span> <span class=\"n\">inner_vars'</span><span class=\"o\">)</span> <span class=\"n\">NestedInFor</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n            <span class=\"n\">eq.rec</span> <span class=\"n\">eval_body'</span> <span class=\"n\">all_vars'_cast_p</span><span class=\"o\">,</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"n\">apply</span> <span class=\"n\">some</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">sigma.mk</span> <span class=\"n\">vars</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"o\">(⟨</span><span class=\"n\">finset.subset.refl</span> <span class=\"n\">vars</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:</span>\n          <span class=\"n\">pprod</span> <span class=\"o\">(</span><span class=\"n\">vars</span> <span class=\"bp\">⊆</span> <span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">YulState</span> <span class=\"n\">τ</span> <span class=\"bp\">Γ</span> <span class=\"n\">vars</span> <span class=\"bp\">×</span> <span class=\"n\">YulTerm</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">CStatement</span> <span class=\"n\">vars</span> <span class=\"n\">vars</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Mode</span> <span class=\"n\">b</span> <span class=\"n\">b'</span><span class=\"o\">)),</span>\n        <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">st'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n        <span class=\"n\">clear</span> <span class=\"n\">_do_match</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">mode</span><span class=\"o\">,</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>cases mode</code> tactic returns the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">revert</span> <span class=\"sc\">'b'' '</span><span class=\"n\">H_2'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">_let_match'</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"n\">them</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"bp\">'</span><span class=\"n\">_let_match'</span> <span class=\"n\">is</span> <span class=\"n\">an</span>\n<span class=\"n\">auxiliary</span> <span class=\"n\">declaration</span> <span class=\"n\">introduced</span> <span class=\"kd\">by</span> <span class=\"n\">the</span> <span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"o\">(</span><span class=\"n\">possible</span> <span class=\"n\">solution</span><span class=\"o\">:</span>\n<span class=\"n\">use</span> <span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">clear'</span> <span class=\"n\">to</span> <span class=\"n\">remove</span> <span class=\"bp\">'</span><span class=\"n\">_let_match'</span> <span class=\"k\">from</span> <span class=\"n\">the</span> <span class=\"kn\">local</span> <span class=\"n\">context</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265636546,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640049472
    },
    {
        "content": "<p>well, it's still suggesting things, try clearing them too</p>",
        "id": 265636600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640049492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> If I do <code>clear _do_match</code> before this case statement, the same error still occurs...</p>",
        "id": 265636633,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640049538
    },
    {
        "content": "<p>no, <code>clear _do_match _let_match,</code> then cases</p>",
        "id": 265636650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640049551
    },
    {
        "content": "<p>keep adding things to the clear as long as lean suggests that you do so</p>",
        "id": 265636658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640049568
    },
    {
        "content": "<p>You could also try <code>clear_</code> which clears all \"internal\" things like <code>_do_match</code> and <code>_let_match</code></p>",
        "id": 265636752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640049631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thank you very much, that seems to have worked!</p>",
        "id": 265637125,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1640050033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453259\">Julian Sutherland</span> has marked this topic as resolved.</p>",
        "id": 265637132,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640050043
    }
]