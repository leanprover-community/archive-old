[
    {
        "content": "<p>I'm trying to prove the following assertion:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kn\">variable</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">\\</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"err\">⊆</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>If I had the content of h1 as a goal I could apply the ext-tactic to rewrite the equality as an equivalence. I would like to achieve for example as a result an assertion as x \\notin A \\or x \\notin B \\or x \\in C. With this hypothesis it would be possible to prove the goal. I don't find a way to rewrite h1.</p>",
        "id": 210250615,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600257424
    },
    {
        "content": "<p>Looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/basic.html\">https://leanprover-community.github.io/mathlib_docs/data/set/basic.html</a>, I started with</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_iff_forall_not_mem</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_inter_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 210259163,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1600262112
    },
    {
        "content": "<p>The <code>ext</code> tactic, if the goal is an equality <code>s = t</code> of sets, would just apply the theorem <code>set.ext : ∀ {α : Type u} {a b : set α}, (∀ (x : α), x ∈ a ↔ x ∈ b) → a = b</code>. Because this is of the form P -&gt; Q, it works great if Q is the goal, but can't be used if Q is the hypothesis. However there is a corresponding \"if and only if\" version, <code>set.ext_iff : ∀ {α : Type u} {s t : set α}, s = t ↔ ∀ (x : α), x ∈ s ↔ x ∈ t</code>. So the way to do <code>ext</code> on a hypothesis which is an equality of two sets is <code>rw set.ext_iff</code>. <br>\nfor<br>\nHowever, as Ruben points out, if you use extensionality directly on <code>h1 : X = \\empty</code> you'll end up with the slightly annoying <code>\\forall a, a \\in X \\iff x \\in \\empty</code>, and then you'd have to rewrite a proof of <code>a \\in \\empty \\iff false</code> and then a proof of <code>(P \\iff false) \\iff \\not P</code> and then maybe you want to rewrite <code>\\not a \\in X</code> to <code>a \\notin X</code> -- stuff which mathematicians just do intuitively -- but can be a pain in theorem provers. What do you actually want? If you want an elementwise statement, you probably want something like \"<code>\\forall a, a \\notin X</code> -- that's the step you want. You could look to see if it's there already:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n\n\n<p>and indeed that statement, the one you may (or may not) want, is in the library; the <code>library_search</code> tactic says that the proof is <code>eq_empty_iff_forall_not_mem.mp</code> . That <code>mp</code> at the end means \"we have the theorem <code>eq_empty_iff_forall_not_mem</code> , but it's an if and only if, and you only wanted one way (<code>iff.mp</code> is the <code>P -&gt; Q</code> part of <code>P &lt;-&gt; Q</code>). Because it's an <code>iff</code>, this means you can rewrite it. That's some kind of algorithmic way to make progress here.</p>",
        "id": 210280697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600270930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329867\">@Claus-Peter Becke</span></p>",
        "id": 210280717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600270941
    },
    {
        "content": "<p>This is annoying -- why can't I get automation to do this?</p>",
        "id": 210286197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600273406
    },
    {
        "content": "<p>have you tried simp with contextual</p>",
        "id": 210286239,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600273435
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">\\</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"err\">⊆</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_iff_forall_not_mem</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_inter_iff</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_diff</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210286319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600273456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">\\</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"err\">⊆</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">inter_diff_assoc</span><span class=\"o\">,</span> <span class=\"n\">diff_eq_empty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p><del>(need to change the <code>data.set</code> import to <code>data.set.basic</code>)</del></p>",
        "id": 210286451,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1600273528
    },
    {
        "content": "<p>Wow, <code>data.set</code> doesn't import <code>data.set.basic</code>? If so, that should be fixed.</p>",
        "id": 210286712,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600273662
    },
    {
        "content": "<p>It does, I don't know what happened... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 210286800,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1600273687
    },
    {
        "content": "<p>Aah so that's the trick -- never use extensionality at all.</p>",
        "id": 210322515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600291594
    },
    {
        "content": "<p>I guess the trick is to generalize</p>",
        "id": 210322744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600291714
    },
    {
        "content": "<p>A lot of thanks for your very helpful comments, which supported to close the goal. Again I learned of how to deal better with Lean.</p>",
        "id": 210347330,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600317193
    }
]