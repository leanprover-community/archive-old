[
    {
        "content": "<p>Dear All,</p>\n<p>I was surprised that <code>simp</code> could not solve the lemma below: is this something that <code>simp</code> should actually know how to solve?  I expect that the answer might be \"You are asking <code>simp</code> to do something that it was not designed to do\".  Still, a written confirmation of this would be helpful!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mnnm</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mn</span><span class=\"o\">],</span>  <span class=\"c1\">--simplify tactic failed to simplify</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226614984,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613538871
    },
    {
        "content": "<p>simp will only be able to make use of hypotheses that are already in normal form, unless you simplify them first</p>",
        "id": 226615583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613539633
    },
    {
        "content": "<p>this is what <code>simpa</code> is for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mnnm</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mn</span>\n</code></pre></div>",
        "id": 226615601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613539681
    },
    {
        "content": "<p>Ah, thanks!  I will try and see if <code>simpa</code> and <code>eq_comm</code> help with my actual example!</p>",
        "id": 226615668,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613539737
    },
    {
        "content": "<p>incidentally, <code>by simp [mn, eq_comm]</code> works, but it doesn't work on the following similar goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mnnm</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mn</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which is why you should use <code>simpa</code> instead</p>",
        "id": 226615678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613539755
    },
    {
        "content": "<p>Ok, thank you for the explanation!  It turns out that, in my actual problem, <code>simp [eq_comm, mn, coeff_monomial]</code> was able to exploit the symmetry in <code>mn</code> and finish the goal!</p>\n<p>(I had polynomials floating around, hence the monomial stuff.)</p>",
        "id": 226615820,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613539933
    },
    {
        "content": "<p>Of course, something like a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">contradiction</span>\n</code></pre></div>\n<p>might also have worked</p>",
        "id": 226616107,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613540295
    },
    {
        "content": "<p>Ah, if we're golfing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mnnm</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">ne.symm</span>\n</code></pre></div>",
        "id": 226617427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613542083
    },
    {
        "content": "<p>Yeah, I meant that if there was some state where there was some <code>ne</code> as the goal, and some hypothesis that would be contradictory if <code>n = m</code>.</p>",
        "id": 226617609,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613542312
    },
    {
        "content": "<p>Ok, thanks for the suggestions!  I rarely use <code>contradiction</code>.</p>\n<p>In my situation, though I was trying to convert a non-terminal <code>simp</code> into a terminal one, so I really wanted to add stuff to <code>simp</code> so that it would finish on its own.</p>\n<p>Mario's answer highlighted that the (probably) reason <code>simp</code> did not finish is because <code>eq_comm</code> is not a good <code>simp</code> lemma, since it might create loops.  I hope that this interpretation is correct!</p>",
        "id": 226619862,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613544975
    },
    {
        "content": "<p>it's okay as a simp lemma, since simp can detect commutativity lemmas</p>",
        "id": 226620094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613545323
    },
    {
        "content": "<p>but swapping all your equality directions is not a thing you want to happen all the time</p>",
        "id": 226620144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613545347
    },
    {
        "content": "<p>Mario, as usual, thanks for your insights on Lean and its workings!</p>",
        "id": 226621870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613547092
    }
]