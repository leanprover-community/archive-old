[
    {
        "content": "<p>On the last line of this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, <code>a</code> is of type <code>M → M</code>. But then lean complains it has type <code>m_1</code> and is not a function! why is that? <span aria-label=\"anguished\" class=\"emoji emoji-1f627\" role=\"img\" title=\"anguished\">:anguished:</span></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">endo_monoid</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">instance</span> <span class=\"n\">endo_hasid</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">instance</span> <span class=\"n\">endo_semigroup</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">dynamical_system</span> <span class=\"o\">:=</span> <span class=\"n\">submonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">dyn_mem</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dynamical_system</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">submonoid</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span>\n\n<span class=\"n\">def</span> <span class=\"n\">orbit</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dyn</span> <span class=\"o\">:</span> <span class=\"n\">dynamical_system</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">dyn</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"c1\">-- ??</span>\n</code></pre></div>",
        "id": 201070240,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1592339546
    },
    {
        "content": "<p>You want <code>(h : a \\in dyn)</code>.</p>",
        "id": 201070301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592339588
    },
    {
        "content": "<p>Also, if you didn't use <code>a</code> as variable, you would have gotten a more useful error message.</p>",
        "id": 201070430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592339649
    },
    {
        "content": "<p>This is a very frustrating bug... the <code>a</code>-bug.</p>",
        "id": 201070456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592339662
    },
    {
        "content": "<p>With a bit of luck, this would also do what you want:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">orbit</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dyn</span> <span class=\"o\">:</span> <span class=\"n\">dynamical_system</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">dyn</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 201070570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592339721
    },
    {
        "content": "<p>so I always need to name my hypothesis when writing \"exists...\"?</p>",
        "id": 201070576,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1592339726
    },
    {
        "content": "<p>(I didn't test it.)</p>",
        "id": 201070578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592339727
    },
    {
        "content": "<p>In your initial code, change the <code>a</code> to <code>f</code>, and then look at the tactic state before the error message...</p>",
        "id": 201070669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592339775
    },
    {
        "content": "<p>your last example does not work (I tried it before)</p>",
        "id": 201070685,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1592339783
    },
    {
        "content": "<p>You will see that there are two <code>f</code>s and an <code>a</code>.</p>",
        "id": 201070697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592339791
    },
    {
        "content": "<p>I don't think it's the <code>a</code> bug here--it would be the <code>H</code> bug.</p>",
        "id": 201070730,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592339815
    },
    {
        "content": "<p>Ok, too bad... if the short versions don't work, then you need to give more names (-;</p>",
        "id": 201070732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592339815
    },
    {
        "content": "<p>ok, thank you <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> we could have a list of those strange bugs and their common symptoms</p>",
        "id": 201070866,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1592339888
    }
]