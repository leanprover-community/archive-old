[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import group_theory.coset\nimport data.fintype.basic\nimport group_theory.order_of_element\n\nvariables {G : Type} [fintype G] [group G]\nvariables (H : subgroup G) [fintype H]\n\nopen function\n\n@[ext] structure partition (α : Type) :=\n(C : set (set α))\n(Hnonempty : ∀ X ∈ C, (X : set α).nonempty)\n(Hcover : ∀ a, ∃ X ∈ C, a ∈ X)\n(Hdisjoint : ∀ X Y ∈ C, (X ∩ Y : set α).nonempty → X = Y)\n\nlemma lagrange (P : partition G) (h: ∀ X, X ∈ P.C → ∃ (g : G), X = left_coset g H ) :\nfintype.card H ∣ fintype.card G := --the size of the subgroup H divides the size of the group G\nbegin\n  exact card_subgroup_dvd_card H,\nend\n--lmao I don't need any of\n--`(P : partition G) (h: ∀ X, X ∈ P.C → ∃ (g : G), X = left_coset g H )`\n--this is very annoying\n\n#check left_coset\nlemma lagrange_long {k : ℕ} (P : partition G)\n(h: ∀ X, X ∈ P.C → ∃ (g : G), X = left_coset g H) {γ : fin k → G}\n{h₁ : bijective γ}\n{h₂ : ∀ (i j : fin k), left_coset (γ i) H ≠ left_coset (γ j) H}\n{h₃ : (⋃(i : fin k), left_coset (γ i) H) = G}:\nfintype.card H ∣ fintype.card G := --the size of the subgroup H divides the size of the group G\nbegin\n  --partition G into left cosets of H `done`]\n  let L := (⋃(i : fin k), left_coset (γ i) H),\n\n  --G is finite, so exists g₁, g₂, ..., gₖ s.t. g₁H, ..., gₖH partition G,\n  --Then |G| = |g₁H| + |g₂H| + ... + |gₖH|\n  --         = |H| + |H| + ... |H|\n  --         = k|H|, k is number of distinct left cosets of H in H\n  --Thus |H| divides |G| and the goal is fulfilled\n  sorry,\nend\n</code></pre></div>\n<p>I have an error in the hypothesis h₃, where I want to state that the union of all the subgroups make up the entire group, but I cannot use equality because there is a mismatch between set G and G itself. How can I get around this?</p>",
        "id": 246955695,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627031434
    },
    {
        "content": "<p>Ignore the <code>let L</code> statement in the proof, have decided to create the union as a hypothesis in the beginning instead.</p>",
        "id": 246955743,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627031502
    },
    {
        "content": "<p>Can you fix the first line of your code so that it says <code> ``` </code> and not <code> ```import tactic</code>? <code> ``` </code> has to be on its own line, otherwise it interprets <code>import tactic</code> as the language to use for highlighting</p>",
        "id": 246955976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627031675
    },
    {
        "content": "<blockquote>\n<p>How can I get around this?</p>\n</blockquote>\n<p>The RHS should be <del><code>set.univ G</code></del> <strong><code>set.univ</code> </strong>, ie \"the set of all elements in G\"</p>",
        "id": 246956133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627031793
    },
    {
        "content": "<p>Ah I see, I remember reading that, thank you!</p>",
        "id": 246956417,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627032035
    },
    {
        "content": "<p>I have another type mismatch between set.univ G being a Prop and returning true and needing a set G. I think I can find the fix for this though, no worries.</p>",
        "id": 246956720,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627032258
    },
    {
        "content": "<p>Such as perhaps <code>(set.univ : set G)</code>.</p>",
        "id": 246956821,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627032327
    },
    {
        "content": "<p>Yes, you're right: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.univ\">docs#set.univ</a></p>",
        "id": 246956933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627032411
    },
    {
        "content": "<p><code>set.univ</code> by itself should work, it can work out <code>set G</code> from the LHS</p>",
        "id": 246956957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627032433
    },
    {
        "content": "<p>Is there a way then to prove that <code>fintype.card G = fintype.card (set.univ : set G)</code>? Seems almost trivial to say the size of a finite group is the same size as the subgroup with all the elements of the group.</p>",
        "id": 247073322,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627131231
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 247073425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627131349
    },
    {
        "content": "<p>PS I would write it the other way around -- the more complex statement on the left.</p>",
        "id": 247073586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627131559
    },
    {
        "content": "<p>When I end up with a goal like <code>fintype.card ↥H ∣ fintype.card ↥set.univ</code>, all I want to do is dismantle the coercions that are popping up. There was the other topic where someone unfolded the coercion, but what I'm getting from that doesn't feel like guidance I know how to use.<br>\n<a href=\"/user_uploads/3121/RrxZ4MdsqNqbU0lMn5JgZzh1/image.png\">image.png</a> <br>\nI'll keep hacking away and maybe try another approach but have been stuck with these for a while.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RrxZ4MdsqNqbU0lMn5JgZzh1/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/RrxZ4MdsqNqbU0lMn5JgZzh1/image.png\"></a></div>",
        "id": 247188812,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627297761
    },
    {
        "content": "<p>can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? this seems like the canonical way to talk about the cardinality of a subgroup, unless maybe it's <code>finset.card (H : set G)</code></p>",
        "id": 247190201,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627298919
    },
    {
        "content": "<p><del>there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_univ\">docs#finset.card_univ</a> to help you on the right</del></p>",
        "id": 247190221,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627298939
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Hnonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hdisjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lagrange</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P.C</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"c1\">--the size of the subgroup H divides the size of the group G</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">card_subgroup_dvd_card</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">--lmao I don't need any of</span>\n<span class=\"c1\">--`(P : partition G) (h: ∀ X, X ∈ P.C → ∃ (g : G), X = left_coset g H )`</span>\n<span class=\"c1\">--this is very annoying</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lagrange_long</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P.C</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)}:</span>\n<span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"c1\">--the size of the subgroup H divides the size of the group G</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--partition G into left cosets of H `done`</span>\n\n  <span class=\"c1\">--G is finite, so exists g₁, g₂, ..., gₖ s.t. g₁H, ..., gₖH partition G `done?`</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.of_equiv_card</span> <span class=\"o\">(</span><span class=\"n\">equiv.set.univ</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n\n\n  <span class=\"c1\">--Then |G| = |g₁H| + |g₂H| + ... + |gₖH|</span>\n  <span class=\"c1\">--         = |H| + |H| + ... |H|</span>\n  <span class=\"c1\">--         = k|H|, k is number of distinct left cosets of H in H</span>\n  <span class=\"c1\">--Thus |H| divides |G| and the goal is fulfilled</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247190704,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627299311
    },
    {
        "content": "<p>My next goal was to have <code>fintype.card G</code> to be equal to <code>fintype.card</code> of the union of the left cosets, and see if I could then split that up into a sum since the cosets are disjoint and there are a finite number of cosets.</p>",
        "id": 247190817,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627299376
    },
    {
        "content": "<p>Although I'm not convinced I've found something in mathlib yet that I could use as a finite sum.</p>",
        "id": 247190837,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627299398
    },
    {
        "content": "<blockquote>\n<p>My next goal was to ....</p>\n</blockquote>\n<p>Can you state this goal as a <code>have</code>?</p>",
        "id": 247191038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627299564
    },
    {
        "content": "<p>I gave that an attempt, but it I was a bit stuck using any hypotheses to rw and I don't think library_search yielded a result.</p>",
        "id": 247191197,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627299679
    },
    {
        "content": "<p>Ideally I would now be able to use h₃ to rewrite and achieve the goal I said but there is the difference of the coercion.</p>",
        "id": 247191257,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627299723
    },
    {
        "content": "<p>Do you understand the difference between a type and a term? Do you understand the difference between fintype and finset? Do you understand the difference between fintype.card and finset.card?</p>",
        "id": 247194009,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627301746
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_coe\">docs#fintype.card_coe</a></p>",
        "id": 247194122,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627301830
    },
    {
        "content": "<p>Do you have a lemma that the cardinality of left cosets is the same? Do you know of a lemma that says that the cardinality of a bUnion of disjoint finsets is the sum of their cardinalities?</p>",
        "id": 247194308,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627301972
    },
    {
        "content": "<p>The difference is not just the coercion, one is about set.univ while the other is about finset.univ</p>",
        "id": 247199739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627305158
    },
    {
        "content": "<p>I mean, do we actually have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.of_equiv_card</span> <span class=\"o\">(</span><span class=\"n\">equiv.set.univ</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>? this is <code>library_search</code>'s  best effort</p>",
        "id": 247200477,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627305543
    },
    {
        "content": "<p>Note that in the mwe we just used that lemma to introduce the coercion in the first place</p>",
        "id": 247201630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627306022
    },
    {
        "content": "<p>But that's probably a fine simp lemma to add</p>",
        "id": 247201666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627306036
    },
    {
        "content": "<p>Hello again.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Hnonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hdisjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lagrange</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P.C</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"c1\">--the size of the subgroup H divides the size of the group G</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">card_subgroup_dvd_card</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">--lmao I don't need any of</span>\n<span class=\"c1\">--`(P : partition G) (h: ∀ X, X ∈ P.C → ∃ (g : G), X = left_coset g H )`</span>\n<span class=\"c1\">--this is very annoying</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">quotient_group.left_rel</span> <span class=\"n\">H</span>\n<span class=\"c1\">-- `The equivalence relation corresponding to the partition of a group by left cosets of a subgroup.`</span>\n\n\n\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lagrange_long</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P.C</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">}:</span>\n<span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"c1\">--the size of the subgroup H divides the size of the group G</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--partition G into left cosets of H `done`</span>\n\n  <span class=\"c1\">--G is finite, so exists g₁, g₂, ..., gₖ s.t. g₁H, ..., gₖH partition G `done?`</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.of_equiv_card</span> <span class=\"o\">(</span><span class=\"n\">equiv.set.univ</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">dvd_of_mul_left_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">coe_sort</span> <span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">coe_sort</span> <span class=\"n\">h₃.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"c1\">--rw ← h₃,</span>\n\n  <span class=\"c1\">-- I am going to need a lemma here to say the finite union of disjoint sets</span>\n  <span class=\"c1\">-- has the same size as the sum of the sizes of each set</span>\n\n  <span class=\"c1\">-- also, is there a way for me to use the left_cosets to make the partition</span>\n  <span class=\"c1\">-- instead of saying there is a partition and stating that each block</span>\n  <span class=\"c1\">-- is equal to some left</span>\n\n\n  <span class=\"c\">/-</span><span class=\"cm\">have : {R // equivalence R} ≃ partition G,</span>\n<span class=\"cm\">  exact i_need_this G (left_coset_equiv set.univ),-/</span>\n\n\n\n  <span class=\"c1\">--have : equivalence (left_coset_equiv set.univ) ≃ partition G,</span>\n  <span class=\"c1\">--have h₅ : fintype.card (⋃(i : fin k), left_coset (γ i) H) = fintype.card set.univ,</span>\n\n  <span class=\"c1\">--Then |G| = |g₁H| + |g₂H| + ... + |gₖH|</span>\n  <span class=\"c1\">--         = |H| + |H| + ... |H|</span>\n  <span class=\"c1\">--         = k|H|, k is number of distinct left cosets of H in H</span>\n  <span class=\"c1\">--Thus |H| divides |G| and the goal is fulfilled</span>\n<span class=\"kd\">end</span>\n\n\n\n\n\n\n\n\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lagrange_long2</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lft_cos_prtn</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">quotient_group.left_rel</span> <span class=\"n\">H</span><span class=\"o\">){</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">}:</span>\n<span class=\"n\">fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">∣</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"c1\">--the size of the subgroup H divides the size of the group G</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--partition G into left cosets of H `done`</span>\n\n  <span class=\"c1\">--G is finite, so exists g₁, g₂, ..., gₖ s.t. g₁H, ..., gₖH partition G `done?`</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.of_equiv_card</span> <span class=\"o\">(</span><span class=\"n\">equiv.set.univ</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">dvd_of_mul_left_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">coe_sort</span> <span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"n\">coe_sort</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">coe_sort</span> <span class=\"n\">h₃.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">quotient_group.left_rel</span> <span class=\"n\">at</span> <span class=\"n\">lft_cos_prtn</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">--rw ← h₃,</span>\n\n  <span class=\"c1\">-- I am going to need a lemma here to say the finite union of disjoint sets</span>\n  <span class=\"c1\">-- has the same size as the sum of the sizes of each set</span>\n\n  <span class=\"c1\">-- also, is there a way for me to use the left_cosets to make the partition</span>\n  <span class=\"c1\">-- instead of saying there is a partition and stating that each block</span>\n  <span class=\"c1\">-- is equal to some left</span>\n\n\n  <span class=\"c\">/-</span><span class=\"cm\">have : {R // equivalence R} ≃ partition G,</span>\n<span class=\"cm\">  exact i_need_this G (left_coset_equiv set.univ),-/</span>\n\n\n\n  <span class=\"c1\">--have : equivalence (left_coset_equiv set.univ) ≃ partition G,</span>\n  <span class=\"c1\">--have h₅ : fintype.card (⋃(i : fin k), left_coset (γ i) H) = fintype.card set.univ,</span>\n\n  <span class=\"c1\">--Then |G| = |g₁H| + |g₂H| + ... + |gₖH|</span>\n  <span class=\"c1\">--         = |H| + |H| + ... |H|</span>\n  <span class=\"c1\">--         = k|H|, k is number of distinct left cosets of H in H</span>\n  <span class=\"c1\">--Thus |H| divides |G| and the goal is fulfilled</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In <code>lagrange_long</code>, I am pushing forward with saying there is a partition and giving the partition a property, and I've added an extra hypothesis with a <code>coe_sort</code>, but am unable to use <code>rw h₁</code>. Does coe_sort send to different places? I'm rereading Yakov Pechersky's comment a lot to look for a better understanding, and am looking to understand the error I see. Is this just not a road I can travel down?</p>",
        "id": 247446120,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627471052
    },
    {
        "content": "<p>Can you show the goal state and error message where <code>rw h₁</code> fails?</p>",
        "id": 247446217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627471122
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort.S</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)),</span>\n    <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">_a</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span> <span class=\"bp\">≠</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span>\n<span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">P_C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n<span class=\"n\">P_Hnonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P_C</span> <span class=\"bp\">→</span> <span class=\"n\">X.nonempty</span><span class=\"o\">,</span>\n<span class=\"n\">P_Hcover</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P_C</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">P_Hdisjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">P_C</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">∈</span> <span class=\"n\">P_C</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n    <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">P_C</span><span class=\"o\">,</span> <span class=\"n\">Hnonempty</span> <span class=\"o\">:=</span> <span class=\"n\">P_Hnonempty</span><span class=\"o\">,</span> <span class=\"n\">Hcover</span> <span class=\"o\">:=</span> <span class=\"n\">P_Hcover</span><span class=\"o\">,</span> <span class=\"n\">Hdisjoint</span> <span class=\"o\">:=</span> <span class=\"n\">P_Hdisjoint</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">left_coset</span> <span class=\"n\">g</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">),</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">set.univ</span> <span class=\"bp\">=</span> <span class=\"bp\">↥⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">set.univ</span>\n</code></pre></div>",
        "id": 247446857,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1627471600
    },
    {
        "content": "<p>It's likely that the two <code>set.univ</code>s refer to different types - both <code>(set.univ : set nat)</code> and <code>(set.univ : set unit)</code> will show as the same in the goal view. If you hover over them in the goal view, it will tell you which <code>set.univ</code> is being used.</p>",
        "id": 247446918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627471654
    },
    {
        "content": "<p>Using <code>simp_rw</code> may also solve the problem</p>",
        "id": 247447029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627471734
    },
    {
        "content": "<p>Btw, your assumptions are inconsistent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">nat.eq_zero_or_pos</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin.is_empty</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set.ext_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">set.mem_empty_eq</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Union</span><span class=\"o\">,</span> <span class=\"n\">iff_false</span><span class=\"o\">],</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">fin.is_empty.elim</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finset.univ_eq_empty'</span><span class=\"o\">,</span> <span class=\"n\">finset.univ_eq_empty</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">set.univ_eq_empty_iff</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this.elim'</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h₂</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 247453479,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1627476444
    },
    {
        "content": "<p>I assume h₂ should have an <code>i ≠ j</code> in it?</p>",
        "id": 247453892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627476706
    },
    {
        "content": "<p>Probably better stated as injectivity of the fun i, left_coset (gamma i) H</p>",
        "id": 247456068,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627477828
    },
    {
        "content": "<p>Ah, that's a shame, did originally have <code>{h₁ : injective γ}</code> but removed it in case it was superfluous information, was going to look into readding it once I needed it.<br>\nHave also addressed <code>{h₂ : ∀ (i j : fin k), i ≠ j → left_coset (γ i) H ≠ left_coset (γ j) H}</code>, I think that is better.<br>\nI will look at <br>\n<span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/union.20of.20subgroups.20is.20the.20group/near/247453479\">said</a>:</p>\n<blockquote>\n<p>Btw, your assumptions are inconsistent:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">nat.eq_zero_or_pos</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin.is_empty</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">left_coset</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set.ext_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">set.mem_empty_eq</span><span class=\"o\">,</span> <span class=\"n\">set.mem_Union</span><span class=\"o\">,</span> <span class=\"n\">iff_false</span><span class=\"o\">],</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">fin.is_empty.elim</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finset.univ_eq_empty'</span><span class=\"o\">,</span> <span class=\"n\">finset.univ_eq_empty</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">set.univ_eq_empty_iff</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this.elim'</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h₂</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>to see if there is another thing that does not work here.</p>\n<p>I am considering working backwards from the proof of lagrange's theorem in mathlib and seeing what it is made out of.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/union.20of.20subgroups.20is.20the.20group/near/247446918\">said</a>:</p>\n<blockquote>\n<p>It's likely that the two <code>set.univ</code>s refer to different types - both <code>(set.univ : set nat)</code> and <code>(set.univ : set unit)</code> will show as the same in the goal view. If you hover over them in the goal view, it will tell you which <code>set.univ</code> is being used.</p>\n</blockquote>\n<p>I have no idea why, but I do not get any information when I hover in the infoview.</p>",
        "id": 247458816,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627479133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/union.20of.20subgroups.20is.20the.20group/near/247456068\">said</a>:</p>\n<blockquote>\n<p>Probably better stated as injectivity of the fun i, left_coset (gamma i) H</p>\n</blockquote>\n<p>This function you mean is <code>{γ : fin k → G}</code>, correct?</p>",
        "id": 247458957,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627479196
    },
    {
        "content": "<p>No, the function Yakov means is the one they stated,. Yakov is suggesting<code>h₂ : function.injective (λ i, left_coset (γ i) H)</code>, which is easier to work with than your corrected <code>h₂</code> but otherwise equivalent.</p>",
        "id": 247459520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627479430
    },
    {
        "content": "<p>Ah I understand. Thank you!</p>",
        "id": 247464525,
        "sender_full_name": "Thomas Laraia",
        "timestamp": 1627481725
    }
]