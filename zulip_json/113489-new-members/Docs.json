[
    {
        "content": "<p>Is there a docs page for Lean 4 that has all of the theorems etc. that can be used for structured proof steps and all the tactics? I've noticed that mathlib has great documentation, but I wasn't sure if there was anything similar just for Lean 4 core.</p>",
        "id": 313129790,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669834102
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a> has docs for both core and mathlib, we don't have a tactic list or something like that right now though.</p>",
        "id": 313130134,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669834212
    },
    {
        "content": "<p>Sweet! Thank you. So there's Init Lean Mathlib and Std. Are Init Lean and Std all default included in the Lean environment whereas Mathlib is the math library via mathlib4?</p>",
        "id": 313130599,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669834345
    },
    {
        "content": "<p><code>Init</code> is default in Lean 4. <code>Std</code> used to be core but it is now in a library called std4 hosted by the same github organization as mathlib4. There might be eventual plans to integrate the default distribution with std or something but that's still in the future for now. Mathlib is indeed via matlhib4</p>",
        "id": 313130785,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669834413
    },
    {
        "content": "<p>Gotcha. I noticed that Std has Std.Tactic which includes several tactics. I solved a proof last night using the by_cases tactic which is listed in Std.Tactic but I didn't import std4. Can I assume that several of those tactics are included in Lean by default but not all? And that there might be more tactics that are in Lean that aren't listed in Std.Tactic?</p>",
        "id": 313131478,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669834602
    },
    {
        "content": "<p>mathlib4 does have std4 as a dependency so if you have mathlib4 you have std4</p>",
        "id": 313131684,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669834655
    },
    {
        "content": "<p>I don't have mathlib4 either.</p>",
        "id": 313131731,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669834669
    },
    {
        "content": "<p>Unless it's default included by lake init.</p>",
        "id": 313131865,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669834701
    },
    {
        "content": "<p>no</p>",
        "id": 313134557,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669835429
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/blob/bc4c3f72b28abc028fc55ea49d827089fb7e9ef4/Std/Tactic/ByCases.lean#L16\">https://github.com/leanprover/std4/blob/bc4c3f72b28abc028fc55ea49d827089fb7e9ef4/Std/Tactic/ByCases.lean#L16</a></p>\n<p>std improves on by_cases by macro rules, i assume its in core as well</p>",
        "id": 313134647,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669835476
    },
    {
        "content": "<p>It looks like it is. I've been scanning through the Lean4 repo (which I probably should have gone to before to look for tactics). It has the byCases tactic, and I'm guessing that by_cases is just an alias for byCases.</p>",
        "id": 313136324,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669836046
    }
]