[
    {
        "content": "<p>Given a ring <code>R</code> and a natural number <code>n</code>, I'd like to use the free module <code>R^n</code>? Does Mathlib contain a definition for this? So far I can't find it.</p>",
        "id": 179274704,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1572296068
    },
    {
        "content": "<p>Poking around I see that there is <code>dfinsupp.to_module</code>, which I could obviously use to define <code>R^n</code> but this seems rather heavyweight, which brings me to my second question: is there  a case to be made for creating the following:</p>\n<div class=\"codehilite\"><pre><span></span>instance (n : ℕ) (R : Type u) [ring R] : add_comm_group (vector R n) :=\n  { zero         := sorry,\n    add          := sorry,\n    add_assoc    := sorry,\n    zero_add     := sorry,\n    add_zero     := sorry,\n    neg          := sorry,\n    add_left_neg := sorry,\n    add_comm     := sorry }\n</pre></div>\n\n\n<p>?</p>",
        "id": 179274770,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1572296137
    },
    {
        "content": "<p>Oops, that's just the commutative group structure. I mean also to have the scalar action so that we actually have an instance <code>module R (vector R n)</code>?</p>",
        "id": 179275102,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1572296308
    },
    {
        "content": "<p>The most convenient definition of <code>R^n</code> is (I claim) <code>fin n -&gt; R</code>. This has a module structure using <code>pi.module</code> (hidden in <code>algebra/pi_instances.lean</code>).</p>",
        "id": 179275318,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572296432
    },
    {
        "content": "<p>Aha, thank you! I will chase that down :D</p>",
        "id": 179275353,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1572296456
    },
    {
        "content": "<p>Similar to the free algebra (polynomials) discussed a while ago, we might need to introduce a type class <code>free_module</code>, and maybe it should carry a basis around with it. Because in practice you might also end up with <code>finsupp (fin n) R</code> or some inductively defined iterated product, or <code>vector n R</code> (admittedly, unlikely).</p>",
        "id": 179299695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572323844
    },
    {
        "content": "<p>I think we've been working a lot with constructions, and have neglected to use a characteristic \"predicate\".</p>",
        "id": 179299702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572323881
    },
    {
        "content": "<p>I don't have a feeling for whether we want an actual predicate, or whether we should carry the data of a basis around.</p>",
        "id": 179299743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572323912
    },
    {
        "content": "<p>But introducing <em>something</em> that unifies all different <code>n</code>-dimensional free module constructions seems like a good move to me.</p>",
        "id": 179299756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572323947
    },
    {
        "content": "<p>This is I guess because one will want to prove things about free modules (eg free modules are flat, free modules are projective) for one type and then hope to deduce it for all the other types. So we're supposed to prove 'if it satisfies these free module axioms then it is projective\", right? That's the dependent type theory way of doing this I guess</p>",
        "id": 179306028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572334186
    },
    {
        "content": "<p>Thank you both for these comments. For now I am unblocked by the advice to use <code>fin n → R</code>, but I will keep in mind these remarks and cook up a PR if something crystalises.</p>",
        "id": 179366430,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1572378045
    }
]