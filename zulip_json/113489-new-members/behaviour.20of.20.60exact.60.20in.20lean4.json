[
    {
        "content": "<p>Dear All,</p>\n<p>in the Lean4 code below, placing the cursor after <code>exact</code> gives <code>Goals accomplished</code> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> in the infoview (besides of course also giving an error):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span><span class=\"c1\">--place cursor anywhere on this line after the first `e`</span>\n</code></pre></div>\n<p>Is this expected?</p>\n<p>The analogous Lean3 code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does not do this.</p>",
        "id": 307512598,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667392601
    },
    {
        "content": "<p>(<code>apply, refine, refine'</code> also show similar behaviour.)</p>",
        "id": 307512911,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667392720
    },
    {
        "content": "<p>I think it's due to the way Lean 4 inserts sorries at parse errors.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span>\n  <span class=\"c1\">-- Goals accomplished!</span>\n\n<span class=\"c1\">-- error: expected term (at `#print`)</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem foo : âˆ€ (p : Prop), p :=</span>\n<span class=\"cm\">fun p =&gt; sorryAx p true</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 307513457,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667392887
    },
    {
        "content": "<p>I find it a little concerning that it doesn't report <code>declaration uses 'sorry'</code>, but on the other hand if a file has parse errors you shouldn't trust it at all.</p>",
        "id": 307513742,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667392988
    },
    {
        "content": "<p>Ok, thanks!</p>\n<p>I am a little puzzled by the <code>Goals accomplished</code> response, but what you say clarifies the issue somewhat.</p>",
        "id": 307514440,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667393254
    },
    {
        "content": "<p>I wonder if it would be possible if instead of \"Goals accomplished\" it could say \"No more goals, but contains <code>sorry</code>\". This is a somewhat confusing Lean 4 behavior that makes \"Goals accomplished\" a bit less exciting.</p>",
        "id": 307515514,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667393583
    },
    {
        "content": "<p>I agree, not seeing <code>Goals accomplished</code> would be better.  Even simply \"declaration uses <code>sorry</code>\", without mention to the non-existence of goals would be good!</p>",
        "id": 307517760,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667394264
    },
    {
        "content": "<p>My students hate this.</p>",
        "id": 307555834,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1667403969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> I actually had <a href=\"#narrow/stream/187764-Lean-for-teaching/topic/Marmite/near/302553129\">your message</a> in mind, but I was too lazy to find a link to it.</p>",
        "id": 307557587,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667404450
    },
    {
        "content": "<p>Maybe, if one doesn't already exist, it would be worth making a Lean 4 issue with some examples with false \"Goals accomplished\" messages (false in that it's telling me I've accomplished my goals when I don't feel like I have).</p>",
        "id": 307557985,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667404562
    },
    {
        "content": "<p>I haven't try to teach using Lean 4 yet, but indeed I think this behavior would be really really confusing for students.</p>",
        "id": 307591987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667413619
    },
    {
        "content": "<p>The premature \"Goals accomplished\" issue was discussed at the mathlib porting meeting this week, cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, ...</p>\n<p>I had to leave before that discussion was finished, but I believe there was a proposal that we have different \"no goals\" and \"goals accomplished\" messages for the different situations.  Did that proposal reach consensus from mathlib folks?  If so, should we open a Lean 4 issue?</p>",
        "id": 316453229,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671282012
    },
    {
        "content": "<p>I think so, this is all working as designed in some sense but I don't think it is arguable that this is confusing behavior so it just needs a specification for how to do better</p>",
        "id": 316454360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671282370
    },
    {
        "content": "<p>Could we report an error (or warning) on the <code>exact</code> line?</p>",
        "id": 316459875,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671284629
    },
    {
        "content": "<p>It seems to me that the core problem is that the parsing error shows up far away from where it needs to be addressed.</p>",
        "id": 316460023,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671284674
    },
    {
        "content": "<p>Mario and I just PM'd a bit about this, and I quote some of his comments with his permission.  He clarifies the proposal from the meeting on Thursday and points out that it still doesn't make \"goals accomplished\" work as expected in some cases:</p>\n<blockquote>\n<p>the proposal was basically to not use goals accomplished if there are any synthetic sorries in the goal, such as might be created by an erroring tactic</p>\n</blockquote>\n<blockquote>\n<p>that's still a bit non-local though, for example here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">id</span>\n    <span class=\"n\">exact</span> <span class=\"n\">trivial</span>\n    <span class=\"c1\">-- here</span>\n  <span class=\"n\">apply</span> <span class=\"n\">id</span>\n  <span class=\"n\">exact</span> <span class=\"n\">syntax</span> <span class=\"n\">error</span>\n</code></pre></div>\n<p>in this example, we will get a \"goals accomplished\" message at the indicated location currently, do you find this to be a good thing or a bad thing? Under the proposal this will be shown as \"no goals\" because of the syntax error on a later line</p>\n</blockquote>",
        "id": 316461726,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671285333
    },
    {
        "content": "<p>And regarding the <a href=\"#narrow/stream/113489-new-members/topic/behaviour.20of.20.60exact.60.20in.20lean4/near/307512598\">example at hand</a> in this thread, he concludes as <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> did that the premature \"goals accomplished\" is really a symptom, not a cause, the cause being Lean 4's \"better\" (i.e., more optimistic, and less dependent on separators like <code>,</code>) parser than Lean 3.</p>\n<blockquote>\n<p>that's because lean 3 completely falls over when there is a parse error</p>\n</blockquote>\n<blockquote>\n<p>when there are parse errors you can't get anything useful from the goal view</p>\n</blockquote>\n<blockquote>\n<p>so you have to be really good about putting commas and underscores when working with lean</p>\n</blockquote>\n<blockquote>\n<p>count all the instances of <strong>don't forget the comma</strong> in NNG</p>\n</blockquote>",
        "id": 316462166,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671285523
    },
    {
        "content": "<p>Personally, I have come to the conclusion that there is no possibility of having a sensible \"goals accomplished\" in Lean 4.  It is a tradeoff, basically, and we lost it when we got rid of the commas.  I propose that we rename \"goals accomplished\" to \"no goals\" so that it seems to imply no particular promise.</p>",
        "id": 316462747,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671285721
    },
    {
        "content": "<p>For teaching I would combine that with <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>'s suggestion of inserting <code>done</code> at the end of each exercise so that at least the errors get localised to one exercise and don't drift into the next.</p>",
        "id": 316462817,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671285739
    },
    {
        "content": "<p>8 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22\">#mathlib4 &gt; premature \"goals accomplished\"</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 316463493,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671286029
    }
]