[
    {
        "content": "<p>Question posted to stackoverflow:</p>\n<p><a href=\"https://stackoverflow.com/q/58668917/268581\" target=\"_blank\" title=\"https://stackoverflow.com/q/58668917/268581\">https://stackoverflow.com/q/58668917/268581</a></p>\n<p>Thanks for any suggestions!</p>",
        "id": 179689937,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572678083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243015\">@Eduardo Cavazos</span> Have you tried <code>by tauto!</code>?</p>",
        "id": 179690183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572678543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243015\">@Eduardo Cavazos</span> Here is a way to get hints from Lean itself.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">your_statement</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo</span>\n</pre></div>\n\n\n<p>That way you can see how Lean would prove these. You can then try to optimise the proof.</p>",
        "id": 179690322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572678690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243015\">@Eduardo Cavazos</span> Voila:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo</span>\n</pre></div>\n\n\n<p>This tells me that you can prove your example in TPIL term-mode style as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">imp_congr_eq</span> <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"n\">not_exists</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n       <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n               <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"n\">false_of_true_eq_false</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">eq_true_intro</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">eq_false_intro</span> <span class=\"n\">a_1</span><span class=\"o\">))))</span>\n              <span class=\"n\">X</span>\n              <span class=\"n\">p</span>\n              <span class=\"n\">x</span>\n              <span class=\"n\">a_1</span>\n              <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">forall_congr_eq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">auto</span><span class=\"bp\">.</span><span class=\"n\">not_not_eq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 179690451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572678919
    },
    {
        "content": "<p>Looking at automated proofs is not the best way to find a good manual proof</p>",
        "id": 179690578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572679164
    },
    {
        "content": "<p>Here's what I came up with based on Simon's hint on stackoverflow:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnExnpx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n            <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnpx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                    <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hnExnpx</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hnpx</span> <span class=\"n\">hpx</span><span class=\"o\">))))))</span>\n</pre></div>\n\n\n<p>Then simplifying it a bit (use <code>by_contradiction</code> instead of <code>(em (p x))</code> and an anonymous constructor for the <code>exists.intro</code>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnExnpx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n            <span class=\"n\">by_contradiction</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnpx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                    <span class=\"n\">hnExnpx</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hnpx</span> <span class=\"n\">hpx</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 179690799,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572679542
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> !</p>",
        "id": 179690846,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572679621
    },
    {
        "content": "<p>My secret identity was discovered :)</p>",
        "id": 179690858,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572679678
    },
    {
        "content": "<p>You're welcome!</p>",
        "id": 179690899,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572679693
    },
    {
        "content": "<p>Looking at automated proofs might not be the best way, but they can certainly provide hints when you are stuck.</p>",
        "id": 179691176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572680345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks for demonstrating that. It's good to know that that sort of thing is available. Now I'll have to look up what all those new functions in the generated proof mean as many of them haven't yet been introduced in TPIL by chapter 4. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 179691466,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572680963
    },
    {
        "content": "<p>At some point you will have to learn how to look at the library itself; lean gives you a way to define new lemmas and there are a <em>ton</em> of lemmas in lean and mathlib, far more than will be covered in TPIL</p>",
        "id": 179691533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572681050
    },
    {
        "content": "<p>The <code>logic.basic</code> file of mathlib contains a bunch of theorems like this one</p>",
        "id": 179691545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572681088
    },
    {
        "content": "<p>I hope I installed mathlib correctly! Everything seems to work. I basically just set the LEAN_PATH environment variable to contain these three entries:</p>\n<div class=\"codehilite\"><pre><span></span>...\\lean-3.4.2-windows\\lib\\lean\\leanpkg\n...\\lean-3.4.2-windows\\lib\\lean\\library\n...\\mathlib\\src\n</pre></div>\n\n\n<p>Where <code>...</code> is a longer part of the path on my filesystem.</p>",
        "id": 179691654,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572681248
    },
    {
        "content": "<p>Don't set the LEAN_PATH environment variable (ignore the recommendation that lean gives, it's out of date)</p>",
        "id": 179691659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572681283
    },
    {
        "content": "<p>Use the <code>leanpkg.path</code> file instead</p>",
        "id": 179691661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572681291
    },
    {
        "content": "<p>which is set up by the <code>leanpkg</code> command</p>",
        "id": 179691663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572681301
    },
    {
        "content": "<p>If you put in the leanpkg.path file:</p>\n<div class=\"codehilite\"><pre><span></span>builtin_path\npath ../mathlib/src\n</pre></div>",
        "id": 179691725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572681398
    },
    {
        "content": "<p>then it should all work (the path to mathlib is relative to the <code>leanpkg.path</code> file)</p>",
        "id": 179691738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572681448
    },
    {
        "content": "<p>But if the LEAN_PATH env var is set, it will override the leanpkg.path file, meaning that repos which use it won't work on your machine</p>",
        "id": 179691783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572681501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , thanks for the tips. I don't see a <code>leanpkg.path</code> file in my Lean installation.</p>",
        "id": 179691999,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572681777
    },
    {
        "content": "<p>It is autogenerated by <code>leanpkg</code> when you run e.g. <code>leanpkg new</code> but you can just create a file in your project directory called <code>leanpkg.path</code> and those contents and lean will use it</p>",
        "id": 179692022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572681836
    },
    {
        "content": "<p>the file has to be in some parent of the directory where your lean files are stored</p>",
        "id": 179692068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572681859
    },
    {
        "content": "<p>Hmm... If I create a new buffer in vscode which isn't yet saved to a file, but is in 'lean' mode, where will vscode look for the 'leanpkg.path' file?</p>",
        "id": 179692137,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572681984
    },
    {
        "content": "<p>It uses your project root, if you have \"opened a folder\" in vscode</p>",
        "id": 179692144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572682020
    },
    {
        "content": "<p>otherwise it uses your user global settings</p>",
        "id": 179692152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572682044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243015\">@Eduardo Cavazos</span> <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/windows.md</a> might be relevant</p>",
        "id": 179692221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572682144
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">mathlib doc page on Lean projects</a> has a useful set of commands.</p>",
        "id": 179692268,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572682203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yup, I saw those directions. Setting LEAN_PATH seemed easier than all that. :-) But now I know about <code>leanpkg.path</code> so I'll look into using that now.</p>",
        "id": 179692544,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572682769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> That page does indeed seem helpful (also linked from the page that <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> posteed). Thanks!</p>",
        "id": 179692602,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572682853
    },
    {
        "content": "<p>Hmm... if I do:</p>\n<div class=\"codehilite\"><pre><span></span>leanpkg new lean_test\n</pre></div>\n\n\n<p>at a Windows command prompt, I get:</p>\n<div class=\"codehilite\"><pre><span></span>failed to start child process\n</pre></div>",
        "id": 179692828,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572683313
    },
    {
        "content": "<p>What shell are you using on windows? I remember people running into this error when they didn't use the bash shell that comes with git for windows.</p>",
        "id": 179693075,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572683764
    },
    {
        "content": "<p>I use the MSYS2 shell on windows; the git bash shell doesn't work for me</p>",
        "id": 179693084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572683832
    },
    {
        "content": "<blockquote>\n<p>What shell are you using on windows? I remember people running into this error when they didn't use the bash shell that comes with git for windows.</p>\n</blockquote>\n<p>Just the basic Windows Command Prompt. I'll give one of the other shells a try.</p>",
        "id": 179693134,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572683914
    },
    {
        "content": "<p>However, there is a <code>leanpkg.bat</code> file in the Lean <code>bin</code> directory which seems to imply that the authors intended for it to be run from the standard Windows Command Prompt.</p>",
        "id": 179693295,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572684197
    },
    {
        "content": "<p>how do you figure?</p>",
        "id": 179693302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572684218
    },
    {
        "content": "<p>oh, a bat file</p>",
        "id": 179693305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572684235
    },
    {
        "content": "<p>Can you run <code>lean --version</code> from the command line?</p>",
        "id": 179693356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572684311
    },
    {
        "content": "<blockquote>\n<p>Can you run <code>lean --version</code> from the command line?</p>\n</blockquote>\n<p>Yup!</p>\n<div class=\"codehilite\"><pre><span></span>C:\\temp&gt;lean --version\nLean (version 3.4.2, commit cbd2b6686ddb, Release)\n</pre></div>",
        "id": 179693471,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572684512
    },
    {
        "content": "<p>you might also try <code>lean --run lean/leanpkg/leanpkg/main.lean</code> but I don't have high hopes for using the windows command prompt</p>",
        "id": 179693605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572684747
    },
    {
        "content": "<p>Using git bash seems to work:</p>\n<div class=\"codehilite\"><pre><span></span>$ leanpkg new lean_test_a\n&gt; mkdir -p lean_test_a\n&gt; cd lean_test_a\n&gt; mkdir src\n&gt; git init -q\n&gt; git checkout -b lean-3.4.2\nSwitched to a new branch &#39;lean-3.4.2&#39;\nconfiguring lean_test_a 0.1\n</pre></div>",
        "id": 179693742,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1572685024
    },
    {
        "content": "<p>This also gives me trouble in tactic mode:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">T05_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnExnpx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnpx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hnExnpx</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hnpx</span> <span class=\"n\">hpx</span><span class=\"o\">))))))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">T05_1</span>\n<span class=\"n\">include</span> <span class=\"n\">a</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">T05_2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hnExnpx</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hpa</span> <span class=\"n\">hnpa</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hpa</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>To my understanding, <code>a</code> is an arbitrary element of <code>α</code> so <code>hpa</code> should fill the goal. It may be that I don't write the term correctly, though! Or maybe my understanding is wrong. Or both!</p>",
        "id": 187167510,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580573872
    },
    {
        "content": "<p>No, <code>a</code> is not arbitrary at this stage. The tactic state on the error line means <code>a</code> is a fixed element its type.</p>",
        "id": 187167927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580574524
    },
    {
        "content": "<p>I could guess that, but not sure how to go about it.</p>",
        "id": 187167936,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580574553
    },
    {
        "content": "<p>I just had a look at the actual statement of T05_2. What is <code>a</code> doing there?</p>",
        "id": 187168130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580574903
    },
    {
        "content": "<p>Remove that <code>include a</code> and start the proof with <code>intros h x,   by_contradiction H,</code>. I need to go. Have fun!</p>",
        "id": 187168196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580575069
    },
    {
        "content": "<p>Will do, thanks!</p>",
        "id": 187168258,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580575165
    }
]