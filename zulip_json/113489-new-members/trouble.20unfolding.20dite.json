[
    {
        "content": "<p>In order to construct a counter example, I want to modify a function at one point and I'm having trouble proving it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">modified</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f&#39;</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hxx&#39;</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hxx&#39;</span> <span class=\"n\">at</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">y</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span>\n    <span class=\"c1\">--refl -- doesn&#39;t work,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x&#39;</span> <span class=\"n\">hnxx&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>it boils down to this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">hnxx&#39;</span> <span class=\"o\">:</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span>\n<span class=\"err\">⊢</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hxx&#39;</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x&#39;</span><span class=\"o\">),</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x&#39;</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x&#39;</span>\n</code></pre></div>\n\n\n<p>which should obviously hold. But how can we unfold <code>dite</code>, taking into consideration, that we've got a proof of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo mathvariant=\"normal\">≠</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x' \\ne x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>.</p>",
        "id": 200480749,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591825297
    },
    {
        "content": "<p><code>dif_neg</code></p>",
        "id": 200480878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591825374
    },
    {
        "content": "<p><code>    rw dif_neg hnxx'.symm,</code></p>",
        "id": 200480932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591825414
    },
    {
        "content": "<p>fantastic, thanks</p>",
        "id": 200481088,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591825488
    },
    {
        "content": "<p>In general you can deconstruct <code>dite</code> with <code>split_ifs</code> but in the situation where you know the truth value of the hypothesis <code>dif_pos</code> and <code>dif_neg</code> are easier.</p>",
        "id": 200481280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591825583
    },
    {
        "content": "<p>thanks. (and you sure are very quick to respond, lol)</p>",
        "id": 200481365,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591825635
    },
    {
        "content": "<p>I'm addicted</p>",
        "id": 200481377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591825646
    },
    {
        "content": "<p>If you want to modify a function at one point, try <code>function.update</code></p>",
        "id": 200481839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591825909
    },
    {
        "content": "<p>which in particular deals with the messy business of dependent function updates</p>",
        "id": 200481961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591825959
    },
    {
        "content": "<p>but that particular one changes the type, though, right? Because at point a', you are now of a different type. My theorem preserves the same type.</p>",
        "id": 200482060,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591826016
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200482184,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591826060
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">modified</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f&#39;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f&#39;</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"bp\">⟨</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">update</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">update_same</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">x&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">update_noteq</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_⟩</span>\n</code></pre></div>",
        "id": 200482352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591826149
    },
    {
        "content": "<p>ah, very nice</p>",
        "id": 200482783,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591826397
    },
    {
        "content": "<p>thanks, learnt something again</p>",
        "id": 200482872,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591826426
    }
]