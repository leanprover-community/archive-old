[
    {
        "content": "<p>My vague (and wrong) understanding until now was that proposition may only be eliminated into propositions, otherwise proof-irrelevance would cause contradictions. However, I recently discovered this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>In other cases, for <code>h</code> a disjunction, or <code>h : nonempty α</code>, the <code>cases</code> fails  with a \"can only eliminate into Prop\" error.<br>\nAnd indeed, checking the types of the recursor shows that the motive <code>C</code> is in this cases <code>Prop</code>, while being <code>Sort u_1</code> in the previous ones.</p>\n<p>So could someone explain the general rule for what propositions may be eliminated into data?<br>\nThanks</p>",
        "id": 231240001,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616359628
    },
    {
        "content": "<p>Indeed. These are called \"large-eliminating\" inductive types, and they can be recognized by a <code>Sort l</code> in the target type of the recursor <code>T.rec</code> for the inductive type <code>T</code></p>",
        "id": 231240230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616359845
    },
    {
        "content": "<p>The rules are:</p>\n<ul>\n<li>There is at most one constructor</li>\n<li>All arguments to the constructor are either:<ul>\n<li>propositions (i.e. <code>(x : p)</code> where <code>p : Prop</code>)</li>\n<li>recursive arguments (i.e. <code>(x : T)</code> where <code>T</code> is the type being defined</li>\n<li>or they appear in the target type (i.e. <code>(x : A)</code> but the result type is <code>T x</code> or <code>T x b</code> or similar)</li>\n</ul>\n</li>\n</ul>",
        "id": 231240332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616359988
    },
    {
        "content": "<p>Examples of large eliminating propositions: <code>false</code>, <code>true</code>, <code>and</code>, <code>eq</code>, <code>acc</code></p>",
        "id": 231240411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616360072
    },
    {
        "content": "<p><code>or</code> is small eliminating because it has two constructors, and <code>exists</code> is small eliminating because it has a non-prop argument (the witness) that doesn't appear in the target type</p>",
        "id": 231240449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616360127
    },
    {
        "content": "<p>The way you should think about these rules are that they ensure that the type would only have at most one element even if it wasn't a <code>Prop</code></p>",
        "id": 231240518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616360179
    },
    {
        "content": "<p>This was a very nice explanation, thanks!</p>",
        "id": 231241038,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1616360717
    },
    {
        "content": "<p>Last year I got puzzled by basically the same question, and ended up writing <a href=\"https://www.pointedset.ca/blog/2020/02/06/proptype.html\">a blog post about it</a>. Disclaimer: Mario's answer above is both more concise and more true</p>",
        "id": 231530604,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1616528048
    }
]