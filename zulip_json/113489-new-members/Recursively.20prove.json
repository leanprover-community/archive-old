[
    {
        "content": "<p>Sorry, this might seems to be stupid, but I just can't figure out how to prove the problem inductively....</p>\n<p><code>lemma add_nat_ge_self {a :  ℕ} (b : ℕ) : a + b ≥ b :=\n  match b with\n  | 0 := begin simp, apply nat.zero_le end\n  | succ n := sorry</code></p>",
        "id": 137105029,
        "sender_full_name": "AHan",
        "timestamp": 1541233199
    },
    {
        "content": "<p>In lean we write inductive definitions by pattern matching in the definition itself, not using match blocks like coq</p>",
        "id": 137107106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541238016
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma add_nat_ge_self {a :  ℕ} : ∀(b : ℕ), a + b ≥ b\n| 0 := begin simp, apply nat.zero_le end\n| (succ n) := sorry\n</pre></div>",
        "id": 137107116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541238065
    },
    {
        "content": "<p>at the <code>sorry</code> you should now have access to <code>add_nat_ge_self</code> which you can apply recursively</p>",
        "id": 137107156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541238125
    },
    {
        "content": "<p>What Mario wrote is cleaner but I want to point out that the following is probably what you were going for:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">add_nat_ge_self</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span>  <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"kn\">end</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 137113734,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541252226
    },
    {
        "content": "<p>well if you write it like that you won't be able to fill in the <code>sorry</code> because you don't have access to the recursive function</p>",
        "id": 137113794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541252378
    },
    {
        "content": "<p>It's there, but it gets a funny name:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">add_nat_ge_self</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span>  <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 137114175,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541253241
    },
    {
        "content": "<p>And I guess you only get access to it if you go into tactic mode; i.e. I can't remove the <code>by exact</code> below:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">add_nat_ge_self</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span>  <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"kn\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 137114468,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541253764
    },
    {
        "content": "<p>Oh!! Thanks a lot for the explanation!!</p>",
        "id": 137140650,
        "sender_full_name": "AHan",
        "timestamp": 1541303957
    }
]