[
    {
        "content": "<p>I'm working through exercises in \"Linear Algebra done right\" with <span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span>,  and one of them was \"verify this expression is a third root of unity.\" I have a solution which works but is pretty awful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">real.mul_self_sqrt</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.zero_le</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n      <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">I</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)))</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">8</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">I_mul_I</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a more pleasant way to do this?</p>",
        "id": 284537063,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1654031151
    },
    {
        "content": "<p>Slightly random looking, but this works without any by hand calculation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284538068,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654031778
    },
    {
        "content": "<p>Thanks! Good to know that <code>norm_num</code> knows about squaring square roots!<br>\nSo does <code>norm_cast</code> move the coercions as high up the syntax tree as possible, so that we can, eg, use lemmas about arithmetic in  ℕ, ℤ, ℝ, etc before having to reason in ℂ?</p>",
        "id": 284539779,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1654032660
    },
    {
        "content": "<p>Exactly, this lets norm num apply what it/simp knows about squaring real square roots, rather than squares of coercions</p>",
        "id": 284540103,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654032850
    },
    {
        "content": "<p>It's sad that this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>or else the proof could maybe be shorter using <code>ring_nf SOP</code>?</p>",
        "id": 284540939,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1654033358
    },
    {
        "content": "<p>Might be worth adding the norm_num lemma that <code>(real.sqrt a) ^ n = a ^ (n / 2) * (real.sqrt a) ^ (n % 2)</code> then</p>",
        "id": 284542502,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654034324
    },
    {
        "content": "<p>that's not how norm_num works, it doesn't have lemmas like that</p>",
        "id": 284546261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654036880
    },
    {
        "content": "<p>norm_num evaluates things to a normal form, so you would need to define what normal form means for sqrt expressions</p>",
        "id": 284546307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654036918
    },
    {
        "content": "<p>this kind of reasoning is closest to what <code>ring</code> could do</p>",
        "id": 284546385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654036953
    },
    {
        "content": "<p>you need to know some facts about sqrt, and I think <code>linear_combination</code> can handle it</p>",
        "id": 284546419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654036979
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">real.sq_sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">real.sqrt</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284546599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654037110
    },
    {
        "content": "<p>when <a href=\"https://github.com/leanprover-community/mathlib/pull/14229\">#14229</a> lands it can be written <code>by linear_combination real.sqrt 3 * @real.sq_sqrt 3 (by norm_num)</code></p>",
        "id": 284546685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654037166
    },
    {
        "content": "<p>A lemma like that could be a simp lemma under the side condition that n is at least 2, which norm num could then discharge is what I'm thinking. Or would that also not happen the way I hope?</p>",
        "id": 284547018,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654037500
    },
    {
        "content": "<p>The normal form would then naturally be no natural powers on sqrts?</p>",
        "id": 284547099,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654037556
    },
    {
        "content": "<p>And here's a proof of your original problem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"bp\">@</span><span class=\"n\">real.sq_sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">real.sqrt</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284547348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654037787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <code>norm_num</code> calls <code>simp</code>, which is why it was able to solve some simple questions about sqrt, but it doesn't really understand <code>sqrt</code> at all. <code>norm_num</code> normal form is not like <code>simp</code> normal form, in that the latter is defined simply as \"whatever is not modified by <code>simp</code>\" and the former has an explicit definition per type (for example, a normal form for <code>nat</code> is a numeral expression like <code>37</code>). If you allow sqrts, then the normal form is something like \"arbitrary + * ^ combinations of <code>sqrt</code> operations\" and it sounds like a nightmare to decide equality on that grammar</p>",
        "id": 284547572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654037981
    },
    {
        "content": "<p><code>sqrt 2 * sqrt 3 = sqrt 6</code> has no natural powers on sqrts but they are distinct normal forms by your definition</p>",
        "id": 284547893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654038139
    }
]