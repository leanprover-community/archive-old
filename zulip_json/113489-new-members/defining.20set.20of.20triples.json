[
    {
        "content": "<p>Hi, I have a question regarding sets and cartesian products. I can define a set like this: <code>let A := {s : ℝ×ℝ×ℝ | s ≠ (0, 0, 0)},</code>. However, if I try to define that same set like this: <code>let A := {(x, y, z) : ℝ×ℝ×ℝ | (x, y, z) ≠ (0, 0, 0)},</code> I get an error.  Am I using the wrong notation? How do I go about defining something like: <code>{(x, y, z) : ℝ×ℝ×ℝ | x &gt; 1 ∧ y ≠ 0 ∧ z &lt; 1}</code>.</p>",
        "id": 232437115,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617115370
    },
    {
        "content": "<p>You can do <code>{s : ℝ×ℝ×ℝ | s.1 &gt; 1 ∧ s.2.1 ≠ 0 ∧ s.2.2 &lt; 1}</code>. It's a bit crap I know -- in Lean 4 there will be more flexibility with this kind of thing. Or you could probably do some trick with <code>let (x, (y, z)) := s in...</code> after the <code>|</code> which might look nicer to read, but would end up harder to work with.</p>",
        "id": 232437565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617115525
    },
    {
        "content": "<p>Thanks! By the way, is that a \\mid or a pipe?</p>",
        "id": 232437873,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617115610
    },
    {
        "content": "<p>For set notation it's just the <code>|</code> button on my keyboard (so I guess a pipe). The <code>\\|</code> is different -- this is used for \"divides\" in number theory (so I guess a \\mid).</p>",
        "id": 232438269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617115721
    },
    {
        "content": "<p>Alternatively, this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I am not sure if it is any better, though.</p>",
        "id": 232438522,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617115812
    },
    {
        "content": "<p>Thank! I think I will use that last one. The goal reads much better with the exists condition.</p>",
        "id": 232438967,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617115954
    },
    {
        "content": "<p>You can use a match statement probably.... this should be much easier in lean4 IIRC</p>",
        "id": 232439158,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617116014
    },
    {
        "content": "<p>Yes, depending on how many conditions you want to impose, the extra <code>rfl</code>s may be worth the effort! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 232439178,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617116019
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"kd\">end</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 232439557,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617116133
    },
    {
        "content": "<p>Although that's a bit of a mouthful</p>",
        "id": 232439713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617116173
    },
    {
        "content": "<p>I guess that the conclusion is that there are a few workarounds, but no clear winner!</p>",
        "id": 232439822,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617116208
    },
    {
        "content": "<p>Here's Kevin's suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span><span class=\"bp\">×</span><span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 232440261,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617116360
    },
    {
        "content": "<p>Is there some way to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_sep\">docs#set.has_sep</a> here?</p>",
        "id": 232440357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617116397
    },
    {
        "content": "<p>No, I guess that's only useful for filtering sets that aren't just set.univ</p>",
        "id": 232440597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617116452
    },
    {
        "content": "<p>My concern with the match and let options is that we're defining data here and it might leave a real mess. If this were going in mathlib I would use the ugly s.2.1 definition and then define a refl lemma <code>mem_thenameoftheset_iff</code> unwinding it.</p>",
        "id": 232473679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617128790
    }
]