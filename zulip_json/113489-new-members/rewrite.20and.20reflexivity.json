[
    {
        "content": "<p>I am just preparing my lectures and hence I am doing some very simple proofs. I noticed that if after rewrite reflexivity is automatically applied if possible. Is this actually explained somewhere?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">sym_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209879818,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599914267
    },
    {
        "content": "<p>I would've expected <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rw%20/%20rewrite\">https://leanprover-community.github.io/mathlib_docs/tactics.html#rw%20/%20rewrite</a> to mention it, but apparently not</p>",
        "id": 209879922,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599914404
    },
    {
        "content": "<p>I'm not sure that reflexivity is applied, at least in terms of being the same as applying the <code>reflexivity</code> tactic. It seems like <code>rw</code> will close a goal if the left and right hand side are literally the same (not just definitionally equal). For example, if you do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>the <code>rw</code> doesn't complete the proof, even though <code>0.nat_abs = 0</code> is true by definition. But you can do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>to finish the proof, or:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_zero</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>which converts the goal to <code>0 = 0</code> which is then closed automatically.</p>",
        "id": 209880482,
        "sender_full_name": "Alex Peattie",
        "timestamp": 1599915430
    },
    {
        "content": "<p>I don't know about explained (i.e. a docstring mentioning it or a deeper reason why it is set up this way) but the source for <code>rw_core</code> is </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">rw_core</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">rw_rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loca</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">rewrite_cfg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">loca</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">loc</span><span class=\"bp\">.</span><span class=\"n\">wildcard</span> <span class=\"o\">:=</span> <span class=\"n\">loca</span><span class=\"bp\">.</span><span class=\"n\">try_apply</span> <span class=\"o\">(</span><span class=\"n\">rw_hyp</span> <span class=\"n\">cfg</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rw_goal</span> <span class=\"n\">cfg</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">rules</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>            <span class=\"o\">:=</span> <span class=\"n\">loca</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">rw_hyp</span> <span class=\"n\">cfg</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">rules</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rw_goal</span> <span class=\"n\">cfg</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">rules</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">reflexivity</span> <span class=\"kn\">reducible</span><span class=\"o\">)</span>\n    <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">returnopt</span> <span class=\"n\">rs</span><span class=\"bp\">.</span><span class=\"n\">end_pos</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">save_info</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>note <code>try (reflexivity reducible)</code>, so perhaps the difference Alex is seeing is due to the reducibility setting being set to reducible here.</p>",
        "id": 209880781,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1599915908
    }
]