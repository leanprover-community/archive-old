[
    {
        "content": "<p>If I define a reduced residue class as follows:<br>\n<code> def reduced_residue_class (n: nat):={ k : nat | k &lt; n \\and k.coprime n } </code></p>",
        "id": 191530108,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994491
    },
    {
        "content": "<p>is there a way to get the size of this set?</p>",
        "id": 191530145,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994506
    },
    {
        "content": "<p>also I would like to get the product of all elements in the set</p>",
        "id": 191530184,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994524
    },
    {
        "content": "<p>Well.... Lean doesn't know yet that the set is finite...</p>",
        "id": 191530223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994554
    },
    {
        "content": "<p>Even though it's obvious.</p>",
        "id": 191530276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994562
    },
    {
        "content": "<p>This might be one reason to choose</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rsc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 191530368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994620
    },
    {
        "content": "<p>Then you can talk about <code>finset.card _</code> afterwards</p>",
        "id": 191530405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994640
    },
    {
        "content": "<p>is there any way around this? maybe by adding an assumption that says its finite?</p>",
        "id": 191530445,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994660
    },
    {
        "content": "<p>is there any way around this? maybe by adding an assumption that says its finite?</p>",
        "id": 191530464,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994671
    },
    {
        "content": "<p>ok thanks</p>",
        "id": 191530577,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994710
    },
    {
        "content": "<p>can I get the product of all elements in this set somehow?</p>",
        "id": 191530638,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994738
    },
    {
        "content": "<p>also</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mem_rsc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"n\">rsc</span> <span class=\"n\">n</span> <span class=\"err\">\\</span><span class=\"n\">iff</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"err\">\\</span><span class=\"n\">and</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 191530674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994761
    },
    {
        "content": "<p>With the finset definition, the product is also easier.</p>",
        "id": 191530713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994782
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">prod_rsc</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rsc</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">id</span>\n</pre></div>",
        "id": 191530830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584994831
    },
    {
        "content": "<p>what do I have to import for finset and prod?</p>",
        "id": 191531096,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584994936
    },
    {
        "content": "<p>You can't take the product until you define the multiplication.</p>",
        "id": 191531189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584994991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269735\">Brian Jiang</span> <a href=\"#narrow/stream/113489-new-members/topic/working.20with.20sets/near/191531096\" title=\"#narrow/stream/113489-new-members/topic/working.20with.20sets/near/191531096\">said</a>:</p>\n<blockquote>\n<p>what do I have to import for finset and prod?</p>\n</blockquote>\n<p><code>algebra.big_operators</code></p>",
        "id": 191531429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584995118
    },
    {
        "content": "<p>@Kevin Buzzard : How may I define this multiplication?</p>",
        "id": 191532340,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584995596
    },
    {
        "content": "<p>also, would it be possible to define another set that has all the values of <code>rsc n </code> scaled by a factor of a?</p>",
        "id": 191532499,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584995658
    },
    {
        "content": "<p>Well you can do regular multiplication and then reduce mod n -- but then you have to prove that the result is coprime to n. If you want to roll your own then you will have to do work before you can even start multiplying.</p>\n<p>If you want to learn how to prove theorems in Lean than you could try working on the natural number game.</p>",
        "id": 191534533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584996678
    },
    {
        "content": "<p>I'm trying to build a sort of \"syntactic intuition\" on lean. At this point I understand that implications (and the universal quantification) can be \"peeled\" with <code>intro</code> and the existential quantification can be \"peeled\" with <code>use</code>. Is there a similar pattern that could be used with something like this <a href=\"/user_uploads/3121/Q40TQPUJ3p_axzUR1hTTp7T5/image.png\">image.png</a> ?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Q40TQPUJ3p_axzUR1hTTp7T5/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Q40TQPUJ3p_axzUR1hTTp7T5/image.png\"></a></div>",
        "id": 278654728,
        "sender_full_name": "Matias Heikkilä",
        "timestamp": 1649746700
    },
    {
        "content": "<p>I guess I would like to have the right side of the set builder notation as the claim to work with this in the elementary way (?)</p>",
        "id": 278654780,
        "sender_full_name": "Matias Heikkilä",
        "timestamp": 1649746762
    },
    {
        "content": "<p>Try <code>dsimp</code> and you will see that this really is an hidden existential.</p>",
        "id": 278654793,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649746779
    },
    {
        "content": "<p>thanks for the tip! would you say that<code>dsimp</code> is often useful with set builder notation?</p>",
        "id": 278654928,
        "sender_full_name": "Matias Heikkilä",
        "timestamp": 1649746826
    },
    {
        "content": "<p>At the level of things you are doing now, <code>dsimp</code> only does cosmetic changes. You can delete them from your proof, and most likely everything will still work fine (except maybe <code>rw</code> because it works up to syntactical equality).</p>",
        "id": 278655102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649746948
    },
    {
        "content": "<p>Note that \"set builder notation\" is just the function <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_of\">docs#set_of</a></p>",
        "id": 278661155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649751480
    },
    {
        "content": "<p>so I'm working through this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">conjugate</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">mysubgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mysubgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H.one_mem</span><span class=\"o\">]⟩,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">H.mul_mem</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">group</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">H.inv_mem</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">group</span><span class=\"o\">⟩</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>and I am a bit confused with how exactly <code>rfl</code> works in the <code>rintros</code> matching. my understanding is that <code>⟨a, ha⟩</code> binds to <code>∃ (h : G) (H : H ∈ H)</code>, and then I'm left with <code>x = g * h * g⁻¹</code>. what does putting <code>rfl</code> in for the last bit do exactly? does it just declare that <code>x = g * h * g⁻¹</code> is defined to be reflexively true or something?</p>",
        "id": 278803160,
        "sender_full_name": "Eleanor McMurtry",
        "timestamp": 1649840886
    },
    {
        "content": "<p>like I get that <code>rfl : ∀ a. a = a</code> but I'm not sure what it does in this context</p>",
        "id": 278803185,
        "sender_full_name": "Eleanor McMurtry",
        "timestamp": 1649840916
    },
    {
        "content": "<p>This is not the same <code>rfl</code> as in <code>rfl : ∀ a, a = a</code>. This is part of the <code>rintro</code> syntax which automatically substitutes the LHS or RHS of an equality you introduce everywhere in the context, provided it is a single variable (so that substitution can work). So in that case it replaces <code>x</code> with <code>g * h * g⁻¹</code>.</p>",
        "id": 278803382,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649841033
    },
    {
        "content": "<p>It is equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ha'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hb'</span><span class=\"o\">⟩,</span>\n<span class=\"n\">subst</span> <span class=\"n\">ha'</span> <span class=\"n\">hb'</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 278803398,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1649841049
    },
    {
        "content": "<p>aha so <code>rfl</code> is just special syntax that is a shortcut for this?</p>",
        "id": 278803576,
        "sender_full_name": "Eleanor McMurtry",
        "timestamp": 1649841134
    },
    {
        "content": "<p>wait that doesn't work Ruben</p>",
        "id": 278803638,
        "sender_full_name": "Eleanor McMurtry",
        "timestamp": 1649841199
    },
    {
        "content": "<p>ah, <code>subst ha', subst hb',</code> does though</p>",
        "id": 278803681,
        "sender_full_name": "Eleanor McMurtry",
        "timestamp": 1649841240
    },
    {
        "content": "<p>very good thanks!</p>",
        "id": 278803720,
        "sender_full_name": "Eleanor McMurtry",
        "timestamp": 1649841246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/working.20with.20sets/near/278803382\">said</a>:</p>\n<blockquote>\n<p>This is not the same <code>rfl</code> as in <code>rfl : ∀ a, a = a</code>. This is part of the <code>rintro</code> syntax which automatically substitutes the LHS or RHS of an equality you introduce everywhere in the context, provided it is a single variable (so that substitution can work). So in that case it replaces <code>x</code> with <code>g * h * g⁻¹</code>.</p>\n</blockquote>\n<p>It is the same <code>rfl</code>, I think (at least modulo internal <code>rintro</code> implementation details)! <code>rintro</code> allows you to pattern match on stuff, and using <code>rfl</code> as a pattern \"forces\" unification.</p>",
        "id": 278804341,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1649841635
    },
    {
        "content": "<p>oh! that makes more sense, and is pretty wild</p>",
        "id": 278804948,
        "sender_full_name": "Eleanor McMurtry",
        "timestamp": 1649841977
    },
    {
        "content": "<p>I believe not, because the following fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- does what's expected</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- intro tactic failed, Pi/let expression expected</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278805031,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649842036
    },
    {
        "content": "<p>On top, <code>rintro rfl</code> works even if the relevant variables are already in context, which means it does not just do pattern-matching (pattern-matching only restricts variables that it introduces, it does not substitute the ones already in context).</p>",
        "id": 278805227,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649842147
    },
    {
        "content": "<p>Of course, the two <code>rfl</code> are related, but they are not literally the same.</p>",
        "id": 278805577,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649842386
    },
    {
        "content": "<p>Makes sense, thanks for the clarification! I think another point of view is that <code>rintro</code> simulates \"in tactic-land\" what pattern matching + unification would do \"in term-land\", and this simulation is not 100% accurate in the sense that it expects a particular keyword (which is not a bad thing, given how it is meant to be used).</p>",
        "id": 278806369,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1649842869
    },
    {
        "content": "<p>No, <code>rintro</code> is much more powerful.</p>",
        "id": 278806739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649843141
    },
    {
        "content": "<p>I meant for the particular case of using <code>rfl</code>. Well, I think I might be just too used to unification in Agda, so I'll just read up more on how Lean does this.</p>",
        "id": 278807022,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1649843321
    },
    {
        "content": "<p>Patrick, my understanding was that rintro was a weaker version of the equation compiler; is that not a good mental model?</p>",
        "id": 278812035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649846664
    },
    {
        "content": "<p>Perhaps related: In Lean 4, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>After the <code>=&gt;</code>, unification works as I expected (that is, the variable <code>b</code> disappears from context and is replaced by <code>a</code> everywhere). In Lean 3, though, I tried pattern matching on <code>rfl</code> the naïve way and it just gave me a variable named \"rfl\" without unifying. This might be related to the fact that <code>rfl</code> is just a value and no longer a keyword in Lean 4. Does this mean that <code>rcases</code> could be implemented in Mathlib4 in such a way that <code>rfl</code> is a special case of pattern matching?</p>",
        "id": 278812740,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1649847140
    },
    {
        "content": "<p>In lean 3 you have to match on a and b too</p>",
        "id": 278812817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649847192
    },
    {
        "content": "<p>rfl isn't a keyword in lean 3</p>",
        "id": 278812848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649847223
    },
    {
        "content": "<p>Ah, good to know it isn't! That makes a lot more sense. I was confused by the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">tactic#rcases</a> documentation because I didn't click the <code>rfl</code> link there.</p>",
        "id": 278813035,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1649847347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/working.20with.20sets/near/278812035\">said</a>:</p>\n<blockquote>\n<p>Patrick, my understanding was that rintro was a weaker version of the equation compiler; is that not a good mental model?</p>\n</blockquote>\n<p>It is similar in general design to the equation compiler, but it is not strictly dominated in either direction. <code>rintro</code> does not allow using term syntax like <code>eq.refl _</code> for pattern matching; you have to use the anonymous constructor syntax <code>⟨⟩</code> instead of constructor names</p>",
        "id": 278848975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649865641
    },
    {
        "content": "<p>Unlike the equation compiler you can't do recursive definitions using <code>rcases</code>, but the equation compiler doesn't allow patterns like <code>⟨a | b, c | d⟩</code>, and there is no equivalent of the <code>-</code> pattern either</p>",
        "id": 278849310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649865768
    },
    {
        "content": "<p>Strictly speaking, <code>rfl</code> is a rintro keyword, which means \"use <code>subst</code>\". You can't use any other term there</p>",
        "id": 278849577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649865872
    }
]