[
    {
        "content": "<p>I'm working through TPIL4 (I don't believe the issues are any different in Lean3) and I find the documentation in TPIL to be under-explanatory for the syntax of quantifiers. For example, I don't understand why this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and why this does not...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpy</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">hpy</span>\n</code></pre></div>\n<p>or this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpy</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpy</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and there doesn't seem to be anything in TPIL that explains <em>why</em> one works and one does not, or why lean4 gets very particular about constraining <code>y : α</code> in some contexts but is quite happy to understand <code>y</code> in others. I feel like I'm just trying things at random as opposed to having a deep theory about how Lean models the syntax of quantifiers...</p>",
        "id": 301507785,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664476810
    },
    {
        "content": "<p>The type <code>(∀ x, p x → q x) → (∀ x, p x) → (∀ x, q x)</code> is for a function that takes three arguments in the following order: a <code>∀ x, p x → q x</code>, a <code>∀ x, p x</code>, and an <code>α</code> (I'm guessing based on context; it depends on what <code>q</code> is)</p>",
        "id": 301509112,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664477288
    },
    {
        "content": "<p>Your <code>fun (h: ∀ x, p x → q x) =&gt; fun {y: α} (hpy: p y) =&gt; (h y) hpy</code> (or, equivalently, <code>fun (h: ∀ x, p x → q x) {y: α} (hpy: p y) =&gt; (h y) hpy</code>) has the wrong type for the second argument.</p>",
        "id": 301509380,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664477401
    },
    {
        "content": "<p>It looks like you're mistaking <code>(∀ x, p x → q x) → (∀ x, p x) → (∀ x, q x)</code> for <code>(∀ x, p x → q x) → (∀ x, p x → (∀ x, q x))</code></p>",
        "id": 301509500,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664477432
    },
    {
        "content": "<p>Fair. So if I fix the quantifier</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpy</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpy</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">hpy</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">hpy</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>which seems to say that there's a quantifier problem in the result?</p>",
        "id": 301509904,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664477577
    },
    {
        "content": "<p>Why are your <code>fun</code>s taking two <code>y</code> arguments?</p>",
        "id": 301510023,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664477620
    },
    {
        "content": "<p>But in the function that works, we don't specify quantifiers....</p>",
        "id": 301510038,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664477626
    },
    {
        "content": "<p>The error is telling you that <code>fun {y} hpy =&gt; h y (hpy y)</code> has type <code>∀ {y : α}, (∀ (y : α), p y) → q y</code>. It's something that takes an <code>α</code> called <code>y</code> and a <code>∀ (y : α), p y</code> (with a differently scoped <code>y</code>) and returns a <code>q y</code></p>",
        "id": 301510419,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664477750
    },
    {
        "content": "<p>That's not the type signature that you're aiming for with your <code>example</code>, right?</p>",
        "id": 301510499,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664477770
    },
    {
        "content": "<p>OK, if I take the indirection out, I get the same result</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpy</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpy</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which gives me the opposite error. Again, not disputing that one works and one doesn't -- I just don't read TPIL or any other documentation and having a theory as to the case of why I've quantified correctly in the first example up top, but incorrectly in the second.</p>",
        "id": 301510743,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664477853
    },
    {
        "content": "<p>Just keep in mind that <code>∀ (x : α), p x</code> is how you write the type of a function that takes something of <code>α</code> (called <code>x</code>) and returns something of type <code>p x</code> (which depends on the input value, so it's a <em>dependent</em> type). And, if the result is independent of the input value, it uses the arrow notation, so for example <code>p x → q x</code> is the type of a function whose output type does not depend on the input value.</p>",
        "id": 301511167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664477968
    },
    {
        "content": "<p>I've only used Lean3 so I'm not that sure, but I think the problem is that the order of <code>y</code> and <code>hpy</code> in the quantifier is reversed?</p>",
        "id": 301511190,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1664477974
    },
    {
        "content": "<p>So implication/arrow is a special case of the forall notation, which we use because it looks nicer.</p>",
        "id": 301511341,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664478007
    },
    {
        "content": "<p>You use <code>fun</code> to create functions/foralls/implications</p>",
        "id": 301511412,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664478030
    },
    {
        "content": "<p>So, just using the type, you know that your <code>fun</code> has to look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span> <span class=\"n\">something</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 301511608,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664478096
    },
    {
        "content": "<p>You're allowed to drop the type from the forall syntax if it can be inferred.</p>",
        "id": 301511718,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664478124
    },
    {
        "content": "<p><code>∀ x, p x</code> and <code>∀ (x : α), p x</code> are exactly the same in this context.</p>",
        "id": 301511776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664478145
    },
    {
        "content": "<p>The <code>α</code> itself is not being quantified, and the inference might be why you're feeling like you want to include <code>α</code> as an extra argument to your functions.</p>",
        "id": 301511858,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664478169
    },
    {
        "content": "<p>Just to give one more example: if <code>p q : Prop</code>, then <code>∀ (h : p), q</code> and <code>p → q</code> are exactly the same, since <code>q</code> does not syntactically depend on <code>h</code>.</p>",
        "id": 301512589,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664478412
    },
    {
        "content": "<p>Anyway, I hope this helps. I believe you mentioned you were familiar with Ocaml and Haskell, so the angle I'm going for is \"<code>fun</code> is an anonymous lambda, forall/implication are fancy function types, and you just need to get the correct number of arguments with the right types.\"</p>",
        "id": 301513893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664478904
    },
    {
        "content": "<p>(A hint: be sure to take a look at the goal view in your editor to see what the actual types are after they've been elaborated. Here, using Lean 3, I see that the example's goal is <code>(∀ (x : α), p x → q x) → (∀ (x : α), p x) → ∀ (x : α), q x</code> when pretty printed. This can be useful in other situations when Lean inserts additional arguments for you, for example in the <code>∀ x ∈ s, p x</code> construct.)</p>",
        "id": 301514598,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664479175
    },
    {
        "content": "<p>If I drop the <code>{y: α}</code> I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">p</span> <span class=\"n\">y</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">y</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 301519138,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664480858
    },
    {
        "content": "<p>Since we've defined <code>variable (α : Type) (p q : α → Prop)</code>, the general flow of going from \"for all x, IsHuman x implies IsMortal x\" implies \"for all x IsHuman x\" implies \"for all x Is Mortal X\" which is what the types want.</p>\n<p>But as I follow the goals, unless I get the invocation just so, the quantifiers are all messed up,  As an example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpy</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">hpy</span>\n</code></pre></div>\n<p>leads to this error, which doesn't make any sense to me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">hpy</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">q</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">q</span> <span class=\"n\">hpy</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 301521586,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664481705
    },
    {
        "content": "<p>Does this not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">hpy</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpy</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 301522178,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1664481907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> Given that the second argument is supposed to be of type <code>∀ x, p x</code>, why are you writing that second <code>fun</code> with its first argument having type <code>α</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpy</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">hpy</span>\n</code></pre></div>\n<p>Please let me know what about what I wrote doesn't make sense.</p>",
        "id": 301522803,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664482111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> Just note that the <code>{y: α}</code> \"should\" be <code>(y: α)</code> since the expected type has an explicit argument rather than an implicit one. It doesn't matter in this case.</p>",
        "id": 301523001,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664482187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> Just to check, are you familiar with how <code>fun {y: α} (hpy: p y) =&gt; (h y) hpy</code> is equivalent to <code>fun {y: α} =&gt; fun (hpy: p y) =&gt; (h y) hpy</code>?</p>",
        "id": 301523243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664482279
    },
    {
        "content": "<p>yep, that's not the issue here, it's how quantifiers interact.</p>\n<p>And in particular why we have to have a <code>(y: α)</code> in the last place here.</p>",
        "id": 301523461,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664482362
    },
    {
        "content": "<p>It's because it corresponds to the argument for <code>∀ x, q x</code></p>",
        "id": 301523535,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664482389
    },
    {
        "content": "<p>I'm curious what you're seeing as \"interacting\" quantifiers</p>",
        "id": 301523711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664482447
    },
    {
        "content": "<p>Here's another hint. The following types are completely equivalent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 301523906,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664482523
    },
    {
        "content": "<p>So what's perhaps misleading me is that in the previous chapter of TPIL, I get to do things like </p>\n<p><code>theorem and_dist_right {p q r: Prop} : p ∧ (q ∨ r) → (p ∧ q) ∨ (p ∧ r) := sorry</code> and my types there are implicit parameters, but now I have a very explicit <code>x</code> that appears in the argument list that appears to be the key to making all the types work.</p>\n<p>Again, not confused by the currying here, but probably by the way <code>p</code> is defined here as opposed to the way <code>p</code> is defined in the previous chapter.</p>",
        "id": 301524517,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664482765
    },
    {
        "content": "<p>Tactics are also useful for poking around and seeing what's what. The <code>intros</code> tactic is for automatically creating <code>fun</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intros</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  α : Type</span>\n<span class=\"cm\">  p q : α → Prop</span>\n<span class=\"cm\">   : ∀ (x : α), p x → q x    -- the first argument</span>\n<span class=\"cm\">   : ∀ (x : α), p x          -- the second argument</span>\n<span class=\"cm\">  x✝ : α                     -- the third argument</span>\n<span class=\"cm\">  ⊢ q x✝                     -- the goal (q x)</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 301524584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664482789
    },
    {
        "content": "<p>From NNG, this would be very grokable in tactics land.</p>",
        "id": 301524688,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664482821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/More.20documentation.20on.20the.20syntax.20of.20quantifiers.3F/near/301524517\">said</a>:</p>\n<blockquote>\n<p><code>theorem and_dist_right {p q r: Prop} : p ∧ (q ∨ r) → (p ∧ q) ∨ (p ∧ r) := sorry</code> </p>\n</blockquote>\n<p>With this example, <code>p</code>, <code>q</code>, and <code>r</code> are automatically introduces (no need for <code>fun</code>) since they come \"before the colon\".</p>",
        "id": 301524789,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664482865
    },
    {
        "content": "<p>It's not about implicit/explicit arguments, just to clarify</p>",
        "id": 301524839,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664482888
    },
    {
        "content": "<p>since <code>p</code> is now defined as <code>α → Prop</code> rather than <code>Prop</code> there's an extra argument hidden here it seems?</p>",
        "id": 301524897,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664482915
    },
    {
        "content": "<p>Also, by the way, if those <code>p</code>, <code>q</code>, and <code>r</code> came \"after the colon\" you'd start like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">and_dist_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 301525174,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/More.20documentation.20on.20the.20syntax.20of.20quantifiers.3F/near/301524897\">said</a>:</p>\n<blockquote>\n<p>since <code>p</code> is now defined as <code>α → Prop</code> rather than <code>Prop</code> there's an extra argument hidden here it seems?</p>\n</blockquote>\n<p>No, there's nothing special about <code>α → Prop</code>. That just means <code>p</code> needs to take an argument.</p>",
        "id": 301525368,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483079
    },
    {
        "content": "<p>If you want this new example to look analogous to <code>and_dist_right</code>, it could easily be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 301525447,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483116
    },
    {
        "content": "<p>You could even write this as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>if you want to avoid needing to write the <code>fun</code>s yourself.</p>",
        "id": 301525599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483172
    },
    {
        "content": "<p>Notice it's <code>hp : ∀ x, p x</code>. This <code>hp</code> is a function that takes any arbitrary <code>x : α</code> and returns a proof of <code>p x</code> for that <code>x</code>.</p>",
        "id": 301525759,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483237
    },
    {
        "content": "<p>This is different from taking arguments <code>{y: α} (hpy: p y)</code>, which is saying \"here is some specific <code>y : α</code> for which <code>p y</code> is true\"</p>",
        "id": 301525902,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483284
    },
    {
        "content": "<p>Right, again that's the lightbulb moment here -- since we've defined <code>p</code> as <code>α → Prop</code> I need to give it something of type <code>α</code>, which is why I need a <code>(y : α)</code> in the last parameter.</p>",
        "id": 301526161,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664483386
    },
    {
        "content": "<p>No, it's so much simpler than that, it's because the end of the type is <code>∀ (x : α), q x</code>, so the last argument is this <code>x : α</code> from the quantifier</p>",
        "id": 301526403,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483482
    },
    {
        "content": "<p>Lean doesn't care about the fact that there's a <code>p</code> that's <code>α → Prop</code></p>",
        "id": 301526458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483506
    },
    {
        "content": "<p>Just so we're on the same page, you're reading these forall quantifications as being the same sort of thing as an implication, right?</p>",
        "id": 301526708,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483596
    },
    {
        "content": "<p>(they're both \"pi types\" under the hood, just pretty printed differently)</p>",
        "id": 301526761,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483619
    },
    {
        "content": "<p><code>q</code> is defined the same way, which is why <code>q x</code> even makes sense, right? <code>q x</code> is a <code>Prop</code> because <code>q</code> is <code>α → Prop</code></p>\n<p>I thought all along that my problem was with the quantifiers, but it was with not having anything of type <code>α </code> to apply this to.</p>\n<p>Now I *still don't understand why Lean was telling me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">hpy</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">q</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">q</span> <span class=\"n\">hpy</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 301526779,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664483625
    },
    {
        "content": "<p>To repeat back, <code>∀ (x : α), q x</code> already is an implication, or only works when <code>q</code> is <code>Type -&gt; Prop</code>?</p>",
        "id": 301526973,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664483695
    },
    {
        "content": "<p>It is already the same sort of thing as an implication. A function that takes something of type alpha (call it <code>x</code>) and returns something of type <code>q x</code>.</p>",
        "id": 301527164,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483768
    },
    {
        "content": "<p>Here's an exercise for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 301527187,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483778
    },
    {
        "content": "<p>Or quoting from the book, in language I didn't understand \"If <code>p</code> is any expression, <code>∀ x : α, p</code> is nothing more than alternative notation for <code>(x : α) → p</code>, with the idea that the former is more natural than the latter in cases where p is a proposition. \"</p>",
        "id": 301527194,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664483781
    },
    {
        "content": "<p>The <code>(x : α) → foo</code> notation is equivalent to <code>∀ x : α, foo</code>, where <code>foo</code> can be any expression involving (or not involving) <code>x</code>. If <code>foo</code> does not involve <code>x</code>, then the notation is also equivalent to <code>α → foo</code>.</p>",
        "id": 301527412,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664483864
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 301527967,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664484029
    },
    {
        "content": "<p>The point of this exercise is that there is absolutely no difference between it and your other one for how you prove it.</p>",
        "id": 301528127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664484090
    },
    {
        "content": "<p>For that last error message you were getting, I'm pretty sure it's telling you something irrelevant because you didn't have the <code>fun</code>s structured correctly</p>",
        "id": 301528380,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664484179
    },
    {
        "content": "<p>yep, sartori achieved. Thanks!</p>",
        "id": 301528420,
        "sender_full_name": "Arien Malec",
        "timestamp": 1664484193
    }
]