[
    {
        "content": "<p>So if I want to prove a statement like <code>(a₁ * a₂ * ... * a_n)⁻¹  = a_n⁻¹ *...*a₂⁻¹  *a₁⁻¹</code>, how would I write it out?</p>",
        "id": 201899095,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593030288
    },
    {
        "content": "<p>check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod\">docs#finset.prod</a></p>",
        "id": 201899190,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593030348
    },
    {
        "content": "<p>Jalex beat me to it :P</p>",
        "id": 201899275,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593030378
    },
    {
        "content": "<p>it has many useful lemmas :)</p>",
        "id": 201899281,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593030380
    },
    {
        "content": "<p>you can win the race next time if you use the linkifier</p>",
        "id": 201899348,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593030423
    },
    {
        "content": "<p>ah this won't work, finset.prod is about commutative multiplication</p>",
        "id": 201899789,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593030655
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/inv_prod\">docs#inv_prod</a> ?</p>",
        "id": 201899968,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593030767
    },
    {
        "content": "<p>that looks like the theorem alena asked about</p>",
        "id": 201900062,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593030831
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.prod\">docs#list.prod</a></p>",
        "id": 201900119,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593030844
    },
    {
        "content": "<p>Yeah I'm trying to prove it</p>",
        "id": 201900139,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593030854
    },
    {
        "content": "<p>list.prod takes care of the product, but I still don't get how to iterate over subscripts. Is there some list constructor for that?</p>",
        "id": 201900262,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593030934
    },
    {
        "content": "<p><code>(list.map a (list.range n))</code>, where <code>(a : ℕ → G)</code> and <code>G</code> is your group. I don't think we have something like python list comprehensions, if that's what you're asking</p>",
        "id": 201900353,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593030971
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_inv&#39;</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 201900604,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593031122
    },
    {
        "content": "<p>I don't know exactly how to phrase my question haha sorry, though I do think what you gave me is what I'm looking for</p>",
        "id": 201900617,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031132
    },
    {
        "content": "<p>I'm trying to solve it for all n so it's an induction type proof</p>",
        "id": 201900666,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031159
    },
    {
        "content": "<p>Gonna have to tinker with the list.map thing</p>",
        "id": 201900694,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031179
    },
    {
        "content": "<p>Do you have an example of the place you need to do it at in a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 201900786,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593031213
    },
    {
        "content": "<p>Like the proof itself? It's just an exercise, I'm trying to go through Dummit and Foote and prove basic stuff</p>",
        "id": 201900886,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031272
    },
    {
        "content": "<p>I think this is mathematically the right statement</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201901007,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593031332
    },
    {
        "content": "<p>From what I've learned on this channel is that statements about general <code>a_1, ... a_i, ..., a_n</code> aren't very Lean friendly</p>",
        "id": 201901041,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593031355
    },
    {
        "content": "<p>Oof okay, good to know</p>",
        "id": 201901114,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031407
    },
    {
        "content": "<p>I could be totally wrong though.</p>",
        "id": 201901151,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593031427
    },
    {
        "content": "<p>i think working with a list is slightly harder than working with a finset, but i think working with lists in lean is not much more awkward than working with lists in haskell</p>",
        "id": 201901279,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593031479
    },
    {
        "content": "<p>Its probably best when doing problems like this to use a list <code>L</code> and do induction on <code>L</code> instead of indices directly.</p>",
        "id": 201901294,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593031485
    },
    {
        "content": "<p>Oh no this one is gonna be really tedious</p>",
        "id": 201901338,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> so like, append elements?</p>",
        "id": 201901397,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031548
    },
    {
        "content": "<p>I don't really know how that would look</p>",
        "id": 201901486,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031586
    },
    {
        "content": "<p>I think Alex is suggesting that the statement you want to prove is literally <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inv_prod\">docs#inv_prod</a></p>",
        "id": 201901533,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593031609
    },
    {
        "content": "<p>Ahh okay I see</p>",
        "id": 201901692,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031686
    },
    {
        "content": "<p>here's the statement, for anyone that doesn't follow the link</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">inv_prod</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n</code></pre></div>",
        "id": 201901729,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593031708
    },
    {
        "content": "<p>So yeah the lemma is in mathlib, but you should totally try and prove it still!<br>\nYes, lists are defined as an inductive type, so the empty list is a list, and if <code>L</code> is a list and <code>a</code> is an element, then <code>a :: L</code> is also a list, this notation means append <code>a</code> to the start of <code>L</code>, so <code>a :: [b,c]</code> is <code>[a, b, c]</code>, or this is <code>a :: b :: c :: []</code>.<br>\nBecause its an inductive type doing the induction on lists of different lengths works well, just call <code>induction L</code> to split into these two cases the empty list and <code>a :: L</code> for some <code>a</code>  and <code>L</code>.</p>",
        "id": 201901774,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593031730
    },
    {
        "content": "<p>In this case would it be a good idea to start with an <code>a :: []</code> appended already since the statement doesn't really mean anything on an empty list? Or is that a perfectly valid thing to do?</p>",
        "id": 201901971,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031836
    },
    {
        "content": "<p><code>list.prod</code> is defined for the empty list</p>",
        "id": 201902006,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593031860
    },
    {
        "content": "<p>and your theorem is true for it</p>",
        "id": 201902032,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593031873
    },
    {
        "content": "<p>Okay yeah fair</p>",
        "id": 201902074,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031900
    },
    {
        "content": "<p>Well the advantage of the empty list is that a lot of statements are trivial for that, compared to <code>a :: []</code>, <code>[].prod =1 </code> for example.<br>\nBTW the setup for induction would be like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">inv_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201902078,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593031902
    },
    {
        "content": "<p>Gotcha, thank you!</p>",
        "id": 201902152,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593031929
    },
    {
        "content": "<p>If you want to start from a black box and work backwards, <code>simp</code> can do all the bits, and <code>squeeze_simp</code> will tell you what <code>simp</code> found</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_prod</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">squeeze_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">squeeze_simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201902449,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593032105
    },
    {
        "content": "<p><code>fin</code> version seems more natural to me</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"err\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">prod_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_inv</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201902485,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593032132
    },
    {
        "content": "<p>It doesn't have the reversal going on, though</p>",
        "id": 201902642,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593032220
    },
    {
        "content": "<p>you're proving an easier lemma</p>",
        "id": 201902712,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593032265
    },
    {
        "content": "<p>Yeah, using comm</p>",
        "id": 201902736,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593032281
    },
    {
        "content": "<p>you're taking an unordered product of elements of a commutative group</p>",
        "id": 201902781,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593032284
    },
    {
        "content": "<p>And Prod requires comm_monoid</p>",
        "id": 201902860,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593032325
    },
    {
        "content": "<p>right, that's why we were not using the big operator stuff</p>",
        "id": 201902889,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593032341
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 201902901,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593032347
    },
    {
        "content": "<p>it might not be hard to define big operators over lists, but afaik nobody has done it</p>",
        "id": 201902975,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593032384
    },
    {
        "content": "<p>Patrick is fond of recommending the paper on Coq's big operator library: <a href=\"https://hal.inria.fr/inria-00331193/PDF/main.pdf\">https://hal.inria.fr/inria-00331193/PDF/main.pdf</a></p>",
        "id": 201903758,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593032775
    },
    {
        "content": "<p>This works for doing list.prod through notation (though there's an embarrassingly simple sorry)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `∏` binders ` in ` l `, ` r:(scoped:67 f, (list.map f l).prod) := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">big_list_prod</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_list_prod</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">range_zero</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">range_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">range</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"err\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201907701,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593035082
    }
]