[
    {
        "content": "<p>Hi All! </p>\n<p>I came to the last stage of the proof of the Weak Law  but I have big troubles with it. Namely, I try to proof inequality below in ennreal terms, which will be close my proof since of chebyshev inequality.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.ident_distrib</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.integration</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.variance</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.floor</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">filter</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">big_operators</span> <span class=\"n\">measure_theory</span> <span class=\"n\">probability_theory</span> <span class=\"n\">ennreal</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">probability_theory</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Œ©</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"bp\">Œ©</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_probability_measure</span> <span class=\"o\">(</span><span class=\"n\">‚Ñô</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"bp\">Œ©</span><span class=\"o\">)][</span><span class=\"n\">œâ</span><span class=\"o\">:</span><span class=\"bp\">Œ©</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span>\n\n\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">weak_law</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">):</span>\n<span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">),</span> <span class=\"n\">‚Ñô</span> <span class=\"o\">{</span><span class=\"n\">œâ</span> <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">‚â§|</span><span class=\"o\">(</span><span class=\"bp\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">)</span> <span class=\"n\">œâ</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"bp\">*ùîº</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">|</span><span class=\"o\">})</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">ennreal.tendsto_at_top_zero</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">e</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">N</span><span class=\"o\">:=</span> <span class=\"n\">nat.ceil</span><span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ennreal.to_real</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)))),</span>\n<span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">n_more_N</span><span class=\"o\">,</span>\n\n<span class=\"k\">have</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ennreal.to_real</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)))</span><span class=\"bp\">‚â§</span><span class=\"n\">nat.ceil</span><span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ennreal.to_real</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)))),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">[</span><span class=\"n\">nat.le_ceil</span><span class=\"o\">],</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">probability_theory</span>\n</code></pre></div>\n<p>I am  trying to get rid of the <code>ennreal</code>  part and transform the expression using assumptions on n, but all I can do is to rid of integer part. Maybe some suggestion what can I do? Thank you <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 300098791,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1663834851
    },
    {
        "content": "<p>Your code has two unsolved goals. Which step do you have a problem with? Can you just present me with the goal you want closed, and with the hypotheses which justify the claim mathematically?</p>",
        "id": 300161034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663853972
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Pij07pDJfQD3xMT2puTA3NjG/Ineq.pdf\">Ineq.pdf</a> <br>\nDear Kevin,</p>\n<p>Yes, sure, I just try to leave this inequality in context.  Here is a goal which I want to proof and assumption which we can use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.integration</span>\n<span class=\"kn\">import</span> <span class=\"n\">probability.variance</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.floor</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">filter</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">big_operators</span> <span class=\"n\">measure_theory</span> <span class=\"n\">probability_theory</span> <span class=\"n\">ennreal</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">probability_theory</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">Œ©</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"bp\">Œ©</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_probability_measure</span> <span class=\"o\">(</span><span class=\"n\">‚Ñô</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"bp\">Œ©</span><span class=\"o\">)][</span><span class=\"n\">œâ</span><span class=\"o\">:</span><span class=\"bp\">Œ©</span><span class=\"o\">][</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span>\n\n\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">weak_law</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">mem_‚Ñíp</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">)(</span><span class=\"n\">e_pos</span><span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"bp\">‚åà</span><span class=\"n\">Var</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">e.to_real</span><span class=\"o\">)</span><span class=\"bp\">‚åâ‚Çä</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)(</span><span class=\"n\">n_pos</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">):</span>\n <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">probability_theory</span>\n</code></pre></div>\n<p>As well I am sending overleaf version of theorem. Proof is naive in sense of math but if you want I can sent you proof too.</p>",
        "id": 300305157,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1663919546
    },
    {
        "content": "<p>Note you can write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding=\"application/x-tex\">\\LaTeX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8988em;vertical-align:-0.2155em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">L</span><span class=\"mspace\" style=\"margin-right:-0.36em;\"></span><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6833em;\"><span style=\"top:-2.905em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord\"><span class=\"mord textrm mtight sizing reset-size6 size3\">A</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.15em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">T</span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4678em;\"><span style=\"top:-2.7845em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord textrm\">E</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2155em;\"><span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.125em;\"></span><span class=\"mord textrm\">X</span></span></span></span></span></span> directly into Zulip between double dollars, no need to link to overleaf (at least, for short-ish things)</p>",
        "id": 300305462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663919673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Inequality.20with.20ennreal.20type/near/300305462\">said</a>:</p>\n<blockquote>\n<p>Note you can write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding=\"application/x-tex\">\\LaTeX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8988em;vertical-align:-0.2155em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">L</span><span class=\"mspace\" style=\"margin-right:-0.36em;\"></span><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6833em;\"><span style=\"top:-2.905em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord\"><span class=\"mord textrm mtight sizing reset-size6 size3\">A</span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.15em;\"></span><span class=\"mord text\"><span class=\"mord textrm\">T</span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4678em;\"><span style=\"top:-2.7845em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord textrm\">E</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2155em;\"><span></span></span></span></span><span class=\"mspace\" style=\"margin-right:-0.125em;\"></span><span class=\"mord textrm\">X</span></span></span></span></span></span> directly into Zulip between double dollars, no need to link to overleaf (at least, for short-ish things)</p>\n</blockquote>\n<p>Zulip is so smart, I did not expect this. Thank you so much!</p>",
        "id": 300316351,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1663923460
    },
    {
        "content": "<p>Your theorem is false, because <code>(N: ‚Ñï := ‚åàVar[X 0] / (c ^ 2 * e.to_real)‚åâ‚Çä)</code> doesn't say what you think it does</p>",
        "id": 300323351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663925578
    },
    {
        "content": "<p>That says \"let <code>N</code> be any natural. If the user chooses not to provide one, then pick this one for them\"</p>",
        "id": 300323426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663925606
    },
    {
        "content": "<p>has mathlib ever used <code>opt_param</code>?</p>",
        "id": 300324443,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663925969
    },
    {
        "content": "<p>Yes, for proof arguments to data functions like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.disj_union\">docs#finset.disj_union</a>.</p>",
        "id": 300324946,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1663926174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Inequality.20with.20ennreal.20type/near/300323426\">said</a>:</p>\n<blockquote>\n<p>That says \"let <code>N</code> be any natural. If the user chooses not to provide one, then pick this one for them\"</p>\n</blockquote>\n<p>Eric, Thank you for your comment. In a first section (were my actual statment is) I introduce N with function <code>let</code>.  Is it correct form of introducing N. By the way, I will be very happy if you share how I can introduce N in assumption.</p>",
        "id": 300340981,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1663932500
    },
    {
        "content": "<p>In this particular case I'd recommend just not doing so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">weak_law</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">mem_‚Ñíp</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">)(</span><span class=\"n\">e_pos</span><span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_pos</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"bp\">‚åà</span><span class=\"n\">Var</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">e.to_real</span><span class=\"o\">)</span><span class=\"bp\">‚åâ‚Çä</span><span class=\"o\">):</span>\n  <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300341187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663932580
    },
    {
        "content": "<p>But you could also write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">weak_law</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">mem_‚Ñíp</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">)(</span><span class=\"n\">e_pos</span><span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_pos</span><span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"bp\">‚åà</span><span class=\"n\">Var</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">e.to_real</span><span class=\"o\">)</span><span class=\"bp\">‚åâ‚Çä</span> <span class=\"k\">in</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">):</span>\n  <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300341355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663932643
    },
    {
        "content": "<p>Okay, I see, Thank You very much!</p>",
        "id": 300342858,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1663933286
    },
    {
        "content": "<p>Or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">weak_law</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">mem_‚Ñíp</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">)(</span><span class=\"n\">e_pos</span><span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"bp\">‚åà</span><span class=\"n\">Var</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">e.to_real</span><span class=\"o\">)</span><span class=\"bp\">‚åâ‚Çä</span> <span class=\"k\">in</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_pos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n    <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300343768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663933636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Inequality.20with.20ennreal.20type/near/300343768\">said</a>:</p>\n<blockquote>\n<p>Or even</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">weak_law</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">mem_‚Ñíp</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">)(</span><span class=\"n\">e_pos</span><span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"bp\">‚åà</span><span class=\"n\">Var</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">e.to_real</span><span class=\"o\">)</span><span class=\"bp\">‚åâ‚Çä</span> <span class=\"k\">in</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_pos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n    <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you, I have changed it in my last code!</p>",
        "id": 300354211,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1663937312
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">weak_law</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">mem_‚Ñíp</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">)(</span><span class=\"n\">e_pos</span><span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"bp\">‚åà</span><span class=\"n\">Var</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">e.to_real</span><span class=\"o\">)</span><span class=\"bp\">‚åâ‚Çä</span> <span class=\"k\">in</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_pos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n    <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- annoying special case n = 0</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat.eq_zero_or_pos</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn0</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- annoying special case e = ‚àû</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_top_or_lt_top</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">he</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- using N just makes things more annoying. Why not just not define N at all?</span>\n  <span class=\"n\">change</span> <span class=\"bp\">‚åà</span> <span class=\"n\">_</span> <span class=\"bp\">‚åâ‚Çä</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- get rid of ceiling</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.ceil_le</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- get rid of ennreal stuff in goal</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ennreal.of_real_le_of_le_to_real</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- clear denominators (will show they're positive later)</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_le_iff</span> <span class=\"n\">at</span> <span class=\"n\">hn</span> <span class=\"bp\">‚ä¢</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- main goal now easy</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hn</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- positivity side goal: a bit annoying that I need to use theorems and not tactics here</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">hc</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn0</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- second positivity side goal: here we still have to deal with e</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">hc</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ennreal.to_real_pos_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">e_pos</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">‚ü©,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"525359\">@Daniil Homza</span></p>",
        "id": 300374481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663942258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Inequality.20with.20ennreal.20type/near/300374481\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">weak_law</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">mem_‚Ñíp</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"o\">)(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">)(</span><span class=\"n\">e_pos</span><span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"bp\">‚åà</span><span class=\"n\">Var</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">e.to_real</span><span class=\"o\">)</span><span class=\"bp\">‚åâ‚Çä</span> <span class=\"k\">in</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n_pos</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚â•</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n    <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">Var</span><span class=\"o\">[(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)]</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- annoying special case n = 0</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat.eq_zero_or_pos</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hn0</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- annoying special case e = ‚àû</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_top_or_lt_top</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">he</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- using N just makes things more annoying. Why not just not define N at all?</span>\n  <span class=\"n\">change</span> <span class=\"bp\">‚åà</span> <span class=\"n\">_</span> <span class=\"bp\">‚åâ‚Çä</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- get rid of ceiling</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.ceil_le</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- get rid of ennreal stuff in goal</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ennreal.of_real_le_of_le_to_real</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- clear denominators (will show they're positive later)</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_le_iff</span> <span class=\"n\">at</span> <span class=\"n\">hn</span> <span class=\"bp\">‚ä¢</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- main goal now easy</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hn</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- positivity side goal: a bit annoying that I need to use theorems and not tactics here</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">hc</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn0</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- second positivity side goal: here we still have to deal with e</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">pow_pos</span> <span class=\"n\">hc</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ennreal.to_real_pos_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">e_pos</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">‚ü©,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span class=\"user-mention silent\" data-user-id=\"525359\">Daniil Homza</span></p>\n</blockquote>\n<p>Dear Kevin,</p>\n<p>Thank You so much, It works. It is look very smart and amazing to see how Lean work in real problems. I think it helps me a lot in Lean learning. Thank You! </p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 300591779,
        "sender_full_name": "Daniil Homza",
        "timestamp": 1664061291
    }
]