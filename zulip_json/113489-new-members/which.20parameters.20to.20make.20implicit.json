[
    {
        "content": "<p>Is there a general rule or lint check for which parameters to make implicit? Is it just if the parameter appears in a later parameter?</p>",
        "id": 288282639,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656785220
    },
    {
        "content": "<p>Yes that's the general rule, but there are other subtleties, for example things might depend on whether you're establishing an implication or an iff, or whether it's a definition or a lemma. In my experience it's pretty easy to work out what you should be doing once you start using your definition, if you feel like lean should be working some stuff out which you keep having to feed it then maybe you should have used <code>{}</code>, and conversely if you keep having to use <code>@</code> then maybe you shouldn't have.</p>",
        "id": 288283527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656786498
    },
    {
        "content": "<p>If you use the general rule, will that be enough to ensure that you never need to use <code>@</code>?</p>",
        "id": 288283709,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656786777
    },
    {
        "content": "<p>There's further subtleties in some special cases, when you have an argument appear in a later parameter, but in practice, when you prove the later parameter, the previous one can't be easily inferred</p>",
        "id": 288284223,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656787509
    },
    {
        "content": "<p>Mostly happens with sets and functions, since something like <code>x ∈ s</code> could be literally any proposition on <code>x</code> (which doesn't allow you to infer <code>s</code> unless you already know exactly what you want to prove)</p>",
        "id": 288284280,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656787568
    },
    {
        "content": "<p>Hmm. I think I maybe see. I guess, is there a decidable way to tell which parameters are safe to define as implicit, in the sense of never needing to use <code>@</code>?</p>",
        "id": 288284558,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656787882
    },
    {
        "content": "<p>I'd say the general heuristic is the one you mention, but if you find yourself having to use <code>@</code> more than once or twice, you should make whichever arguments are being problematic explicit</p>",
        "id": 288284662,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656788022
    },
    {
        "content": "<p>Really, it's just a matter of what works</p>",
        "id": 288284668,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656788041
    },
    {
        "content": "<p>Ok, thank you.<br>\nPS: I have seen mentions of a lint checker. Is there one? If so, where should I look for information on it?</p>",
        "id": 288284888,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656788314
    },
    {
        "content": "<p>I think you can lint a file by adding <code>#lint</code> at the end</p>",
        "id": 288284963,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656788410
    },
    {
        "content": "<p>I see, it is a command. That led me to <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#linting%20commands\">https://leanprover-community.github.io/mathlib_docs/commands.html#linting%20commands</a>. Thank you!</p>",
        "id": 288285059,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656788556
    },
    {
        "content": "<p>The linter currently doesn't check which variables are implicit/explicit FYI, if it did I'm sure there would be a lot of linter failures!</p>",
        "id": 288286405,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1656790553
    },
    {
        "content": "<p>Is it theoretically possible to create a program that takes a definition and reports which parameters can 'safely' be set implicit?</p>",
        "id": 288286770,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656791072
    },
    {
        "content": "<p>If I understood correctly, it might be enough to restate the lemma, proving it with the original lemma itself, but using as many underscores as possible.  This may give some idea of which arguments can be inferred by Lean.</p>",
        "id": 288290066,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656796090
    },
    {
        "content": "<p>That makes sense. I was just curious though if there was a decidable way to determine it just from the definition.</p>",
        "id": 288290313,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1656796514
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> made an attempt at a linter to enforce a rule here?</p>",
        "id": 288290547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656796899
    },
    {
        "content": "<p>Kinda. There was an issue about a linter to flag explicit variables that were used on both sides of equalities and iffs. Turned out it flagged way too many lemmas and there were other reasons not to enforce it. But the linter made it into master as an optional linter</p>",
        "id": 288292047,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656799311
    },
    {
        "content": "<p>Something to look forward to in Lean 4 is the ability to set individual implicit variables. For example, we should be able to write <code>finset.univ (α := fin n)</code> rather than needing to write <code>(finset.univ : finset (fin n))</code>. I expect we'll become a lot more aggressive with our use of implicit variables in lemmas.</p>",
        "id": 288294338,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656802959
    }
]