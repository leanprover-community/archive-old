[
    {
        "content": "<p>Still working on <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's homework, I stumbled on the following problem: how to simplify <code>A*A⁻¹*B</code> in a ring? I tried everything I could, with library_search, but got nowhere. First, a version that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">xxx</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_zero</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">ε</span> <span class=\"n\">h0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Now let's say I didn't care to use <code>sub_zero</code> but just hit it with <code>ring</code> (which is how my trouble started): <code>ring</code> will replace <code>ε/A</code> by <code>A⁻¹*ε</code>, thus</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">xxx_fail</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹*</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span> <span class=\"c1\">-- fails</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_cancel_right</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Again, I have a question and metaquestion: (1) can someone who reached enlightenment show me the way in xxx_fail? (2) I tried a lot of <code>library_search</code>, which did help a little (though it gave long-to-type suggestions of the form tactic.ring.xxxx). I also tried <code>hint</code> which waited for a long time without returning anything. Is there something like Isabelle's \"sledgehammer\", or a more efficient way of finding lemmas?</p>",
        "id": 231382620,
        "sender_full_name": "Laurent Bartholdi",
        "timestamp": 1616446278
    },
    {
        "content": "<p>The mul_assoc rewrite is not failing</p>",
        "id": 231385261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1616447397
    },
    {
        "content": "<p>And <code>mul_cancel_right</code> doesn't seem to exist. The naming convention here would have <code>mul_inv_cancel</code>, not <code>mul_cancel</code> alone</p>",
        "id": 231385390,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1616447446
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">xxx_fail</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹*</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231385454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1616447479
    },
    {
        "content": "<p>But you don't need to know all those names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">xxx_fail</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">-</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">ring</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">B</span><span class=\"bp\">*</span><span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹*</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">h0</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231385536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1616447525
    },
    {
        "content": "<p>And <code>library_search</code> does know it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 231385857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1616447629
    }
]