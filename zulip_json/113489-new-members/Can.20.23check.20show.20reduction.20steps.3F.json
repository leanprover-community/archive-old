[
    {
        "content": "<p>Working through \"Theorem Proving in Lean\", currently in section \"2.3 Function Abstraction and Evaluation\".  <br>\n#check is/seems to be doing  <a href=\"https://en.wikipedia.org/wiki/Lambda_calculus\">Lambda Calculus</a> <a href=\"https://en.wikipedia.org/wiki/Lambda_calculus#Reduction_strategies\">reductions</a> or <a href=\"https://en.wikipedia.org/wiki/Type_inference\">Type inference</a><br>\nIn learning Lambda Calculus the <code>Lambda calculus reduction workbench</code> (<a href=\"https://www.itu.dk/people/sestoft/lamreduce/index.html\">site</a>) (<a href=\"https://www.itu.dk/people/sestoft/lamreduce/lamframes.html\">app</a>) was helpful in understanding the reductions used.<br>\nDoes there exist some options for #check or other command that can show the reductions?</p>",
        "id": 264136713,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638959500
    },
    {
        "content": "<p>I've heard other people talk about using certain \"trace\" functionalities of Lean for this (in the context of debugging). <br>\nI'm not sure if that would show what you expect though, as Lean's underlying calculus does more than just beta-, eta-reduction and alpha-conversion.</p>",
        "id": 264138751,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638960759
    },
    {
        "content": "<p>Mario has a description of the things going on under the hood in his <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">MS Thesis</a>.</p>",
        "id": 264138921,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638960851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/113489-new-members/topic/Can.20.23check.20show.20reduction.20steps.3F/near/264138751\">said</a>:</p>\n<blockquote>\n<p>I've heard other people talk about using certain \"trace\" functionalities of Lean for this (in the context of debugging). </p>\n</blockquote>\n<p>To me that actually makes a lot of sense. <br>\nInstead of asking lots of questions now, I will take some time to see where that information takes me and perhaps ask more latter.</p>",
        "id": 264139226,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638961064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/113489-new-members/topic/Can.20.23check.20show.20reduction.20steps.3F/near/264138921\">said</a>:</p>\n<blockquote>\n<p>Mario has a description of the things going on under the hood in his <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">MS Thesis</a>.</p>\n</blockquote>\n<p>That is the second time in as many days that I have been directed to that. Still have not read all the way through it, now seems like the right time.</p>",
        "id": 264139418,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638961185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366057\">@Eric Taucher</span> I don't think you need to read all the way through. Sections 2.1-2.5 should give you a good amount of info already.</p>",
        "id": 264169298,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1638976629
    },
    {
        "content": "<p>In an odd way this other <a href=\"#narrow/stream/270676-lean4/topic/Lean4.20Debugger/near/264159653\">topic</a> is also shedding some light, namely <code>set_option</code>. I still have to try it but am reading the paper to the end just to have it imprinted in my memory. Much of it spilling out.</p>",
        "id": 264171880,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1638977511
    }
]