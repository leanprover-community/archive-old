[
    {
        "content": "<p>Is there a way to instantiate meta variables.  Consider the theorem below:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">..</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>What should the ...  be replaced with?  In this theorem, we could just change the existsi _ but in more complex theorems, meta variables seem to appear in many other places and it would be nice to instantiate them.</p>",
        "id": 130230234,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532459181
    },
    {
        "content": "<p>what information would you provide in order for the metavariables to be instantiated?</p>",
        "id": 130230270,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532459232
    },
    {
        "content": "<p>replacing <code>..</code> with <code>refl</code> would prove the theorem, but I don't know if that is what you want</p>",
        "id": 130230286,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532459263
    },
    {
        "content": "<p>refl is not what I want.  In Coq, you can provide a value using instantiate (meta_var := value).  Is there something similar in Lean?</p>",
        "id": 130231216,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532460122
    },
    {
        "content": "<p>Doesn't this meta variable appear as a new goal?</p>",
        "id": 130231266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532460182
    },
    {
        "content": "<p><code>existsi 7</code> will instantiate the metavariable. If you use a hole <code>_</code> then you get a new goal <code>⊢ ℕ</code> as Patrick says. You can make this the first goal with <code>show ℕ</code> or <code>swap</code> and then instantiate it with <code>exact 7</code>.</p>",
        "id": 130232163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532461087
    },
    {
        "content": "<p>I've seen those new goals as holes--that is how to fill in the holes.  Can swap be used beyond the second goal or is there something similar to switch for example the first and third goal?</p>",
        "id": 130232676,
        "sender_full_name": "Ken Roe",
        "timestamp": 1532461720
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/tactic/interactive.lean#L159\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/tactic/interactive.lean#L159\">https://github.com/leanprover/mathlib/blob/master/tactic/interactive.lean#L159</a></p>",
        "id": 130232717,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532461792
    },
    {
        "content": "<p>as explained by Kevin</p>",
        "id": 130232719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532461799
    },
    {
        "content": "<p>You can also use <code>show</code> if you have only one goal of that type</p>",
        "id": 130232781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532461825
    }
]