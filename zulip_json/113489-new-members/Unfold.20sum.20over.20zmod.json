[
    {
        "content": "<p>Is there a way to unfold a sum over a finite type into an explicit sum? In particular, I would like to prove something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>I have noticed that if instead of <code>ℝ</code> I write <code>ℕ</code> this is easy. But I can't do the same with <code>ℝ</code> because it is not computable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 214587464,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1603725611
    },
    {
        "content": "<p>I don't think it should matter if the codomain is real here</p>",
        "id": 214587624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603725711
    },
    {
        "content": "<p>the rfl proof should still work</p>",
        "id": 214587638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603725719
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 214587830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603725815
    },
    {
        "content": "<p>n+0=n is rfl for nat but not for real</p>",
        "id": 214587845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603725825
    },
    {
        "content": "<p>so an alternative proof for the original version would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 214588070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603725930
    },
    {
        "content": "<p>Is there a <code>zmod</code> to <code>fin</code> equiv? This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214589065,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603726329
    },
    {
        "content": "<p>they are actually defeq I think</p>",
        "id": 214589726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603726619
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 214590031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603726737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Unfold.20sum.20over.20zmod/near/214588070\">said</a>:</p>\n<blockquote>\n<p>so an alternative proof for the original version would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n\n</blockquote>\n<p>I see, thanks!</p>",
        "id": 214590242,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1603726822
    },
    {
        "content": "<p>Pedantic remark: <code>zmod 0</code> is not defeq to <code>fin 0</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 214591011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603727066
    }
]