[
    {
        "content": "<p>I have an issue where my definition is erroring out that it can't prove the recursive application is decreasing. The state it gives me though is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">is_sigma_0_ξ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">ξ</span> <span class=\"bp\">∧</span> <span class=\"n\">ξ</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ord</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">ξ</span> <span class=\"bp\">∧</span> <span class=\"n\">ξ</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ord</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">heo</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">hgo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ξ</span><span class=\"o\">,</span>\n<span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n<span class=\"n\">ξₙ</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">,</span>\n<span class=\"n\">hₙ</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">ξₙ</span> <span class=\"bp\">∧</span> <span class=\"n\">ξₙ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ξ</span><span class=\"o\">,</span>\n<span class=\"n\">hdec</span> <span class=\"o\">:</span> <span class=\"n\">ξₙ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ξ</span><span class=\"o\">,</span>\n<span class=\"n\">hrec</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">ξₙ</span> <span class=\"bp\">∧</span> <span class=\"n\">ξₙ</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ord</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ξₙ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ξ</span>\n</code></pre></div>\n<p>which has the goal as one of the hypotheses so I'm not sure what I can do to so it recognizes that the application is valid.</p>",
        "id": 221986512,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610046526
    },
    {
        "content": "<p>This page may help: <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">https://leanprover-community.github.io/extras/well_founded_recursion.html</a></p>",
        "id": 221986591,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610046572
    },
    {
        "content": "<p>I've looked at that and it helped me make some progress with the suggestion to push extra arguments into lambdas, but I didn't see anything that seems to apply specifically here. Am I missing something?</p>",
        "id": 221986757,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610046653
    },
    {
        "content": "<p>Try turning on <code>pp.all</code> to see if there are some hidden differences?</p>",
        "id": 221987066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610046826
    },
    {
        "content": "<p>Trimming the output from that gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hdec</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">ordinal.has_lt.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">ξₙ</span> <span class=\"n\">ξ</span><span class=\"o\">,</span>\n     <span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">ordinal.has_lt.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">ξₙ</span> <span class=\"n\">ξ</span>\n</code></pre></div>\n<p>which look identical to me</p>",
        "id": 221987419,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610046970
    },
    {
        "content": "<p>Here's the definition that is causing the issues</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_sigma_0_ξ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">ξ</span> <span class=\"bp\">∧</span> <span class=\"n\">ξ</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ord</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ξ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">heo</span><span class=\"o\">:</span> <span class=\"n\">ξ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span>\n  <span class=\"k\">else</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n      <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ξₙ</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₙ</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">ξₙ</span> <span class=\"bp\">∧</span> <span class=\"n\">ξₙ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ξ</span><span class=\"o\">),</span>\n        <span class=\"k\">have</span> <span class=\"n\">hdec</span> <span class=\"o\">:</span> <span class=\"n\">ξₙ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ξ</span> <span class=\"o\">:=</span> <span class=\"n\">hₙ.2</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hrec</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">ξₙ</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">ξₙ</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ord</span><span class=\"o\">),</span>\n          <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hₙ.1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">hₙ.2</span> <span class=\"n\">h.2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n        <span class=\"n\">is_sigma_0_ξ</span> <span class=\"n\">ξₙ</span> <span class=\"n\">hrec</span> <span class=\"n\">t</span><span class=\"bp\">ᶜ</span>\n    <span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">T.countable</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃₀</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 221987656,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610047087
    },
    {
        "content": "<p>I think the statement \"  - The default decreasing tactic uses the 'assumption' tactic, thus hints (aka local proofs) can be provided using 'have'-expressions.\" is a lie</p>",
        "id": 221989395,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610047959
    },
    {
        "content": "<p>It only works if the inequality is at type <code>nat</code></p>",
        "id": 221989967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610048205
    },
    {
        "content": "<p>Well that would explain it. So I guess I need to rewrite it and use <code>well_founded.fix</code>  to make it?</p>",
        "id": 221990260,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610048334
    },
    {
        "content": "<p>Add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 221990277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610048341
    },
    {
        "content": "<p>Ah, that did work, thank you very much. Would a PR to update that error message be welcome so others don't get confused in the same way?</p>",
        "id": 221990470,
        "sender_full_name": "Devon Richards",
        "timestamp": 1610048432
    },
    {
        "content": "<p>The problem is in <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/well_founded_tactics.lean#L201\">https://github.com/leanprover-community/lean/blob/master/library/init/meta/well_founded_tactics.lean#L201</a><br>\n<code>cancel_nat_add_lt</code> fails if the goal is not an inequality between <code>nat</code>s, but instead it should just succeed without doing anything</p>",
        "id": 221990724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610048539
    },
    {
        "content": "<p>I should come back to <a href=\"https://github.com/leanprover-community/lean/issues/288\">lean#288</a> which aimed to remove <code>default_dec_tac</code> altogether. I think all that's needed is fixing / deleting all the broken tests.</p>\n<p>I'm not entirely clear on what the plan is afterwards; maybe things have changed in light of Lean 4. cc: <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 221993887,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610050124
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 231669901,
        "sender_full_name": "Joao Bregunci",
        "timestamp": 1616605157
    }
]