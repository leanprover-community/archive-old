[
    {
        "content": "<p>I have run into more similar problems: If I know that two real numbers <code>x, y</code>  are equal, how do I show that they are then also equal as subsets of <code>\\R</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>state: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">},</span>\n<span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Intuitively I want to use the injectivity of the coersion function.</p>",
        "id": 285131828,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1654531063
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ext\">tactic#ext</a> is designed to help with such extensionality problems, so you can just use that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285132191,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654531203
    },
    {
        "content": "<p>Another option is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">tactic#library_search</a> to find the lemma in the library</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n   <span class=\"n\">library_search</span><span class=\"o\">,</span> <span class=\"c1\">-- subtype.ext is the exact lemma needed</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285132394,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654531272
    },
    {
        "content": "<p>Ohh, thanks so much. I should have tried the library search for sure.</p>",
        "id": 285132590,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1654531341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"494571\">Raphael Appenzeller</span> has marked this topic as resolved.</p>",
        "id": 285132710,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654531400
    },
    {
        "content": "<p>I didn't know that <code>ext</code> worked on an implication and closed the goal!</p>",
        "id": 285153586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654541131
    }
]