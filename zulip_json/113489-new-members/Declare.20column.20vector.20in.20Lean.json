[
    {
        "content": "<p>Hello, I am trying to formalize  Cramer rule in Lean. I need to declare a column vector. I did as the following, but it had errors. Anyone can help me? Thanks alot.</p>\n<p>import ring_theory.determinant<br>\nopen matrix<br>\nuniverses u v<br>\nvariables (n : Type u) [fintype n][decidable_eq n]<br>\nvariables (α : Type v)[field α]<br>\nvariables [has_one (Type u)](A: matrix n n α)(b: matrix n 1 α)</p>",
        "id": 160844342,
        "sender_full_name": "Nguyen Thi Nhung",
        "timestamp": 1552621216
    },
    {
        "content": "<p><code>n</code> should probably be a <code>nat</code>, not a type. Then I'd use <code>matrix (fin n) (fin n) α</code> and <code>matrix (fin n) (fin 1) α</code>.</p>",
        "id": 160844979,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1552622076
    },
    {
        "content": "<p>For future reference you should include the error messages in with your question</p>",
        "id": 160844988,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1552622095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>.  Following your suggestions, I did it. Thank you.</p>",
        "id": 160846644,
        "sender_full_name": "Nguyen Thi Nhung",
        "timestamp": 1552624774
    },
    {
        "content": "<p>Hi,<br>\nI am formalizing Cramer rule, but it still has error (as I include in the following). How can I solve it? Thank you.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">determinant</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field</span>\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">units</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Cramer_rule</span><span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">}{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">}{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">det</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">det</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">/</span> <span class=\"n\">det</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">b</span> <span class=\"n\">i</span> <span class=\"mi\">1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 161030526,
        "sender_full_name": "Nguyen Thi Nhung",
        "timestamp": 1552883905
    },
    {
        "content": "<p>Do you understand what the error message is saying? The point is that <code>x</code> is an n-by-1 matrix, but in your conclusion you are saying <code>x = ?</code>, for <code>?</code> just a vector.</p>",
        "id": 161032104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1552886542
    },
    {
        "content": "<p>(i.e. just a function from <code>fin n</code> to <code>alpha</code>, rather than a function from <code>fin n</code> to <code>fin 1</code> to <code>alpha</code>.)</p>",
        "id": 161032109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1552886573
    },
    {
        "content": "<p>Thank you for your reply <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> . I knew my error, but I didn't know how to solve it <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> . Can you show me how to  correct this?</p>",
        "id": 161037904,
        "sender_full_name": "Nguyen Thi Nhung",
        "timestamp": 1552896037
    },
    {
        "content": "<p>Well, your expression <code>λ t, det(λ i j, if j = t then b i 1 else A i j)/ det(A))</code> is a function <code>fin n -&gt; \\alpha</code>, and you need a <code>fin n -&gt; fin 1 -&gt; \\alpha</code>. What is the the syntax you might use to define a function of two arguments?</p>",
        "id": 161039212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1552897790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thank you. I will think about this to fix my error.</p>",
        "id": 161127653,
        "sender_full_name": "Nguyen Thi Nhung",
        "timestamp": 1552981155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I have already fixed it :-)</p>",
        "id": 161130206,
        "sender_full_name": "Nguyen Thi Nhung",
        "timestamp": 1552983949
    }
]