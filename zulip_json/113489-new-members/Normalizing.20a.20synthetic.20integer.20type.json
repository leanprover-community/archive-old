[
    {
        "content": "<p>I've created my own synthetic integer type (i.e. not derived from the natural numbers type). The problem with this version of the integers is that there are many redundant ways of encoding the same integer. I want to have a normalization function that takes an arbitrary integer of this type and reduces it to a normal or canonical form of either <code>succ (succ (succ ... zero ) )</code> or <code>pred (pred (pred ... zero))</code>. I'm finding this difficult to do in a pure functional way as someone novice at both Lean and functional programming in general. Any hints?  [Lean3].</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Int</span>\n<span class=\"c1\">-- This function can deal with integers encoded with alternating (succ (pred ...) ) but not forms like pred (pred (succ (succ zero )))</span>\n<span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">norm</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">zero</span> <span class=\"c1\">-- zero</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">norm</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">zero</span> <span class=\"c1\">-- zero.pred.succ.succ</span>\n</code></pre></div>",
        "id": 237881669,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620417455
    },
    {
        "content": "<p>this feels like the bracketing problem with DFAs (well formed bracketed expressions aren't a regular language). Not sure if the eqn compiler can do something powerful than a DFA? maybe with a <code>fuel</code> parameter, or well-founded recursion?</p>",
        "id": 237884716,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620418888
    },
    {
        "content": "<p>Just to be clear -- this is not the integers, because succ(pred(0)) isn't equal to 0. Do you want to put an equivalence relation on this type and work with equivalence classes? Then you could get the integers on the nose.</p>",
        "id": 237884723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620418896
    },
    {
        "content": "<p>Once you have the actual integers, then you can define <code>simp</code> lemmas such as cl(succ(pred(x))=cl(x) and then the simplifier will be able to do the reduction for you.</p>",
        "id": 237884928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620419009
    },
    {
        "content": "<p>I doubt the equation compiler can match on subterms, so it won't be able to get to succ(succ(succ....(succ(pred(zero)))..) for an arbitrarily long string because it's matching from the left and it can only have finitely many rules. But the simplifier can do this -- but only with equalities and &lt;-&gt;s, so that's why I'm suggesting that you pass to the equivalence classes first.</p>",
        "id": 237885391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620419250
    },
    {
        "content": "<p>The fixed point of <code>norm</code> would work.</p>",
        "id": 237885552,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620419340
    },
    {
        "content": "<p>but norm as it stands won't change s(s(p(0))) to s(0), so what exactly do you mean by this?</p>",
        "id": 237885608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620419379
    },
    {
        "content": "<p>You can define a function <code>Int -&gt; nat</code> that counts the number of <code>succ</code> and <code>pred</code>s in a term. Now iterate <code>norm</code> that many times on the term.</p>",
        "id": 237885800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620419449
    },
    {
        "content": "<p>don't the last two lines fix that Kevin?</p>",
        "id": 237885827,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620419464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"n\">norm</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">zero</span> <span class=\"c1\">-- zero.pred.succ.succ</span>\n</code></pre></div>",
        "id": 237885985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620419529
    },
    {
        "content": "<p>You're right, it's better than I thought, but it's still not good enough. Maybe there is a trick then?</p>",
        "id": 237886087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620419582
    },
    {
        "content": "<p>Johan is right:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.function.iterate</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rearr</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">rearr</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">count'</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count'</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">count'</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#reduce</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">zero</span> <span class=\"k\">in</span> <span class=\"n\">norm</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">count'</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"c1\">-- zero.succ</span>\n</code></pre></div>",
        "id": 237886622,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620419852
    },
    {
        "content": "<p>the iteration operator is cool, i hadn't seen that before</p>",
        "id": 237886753,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620419905
    },
    {
        "content": "<p>Of course it is mighty inefficient (-;</p>",
        "id": 237887085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620420111
    },
    {
        "content": "<p>I see, you have to apply norm more than once!</p>",
        "id": 237887147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620420128
    },
    {
        "content": "<p>Exercise for the reader: define a well_founded relation that will allow you to take the fixpoint of norm, so you don't have to rely on <code>count'</code>.</p>",
        "id": 237888372,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620420806
    },
    {
        "content": "<p>I think this is a more elegant single pass solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">up</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">down</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">norm_aux</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">norm_aux</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">norm_aux</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">acc</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">acc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"n\">norm_aux</span> <span class=\"n\">zero</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">norm</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">zero</span> <span class=\"c1\">-- zero</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">norm</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">succ</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">pred</span> <span class=\"bp\">$</span> <span class=\"n\">zero</span> <span class=\"c1\">-- zero.succ</span>\n</code></pre></div>",
        "id": 237891831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620422425
    },
    {
        "content": "<p>The secret is that <code>acc</code> is actually an <code>int</code> in disguise: it is always either <code>succ^n zero</code> or <code>pred^n zero</code> because we consistently head-normalize it</p>",
        "id": 237891947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620422482
    },
    {
        "content": "<p>and this is linear time to boot</p>",
        "id": 237892072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620422541
    },
    {
        "content": "<p>Thanks, everyone!</p>",
        "id": 237892607,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620422835
    },
    {
        "content": "<p>So if I use <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's <code>norm</code> function, then I can define a subtype like <code>def Int2 : Type := { x : Int // (norm x) = x }</code>  Would this be a suitable alternative to creating a quotient type? I'd have to prove the idempotence of <code>norm</code></p>",
        "id": 238057153,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620589806
    },
    {
        "content": "<p>Yes, that would work. There are a couple ways you could express that proposition: it is also the set of <code>Int</code> values accessible by applying <code>up</code> and <code>down</code> to <code>zero</code> (it is easy to prove that <code>norm</code> produces elements in that subset), as well as the set of values of the form <code>succ^n zero</code> or <code>pred^n zero</code> (which would be a good starting point for proving isomorphism to <code>int</code>)</p>",
        "id": 238057441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620590112
    },
    {
        "content": "<p>If I label the conditions as (P1) <code>norm x = x</code> (P2) inductively generated by <code>up</code>,<code>down</code>,<code>zero</code> (P3) <code>succ^n zero</code> or <code>pred^n zero</code>, then there are the following lemmas:</p>\n<ul>\n<li><code>P2 (norm x)</code>, and more generally <code>P2 acc -&gt; P2 (norm_aux acc x)</code> (by induction on <code>x</code>), therefore P1 -&gt; P2</li>\n<li><code>P3 x -&gt; P3 (up x), P3 (down x)</code> (by cases), therefore P2 -&gt; P3</li>\n<li><code>norm (succ^n zero) = succ^n zero</code> (by induction on <code>n</code>) and similarly for pred, therefore P3 -&gt; P1</li>\n</ul>",
        "id": 238057702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620590392
    },
    {
        "content": "<p>Therefore <code>norm</code> is idempotent because <code>P2 (norm x)</code> so by P1 <code>norm (norm x) = norm x</code></p>",
        "id": 238057842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620590470
    },
    {
        "content": "<p>You need more than idempotence of norm, you need to prove that norm gives rise to a set of representatives for the equivalence relation, i.e. a related to b iff norm(a)=norm(b) and a related to norm(a).</p>",
        "id": 238059902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620592633
    },
    {
        "content": "<p>Here, there is no explicit equivalence relation, it is just <code>norm a = norm b</code>. So the claim that <code>norm a</code> is related to <code>a</code> is just <code>norm (norm a) = norm a</code>, and a related to b iff norm a = norm b is true by definition</p>",
        "id": 238061473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620594110
    },
    {
        "content": "<p>Yeah on the surface this seems easier than making a setoid and quotient.</p>",
        "id": 238061808,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1620594387
    },
    {
        "content": "<p>Is it always possible to replace a quotient type with a subtype in this way?</p>",
        "id": 238062521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620595103
    },
    {
        "content": "<p>Oh, I guess that's <code>{x // (quot.mk r x).out = x}</code>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.out\">docs#quot.out</a> is essentially the proof the answer is yes</p>",
        "id": 238062652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620595251
    },
    {
        "content": "<p>It's non-computable but yes</p>",
        "id": 238062917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620595511
    },
    {
        "content": "<p>You choose an element in each equivalence class</p>",
        "id": 238062935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620595525
    },
    {
        "content": "<p>I've been banging my head on this for a long time and I am just not competent enough yet to solve this in any reasonable amount of time.  Hoping someone can help. I'm trying to prove <code>is_norm (norm i)</code> using the <code>norm</code> function <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> made<br>\nBy staring at the definition, clearly <code>norm i</code> produces a <code>b_int</code> of the form <code>succ^n zero</code> or <code>pred^n zero</code> (but I dont know how to prove it) and both of these can be proven to be in normal form according to <code>is_norm</code>. </p>\n<p>MWE in Lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">b_int</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">b_int</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">//</span> <span class=\"n\">is_norm</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">up</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">down</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pred</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- 1st arg is constructed, 2nd is input</span>\n<span class=\"kd\">def</span> <span class=\"n\">norm_aux</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">norm_aux</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">norm_aux</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span> <span class=\"bp\">→</span> <span class=\"n\">b_int</span> <span class=\"o\">:=</span> <span class=\"n\">norm_aux</span> <span class=\"n\">zero</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">norm</span> <span class=\"n\">zero.pred.pred.succ.succ.succ.pred.pred.pred</span> <span class=\"c1\">-- pred (pred zero)</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">is_norm</span> <span class=\"bp\">$</span> <span class=\"n\">norm</span> <span class=\"n\">zero.pred.pred.succ.succ.succ.pred.pred.pred</span> <span class=\"c1\">-- true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_norm_norm</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">b_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 242125899,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1623270870
    },
    {
        "content": "<p>I sketched this proof above. Prove these lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_norm_up</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">is_norm_down</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">norm_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">is_norm_norm</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 242129413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623272484
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  ! I proved the first 3 lemmas, now working on <code>is_norm_norm</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_norm_up</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"bp\">;</span>\n    <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"n\">h3</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"bp\">;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">contradiction</span><span class=\"bp\">;</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_norm_down</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"bp\">;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">contradiction</span><span class=\"bp\">;</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"n\">h3</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"bp\">;</span>\n    <span class=\"n\">assumption</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_i_succ</span> <span class=\"o\">:</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">norm_aux</span> <span class=\"n\">zero.succ</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_i</span> <span class=\"o\">:</span> <span class=\"n\">norm</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">norm_aux</span> <span class=\"n\">zero</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_aux_succ_i</span> <span class=\"o\">:</span> <span class=\"n\">norm_aux</span> <span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">norm_aux</span> <span class=\"n\">zero.succ</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_aux_succ_eq_up</span> <span class=\"o\">:</span> <span class=\"n\">norm_aux</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">norm_aux</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">norm_aux_pred_eq_down</span> <span class=\"o\">:</span> <span class=\"n\">norm_aux</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">norm_aux</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">norm_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_aux_succ_eq_up</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">is_norm_up</span> <span class=\"n\">h1</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"n\">h2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_aux_pred_eq_down</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">is_norm_down</span> <span class=\"n\">h1</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"n\">h2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">h1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_norm_up</span> <span class=\"n\">h1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_aux_succ_eq_up</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"k\">show</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">norm_aux</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"n\">h1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_aux_pred_eq_down</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"k\">from</span> <span class=\"n\">is_norm_down</span> <span class=\"n\">h1</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"n\">h2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">h1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_norm_down</span> <span class=\"n\">h1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_aux_succ_eq_up</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"k\">from</span> <span class=\"n\">is_norm_up</span> <span class=\"n\">h1</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"n\">h2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_aux_pred_eq_down</span><span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"k\">from</span> <span class=\"n\">is_norm_down</span> <span class=\"n\">h1</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 242153941,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1623292974
    },
    {
        "content": "<p>Your proof of <code>is_norm_norm_aux</code> is suspiciously long. It should be: induction on <code>b</code> generalizing <code>a</code>, and then apply <code>h</code>, <code>IH (is_norm_up h)</code> and <code>IH (is_norm_down h)</code> in the three cases</p>",
        "id": 242154010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623293093
    },
    {
        "content": "<p>Yes... this is indeed quite a bit shorter , thanks again</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">norm_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">norm_aux</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">up</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">is_norm_up</span> <span class=\"n\">h1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">b</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">norm_aux</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">down</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">is_norm_down</span> <span class=\"n\">h1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span>\n</code></pre></div>",
        "id": 242154807,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1623294166
    },
    {
        "content": "<p>And it's done</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_norm_norm</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"n\">h1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_norm</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_norm_norm_aux</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 242155153,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1623294621
    },
    {
        "content": "<p>Thank you very much for the guidance <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> . I can finally sleep in peace (thinking about this has been keeping me up at night).</p>",
        "id": 242155337,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1623294952
    },
    {
        "content": "<p>for the last proof, you don't need a match at all</p>",
        "id": 242155384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623294995
    },
    {
        "content": "<p><code>is_norm_norm_aux rfl</code></p>",
        "id": 242155385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623295003
    },
    {
        "content": "<p>Oh right, even better. I really need to work on simplicity</p>",
        "id": 242155637,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1623295388
    },
    {
        "content": "<p>I think long proofs is fine when you're just learning. You need to experience the \"goals accomplished\" triumph :-)</p>",
        "id": 242174540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623313985
    }
]