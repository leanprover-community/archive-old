[
    {
        "content": "<p>Hi all,<br>\nI've been playing around with Lean lately, working through the natural number game and the tutorials project.  I used to study descriptive set theory, and I thought I might try to prove some of the basics in Lean.  There is a lot of overlap between basic point-set topology and basic descriptive set theory, so a lot of useful stuff is already in <code>mathlib</code>, but there are still plenty of things that aren't there yet.  My hope is that I can do some of the easy stuff in my free time. :)</p>\n<p>I realized that for all the information included in the tutorials project, I still don't know how to do something as basic as define a Polish space (a completely metrizable and separable topological space).  There are at least two aspects to this:<br>\na) I'm not sure if it's better to define a Polish space as a metric space or a topological space, i.e. I'm not sure the \"correct\" way to work with metrizable spaces.  Some of the proofs I'd like to do definitely use the metric, though of course there may be some other way to do them.<br>\nb) Even if I just decided \"okay, I'll just say it's a complete and separable space for now to get started\", I'm not sure how to do that.  I can find a few similar definitions in <code>mathlib</code> such as that of a <code>borel_space</code>, but I'm not really sure how the <code>class</code> keyword works (for example), and of course most of these files start with a lot of boilerplate that I don't yet understand the significance of.</p>\n<p>So if anyone can point me at some relevant docs or examples, that would be excellent.  I'm looking forward to getting something proved, even if it's small.</p>",
        "id": 211437046,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601244897
    },
    {
        "content": "<p>If a Polish space is metrizable, then I guess you should say that; that is, it should not come with a metric</p>",
        "id": 211437116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601245024
    },
    {
        "content": "<p>Also hello</p>",
        "id": 211437122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601245036
    },
    {
        "content": "<p>As for examples, perhaps something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.first_countable_topology\">docs#topological_space.first_countable_topology</a> can get you started? Definition making is one of the more complicated things to do in lean without prior expertise, because it shapes a lot of what comes later and there are sometimes subtle details that relate more to the way lean works than the way the mathematics works</p>",
        "id": 211437185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601245158
    },
    {
        "content": "<p>Welcome!  </p>\n<p><span class=\"user-mention silent\" data-user-id=\"346858\">Jay Williams</span> <a href=\"#narrow/stream/113489-new-members/topic/Jay.20Williams/near/211437046\">said</a>:</p>\n<blockquote>\n<p>b) Even if I just decided \"okay, I'll just say it's a complete and separable space for now to get started\", I'm not sure how to do that.  I can find a few similar definitions in <code>mathlib</code> such as that of a <code>borel_space</code>, but I'm not really sure how the <code>class</code> keyword works (for example), and of course most of these files start with a lot of boilerplate that I don't yet understand the significance of.</p>\n</blockquote>\n<p>This seems a reasonable way to start.  Perhaps you could state (in words) a lemma, then someone here can give you the Lean statement and you can start playing with the proof.</p>",
        "id": 211437244,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601245231
    },
    {
        "content": "<p>The <code>class</code> keyword is just a synonym for <code>@[class] structure</code>, so if you know how the structure keyword works then class is no different. (Of course that might not be any help.)</p>",
        "id": 211437404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601245460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Jay.20Williams/near/211437244\">said</a>:</p>\n<blockquote>\n<p>This seems a reasonable way to start.  Perhaps you could state (in words) a lemma, then someone here can give you the Lean statement and you can start playing with the proof.</p>\n</blockquote>\n<p>Ah this is a great idea, I think I was getting ahead of myself a little bit.  Well let's see, the very first things in Kechris' _Descriptive Set Theory_ that are proved about Polish spaces are</p>\n<ol>\n<li>The completion of a separable metric space is Polish.</li>\n<li>A closed subspace of a Polish space is Polish.</li>\n</ol>",
        "id": 211437434,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601245534
    },
    {
        "content": "<p>Learning Lean is like picking up a new language -- you just try out things until they work</p>",
        "id": 211437481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1601245566
    },
    {
        "content": "<p>One thing you don't need any particular lean expertise to do is unpack all the words until everything is in terms of concepts in mathlib</p>",
        "id": 211437495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601245595
    },
    {
        "content": "<p>Ah so rather than worrying about including the words \"Polish space\" just do the above lemmas with \"complete and separable space\".  That's a good idea!</p>",
        "id": 211437522,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601245651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346858\">Jay Williams</span> <a href=\"#narrow/stream/113489-new-members/topic/Jay.20Williams/near/211437522\">said</a>:</p>\n<blockquote>\n<p>Ah so rather than worrying about including the words \"Polish space\" just do the above lemmas with \"complete and separable space\".  That's a good idea!</p>\n</blockquote>\n<p>So if we do this with your (1), is the point that the completion of a separable metric space is separable?</p>",
        "id": 211437583,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601245709
    },
    {
        "content": "<p>you can of course define \"Polish space\" to mean that, and then you can use Polish space</p>",
        "id": 211437585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601245713
    },
    {
        "content": "<p>but the point is to define anything you need along the way</p>",
        "id": 211437589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601245732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Jay.20Williams/near/211437583\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"346858\">Jay Williams</span> <a href=\"#narrow/stream/113489-new-members/topic/Jay.20Williams/near/211437522\">said</a>:</p>\n<blockquote>\n<p>Ah so rather than worrying about including the words \"Polish space\" just do the above lemmas with \"complete and separable space\".  That's a good idea!</p>\n</blockquote>\n<p>So if we do this with your (1), is the point that the completion of a separable metric space is separable?</p>\n</blockquote>\n<p>That's right, that's why it's the very first thing, it's almost immediate.</p>",
        "id": 211437597,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601245745
    },
    {
        "content": "<p>I suppose immediacy is in the eye of the beholder</p>",
        "id": 211437604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601245791
    },
    {
        "content": "<p>As learning Lean is teaching me :)</p>",
        "id": 211437609,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601245802
    },
    {
        "content": "<p>So I think this would be something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">it_begins</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separable_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">separable_space</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>(not checked in vscode) (updated, thanks <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> )</p>",
        "id": 211437676,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601245876
    },
    {
        "content": "<p><code>instance</code></p>",
        "id": 211437681,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1601245890
    },
    {
        "content": "<p>I suppose it is obvious :P</p>",
        "id": 211437808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1601246049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Jay.20Williams/near/211437808\">said</a>:</p>\n<blockquote>\n<p>I suppose it is obvious :P</p>\n</blockquote>\n<p>All the better, for a beginner!</p>",
        "id": 211437814,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601246072
    },
    {
        "content": "<p>oh, I just meant mathematically</p>",
        "id": 211437821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1601246092
    },
    {
        "content": "<p>and that translates to easy in Lean if you prove the right lemmas</p>",
        "id": 211437836,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1601246123
    },
    {
        "content": "<p>which is of course the hard part</p>",
        "id": 211437843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601246142
    },
    {
        "content": "<p>Yes, this is definitely a great start.  I'm trying it out now and discovering that I don't quite have my Lean environment set up correctly.  The fun part of programming ha.  But I will work on this, thanks!</p>",
        "id": 211437896,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601246185
    },
    {
        "content": "<p>And then when you succeed you should PR it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <br>\n<a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a></p>",
        "id": 211438053,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601246468
    },
    {
        "content": "<p>And see if it works for a <code>[emetric_space]</code> instead of a <code>[metric_space]</code>.</p>",
        "id": 211438419,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601247039
    },
    {
        "content": "<p>BTW, do we use <code>[separable_space]</code> or <code>[second_countable_topology]</code> as a \"normal form\" of assumption for a <code>[emetric_space]</code>?</p>",
        "id": 211438436,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601247094
    },
    {
        "content": "<p>Measure theory assumes <code>[second_countable_topology]</code> in many lemmas and definitions.</p>",
        "id": 211438444,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601247120
    },
    {
        "content": "<p>Actually, this is a bit embarrassing, but I can't figure out the <code>import</code> for <code>separable_space</code>.  I see that the definition is in <code>topology/bases.lean</code>, but when I try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.completion</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.bases</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">it_begins</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separable_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">separable_space</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>I get red squigglies underneath <code>separable_space</code>.</p>",
        "id": 211438482,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601247126
    },
    {
        "content": "<p>Please add a newline after the first \"```\"</p>",
        "id": 211438506,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601247207
    },
    {
        "content": "<p>In a metrizable space separability and second countability are equivalent, so I'm fine with either.</p>",
        "id": 211438508,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601247209
    },
    {
        "content": "<p>Possibly it is in the <code>topological_space</code> namespace</p>",
        "id": 211438512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601247232
    },
    {
        "content": "<p>So you can either write <code>topological_space.separable_space</code>, or <code>open topological_space</code></p>",
        "id": 211438555,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601247257
    },
    {
        "content": "<p>That worked, though it turns out I have the wrong import for the completion... one thing at a time I guess <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211438575,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601247326
    },
    {
        "content": "<p>I think that we don't have many theorems about metrizable topological spaces because we didn't have to work with metrizable spaces with no natural <code>[emetric_space]</code> structure.</p>",
        "id": 211438576,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601247326
    },
    {
        "content": "<p>Try <code>topology/metric_space/completion</code>.</p>",
        "id": 211438619,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601247365
    },
    {
        "content": "<p>Certainly the important examples in descriptive set theory all have natural metrics (Baire space, Cantor space, the reals...)</p>",
        "id": 211438622,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601247370
    },
    {
        "content": "<p>It's easy to define (untested)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">metrizable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">metrizable</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">emetric_space</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β.to_topological_space</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>But every proof about <code>[metrizable α]</code> will start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">emetric_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211438717,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601247546
    },
    {
        "content": "<p>Here <code>...</code> should be a function that returns a <code>emetric_space α</code> instance such that <code>emetric_space.to_topological_space = h</code> is a definitional equality.</p>",
        "id": 211438977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601247899
    },
    {
        "content": "<p>This still doesn't like <code>completion</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.completion</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">it_begins</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separable_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">separable_space</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>I've tried a few variants, including with some additional stuff in <code>open</code>, but nothing is working... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 211438988,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601247930
    },
    {
        "content": "<p>Let me guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/completion.completion\">docs#completion.completion</a></p>",
        "id": 211439072,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601248058
    },
    {
        "content": "<p>So, it should be <code>open topological_space uniform_space</code></p>",
        "id": 211439149,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601248180
    },
    {
        "content": "<p>oh geez, I thought I tried that one.  Thanks!</p>",
        "id": 211439207,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601248240
    },
    {
        "content": "<p>I'm going to have to read up on <code>open</code>, sounds like.</p>",
        "id": 211439215,
        "sender_full_name": "Jay Williams",
        "timestamp": 1601248263
    },
    {
        "content": "<p>You won't need to read very much. :) When you need a lemma or definition, check the docs (or scroll up in the source) to find the <code>namespace</code> it's in, then <code>open</code> that namespace in your code.  Here: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion\">docs#uniform_space.completion</a> .</p>",
        "id": 211439512,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601248750
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"346858\">@Jay Williams</span>  there's a bad omission in the stub I gave you -- should have been (note the <code>⟨ ... ⟩</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.completion</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">uniform_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">it_begins</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separable_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">separable_space</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kd\">end</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 211439787,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601249223
    },
    {
        "content": "<p>I think that the implication should work for any uniform embedding of uniform spaces (just use the image of a fence sequence)</p>",
        "id": 211439982,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601249581
    },
    {
        "content": "<p>Or even for a dense embedding of topological spaces</p>",
        "id": 211440063,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601249718
    },
    {
        "content": "<p>Is it possible that a complete metric space is equivalent to a complete uniform space?</p>",
        "id": 211447712,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601262254
    },
    {
        "content": "<p>What exactly do you mean?</p>",
        "id": 211449355,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601264936
    },
    {
        "content": "<p>So, one of the aspects of a Polish space is the existence of a complete metric that’s compatible with the topology</p>",
        "id": 211449759,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601265572
    },
    {
        "content": "<p>I went looking for the definition of a complete metric in mathlib, but I only found <code>complete space</code> which is a uniform space definition</p>",
        "id": 211449824,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601265618
    },
    {
        "content": "<p>I guess I have two questions:</p>",
        "id": 211449829,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601265636
    },
    {
        "content": "<p>If you have a metric space, is completeness of that metric space equivalent to completeness of the uniform space?</p>",
        "id": 211449863,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601265702
    },
    {
        "content": "<p>If you have a complete uniform space that doesn’t necessarily come from a metric, does there exist a (not necessarily unique) complete metric inducing the same topology?</p>",
        "id": 211449919,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601265776
    },
    {
        "content": "<p>(I know some things about basic descriptive set theory, but have yet to study Lean’s topology and analysis libraries, and know little about uniform spaces)</p>",
        "id": 211449937,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601265832
    },
    {
        "content": "<p>We define completeness in terms of <code>uniform_space</code> structure. Completeness of <code>(e)metric_space</code>s uses this definition. For a metric space, it is equivalent to the usual definition, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.complete_of_cauchy_seq_tendsto\">docs#metric.complete_of_cauchy_seq_tendsto</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.cauchy_seq_iff\">docs#metric.cauchy_seq_iff</a></p>",
        "id": 211454671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601273156
    },
    {
        "content": "<p>Wiki says the following about metrizability: <a href=\"https://en.wikipedia.org/wiki/Nagata%E2%80%93Smirnov_metrization_theorem\">https://en.wikipedia.org/wiki/Nagata%E2%80%93Smirnov_metrization_theorem</a></p>",
        "id": 211454742,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601273279
    },
    {
        "content": "<p>Some precisions:</p>\n<ul>\n<li>I think a complete uniform space is not necessarily metrizable, even if it is separated</li>\n<li>We don't have this Nagata-Smirnov theorem, and I don't think anyone is interested in this up to now</li>\n<li>We do have <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/uniform_space/compact_separated.html\">https://leanprover-community.github.io/mathlib_docs/topology/uniform_space/compact_separated.html</a> which is somewhat in the same thread</li>\n</ul>",
        "id": 211460923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601279216
    }
]