[
    {
        "content": "<p>I want to define the <a href=\"https://www.wikiwand.com/en/Kronecker_delta\">https://www.wikiwand.com/en/Kronecker_delta</a> on the complex numbers: it is the function which maps 0 to 1 and everything else to 0. I want it in the form <code>def kron_del (z : ℂ) : ℂ :=</code>, but a more general form in Mathlib might be good. Please help. :). I need it for my pet formalization project.</p>",
        "id": 228195069,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614587164
    },
    {
        "content": "<p>Looking at <a href=\"https://leanprover.github.io/introduction_to_lean/introduction_to_lean.pdf\">https://leanprover.github.io/introduction_to_lean/introduction_to_lean.pdf</a>, specifically p. 29 there: you might want to try an <code>if ... then ... else</code>.</p>",
        "id": 228196274,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614588011
    },
    {
        "content": "<p><code>pi.single 0 1 z</code>? (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.single\">docs#pi.single</a>)</p>",
        "id": 228196292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614588022
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">kron_del</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"k\">#eval</span> <span class=\"n\">kron_del</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>results in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">classical.dec_eq'</span>\n</code></pre></div>\n<p>This is the first time I have seen this error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">kron_del</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">pi.single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">z</span>\n<span class=\"k\">#eval</span> <span class=\"n\">kron_del</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>results in the same error. Maybe #eval is what is broken?</p>",
        "id": 228197349,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614588648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385848\">@Mark Gerads</span> try it with integers instead of complex numbers</p>",
        "id": 228197418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614588691
    },
    {
        "content": "<p>You can't compute with arbitrary complex numbers, and hence Lean can't compute with any complex number</p>",
        "id": 228197442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614588719
    },
    {
        "content": "<p>It works now. Thanks. I suppose I only need for the integers so far anyway.</p>",
        "id": 228197925,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614588978
    }
]