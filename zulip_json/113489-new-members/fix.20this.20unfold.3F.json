[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">‚àà</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">TEST</span>\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"err\">ùîΩ</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">succ</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"err\">Œõ</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span>  <span class=\"err\">‚àà</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">SSC</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">emptyset_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬¨</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"err\">Œõ</span> <span class=\"o\">))</span>\n <span class=\"c\">/-</span><span class=\"cm\"> end of class definition because next line doesn&#39;t declare a member -/</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"kn\">infix</span>  <span class=\"err\">‚àà</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span>\n\n<span class=\"n\">def</span> <span class=\"n\">SSC</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"bp\">‚Üí</span><span class=\"n\">M</span> <span class=\"o\">:=</span>  <span class=\"bp\">Œª</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"err\">Œõ</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ssc_members</span><span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"bp\">¬¨</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">SSC</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">X</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n     <span class=\"n\">unfold</span> <span class=\"n\">SSC</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n\n <span class=\"kn\">end</span> <span class=\"n\">TEST</span>\n</code></pre></div>\n\n\n<p>Why won't this unfold work?   if you comment it out there are no errors.</p>",
        "id": 209353576,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599550293
    },
    {
        "content": "<p><code>unfold</code> takes a name, not an expression</p>",
        "id": 209353861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599550490
    },
    {
        "content": "<p>so just write <code>unfold SSC</code></p>",
        "id": 209353866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599550498
    },
    {
        "content": "<p>well, that didn't work,  because SSC wasn't defined,  I tried to define (SSC X) which I mis-wrote as SSC(X),  but you can only define an identifier.</p>",
        "id": 209354187,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599550766
    },
    {
        "content": "<p>To lean those are the same thing</p>",
        "id": 209354554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599551013
    },
    {
        "content": "<p><code>def SSC (X : M) : M := ...</code> is the same as <code>def SSC : M -&gt; M := \\lam x, ...</code></p>",
        "id": 209354603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599551043
    },
    {
        "content": "<p>OK,  but before I got a whole screenful of errors, and now I only get<br>\nunfold tactic failed, SSC does not have equational lemmas nor is a projection</p>",
        "id": 209354714,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599551117
    },
    {
        "content": "<p>if you write <code>rw SSC</code> you get a more helpful error message:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ambiguous</span> <span class=\"n\">overload</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"n\">SSC</span>\n  <span class=\"n\">Model</span><span class=\"bp\">.</span><span class=\"n\">SSC</span>\n</code></pre></div>",
        "id": 209354856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599551202
    },
    {
        "content": "<p>The problem is that <code>Model</code> has a field <code>SSC</code>, and you wrote <code>open Model</code> so you can refer to it as <code>SSC</code>, but then you defined another (different) definition <code>SSC</code> and lean doesn't know which you mean</p>",
        "id": 209354924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599551275
    },
    {
        "content": "<p>I thought that after open Model,   SSC would be Model.SSC.</p>",
        "id": 209355013,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599551336
    },
    {
        "content": "<p>It's both</p>",
        "id": 209355024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599551344
    },
    {
        "content": "<p>because you defined another SSC and now there is a name clash</p>",
        "id": 209355050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599551362
    },
    {
        "content": "<p>The <code>SSC</code> in the theorem statement is <code>Model.SSC</code>, which lean was able to figure out because the <code>M</code> in <code>_root_.SSC</code> is explicit</p>",
        "id": 209355062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599551374
    },
    {
        "content": "<p>You should write either <code>_root_.SSC</code> or <code>Model.SSC</code> to disambiguate, or better yet remove the ambiguity</p>",
        "id": 209355146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599551416
    },
    {
        "content": "<p>What is _root_?</p>",
        "id": 209355174,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599551443
    },
    {
        "content": "<p>it's a fake namespace you can use to explicitly say \"I want the one in the root namespace\"</p>",
        "id": 209355204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599551469
    },
    {
        "content": "<p>whose name is just plain <code>SSC</code></p>",
        "id": 209355213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599551477
    },
    {
        "content": "<p>OK thanks,  now I understand what happened here.</p>",
        "id": 209355360,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599551569
    },
    {
        "content": "<p>in the example, within the class I \"declared\"  SSC:M-&gt;M.   But I did not \"define\" it,  i.e. gave no rule to determine its values.<br>\nNow,  If I did that within the class all would be well.  But for some irrelevant reason, I want to do it OUTSIDE the class.  If I try to change<br>\nthe definition outside the class (leaving the declaration inside) I get \"invalid definition, a declaration named 'Model.SSC' has already been declared\".<br>\nSo Lean doesn't seem to distinguish between declaration and definition, and as posted, the code defines a SECOND SSC, this time in <br>\nthe \"root namespace\".    It seems like theoretically every instance M of the class Model could have its own SSC and that one could have different definitions in different M's,  that should be allowed by not giving the definition inside the class but only the declaration.  But that didn't work out:<br>\ninstead Lean now has two functions called SSC,  one declared as part of Model,  but with no \"body\",  and one only working on the instance M,<br>\nbut utterly different than the SSC defined inside class Model.    So I failed to tell Lean,  \"Now I am supplying a definition for Model.SSC that will apply <br>\nin this instance of the class.\"    Now my question is,   is there a way to do that?   Or should I just get over the idea of doing that and define SSC within the class?</p>",
        "id": 209396537,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599576375
    },
    {
        "content": "<p>The structure <em>defines</em> a single function, called <code>Model.SSC</code>, which has the type <code>Model.SSC : \\all (M : Type) [Model M], M -&gt; M</code>. It is an actual definition - it is basically a projection function, because <code>Model M</code> is a tuple of a bunch of things and this extracts one component</p>",
        "id": 209401782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599578384
    },
    {
        "content": "<p>Different instances of <code>Model</code> will tuple up different things, and so the effect of <code>Model.SSC</code> applied to them will give different projections. But there is nevertheless only one function <code>Model.SSC</code> defined once and for all</p>",
        "id": 209402035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599578482
    },
    {
        "content": "<p>I would give you more pointed advice but I'm still not exactly sure what your aim is. What is <code>SSC</code> supposed to mean, and what are you trying to get out of it?</p>",
        "id": 209402250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599578575
    }
]