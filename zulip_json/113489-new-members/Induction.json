[
    {
        "content": "<p>Suppose I have the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">lambda</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">is_subterm</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"c1\">-- x ∈ Sub (x)</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">),</span> <span class=\"n\">is_subterm</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- e1 ∈ Sub ((e1 e2))</span>\n<span class=\"bp\">|</span> <span class=\"n\">app_l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">),</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e1</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- e2 ∈ Sub ((e1 e2))</span>\n<span class=\"bp\">|</span> <span class=\"n\">app_r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">),</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e2</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- (e1 e2) ∈ Sub ((e1 e2))</span>\n<span class=\"bp\">|</span> <span class=\"n\">app_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">),</span> <span class=\"n\">is_subterm</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- e ∈ Sub ((λ x . e))</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">),</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- (λ x . e) ∈ Sub ((λ x . e))</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">),</span> <span class=\"n\">is_subterm</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is it possible to prove that is_subterm does not hold for something? For example, could one prove that if <code>x</code> is a lambda variable, then the only subterm of <code>x</code> is <code>x</code> itself?</p>",
        "id": 154250457,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546533657
    },
    {
        "content": "<p>Doesn't it contradict <code>is_subterm.abs</code>?</p>",
        "id": 154250562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546533763
    },
    {
        "content": "<p>Are you saying that the statement \"if <code>x</code> is a lambda variable, then the only subterm of <code>x</code> is <code>x</code> itself\", does not hold because of <code>is_subterm.abs</code>? I'm not sure I see why that would be the case?</p>",
        "id": 154250752,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546533995
    },
    {
        "content": "<p>This is provable (hint: try the <code>cases</code> tactic):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_subterm</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 154250754,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1546533998
    },
    {
        "content": "<p>You may need to be a little careful about how you state it, but this is a good place to take advantage of the equation compiler. It will discharge the structurally impossible cases for you.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">),</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">is_subterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>(As Gabriel points out, <code>cases</code> will do the same thing.)</p>",
        "id": 154250765,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546534014
    },
    {
        "content": "<p>oh I missed \"variable\" in \"lambda variable\", it's on the next line here</p>",
        "id": 154250796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546534082
    },
    {
        "content": "<p>Thank you. I will have to do some reading on tactics and the equation compiler.</p>",
        "id": 154251107,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546534362
    },
    {
        "content": "<p>I'm still learning how induction is handled in Lean. Does the inductive definition create theorems related to what is not an object of the defined type?</p>",
        "id": 154251985,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546535348
    },
    {
        "content": "<p>The only objects of the defined type are the ones that can be defined using the constructors. This is a \"theorem\" that's captured by the type's induction principle. In your case, look at <code>#check is_subterm.cases_on </code>.</p>",
        "id": 154252289,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546535652
    },
    {
        "content": "<p>should we use <code>nat</code> instead of <code>string</code>?</p>",
        "id": 154253410,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546537023
    },
    {
        "content": "<p>Is the following what Gabriel means by the <code>cases</code> tactic?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">e</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">),</span> <span class=\"n\">is_subterm</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n    <span class=\"k\">assume</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>I'm not sure how to proceed from here.</p>",
        "id": 154254942,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546538582
    },
    {
        "content": "<p>well by the <code>cases</code> tactic he means <code>by cases e</code></p>",
        "id": 154254968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546538632
    },
    {
        "content": "<p>but I don't know if you're familiar with using tactics</p>",
        "id": 154254973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546538639
    },
    {
        "content": "<p>Oh. No, I'm not.</p>",
        "id": 154255034,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546538663
    },
    {
        "content": "<p>Actually I mean by cases on the <code>is_subterm</code> proof:<br>\n<code>begin intro h, cases h, end</code>  (you can easily solve the remaining goal)</p>",
        "id": 154255194,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1546538796
    },
    {
        "content": "<p>why bother making <code>is_subterm</code> inductive</p>",
        "id": 154265785,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546548925
    },
    {
        "content": "<p>I thought it would have to be. What is the alternative?</p>",
        "id": 154265902,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546549069
    },
    {
        "content": "<p>well it isn't inductive (i.e. recursive) so maybe just make it a def or something</p>",
        "id": 154266764,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546549993
    },
    {
        "content": "<p>Hmm. I was trying to formalize the recursive definition of the set of all subterms of a lambda expression given by definition 1.3.5 here: <a href=\"https://play.google.com/books/reader?id=orsrBQAAQBAJ&amp;hl=en_US&amp;pg=GBS.PA5.w.4.0.36\" target=\"_blank\" title=\"https://play.google.com/books/reader?id=orsrBQAAQBAJ&amp;hl=en_US&amp;pg=GBS.PA5.w.4.0.36\">https://play.google.com/books/reader?id=orsrBQAAQBAJ&amp;hl=en_US&amp;pg=GBS.PA5.w.4.0.36</a><br>\nDid I do this wrong?</p>",
        "id": 154267466,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546550727
    },
    {
        "content": "<p>You're missing the recursive calls. The set of subterms of (M N) is the union of the subterms of M, the subterms of N, and the singleton set {(M N)}.</p>",
        "id": 154267703,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546550941
    },
    {
        "content": "<p>In your definition, (M N) only has three subterms: M, N, and (M N).</p>",
        "id": 154267747,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546550980
    },
    {
        "content": "<p>This is a perfectly good situation to use an inductive predicate, but the one you wrote isn't the one you wanted.</p>",
        "id": 154267858,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546551055
    },
    {
        "content": "<p>Does adding the following fix it?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"n\">app_l&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app_r&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">e1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Also, is there a way to formalize this as a set, similar to the definition in the book?</p>",
        "id": 154269430,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546552583
    },
    {
        "content": "<p>Sure, you can just write a recursive function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">subterms</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"c1\">-- ...</span>\n</pre></div>\n\n\n<p>I'm not sure why they use multisets instead of sets though.</p>",
        "id": 154269672,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1546552810
    },
    {
        "content": "<p>You could add those, and you can also reduce some of the others into one case.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">is_subterm</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_subterm</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">app_l</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_subterm</span> <span class=\"n\">x</span> <span class=\"n\">e₁</span> <span class=\"bp\">→</span> <span class=\"n\">is_subterm</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app_r</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_subterm</span> <span class=\"n\">x</span> <span class=\"n\">e₂</span> <span class=\"bp\">→</span> <span class=\"n\">is_subterm</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_subterm</span> <span class=\"n\">x</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"n\">is_subterm</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">s</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 154269810,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546552974
    },
    {
        "content": "<p>and rename <code>self</code> into <code>refl</code>...</p>",
        "id": 154270313,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546553573
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_subterm</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"n\">e₁</span> <span class=\"bp\">||</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">s</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">s</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e</span> <span class=\"n\">e&#39;</span>\n</pre></div>",
        "id": 154270442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546553747
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_subterm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e₁</span> <span class=\"bp\">||</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">s</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">s</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">is_subterm</span> <span class=\"n\">e&#39;</span>\n</pre></div>",
        "id": 154270505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546553798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Cool. Could something similar be done for the set of all lambda terms?</p>",
        "id": 154270926,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1546554266
    },
    {
        "content": "<p>I was wondering what the error \"nested occurrence 'and (sub_is_def P x N) (not (has_mem.mem.{0 0} var (set.{0} var) (set.has_mem.{0} var) y (FV N)))' contains variables that are not parameters\" means in the last definition of:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre_term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">pre_term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">pre_term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">pre_term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FV</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">set</span> <span class=\"n\">var</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"o\">(</span> <span class=\"n\">P</span> <span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"o\">(</span> <span class=\"n\">P</span> <span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">var</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">pre_term</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_same</span> <span class=\"o\">:</span>\n    <span class=\"k\">forall</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"o\">),</span>\n    <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_diff</span> <span class=\"o\">:</span>\n    <span class=\"k\">forall</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"o\">),</span>\n    <span class=\"n\">not</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span>\n    <span class=\"k\">forall</span> <span class=\"o\">(</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"o\">),</span>\n    <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">:</span>\n    <span class=\"k\">forall</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"o\">),</span>\n    <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">:</span>\n    <span class=\"k\">forall</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"o\">),</span>\n    <span class=\"n\">not</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span> <span class=\"n\">N</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n</pre></div>\n\n\n<p>It seems to be related to the <code>/\\</code> in <code>abs_diff</code>.</p>",
        "id": 160262747,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552019186
    },
    {
        "content": "<p><code>sub_is_def</code> is embedded in a complicated way in the last proposition</p>",
        "id": 160268512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552028413
    },
    {
        "content": "<p>you have to make it a manifestly positive occurrence:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre_term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FV</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">var</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_same</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff_nel</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n</pre></div>",
        "id": 160268710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552028780
    },
    {
        "content": "<p>Thank you. What does a \"manifestly positive occurrence\" mean?</p>",
        "id": 160349574,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552105337
    },
    {
        "content": "<p>The definition of an inductive specification in lean requires that all constructors for the inductive type <code>T</code> have the form <code>A1 -&gt; A2 -&gt; ... -&gt; T</code> where each <code>A</code> that mentions <code>T</code> has the form <code>B1 -&gt; B2 -&gt; ... T</code> (ignoring indexes). In other words, the only places the type <code>T</code> is allowed to appear is on the far right hand side (the constructor should produce an element of type <code>T</code>), and on the right of the left hand side (the constructors may take arguments of type <code>T</code> or arguments that are functions producing <code>T</code>). This is called \"strict positivity\". <code>T</code> is not allowed to appear anywhere else, so <code>mk : (T -&gt; A) -&gt; T</code> is not allowed, nor is <code>mk : ((T -&gt; A) -&gt; A) -&gt; T</code> or <code>foo T -&gt; T</code> or <code>A /\\ (T \\/ B) -&gt; T</code>. The last two cases are called nested inductive types, and lean can sometimes compile them to primitive inductive types, but they aren't built in.</p>",
        "id": 160350668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552107136
    },
    {
        "content": "<p>I think I sort of understand. Thank you.</p>",
        "id": 160351703,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552108819
    },
    {
        "content": "<p>Is it possible to have conditions in the constructors for inductively defined functions? For example, how would one define the lambda substitution <code>x [ y := N ]</code>, which depends on whether <code>x = y</code> or <code>x != y</code>?</p>",
        "id": 160352615,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552110611
    },
    {
        "content": "<p>you can use <code>if</code></p>",
        "id": 160352684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552110765
    },
    {
        "content": "<p>Is there a description of using <code>if</code> in the doc?</p>",
        "id": 160352753,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552110922
    },
    {
        "content": "<p><code>if p then a else b</code> returns <code>a</code> if <code>p</code> is true and <code>b</code> if false</p>",
        "id": 160352800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552110970
    },
    {
        "content": "<p>In inductive predicates like the above, it's a bit nicer to have separate constructors for the true and false cases, but for recursive functions we usually use <code>if</code></p>",
        "id": 160352815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552111047
    },
    {
        "content": "<p>For this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I get:<br>\nfailed to synthesize type class instance for<br>\nsub : pre_term → var → pre_term → pre_term,<br>\ny x : var,<br>\nN : pre_term<br>\n⊢ decidable (pre_term.var x = pre_term.var y)</p>",
        "id": 160353287,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552111980
    },
    {
        "content": "<p>you can say <code>if x = y then ...</code></p>",
        "id": 160353493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552112402
    },
    {
        "content": "<p>I see. I still get the same error.</p>",
        "id": 160353540,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552112506
    },
    {
        "content": "<p>What is <code>var</code>?</p>",
        "id": 160353603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552112625
    },
    {
        "content": "<p><code>inductive var : Type</code></p>",
        "id": 160353647,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552112662
    },
    {
        "content": "<p>there are no vars?</p>",
        "id": 160353648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552112668
    },
    {
        "content": "<p>I'm not sure what you mean?</p>",
        "id": 160353655,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552112696
    },
    {
        "content": "<p>that declaration means <code>var</code> is empty</p>",
        "id": 160353663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552112705
    },
    {
        "content": "<p>you can put <code>@[derive decidable_eq]</code> to automatically derive a decidable instance for <code>var</code></p>",
        "id": 160353673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552112731
    },
    {
        "content": "<p>Oh. Should I have defined <code>var</code> differently?</p>",
        "id": 160353722,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552112774
    },
    {
        "content": "<p>what do you want it to be? One reasonable choice is <code>def var := nat</code></p>",
        "id": 160353727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552112802
    },
    {
        "content": "<p>I'm not sure. What would make the most sense for the lambda calculus? Maybe a character or a string?</p>",
        "id": 160353784,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552112906
    },
    {
        "content": "<p>that works too</p>",
        "id": 160353785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552112923
    },
    {
        "content": "<p>But you have to be careful with how you handle bound variable renaming if you don't use de bruijn indices</p>",
        "id": 160353795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552112956
    },
    {
        "content": "<p>for example, <code>subst</code> can either rename variables, or it can be partial</p>",
        "id": 160353800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552112985
    },
    {
        "content": "<p>having it be a char seems like a bad idea because if the set of variables is finite then weird things happen</p>",
        "id": 160353866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552113083
    },
    {
        "content": "<p>I think it is partial in the book I am following for this. That is, it only defines substitution if it is capture avoiding.</p>",
        "id": 160353867,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552113101
    },
    {
        "content": "<p>if your book uses explicit names then <code>string</code> works</p>",
        "id": 160353920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552113132
    },
    {
        "content": "<p>but you will need to prove a renaming lemma at some point, which will require you to know that <code>var</code> is infinite</p>",
        "id": 160353922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552113174
    },
    {
        "content": "<p>Ah. yes.</p>",
        "id": 160353941,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552113211
    },
    {
        "content": "<p>I changed to <code>def var := string</code>.<br>\nIf I have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>Then I get:<br>\ntype mismatch at application<br>\n  ite (x = y) N y<br>\nterm<br>\n  y<br>\nhas type<br>\n  var<br>\nbut is expected to have type<br>\n  pre_term<br>\nIf I go back to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Then I still get:<br>\nfailed to synthesize type class instance for<br>\nsub : pre_term → var → pre_term → pre_term,<br>\ny x : var,<br>\nN : pre_term<br>\n⊢ decidable (pre_term.var x = pre_term.var y)</p>",
        "id": 160354120,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552113544
    },
    {
        "content": "<p>I see. I still needed <code>@[derive decidable_eq]</code>.</p>",
        "id": 160354192,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552113711
    },
    {
        "content": "<p>I get the same kind of error for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"k\">then</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>failed to synthesize type class instance for<br>\nsub : pre_term → var → pre_term → pre_term,<br>\nP Q : pre_term,<br>\nx : var,<br>\nN : pre_term<br>\n⊢ decidable (sub_is_def P x N ∧ sub_is_def Q x N)</p>",
        "id": 160354739,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552114746
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n</blockquote>\n<p>you are getting a type error because of the <code>y</code> at the end</p>",
        "id": 160355540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552116297
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"k\">then</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</pre></div>\n\n\n</blockquote>\n<p>Here you don't want to have the <code>if</code> at all. You have already defined the domain of definition of <code>sub</code>, so here you can just do the easy thing - </p>\n<div class=\"codehilite\"><pre><span></span>| (pre_term.app P Q) x N := pre_term.app (sub P x N) (sub Q x N)\n</pre></div>",
        "id": 160355670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552116497
    },
    {
        "content": "<p>Alternatively, you can have <code>sub</code> itself be a (partial) functional relation rather than a recursive function</p>",
        "id": 160355685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552116548
    },
    {
        "content": "<p>that is, define <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>[</mo><mi>x</mi><mo>:</mo><mo>=</mo><mi>N</mi><mo>]</mo><mo>=</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P[x:=N]=Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">[</span><span class=\"mord mathit\">x</span><span class=\"mrel\">:</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">]</span><span class=\"mrel\">=</span><span class=\"mord mathit\">Q</span></span></span></span> as an inductive predicate on four arguments</p>",
        "id": 160355693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552116592
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">is_subst</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_same</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span> <span class=\"n\">Q&#39;</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_subst</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">Q&#39;</span>  <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">P&#39;</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Q&#39;</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff_nel</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P&#39;</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 160355886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552116850
    },
    {
        "content": "<p>Are you saying that whether <code>P x N</code> and <code>Q x N</code> are defined is already somehow part of the definition of <code>sub</code>?</p>",
        "id": 160355900,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552116908
    },
    {
        "content": "<p>I suspect that it will be easier to work with the relation \"the substitution of N for x in P is Q\" rather than the conjunction of \"the substitution is defined\" and \"the substitution is Q\"</p>",
        "id": 160355960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552117007
    },
    {
        "content": "<p>I have been attempting to follow how the book I am going through does it, so that I can prove the theorems in the same manner. I want to improve the readability of the book for myself and others.</p>",
        "id": 160356021,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552117116
    },
    {
        "content": "<p>It's a little circular. Reading the book to learn about the theory behind Lean, and using Lean to learn the book.</p>",
        "id": 160356081,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552117209
    },
    {
        "content": "<p>In this instance I am formalizing the result of this question: <a href=\"https://math.stackexchange.com/questions/3109334/formal-definition-of-substitution-being-defined-in-type-free-lambda-calculus?noredirect=1&amp;lq=1\" target=\"_blank\" title=\"https://math.stackexchange.com/questions/3109334/formal-definition-of-substitution-being-defined-in-type-free-lambda-calculus?noredirect=1&amp;lq=1\">https://math.stackexchange.com/questions/3109334/formal-definition-of-substitution-being-defined-in-type-free-lambda-calculus?noredirect=1&amp;lq=1</a></p>",
        "id": 160356150,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552117354
    },
    {
        "content": "<p>In the case of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>what will happen if I pass a pre_term for <code>P</code> or <code>Q</code> to the function for which the substitution is not defined?</p>",
        "id": 160356479,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552117998
    },
    {
        "content": "<p>you get garbage</p>",
        "id": 160356646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552118333
    },
    {
        "content": "<p>but you get garbage no matter what with the \"total function\" / \"domain of definition\" approach</p>",
        "id": 160356659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552118374
    },
    {
        "content": "<p>The four place relation avoids this</p>",
        "id": 160356664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552118390
    },
    {
        "content": "<p>I see. I still hate to depart from the book, since many of the proofs involve showing that a given substitution is defined.</p>",
        "id": 160356931,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552118757
    },
    {
        "content": "<p>I think using:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"n\">string</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre_term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FV</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">var</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_same</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff_nel</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>may be closest to what they have.</p>",
        "id": 160357096,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552118904
    },
    {
        "content": "<p>Although, yes, I guess keeping sub_is_def and adding the four place relation is about the same.</p>",
        "id": 160357292,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552119318
    },
    {
        "content": "<p>What does the syntax <code>(P.app Q)</code>mean? Why that and not <code>(pre_term.app P Q)</code>?</p>",
        "id": 160377957,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552155716
    },
    {
        "content": "<p>I think this is an example of \"dot notation\". There's a thread on it here: <a href=\"#narrow/stream/113488-general/topic/dot.20notation.20confusion\" title=\"#narrow/stream/113488-general/topic/dot.20notation.20confusion\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/dot.20notation.20confusion</a></p>",
        "id": 160378143,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1552156014
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 160379095,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552157624
    },
    {
        "content": "<p>I was wondering if someone would mind showing me how to set up the form of proof for the last lemma here (lemma_1_2_5_i). I'm pretty sure I want to do induction on <code>M</code>, but I'm having difficulty figuring out the syntax.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">def</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre_term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FV</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">var</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_of_mem_diff</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mt</span> <span class=\"n\">s1</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s2</span> <span class=\"n\">a1</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_diff</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s1</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">mt</span> <span class=\"n\">s2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s4</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s3</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_and&#39;</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">s4</span> <span class=\"n\">a2</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_3</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">var</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span> <span class=\"n\">lemma_1</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s1</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_4</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">),</span>\n<span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span> <span class=\"n\">mt</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lemma_2</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span>\n\n\n<span class=\"c1\">-- M [ x := N ]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_same</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff_nel</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">is_subst</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_same</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span> <span class=\"n\">Q&#39;</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_subst</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">Q&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P&#39;</span> <span class=\"n\">Q&#39;</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff_nel</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_subst</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P&#39;</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_1_2_5_i</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 162901853,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554809983
    },
    {
        "content": "<p>This is one way. Your induction hypothesis will be called <code>lemma_1_2_5_i</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lemma_1_2_5_i</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 162902578,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554810667
    },
    {
        "content": "<p>Are you familiar with tactic proofs? It's a bit easier to handle these big inductive predicates using <code>induction</code></p>",
        "id": 162902794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554810880
    },
    {
        "content": "<p>something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lemma_1_2_5_i</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"o\">{</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"n\">IH₁</span> <span class=\"n\">IH₂</span> <span class=\"o\">{</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">IH₁</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">FV</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">IH₂</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">FV</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"n\">M</span> <span class=\"n\">IH</span> <span class=\"o\">{</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sub_is_def</span><span class=\"bp\">.</span><span class=\"n\">abs_diff_nel</span> <span class=\"n\">h</span> <span class=\"n\">a1</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 162902814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554810894
    },
    {
        "content": "<p>Mario: No, not that familiar. I'll have to look these commands up. Thank you.<br>\nChris: What does the <code>h</code> in each case correspond to?</p>",
        "id": 162903356,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554811366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span> A proof that <code>x ∉ FV M</code></p>",
        "id": 162903466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554811468
    },
    {
        "content": "<p>Ahh. Thank you.</p>",
        "id": 162903486,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554811500
    },
    {
        "content": "<p>How would I match each case of the inductively defined proposition without tactics? For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 162906492,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554813976
    },
    {
        "content": "<p>Actually, how are each of the cases in sub_is_def matched in the proof that Mario gave?</p>",
        "id": 162907575,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554814898
    },
    {
        "content": "<p>The proof is by induction on <code>M</code>, not <code>sub_is_def</code></p>",
        "id": 162908849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554815828
    },
    {
        "content": "<p>so there is one case for each constructor of <code>pre_term</code></p>",
        "id": 162908877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554815864
    },
    {
        "content": "<p>But it is proving <code>sub_is_def</code>, and in most of the cases I use <code>constructor</code> to pick the appropriate constructor</p>",
        "id": 162908965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554815907
    },
    {
        "content": "<p>What does constructor do?</p>",
        "id": 162908979,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554815925
    },
    {
        "content": "<p>it's basically <code>apply sub_is_def.var_same &lt;|&gt; apply sub_is_def.var_diff &lt;|&gt; ...</code></p>",
        "id": 162909017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554815961
    },
    {
        "content": "<p>Interesting. Thank you.</p>",
        "id": 162910341,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554816855
    },
    {
        "content": "<p>Does the use of the <code>by_cases</code> tactic mean that the proof requires classical reasoning?</p>",
        "id": 163067456,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1554954420
    },
    {
        "content": "<p>The <code>by_cases</code>tactic  needs that the proposition is <code>decidable</code>, and tries to create such an instance by typeclass inference. Decidability can be proven within a theory (like the decidable equality of <code>nat</code>in <code>data/nat/basic.lean</code>: <code>instance : decidable_eq ℕ</code>) or be assumed as a classical axiom. This is the line</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</pre></div>\n\n\n<p>you find in certain files.</p>",
        "id": 163189461,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555075938
    },
    {
        "content": "<p>How is a function with <code>if...then...else</code> used? For example, how would one prove the example in the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre_term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span>\n<span class=\"kn\">variable</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span>\n</pre></div>",
        "id": 163827840,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1555809548
    },
    {
        "content": "<p><code>split_ifs</code> is your friend when you see <code>ite</code> or <code>dite</code> (the functions underneath the <code>if _ then _ else _</code>) in your goal</p>",
        "id": 163827897,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555809618
    },
    {
        "content": "<p>I don't think I see <code>ite</code> or <code>dite</code>? Maybe the goal hasn't been broken down enough yet?</p>",
        "id": 163828103,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1555810003
    },
    {
        "content": "<p>First unfold <code>sub</code>, then you'll see it</p>",
        "id": 163828187,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555810157
    },
    {
        "content": "<p>I'm sorry, I'm new to tactics. Would you mind giving an example? I'd be curious how to use <code>sub</code> without tactics as well.</p>",
        "id": 163828451,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1555810616
    },
    {
        "content": "<p>without tactics:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 163828508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555810727
    },
    {
        "content": "<p>with tactics:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]}</span>\n</pre></div>",
        "id": 163828523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555810774
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 163828654,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1555811010
    },
    {
        "content": "<p>How does the <code>if_pos</code> example know which constructor of <code>sub</code> to use? Can it be explicitly told?</p>",
        "id": 164353852,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1556399614
    },
    {
        "content": "<p>When I clicked on the Induction title it showed two threads, one named INduction at the top and the other named  Induction after.</p>",
        "id": 164353928,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1556399730
    },
    {
        "content": "<p>What's the <code>if_pos</code> example?</p>",
        "id": 164354563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556400810
    },
    {
        "content": "<p>I don't understand your question.</p>",
        "id": 164355710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556402751
    },
    {
        "content": "<p>You know you can hover on terms in VS Code to see their type? Does this sort of technique answer your question?</p>",
        "id": 164355755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556402775
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>Does that answer your question? The left hand side equals the if statement by definition.</p>",
        "id": 164355784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556402867
    },
    {
        "content": "<p>I guess I mean: What is being substituted for what in the definition of <code>if_pos</code> and how does it decide on those particular substitutions? Is there a way in Visual Studio to see what substitutions are being made?</p>",
        "id": 164398291,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1556473225
    },
    {
        "content": "<p>You mean the implicit arguments to if_pos? The stuff in curly brackets?</p>",
        "id": 164402688,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1556479494
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"n\">pre_term</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 164402763,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1556479596
    },
    {
        "content": "<blockquote>\n<p>How does the <code>if_pos</code> example know which constructor of <code>sub</code> to use? Can it be explicitly told?</p>\n</blockquote>\n<p><code>sub</code> doesn't have constructors - it's a recursive definition. So <code>sub (pre_term.var y) x N</code> and <code>if x = y then N else (pre_term.var y)</code> are the same thing from lean's point of view, there is no constructor application to turn one into the other, just definitional unfolding</p>",
        "id": 164402862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556479797
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">if_pos</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">if_pos : ?M_1 → ∀ {α : Sort u_1} {t e : α}, ite ?M_1 t e = t</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">if_pos</span> <span class=\"c1\">-- sometimes output is clearer</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">if_pos : ∀ {c : Prop} [h : decidable c],</span>\n<span class=\"cm\">  c → ∀ {α : Sort u_1} {t e : α}, ite c t e = t</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">if_pos</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 164403801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556481079
    },
    {
        "content": "<p>Of the five inputs to <code>if_pos</code> that you didn't give, four were worked out by just thinking about the types of things, and the value of <code>h : decidable c</code> was supplied by the type class inference system.</p>",
        "id": 164403889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556481169
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">if_pos</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 164403916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556481213
    },
    {
        "content": "<p>I think I understand now. Thank you!</p>",
        "id": 164819584,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1556909118
    },
    {
        "content": "<p>I was wondering if someone might be able to show me how to use the equalities <code>sub P x N = P</code> and <code>sub Q x N = Q</code> to show  that <code>pre_term.app (sub P x N) (sub Q x N) = pre_term.app P Q</code> given</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">pre_term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"c1\">-- if x = y then y [ x := N ] = N else y [ x := N ] = y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- (P Q) [ x := N ] = (P [ x := N ] Q [ x := N ])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- if x = y then ( λ y . P ) [ x := N ] = ( λ y . P ) else ( λ y . P ) [ x := N ] = ( λ y . P [ x := N ] )</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Thank you.</p>",
        "id": 165016513,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557174789
    },
    {
        "content": "<p>Can you post fully working code? It makes everyone's life easier.</p>",
        "id": 165016616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557174866
    },
    {
        "content": "<p>Sure, give me a second.</p>",
        "id": 165016626,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557174881
    },
    {
        "content": "<p>Can you formalise precisely what you want proved as well, rather than just describing it?</p>",
        "id": 165016676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557174937
    },
    {
        "content": "<p>I think this is a minimum working example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre_term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"c1\">-- if x = y then y [ x := N ] = N else y [ x := N ] = y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- (P Q) [ x := N ] = (P [ x := N ] Q [ x := N ])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- if x = y then ( λ y . P ) [ x := N ] = ( λ y . P ) else ( λ y . P ) [ x := N ] = ( λ y . P [ x := N ] )</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 165017689,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557175773
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 165018444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176368
    },
    {
        "content": "<p>Thank you. Do you mind showing how it might be done without tactics?</p>",
        "id": 165018592,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557176471
    },
    {
        "content": "<p><code>#print</code> the proof term? :-/</p>",
        "id": 165018612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176489
    },
    {
        "content": "<p>or you could try the dreaded triangle</p>",
        "id": 165018621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176501
    },
    {
        "content": "<p>Triangle?</p>",
        "id": 165018629,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557176514
    },
    {
        "content": "<p><code>\\t</code></p>",
        "id": 165018640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176522
    },
    {
        "content": "<p><code>eq.subst</code></p>",
        "id": 165018686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176527
    },
    {
        "content": "<p>substituting in what?</p>",
        "id": 165018702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557176541
    },
    {
        "content": "<p>it's a version of <code>rw</code> which works in term mode but never works for me.</p>",
        "id": 165018706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176545
    },
    {
        "content": "<p>in <code>(rlf : pre_term.app P Q = pre_term.app P Q)</code> maybe</p>",
        "id": 165018720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557176564
    },
    {
        "content": "<blockquote>\n<p>substituting in what?</p>\n</blockquote>\n<p>I dunno, I can never get it to work</p>",
        "id": 165018722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176565
    },
    {
        "content": "<p>Anyway, let's not encourage Patrick's masochism here</p>",
        "id": 165018780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557176631
    },
    {
        "content": "<p>it won't work, it will change too many P's</p>",
        "id": 165018836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span> you really need to learn tactic mode</p>",
        "id": 165018843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557176657
    },
    {
        "content": "<p>I think it is more that I like it to be explicit. I guess in this case it is obvious enough.</p>",
        "id": 165018905,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557176716
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ABC</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ABC</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def ABC : ∀ (P Q N : pre_term) (x : var),</span>\n<span class=\"cm\">  sub P x N = P → sub Q x N = Q → pre_term.app (sub P x N) (sub Q x N) = pre_term.app P Q :=</span>\n<span class=\"cm\">λ (P Q N : pre_term) (x : var) (h1 : sub P x N = P) (h2 : sub Q x N = Q),</span>\n<span class=\"cm\">  eq.mpr (id (eq.rec (eq.refl (pre_term.app (sub P x N) (sub Q x N) = pre_term.app P Q)) h1))</span>\n<span class=\"cm\">    (eq.mpr (id (eq.rec (eq.refl (pre_term.app P (sub Q x N) = pre_term.app P Q)) h2)) (eq.refl (pre_term.app P Q)))</span>\n<span class=\"cm\">    -/</span>\n</pre></div>",
        "id": 165018923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176734
    },
    {
        "content": "<p>How nicely explicit!</p>",
        "id": 165018930,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557176748
    },
    {
        "content": "<p>LOL</p>",
        "id": 165018989,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557176768
    },
    {
        "content": "<p>Maybe you can remove a couple of <code>id</code> and still be explicit enough</p>",
        "id": 165019001,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557176787
    },
    {
        "content": "<p>Take a look at mathlib. They love obfuscated one-line term mode proofs -- when they can get them to work. But there are plenty of times in mathlib when they go into tactic mode precisely for reasons such as this. In mathlib the proof would be <code>by rw [h1, h2]</code>. <code>rw</code> is a powerful tactic. Why try emulating it in term mode?</p>",
        "id": 165019065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176844
    },
    {
        "content": "<p>Yeah, I think in this case I'll use the tactic.</p>",
        "id": 165019090,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557176873
    },
    {
        "content": "<p>Yes <code>rw</code> is the tactic mode reason number one in mathlib</p>",
        "id": 165019105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557176882
    },
    {
        "content": "<p>Many of my tactic mode proofs are <code>rw this, change that, rw this, change that, rwa this</code></p>",
        "id": 165019173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176915
    },
    {
        "content": "<p>As Patrick says, it's the number one reason to go into tactic mode.</p>",
        "id": 165019187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176936
    },
    {
        "content": "<p>At least for me. If I could use <code>simp</code> better then this might not be the case -- I am slowly learning how to use it.</p>",
        "id": 165019213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557176954
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ABC</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">H</span>\n</pre></div>\n\n\n<p>Triangle level up</p>",
        "id": 165019579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557177214
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ABC</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Triangle master!</p>",
        "id": 165019650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557177244
    },
    {
        "content": "<p>Hey, that was my proposal!</p>",
        "id": 165019665,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557177259
    },
    {
        "content": "<p>Patrick, do you really think this is more explicit than <code>rw</code>?</p>",
        "id": 165019672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557177278
    },
    {
        "content": "<p>The symms are for some reason crucial</p>",
        "id": 165019678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557177285
    },
    {
        "content": "<p>Ahh</p>",
        "id": 165019685,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557177294
    },
    {
        "content": "<p>and the rfl figured out its own type, to my surprise</p>",
        "id": 165019690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557177299
    },
    {
        "content": "<p>I didn't try</p>",
        "id": 165019707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557177304
    },
    {
        "content": "<p>but honestly, triangle does not scale :-/</p>",
        "id": 165019760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557177346
    },
    {
        "content": "<p>Seems that the triangle by default picks up the first match <em>shrug</em></p>",
        "id": 165019896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557177454
    },
    {
        "content": "<p>Patrick: I think the rewrite works well here. I haven't used tactics enough for it to have occurred to me.</p>",
        "id": 165020194,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557177668
    },
    {
        "content": "<p>If you want to get rid of the <code>symms</code>, you could try <code>eq.substr</code></p>",
        "id": 165022344,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1557179619
    },
    {
        "content": "<p>unfortunately it doesn't have the nice triangle notation like <code>eq.subst</code> does</p>",
        "id": 165022346,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1557179632
    },
    {
        "content": "<p>Given:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre_term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FV</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">var</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n\n\n<span class=\"c1\">-- sub_is_def M x N means M [ x := N ] is defined</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- y [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- P [ x := N ] is defined → Q [ x := N ] is defined → (P Q) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x = y → ( λ y . P ) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x ≠ y → x ∉ FV ( λ y . P ) → ( λ y . P ) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff_nel</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x ≠ y → y ∉ FV ( N ) → P [ x := N ] is defined → ( λ y . P ) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n\n<span class=\"c1\">-- M [ x := N ]</span>\n<span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"c1\">-- if x = y then y [ x := N ] = N else y [ x := N ] = y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- (P Q) [ x := N ] = (P [ x := N ] Q [ x := N ])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- if x = y then ( λ y . P ) [ x := N ] = ( λ y . P ) else ( λ y . P ) [ x := N ] = ( λ y . P [ x := N ] )</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Is the only way to combine <code>sub_is_def</code> and <code>sub</code> to use:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- is_sub M x N L means M [ x := N ] = L</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">is_sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- x = y → y [ x := N ] = N</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_same</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x ≠ y → y [ x := N ] = y</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- P [ x := N ] = P&#39; → Q [ x := N ] = Q&#39; → (P Q) [ x := N ] = (P&#39; Q&#39;)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P&#39;</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q&#39;</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">Q&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P&#39;</span> <span class=\"n\">Q&#39;</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- x = y → ( λ y . P ) [ x := N ] = ( λ y . P )</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- x ≠ y → x ∉ FV ( λ y . P ) → ( λ y . P ) [ x := N ] = ( λ y . P )</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff_nel</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- x ≠ y → y ∉ FV ( N ) → P [ x := N ] = P&#39; → ( λ y . P ) [ x := N ] = ( λ y . P&#39; )</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P&#39;</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P&#39;</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I can not make <code>sub</code> a function only on the domain for which <code>sub_is_def</code> holds?</p>",
        "id": 165431448,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557611820
    },
    {
        "content": "<p>You can make <code>sub (M : pre_term) (x : var) (N : pre_term) : sub_is_def M x N -&gt; pre_term</code>, but I strongly recommend against it</p>",
        "id": 165451853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557644484
    },
    {
        "content": "<p>Why the recommendation against it?</p>",
        "id": 165471311,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1557678598
    },
    {
        "content": "<p>Should I be able to prove the following?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sub_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">is_sub</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">L</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">N</span> <span class=\"o\">]</span> <span class=\"n\">is_def</span> <span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">N</span> <span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Perhaps by induction on <code>M</code>?</p>",
        "id": 166663803,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1558990746
    },
    {
        "content": "<p>what does <code>is_def</code> mean in the first conjunct?</p>",
        "id": 166663823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558990797
    },
    {
        "content": "<p>Sorry, left out the notation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">:=</span><span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"bp\">`</span><span class=\"n\">is_def</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">:=</span><span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">sub</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n</pre></div>",
        "id": 166663917,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1558990888
    },
    {
        "content": "<p>wow that's an ambiguous notation</p>",
        "id": 166663920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558990902
    },
    {
        "content": "<p>Why not just post your full working code?</p>",
        "id": 166663924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558990913
    },
    {
        "content": "<p>it's mostly the same as the code in this thread I think</p>",
        "id": 166663975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558990939
    },
    {
        "content": "<p>Yeah. Here it is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre_term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">FV</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">var</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n\n\n<span class=\"c1\">-- sub_is_def M x N means M [ x := N ] is defined</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- y [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- P [ x := N ] is defined → Q [ x := N ] is defined → (P Q) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x = y → ( λ y . P ) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x ≠ y → x ∉ FV ( λ y . P ) → ( λ y . P ) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff_nel</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x ≠ y → y ∉ FV ( N ) → P [ x := N ] is defined → ( λ y . P ) [ x := N ] is defined</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">sub_is_def</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">:=</span><span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"bp\">`</span><span class=\"n\">is_def</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n\n<span class=\"c1\">-- M [ x := N ]</span>\n<span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"c1\">-- if x = y then y [ x := N ] = N else y [ x := N ] = y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- (P Q) [ x := N ] = (P [ x := N ] Q [ x := N ])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- if x = y then ( λ y . P ) [ x := N ] = ( λ y . P ) else ( λ y . P ) [ x := N ] = ( λ y . P [ x := N ] )</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">:=</span><span class=\"bp\">`</span> <span class=\"n\">N</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">sub</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span>\n\n\n<span class=\"c1\">-- is_sub M x N L means M [ x := N ] = L</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">is_sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- x = y → y [ x := N ] = N</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_same</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">N</span>\n\n<span class=\"c1\">-- x ≠ y → y [ x := N ] = y</span>\n<span class=\"bp\">|</span> <span class=\"n\">var_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- P [ x := N ] = P&#39; → Q [ x := N ] = Q&#39; → (P Q) [ x := N ] = (P&#39; Q&#39;)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P&#39;</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q&#39;</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">Q&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P&#39;</span> <span class=\"n\">Q&#39;</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- x = y → ( λ y . P ) [ x := N ] = ( λ y . P )</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_same</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- x ≠ y → x ∉ FV ( λ y . P ) → ( λ y . P ) [ x := N ] = ( λ y . P )</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff_nel</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- x ≠ y → y ∉ FV ( N ) → P [ x := N ] = P&#39; → ( λ y . P ) [ x := N ] = ( λ y . P&#39; )</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs_diff</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P&#39;</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">P&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">is_sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P&#39;</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sub_iff</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">is_sub</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">L</span> <span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">N</span> <span class=\"o\">]</span> <span class=\"n\">is_def</span> <span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"n\">M</span> <span class=\"o\">[</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">N</span> <span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 166664020,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1558991006
    },
    {
        "content": "<p>seems like this is the wrong question. The answer to \"is this provable\" is either \"no you got the math wrong\" or \"yes this can be formalized\"</p>",
        "id": 166664119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558991109
    },
    {
        "content": "<p>what if the provability is independent of the Lean axioms? :P</p>",
        "id": 166664208,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558991221
    },
    {
        "content": "<p>That would be good to know too :)</p>",
        "id": 166664226,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1558991250
    },
    {
        "content": "<p>do you bring that up in all your intro classes Kenny?</p>",
        "id": 166664232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558991262
    },
    {
        "content": "<p>In maths it's very unlikely that something Kenny saw so far would be even close to being indepedent!</p>",
        "id": 166664290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558991291
    },
    {
        "content": "<p>Maybe I mentioned CH but I bet that's it.</p>",
        "id": 166664292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558991299
    },
    {
        "content": "<p>well, as you know there are several independent statements \"close to the surface\" in lean because MLTT is underdetermined... but this is off topic</p>",
        "id": 166664301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558991336
    },
    {
        "content": "<p>I guess my question is, that it was suggested that I use <code>is_sub</code> instead of the other two, and I was wondering if that is equivalent. I thought maybe this lemma would show that it is, if it is true.</p>",
        "id": 166664401,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1558991443
    },
    {
        "content": "<p>it is true, unless there is some subtle bug in the inductives</p>",
        "id": 166664492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558991552
    },
    {
        "content": "<p>Ok, thank you. I will try to prove it. Probably induction on <code>M</code>?</p>",
        "id": 166664525,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1558991614
    },
    {
        "content": "<p>induction on the predicates</p>",
        "id": 166664594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558991677
    },
    {
        "content": "<p>Hmm, I'm not sure I am familiar with that form of induction.</p>",
        "id": 166664625,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1558991722
    },
    {
        "content": "<p>How would you set that up? Can you use the induction tactic?</p>",
        "id": 166665680,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1558993346
    },
    {
        "content": "<p>Yes. If you have some hypothesis <code>h</code> whose type is an inductive type, then <code>induction h</code> will do some kind of induction on <code>h</code>.</p>",
        "id": 166666382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558994386
    },
    {
        "content": "<p>I guess that is not the case here? Mario suggested induction on the predicates. Maybe that means <code>is_sub.rec_on</code>?</p>",
        "id": 166666576,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1558994662
    },
    {
        "content": "<p>If you are in tactic mode and have <code>h : is_sub (pre_term.var M) x N L</code> then <code>cases h</code> or <code>induction h</code> (or, better, <code>cases h with AAA BBB CCC DDD EEE FFF GGG</code> and then look at the types of what you ended up with and rename accordingly) should work just fine. Yes, they're just applying rec under the hood.</p>",
        "id": 166670155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558998051
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 166670532,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1558998676
    },
    {
        "content": "<p>Should there be induction hypotheses, for instance for the <code>is_sub.app</code> case?</p>",
        "id": 166674042,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1559004364
    },
    {
        "content": "<p>I don't see any under the goal.</p>",
        "id": 166674054,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1559004420
    },
    {
        "content": "<p>Do I need to add an axiom to have <code>( is_sub M x N P ∧ is_sub M x N Q ) → P = Q</code>?</p>",
        "id": 166678003,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1559011055
    },
    {
        "content": "<p>You shouldn't ever have to add axioms.</p>",
        "id": 166692904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559031325
    },
    {
        "content": "<p>Do you know how I might be able to show this?</p>",
        "id": 166757372,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1559076214
    },
    {
        "content": "<p>induction on the first <code>is_sub</code> (generalizing <code>Q</code>), cases on the other</p>",
        "id": 166757513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559076326
    },
    {
        "content": "<p>Thank you. On the proof of the earlier correspondence between is_sub and sub, sub_is_def, when I use cases, I kind of expected induction hypotheses in the goals, but I don't see any. Am I missing something in my understanding of the proof, or in the use of cases?</p>",
        "id": 166758924,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1559077255
    },
    {
        "content": "<p><code>cases</code> is like <code>induction</code> except there are no induction hypotheses</p>",
        "id": 166761422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559079005
    },
    {
        "content": "<p>if you need an IH (and you will in these proofs) use <code>induction</code></p>",
        "id": 166761443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559079022
    },
    {
        "content": "<p>I see. That makes sense. Feeling kind of silly. Thank you.</p>",
        "id": 166761896,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1559079338
    },
    {
        "content": "<p>Nevermind.</p>",
        "id": 167444654,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1559785322
    },
    {
        "content": "<p>I fixed your formatting</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">def</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pre_term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FV</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">var</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_1</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">s1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">mem_union</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">Q</span><span class=\"o\">),</span>\n<span class=\"n\">iff_iff_eq</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">iff_iff_eq</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iff_iff_eq</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">s3</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_2</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">}),</span> <span class=\"k\">from</span> <span class=\"n\">mem_diff</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_iff_not</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"n\">mem_singleton_iff</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"bp\">*</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c1\">-- M [ x := N ]</span>\n<span class=\"n\">def</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span> <span class=\"bp\">→</span> <span class=\"n\">pre_term</span>\n<span class=\"c1\">-- if x = y then y [ x := N ] = N else y [ x := N ] = y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">N</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- (P Q) [ x := N ] = (P [ x := N ] Q [ x := N ])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- if x = y then (λ y . P) [ x := N ] = (λ y . P) else (λ y . P) [ x := N ] = (λ y . P [ x := N ])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">((</span><span class=\"n\">ext_iff</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">a1</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">a2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_1_2_5_ii</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n    <span class=\"n\">induction</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"o\">{</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">IH_1</span> <span class=\"n\">IH_2</span> <span class=\"o\">{</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">IH</span> <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">s1</span> <span class=\"n\">sorry</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">s4</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">lemma_2</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">s3</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">s5</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span> <span class=\"n\">s4</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">s6</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">s2</span> <span class=\"n\">s5</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">s7</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">s8</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s7</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">s6</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"n\">s9</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span> <span class=\"n\">s4</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">s5</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">if_neg</span> <span class=\"n\">s9</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n      <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167445233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559786250
    },
    {
        "content": "<p>The lemma won't work though right? Because I left out the hypothesis that <code>M [ x := N ]</code> is defined? Which is why I should use the <code>is_sub</code> definition?</p>",
        "id": 167446273,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1559787760
    },
    {
        "content": "<p>Here's my attempt at this lemma and the others leading up to it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lemma_1</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"n\">mem_union</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_2</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">FV</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_1_2_5_ii</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">pre_term</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">M</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">IH_1</span> <span class=\"n\">IH_2</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">IH</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">FV</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">FV</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">and_iff_left_of_imp</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">IH_1</span><span class=\"o\">,</span> <span class=\"n\">IH_2</span><span class=\"o\">,</span> <span class=\"n\">and_or_distrib_left</span><span class=\"o\">,</span>\n      <span class=\"n\">or_and_distrib_right</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">left_comm</span><span class=\"o\">,</span> <span class=\"n\">or_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">and_assoc</span><span class=\"o\">,</span> <span class=\"n\">FV</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">FV</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">zy</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zy</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167446280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559787766
    },
    {
        "content": "<p>something goes wrong in the <code>x != y, z = y</code> case of <code>abs</code></p>",
        "id": 167446296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559787804
    },
    {
        "content": "<p>Right. Because I left out the hypothesis that <code>M [ x := N ]</code> is defined? Which is why I should have used the <code>is_sub</code> definition?</p>",
        "id": 167446352,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1559787887
    },
    {
        "content": "<p>yes, that does the trick.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sub_eq_self</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∉</span> <span class=\"n\">FV</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sub</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">M</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">IH_1</span> <span class=\"n\">IH_2</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">IH</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">FV</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_or_distrib</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">IH_1</span> <span class=\"n\">IH_2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">H</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma_1_2_5_ii</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">sub_is_def</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">FV</span><span class=\"o\">],</span>\n  <span class=\"n\">case</span> <span class=\"n\">sub_is_def</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">{</span>\n    <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">FV</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">and_iff_left_of_imp</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">sub_is_def</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">IH1</span><span class=\"o\">,</span> <span class=\"n\">IH2</span><span class=\"o\">,</span> <span class=\"n\">and_or_distrib_left</span><span class=\"o\">,</span>\n      <span class=\"n\">or_and_distrib_right</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">left_comm</span><span class=\"o\">,</span> <span class=\"n\">or_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">sub_is_def</span><span class=\"bp\">.</span><span class=\"n\">abs_same</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">e</span> <span class=\"o\">{</span>\n    <span class=\"n\">subst</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">and_assoc</span><span class=\"o\">,</span> <span class=\"n\">FV</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">sub_is_def</span><span class=\"bp\">.</span><span class=\"n\">abs_diff_nel</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">h</span> <span class=\"n\">hx</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">FV</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_self</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">and_iff_left_of_imp</span> <span class=\"o\">(</span><span class=\"bp\">_∧_</span><span class=\"o\">),</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">sub_is_def</span><span class=\"bp\">.</span><span class=\"n\">abs_diff</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"n\">h</span> <span class=\"n\">hy</span> <span class=\"n\">H</span> <span class=\"n\">IH</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">FV</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">zy</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zy</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167447121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559789138
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 167447619,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1559789829
    },
    {
        "content": "<p>Does this only use induction on <code>H</code> and no induction on <code>M</code>?</p>",
        "id": 167855171,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1560263306
    },
    {
        "content": "<p>What is the principle behind the induction on <code>H</code>? Would anyone have a recommendation for a resource describing this form of induction in general? How are the induction hypotheses determined?</p>",
        "id": 168757915,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1561222834
    },
    {
        "content": "<p>If H is an inductive type, then Lean reads off the so-called recursor from the constructors of the type.</p>",
        "id": 168758204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561223430
    },
    {
        "content": "<p>A good example to think about is nat. It's defined as: zero is a nat, the successor of a nat is a nat, and that's it. So the recursor is \"if you can prove it for zero, and prove it for successors given a proof for all their inputs, you're done.\"</p>",
        "id": 168758216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561223483
    },
    {
        "content": "<p>Another good example is <code>false</code>, the inductive proposition with no constructors. Because there are no constructors, the inductive principle is \"you don't have to check anything and you can get a map from false to P for free\", i.e. the statement that false implies P for all propositions P.</p>",
        "id": 168758273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561223540
    },
    {
        "content": "<p>Maybe read TPIL, the chapter on inductive types?</p>",
        "id": 168758274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561223550
    },
    {
        "content": "<p>I was really excited when I realised that one could do induction on the reals in Lean! And then it turned out that the theorem was: \"if you can prove it for all Cauchy sequences of rationals, you can deduce it for all reals\"!</p>",
        "id": 168758289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561223618
    },
    {
        "content": "<p>In this case <code>H</code> is not a type though right? It is a predicate?</p>",
        "id": 168758384,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1561223768
    },
    {
        "content": "<p>A predicate can be an inductive type</p>",
        "id": 168758628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561224346
    },
    {
        "content": "<p>I'm talking about the recursor attached to a general inductive type. You can do induction on an inductive type and the recursor is the function which does it for you</p>",
        "id": 168758683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561224429
    },
    {
        "content": "<p>I think you can also do induction on a quotient type, you just end up doing things on the bigger type and checking they're constant on equivalence classes</p>",
        "id": 168758688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561224477
    },
    {
        "content": "<p>You can't do induction on a pi type, and that's all the types there is</p>",
        "id": 168758729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561224507
    },
    {
        "content": "<p>Apart from universes, if you want to call theem types, and you can't do induction on them either</p>",
        "id": 168758732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561224542
    },
    {
        "content": "<p>What is the principle for the recursor for an inductive type that is a predicate, in non formal terms? Is there a simple example like nat, but for a predicate?</p>",
        "id": 168758864,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1561224826
    },
    {
        "content": "<p>Just make a simple inductive predicates called X and then do #check @X.rec</p>",
        "id": 168759147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561225381
    },
    {
        "content": "<p>And and or are good ones</p>",
        "id": 168759152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561225392
    },
    {
        "content": "<p>I'm on a bus right now with no access to lean. Aren't these things talked about in TPIL? there's an interesting treatment of them in that coq book logical foundations</p>",
        "id": 168759199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561225460
    },
    {
        "content": "<p>I may have to go back through the section in TPIL. I was looking for other introductory resources as well.</p>",
        "id": 168759636,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1561226347
    },
    {
        "content": "<p>Try and figure out what the recursors for <code>and</code> and <code>or</code> are and then check in Lean.</p>",
        "id": 168764121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561235201
    },
    {
        "content": "<p>Is there a way to combine the following into a single justification for the second line?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"n\">FV</span> <span class=\"o\">(</span> <span class=\"n\">sub</span> <span class=\"o\">(</span> <span class=\"n\">pre_term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">y</span> <span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">FV</span> <span class=\"o\">(</span> <span class=\"n\">N</span> <span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">s2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s4</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">FV</span> <span class=\"o\">(</span> <span class=\"n\">N</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s3</span> <span class=\"bp\">▸</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 168892271,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1561417036
    },
    {
        "content": "<p><code>have s4 : z ∈ FV ( N ), from (show FV ( sub ( pre_term.var y ) x N ) = FV ( N ), by rw s2) ▸ a2,</code> might work</p>",
        "id": 168912832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561443957
    }
]