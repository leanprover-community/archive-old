[
    {
        "content": "<p>I've been trying to prove Bézout's identity, but am stuck on the fact that the normal proof involves using the Euclidean algorithm indefinitely</p>",
        "id": 191405718,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584896910
    },
    {
        "content": "<p>Can someone give a few hints on how to start/proceed?</p>",
        "id": 191405727,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584896925
    },
    {
        "content": "<p>I'm not sure that proofs are allowed to be indefinitely long, in mathlib or otherwise :-)</p>",
        "id": 191405735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584896940
    },
    {
        "content": "<p>Did you look at the proof which is already in mathlib?</p>",
        "id": 191405753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584896971
    },
    {
        "content": "<p>whoops I meant that it uses the Euclidean algorithm until there is no remainder left</p>",
        "id": 191405847,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584897087
    },
    {
        "content": "<p>I'll take a look, thanks!</p>",
        "id": 191405851,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584897098
    },
    {
        "content": "<p>right, so it basically uses induction.</p>",
        "id": 191405855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584897105
    },
    {
        "content": "<p>I haven't looked at what is in the repo, but if b&lt;=a then you could prove that gcd(a,b) is a Z-linear combination of a and b by strong induction on a, and the inductive step could be done by observing that gcd(a,b)=gcd(a-b,b)</p>",
        "id": 191405926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584897180
    },
    {
        "content": "<p>The way it is done in mathlib is to slightly modify the definition of <code>gcd</code> to calculate the coefficients at the same time as it is doing the euclidean division</p>",
        "id": 191406135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584897399
    },
    {
        "content": "<p>by mathlib do you mean the github page?</p>",
        "id": 191406159,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584897434
    },
    {
        "content": "<p>sorry Im having a little trouble finding it</p>",
        "id": 191406164,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584897441
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/\">https://github.com/leanprover/mathlib/</a></p>",
        "id": 191406172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584897456
    },
    {
        "content": "<p>Do you have a Lean project set up and a working <code>leanproject</code> command?</p>",
        "id": 191406180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584897472
    },
    {
        "content": "<p>That is, the work needed to prove <code>gcd</code> exists in the first place is about the same as that needed to prove that it is a linear combination of the inputs</p>",
        "id": 191406224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584897492
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/78ffbae077c50ed8ee060b3ac544f6f1d4359f39/src/data/int/gcd.lean#L62\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/78ffbae077c50ed8ee060b3ac544f6f1d4359f39/src/data/int/gcd.lean#L62\">Here is the theorem in mathlib</a> but if you have set up a Lean project with mathlib as a dependency then all that code is on your computer already.</p>",
        "id": 191406264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584897601
    },
    {
        "content": "<p>alright, thanks</p>",
        "id": 191406314,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584897629
    },
    {
        "content": "<p>They prove a constructive version of Bezout there, i.e. they actually come up with functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\lambda(a,b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mu(a,b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>=</mo><mi>λ</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi>a</mi><mo>+</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">d=\\lambda(a,b)a+\\mu(a,b)b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">λ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mord mathdefault\">b</span></span></span></span>.</p>",
        "id": 191406327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584897659
    },
    {
        "content": "<p>this is what <code>gcd_a</code> and <code>gcd_b</code> are. They can't call them <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span> is already used up for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span>-calculus :-)</p>",
        "id": 191406397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584897724
    },
    {
        "content": "<p>actually I think the idea behind the naming convention is that <code>gcd_a x y</code> and <code>gcd_b x y</code> are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> in the equation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">gcd(x,y)=ax+by</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>",
        "id": 191406509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584897933
    },
    {
        "content": "<p>Hm, my name should be on that file, it looks like the proof got transplanted from another file and the attribution got separated from it</p>",
        "id": 191406650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584898105
    },
    {
        "content": "<p>In France, Bézout's theorem is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>a</mi><mo>+</mo><mi>v</mi><mi>b</mi><mo>=</mo><mrow><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">g</mi><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">d</mi></mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ua + vb = \\mathrm{pgcd}(a, b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">g</span><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">d</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span></span></span></span> so I always found mathlib utterly confusing hehre.</p>",
        "id": 191406780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584898280
    },
    {
        "content": "<p>we could change the names to <code>gcd_u</code> and <code>gcd_v</code>. There seems to be no name that is at all descriptive</p>",
        "id": 191406839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584898334
    },
    {
        "content": "<p>Clearly the letter pairs are not allocated reliably</p>",
        "id": 191406852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584898360
    },
    {
        "content": "<p>I don't have a good solution here (and I don't think we should spend too much time thinking about this).</p>",
        "id": 191409565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584902156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Bezout's.20identity/near/191406650\" title=\"#narrow/stream/113489-new-members/topic/Bezout's.20identity/near/191406650\">said</a>:</p>\n<blockquote>\n<p>Hm, my name should be on that file, it looks like the proof got transplanted from another file and the attribution got separated from it</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/2217\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/2217\">https://github.com/leanprover-community/mathlib/pull/2217</a></p>",
        "id": 191423187,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584921987
    },
    {
        "content": "<p>thanks!</p>",
        "id": 191428683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584932017
    }
]