[
    {
        "content": "<p>What is the difference between implicit arguments in <code>{}</code> vs implicit arguments in <code>{{}}</code> in Lean 4?</p>",
        "id": 252100405,
        "sender_full_name": "Adrian",
        "timestamp": 1630874268
    },
    {
        "content": "<p>Can one ask lean to show the choices it has made for implicit arguments?</p>",
        "id": 267790093,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1642023729
    },
    {
        "content": "<p>Click on the stuff in the infoview!</p>",
        "id": 267790632,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642023986
    },
    {
        "content": "<p>Or maybe you want to see how a goal was closed?</p>",
        "id": 267791023,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642024182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/implicit.20arguments/near/267790632\">said</a>:</p>\n<blockquote>\n<p>Click on the stuff in the infoview!</p>\n</blockquote>\n<p>If you have theorem blah {implicits} (explicits) : (conclusion) := function....<br>\ncan you extract the implicit assignments?</p>",
        "id": 267791121,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1642024214
    },
    {
        "content": "<p>What do you mean \"extract\"? Just get to know them?</p>",
        "id": 267791245,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642024301
    },
    {
        "content": "<p>You can always use <code>show_term</code></p>",
        "id": 267791295,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642024322
    },
    {
        "content": "<p>When I want to know Lean's final decision on what's implicit and what's explicit, I use <code>#print blah</code></p>",
        "id": 267791513,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642024436
    },
    {
        "content": "<p>Here's what I'm trying to understand.  In the proof that equality is symmetric, we have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_eliminator, subst]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eq.subst</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq.rec</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">▸</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"o\">:=</span> <span class=\"n\">eq.subst</span>\n\n<span class=\"kd\">@[trans]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq.trans</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">@[symm]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq.symm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The predicate P is an implicit argument to the subst lemma. It's not given explicitly in the proofs of trans and symm. What, exactly,<br>\nhas it inferred for P?</p>",
        "id": 267792037,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1642024695
    },
    {
        "content": "<p>In <code>eq.trans</code> it's calling <code>eq.subst h₂ h₁</code>. So <code>h2</code> and <code>h1</code> are the explicit arguments. It gets a bit confusing because <code>h1</code> and <code>h2</code> get interchanged on that call of <code>eq.subst</code></p>",
        "id": 267792871,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642025146
    },
    {
        "content": "<p>But to call eq.subst it needs to infer the predicate P, and that’s what is like to understand.</p>",
        "id": 267793274,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1642025354
    },
    {
        "content": "<p>You can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"k\">#print</span> <span class=\"n\">eq.symm</span>\n</code></pre></div>",
        "id": 267793563,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642025510
    }
]