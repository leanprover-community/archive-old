[
    {
        "content": "<p>This is probably a question with a simple answer, but I'll ask it either way. Is there a way to programmatically extract the sequence of tactics used to prove a given lemma? I can get the proof term pretty easily by doing something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_namespace</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">gt</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_val</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">ml</span>  <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">(</span><span class=\"n\">mk_str_name</span> <span class=\"s2\">&quot;my_namespace&quot;</span> <span class=\"s2\">&quot;my_lemma&quot;</span><span class=\"o\">),</span>\n  <span class=\"n\">fmt</span> <span class=\"err\">←</span> <span class=\"n\">tactic_format_expr</span> <span class=\"n\">ml</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;type  : &quot;</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"err\">$</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span> <span class=\"n\">ml</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;value : &quot;</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"err\">$</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span> <span class=\"n\">ml</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"n\">unit</span><span class=\"bp\">.</span><span class=\"n\">star</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_namespace</span>\n</pre></div>\n\n\n<p>but I haven't had any luck extracting tactics yet. On another note, is there some function other than <code>expr.to_raw_fmt</code> for serializing expressions?</p>",
        "id": 147516992,
        "sender_full_name": "Michael Jendrusch",
        "timestamp": 1542018336
    },
    {
        "content": "<p>No. It's not stored</p>",
        "id": 147517509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542019010
    },
    {
        "content": "<p>What do you mean \"serializing\"?</p>",
        "id": 147517700,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1542019302
    },
    {
        "content": "<p>Serializing, as in generating some text (s-expression, JSON) or binary representation of expressions which can be read from another program. But I suppose <code>expr.to_raw_fmt</code>should be enough for my purposes.</p>",
        "id": 147519876,
        "sender_full_name": "Michael Jendrusch",
        "timestamp": 1542022157
    }
]